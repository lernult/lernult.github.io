(()=>{"use strict";var e={142:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(537),i=n.n(r),o=n(645),s=n.n(o)()(i());s.push([e.id,'*{box-sizing:border-box}html{user-select:none;overflow:hidden}html body{background-color:#222;width:100vw;height:100vh;overflow:hidden;position:relative;padding:0;margin:0}.wheel{--x: 0px;--y: 0px;position:absolute;top:var(--y);left:var(--x);width:396px;height:396px;transform:translate(-50%, -100%);transform-origin:0% 0%}.wheel.on .arc{opacity:.8;transform:scale(1) rotate(var(--rotation)) !important;transition-timing-function:cubic-bezier(0, 0.5, 0.5, 1.5)}.wheel .arc{position:absolute;top:0;right:0;width:50%;height:50%;transform-origin:0% 100%;background-image:radial-gradient(circle at 0% 100%, transparent, transparent 29.5%, var(--color-border) 30%, var(--color-border) 30.5%, var(--color) 31%, var(--color) 50%, var(--color-border) 50.25%, var(--color-border) 51.5%, transparent 51.75%, transparent);-webkit-clip-path:polygon(0 0, 0 99%, 99% 0);clip-path:polygon(0 0, 0 99%, 99% 0);opacity:0;transform:scale(0) rotate(var(--rotation))}.wheel .arc i{position:absolute;top:40%;left:15%;font-size:2rem;transform:rotate(calc(var(--rotation) * -1));color:rgba(255,255,255,.8);transition:color .3s}.wheel[data-chosen="1"] .arc:nth-child(1){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="1"] .arc:nth-child(1) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(1){--rotation: -22.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}.wheel[data-chosen="2"] .arc:nth-child(2){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="2"] .arc:nth-child(2) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(2){--rotation: 22.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}.wheel[data-chosen="3"] .arc:nth-child(3){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="3"] .arc:nth-child(3) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(3){--rotation: 67.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}.wheel[data-chosen="4"] .arc:nth-child(4){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="4"] .arc:nth-child(4) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(4){--rotation: 112.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}.wheel[data-chosen="5"] .arc:nth-child(5){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="5"] .arc:nth-child(5) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(5){--rotation: 157.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}.wheel[data-chosen="6"] .arc:nth-child(6){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="6"] .arc:nth-child(6) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(6){--rotation: 202.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}.wheel[data-chosen="7"] .arc:nth-child(7){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="7"] .arc:nth-child(7) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(7){--rotation: 247.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}.wheel[data-chosen="8"] .arc:nth-child(8){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="8"] .arc:nth-child(8) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(8){--rotation: 292.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}',"",{version:3,sources:["webpack://./src/components/wheel.scss"],names:[],mappings:"AAAA,EACI,qBAAA,CAGJ,KACI,gBAAA,CACA,eAAA,CAEA,UACI,qBAAA,CACA,WAAA,CACA,YAAA,CACA,eAAA,CACA,iBAAA,CACA,SAAA,CACA,QAAA,CAIR,OACI,QAAA,CACA,QAAA,CACA,iBAAA,CACA,YAAA,CACA,aAAA,CACA,WAAA,CACA,YAAA,CACA,gCAAA,CACA,sBAAA,CAGI,eACI,UAAA,CACA,qDAAA,CACA,yDAAA,CAIR,YACI,iBAAA,CACA,KAAA,CACA,OAAA,CACA,SAAA,CACA,UAAA,CACA,wBAAA,CACA,mQAAA,CAIA,4CAAA,CACA,oCAAA,CACA,SAAA,CACA,0CAAA,CAEA,cACI,iBAAA,CACA,OAAA,CACA,QAAA,CACA,cAAA,CACA,4CAAA,CACA,0BAAA,CACA,oBAAA,CAOI,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,oBAAA,CAGA,8BAAA,CACA,qCAAA,CAlBA,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,mBAAA,CAGA,8BAAA,CACA,qCAAA,CAlBA,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,mBAAA,CAGA,8BAAA,CACA,qCAAA,CAlBA,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,oBAAA,CAGA,8BAAA,CACA,qCAAA,CAlBA,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,oBAAA,CAGA,8BAAA,CACA,qCAAA,CAlBA,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,oBAAA,CAGA,8BAAA,CACA,qCAAA,CAlBA,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,oBAAA,CAGA,8BAAA,CACA,qCAAA,CAlBA,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,oBAAA,CAGA,8BAAA,CACA,qCAAA",sourcesContent:["* {\n    box-sizing: border-box;\n}\n\nhtml {\n    user-select: none;\n    overflow: hidden;\n\n    body {\n        background-color: #222;\n        width: 100vw;\n        height: 100vh;\n        overflow: hidden;\n        position: relative;\n        padding: 0;\n        margin: 0;\n    }\n}\n\n.wheel {\n    --x: 0px;\n    --y: 0px;\n    position: absolute;\n    top: var(--y);\n    left: var(--x);\n    width: 396px;\n    height: 396px;\n    transform: translate(-50%, -100%);\n    transform-origin: 0% 0%;\n\n    &.on {\n        .arc {\n            opacity: 0.8;\n            transform: scale(1) rotate(var(--rotation)) !important;\n            transition-timing-function: cubic-bezier(0, 0.5, 0.5, 1.5);\n        }\n    }\n\n    .arc {\n        position: absolute;\n        top: 0;\n        right: 0;\n        width: 50%;\n        height: 50%;\n        transform-origin: 0% 100%;\n        background-image: radial-gradient(circle at 0% 100%, transparent, transparent 29.5%, var(--color-border) 30%, var(--color-border) 30.5%, var(--color) 31%, var(--color) 50%, var(--color-border) 50.25%, var(--color-border) 51.5%, transparent 51.75%, transparent);\n        // transition-property: transform, opacity;\n        // transition-duration: 0.3s;\n        // transition-timing-function: cubic-bezier(0.4, -0.4, 0.7, -0.3);\n        -webkit-clip-path: polygon(0 0, 0 99%, 99% 0);\n        clip-path: polygon(0 0, 0 99%, 99% 0);\n        opacity: 0;\n        transform: scale(0) rotate(var(--rotation));\n\n        i {\n            position: absolute;\n            top: 40%;\n            left: 15%;\n            font-size: 2rem;\n            transform: rotate(calc(var(--rotation) * -1));\n            color: rgba(255, 255, 255, 0.8);\n            transition: color 0.3s;\n        }\n    }\n\n    @for $i from 1 through 8 {\n        &[data-chosen='#{$i}'] {\n            .arc {\n                &:nth-child(#{$i}) {\n                    opacity: 1;\n                    transform: scale(1.1) rotate(var(--rotation)) !important;\n                    filter: brightness(150%);\n\n                    i {\n                        color: rgba(0, 0, 0, 0.5);\n                    }\n                }\n            }\n        }\n\n        .arc {\n            &:nth-child(#{$i}) {\n                --rotation: #{-22.5 + ($i - 1) * 45}deg;\n                // --color: hsl(calc(#{($i - 1) * 45}deg + 0deg), 36%, 36%);\n                // --color-border: hsl(calc(#{($i - 1) * 45}deg + 90deg), 36%, 60%);\n                --color: hsl(180deg, 36%, 36%);\n                --color-border: hsl(180deg, 36%, 36%);\n                // transition-delay: #{($i % 2) * 0.015}s;\n            }\n        }\n    }\n}"],sourceRoot:""}]);const a=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&s[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},s=[],a=0;a<e.length;a++){var c=e[a],l=r.base?c[0]+r.base:c[0],u=o[l]||0,d="".concat(l," ").concat(u);o[l]=u+1;var f=n(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=i(p,r);r.byIndex=a,t.splice(a,0,{identifier:d,updater:h,references:1})}s.push(d)}return s}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var a=n(o[s]);t[a].references--}for(var c=r(e,i),l=0;l<o.length;l++){var u=n(o[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e,t,r,i,o,s,a,c,l,u={},d=[],f=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,p=Array.isArray;function h(e,t){for(var n in t)e[n]=t[n];return e}function m(e){var t=e.parentNode;t&&t.removeChild(e)}function v(t,n,r){var i,o,s,a={};for(s in n)"key"==s?i=n[s]:"ref"==s?o=n[s]:a[s]=n[s];if(arguments.length>2&&(a.children=arguments.length>3?e.call(arguments,2):r),"function"==typeof t&&null!=t.defaultProps)for(s in t.defaultProps)void 0===a[s]&&(a[s]=t.defaultProps[s]);return _(t,a,i,o,null)}function _(e,n,i,o,s){var a={type:e,props:n,key:i,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:null==s?++r:s,__i:-1,__u:0};return null==s&&null!=t.vnode&&t.vnode(a),a}function g(e){return e.children}function w(e,t){this.props=e,this.context=t}function b(e,t){if(null==t)return e.__?b(e.__,e.__i+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?b(e):null}function x(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return x(e)}}function y(e){(!e.__d&&(e.__d=!0)&&o.push(e)&&!k.__r++||s!==t.debounceRendering)&&((s=t.debounceRendering)||a)(k)}function k(){var e,n,r,i,s,a,l,u,d;for(o.sort(c);e=o.shift();)e.__d&&(n=o.length,i=void 0,a=(s=(r=e).__v).__e,u=[],d=[],(l=r.__P)&&((i=h({},s)).__v=s.__v+1,t.vnode&&t.vnode(i),j(l,i,s,r.__n,void 0!==l.ownerSVGElement,32&s.__u?[a]:null,u,null==a?b(s):a,!!(32&s.__u),d),i.__.__k[i.__i]=i,I(u,i,d),i.__e!=a&&x(i)),o.length>n&&o.sort(c));k.__r=0}function A(e,t,n,r,i,o,s,a,c,l,f){var p,h,m,v,_,g=r&&r.__k||d,w=t.length;for(n.__d=c,C(n,t,g),c=n.__d,p=0;p<w;p++)null!=(m=n.__k[p])&&"boolean"!=typeof m&&"function"!=typeof m&&(h=-1===m.__i?u:g[m.__i]||u,m.__i=p,j(e,m,h,i,o,s,a,c,l,f),v=m.__e,m.ref&&h.ref!=m.ref&&(h.ref&&q(h.ref,null,m),f.push(m.ref,m.__c||v,m)),null==_&&null!=v&&(_=v),65536&m.__u||h.__k===m.__k?c=S(m,c,e):"function"==typeof m.type&&void 0!==m.__d?c=m.__d:v&&(c=v.nextSibling),m.__d=void 0,m.__u&=-196609);n.__d=c,n.__e=_}function C(e,t,n){var r,i,o,s,a,c=t.length,l=n.length,u=l,d=0;for(e.__k=[],r=0;r<c;r++)null!=(i=e.__k[r]=null==(i=t[r])||"boolean"==typeof i||"function"==typeof i?null:"string"==typeof i||"number"==typeof i||"bigint"==typeof i||i.constructor==String?_(null,i,null,null,i):p(i)?_(g,{children:i},null,null,null):i.__b>0?_(i.type,i.props,i.key,i.ref?i.ref:null,i.__v):i)?(i.__=e,i.__b=e.__b+1,a=z(i,n,s=r+d,u),i.__i=a,o=null,-1!==a&&(u--,(o=n[a])&&(o.__u|=131072)),null==o||null===o.__v?(-1==a&&d--,"function"!=typeof i.type&&(i.__u|=65536)):a!==s&&(a===s+1?d++:a>s?u>c-s?d+=a-s:d--:d=a<s&&a==s-1?a-s:0,a!==r+d&&(i.__u|=65536))):(o=n[r])&&null==o.key&&o.__e&&(o.__e==e.__d&&(e.__d=b(o)),F(o,o,!1),n[r]=null,u--);if(u)for(r=0;r<l;r++)null!=(o=n[r])&&0==(131072&o.__u)&&(o.__e==e.__d&&(e.__d=b(o)),F(o,o))}function S(e,t,n){var r,i;if("function"==typeof e.type){for(r=e.__k,i=0;r&&i<r.length;i++)r[i]&&(r[i].__=e,t=S(r[i],t,n));return t}return e.__e!=t&&(n.insertBefore(e.__e,t||null),t=e.__e),t&&t.nextSibling}function z(e,t,n,r){var i=e.key,o=e.type,s=n-1,a=n+1,c=t[n];if(null===c||c&&i==c.key&&o===c.type)return n;if(r>(null!=c&&0==(131072&c.__u)?1:0))for(;s>=0||a<t.length;){if(s>=0){if((c=t[s])&&0==(131072&c.__u)&&i==c.key&&o===c.type)return s;s--}if(a<t.length){if((c=t[a])&&0==(131072&c.__u)&&i==c.key&&o===c.type)return a;a++}}return-1}function E(e,t,n){"-"===t[0]?e.setProperty(t,null==n?"":n):e[t]=null==n?"":"number"!=typeof n||f.test(t)?n:n+"px"}function W(e,t,n,r,i){var o;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||E(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||E(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])o=t!==(t=t.replace(/(PointerCapture)$|Capture$/,"$1")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+o]=n,n?r?n.u=r.u:(n.u=Date.now(),e.addEventListener(t,o?D:U,o)):e.removeEventListener(t,o?D:U,o);else{if(i)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==t&&"height"!==t&&"href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&"rowSpan"!==t&&"colSpan"!==t&&"role"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null==n||!1===n&&"-"!==t[4]?e.removeAttribute(t):e.setAttribute(t,n))}}function U(e){var n=this.l[e.type+!1];if(e.t){if(e.t<=n.u)return}else e.t=Date.now();return n(t.event?t.event(e):e)}function D(e){return this.l[e.type+!0](t.event?t.event(e):e)}function j(e,n,r,i,o,s,a,c,l,u){var d,f,m,v,_,b,x,y,k,C,S,z,E,W,U,D=n.type;if(void 0!==n.constructor)return null;128&r.__u&&(l=!!(32&r.__u),s=[c=n.__e=r.__e]),(d=t.__b)&&d(n);e:if("function"==typeof D)try{if(y=n.props,k=(d=D.contextType)&&i[d.__c],C=d?k?k.props.value:d.__:i,r.__c?x=(f=n.__c=r.__c).__=f.__E:("prototype"in D&&D.prototype.render?n.__c=f=new D(y,C):(n.__c=f=new w(y,C),f.constructor=D,f.render=L),k&&k.sub(f),f.props=y,f.state||(f.state={}),f.context=C,f.__n=i,m=f.__d=!0,f.__h=[],f._sb=[]),null==f.__s&&(f.__s=f.state),null!=D.getDerivedStateFromProps&&(f.__s==f.state&&(f.__s=h({},f.__s)),h(f.__s,D.getDerivedStateFromProps(y,f.__s))),v=f.props,_=f.state,f.__v=n,m)null==D.getDerivedStateFromProps&&null!=f.componentWillMount&&f.componentWillMount(),null!=f.componentDidMount&&f.__h.push(f.componentDidMount);else{if(null==D.getDerivedStateFromProps&&y!==v&&null!=f.componentWillReceiveProps&&f.componentWillReceiveProps(y,C),!f.__e&&(null!=f.shouldComponentUpdate&&!1===f.shouldComponentUpdate(y,f.__s,C)||n.__v===r.__v)){for(n.__v!==r.__v&&(f.props=y,f.state=f.__s,f.__d=!1),n.__e=r.__e,n.__k=r.__k,n.__k.forEach((function(e){e&&(e.__=n)})),S=0;S<f._sb.length;S++)f.__h.push(f._sb[S]);f._sb=[],f.__h.length&&a.push(f);break e}null!=f.componentWillUpdate&&f.componentWillUpdate(y,f.__s,C),null!=f.componentDidUpdate&&f.__h.push((function(){f.componentDidUpdate(v,_,b)}))}if(f.context=C,f.props=y,f.__P=e,f.__e=!1,z=t.__r,E=0,"prototype"in D&&D.prototype.render){for(f.state=f.__s,f.__d=!1,z&&z(n),d=f.render(f.props,f.state,f.context),W=0;W<f._sb.length;W++)f.__h.push(f._sb[W]);f._sb=[]}else do{f.__d=!1,z&&z(n),d=f.render(f.props,f.state,f.context),f.state=f.__s}while(f.__d&&++E<25);f.state=f.__s,null!=f.getChildContext&&(i=h(h({},i),f.getChildContext())),m||null==f.getSnapshotBeforeUpdate||(b=f.getSnapshotBeforeUpdate(v,_)),A(e,p(U=null!=d&&d.type===g&&null==d.key?d.props.children:d)?U:[U],n,r,i,o,s,a,c,l,u),f.base=n.__e,n.__u&=-161,f.__h.length&&a.push(f),x&&(f.__E=f.__=null)}catch(e){n.__v=null,l||null!=s?(n.__e=c,n.__u|=l?160:32,s[s.indexOf(c)]=null):(n.__e=r.__e,n.__k=r.__k),t.__e(e,n,r)}else null==s&&n.__v===r.__v?(n.__k=r.__k,n.__e=r.__e):n.__e=T(r.__e,n,r,i,o,s,a,l,u);(d=t.diffed)&&d(n)}function I(e,n,r){n.__d=void 0;for(var i=0;i<r.length;i++)q(r[i],r[++i],r[++i]);t.__c&&t.__c(n,e),e.some((function(n){try{e=n.__h,n.__h=[],e.some((function(e){e.call(n)}))}catch(e){t.__e(e,n.__v)}}))}function T(t,n,r,i,o,s,a,c,l){var d,f,h,v,_,g,w,x=r.props,y=n.props,k=n.type;if("svg"===k&&(o=!0),null!=s)for(d=0;d<s.length;d++)if((_=s[d])&&"setAttribute"in _==!!k&&(k?_.localName===k:3===_.nodeType)){t=_,s[d]=null;break}if(null==t){if(null===k)return document.createTextNode(y);t=o?document.createElementNS("http://www.w3.org/2000/svg",k):document.createElement(k,y.is&&y),s=null,c=!1}if(null===k)x===y||c&&t.data===y||(t.data=y);else{if(s=s&&e.call(t.childNodes),x=r.props||u,!c&&null!=s)for(x={},d=0;d<t.attributes.length;d++)x[(_=t.attributes[d]).name]=_.value;for(d in x)_=x[d],"children"==d||("dangerouslySetInnerHTML"==d?h=_:"key"===d||d in y||W(t,d,null,_,o));for(d in y)_=y[d],"children"==d?v=_:"dangerouslySetInnerHTML"==d?f=_:"value"==d?g=_:"checked"==d?w=_:"key"===d||c&&"function"!=typeof _||x[d]===_||W(t,d,_,x[d],o);if(f)c||h&&(f.__html===h.__html||f.__html===t.innerHTML)||(t.innerHTML=f.__html),n.__k=[];else if(h&&(t.innerHTML=""),A(t,p(v)?v:[v],n,r,i,o&&"foreignObject"!==k,s,a,s?s[0]:r.__k&&b(r,0),c,l),null!=s)for(d=s.length;d--;)null!=s[d]&&m(s[d]);c||(d="value",void 0!==g&&(g!==t[d]||"progress"===k&&!g||"option"===k&&g!==x[d])&&W(t,d,g,x[d],!1),d="checked",void 0!==w&&w!==t[d]&&W(t,d,w,x[d],!1))}return t}function q(e,n,r){try{"function"==typeof e?e(n):e.current=n}catch(e){t.__e(e,r)}}function F(e,n,r){var i,o;if(t.unmount&&t.unmount(e),(i=e.ref)&&(i.current&&i.current!==e.__e||q(i,null,n)),null!=(i=e.__c)){if(i.componentWillUnmount)try{i.componentWillUnmount()}catch(e){t.__e(e,n)}i.base=i.__P=null,e.__c=void 0}if(i=e.__k)for(o=0;o<i.length;o++)i[o]&&F(i[o],n,r||"function"!=typeof e.type);r||null==e.__e||m(e.__e),e.__=e.__e=e.__d=void 0}function L(e,t,n){return this.constructor(e,n)}function B(t,n,r){var i,o,s,a,c=h({},t.props);for(s in t.type&&t.type.defaultProps&&(a=t.type.defaultProps),n)"key"==s?i=n[s]:"ref"==s?o=n[s]:c[s]=void 0===n[s]&&void 0!==a?a[s]:n[s];return arguments.length>2&&(c.children=arguments.length>3?e.call(arguments,2):r),_(t.type,c,i||t.key,o||t.ref,null)}function O(e,t){var n={__c:t="__cC"+l++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var n,r;return this.getChildContext||(n=[],(r={})[t]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&n.some((function(e){e.__e=!0,y(e)}))},this.sub=function(e){n.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){n.splice(n.indexOf(e),1),t&&t.call(e)}}),e.children}};return n.Provider.__=n.Consumer.contextType=n}e=d.slice,t={__e:function(e,t,n,r){for(var i,o,s;t=t.__;)if((i=t.__c)&&!i.__)try{if((o=i.constructor)&&null!=o.getDerivedStateFromError&&(i.setState(o.getDerivedStateFromError(e)),s=i.__d),null!=i.componentDidCatch&&(i.componentDidCatch(e,r||{}),s=i.__d),s)return i.__E=i}catch(t){e=t}throw e}},r=0,i=function(e){return null!=e&&null==e.constructor},w.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=h({},this.state),"function"==typeof e&&(e=e(h({},n),this.props)),e&&h(n,e),null!=e&&this.__v&&(t&&this._sb.push(t),y(this))},w.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),y(this))},w.prototype.render=g,o=[],a="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,c=function(e,t){return e.__v.__b-t.__v.__b},k.__r=0,l=0;var M=0;function P(e,n,r,i,o,s){var a,c,l={};for(c in n)"ref"==c?a=n[c]:l[c]=n[c];var u={type:e,props:l,key:r,ref:a,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:--M,__i:-1,__u:0,__source:o,__self:s};if("function"==typeof e&&(a=e.defaultProps))for(c in a)void 0===l[c]&&(l[c]=a[c]);return t.vnode&&t.vnode(u),u}Array.isArray;var N,R,V,H,K=0,$=[],Y=[],G=t.__b,Z=t.__r,X=t.diffed,J=t.__c,Q=t.unmount;function ee(e,n){t.__h&&t.__h(R,e,K||n),K=0;var r=R.__H||(R.__H={__:[],__h:[]});return e>=r.__.length&&r.__.push({__V:Y}),r.__[e]}function te(e){return K=1,function(e,t,n){var r=ee(N++,2);if(r.t=e,!r.__c&&(r.__=[de(void 0,t),function(e){var t=r.__N?r.__N[0]:r.__[0],n=r.t(t,e);t!==n&&(r.__N=[n,r.__[1]],r.__c.setState({}))}],r.__c=R,!R.u)){var i=function(e,t,n){if(!r.__c.__H)return!0;var i=r.__c.__H.__.filter((function(e){return e.__c}));if(i.every((function(e){return!e.__N})))return!o||o.call(this,e,t,n);var s=!1;return i.forEach((function(e){if(e.__N){var t=e.__[0];e.__=e.__N,e.__N=void 0,t!==e.__[0]&&(s=!0)}})),!(!s&&r.__c.props===e)&&(!o||o.call(this,e,t,n))};R.u=!0;var o=R.shouldComponentUpdate,s=R.componentWillUpdate;R.componentWillUpdate=function(e,t,n){if(this.__e){var r=o;o=void 0,i(e,t,n),o=r}s&&s.call(this,e,t,n)},R.shouldComponentUpdate=i}return r.__N||r.__}(de,e)}function ne(e,n){var r=ee(N++,3);!t.__s&&ue(r.__H,n)&&(r.__=e,r.i=n,R.__H.__h.push(r))}function re(e,n){var r=ee(N++,4);!t.__s&&ue(r.__H,n)&&(r.__=e,r.i=n,R.__h.push(r))}function ie(e,t){var n=ee(N++,7);return ue(n.__H,t)?(n.__V=e(),n.i=t,n.__h=e,n.__V):n.__}function oe(){for(var e;e=$.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(ce),e.__H.__h.forEach(le),e.__H.__h=[]}catch(n){e.__H.__h=[],t.__e(n,e.__v)}}t.__b=function(e){R=null,G&&G(e)},t.__r=function(e){Z&&Z(e),N=0;var t=(R=e.__c).__H;t&&(V===R?(t.__h=[],R.__h=[],t.__.forEach((function(e){e.__N&&(e.__=e.__N),e.__V=Y,e.__N=e.i=void 0}))):(t.__h.forEach(ce),t.__h.forEach(le),t.__h=[],N=0)),V=R},t.diffed=function(e){X&&X(e);var n=e.__c;n&&n.__H&&(n.__H.__h.length&&(1!==$.push(n)&&H===t.requestAnimationFrame||((H=t.requestAnimationFrame)||ae)(oe)),n.__H.__.forEach((function(e){e.i&&(e.__H=e.i),e.__V!==Y&&(e.__=e.__V),e.i=void 0,e.__V=Y}))),V=R=null},t.__c=function(e,n){n.some((function(e){try{e.__h.forEach(ce),e.__h=e.__h.filter((function(e){return!e.__||le(e)}))}catch(r){n.some((function(e){e.__h&&(e.__h=[])})),n=[],t.__e(r,e.__v)}})),J&&J(e,n)},t.unmount=function(e){Q&&Q(e);var n,r=e.__c;r&&r.__H&&(r.__H.__.forEach((function(e){try{ce(e)}catch(e){n=e}})),r.__H=void 0,n&&t.__e(n,r.__v))};var se="function"==typeof requestAnimationFrame;function ae(e){var t,n=function(){clearTimeout(r),se&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);se&&(t=requestAnimationFrame(n))}function ce(e){var t=R,n=e.__c;"function"==typeof n&&(e.__c=void 0,n()),R=t}function le(e){var t=R;e.__c=e.__(),R=t}function ue(e,t){return!e||e.length!==t.length||t.some((function(t,n){return t!==e[n]}))}function de(e,t){return"function"==typeof t?t(e):t}const fe=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement);function pe(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}const he=e=>{const t=(n=[e,(...e)=>t[0](...e)],K=5,ie((function(){return{current:n}}),[])).current;var n;return re((()=>{t[0]=e})),t[1]},me=(e="",t=location.pathname)=>t.toLowerCase().indexOf(e.toLowerCase())?"~"+t:t.slice(e.length)||"/",ve="pushState",_e="replaceState",ge=["popstate",ve,_e,"hashchange"],we=e=>{for(const t of ge)addEventListener(t,e);return()=>{for(const t of ge)removeEventListener(t,e)}},be=()=>location.pathname,xe=({ssrPath:e}={})=>function(e,t,n){n&&!fe&&(t=n);const r=t(),[{_instance:i},o]=te({_instance:{_value:r,_getSnapshot:t}});return re((()=>{i._value=r,i._getSnapshot=t,pe(i._value,t())||o({_instance:i})}),[e,r,t]),ne((()=>(pe(i._value,i._getSnapshot())||o({_instance:i}),e((()=>{pe(i._value,i._getSnapshot())||o({_instance:i})})))),[e]),r}(we,be,e?()=>e:be);if("undefined"!=typeof history)for(const e of[ve,_e]){const t=history[e];history[e]=function(){const n=t.apply(this,arguments),r=new Event(e);return r.arguments=arguments,dispatchEvent(r),n}}const ye=e=>e.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),ke=(e,t,n)=>{let r=e?"((?:[^\\/]+?)(?:\\/(?:[^\\/]+?))*)":"([^\\/]+?)";return t&&n&&(r="(?:\\/"+r+")"),r+(t?"?":"")},Ae=e=>{const t=/:([A-Za-z0-9_]+)([?+*]?)/g;let n=null,r=0,i=[],o="";for(;null!==(n=t.exec(e));){const[s,a,c]=n,l="+"===c||"*"===c,u="?"===c||"*"===c,d=u&&"/"===e[n.index-1]?1:0,f=e.substring(r,n.index-d);i.push({name:a}),r=t.lastIndex,o+=ye(f)+ke(l,u,d)}return o+=ye(e.substring(r)),{keys:i,regexp:new RegExp("^"+o+"(?:\\/)?$","i")}},Ce={hook:(e={})=>[me(e.base,xe(e)),he(((t,n)=>((e,{replace:t=!1}={})=>history[t?_e:ve](null,"",e))(((e,t="")=>"~"===e[0]?e.slice(1):t+e)(t,e.base),n)))],matcher:function(e=Ae){let t={};return(n,r)=>{const{regexp:i,keys:o}=(n=>t[n]||(t[n]=e(n)))(n||""),s=i.exec(r);if(!s)return[!1,null];const a=o.reduce(((e,t,n)=>(e[t.name]=s[n+1],e)),{});return[!0,a]}}(),base:""},Se=O(Ce),ze=()=>function(e){var t=R.context[e.__c],n=ee(N++,9);return n.c=e,t?(null==n.__&&(n.__=!0,t.sub(R)),t.props.value):e.__}(Se),Ee=e=>e.hook(e),We=O({params:{}}),Ue=({path:e,match:t,component:n,children:r})=>{const i=(e=>{const t=ze(),[n]=Ee(t);return t.matcher(e,n)})(e),[o,s]=t||i;return o?((e,t)=>v(We.Provider,{value:{params:e},children:t}))(s,n?v(n,{params:s}):"function"==typeof r?r(s):r):null},De=e=>Array.isArray(e)?[].concat(...e.map((e=>e&&e.type===g?De(e.props.children):De(e)))):[e],je=({children:e,location:t})=>{const n=ze(),r=n.matcher,[o]=Ee(n);for(const n of De(e)){let e=0;if(i(n)&&(e=n.props.path?r(n.props.path,t||o):[!0,{}])[0])return B(n,{match:e})}return null};var Ie=function(){var e={},t=!1,n=function(t){return e[t]||(e[t]=[]),e[t]};return{subscribe:function(e,t){var r=n(e);return r.push(t),function(){var e=r.indexOf(t);r.splice(e,1)}},publish:function(e,r){n(e).slice().forEach((function(e){t||e(r)}))},destroy:function(){e={},t=!0}}},Te=function(){return Te=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},Te.apply(this,arguments)},qe=function(){return qe=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},qe.apply(this,arguments)};const Fe=function(){var e=Ie(),t=function(){var e=Ie(),t=document.createElement("video"),n=0,r={duration:0,playing:!1,volume:0},i=function(t){r=Te(Te({},r),t),e.publish("change",r)};return t.addEventListener("durationchange",(function(){return i({duration:t.duration})})),t.addEventListener("playing",(function(){return i({playing:!0})})),t.addEventListener("pause",(function(){return i({playing:!1})})),t.addEventListener("timeupdate",(function(){var r=Math.round(t.currentTime);n!==r&&(n=r,e.publish("change-current-time",n))})),t.addEventListener("volumechange",(function(){return i({volume:t.volume})})),i({volume:t.volume}),{seek:function(r){t.currentTime=r,n=r,e.publish("change-current-time",n)},getElement:function(){return t},getState:function(){return r},getCurrentTime:function(){return n},play:function(){t.play()},pause:function(){t.pause()},volume:function(e){t.volume=e},setUrl:function(e){t.setAttribute("src",e),i({playing:!1})},subscribe:function(t){return e.subscribe("change",t)},onChangeCurrentTime:function(t){return e.subscribe("change-current-time",t)},onEnded:function(e){return t.addEventListener("ended",e),function(){return t.removeEventListener("ended",e)}}}}(),n=qe(qe({},t.getState()),{tracks:[],currentTrackIndex:null,currentTrack:null}),r=function(t){n=qe(qe({},n),t),e.publish("change",n)};t.subscribe(r);var i=function(){var e=n.currentTrack;e&&(t.setUrl(e.url),t.play())},o=function(){if(null!==n.currentTrackIndex){var e=n.tracks.length-1,t=n.currentTrackIndex+1;t<=e&&(r({currentTrackIndex:t,currentTrack:n.tracks[t]}),i())}};return t.onEnded(o),{play:t.play,pause:t.pause,seek:t.seek,volume:t.volume,getCurrentTime:t.getCurrentTime,getElement:t.getElement,onChangeCurrentTime:t.onChangeCurrentTime,getState:function(){return n},setQueue:function(e){r({tracks:e})},playTrack:function(e){r({currentTrackIndex:e,currentTrack:n.tracks[e]}),i()},next:o,prev:function(){if(null!==n.currentTrackIndex){var e=n.currentTrackIndex-1;e>=0&&(r({currentTrack:n.tracks[e],currentTrackIndex:e}),i())}},subscribe:function(t){return e.subscribe("change",t)},updateSongStatus:function(e,t){var i=n.tracks.findIndex((function(t){return t.song.id===e})),o=function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}([],n.tracks,!0);o[i].status=t,r({tracks:o})}}}();var Le=function(){var e=te(Fe.getState()),t=e[0],n=e[1];return ne((function(){return Fe.subscribe(n)}),[]),t};const Be=function(e){var t=e.index,n=Le(),r="bg-indigo-600";switch(n.tracks[t].status){case"to_delete":r="bg-red-600";break;case"to_download":r="bg-green-600"}return P("div",{className:"w-16 h-16 ".concat(r," rounded-md"),onClick:function(){n.currentTrackIndex===t?n.playing?Fe.pause():Fe.play():Fe.playTrack(t)}})};function Oe(){throw new Error("Cycle detected")}var Me=Symbol.for("preact-signals");function Pe(){if(He>1)He--;else{for(var e,t=!1;void 0!==Ve;){var n=Ve;for(Ve=void 0,Ke++;void 0!==n;){var r=n.o;if(n.o=void 0,n.f&=-3,!(8&n.f)&&Xe(n))try{n.c()}catch(n){t||(e=n,t=!0)}n=r}}if(Ke=0,He--,t)throw e}}var Ne,Re=void 0,Ve=void 0,He=0,Ke=0,$e=0;function Ye(e){if(void 0!==Re){var t=e.n;if(void 0===t||t.t!==Re)return t={i:0,S:e,p:Re.s,n:void 0,t:Re,e:void 0,x:void 0,r:t},void 0!==Re.s&&(Re.s.n=t),Re.s=t,e.n=t,32&Re.f&&e.S(t),t;if(-1===t.i)return t.i=0,void 0!==t.n&&(t.n.p=t.p,void 0!==t.p&&(t.p.n=t.n),t.p=Re.s,t.n=void 0,Re.s.n=t,Re.s=t),t}}function Ge(e){this.v=e,this.i=0,this.n=void 0,this.t=void 0}function Ze(e){return new Ge(e)}function Xe(e){for(var t=e.s;void 0!==t;t=t.n)if(t.S.i!==t.i||!t.S.h()||t.S.i!==t.i)return!0;return!1}function Je(e){for(var t=e.s;void 0!==t;t=t.n){var n=t.S.n;if(void 0!==n&&(t.r=n),t.S.n=t,t.i=-1,void 0===t.n){e.s=t;break}}}function Qe(e){for(var t=e.s,n=void 0;void 0!==t;){var r=t.p;-1===t.i?(t.S.U(t),void 0!==r&&(r.n=t.n),void 0!==t.n&&(t.n.p=r)):n=t,t.S.n=t.r,void 0!==t.r&&(t.r=void 0),t=r}e.s=n}function et(e){Ge.call(this,void 0),this.x=e,this.s=void 0,this.g=$e-1,this.f=4}function tt(e){var t=e.u;if(e.u=void 0,"function"==typeof t){He++;var n=Re;Re=void 0;try{t()}catch(t){throw e.f&=-2,e.f|=8,nt(e),t}finally{Re=n,Pe()}}}function nt(e){for(var t=e.s;void 0!==t;t=t.n)t.S.U(t);e.x=void 0,e.s=void 0,tt(e)}function rt(e){if(Re!==this)throw new Error("Out-of-order effect");Qe(this),Re=e,this.f&=-2,8&this.f&&nt(this),Pe()}function it(e){this.x=e,this.u=void 0,this.s=void 0,this.o=void 0,this.f=32}function ot(e){var t=new it(e);try{t.c()}catch(e){throw t.d(),e}return t.d.bind(t)}function st(e,n){t[e]=n.bind(null,t[e]||function(){})}function at(e){Ne&&Ne(),Ne=e&&e.S()}function ct(e){var t=this,n=e.data,r=function(e){return ie((function(){return Ze(e)}),[])}(n);r.value=n;var o=ie((function(){for(var e=t.__v;e=e.__;)if(e.__c){e.__c.__$f|=4;break}return t.__$u.c=function(){var e;i(o.peek())||3!==(null==(e=t.base)?void 0:e.nodeType)?(t.__$f|=1,t.setState({})):t.base.data=o.peek()},new et((function(){var e=r.value.value;return 0===e?0:!0===e?"":e||""}))}),[]);return o.value}function lt(e,t,n,r){var i=t in e&&void 0===e.ownerSVGElement,o=Ze(n);return{o:function(e,t){o.value=e,r=t},d:ot((function(){var n=o.value.value;r[t]!==n&&(r[t]=n,i?e[t]=n:n?e.setAttribute(t,n):e.removeAttribute(t))}))}}Ge.prototype.brand=Me,Ge.prototype.h=function(){return!0},Ge.prototype.S=function(e){this.t!==e&&void 0===e.e&&(e.x=this.t,void 0!==this.t&&(this.t.e=e),this.t=e)},Ge.prototype.U=function(e){if(void 0!==this.t){var t=e.e,n=e.x;void 0!==t&&(t.x=n,e.e=void 0),void 0!==n&&(n.e=t,e.x=void 0),e===this.t&&(this.t=n)}},Ge.prototype.subscribe=function(e){var t=this;return ot((function(){var n=t.value,r=32&this.f;this.f&=-33;try{e(n)}finally{this.f|=r}}))},Ge.prototype.valueOf=function(){return this.value},Ge.prototype.toString=function(){return this.value+""},Ge.prototype.toJSON=function(){return this.value},Ge.prototype.peek=function(){return this.v},Object.defineProperty(Ge.prototype,"value",{get:function(){var e=Ye(this);return void 0!==e&&(e.i=this.i),this.v},set:function(e){if(Re instanceof et&&function(){throw new Error("Computed cannot have side-effects")}(),e!==this.v){Ke>100&&Oe(),this.v=e,this.i++,$e++,He++;try{for(var t=this.t;void 0!==t;t=t.x)t.t.N()}finally{Pe()}}}}),(et.prototype=new Ge).h=function(){if(this.f&=-3,1&this.f)return!1;if(32==(36&this.f))return!0;if(this.f&=-5,this.g===$e)return!0;if(this.g=$e,this.f|=1,this.i>0&&!Xe(this))return this.f&=-2,!0;var e=Re;try{Je(this),Re=this;var t=this.x();(16&this.f||this.v!==t||0===this.i)&&(this.v=t,this.f&=-17,this.i++)}catch(e){this.v=e,this.f|=16,this.i++}return Re=e,Qe(this),this.f&=-2,!0},et.prototype.S=function(e){if(void 0===this.t){this.f|=36;for(var t=this.s;void 0!==t;t=t.n)t.S.S(t)}Ge.prototype.S.call(this,e)},et.prototype.U=function(e){if(void 0!==this.t&&(Ge.prototype.U.call(this,e),void 0===this.t)){this.f&=-33;for(var t=this.s;void 0!==t;t=t.n)t.S.U(t)}},et.prototype.N=function(){if(!(2&this.f)){this.f|=6;for(var e=this.t;void 0!==e;e=e.x)e.t.N()}},et.prototype.peek=function(){if(this.h()||Oe(),16&this.f)throw this.v;return this.v},Object.defineProperty(et.prototype,"value",{get:function(){1&this.f&&Oe();var e=Ye(this);if(this.h(),void 0!==e&&(e.i=this.i),16&this.f)throw this.v;return this.v}}),it.prototype.c=function(){var e=this.S();try{if(8&this.f)return;if(void 0===this.x)return;var t=this.x();"function"==typeof t&&(this.u=t)}finally{e()}},it.prototype.S=function(){1&this.f&&Oe(),this.f|=1,this.f&=-9,tt(this),Je(this),He++;var e=Re;return Re=this,rt.bind(this,e)},it.prototype.N=function(){2&this.f||(this.f|=2,this.o=Ve,Ve=this)},it.prototype.d=function(){this.f|=8,1&this.f||nt(this)},ct.displayName="_st",Object.defineProperties(Ge.prototype,{constructor:{configurable:!0,value:void 0},type:{configurable:!0,value:ct},props:{configurable:!0,get:function(){return{data:this}}},__b:{configurable:!0,value:1}}),st("__b",(function(e,t){if("string"==typeof t.type){var n,r=t.props;for(var i in r)if("children"!==i){var o=r[i];o instanceof Ge&&(n||(t.__np=n={}),n[i]=o,r[i]=o.peek())}}e(t)})),st("__r",(function(e,t){at();var n,r=t.__c;r&&(r.__$f&=-2,void 0===(n=r.__$u)&&(r.__$u=n=function(e){var t;return ot((function(){t=this})),t.c=function(){r.__$f|=1,r.setState({})},t}())),at(n),e(t)})),st("__e",(function(e,t,n,r){at(),e(t,n,r)})),st("diffed",(function(e,t){var n;if(at(),"string"==typeof t.type&&(n=t.__e)){var r=t.__np,i=t.props;if(r){var o=n.U;if(o)for(var s in o){var a=o[s];void 0===a||s in r||(a.d(),o[s]=void 0)}else n.U=o={};for(var c in r){var l=o[c],u=r[c];void 0===l?(l=lt(n,c,u,i),o[c]=l):l.o(u,i)}}}e(t)})),st("unmount",(function(e,t){if("string"==typeof t.type){var n=t.__e;if(n){var r=n.U;if(r)for(var i in n.U=void 0,r){var o=r[i];o&&o.d()}}}else{var s=t.__c;if(s){var a=s.__$u;a&&(s.__$u=void 0,a.d())}}e(t)})),st("__h",(function(e,t,n,r){(r<3||9===r)&&(t.__$f|=2),e(t,n,r)})),w.prototype.shouldComponentUpdate=function(e,t){var n=this.__$u;if(!(n&&void 0!==n.s||4&this.__$f))return!0;if(3&this.__$f)return!0;for(var r in t)return!0;for(var i in e)if("__source"!==i&&e[i]!==this.props[i])return!0;for(var o in this.props)if(!(o in e))return!0;return!1};const ut=(e,t)=>t.some((t=>e instanceof t));let dt,ft;const pt=new WeakMap,ht=new WeakMap,mt=new WeakMap,vt=new WeakMap,_t=new WeakMap;let gt={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return ht.get(e);if("objectStoreNames"===t)return e.objectStoreNames||mt.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return bt(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function wt(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(ft||(ft=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(xt(this),e),bt(pt.get(this))}:function(...e){return bt(t.apply(xt(this),e))}:function(e,...n){const r=t.call(xt(this),e,...n);return mt.set(r,e.sort?e.sort():[e]),bt(r)}:(e instanceof IDBTransaction&&function(e){if(ht.has(e))return;const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",o),e.removeEventListener("abort",o)},i=()=>{t(),r()},o=()=>{n(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",i),e.addEventListener("error",o),e.addEventListener("abort",o)}));ht.set(e,t)}(e),ut(e,dt||(dt=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,gt):e);var t}function bt(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("success",i),e.removeEventListener("error",o)},i=()=>{t(bt(e.result)),r()},o=()=>{n(e.error),r()};e.addEventListener("success",i),e.addEventListener("error",o)}));return t.then((t=>{t instanceof IDBCursor&&pt.set(t,e)})).catch((()=>{})),_t.set(t,e),t}(e);if(vt.has(e))return vt.get(e);const t=wt(e);return t!==e&&(vt.set(e,t),_t.set(t,e)),t}const xt=e=>_t.get(e),yt=["get","getKey","getAll","getAllKeys","count"],kt=["put","add","delete","clear"],At=new Map;function Ct(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(At.get(t))return At.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,i=kt.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!i&&!yt.includes(n))return;const o=async function(e,...t){const o=this.transaction(e,i?"readwrite":"readonly");let s=o.store;return r&&(s=s.index(t.shift())),(await Promise.all([s[n](...t),i&&o.done]))[0]};return At.set(t,o),o}var St;St=gt,gt={...St,get:(e,t,n)=>Ct(e,t)||St.get(e,t,n),has:(e,t)=>!!Ct(e,t)||St.has(e,t)};var zt=Ze(new Array),Et=function(e,t,{blocked:n,upgrade:r,blocking:i,terminated:o}={}){const s=indexedDB.open(e,t),a=bt(s);return r&&s.addEventListener("upgradeneeded",(e=>{r(bt(s.result),e.oldVersion,e.newVersion,bt(s.transaction),e)})),n&&s.addEventListener("blocked",(e=>n(e.oldVersion,e.newVersion,e))),a.then((e=>{o&&e.addEventListener("close",(()=>o())),i&&e.addEventListener("versionchange",(e=>i(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),a}("song-db",1,{upgrade:function(e){console.log("UPGRADE DB");var t=e.createObjectStore("songs",{keyPath:"id"});e.createObjectStore("songFile",{keyPath:"songID"}),e.createObjectStore("songStatus",{keyPath:"songID"}),t.createIndex("by-key","key")}}),Wt=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},Ut=function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,r=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}};function Dt(e,t){return void 0===t&&(t=null),Wt(this,void 0,void 0,(function(){return Ut(this,(function(n){return null!==t&&(e+=Math.random()*(t-e)),[2,new Promise((function(t){return setTimeout(t,1e3*e)}))]}))}))}var jt=new(function(){function e(){this.init()}return e.prototype.init=function(){return Wt(this,void 0,void 0,(function(){var e;return Ut(this,(function(t){switch(t.label){case 0:return e=this,[4,Et];case 1:return e.db=t.sent(),[2]}}))}))},e.prototype.create=function(e){return Wt(this,void 0,void 0,(function(){return Ut(this,(function(t){switch(t.label){case 0:return console.log("Create song",e),[4,this.getStatus(e.id)];case 1:return t.sent()?[3,3]:[4,jt.createStatus(e.id,e.status)];case 2:t.sent(),t.label=3;case 3:return[4,this.db.put("songs",e)];case 4:return[2,t.sent()]}}))}))},e.prototype.createFile=function(e,t){return Wt(this,void 0,void 0,(function(){return Ut(this,(function(n){switch(n.label){case 0:return[4,this.db.put("songFile",{songID:e,file:t})];case 1:return[2,n.sent()]}}))}))},e.prototype.createStatus=function(e,t){return Wt(this,void 0,void 0,(function(){return Ut(this,(function(n){switch(n.label){case 0:return[4,this.db.put("songStatus",{songID:e,status:t})];case 1:return[2,n.sent()]}}))}))},e.prototype.get=function(e){return Wt(this,void 0,void 0,(function(){return Ut(this,(function(t){switch(t.label){case 0:return[4,this.db.get("songs",e)];case 1:return[2,t.sent()]}}))}))},e.prototype.getFile=function(e){return Wt(this,void 0,void 0,(function(){return Ut(this,(function(t){switch(t.label){case 0:return[4,this.db.get("songFile",e)];case 1:return[2,t.sent()]}}))}))},e.prototype.getStatus=function(e){return Wt(this,void 0,void 0,(function(){return Ut(this,(function(t){switch(t.label){case 0:return[4,this.db.get("songStatus",e)];case 1:return[2,t.sent()]}}))}))},e.prototype.rename=function(e,t){return Wt(this,void 0,void 0,(function(){var n,r;return Ut(this,(function(i){switch(i.label){case 0:return[4,this.get(e)];case 1:return(n=i.sent()).title=t,r=this.get,[4,this.db.put("songs",n)];case 2:return[4,r.apply(this,[i.sent()])];case 3:return[2,i.sent()]}}))}))},e.prototype.flagDownload=function(e,t){return Wt(this,void 0,void 0,(function(){var n;return Ut(this,(function(r){switch(r.label){case 0:return[4,this.db.get("songStatus",e)];case 1:return(n=r.sent()).status="to_download",[4,this.db.put("songStatus",n)];case 2:return r.sent(),t.updateSongStatus(e,"to_download"),[2]}}))}))},e.prototype.getAll=function(){return Wt(this,void 0,void 0,(function(){var e=this;return Ut(this,(function(t){switch(t.label){case 0:return this.db?[3,1]:[2,new Promise((function(t,n){return Wt(e,void 0,void 0,(function(){return Ut(this,(function(e){switch(e.label){case 0:return[4,Dt(1)];case 1:return e.sent(),t(this.getAll()),[2]}}))}))}))];case 1:return[4,this.db.getAll("songs")];case 2:return[2,t.sent()]}}))}))},e.prototype.flagDelete=function(e,t){return Wt(this,void 0,void 0,(function(){var n;return Ut(this,(function(r){switch(r.label){case 0:return[4,this.db.get("songStatus",e)];case 1:return(n=r.sent()).status="to_delete",[4,this.db.put("songStatus",n)];case 2:return r.sent(),t.updateSongStatus(e,"to_delete"),[2]}}))}))},e.prototype.delete=function(e){return Wt(this,void 0,void 0,(function(){return Ut(this,(function(t){switch(t.label){case 0:return[4,this.db.delete("songs",e)];case 1:return[2,t.sent()]}}))}))},e}());const It=jt;var Tt=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},qt=function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,r=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}};const Ft=function(){var e=Le();return ne((function(){Tt(void 0,void 0,void 0,(function(){var e;return qt(this,(function(t){switch(t.label){case 0:return[4,Promise.all(zt.value.map((function(e){return Tt(void 0,void 0,void 0,(function(){var t,n,r;return qt(this,(function(i){switch(i.label){case 0:return[4,It.getFile(e.id)];case 1:return t=i.sent(),[4,It.getStatus(e.id)];case 2:return n=i.sent(),console.log(n.status),r=URL.createObjectURL(t.file),[2,{song:e,url:r,status:n.status?n.status:e.status}]}}))}))})))];case 1:return e=t.sent(),Fe.setQueue(e),[2]}}))}))}),[zt.value]),P("div",{className:"w-full relative h-24 overflow-x-auto bg-gray-900",children:P("div",{className:"absolute top-4 gap-4 start-0 flex",children:e.tracks.map((function(e,t){return P(Be,{index:t},e.url)}))})})},Lt=15,Bt=573,Ot=-2;function Mt(e){return Pt(e.map((([e,t])=>new Array(e).fill(t,0,e))))}function Pt(e){return e.reduce(((e,t)=>e.concat(Array.isArray(t)?Pt(t):t)),[])}const Nt=[0,1,2,3].concat(...Mt([[2,4],[2,5],[4,6],[4,7],[8,8],[8,9],[16,10],[16,11],[32,12],[32,13],[64,14],[64,15],[2,0],[1,16],[1,17],[2,18],[2,19],[4,20],[4,21],[8,22],[8,23],[16,24],[16,25],[32,26],[32,27],[64,28],[64,29]]));function Rt(){const e=this;function t(e,t){let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}e.build_tree=function(n){const r=e.dyn_tree,i=e.stat_desc.static_tree,o=e.stat_desc.elems;let s,a,c,l=-1;for(n.heap_len=0,n.heap_max=Bt,s=0;s<o;s++)0!==r[2*s]?(n.heap[++n.heap_len]=l=s,n.depth[s]=0):r[2*s+1]=0;for(;n.heap_len<2;)c=n.heap[++n.heap_len]=l<2?++l:0,r[2*c]=1,n.depth[c]=0,n.opt_len--,i&&(n.static_len-=i[2*c+1]);for(e.max_code=l,s=Math.floor(n.heap_len/2);s>=1;s--)n.pqdownheap(r,s);c=o;do{s=n.heap[1],n.heap[1]=n.heap[n.heap_len--],n.pqdownheap(r,1),a=n.heap[1],n.heap[--n.heap_max]=s,n.heap[--n.heap_max]=a,r[2*c]=r[2*s]+r[2*a],n.depth[c]=Math.max(n.depth[s],n.depth[a])+1,r[2*s+1]=r[2*a+1]=c,n.heap[1]=c++,n.pqdownheap(r,1)}while(n.heap_len>=2);n.heap[--n.heap_max]=n.heap[1],function(t){const n=e.dyn_tree,r=e.stat_desc.static_tree,i=e.stat_desc.extra_bits,o=e.stat_desc.extra_base,s=e.stat_desc.max_length;let a,c,l,u,d,f,p=0;for(u=0;u<=Lt;u++)t.bl_count[u]=0;for(n[2*t.heap[t.heap_max]+1]=0,a=t.heap_max+1;a<Bt;a++)c=t.heap[a],u=n[2*n[2*c+1]+1]+1,u>s&&(u=s,p++),n[2*c+1]=u,c>e.max_code||(t.bl_count[u]++,d=0,c>=o&&(d=i[c-o]),f=n[2*c],t.opt_len+=f*(u+d),r&&(t.static_len+=f*(r[2*c+1]+d)));if(0!==p){do{for(u=s-1;0===t.bl_count[u];)u--;t.bl_count[u]--,t.bl_count[u+1]+=2,t.bl_count[s]--,p-=2}while(p>0);for(u=s;0!==u;u--)for(c=t.bl_count[u];0!==c;)l=t.heap[--a],l>e.max_code||(n[2*l+1]!=u&&(t.opt_len+=(u-n[2*l+1])*n[2*l],n[2*l+1]=u),c--)}}(n),function(e,n,r){const i=[];let o,s,a,c=0;for(o=1;o<=Lt;o++)i[o]=c=c+r[o-1]<<1;for(s=0;s<=n;s++)a=e[2*s+1],0!==a&&(e[2*s]=t(i[a]++,a))}(r,e.max_code,n.bl_count)}}function Vt(e,t,n,r,i){const o=this;o.static_tree=e,o.extra_bits=t,o.extra_base=n,o.elems=r,o.max_length=i}Rt._length_code=[0,1,2,3,4,5,6,7].concat(...Mt([[2,8],[2,9],[2,10],[2,11],[4,12],[4,13],[4,14],[4,15],[8,16],[8,17],[8,18],[8,19],[16,20],[16,21],[16,22],[16,23],[32,24],[32,25],[32,26],[31,27],[1,28]])),Rt.base_length=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],Rt.base_dist=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],Rt.d_code=function(e){return e<256?Nt[e]:Nt[256+(e>>>7)]},Rt.extra_lbits=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],Rt.extra_dbits=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],Rt.extra_blbits=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],Rt.bl_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];const Ht=Mt([[144,8],[112,9],[24,7],[8,8]]);Vt.static_ltree=Pt([12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,19,275,147,403,83,339,211,467,51,307,179,435,115,371,243,499,11,267,139,395,75,331,203,459,43,299,171,427,107,363,235,491,27,283,155,411,91,347,219,475,59,315,187,443,123,379,251,507,7,263,135,391,71,327,199,455,39,295,167,423,103,359,231,487,23,279,151,407,87,343,215,471,55,311,183,439,119,375,247,503,15,271,143,399,79,335,207,463,47,303,175,431,111,367,239,495,31,287,159,415,95,351,223,479,63,319,191,447,127,383,255,511,0,64,32,96,16,80,48,112,8,72,40,104,24,88,56,120,4,68,36,100,20,84,52,116,3,131,67,195,35,163,99,227].map(((e,t)=>[e,Ht[t]])));const Kt=Mt([[30,5]]);function $t(e,t,n,r,i){const o=this;o.good_length=e,o.max_lazy=t,o.nice_length=n,o.max_chain=r,o.func=i}Vt.static_dtree=Pt([0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,30,1,17,9,25,5,21,13,29,3,19,11,27,7,23].map(((e,t)=>[e,Kt[t]]))),Vt.static_l_desc=new Vt(Vt.static_ltree,Rt.extra_lbits,257,286,Lt),Vt.static_d_desc=new Vt(Vt.static_dtree,Rt.extra_dbits,0,30,Lt),Vt.static_bl_desc=new Vt(null,Rt.extra_blbits,0,19,7);const Yt=[new $t(0,0,0,0,0),new $t(4,4,8,4,1),new $t(4,5,16,8,1),new $t(4,6,32,32,1),new $t(4,4,16,16,2),new $t(8,16,32,32,2),new $t(8,16,128,128,2),new $t(8,32,128,256,2),new $t(32,128,258,1024,2),new $t(32,258,258,4096,2)],Gt=["need dictionary","stream end","","","stream error","data error","","buffer error","",""],Zt=113,Xt=666,Jt=262;function Qt(e,t,n,r){const i=e[2*t],o=e[2*n];return i<o||i==o&&r[t]<=r[n]}function en(){const e=this;let t,n,r,i,o,s,a,c,l,u,d,f,p,h,m,v,_,g,w,b,x,y,k,A,C,S,z,E,W,U,D,j,I;const T=new Rt,q=new Rt,F=new Rt;let L,B,O,M,P,N;function R(){let t;for(t=0;t<286;t++)D[2*t]=0;for(t=0;t<30;t++)j[2*t]=0;for(t=0;t<19;t++)I[2*t]=0;D[512]=1,e.opt_len=e.static_len=0,B=O=0}function V(e,t){let n,r=-1,i=e[1],o=0,s=7,a=4;0===i&&(s=138,a=3),e[2*(t+1)+1]=65535;for(let c=0;c<=t;c++)n=i,i=e[2*(c+1)+1],++o<s&&n==i||(o<a?I[2*n]+=o:0!==n?(n!=r&&I[2*n]++,I[32]++):o<=10?I[34]++:I[36]++,o=0,r=n,0===i?(s=138,a=3):n==i?(s=6,a=3):(s=7,a=4))}function H(t){e.pending_buf[e.pending++]=t}function K(e){H(255&e),H(e>>>8&255)}function $(e,t){let n;const r=t;N>16-r?(n=e,P|=n<<N&65535,K(P),P=n>>>16-N,N+=r-16):(P|=e<<N&65535,N+=r)}function Y(e,t){const n=2*e;$(65535&t[n],65535&t[n+1])}function G(e,t){let n,r,i=-1,o=e[1],s=0,a=7,c=4;for(0===o&&(a=138,c=3),n=0;n<=t;n++)if(r=o,o=e[2*(n+1)+1],!(++s<a&&r==o)){if(s<c)do{Y(r,I)}while(0!=--s);else 0!==r?(r!=i&&(Y(r,I),s--),Y(16,I),$(s-3,2)):s<=10?(Y(17,I),$(s-3,3)):(Y(18,I),$(s-11,7));s=0,i=r,0===o?(a=138,c=3):r==o?(a=6,c=3):(a=7,c=4)}}function Z(){16==N?(K(P),P=0,N=0):N>=8&&(H(255&P),P>>>=8,N-=8)}function X(t,n){let r,i,o;if(e.dist_buf[B]=t,e.lc_buf[B]=255&n,B++,0===t?D[2*n]++:(O++,t--,D[2*(Rt._length_code[n]+256+1)]++,j[2*Rt.d_code(t)]++),0==(8191&B)&&z>2){for(r=8*B,i=x-_,o=0;o<30;o++)r+=j[2*o]*(5+Rt.extra_dbits[o]);if(r>>>=3,O<Math.floor(B/2)&&r<Math.floor(i/2))return!0}return B==L-1}function J(t,n){let r,i,o,s,a=0;if(0!==B)do{r=e.dist_buf[a],i=e.lc_buf[a],a++,0===r?Y(i,t):(o=Rt._length_code[i],Y(o+256+1,t),s=Rt.extra_lbits[o],0!==s&&(i-=Rt.base_length[o],$(i,s)),r--,o=Rt.d_code(r),Y(o,n),s=Rt.extra_dbits[o],0!==s&&(r-=Rt.base_dist[o],$(r,s)))}while(a<B);Y(256,t),M=t[513]}function Q(){N>8?K(P):N>0&&H(255&P),P=0,N=0}function ee(t,n,r){$(0+(r?1:0),3),function(t,n,r){Q(),M=8,K(n),K(~n),e.pending_buf.set(c.subarray(t,t+n),e.pending),e.pending+=n}(t,n)}function te(n){(function(t,n,r){let i,o,s=0;z>0?(T.build_tree(e),q.build_tree(e),s=function(){let t;for(V(D,T.max_code),V(j,q.max_code),F.build_tree(e),t=18;t>=3&&0===I[2*Rt.bl_order[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(),i=e.opt_len+3+7>>>3,o=e.static_len+3+7>>>3,o<=i&&(i=o)):i=o=n+5,n+4<=i&&-1!=t?ee(t,n,r):o==i?($(2+(r?1:0),3),J(Vt.static_ltree,Vt.static_dtree)):($(4+(r?1:0),3),function(e,t,n){let r;for($(e-257,5),$(t-1,5),$(n-4,4),r=0;r<n;r++)$(I[2*Rt.bl_order[r]+1],3);G(D,e-1),G(j,t-1)}(T.max_code+1,q.max_code+1,s+1),J(D,j)),R(),r&&Q()})(_>=0?_:-1,x-_,n),_=x,t.flush_pending()}function ne(){let e,n,r,i;do{if(i=l-k-x,0===i&&0===x&&0===k)i=o;else if(-1==i)i--;else if(x>=o+o-Jt){c.set(c.subarray(o,o+o),0),y-=o,x-=o,_-=o,e=p,r=e;do{n=65535&d[--r],d[r]=n>=o?n-o:0}while(0!=--e);e=o,r=e;do{n=65535&u[--r],u[r]=n>=o?n-o:0}while(0!=--e);i+=o}if(0===t.avail_in)return;e=t.read_buf(c,x+k,i),k+=e,k>=3&&(f=255&c[x],f=(f<<v^255&c[x+1])&m)}while(k<Jt&&0!==t.avail_in)}function re(e){let t,n,r=C,i=x,s=A;const l=x>o-Jt?x-(o-Jt):0;let d=U;const f=a,p=x+258;let h=c[i+s-1],m=c[i+s];A>=W&&(r>>=2),d>k&&(d=k);do{if(t=e,c[t+s]==m&&c[t+s-1]==h&&c[t]==c[i]&&c[++t]==c[i+1]){i+=2,t++;do{}while(c[++i]==c[++t]&&c[++i]==c[++t]&&c[++i]==c[++t]&&c[++i]==c[++t]&&c[++i]==c[++t]&&c[++i]==c[++t]&&c[++i]==c[++t]&&c[++i]==c[++t]&&i<p);if(n=258-(p-i),i=p-258,n>s){if(y=e,s=n,n>=d)break;h=c[i+s-1],m=c[i+s]}}}while((e=65535&u[e&f])>l&&0!=--r);return s<=k?s:k}e.depth=[],e.bl_count=[],e.heap=[],D=[],j=[],I=[],e.pqdownheap=function(t,n){const r=e.heap,i=r[n];let o=n<<1;for(;o<=e.heap_len&&(o<e.heap_len&&Qt(t,r[o+1],r[o],e.depth)&&o++,!Qt(t,i,r[o],e.depth));)r[n]=r[o],n=o,o<<=1;r[n]=i},e.deflateInit=function(t,w,y,B,O,V){return B||(B=8),O||(O=8),V||(V=0),t.msg=null,-1==w&&(w=6),O<1||O>9||8!=B||y<9||y>15||w<0||w>9||V<0||V>2?Ot:(t.dstate=e,s=y,o=1<<s,a=o-1,h=O+7,p=1<<h,m=p-1,v=Math.floor((h+3-1)/3),c=new Uint8Array(2*o),u=[],d=[],L=1<<O+6,e.pending_buf=new Uint8Array(4*L),r=4*L,e.dist_buf=new Uint16Array(L),e.lc_buf=new Uint8Array(L),z=w,E=V,function(t){return t.total_in=t.total_out=0,t.msg=null,e.pending=0,e.pending_out=0,n=Zt,i=0,T.dyn_tree=D,T.stat_desc=Vt.static_l_desc,q.dyn_tree=j,q.stat_desc=Vt.static_d_desc,F.dyn_tree=I,F.stat_desc=Vt.static_bl_desc,P=0,N=0,M=8,R(),function(){l=2*o,d[p-1]=0;for(let e=0;e<p-1;e++)d[e]=0;S=Yt[z].max_lazy,W=Yt[z].good_length,U=Yt[z].nice_length,C=Yt[z].max_chain,x=0,_=0,k=0,g=A=2,b=0,f=0}(),0}(t))},e.deflateEnd=function(){return 42!=n&&n!=Zt&&n!=Xt?Ot:(e.lc_buf=null,e.dist_buf=null,e.pending_buf=null,d=null,u=null,c=null,e.dstate=null,n==Zt?-3:0)},e.deflateParams=function(e,t,n){let r=0;return-1==t&&(t=6),t<0||t>9||n<0||n>2?Ot:(Yt[z].func!=Yt[t].func&&0!==e.total_in&&(r=e.deflate(1)),z!=t&&(z=t,S=Yt[z].max_lazy,W=Yt[z].good_length,U=Yt[z].nice_length,C=Yt[z].max_chain),E=n,r)},e.deflateSetDictionary=function(e,t,r){let i,s=r,l=0;if(!t||42!=n)return Ot;if(s<3)return 0;for(s>o-Jt&&(s=o-Jt,l=r-s),c.set(t.subarray(l,l+s),0),x=s,_=s,f=255&c[0],f=(f<<v^255&c[1])&m,i=0;i<=s-3;i++)f=(f<<v^255&c[i+2])&m,u[i&a]=d[f],d[f]=i;return 0},e.deflate=function(l,h){let C,W,U,D,j;if(h>4||h<0)return Ot;if(!l.next_out||!l.next_in&&0!==l.avail_in||n==Xt&&4!=h)return l.msg=Gt[4],Ot;if(0===l.avail_out)return l.msg=Gt[7],-5;if(t=l,D=i,i=h,42==n&&(W=8+(s-8<<4)<<8,U=(z-1&255)>>1,U>3&&(U=3),W|=U<<6,0!==x&&(W|=32),W+=31-W%31,n=Zt,function(e){H(e>>8&255),H(255&e)}(W)),0!==e.pending){if(t.flush_pending(),0===t.avail_out)return i=-1,0}else if(0===t.avail_in&&h<=D&&4!=h)return t.msg=Gt[7],-5;if(n==Xt&&0!==t.avail_in)return l.msg=Gt[7],-5;if(0!==t.avail_in||0!==k||0!=h&&n!=Xt){switch(j=-1,Yt[z].func){case 0:j=function(e){let n,i=65535;for(i>r-5&&(i=r-5);;){if(k<=1){if(ne(),0===k&&0==e)return 0;if(0===k)break}if(x+=k,k=0,n=_+i,(0===x||x>=n)&&(k=x-n,x=n,te(!1),0===t.avail_out))return 0;if(x-_>=o-Jt&&(te(!1),0===t.avail_out))return 0}return te(4==e),0===t.avail_out?4==e?2:0:4==e?3:1}(h);break;case 1:j=function(e){let n,r=0;for(;;){if(k<Jt){if(ne(),k<Jt&&0==e)return 0;if(0===k)break}if(k>=3&&(f=(f<<v^255&c[x+2])&m,r=65535&d[f],u[x&a]=d[f],d[f]=x),0!==r&&(x-r&65535)<=o-Jt&&2!=E&&(g=re(r)),g>=3)if(n=X(x-y,g-3),k-=g,g<=S&&k>=3){g--;do{x++,f=(f<<v^255&c[x+2])&m,r=65535&d[f],u[x&a]=d[f],d[f]=x}while(0!=--g);x++}else x+=g,g=0,f=255&c[x],f=(f<<v^255&c[x+1])&m;else n=X(0,255&c[x]),k--,x++;if(n&&(te(!1),0===t.avail_out))return 0}return te(4==e),0===t.avail_out?4==e?2:0:4==e?3:1}(h);break;case 2:j=function(e){let n,r,i=0;for(;;){if(k<Jt){if(ne(),k<Jt&&0==e)return 0;if(0===k)break}if(k>=3&&(f=(f<<v^255&c[x+2])&m,i=65535&d[f],u[x&a]=d[f],d[f]=x),A=g,w=y,g=2,0!==i&&A<S&&(x-i&65535)<=o-Jt&&(2!=E&&(g=re(i)),g<=5&&(1==E||3==g&&x-y>4096)&&(g=2)),A>=3&&g<=A){r=x+k-3,n=X(x-1-w,A-3),k-=A-1,A-=2;do{++x<=r&&(f=(f<<v^255&c[x+2])&m,i=65535&d[f],u[x&a]=d[f],d[f]=x)}while(0!=--A);if(b=0,g=2,x++,n&&(te(!1),0===t.avail_out))return 0}else if(0!==b){if(n=X(0,255&c[x-1]),n&&te(!1),x++,k--,0===t.avail_out)return 0}else b=1,x++,k--}return 0!==b&&(n=X(0,255&c[x-1]),b=0),te(4==e),0===t.avail_out?4==e?2:0:4==e?3:1}(h)}if(2!=j&&3!=j||(n=Xt),0==j||2==j)return 0===t.avail_out&&(i=-1),0;if(1==j){if(1==h)$(2,3),Y(256,Vt.static_ltree),Z(),1+M+10-N<9&&($(2,3),Y(256,Vt.static_ltree),Z()),M=7;else if(ee(0,0,!1),3==h)for(C=0;C<p;C++)d[C]=0;if(t.flush_pending(),0===t.avail_out)return i=-1,0}}return 4!=h?0:1}}function tn(){const e=this;e.next_in_index=0,e.next_out_index=0,e.avail_in=0,e.total_in=0,e.avail_out=0,e.total_out=0}tn.prototype={deflateInit(e,t){const n=this;return n.dstate=new en,t||(t=Lt),n.dstate.deflateInit(n,e,t)},deflate(e){const t=this;return t.dstate?t.dstate.deflate(t,e):Ot},deflateEnd(){const e=this;if(!e.dstate)return Ot;const t=e.dstate.deflateEnd();return e.dstate=null,t},deflateParams(e,t){const n=this;return n.dstate?n.dstate.deflateParams(n,e,t):Ot},deflateSetDictionary(e,t){const n=this;return n.dstate?n.dstate.deflateSetDictionary(n,e,t):Ot},read_buf(e,t,n){const r=this;let i=r.avail_in;return i>n&&(i=n),0===i?0:(r.avail_in-=i,e.set(r.next_in.subarray(r.next_in_index,r.next_in_index+i),t),r.next_in_index+=i,r.total_in+=i,i)},flush_pending(){const e=this;let t=e.dstate.pending;t>e.avail_out&&(t=e.avail_out),0!==t&&(e.next_out.set(e.dstate.pending_buf.subarray(e.dstate.pending_out,e.dstate.pending_out+t),e.next_out_index),e.next_out_index+=t,e.dstate.pending_out+=t,e.total_out+=t,e.avail_out-=t,e.dstate.pending-=t,0===e.dstate.pending&&(e.dstate.pending_out=0))}};const nn=0,rn=1,on=-2,sn=-3,an=-4,cn=-5,ln=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],un=1440,dn=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],fn=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],pn=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],hn=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],mn=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],vn=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],_n=15;function gn(){let e,t,n,r,i,o;function s(e,t,s,a,c,l,u,d,f,p,h){let m,v,_,g,w,b,x,y,k,A,C,S,z,E,W;A=0,w=s;do{n[e[t+A]]++,A++,w--}while(0!==w);if(n[0]==s)return u[0]=-1,d[0]=0,nn;for(y=d[0],b=1;b<=_n&&0===n[b];b++);for(x=b,y<b&&(y=b),w=_n;0!==w&&0===n[w];w--);for(_=w,y>w&&(y=w),d[0]=y,E=1<<b;b<w;b++,E<<=1)if((E-=n[b])<0)return sn;if((E-=n[w])<0)return sn;for(n[w]+=E,o[1]=b=0,A=1,z=2;0!=--w;)o[z]=b+=n[A],z++,A++;w=0,A=0;do{0!==(b=e[t+A])&&(h[o[b]++]=w),A++}while(++w<s);for(s=o[_],o[0]=w=0,A=0,g=-1,S=-y,i[0]=0,C=0,W=0;x<=_;x++)for(m=n[x];0!=m--;){for(;x>S+y;){if(g++,S+=y,W=_-S,W=W>y?y:W,(v=1<<(b=x-S))>m+1&&(v-=m+1,z=x,b<W))for(;++b<W&&!((v<<=1)<=n[++z]);)v-=n[z];if(W=1<<b,p[0]+W>un)return sn;i[g]=C=p[0],p[0]+=W,0!==g?(o[g]=w,r[0]=b,r[1]=y,b=w>>>S-y,r[2]=C-i[g-1]-b,f.set(r,3*(i[g-1]+b))):u[0]=C}for(r[1]=x-S,A>=s?r[0]=192:h[A]<a?(r[0]=h[A]<256?0:96,r[2]=h[A++]):(r[0]=l[h[A]-a]+16+64,r[2]=c[h[A++]-a]),v=1<<x-S,b=w>>>S;b<W;b+=v)f.set(r,3*(C+b));for(b=1<<x-1;0!=(w&b);b>>>=1)w^=b;for(w^=b,k=(1<<S)-1;(w&k)!=o[g];)g--,S-=y,k=(1<<S)-1}return 0!==E&&1!=_?cn:nn}function a(s){let a;for(e||(e=[],t=[],n=new Int32Array(_n+1),r=[],i=new Int32Array(_n),o=new Int32Array(_n+1)),t.length<s&&(t=[]),a=0;a<s;a++)t[a]=0;for(a=0;a<_n+1;a++)n[a]=0;for(a=0;a<3;a++)r[a]=0;i.set(n.subarray(0,_n),0),o.set(n.subarray(0,_n+1),0)}this.inflate_trees_bits=function(n,r,i,o,c){let l;return a(19),e[0]=0,l=s(n,0,19,19,null,null,i,r,o,e,t),l==sn?c.msg="oversubscribed dynamic bit lengths tree":l!=cn&&0!==r[0]||(c.msg="incomplete dynamic bit lengths tree",l=sn),l},this.inflate_trees_dynamic=function(n,r,i,o,c,l,u,d,f){let p;return a(288),e[0]=0,p=s(i,0,n,257,pn,hn,l,o,d,e,t),p!=nn||0===o[0]?(p==sn?f.msg="oversubscribed literal/length tree":p!=an&&(f.msg="incomplete literal/length tree",p=sn),p):(a(288),p=s(i,n,r,0,mn,vn,u,c,d,e,t),p!=nn||0===c[0]&&n>257?(p==sn?f.msg="oversubscribed distance tree":p==cn?(f.msg="incomplete distance tree",p=sn):p!=an&&(f.msg="empty distance tree with lengths",p=sn),p):nn)}}gn.inflate_trees_fixed=function(e,t,n,r){return e[0]=9,t[0]=5,n[0]=dn,r[0]=fn,nn};const wn=0,bn=1,xn=2,yn=3,kn=4,An=5,Cn=6,Sn=7,zn=8,En=9;function Wn(){const e=this;let t,n,r,i,o=0,s=0,a=0,c=0,l=0,u=0,d=0,f=0,p=0,h=0;function m(e,t,n,r,i,o,s,a){let c,l,u,d,f,p,h,m,v,_,g,w,b,x,y,k;h=a.next_in_index,m=a.avail_in,f=s.bitb,p=s.bitk,v=s.write,_=v<s.read?s.read-v-1:s.end-v,g=ln[e],w=ln[t];do{for(;p<20;)m--,f|=(255&a.read_byte(h++))<<p,p+=8;if(c=f&g,l=n,u=r,k=3*(u+c),0!==(d=l[k]))for(;;){if(f>>=l[k+1],p-=l[k+1],0!=(16&d)){for(d&=15,b=l[k+2]+(f&ln[d]),f>>=d,p-=d;p<15;)m--,f|=(255&a.read_byte(h++))<<p,p+=8;for(c=f&w,l=i,u=o,k=3*(u+c),d=l[k];;){if(f>>=l[k+1],p-=l[k+1],0!=(16&d)){for(d&=15;p<d;)m--,f|=(255&a.read_byte(h++))<<p,p+=8;if(x=l[k+2]+(f&ln[d]),f>>=d,p-=d,_-=b,v>=x)y=v-x,v-y>0&&2>v-y?(s.win[v++]=s.win[y++],s.win[v++]=s.win[y++],b-=2):(s.win.set(s.win.subarray(y,y+2),v),v+=2,y+=2,b-=2);else{y=v-x;do{y+=s.end}while(y<0);if(d=s.end-y,b>d){if(b-=d,v-y>0&&d>v-y)do{s.win[v++]=s.win[y++]}while(0!=--d);else s.win.set(s.win.subarray(y,y+d),v),v+=d,y+=d,d=0;y=0}}if(v-y>0&&b>v-y)do{s.win[v++]=s.win[y++]}while(0!=--b);else s.win.set(s.win.subarray(y,y+b),v),v+=b,y+=b,b=0;break}if(0!=(64&d))return a.msg="invalid distance code",b=a.avail_in-m,b=p>>3<b?p>>3:b,m+=b,h-=b,p-=b<<3,s.bitb=f,s.bitk=p,a.avail_in=m,a.total_in+=h-a.next_in_index,a.next_in_index=h,s.write=v,sn;c+=l[k+2],c+=f&ln[d],k=3*(u+c),d=l[k]}break}if(0!=(64&d))return 0!=(32&d)?(b=a.avail_in-m,b=p>>3<b?p>>3:b,m+=b,h-=b,p-=b<<3,s.bitb=f,s.bitk=p,a.avail_in=m,a.total_in+=h-a.next_in_index,a.next_in_index=h,s.write=v,rn):(a.msg="invalid literal/length code",b=a.avail_in-m,b=p>>3<b?p>>3:b,m+=b,h-=b,p-=b<<3,s.bitb=f,s.bitk=p,a.avail_in=m,a.total_in+=h-a.next_in_index,a.next_in_index=h,s.write=v,sn);if(c+=l[k+2],c+=f&ln[d],k=3*(u+c),0===(d=l[k])){f>>=l[k+1],p-=l[k+1],s.win[v++]=l[k+2],_--;break}}else f>>=l[k+1],p-=l[k+1],s.win[v++]=l[k+2],_--}while(_>=258&&m>=10);return b=a.avail_in-m,b=p>>3<b?p>>3:b,m+=b,h-=b,p-=b<<3,s.bitb=f,s.bitk=p,a.avail_in=m,a.total_in+=h-a.next_in_index,a.next_in_index=h,s.write=v,nn}e.init=function(e,o,s,a,c,l){t=wn,d=e,f=o,r=s,p=a,i=c,h=l,n=null},e.proc=function(e,v,_){let g,w,b,x,y,k,A,C=0,S=0,z=0;for(z=v.next_in_index,x=v.avail_in,C=e.bitb,S=e.bitk,y=e.write,k=y<e.read?e.read-y-1:e.end-y;;)switch(t){case wn:if(k>=258&&x>=10&&(e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,_=m(d,f,r,p,i,h,e,v),z=v.next_in_index,x=v.avail_in,C=e.bitb,S=e.bitk,y=e.write,k=y<e.read?e.read-y-1:e.end-y,_!=nn)){t=_==rn?Sn:En;break}a=d,n=r,s=p,t=bn;case bn:for(g=a;S<g;){if(0===x)return e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);_=nn,x--,C|=(255&v.read_byte(z++))<<S,S+=8}if(w=3*(s+(C&ln[g])),C>>>=n[w+1],S-=n[w+1],b=n[w],0===b){c=n[w+2],t=Cn;break}if(0!=(16&b)){l=15&b,o=n[w+2],t=xn;break}if(0==(64&b)){a=b,s=w/3+n[w+2];break}if(0!=(32&b)){t=Sn;break}return t=En,v.msg="invalid literal/length code",_=sn,e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);case xn:for(g=l;S<g;){if(0===x)return e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);_=nn,x--,C|=(255&v.read_byte(z++))<<S,S+=8}o+=C&ln[g],C>>=g,S-=g,a=f,n=i,s=h,t=yn;case yn:for(g=a;S<g;){if(0===x)return e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);_=nn,x--,C|=(255&v.read_byte(z++))<<S,S+=8}if(w=3*(s+(C&ln[g])),C>>=n[w+1],S-=n[w+1],b=n[w],0!=(16&b)){l=15&b,u=n[w+2],t=kn;break}if(0==(64&b)){a=b,s=w/3+n[w+2];break}return t=En,v.msg="invalid distance code",_=sn,e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);case kn:for(g=l;S<g;){if(0===x)return e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);_=nn,x--,C|=(255&v.read_byte(z++))<<S,S+=8}u+=C&ln[g],C>>=g,S-=g,t=An;case An:for(A=y-u;A<0;)A+=e.end;for(;0!==o;){if(0===k&&(y==e.end&&0!==e.read&&(y=0,k=y<e.read?e.read-y-1:e.end-y),0===k&&(e.write=y,_=e.inflate_flush(v,_),y=e.write,k=y<e.read?e.read-y-1:e.end-y,y==e.end&&0!==e.read&&(y=0,k=y<e.read?e.read-y-1:e.end-y),0===k)))return e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);e.win[y++]=e.win[A++],k--,A==e.end&&(A=0),o--}t=wn;break;case Cn:if(0===k&&(y==e.end&&0!==e.read&&(y=0,k=y<e.read?e.read-y-1:e.end-y),0===k&&(e.write=y,_=e.inflate_flush(v,_),y=e.write,k=y<e.read?e.read-y-1:e.end-y,y==e.end&&0!==e.read&&(y=0,k=y<e.read?e.read-y-1:e.end-y),0===k)))return e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);_=nn,e.win[y++]=c,k--,t=wn;break;case Sn:if(S>7&&(S-=8,x++,z--),e.write=y,_=e.inflate_flush(v,_),y=e.write,k=y<e.read?e.read-y-1:e.end-y,e.read!=e.write)return e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);t=zn;case zn:return _=rn,e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);case En:return _=sn,e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);default:return _=on,e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_)}},e.free=function(){}}const Un=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],Dn=0,jn=1,In=2,Tn=3,qn=4,Fn=5,Ln=6,Bn=7,On=8,Mn=9;function Pn(e,t){const n=this;let r,i=Dn,o=0,s=0,a=0;const c=[0],l=[0],u=new Wn;let d=0,f=new Int32Array(3*un);const p=new gn;n.bitk=0,n.bitb=0,n.win=new Uint8Array(t),n.end=t,n.read=0,n.write=0,n.reset=function(e,t){t&&(t[0]=0),i==Ln&&u.free(e),i=Dn,n.bitk=0,n.bitb=0,n.read=n.write=0},n.reset(e,null),n.inflate_flush=function(e,t){let r,i,o;return i=e.next_out_index,o=n.read,r=(o<=n.write?n.write:n.end)-o,r>e.avail_out&&(r=e.avail_out),0!==r&&t==cn&&(t=nn),e.avail_out-=r,e.total_out+=r,e.next_out.set(n.win.subarray(o,o+r),i),i+=r,o+=r,o==n.end&&(o=0,n.write==n.end&&(n.write=0),r=n.write-o,r>e.avail_out&&(r=e.avail_out),0!==r&&t==cn&&(t=nn),e.avail_out-=r,e.total_out+=r,e.next_out.set(n.win.subarray(o,o+r),i),i+=r,o+=r),e.next_out_index=i,n.read=o,t},n.proc=function(e,t){let h,m,v,_,g,w,b,x;for(_=e.next_in_index,g=e.avail_in,m=n.bitb,v=n.bitk,w=n.write,b=w<n.read?n.read-w-1:n.end-w;;){let y,k,A,C,S,z,E,W;switch(i){case Dn:for(;v<3;){if(0===g)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);t=nn,g--,m|=(255&e.read_byte(_++))<<v,v+=8}switch(h=7&m,d=1&h,h>>>1){case 0:m>>>=3,v-=3,h=7&v,m>>>=h,v-=h,i=jn;break;case 1:y=[],k=[],A=[[]],C=[[]],gn.inflate_trees_fixed(y,k,A,C),u.init(y[0],k[0],A[0],0,C[0],0),m>>>=3,v-=3,i=Ln;break;case 2:m>>>=3,v-=3,i=Tn;break;case 3:return m>>>=3,v-=3,i=Mn,e.msg="invalid block type",t=sn,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t)}break;case jn:for(;v<32;){if(0===g)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);t=nn,g--,m|=(255&e.read_byte(_++))<<v,v+=8}if((~m>>>16&65535)!=(65535&m))return i=Mn,e.msg="invalid stored block lengths",t=sn,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);o=65535&m,m=v=0,i=0!==o?In:0!==d?Bn:Dn;break;case In:if(0===g)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);if(0===b&&(w==n.end&&0!==n.read&&(w=0,b=w<n.read?n.read-w-1:n.end-w),0===b&&(n.write=w,t=n.inflate_flush(e,t),w=n.write,b=w<n.read?n.read-w-1:n.end-w,w==n.end&&0!==n.read&&(w=0,b=w<n.read?n.read-w-1:n.end-w),0===b)))return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);if(t=nn,h=o,h>g&&(h=g),h>b&&(h=b),n.win.set(e.read_buf(_,h),w),_+=h,g-=h,w+=h,b-=h,0!=(o-=h))break;i=0!==d?Bn:Dn;break;case Tn:for(;v<14;){if(0===g)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);t=nn,g--,m|=(255&e.read_byte(_++))<<v,v+=8}if(s=h=16383&m,(31&h)>29||(h>>5&31)>29)return i=Mn,e.msg="too many length or distance symbols",t=sn,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);if(h=258+(31&h)+(h>>5&31),!r||r.length<h)r=[];else for(x=0;x<h;x++)r[x]=0;m>>>=14,v-=14,a=0,i=qn;case qn:for(;a<4+(s>>>10);){for(;v<3;){if(0===g)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);t=nn,g--,m|=(255&e.read_byte(_++))<<v,v+=8}r[Un[a++]]=7&m,m>>>=3,v-=3}for(;a<19;)r[Un[a++]]=0;if(c[0]=7,h=p.inflate_trees_bits(r,c,l,f,e),h!=nn)return(t=h)==sn&&(r=null,i=Mn),n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);a=0,i=Fn;case Fn:for(;h=s,!(a>=258+(31&h)+(h>>5&31));){let o,u;for(h=c[0];v<h;){if(0===g)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);t=nn,g--,m|=(255&e.read_byte(_++))<<v,v+=8}if(h=f[3*(l[0]+(m&ln[h]))+1],u=f[3*(l[0]+(m&ln[h]))+2],u<16)m>>>=h,v-=h,r[a++]=u;else{for(x=18==u?7:u-14,o=18==u?11:3;v<h+x;){if(0===g)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);t=nn,g--,m|=(255&e.read_byte(_++))<<v,v+=8}if(m>>>=h,v-=h,o+=m&ln[x],m>>>=x,v-=x,x=a,h=s,x+o>258+(31&h)+(h>>5&31)||16==u&&x<1)return r=null,i=Mn,e.msg="invalid bit length repeat",t=sn,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);u=16==u?r[x-1]:0;do{r[x++]=u}while(0!=--o);a=x}}if(l[0]=-1,S=[],z=[],E=[],W=[],S[0]=9,z[0]=6,h=s,h=p.inflate_trees_dynamic(257+(31&h),1+(h>>5&31),r,S,z,E,W,f,e),h!=nn)return h==sn&&(r=null,i=Mn),t=h,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);u.init(S[0],z[0],f,E[0],f,W[0]),i=Ln;case Ln:if(n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,(t=u.proc(n,e,t))!=rn)return n.inflate_flush(e,t);if(t=nn,u.free(e),_=e.next_in_index,g=e.avail_in,m=n.bitb,v=n.bitk,w=n.write,b=w<n.read?n.read-w-1:n.end-w,0===d){i=Dn;break}i=Bn;case Bn:if(n.write=w,t=n.inflate_flush(e,t),w=n.write,b=w<n.read?n.read-w-1:n.end-w,n.read!=n.write)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);i=On;case On:return t=rn,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);case Mn:return t=sn,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);default:return t=on,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t)}}},n.free=function(e){n.reset(e,null),n.win=null,f=null},n.set_dictionary=function(e,t,r){n.win.set(e.subarray(t,t+r),0),n.read=n.write=r},n.sync_point=function(){return i==jn?1:0}}const Nn=13,Rn=[0,0,255,255];function Vn(){const e=this;function t(e){return e&&e.istate?(e.total_in=e.total_out=0,e.msg=null,e.istate.mode=7,e.istate.blocks.reset(e,null),nn):on}e.mode=0,e.method=0,e.was=[0],e.need=0,e.marker=0,e.wbits=0,e.inflateEnd=function(t){return e.blocks&&e.blocks.free(t),e.blocks=null,nn},e.inflateInit=function(n,r){return n.msg=null,e.blocks=null,r<8||r>15?(e.inflateEnd(n),on):(e.wbits=r,n.istate.blocks=new Pn(n,1<<r),t(n),nn)},e.inflate=function(e,t){let n,r;if(!e||!e.istate||!e.next_in)return on;const i=e.istate;for(t=4==t?cn:nn,n=cn;;)switch(i.mode){case 0:if(0===e.avail_in)return n;if(n=t,e.avail_in--,e.total_in++,8!=(15&(i.method=e.read_byte(e.next_in_index++)))){i.mode=Nn,e.msg="unknown compression method",i.marker=5;break}if(8+(i.method>>4)>i.wbits){i.mode=Nn,e.msg="invalid win size",i.marker=5;break}i.mode=1;case 1:if(0===e.avail_in)return n;if(n=t,e.avail_in--,e.total_in++,r=255&e.read_byte(e.next_in_index++),((i.method<<8)+r)%31!=0){i.mode=Nn,e.msg="incorrect header check",i.marker=5;break}if(0==(32&r)){i.mode=7;break}i.mode=2;case 2:if(0===e.avail_in)return n;n=t,e.avail_in--,e.total_in++,i.need=(255&e.read_byte(e.next_in_index++))<<24&4278190080,i.mode=3;case 3:if(0===e.avail_in)return n;n=t,e.avail_in--,e.total_in++,i.need+=(255&e.read_byte(e.next_in_index++))<<16&16711680,i.mode=4;case 4:if(0===e.avail_in)return n;n=t,e.avail_in--,e.total_in++,i.need+=(255&e.read_byte(e.next_in_index++))<<8&65280,i.mode=5;case 5:return 0===e.avail_in?n:(n=t,e.avail_in--,e.total_in++,i.need+=255&e.read_byte(e.next_in_index++),i.mode=6,2);case 6:return i.mode=Nn,e.msg="need dictionary",i.marker=0,on;case 7:if(n=i.blocks.proc(e,n),n==sn){i.mode=Nn,i.marker=0;break}if(n==nn&&(n=t),n!=rn)return n;n=t,i.blocks.reset(e,i.was),i.mode=12;case 12:return e.avail_in=0,rn;case Nn:return sn;default:return on}},e.inflateSetDictionary=function(e,t,n){let r=0,i=n;if(!e||!e.istate||6!=e.istate.mode)return on;const o=e.istate;return i>=1<<o.wbits&&(i=(1<<o.wbits)-1,r=n-i),o.blocks.set_dictionary(t,r,i),o.mode=7,nn},e.inflateSync=function(e){let n,r,i,o,s;if(!e||!e.istate)return on;const a=e.istate;if(a.mode!=Nn&&(a.mode=Nn,a.marker=0),0===(n=e.avail_in))return cn;for(r=e.next_in_index,i=a.marker;0!==n&&i<4;)e.read_byte(r)==Rn[i]?i++:i=0!==e.read_byte(r)?0:4-i,r++,n--;return e.total_in+=r-e.next_in_index,e.next_in_index=r,e.avail_in=n,a.marker=i,4!=i?sn:(o=e.total_in,s=e.total_out,t(e),e.total_in=o,e.total_out=s,a.mode=7,nn)},e.inflateSyncPoint=function(e){return e&&e.istate&&e.istate.blocks?e.istate.blocks.sync_point():on}}function Hn(){}Hn.prototype={inflateInit(e){const t=this;return t.istate=new Vn,e||(e=15),t.istate.inflateInit(t,e)},inflate(e){const t=this;return t.istate?t.istate.inflate(t,e):on},inflateEnd(){const e=this;if(!e.istate)return on;const t=e.istate.inflateEnd(e);return e.istate=null,t},inflateSync(){const e=this;return e.istate?e.istate.inflateSync(e):on},inflateSetDictionary(e,t){const n=this;return n.istate?n.istate.inflateSetDictionary(n,e,t):on},read_byte(e){return this.next_in[e]},read_buf(e,t){return this.next_in.subarray(e,e+t)}};const Kn=4294967295,$n=65535,Yn=33639248,Gn=101075792,Zn=22,Xn=(new Date(2107,11,31),void new Date(1980,0,1)),Jn="undefined",Qn="function";class er{constructor(e){return class extends TransformStream{constructor(t,n){const r=new e(n);super({transform(e,t){t.enqueue(r.append(e))},flush(e){const t=r.flush();t&&e.enqueue(t)}})}}}}let tr=2;try{typeof navigator!=Jn&&navigator.hardwareConcurrency&&(tr=navigator.hardwareConcurrency)}catch(e){}const nr={chunkSize:524288,maxWorkers:tr,terminateWorkerTimeout:5e3,useWebWorkers:!0,useCompressionStream:!0,workerScripts:Xn,CompressionStreamNative:typeof CompressionStream!=Jn&&CompressionStream,DecompressionStreamNative:typeof DecompressionStream!=Jn&&DecompressionStream},rr=Object.assign({},nr);function ir(e){const{baseURL:t,chunkSize:n,maxWorkers:r,terminateWorkerTimeout:i,useCompressionStream:o,useWebWorkers:s,Deflate:a,Inflate:c,CompressionStream:l,DecompressionStream:u,workerScripts:d}=e;if(or("baseURL",t),or("chunkSize",n),or("maxWorkers",r),or("terminateWorkerTimeout",i),or("useCompressionStream",o),or("useWebWorkers",s),a&&(rr.CompressionStream=new er(a)),c&&(rr.DecompressionStream=new er(c)),or("CompressionStream",l),or("DecompressionStream",u),d!==Xn){const{deflate:e,inflate:t}=d;if((e||t)&&(rr.workerScripts||(rr.workerScripts={})),e){if(!Array.isArray(e))throw new Error("workerScripts.deflate must be an array");rr.workerScripts.deflate=e}if(t){if(!Array.isArray(t))throw new Error("workerScripts.inflate must be an array");rr.workerScripts.inflate=t}}}function or(e,t){t!==Xn&&(rr[e]=t)}const sr={application:{"andrew-inset":"ez",annodex:"anx","atom+xml":"atom","atomcat+xml":"atomcat","atomserv+xml":"atomsrv",bbolin:"lin","cu-seeme":"cu","davmount+xml":"davmount",dsptype:"tsp",ecmascript:["es","ecma"],futuresplash:"spl",hta:"hta","java-archive":"jar","java-serialized-object":"ser","java-vm":"class",m3g:"m3g","mac-binhex40":"hqx",mathematica:["nb","ma","mb"],msaccess:"mdb",msword:["doc","dot","wiz"],mxf:"mxf",oda:"oda",ogg:"ogx",pdf:"pdf","pgp-keys":"key","pgp-signature":["asc","sig"],"pics-rules":"prf",postscript:["ps","ai","eps","epsi","epsf","eps2","eps3"],rar:"rar","rdf+xml":"rdf","rss+xml":"rss",rtf:"rtf","xhtml+xml":["xhtml","xht"],xml:["xml","xsl","xsd","xpdl"],"xspf+xml":"xspf",zip:"zip","vnd.android.package-archive":"apk","vnd.cinderella":"cdy","vnd.google-earth.kml+xml":"kml","vnd.google-earth.kmz":"kmz","vnd.mozilla.xul+xml":"xul","vnd.ms-excel":["xls","xlb","xlt","xlm","xla","xlc","xlw"],"vnd.ms-pki.seccat":"cat","vnd.ms-pki.stl":"stl","vnd.ms-powerpoint":["ppt","pps","pot","ppa","pwz"],"vnd.oasis.opendocument.chart":"odc","vnd.oasis.opendocument.database":"odb","vnd.oasis.opendocument.formula":"odf","vnd.oasis.opendocument.graphics":"odg","vnd.oasis.opendocument.graphics-template":"otg","vnd.oasis.opendocument.image":"odi","vnd.oasis.opendocument.presentation":"odp","vnd.oasis.opendocument.presentation-template":"otp","vnd.oasis.opendocument.spreadsheet":"ods","vnd.oasis.opendocument.spreadsheet-template":"ots","vnd.oasis.opendocument.text":"odt","vnd.oasis.opendocument.text-master":["odm","otm"],"vnd.oasis.opendocument.text-template":"ott","vnd.oasis.opendocument.text-web":"oth","vnd.openxmlformats-officedocument.spreadsheetml.sheet":"xlsx","vnd.openxmlformats-officedocument.spreadsheetml.template":"xltx","vnd.openxmlformats-officedocument.presentationml.presentation":"pptx","vnd.openxmlformats-officedocument.presentationml.slideshow":"ppsx","vnd.openxmlformats-officedocument.presentationml.template":"potx","vnd.openxmlformats-officedocument.wordprocessingml.document":"docx","vnd.openxmlformats-officedocument.wordprocessingml.template":"dotx","vnd.smaf":"mmf","vnd.stardivision.calc":"sdc","vnd.stardivision.chart":"sds","vnd.stardivision.draw":"sda","vnd.stardivision.impress":"sdd","vnd.stardivision.math":["sdf","smf"],"vnd.stardivision.writer":["sdw","vor"],"vnd.stardivision.writer-global":"sgl","vnd.sun.xml.calc":"sxc","vnd.sun.xml.calc.template":"stc","vnd.sun.xml.draw":"sxd","vnd.sun.xml.draw.template":"std","vnd.sun.xml.impress":"sxi","vnd.sun.xml.impress.template":"sti","vnd.sun.xml.math":"sxm","vnd.sun.xml.writer":"sxw","vnd.sun.xml.writer.global":"sxg","vnd.sun.xml.writer.template":"stw","vnd.symbian.install":["sis","sisx"],"vnd.visio":["vsd","vst","vss","vsw","vsdx","vssx","vstx","vssm","vstm"],"vnd.wap.wbxml":"wbxml","vnd.wap.wmlc":"wmlc","vnd.wap.wmlscriptc":"wmlsc","vnd.wordperfect":"wpd","vnd.wordperfect5.1":"wp5","x-123":"wk","x-7z-compressed":"7z","x-abiword":"abw","x-apple-diskimage":"dmg","x-bcpio":"bcpio","x-bittorrent":"torrent","x-cbr":["cbr","cba","cbt","cb7"],"x-cbz":"cbz","x-cdf":["cdf","cda"],"x-cdlink":"vcd","x-chess-pgn":"pgn","x-cpio":"cpio","x-csh":"csh","x-director":["dir","dxr","cst","cct","cxt","w3d","fgd","swa"],"x-dms":"dms","x-doom":"wad","x-dvi":"dvi","x-httpd-eruby":"rhtml","x-font":"pcf.Z","x-freemind":"mm","x-gnumeric":"gnumeric","x-go-sgf":"sgf","x-graphing-calculator":"gcf","x-gtar":["gtar","taz"],"x-hdf":"hdf","x-httpd-php":["phtml","pht","php"],"x-httpd-php-source":"phps","x-httpd-php3":"php3","x-httpd-php3-preprocessed":"php3p","x-httpd-php4":"php4","x-httpd-php5":"php5","x-ica":"ica","x-info":"info","x-internet-signup":["ins","isp"],"x-iphone":"iii","x-iso9660-image":"iso","x-java-jnlp-file":"jnlp","x-jmol":"jmz","x-killustrator":"kil","x-latex":"latex","x-lyx":"lyx","x-lzx":"lzx","x-maker":["frm","fb","fbdoc"],"x-ms-wmd":"wmd","x-msdos-program":["com","exe","bat","dll"],"x-netcdf":["nc"],"x-ns-proxy-autoconfig":["pac","dat"],"x-nwc":"nwc","x-object":"o","x-oz-application":"oza","x-pkcs7-certreqresp":"p7r","x-python-code":["pyc","pyo"],"x-qgis":["qgs","shp","shx"],"x-quicktimeplayer":"qtl","x-redhat-package-manager":["rpm","rpa"],"x-ruby":"rb","x-sh":"sh","x-shar":"shar","x-shockwave-flash":["swf","swfl"],"x-silverlight":"scr","x-stuffit":"sit","x-sv4cpio":"sv4cpio","x-sv4crc":"sv4crc","x-tar":"tar","x-tex-gf":"gf","x-tex-pk":"pk","x-texinfo":["texinfo","texi"],"x-trash":["~","%","bak","old","sik"],"x-ustar":"ustar","x-wais-source":"src","x-wingz":"wz","x-x509-ca-cert":["crt","der","cer"],"x-xcf":"xcf","x-xfig":"fig","x-xpinstall":"xpi",applixware:"aw","atomsvc+xml":"atomsvc","ccxml+xml":"ccxml","cdmi-capability":"cdmia","cdmi-container":"cdmic","cdmi-domain":"cdmid","cdmi-object":"cdmio","cdmi-queue":"cdmiq","docbook+xml":"dbk","dssc+der":"dssc","dssc+xml":"xdssc","emma+xml":"emma","epub+zip":"epub",exi:"exi","font-tdpfr":"pfr","gml+xml":"gml","gpx+xml":"gpx",gxf:"gxf",hyperstudio:"stk","inkml+xml":["ink","inkml"],ipfix:"ipfix","jsonml+json":"jsonml","lost+xml":"lostxml","mads+xml":"mads",marc:"mrc","marcxml+xml":"mrcx","mathml+xml":["mathml","mml"],mbox:"mbox","mediaservercontrol+xml":"mscml","metalink+xml":"metalink","metalink4+xml":"meta4","mets+xml":"mets","mods+xml":"mods",mp21:["m21","mp21"],mp4:"mp4s","oebps-package+xml":"opf","omdoc+xml":"omdoc",onenote:["onetoc","onetoc2","onetmp","onepkg"],oxps:"oxps","patch-ops-error+xml":"xer","pgp-encrypted":"pgp",pkcs10:"p10","pkcs7-mime":["p7m","p7c"],"pkcs7-signature":"p7s",pkcs8:"p8","pkix-attr-cert":"ac","pkix-crl":"crl","pkix-pkipath":"pkipath",pkixcmp:"pki","pls+xml":"pls","prs.cww":"cww","pskc+xml":"pskcxml","reginfo+xml":"rif","relax-ng-compact-syntax":"rnc","resource-lists+xml":"rl","resource-lists-diff+xml":"rld","rls-services+xml":"rs","rpki-ghostbusters":"gbr","rpki-manifest":"mft","rpki-roa":"roa","rsd+xml":"rsd","sbml+xml":"sbml","scvp-cv-request":"scq","scvp-cv-response":"scs","scvp-vp-request":"spq","scvp-vp-response":"spp",sdp:"sdp","set-payment-initiation":"setpay","set-registration-initiation":"setreg","shf+xml":"shf","sparql-query":"rq","sparql-results+xml":"srx",srgs:"gram","srgs+xml":"grxml","sru+xml":"sru","ssdl+xml":"ssdl","ssml+xml":"ssml","tei+xml":["tei","teicorpus"],"thraud+xml":"tfi","timestamped-data":"tsd","vnd.3gpp.pic-bw-large":"plb","vnd.3gpp.pic-bw-small":"psb","vnd.3gpp.pic-bw-var":"pvb","vnd.3gpp2.tcap":"tcap","vnd.3m.post-it-notes":"pwn","vnd.accpac.simply.aso":"aso","vnd.accpac.simply.imp":"imp","vnd.acucobol":"acu","vnd.acucorp":["atc","acutc"],"vnd.adobe.air-application-installer-package+zip":"air","vnd.adobe.formscentral.fcdt":"fcdt","vnd.adobe.fxp":["fxp","fxpl"],"vnd.adobe.xdp+xml":"xdp","vnd.adobe.xfdf":"xfdf","vnd.ahead.space":"ahead","vnd.airzip.filesecure.azf":"azf","vnd.airzip.filesecure.azs":"azs","vnd.amazon.ebook":"azw","vnd.americandynamics.acc":"acc","vnd.amiga.ami":"ami","vnd.anser-web-certificate-issue-initiation":"cii","vnd.anser-web-funds-transfer-initiation":"fti","vnd.antix.game-component":"atx","vnd.apple.installer+xml":"mpkg","vnd.apple.mpegurl":"m3u8","vnd.aristanetworks.swi":"swi","vnd.astraea-software.iota":"iota","vnd.audiograph":"aep","vnd.blueice.multipass":"mpm","vnd.bmi":"bmi","vnd.businessobjects":"rep","vnd.chemdraw+xml":"cdxml","vnd.chipnuts.karaoke-mmd":"mmd","vnd.claymore":"cla","vnd.cloanto.rp9":"rp9","vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"vnd.cluetrust.cartomobile-config":"c11amc","vnd.cluetrust.cartomobile-config-pkg":"c11amz","vnd.commonspace":"csp","vnd.contact.cmsg":"cdbcmsg","vnd.cosmocaller":"cmc","vnd.crick.clicker":"clkx","vnd.crick.clicker.keyboard":"clkk","vnd.crick.clicker.palette":"clkp","vnd.crick.clicker.template":"clkt","vnd.crick.clicker.wordbank":"clkw","vnd.criticaltools.wbs+xml":"wbs","vnd.ctc-posml":"pml","vnd.cups-ppd":"ppd","vnd.curl.car":"car","vnd.curl.pcurl":"pcurl","vnd.dart":"dart","vnd.data-vision.rdz":"rdz","vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"vnd.dece.ttml+xml":["uvt","uvvt"],"vnd.dece.unspecified":["uvx","uvvx"],"vnd.dece.zip":["uvz","uvvz"],"vnd.denovo.fcselayout-link":"fe_launch","vnd.dna":"dna","vnd.dolby.mlp":"mlp","vnd.dpgraph":"dpg","vnd.dreamfactory":"dfac","vnd.ds-keypoint":"kpxx","vnd.dvb.ait":"ait","vnd.dvb.service":"svc","vnd.dynageo":"geo","vnd.ecowin.chart":"mag","vnd.enliven":"nml","vnd.epson.esf":"esf","vnd.epson.msf":"msf","vnd.epson.quickanime":"qam","vnd.epson.salt":"slt","vnd.epson.ssf":"ssf","vnd.eszigno3+xml":["es3","et3"],"vnd.ezpix-album":"ez2","vnd.ezpix-package":"ez3","vnd.fdf":"fdf","vnd.fdsn.mseed":"mseed","vnd.fdsn.seed":["seed","dataless"],"vnd.flographit":"gph","vnd.fluxtime.clip":"ftc","vnd.framemaker":["fm","frame","maker","book"],"vnd.frogans.fnc":"fnc","vnd.frogans.ltf":"ltf","vnd.fsc.weblaunch":"fsc","vnd.fujitsu.oasys":"oas","vnd.fujitsu.oasys2":"oa2","vnd.fujitsu.oasys3":"oa3","vnd.fujitsu.oasysgp":"fg5","vnd.fujitsu.oasysprs":"bh2","vnd.fujixerox.ddd":"ddd","vnd.fujixerox.docuworks":"xdw","vnd.fujixerox.docuworks.binder":"xbd","vnd.fuzzysheet":"fzs","vnd.genomatix.tuxedo":"txd","vnd.geogebra.file":"ggb","vnd.geogebra.tool":"ggt","vnd.geometry-explorer":["gex","gre"],"vnd.geonext":"gxt","vnd.geoplan":"g2w","vnd.geospace":"g3w","vnd.gmx":"gmx","vnd.grafeq":["gqf","gqs"],"vnd.groove-account":"gac","vnd.groove-help":"ghf","vnd.groove-identity-message":"gim","vnd.groove-injector":"grv","vnd.groove-tool-message":"gtm","vnd.groove-tool-template":"tpl","vnd.groove-vcard":"vcg","vnd.hal+xml":"hal","vnd.handheld-entertainment+xml":"zmm","vnd.hbci":"hbci","vnd.hhe.lesson-player":"les","vnd.hp-hpgl":"hpgl","vnd.hp-hpid":"hpid","vnd.hp-hps":"hps","vnd.hp-jlyt":"jlt","vnd.hp-pcl":"pcl","vnd.hp-pclxl":"pclxl","vnd.hydrostatix.sof-data":"sfd-hdstx","vnd.ibm.minipay":"mpy","vnd.ibm.modcap":["afp","listafp","list3820"],"vnd.ibm.rights-management":"irm","vnd.ibm.secure-container":"sc","vnd.iccprofile":["icc","icm"],"vnd.igloader":"igl","vnd.immervision-ivp":"ivp","vnd.immervision-ivu":"ivu","vnd.insors.igm":"igm","vnd.intercon.formnet":["xpw","xpx"],"vnd.intergeo":"i2g","vnd.intu.qbo":"qbo","vnd.intu.qfx":"qfx","vnd.ipunplugged.rcprofile":"rcprofile","vnd.irepository.package+xml":"irp","vnd.is-xpr":"xpr","vnd.isac.fcs":"fcs","vnd.jam":"jam","vnd.jcp.javame.midlet-rms":"rms","vnd.jisp":"jisp","vnd.joost.joda-archive":"joda","vnd.kahootz":["ktz","ktr"],"vnd.kde.karbon":"karbon","vnd.kde.kchart":"chrt","vnd.kde.kformula":"kfo","vnd.kde.kivio":"flw","vnd.kde.kontour":"kon","vnd.kde.kpresenter":["kpr","kpt"],"vnd.kde.kspread":"ksp","vnd.kde.kword":["kwd","kwt"],"vnd.kenameaapp":"htke","vnd.kidspiration":"kia","vnd.kinar":["kne","knp"],"vnd.koan":["skp","skd","skt","skm"],"vnd.kodak-descriptor":"sse","vnd.las.las+xml":"lasxml","vnd.llamagraphics.life-balance.desktop":"lbd","vnd.llamagraphics.life-balance.exchange+xml":"lbe","vnd.lotus-1-2-3":"123","vnd.lotus-approach":"apr","vnd.lotus-freelance":"pre","vnd.lotus-notes":"nsf","vnd.lotus-organizer":"org","vnd.lotus-screencam":"scm","vnd.lotus-wordpro":"lwp","vnd.macports.portpkg":"portpkg","vnd.mcd":"mcd","vnd.medcalcdata":"mc1","vnd.mediastation.cdkey":"cdkey","vnd.mfer":"mwf","vnd.mfmp":"mfm","vnd.micrografx.flo":"flo","vnd.micrografx.igx":"igx","vnd.mif":"mif","vnd.mobius.daf":"daf","vnd.mobius.dis":"dis","vnd.mobius.mbk":"mbk","vnd.mobius.mqy":"mqy","vnd.mobius.msl":"msl","vnd.mobius.plc":"plc","vnd.mobius.txf":"txf","vnd.mophun.application":"mpn","vnd.mophun.certificate":"mpc","vnd.ms-artgalry":"cil","vnd.ms-cab-compressed":"cab","vnd.ms-excel.addin.macroenabled.12":"xlam","vnd.ms-excel.sheet.binary.macroenabled.12":"xlsb","vnd.ms-excel.sheet.macroenabled.12":"xlsm","vnd.ms-excel.template.macroenabled.12":"xltm","vnd.ms-fontobject":"eot","vnd.ms-htmlhelp":"chm","vnd.ms-ims":"ims","vnd.ms-lrm":"lrm","vnd.ms-officetheme":"thmx","vnd.ms-powerpoint.addin.macroenabled.12":"ppam","vnd.ms-powerpoint.presentation.macroenabled.12":"pptm","vnd.ms-powerpoint.slide.macroenabled.12":"sldm","vnd.ms-powerpoint.slideshow.macroenabled.12":"ppsm","vnd.ms-powerpoint.template.macroenabled.12":"potm","vnd.ms-project":["mpp","mpt"],"vnd.ms-word.document.macroenabled.12":"docm","vnd.ms-word.template.macroenabled.12":"dotm","vnd.ms-works":["wps","wks","wcm","wdb"],"vnd.ms-wpl":"wpl","vnd.ms-xpsdocument":"xps","vnd.mseq":"mseq","vnd.musician":"mus","vnd.muvee.style":"msty","vnd.mynfc":"taglet","vnd.neurolanguage.nlu":"nlu","vnd.nitf":["ntf","nitf"],"vnd.noblenet-directory":"nnd","vnd.noblenet-sealer":"nns","vnd.noblenet-web":"nnw","vnd.nokia.n-gage.data":"ngdat","vnd.nokia.n-gage.symbian.install":"n-gage","vnd.nokia.radio-preset":"rpst","vnd.nokia.radio-presets":"rpss","vnd.novadigm.edm":"edm","vnd.novadigm.edx":"edx","vnd.novadigm.ext":"ext","vnd.oasis.opendocument.chart-template":"otc","vnd.oasis.opendocument.formula-template":"odft","vnd.oasis.opendocument.image-template":"oti","vnd.olpc-sugar":"xo","vnd.oma.dd2+xml":"dd2","vnd.openofficeorg.extension":"oxt","vnd.openxmlformats-officedocument.presentationml.slide":"sldx","vnd.osgeo.mapguide.package":"mgp","vnd.osgi.dp":"dp","vnd.osgi.subsystem":"esa","vnd.palm":["pdb","pqa","oprc"],"vnd.pawaafile":"paw","vnd.pg.format":"str","vnd.pg.osasli":"ei6","vnd.picsel":"efif","vnd.pmi.widget":"wg","vnd.pocketlearn":"plf","vnd.powerbuilder6":"pbd","vnd.previewsystems.box":"box","vnd.proteus.magazine":"mgz","vnd.publishare-delta-tree":"qps","vnd.pvi.ptid1":"ptid","vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"vnd.realvnc.bed":"bed","vnd.recordare.musicxml":"mxl","vnd.recordare.musicxml+xml":"musicxml","vnd.rig.cryptonote":"cryptonote","vnd.rn-realmedia":"rm","vnd.rn-realmedia-vbr":"rmvb","vnd.route66.link66+xml":"link66","vnd.sailingtracker.track":"st","vnd.seemail":"see","vnd.sema":"sema","vnd.semd":"semd","vnd.semf":"semf","vnd.shana.informed.formdata":"ifm","vnd.shana.informed.formtemplate":"itp","vnd.shana.informed.interchange":"iif","vnd.shana.informed.package":"ipk","vnd.simtech-mindmapper":["twd","twds"],"vnd.smart.teacher":"teacher","vnd.solent.sdkm+xml":["sdkm","sdkd"],"vnd.spotfire.dxp":"dxp","vnd.spotfire.sfs":"sfs","vnd.stepmania.package":"smzip","vnd.stepmania.stepchart":"sm","vnd.sus-calendar":["sus","susp"],"vnd.svd":"svd","vnd.syncml+xml":"xsm","vnd.syncml.dm+wbxml":"bdm","vnd.syncml.dm+xml":"xdm","vnd.tao.intent-module-archive":"tao","vnd.tcpdump.pcap":["pcap","cap","dmp"],"vnd.tmobile-livetv":"tmo","vnd.trid.tpt":"tpt","vnd.triscape.mxs":"mxs","vnd.trueapp":"tra","vnd.ufdl":["ufd","ufdl"],"vnd.uiq.theme":"utz","vnd.umajin":"umj","vnd.unity":"unityweb","vnd.uoml+xml":"uoml","vnd.vcx":"vcx","vnd.visionary":"vis","vnd.vsf":"vsf","vnd.webturbo":"wtb","vnd.wolfram.player":"nbp","vnd.wqd":"wqd","vnd.wt.stf":"stf","vnd.xara":"xar","vnd.xfdl":"xfdl","vnd.yamaha.hv-dic":"hvd","vnd.yamaha.hv-script":"hvs","vnd.yamaha.hv-voice":"hvp","vnd.yamaha.openscoreformat":"osf","vnd.yamaha.openscoreformat.osfpvg+xml":"osfpvg","vnd.yamaha.smaf-audio":"saf","vnd.yamaha.smaf-phrase":"spf","vnd.yellowriver-custom-menu":"cmp","vnd.zul":["zir","zirz"],"vnd.zzazz.deck+xml":"zaz","voicexml+xml":"vxml",widget:"wgt",winhlp:"hlp","wsdl+xml":"wsdl","wspolicy+xml":"wspolicy","x-ace-compressed":"ace","x-authorware-bin":["aab","x32","u32","vox"],"x-authorware-map":"aam","x-authorware-seg":"aas","x-blorb":["blb","blorb"],"x-bzip":"bz","x-bzip2":["bz2","boz"],"x-cfs-compressed":"cfs","x-chat":"chat","x-conference":"nsc","x-dgc-compressed":"dgc","x-dtbncx+xml":"ncx","x-dtbook+xml":"dtb","x-dtbresource+xml":"res","x-eva":"eva","x-font-bdf":"bdf","x-font-ghostscript":"gsf","x-font-linux-psf":"psf","x-font-pcf":"pcf","x-font-snf":"snf","x-font-ttf":["ttf","ttc"],"x-font-type1":["pfa","pfb","pfm","afm"],"x-freearc":"arc","x-gca-compressed":"gca","x-glulx":"ulx","x-gramps-xml":"gramps","x-install-instructions":"install","x-lzh-compressed":["lzh","lha"],"x-mie":"mie","x-mobipocket-ebook":["prc","mobi"],"x-ms-application":"application","x-ms-shortcut":"lnk","x-ms-xbap":"xbap","x-msbinder":"obd","x-mscardfile":"crd","x-msclip":"clp","application/x-ms-installer":"msi","x-msmediaview":["mvb","m13","m14"],"x-msmetafile":["wmf","wmz","emf","emz"],"x-msmoney":"mny","x-mspublisher":"pub","x-msschedule":"scd","x-msterminal":"trm","x-mswrite":"wri","x-nzb":"nzb","x-pkcs12":["p12","pfx"],"x-pkcs7-certificates":["p7b","spc"],"x-research-info-systems":"ris","x-silverlight-app":"xap","x-sql":"sql","x-stuffitx":"sitx","x-subrip":"srt","x-t3vm-image":"t3","x-tex-tfm":"tfm","x-tgif":"obj","x-xliff+xml":"xlf","x-xz":"xz","x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"xaml+xml":"xaml","xcap-diff+xml":"xdf","xenc+xml":"xenc","xml-dtd":"dtd","xop+xml":"xop","xproc+xml":"xpl","xslt+xml":"xslt","xv+xml":["mxml","xhvml","xvml","xvm"],yang:"yang","yin+xml":"yin",envoy:"evy",fractals:"fif","internet-property-stream":"acx",olescript:"axs","vnd.ms-outlook":"msg","vnd.ms-pkicertstore":"sst","x-compress":"z","x-perfmon":["pma","pmc","pmr","pmw"],"ynd.ms-pkipko":"pko",gzip:["gz","tgz"],"smil+xml":["smi","smil"],"vnd.debian.binary-package":["deb","udeb"],"vnd.hzn-3d-crossword":"x3d","vnd.sqlite3":["db","sqlite","sqlite3","db-wal","sqlite-wal","db-shm","sqlite-shm"],"vnd.wap.sic":"sic","vnd.wap.slc":"slc","x-krita":["kra","krz"],"x-perl":["pm","pl"],yaml:["yaml","yml"]},audio:{amr:"amr","amr-wb":"awb",annodex:"axa",basic:["au","snd"],flac:"flac",midi:["mid","midi","kar","rmi"],mpeg:["mpga","mpega","mp3","m4a","mp2a","m2a","m3a"],mpegurl:"m3u",ogg:["oga","ogg","spx"],"prs.sid":"sid","x-aiff":"aifc","x-gsm":"gsm","x-ms-wma":"wma","x-ms-wax":"wax","x-pn-realaudio":"ram","x-realaudio":"ra","x-sd2":"sd2",adpcm:"adp",mp4:"mp4a",s3m:"s3m",silk:"sil","vnd.dece.audio":["uva","uvva"],"vnd.digital-winds":"eol","vnd.dra":"dra","vnd.dts":"dts","vnd.dts.hd":"dtshd","vnd.lucent.voice":"lvp","vnd.ms-playready.media.pya":"pya","vnd.nuera.ecelp4800":"ecelp4800","vnd.nuera.ecelp7470":"ecelp7470","vnd.nuera.ecelp9600":"ecelp9600","vnd.rip":"rip",webm:"weba","x-caf":"caf","x-matroska":"mka","x-pn-realaudio-plugin":"rmp",xm:"xm",aac:"aac",aiff:["aiff","aif","aff"],opus:"opus",wav:"wav"},chemical:{"x-alchemy":"alc","x-cache":["cac","cache"],"x-cache-csf":"csf","x-cactvs-binary":["cbin","cascii","ctab"],"x-cdx":"cdx","x-chem3d":"c3d","x-cif":"cif","x-cmdf":"cmdf","x-cml":"cml","x-compass":"cpa","x-crossfire":"bsd","x-csml":["csml","csm"],"x-ctx":"ctx","x-cxf":["cxf","cef"],"x-embl-dl-nucleotide":["emb","embl"],"x-gamess-input":["inp","gam","gamin"],"x-gaussian-checkpoint":["fch","fchk"],"x-gaussian-cube":"cub","x-gaussian-input":["gau","gjc","gjf"],"x-gaussian-log":"gal","x-gcg8-sequence":"gcg","x-genbank":"gen","x-hin":"hin","x-isostar":["istr","ist"],"x-jcamp-dx":["jdx","dx"],"x-kinemage":"kin","x-macmolecule":"mcm","x-macromodel-input":"mmod","x-mdl-molfile":"mol","x-mdl-rdfile":"rd","x-mdl-rxnfile":"rxn","x-mdl-sdfile":"sd","x-mdl-tgf":"tgf","x-mmcif":"mcif","x-mol2":"mol2","x-molconn-Z":"b","x-mopac-graph":"gpt","x-mopac-input":["mop","mopcrt","zmt"],"x-mopac-out":"moo","x-ncbi-asn1":"asn","x-ncbi-asn1-ascii":["prt","ent"],"x-ncbi-asn1-binary":"val","x-rosdal":"ros","x-swissprot":"sw","x-vamas-iso14976":"vms","x-vmd":"vmd","x-xtel":"xtel","x-xyz":"xyz"},font:{otf:"otf",woff:"woff",woff2:"woff2"},image:{gif:"gif",ief:"ief",jpeg:["jpeg","jpg","jpe","jfif","jfif-tbnl","jif"],pcx:"pcx",png:"png","svg+xml":["svg","svgz"],tiff:["tiff","tif"],"vnd.djvu":["djvu","djv"],"vnd.wap.wbmp":"wbmp","x-canon-cr2":"cr2","x-canon-crw":"crw","x-cmu-raster":"ras","x-coreldraw":"cdr","x-coreldrawpattern":"pat","x-coreldrawtemplate":"cdt","x-corelphotopaint":"cpt","x-epson-erf":"erf","x-icon":"ico","x-jg":"art","x-jng":"jng","x-nikon-nef":"nef","x-olympus-orf":"orf","x-portable-anymap":"pnm","x-portable-bitmap":"pbm","x-portable-graymap":"pgm","x-portable-pixmap":"ppm","x-rgb":"rgb","x-xbitmap":"xbm","x-xpixmap":"xpm","x-xwindowdump":"xwd",bmp:"bmp",cgm:"cgm",g3fax:"g3",ktx:"ktx","prs.btif":"btif",sgi:"sgi","vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"vnd.dwg":"dwg","vnd.dxf":"dxf","vnd.fastbidsheet":"fbs","vnd.fpx":"fpx","vnd.fst":"fst","vnd.fujixerox.edmics-mmr":"mmr","vnd.fujixerox.edmics-rlc":"rlc","vnd.ms-modi":"mdi","vnd.ms-photo":"wdp","vnd.net-fpx":"npx","vnd.xiff":"xif",webp:"webp","x-3ds":"3ds","x-cmx":"cmx","x-freehand":["fh","fhc","fh4","fh5","fh7"],"x-pict":["pic","pct"],"x-tga":"tga","cis-cod":"cod",avif:"avifs",heic:["heif","heic"],pjpeg:["pjpg"],"vnd.adobe.photoshop":"psd","x-adobe-dng":"dng","x-fuji-raf":"raf","x-icns":"icns","x-kodak-dcr":"dcr","x-kodak-k25":"k25","x-kodak-kdc":"kdc","x-minolta-mrw":"mrw","x-panasonic-raw":["raw","rw2","rwl"],"x-pentax-pef":["pef","ptx"],"x-sigma-x3f":"x3f","x-sony-arw":"arw","x-sony-sr2":"sr2","x-sony-srf":"srf"},message:{rfc822:["eml","mime","mht","mhtml","nws"]},model:{iges:["igs","iges"],mesh:["msh","mesh","silo"],vrml:["wrl","vrml"],"x3d+vrml":["x3dv","x3dvz"],"x3d+xml":"x3dz","x3d+binary":["x3db","x3dbz"],"vnd.collada+xml":"dae","vnd.dwf":"dwf","vnd.gdl":"gdl","vnd.gtw":"gtw","vnd.mts":"mts","vnd.usdz+zip":"usdz","vnd.vtu":"vtu"},text:{"cache-manifest":["manifest","appcache"],calendar:["ics","icz","ifb"],css:"css",csv:"csv",h323:"323",html:["html","htm","shtml","stm"],iuls:"uls",plain:["txt","text","brf","conf","def","list","log","in","bas","diff","ksh"],richtext:"rtx",scriptlet:["sct","wsc"],texmacs:"tm","tab-separated-values":"tsv","vnd.sun.j2me.app-descriptor":"jad","vnd.wap.wml":"wml","vnd.wap.wmlscript":"wmls","x-bibtex":"bib","x-boo":"boo","x-c++hdr":["h++","hpp","hxx","hh"],"x-c++src":["c++","cpp","cxx","cc"],"x-component":"htc","x-dsrc":"d","x-diff":"patch","x-haskell":"hs","x-java":"java","x-literate-haskell":"lhs","x-moc":"moc","x-pascal":["p","pas","pp","inc"],"x-pcs-gcd":"gcd","x-python":"py","x-scala":"scala","x-setext":"etx","x-tcl":["tcl","tk"],"x-tex":["tex","ltx","sty","cls"],"x-vcalendar":"vcs","x-vcard":"vcf",n3:"n3","prs.lines.tag":"dsc",sgml:["sgml","sgm"],troff:["t","tr","roff","man","me","ms"],turtle:"ttl","uri-list":["uri","uris","urls"],vcard:"vcard","vnd.curl":"curl","vnd.curl.dcurl":"dcurl","vnd.curl.scurl":"scurl","vnd.curl.mcurl":"mcurl","vnd.dvb.subtitle":"sub","vnd.fly":"fly","vnd.fmi.flexstor":"flx","vnd.graphviz":"gv","vnd.in3d.3dml":"3dml","vnd.in3d.spot":"spot","x-asm":["s","asm"],"x-c":["c","h","dic"],"x-fortran":["f","for","f77","f90"],"x-opml":"opml","x-nfo":"nfo","x-sfv":"sfv","x-uuencode":"uu",webviewhtml:"htt",javascript:"js",json:"json",markdown:["md","markdown","mdown","markdn"],"vnd.wap.si":"si","vnd.wap.sl":"sl"},video:{avif:"avif","3gpp":"3gp",annodex:"axv",dl:"dl",dv:["dif","dv"],fli:"fli",gl:"gl",mpeg:["mpeg","mpg","mpe","m1v","m2v","mp2","mpa","mpv2"],mp4:["mp4","mp4v","mpg4"],quicktime:["qt","mov"],ogg:"ogv","vnd.mpegurl":["mxu","m4u"],"x-flv":"flv","x-la-asf":["lsf","lsx"],"x-mng":"mng","x-ms-asf":["asf","asx","asr"],"x-ms-wm":"wm","x-ms-wmv":"wmv","x-ms-wmx":"wmx","x-ms-wvx":"wvx","x-msvideo":"avi","x-sgi-movie":"movie","x-matroska":["mpv","mkv","mk3d","mks"],"3gpp2":"3g2",h261:"h261",h263:"h263",h264:"h264",jpeg:"jpgv",jpm:["jpm","jpgm"],mj2:["mj2","mjp2"],"vnd.dece.hd":["uvh","uvvh"],"vnd.dece.mobile":["uvm","uvvm"],"vnd.dece.pd":["uvp","uvvp"],"vnd.dece.sd":["uvs","uvvs"],"vnd.dece.video":["uvv","uvvv"],"vnd.dvb.file":"dvb","vnd.fvt":"fvt","vnd.ms-playready.media.pyv":"pyv","vnd.uvvu.mp4":["uvu","uvvu"],"vnd.vivo":"viv",webm:"webm","x-f4v":"f4v","x-m4v":"m4v","x-ms-vob":"vob","x-smv":"smv",mp2t:"ts"},"x-conference":{"x-cooltalk":"ice"},"x-world":{"x-vrml":["vrm","flr","wrz","xaf","xof"]}};(()=>{const e={};for(const t of Object.keys(sr))for(const n of Object.keys(sr[t])){const r=sr[t][n];if("string"==typeof r)e[r]=t+"/"+n;else for(let i=0;i<r.length;i++)e[r[i]]=t+"/"+n}})();const ar=[];for(let e=0;e<256;e++){let t=e;for(let e=0;e<8;e++)1&t?t=t>>>1^3988292384:t>>>=1;ar[e]=t}class cr{constructor(e){this.crc=e||-1}append(e){let t=0|this.crc;for(let n=0,r=0|e.length;n<r;n++)t=t>>>8^ar[255&(t^e[n])];this.crc=t}get(){return~this.crc}}class lr extends TransformStream{constructor(){let e;const t=new cr;super({transform(e,n){t.append(e),n.enqueue(e)},flush(){const n=new Uint8Array(4);new DataView(n.buffer).setUint32(0,t.get()),e.value=n}}),e=this}}const ur={concat(e,t){if(0===e.length||0===t.length)return e.concat(t);const n=e[e.length-1],r=ur.getPartial(n);return 32===r?e.concat(t):ur._shiftRight(t,r,0|n,e.slice(0,e.length-1))},bitLength(e){const t=e.length;if(0===t)return 0;const n=e[t-1];return 32*(t-1)+ur.getPartial(n)},clamp(e,t){if(32*e.length<t)return e;const n=(e=e.slice(0,Math.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=ur.partial(t,e[n-1]&2147483648>>t-1,1)),e},partial:(e,t,n)=>32===e?t:(n?0|t:t<<32-e)+1099511627776*e,getPartial:e=>Math.round(e/1099511627776)||32,_shiftRight(e,t,n,r){for(void 0===r&&(r=[]);t>=32;t-=32)r.push(n),n=0;if(0===t)return r.concat(e);for(let i=0;i<e.length;i++)r.push(n|e[i]>>>t),n=e[i]<<32-t;const i=e.length?e[e.length-1]:0,o=ur.getPartial(i);return r.push(ur.partial(t+o&31,t+o>32?n:r.pop(),1)),r}},dr={bytes:{fromBits(e){const t=ur.bitLength(e)/8,n=new Uint8Array(t);let r;for(let i=0;i<t;i++)0==(3&i)&&(r=e[i/4]),n[i]=r>>>24,r<<=8;return n},toBits(e){const t=[];let n,r=0;for(n=0;n<e.length;n++)r=r<<8|e[n],3==(3&n)&&(t.push(r),r=0);return 3&n&&t.push(ur.partial(8*(3&n),r)),t}}},fr=class{constructor(e){const t=this;t.blockSize=512,t._init=[1732584193,4023233417,2562383102,271733878,3285377520],t._key=[1518500249,1859775393,2400959708,3395469782],e?(t._h=e._h.slice(0),t._buffer=e._buffer.slice(0),t._length=e._length):t.reset()}reset(){const e=this;return e._h=e._init.slice(0),e._buffer=[],e._length=0,e}update(e){const t=this;"string"==typeof e&&(e=dr.utf8String.toBits(e));const n=t._buffer=ur.concat(t._buffer,e),r=t._length,i=t._length=r+ur.bitLength(e);if(i>9007199254740991)throw new Error("Cannot hash more than 2^53 - 1 bits");const o=new Uint32Array(n);let s=0;for(let e=t.blockSize+r-(t.blockSize+r&t.blockSize-1);e<=i;e+=t.blockSize)t._block(o.subarray(16*s,16*(s+1))),s+=1;return n.splice(0,16*s),t}finalize(){const e=this;let t=e._buffer;const n=e._h;t=ur.concat(t,[ur.partial(1,1)]);for(let e=t.length+2;15&e;e++)t.push(0);for(t.push(Math.floor(e._length/4294967296)),t.push(0|e._length);t.length;)e._block(t.splice(0,16));return e.reset(),n}_f(e,t,n,r){return e<=19?t&n|~t&r:e<=39?t^n^r:e<=59?t&n|t&r|n&r:e<=79?t^n^r:void 0}_S(e,t){return t<<e|t>>>32-e}_block(e){const t=this,n=t._h,r=Array(80);for(let t=0;t<16;t++)r[t]=e[t];let i=n[0],o=n[1],s=n[2],a=n[3],c=n[4];for(let e=0;e<=79;e++){e>=16&&(r[e]=t._S(1,r[e-3]^r[e-8]^r[e-14]^r[e-16]));const n=t._S(5,i)+t._f(e,o,s,a)+c+r[e]+t._key[Math.floor(e/20)]|0;c=a,a=s,s=t._S(30,o),o=i,i=n}n[0]=n[0]+i|0,n[1]=n[1]+o|0,n[2]=n[2]+s|0,n[3]=n[3]+a|0,n[4]=n[4]+c|0}},pr=class{constructor(e){const t=this;t._tables=[[[],[],[],[],[]],[[],[],[],[],[]]],t._tables[0][0][0]||t._precompute();const n=t._tables[0][4],r=t._tables[1],i=e.length;let o,s,a,c=1;if(4!==i&&6!==i&&8!==i)throw new Error("invalid aes key size");for(t._key=[s=e.slice(0),a=[]],o=i;o<4*i+28;o++){let e=s[o-1];(o%i==0||8===i&&o%i==4)&&(e=n[e>>>24]<<24^n[e>>16&255]<<16^n[e>>8&255]<<8^n[255&e],o%i==0&&(e=e<<8^e>>>24^c<<24,c=c<<1^283*(c>>7))),s[o]=s[o-i]^e}for(let e=0;o;e++,o--){const t=s[3&e?o:o-4];a[e]=o<=4||e<4?t:r[0][n[t>>>24]]^r[1][n[t>>16&255]]^r[2][n[t>>8&255]]^r[3][n[255&t]]}}encrypt(e){return this._crypt(e,0)}decrypt(e){return this._crypt(e,1)}_precompute(){const e=this._tables[0],t=this._tables[1],n=e[4],r=t[4],i=[],o=[];let s,a,c,l;for(let e=0;e<256;e++)o[(i[e]=e<<1^283*(e>>7))^e]=e;for(let u=s=0;!n[u];u^=a||1,s=o[s]||1){let o=s^s<<1^s<<2^s<<3^s<<4;o=o>>8^255&o^99,n[u]=o,r[o]=u,l=i[c=i[a=i[u]]];let d=16843009*l^65537*c^257*a^16843008*u,f=257*i[o]^16843008*o;for(let n=0;n<4;n++)e[n][u]=f=f<<24^f>>>8,t[n][o]=d=d<<24^d>>>8}for(let n=0;n<5;n++)e[n]=e[n].slice(0),t[n]=t[n].slice(0)}_crypt(e,t){if(4!==e.length)throw new Error("invalid aes block size");const n=this._key[t],r=n.length/4-2,i=[0,0,0,0],o=this._tables[t],s=o[0],a=o[1],c=o[2],l=o[3],u=o[4];let d,f,p,h=e[0]^n[0],m=e[t?3:1]^n[1],v=e[2]^n[2],_=e[t?1:3]^n[3],g=4;for(let e=0;e<r;e++)d=s[h>>>24]^a[m>>16&255]^c[v>>8&255]^l[255&_]^n[g],f=s[m>>>24]^a[v>>16&255]^c[_>>8&255]^l[255&h]^n[g+1],p=s[v>>>24]^a[_>>16&255]^c[h>>8&255]^l[255&m]^n[g+2],_=s[_>>>24]^a[h>>16&255]^c[m>>8&255]^l[255&v]^n[g+3],g+=4,h=d,m=f,v=p;for(let e=0;e<4;e++)i[t?3&-e:e]=u[h>>>24]<<24^u[m>>16&255]<<16^u[v>>8&255]<<8^u[255&_]^n[g++],d=h,h=m,m=v,v=_,_=d;return i}},hr={getRandomValues(e){const t=new Uint32Array(e.buffer),n=e=>{let t=987654321;const n=4294967295;return function(){return t=36969*(65535&t)+(t>>16)&n,(((t<<16)+(e=18e3*(65535&e)+(e>>16)&n)&n)/4294967296+.5)*(Math.random()>.5?1:-1)}};for(let r,i=0;i<e.length;i+=4){const e=n(4294967296*(r||Math.random()));r=987654071*e(),t[i/4]=4294967296*e()|0}return e}},mr=class{constructor(e,t){this._prf=e,this._initIv=t,this._iv=t}reset(){this._iv=this._initIv}update(e){return this.calculate(this._prf,e,this._iv)}incWord(e){if(255==(e>>24&255)){let t=e>>16&255,n=e>>8&255,r=255&e;255===t?(t=0,255===n?(n=0,255===r?r=0:++r):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=r}else e+=1<<24;return e}incCounter(e){0===(e[0]=this.incWord(e[0]))&&(e[1]=this.incWord(e[1]))}calculate(e,t,n){let r;if(!(r=t.length))return[];const i=ur.bitLength(t);for(let i=0;i<r;i+=4){this.incCounter(n);const r=e.encrypt(n);t[i]^=r[0],t[i+1]^=r[1],t[i+2]^=r[2],t[i+3]^=r[3]}return ur.clamp(t,i)}},vr={importKey:e=>new vr.hmacSha1(dr.bytes.toBits(e)),pbkdf2(e,t,n,r){if(n=n||1e4,r<0||n<0)throw new Error("invalid params to pbkdf2");const i=1+(r>>5)<<2;let o,s,a,c,l;const u=new ArrayBuffer(i),d=new DataView(u);let f=0;const p=ur;for(t=dr.bytes.toBits(t),l=1;f<(i||1);l++){for(o=s=e.encrypt(p.concat(t,[l])),a=1;a<n;a++)for(s=e.encrypt(s),c=0;c<s.length;c++)o[c]^=s[c];for(a=0;f<(i||1)&&a<o.length;a++)d.setInt32(f,o[a]),f+=4}return u.slice(0,r/8)},hmacSha1:class{constructor(e){const t=this,n=t._hash=fr,r=[[],[]];t._baseHash=[new n,new n];const i=t._baseHash[0].blockSize/32;e.length>i&&(e=(new n).update(e).finalize());for(let t=0;t<i;t++)r[0][t]=909522486^e[t],r[1][t]=1549556828^e[t];t._baseHash[0].update(r[0]),t._baseHash[1].update(r[1]),t._resultHash=new n(t._baseHash[0])}reset(){const e=this;e._resultHash=new e._hash(e._baseHash[0]),e._updated=!1}update(e){this._updated=!0,this._resultHash.update(e)}digest(){const e=this,t=e._resultHash.finalize(),n=new e._hash(e._baseHash[1]).update(t).finalize();return e.reset(),n}encrypt(e){if(this._updated)throw new Error("encrypt on already updated hmac called!");return this.update(e),this.digest(e)}}},_r="undefined"!=typeof crypto&&"function"==typeof crypto.getRandomValues,gr="Invalid password",wr="Invalid signature",br="zipjs-abort-check-password";function xr(e){return _r?crypto.getRandomValues(e):hr.getRandomValues(e)}const yr=16,kr={name:"PBKDF2"},Ar=Object.assign({hash:{name:"HMAC"}},kr),Cr=Object.assign({iterations:1e3,hash:{name:"SHA-1"}},kr),Sr=["deriveBits"],zr=[8,12,16],Er=[16,24,32],Wr=10,Ur=[0,0,0,0],Dr="undefined",jr="function",Ir=typeof crypto!=Dr,Tr=Ir&&crypto.subtle,qr=Ir&&typeof Tr!=Dr,Fr=dr.bytes,Lr=pr,Br=mr,Or=vr.hmacSha1;let Mr=Ir&&qr&&typeof Tr.importKey==jr,Pr=Ir&&qr&&typeof Tr.deriveBits==jr;class Nr extends TransformStream{constructor({password:e,signed:t,encryptionStrength:n,checkPasswordOnly:r}){super({start(){Object.assign(this,{ready:new Promise((e=>this.resolveReady=e)),password:e,signed:t,strength:n-1,pending:new Uint8Array})},async transform(e,t){const n=this,{password:i,strength:o,resolveReady:s,ready:a}=n;i?(await async function(e,t,n,r){const i=await Hr(e,t,n,$r(r,0,zr[t])),o=$r(r,zr[t]);if(i[0]!=o[0]||i[1]!=o[1])throw new Error(gr)}(n,o,i,$r(e,0,zr[o]+2)),e=$r(e,zr[o]+2),r?t.error(new Error(br)):s()):await a;const c=new Uint8Array(e.length-Wr-(e.length-Wr)%yr);t.enqueue(Vr(n,e,c,0,Wr,!0))},async flush(e){const{signed:t,ctr:n,hmac:r,pending:i,ready:o}=this;if(r&&n){await o;const s=$r(i,0,i.length-Wr),a=$r(i,i.length-Wr);let c=new Uint8Array;if(s.length){const e=Gr(Fr,s);r.update(e);const t=n.update(e);c=Yr(Fr,t)}if(t){const e=$r(Yr(Fr,r.digest()),0,Wr);for(let t=0;t<Wr;t++)if(e[t]!=a[t])throw new Error(wr)}e.enqueue(c)}}})}}class Rr extends TransformStream{constructor({password:e,encryptionStrength:t}){let n;super({start(){Object.assign(this,{ready:new Promise((e=>this.resolveReady=e)),password:e,strength:t-1,pending:new Uint8Array})},async transform(e,t){const n=this,{password:r,strength:i,resolveReady:o,ready:s}=n;let a=new Uint8Array;r?(a=await async function(e,t,n){const r=xr(new Uint8Array(zr[t]));return Kr(r,await Hr(e,t,n,r))}(n,i,r),o()):await s;const c=new Uint8Array(a.length+e.length-e.length%yr);c.set(a,0),t.enqueue(Vr(n,e,c,a.length,0))},async flush(e){const{ctr:t,hmac:r,pending:i,ready:o}=this;if(r&&t){await o;let s=new Uint8Array;if(i.length){const e=t.update(Gr(Fr,i));r.update(e),s=Yr(Fr,e)}n.signature=Yr(Fr,r.digest()).slice(0,Wr),e.enqueue(Kr(s,n.signature))}}}),n=this}}function Vr(e,t,n,r,i,o){const{ctr:s,hmac:a,pending:c}=e,l=t.length-i;let u;for(c.length&&(t=Kr(c,t),n=function(e,t){if(t&&t>e.length){const n=e;(e=new Uint8Array(t)).set(n,0)}return e}(n,l-l%yr)),u=0;u<=l-yr;u+=yr){const e=Gr(Fr,$r(t,u,u+yr));o&&a.update(e);const i=s.update(e);o||a.update(i),n.set(Yr(Fr,i),u+r)}return e.pending=$r(t,u),n}async function Hr(e,t,n,r){e.password=null;const i=function(e){if("undefined"==typeof TextEncoder){e=unescape(encodeURIComponent(e));const t=new Uint8Array(e.length);for(let n=0;n<t.length;n++)t[n]=e.charCodeAt(n);return t}return(new TextEncoder).encode(e)}(n),o=await async function(e,t,n,r,i){if(!Mr)return vr.importKey(t);try{return await Tr.importKey(e,t,n,!1,i)}catch(e){return Mr=!1,vr.importKey(t)}}("raw",i,Ar,0,Sr),s=await async function(e,t,n){if(!Pr)return vr.pbkdf2(t,e.salt,Cr.iterations,n);try{return await Tr.deriveBits(e,t,n)}catch(r){return Pr=!1,vr.pbkdf2(t,e.salt,Cr.iterations,n)}}(Object.assign({salt:r},Cr),o,8*(2*Er[t]+2)),a=new Uint8Array(s),c=Gr(Fr,$r(a,0,Er[t])),l=Gr(Fr,$r(a,Er[t],2*Er[t])),u=$r(a,2*Er[t]);return Object.assign(e,{keys:{key:c,authentication:l,passwordVerification:u},ctr:new Br(new Lr(c),Array.from(Ur)),hmac:new Or(l)}),u}function Kr(e,t){let n=e;return e.length+t.length&&(n=new Uint8Array(e.length+t.length),n.set(e,0),n.set(t,e.length)),n}function $r(e,t,n){return e.subarray(t,n)}function Yr(e,t){return e.fromBits(t)}function Gr(e,t){return e.toBits(t)}class Zr extends TransformStream{constructor({password:e,passwordVerification:t,checkPasswordOnly:n}){super({start(){Object.assign(this,{password:e,passwordVerification:t}),ei(this,e)},transform(e,t){const r=this;if(r.password){const t=Jr(r,e.subarray(0,12));if(r.password=null,t[11]!=r.passwordVerification)throw new Error(gr);e=e.subarray(12)}n?t.error(new Error(br)):t.enqueue(Jr(r,e))}})}}class Xr extends TransformStream{constructor({password:e,passwordVerification:t}){super({start(){Object.assign(this,{password:e,passwordVerification:t}),ei(this,e)},transform(e,t){const n=this;let r,i;if(n.password){n.password=null;const t=xr(new Uint8Array(12));t[11]=n.passwordVerification,r=new Uint8Array(e.length+t.length),r.set(Qr(n,t),0),i=12}else r=new Uint8Array(e.length),i=0;r.set(Qr(n,e),i),t.enqueue(r)}})}}function Jr(e,t){const n=new Uint8Array(t.length);for(let r=0;r<t.length;r++)n[r]=ni(e)^t[r],ti(e,n[r]);return n}function Qr(e,t){const n=new Uint8Array(t.length);for(let r=0;r<t.length;r++)n[r]=ni(e)^t[r],ti(e,t[r]);return n}function ei(e,t){const n=[305419896,591751049,878082192];Object.assign(e,{keys:n,crcKey0:new cr(n[0]),crcKey2:new cr(n[2])});for(let n=0;n<t.length;n++)ti(e,t.charCodeAt(n))}function ti(e,t){let[n,r,i]=e.keys;e.crcKey0.append([t]),n=~e.crcKey0.get(),r=ii(Math.imul(ii(r+ri(n)),134775813)+1),e.crcKey2.append([r>>>24]),i=~e.crcKey2.get(),e.keys=[n,r,i]}function ni(e){const t=2|e.keys[2];return ri(Math.imul(t,1^t)>>>8)}function ri(e){return 255&e}function ii(e){return 4294967295&e}const oi="deflate-raw";class si extends TransformStream{constructor(e,{chunkSize:t,CompressionStream:n,CompressionStreamNative:r}){super({});const{compressed:i,encrypted:o,useCompressionStream:s,zipCrypto:a,signed:c,level:l}=e,u=this;let d,f,p=ci(super.readable);o&&!a||!c||(d=new lr,p=di(p,d)),i&&(p=ui(p,s,{level:l,chunkSize:t},r,n)),o&&(a?p=di(p,new Xr(e)):(f=new Rr(e),p=di(p,f))),li(u,p,(()=>{let e;o&&!a&&(e=f.signature),o&&!a||!c||(e=new DataView(d.value.buffer).getUint32(0)),u.signature=e}))}}class ai extends TransformStream{constructor(e,{chunkSize:t,DecompressionStream:n,DecompressionStreamNative:r}){super({});const{zipCrypto:i,encrypted:o,signed:s,signature:a,compressed:c,useCompressionStream:l}=e;let u,d,f=ci(super.readable);o&&(i?f=di(f,new Zr(e)):(d=new Nr(e),f=di(f,d))),c&&(f=ui(f,l,{chunkSize:t},r,n)),o&&!i||!s||(u=new lr,f=di(f,u)),li(this,f,(()=>{if((!o||i)&&s){const e=new DataView(u.value.buffer);if(a!=e.getUint32(0,!1))throw new Error(wr)}}))}}function ci(e){return di(e,new TransformStream({transform(e,t){e&&e.length&&t.enqueue(e)}}))}function li(e,t,n){t=di(t,new TransformStream({flush:n})),Object.defineProperty(e,"readable",{get:()=>t})}function ui(e,t,n,r,i){try{e=di(e,new(t&&r?r:i)(oi,n))}catch(r){if(!t)throw r;e=di(e,new i(oi,n))}return e}function di(e,t){return e.pipeThrough(t)}const fi="message",pi="pull",hi="data",mi="ack",vi="close",_i="inflate";class gi extends TransformStream{constructor(e,t){super({});const n=this,{codecType:r}=e;let i;r.startsWith("deflate")?i=si:r.startsWith(_i)&&(i=ai);let o=0;const s=new i(e,t),a=super.readable,c=new TransformStream({transform(e,t){e&&e.length&&(o+=e.length,t.enqueue(e))},flush(){const{signature:e}=s;Object.assign(n,{signature:e,size:o})}});Object.defineProperty(n,"readable",{get:()=>a.pipeThrough(s).pipeThrough(c)})}}const wi=typeof Worker!=Jn;class bi{constructor(e,{readable:t,writable:n},{options:r,config:i,streamOptions:o,useWebWorkers:s,transferStreams:a,scripts:c},l){const{signal:u}=o;return Object.assign(e,{busy:!0,readable:t.pipeThrough(new xi(t,o,i),{signal:u}),writable:n,options:Object.assign({},r),scripts:c,transferStreams:a,terminate(){const{worker:t,busy:n}=e;t&&!n&&(t.terminate(),e.interface=null)},onTaskFinished(){e.busy=!1,l(e)}}),(s&&wi?Ai:ki)(e,i)}}class xi extends TransformStream{constructor(e,{onstart:t,onprogress:n,size:r,onend:i},{chunkSize:o}){let s=0;super({start(){t&&yi(t,r)},async transform(e,t){s+=e.length,n&&await yi(n,s,r),t.enqueue(e)},flush(){e.size=s,i&&yi(i,s)}},{highWaterMark:1,size:()=>o})}}async function yi(e,...t){try{await e(...t)}catch(e){}}function ki(e,t){return{run:()=>async function({options:e,readable:t,writable:n,onTaskFinished:r},i){const o=new gi(e,i);try{await t.pipeThrough(o).pipeTo(n,{preventClose:!0,preventAbort:!0});const{signature:e,size:r}=o;return{signature:e,size:r}}finally{r()}}(e,t)}}function Ai(e,{baseURL:t,chunkSize:n}){return e.interface||Object.assign(e,{worker:zi(e.scripts[0],t,e),interface:{run:()=>async function(e,t){let n,r;const i=new Promise(((e,t)=>{n=e,r=t}));Object.assign(e,{reader:null,writer:null,resolveResult:n,rejectResult:r,result:i});const{readable:o,options:s,scripts:a}=e,{writable:c,closed:l}=function(e){const t=e.getWriter();let n;const r=new Promise((e=>n=e));return{writable:new WritableStream({async write(e){await t.ready,await t.write(e)},close(){t.releaseLock(),n()},abort:e=>t.abort(e)}),closed:r}}(e.writable);Ei({type:"start",scripts:a.slice(1),options:s,config:t,readable:o,writable:c},e)||Object.assign(e,{reader:o.getReader(),writer:c.getWriter()});const u=await i;try{await c.getWriter().close()}catch(e){}return await l,u}(e,{chunkSize:n})}}),e.interface}let Ci=!0,Si=!0;function zi(e,t,n){const r={type:"module"};let i,o;typeof e==Qn&&(e=e());try{i=new URL(e,t)}catch(t){i=e}if(Ci)try{o=new Worker(i)}catch(e){Ci=!1,o=new Worker(i,r)}else o=new Worker(i,r);return o.addEventListener(fi,(e=>async function({data:e},t){const{type:n,value:r,messageId:i,result:o,error:s}=e,{reader:a,writer:c,resolveResult:l,rejectResult:u,onTaskFinished:d}=t;try{if(s){const{message:e,stack:t,code:n,name:r}=s,i=new Error(e);Object.assign(i,{stack:t,code:n,name:r}),f(i)}else{if(n==pi){const{value:e,done:n}=await a.read();Ei({type:hi,value:e,done:n,messageId:i},t)}n==hi&&(await c.ready,await c.write(new Uint8Array(r)),Ei({type:mi,messageId:i},t)),n==vi&&f(null,o)}}catch(s){f(s)}function f(e,t){e?u(e):l(t),c&&c.releaseLock(),d()}}(e,n))),o}function Ei(e,{worker:t,writer:n,onTaskFinished:r,transferStreams:i}){try{let{value:n,readable:r,writable:o}=e;const s=[];if(n&&(n.byteLength<n.buffer.byteLength?e.value=n.buffer.slice(0,n.byteLength):e.value=n.buffer,s.push(e.value)),i&&Si?(r&&s.push(r),o&&s.push(o)):e.readable=e.writable=null,s.length)try{return t.postMessage(e,s),!0}catch(n){Si=!1,e.readable=e.writable=null,t.postMessage(e)}else t.postMessage(e)}catch(e){throw n&&n.releaseLock(),r(),e}}let Wi=[];const Ui=[];let Di=0;function ji(e){const{terminateTimeout:t}=e;t&&(clearTimeout(t),e.terminateTimeout=null)}const Ii=65536,Ti="writable";class qi{constructor(){this.size=0}init(){this.initialized=!0}}class Fi extends qi{get readable(){const e=this,{chunkSize:t=Ii}=e,n=new ReadableStream({start(){this.chunkOffset=0},async pull(r){const{offset:i=0,size:o,diskNumberStart:s}=n,{chunkOffset:a}=this;r.enqueue(await Vi(e,i+a,Math.min(t,o-a),s)),a+t>o?r.close():this.chunkOffset+=t}});return n}}class Li extends Fi{constructor(e){super(),Object.assign(this,{blob:e,size:e.size})}async readUint8Array(e,t){const n=this,r=e+t,i=e||r<n.size?n.blob.slice(e,r):n.blob;let o=await i.arrayBuffer();return o.byteLength>t&&(o=o.slice(e,r)),new Uint8Array(o)}}class Bi extends qi{constructor(e){super();const t=new TransformStream,n=[];e&&n.push(["Content-Type",e]),Object.defineProperty(this,Ti,{get:()=>t.writable}),this.blob=new Response(t.readable,{headers:n}).blob()}getData(){return this.blob}}class Oi extends Bi{constructor(e){super(e),Object.assign(this,{encoding:e,utf8:!e||"utf-8"==e.toLowerCase()})}async getData(){const{encoding:e,utf8:t}=this,n=await super.getData();if(n.text&&t)return n.text();{const t=new FileReader;return new Promise(((r,i)=>{Object.assign(t,{onload:({target:e})=>r(e.result),onerror:()=>i(t.error)}),t.readAsText(n,e)}))}}}class Mi extends Fi{constructor(e){super(),this.readers=e}async init(){const e=this,{readers:t}=e;e.lastDiskNumber=0,e.lastDiskOffset=0,await Promise.all(t.map((async(n,r)=>{await n.init(),r!=t.length-1&&(e.lastDiskOffset+=n.size),e.size+=n.size}))),super.init()}async readUint8Array(e,t,n=0){const r=this,{readers:i}=this;let o,s=n;-1==s&&(s=i.length-1);let a=e;for(;a>=i[s].size;)a-=i[s].size,s++;const c=i[s],l=c.size;if(a+t<=l)o=await Vi(c,a,t);else{const i=l-a;o=new Uint8Array(t),o.set(await Vi(c,a,i)),o.set(await r.readUint8Array(e+i,t-i,n),i)}return r.lastDiskNumber=Math.max(s,r.lastDiskNumber),o}}class Pi extends qi{constructor(e,t=4294967295){super();const n=this;let r,i,o;Object.assign(n,{diskNumber:0,diskOffset:0,size:0,maxSize:t,availableSize:t});const s=new WritableStream({async write(t){const{availableSize:s}=n;if(o)t.length>=s?(await a(t.slice(0,s)),await c(),n.diskOffset+=r.size,n.diskNumber++,o=null,await this.write(t.slice(s))):await a(t);else{const{value:s,done:a}=await e.next();if(a&&!s)throw new Error("Writer iterator completed too soon");r=s,r.size=0,r.maxSize&&(n.maxSize=r.maxSize),n.availableSize=n.maxSize,await Ni(r),i=s.writable,o=i.getWriter(),await this.write(t)}},async close(){await o.ready,await c()}});async function a(e){const t=e.length;t&&(await o.ready,await o.write(e),r.size+=t,n.size+=t,n.availableSize-=t)}async function c(){i.size=r.size,await o.close()}Object.defineProperty(n,Ti,{get:()=>s})}}async function Ni(e,t){e.init&&!e.initialized&&await e.init(t)}function Ri(e){return Array.isArray(e)&&(e=new Mi(e)),e instanceof ReadableStream&&(e={readable:e}),e}function Vi(e,t,n,r){return e.readUint8Array(t,n,r)}const Hi="\0☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ".split(""),Ki=256==Hi.length;function $i(e,t){return t&&"cp437"==t.trim().toLowerCase()?function(e){if(Ki){let t="";for(let n=0;n<e.length;n++)t+=Hi[e[n]];return t}return(new TextDecoder).decode(e)}(e):new TextDecoder(t).decode(e)}const Yi="filename",Gi="rawFilename",Zi="comment",Xi="rawComment",Ji="uncompressedSize",Qi="compressedSize",eo="offset",to="diskNumberStart",no="lastModDate",ro="rawLastModDate",io="lastAccessDate",oo="creationDate",so=[Yi,Gi,Qi,Ji,no,ro,Zi,Xi,io,oo,eo,to,to,"internalFileAttribute","externalFileAttribute","msDosCompatible","zip64","directory","bitFlag","encrypted","signature","filenameUTF8","commentUTF8","compressionMethod","version","versionMadeBy","extraField","rawExtraField","extraFieldZip64","extraFieldUnicodePath","extraFieldUnicodeComment","extraFieldAES","extraFieldNTFS","extraFieldExtendedTimestamp"];class ao{constructor(e){so.forEach((t=>this[t]=e[t]))}}const co="File format is not recognized",lo="Compression method not supported",uo="Split zip file",fo="utf-8",po="cp437",ho=[[Ji,Kn],[Qi,Kn],[eo,Kn],[to,$n]],mo={[$n]:{getValue:So,bytes:4},[Kn]:{getValue:zo,bytes:8}};class vo{constructor(e,t={}){Object.assign(this,{reader:Ri(e),options:t,config:rr})}async*getEntriesGenerator(e={}){const t=this;let{reader:n}=t;const{config:r}=t;if(await Ni(n),n.size!==Xn&&n.readUint8Array||(n=new Li(await new Response(n.readable).blob()),await Ni(n)),n.size<Zn)throw new Error(co);n.chunkSize=function(e){return Math.max(e.chunkSize,64)}(r);const i=await async function(e,t,n,r,i){const o=new Uint8Array(4);Eo(o).setUint32(0,101010256,!0);return await s(22)||await s(Math.min(1048582,n));async function s(t){const r=n-t,i=await Vi(e,r,t);for(let e=i.length-22;e>=0;e--)if(i[e]==o[0]&&i[e+1]==o[1]&&i[e+2]==o[2]&&i[e+3]==o[3])return{offset:r+e,buffer:i.slice(e,e+22).buffer}}}(n,0,n.size);if(!i)throw 134695760==So(Eo(await Vi(n,0,4)))?new Error(uo):new Error("End of central directory not found");const o=Eo(i);let s=So(o,12),a=So(o,16);const c=i.offset,l=Co(o,20),u=c+Zn+l;let d=Co(o,4);const f=n.lastDiskNumber||0;let p=Co(o,6),h=Co(o,8),m=0,v=0;if(a==Kn||s==Kn||h==$n||p==$n){const e=Eo(await Vi(n,i.offset-20,20));if(117853008!=So(e,0))throw new Error("End of Zip64 central directory not found");a=zo(e,8);let t=await Vi(n,a,56,-1),r=Eo(t);const o=i.offset-20-56;if(So(r,0)!=Gn&&a!=o){const e=a;a=o,m=a-e,t=await Vi(n,a,56,-1),r=Eo(t)}if(So(r,0)!=Gn)throw new Error("End of Zip64 central directory locator not found");d==$n&&(d=So(r,16)),p==$n&&(p=So(r,20)),h==$n&&(h=zo(r,32)),s==Kn&&(s=zo(r,40)),a-=s}if(a>=n.size&&(m=n.size-a-s-Zn,a=n.size-s-Zn),f!=d)throw new Error(uo);if(a<0)throw new Error(co);let _=0,g=await Vi(n,a,s,p),w=Eo(g);if(s){const e=i.offset-s;if(So(w,_)!=Yn&&a!=e){const t=a;a=e,m+=a-t,g=await Vi(n,a,s,p),w=Eo(g)}}const b=i.offset-a-(n.lastDiskOffset||0);if(s!=b&&b>=0&&(s=b,g=await Vi(n,a,s,p),w=Eo(g)),a<0||a>=n.size)throw new Error(co);const x=xo(t,e,"filenameEncoding"),y=xo(t,e,"commentEncoding");for(let i=0;i<h;i++){const o=new _o(n,r,t.options);if(So(w,_)!=Yn)throw new Error("Central directory header not found");go(o,w,_+6);const s=Boolean(o.bitFlag.languageEncodingFlag),a=_+46,c=a+o.filenameLength,l=c+o.extraFieldLength,u=Co(w,_+4),d=0==(0&u),f=g.subarray(a,c),p=Co(w,_+32),b=l+p,k=g.subarray(l,b),A=s,C=s,S=d&&16==(16&Ao(w,_+38)),z=So(w,_+42)+m;Object.assign(o,{versionMadeBy:u,msDosCompatible:d,compressedSize:0,uncompressedSize:0,commentLength:p,directory:S,offset:z,diskNumberStart:Co(w,_+34),internalFileAttribute:Co(w,_+36),externalFileAttribute:So(w,_+38),rawFilename:f,filenameUTF8:A,commentUTF8:C,rawExtraField:g.subarray(c,l)});const[E,W]=await Promise.all([$i(f,A?fo:x||po),$i(k,C?fo:y||po)]);Object.assign(o,{rawComment:k,filename:E,comment:W,directory:S||E.endsWith("/")}),v=Math.max(z,v),await wo(o,o,w,_+6);const U=new ao(o);U.getData=(e,t)=>o.getData(e,U,t),_=b;const{onprogress:D}=e;if(D)try{await D(i+1,h,new ao(o))}catch(e){}yield U}const k=xo(t,e,"extractPrependedData"),A=xo(t,e,"extractAppendedData");return k&&(t.prependedData=v>0?await Vi(n,0,v):new Uint8Array),t.comment=l?await Vi(n,c+Zn,l):new Uint8Array,A&&(t.appendedData=u<n.size?await Vi(n,u,n.size-u):new Uint8Array),!0}async getEntries(e={}){const t=[];for await(const n of this.getEntriesGenerator(e))t.push(n);return t}async close(){}}class _o{constructor(e,t,n){Object.assign(this,{reader:e,config:t,options:n})}async getData(e,t,n={}){const r=this,{reader:i,offset:o,diskNumberStart:s,extraFieldAES:a,compressionMethod:c,config:l,bitFlag:u,signature:d,rawLastModDate:f,uncompressedSize:p,compressedSize:h}=r,m=t.localDirectory={},v=Eo(await Vi(i,o,30,s));let _=xo(r,n,"password");if(_=_&&_.length&&_,a&&99!=a.originalCompressionMethod)throw new Error(lo);if(0!=c&&8!=c)throw new Error(lo);if(67324752!=So(v,0))throw new Error("Local file header not found");go(m,v,4),m.rawExtraField=m.extraFieldLength?await Vi(i,o+30+m.filenameLength,m.extraFieldLength,s):new Uint8Array,await wo(r,m,v,4,!0),Object.assign(t,{lastAccessDate:m.lastAccessDate,creationDate:m.creationDate});const g=r.encrypted&&m.encrypted,w=g&&!a;if(g){if(!w&&a.strength===Xn)throw new Error("Encryption method not supported");if(!_)throw new Error("File contains encrypted entry")}const b=o+30+m.filenameLength+m.extraFieldLength,x=h,y=i.readable;Object.assign(y,{diskNumberStart:s,offset:b,size:x});const k=xo(r,n,"signal"),A=xo(r,n,"checkPasswordOnly");A&&(e=new WritableStream),e=function(e){e.writable===Xn&&typeof e.next==Qn&&(e=new Pi(e)),e instanceof WritableStream&&(e={writable:e});const{writable:t}=e;return t.size===Xn&&(t.size=0),e instanceof Pi||Object.assign(e,{diskNumber:0,diskOffset:0,availableSize:1/0,maxSize:1/0}),e}(e),await Ni(e,p);const{writable:C}=e,{onstart:S,onprogress:z,onend:E}=n,W={options:{codecType:_i,password:_,zipCrypto:w,encryptionStrength:a&&a.strength,signed:xo(r,n,"checkSignature"),passwordVerification:w&&(u.dataDescriptor?f>>>8&255:d>>>24&255),signature:d,compressed:0!=c,encrypted:g,useWebWorkers:xo(r,n,"useWebWorkers"),useCompressionStream:xo(r,n,"useCompressionStream"),transferStreams:xo(r,n,"transferStreams"),checkPasswordOnly:A},config:l,streamOptions:{signal:k,size:x,onstart:S,onprogress:z,onend:E}};let U=0;try{({outputSize:U}=await async function(e,t){const{options:n,config:r}=t,{transferStreams:i,useWebWorkers:o,useCompressionStream:s,codecType:a,compressed:c,signed:l,encrypted:u}=n,{workerScripts:d,maxWorkers:f,terminateWorkerTimeout:p}=r;t.transferStreams=i||i===Xn;const h=!(c||l||u||t.transferStreams);let m;t.useWebWorkers=!h&&(o||o===Xn&&r.useWebWorkers),t.scripts=t.useWebWorkers&&d?d[a]:[],n.useCompressionStream=s||s===Xn&&r.useCompressionStream;const v=Wi.find((e=>!e.busy));if(v)ji(v),m=new bi(v,e,t,_);else if(Wi.length<f){const n={indexWorker:Di};Di++,Wi.push(n),m=new bi(n,e,t,_)}else m=await new Promise((n=>Ui.push({resolve:n,stream:e,workerOptions:t})));return m.run();function _(e){if(Ui.length){const[{resolve:t,stream:n,workerOptions:r}]=Ui.splice(0,1);t(new bi(e,n,r,_))}else e.worker?(ji(e),Number.isFinite(p)&&p>=0&&(e.terminateTimeout=setTimeout((()=>{Wi=Wi.filter((t=>t!=e)),e.terminate()}),p))):Wi=Wi.filter((t=>t!=e))}}({readable:y,writable:C},W))}catch(e){if(!A||e.message!=br)throw e}finally{const e=xo(r,n,"preventClose");C.size+=U,e||C.locked||await C.getWriter().close()}return A?void 0:e.getData?e.getData():C}}function go(e,t,n){const r=e.rawBitFlag=Co(t,n+2),i=1==(1&r),o=So(t,n+6);Object.assign(e,{encrypted:i,version:Co(t,n),bitFlag:{level:(6&r)>>1,dataDescriptor:8==(8&r),languageEncodingFlag:2048==(2048&r)},rawLastModDate:o,lastModDate:yo(o),filenameLength:Co(t,n+22),extraFieldLength:Co(t,n+24)})}async function wo(e,t,n,r,i){const{rawExtraField:o}=t,s=t.extraField=new Map,a=Eo(new Uint8Array(o));let c=0;try{for(;c<o.length;){const e=Co(a,c),t=Co(a,c+2);s.set(e,{type:e,data:o.slice(c+4,c+4+t)}),c+=4+t}}catch(e){}const l=Co(n,r+4);Object.assign(t,{signature:So(n,r+10),uncompressedSize:So(n,r+18),compressedSize:So(n,r+14)});const u=s.get(1);u&&(function(e,t){t.zip64=!0;const n=Eo(e.data),r=ho.filter((([e,n])=>t[e]==n));for(let i=0,o=0;i<r.length;i++){const[s,a]=r[i];if(t[s]==a){const r=mo[a];t[s]=e[s]=r.getValue(n,o),o+=r.bytes}else if(e[s])throw new Error("Zip64 extra field not found")}}(u,t),t.extraFieldZip64=u);const d=s.get(28789);d&&(await bo(d,Yi,Gi,t,e),t.extraFieldUnicodePath=d);const f=s.get(25461);f&&(await bo(f,Zi,Xi,t,e),t.extraFieldUnicodeComment=f);const p=s.get(39169);p?(function(e,t,n){const r=Eo(e.data),i=Ao(r,4);Object.assign(e,{vendorVersion:Ao(r,0),vendorId:Ao(r,2),strength:i,originalCompressionMethod:n,compressionMethod:Co(r,5)}),t.compressionMethod=e.compressionMethod}(p,t,l),t.extraFieldAES=p):t.compressionMethod=l;const h=s.get(10);h&&(function(e,t){const n=Eo(e.data);let r,i=4;try{for(;i<e.data.length&&!r;){const t=Co(n,i),o=Co(n,i+2);1==t&&(r=e.data.slice(i+4,i+4+o)),i+=4+o}}catch(e){}try{if(r&&24==r.length){const n=Eo(r),i=n.getBigUint64(0,!0),o=n.getBigUint64(8,!0),s=n.getBigUint64(16,!0);Object.assign(e,{rawLastModDate:i,rawLastAccessDate:o,rawCreationDate:s});const a=ko(i),c={lastModDate:a,lastAccessDate:ko(o),creationDate:ko(s)};Object.assign(e,c),Object.assign(t,c)}}catch(e){}}(h,t),t.extraFieldNTFS=h);const m=s.get(21589);m&&(function(e,t,n){const r=Eo(e.data),i=Ao(r,0),o=[],s=[];n?(1==(1&i)&&(o.push(no),s.push(ro)),2==(2&i)&&(o.push(io),s.push("rawLastAccessDate")),4==(4&i)&&(o.push(oo),s.push("rawCreationDate"))):e.data.length>=5&&(o.push(no),s.push(ro));let a=1;o.forEach(((n,i)=>{if(e.data.length>=a+4){const o=So(r,a);t[n]=e[n]=new Date(1e3*o);const c=s[i];e[c]=o}a+=4}))}(m,t,i),t.extraFieldExtendedTimestamp=m);const v=s.get(6534);v&&(t.extraFieldUSDZ=v)}async function bo(e,t,n,r,i){const o=Eo(e.data),s=new cr;s.append(i[n]);const a=Eo(new Uint8Array(4));a.setUint32(0,s.get(),!0);const c=So(o,1);Object.assign(e,{version:Ao(o,0),[t]:$i(e.data.subarray(5)),valid:!i.bitFlag.languageEncodingFlag&&c==So(a,0)}),e.valid&&(r[t]=e[t],r[t+"UTF8"]=!0)}function xo(e,t,n){return t[n]===Xn?e.options[n]:t[n]}function yo(e){const t=(4294901760&e)>>16,n=65535&e;try{return new Date(1980+((65024&t)>>9),((480&t)>>5)-1,31&t,(63488&n)>>11,(2016&n)>>5,2*(31&n),0)}catch(e){}}function ko(e){return new Date(Number(e/BigInt(1e4)-BigInt(116444736e5)))}function Ao(e,t){return e.getUint8(t)}function Co(e,t){return e.getUint16(t,!0)}function So(e,t){return e.getUint32(t,!0)}function zo(e,t){return Number(e.getBigUint64(t,!0))}function Eo(e){return new DataView(e.buffer)}let Wo;new Uint8Array([7,0,2,0,65,69,3,0,0]);try{Wo="file:///home/runner/work/bsc-audio-reviewer/bsc-audio-reviewer/node_modules/@zip.js/zip.js/lib/zip-fs.js"}catch(e){}ir({baseURL:Wo}),function(e){const t=()=>URL.createObjectURL(new Blob(['const{Array:e,Object:t,Number:n,Math:r,Error:s,Uint8Array:i,Uint16Array:o,Uint32Array:c,Int32Array:f,Map:a,DataView:l,Promise:u,TextEncoder:w,crypto:h,postMessage:d,TransformStream:p,ReadableStream:y,WritableStream:m,CompressionStream:b,DecompressionStream:g}=self;class k{constructor(e){return class extends p{constructor(t,n){const r=new e(n);super({transform(e,t){t.enqueue(r.append(e))},flush(e){const t=r.flush();t&&e.enqueue(t)}})}}}}const v=[];for(let e=0;256>e;e++){let t=e;for(let e=0;8>e;e++)1&t?t=t>>>1^3988292384:t>>>=1;v[e]=t}class S{constructor(e){this.t=e||-1}append(e){let t=0|this.t;for(let n=0,r=0|e.length;r>n;n++)t=t>>>8^v[255&(t^e[n])];this.t=t}get(){return~this.t}}class z extends p{constructor(){let e;const t=new S;super({transform(e,n){t.append(e),n.enqueue(e)},flush(){const n=new i(4);new l(n.buffer).setUint32(0,t.get()),e.value=n}}),e=this}}const C={concat(e,t){if(0===e.length||0===t.length)return e.concat(t);const n=e[e.length-1],r=C.i(n);return 32===r?e.concat(t):C.o(t,r,0|n,e.slice(0,e.length-1))},l(e){const t=e.length;if(0===t)return 0;const n=e[t-1];return 32*(t-1)+C.i(n)},u(e,t){if(32*e.length<t)return e;const n=(e=e.slice(0,r.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=C.h(t,e[n-1]&2147483648>>t-1,1)),e},h:(e,t,n)=>32===e?t:(n?0|t:t<<32-e)+1099511627776*e,i:e=>r.round(e/1099511627776)||32,o(e,t,n,r){for(void 0===r&&(r=[]);t>=32;t-=32)r.push(n),n=0;if(0===t)return r.concat(e);for(let s=0;s<e.length;s++)r.push(n|e[s]>>>t),n=e[s]<<32-t;const s=e.length?e[e.length-1]:0,i=C.i(s);return r.push(C.h(t+i&31,t+i>32?n:r.pop(),1)),r}},x={p:{m(e){const t=C.l(e)/8,n=new i(t);let r;for(let s=0;t>s;s++)0==(3&s)&&(r=e[s/4]),n[s]=r>>>24,r<<=8;return n},g(e){const t=[];let n,r=0;for(n=0;n<e.length;n++)r=r<<8|e[n],3==(3&n)&&(t.push(r),r=0);return 3&n&&t.push(C.h(8*(3&n),r)),t}}},_=class{constructor(e){const t=this;t.blockSize=512,t.k=[1732584193,4023233417,2562383102,271733878,3285377520],t.v=[1518500249,1859775393,2400959708,3395469782],e?(t.S=e.S.slice(0),t.C=e.C.slice(0),t._=e._):t.reset()}reset(){const e=this;return e.S=e.k.slice(0),e.C=[],e._=0,e}update(e){const t=this;"string"==typeof e&&(e=x.A.g(e));const n=t.C=C.concat(t.C,e),r=t._,i=t._=r+C.l(e);if(i>9007199254740991)throw new s("Cannot hash more than 2^53 - 1 bits");const o=new c(n);let f=0;for(let e=t.blockSize+r-(t.blockSize+r&t.blockSize-1);i>=e;e+=t.blockSize)t.I(o.subarray(16*f,16*(f+1))),f+=1;return n.splice(0,16*f),t}D(){const e=this;let t=e.C;const n=e.S;t=C.concat(t,[C.h(1,1)]);for(let e=t.length+2;15&e;e++)t.push(0);for(t.push(r.floor(e._/4294967296)),t.push(0|e._);t.length;)e.I(t.splice(0,16));return e.reset(),n}V(e,t,n,r){return e>19?e>39?e>59?e>79?void 0:t^n^r:t&n|t&r|n&r:t^n^r:t&n|~t&r}P(e,t){return t<<e|t>>>32-e}I(t){const n=this,s=n.S,i=e(80);for(let e=0;16>e;e++)i[e]=t[e];let o=s[0],c=s[1],f=s[2],a=s[3],l=s[4];for(let e=0;79>=e;e++){16>e||(i[e]=n.P(1,i[e-3]^i[e-8]^i[e-14]^i[e-16]));const t=n.P(5,o)+n.V(e,c,f,a)+l+i[e]+n.v[r.floor(e/20)]|0;l=a,a=f,f=n.P(30,c),c=o,o=t}s[0]=s[0]+o|0,s[1]=s[1]+c|0,s[2]=s[2]+f|0,s[3]=s[3]+a|0,s[4]=s[4]+l|0}},A={getRandomValues(e){const t=new c(e.buffer),n=e=>{let t=987654321;const n=4294967295;return()=>(t=36969*(65535&t)+(t>>16)&n,(((t<<16)+(e=18e3*(65535&e)+(e>>16)&n)&n)/4294967296+.5)*(r.random()>.5?1:-1))};for(let s,i=0;i<e.length;i+=4){const e=n(4294967296*(s||r.random()));s=987654071*e(),t[i/4]=4294967296*e()|0}return e}},I={importKey:e=>new I.R(x.p.g(e)),B(e,t,n,r){if(n=n||1e4,0>r||0>n)throw new s("invalid params to pbkdf2");const i=1+(r>>5)<<2;let o,c,f,a,u;const w=new ArrayBuffer(i),h=new l(w);let d=0;const p=C;for(t=x.p.g(t),u=1;(i||1)>d;u++){for(o=c=e.encrypt(p.concat(t,[u])),f=1;n>f;f++)for(c=e.encrypt(c),a=0;a<c.length;a++)o[a]^=c[a];for(f=0;(i||1)>d&&f<o.length;f++)h.setInt32(d,o[f]),d+=4}return w.slice(0,r/8)},R:class{constructor(e){const t=this,n=t.M=_,r=[[],[]];t.U=[new n,new n];const s=t.U[0].blockSize/32;e.length>s&&(e=(new n).update(e).D());for(let t=0;s>t;t++)r[0][t]=909522486^e[t],r[1][t]=1549556828^e[t];t.U[0].update(r[0]),t.U[1].update(r[1]),t.K=new n(t.U[0])}reset(){const e=this;e.K=new e.M(e.U[0]),e.N=!1}update(e){this.N=!0,this.K.update(e)}digest(){const e=this,t=e.K.D(),n=new e.M(e.U[1]).update(t).D();return e.reset(),n}encrypt(e){if(this.N)throw new s("encrypt on already updated hmac called!");return this.update(e),this.digest(e)}}},D=void 0!==h&&"function"==typeof h.getRandomValues,V="Invalid password",P="Invalid signature",R="zipjs-abort-check-password";function B(e){return D?h.getRandomValues(e):A.getRandomValues(e)}const E=16,M={name:"PBKDF2"},U=t.assign({hash:{name:"HMAC"}},M),K=t.assign({iterations:1e3,hash:{name:"SHA-1"}},M),N=["deriveBits"],O=[8,12,16],T=[16,24,32],W=10,j=[0,0,0,0],H="undefined",L="function",F=typeof h!=H,q=F&&h.subtle,G=F&&typeof q!=H,J=x.p,Q=class{constructor(e){const t=this;t.O=[[[],[],[],[],[]],[[],[],[],[],[]]],t.O[0][0][0]||t.T();const n=t.O[0][4],r=t.O[1],i=e.length;let o,c,f,a=1;if(4!==i&&6!==i&&8!==i)throw new s("invalid aes key size");for(t.v=[c=e.slice(0),f=[]],o=i;4*i+28>o;o++){let e=c[o-1];(o%i==0||8===i&&o%i==4)&&(e=n[e>>>24]<<24^n[e>>16&255]<<16^n[e>>8&255]<<8^n[255&e],o%i==0&&(e=e<<8^e>>>24^a<<24,a=a<<1^283*(a>>7))),c[o]=c[o-i]^e}for(let e=0;o;e++,o--){const t=c[3&e?o:o-4];f[e]=4>=o||4>e?t:r[0][n[t>>>24]]^r[1][n[t>>16&255]]^r[2][n[t>>8&255]]^r[3][n[255&t]]}}encrypt(e){return this.W(e,0)}decrypt(e){return this.W(e,1)}T(){const e=this.O[0],t=this.O[1],n=e[4],r=t[4],s=[],i=[];let o,c,f,a;for(let e=0;256>e;e++)i[(s[e]=e<<1^283*(e>>7))^e]=e;for(let l=o=0;!n[l];l^=c||1,o=i[o]||1){let i=o^o<<1^o<<2^o<<3^o<<4;i=i>>8^255&i^99,n[l]=i,r[i]=l,a=s[f=s[c=s[l]]];let u=16843009*a^65537*f^257*c^16843008*l,w=257*s[i]^16843008*i;for(let n=0;4>n;n++)e[n][l]=w=w<<24^w>>>8,t[n][i]=u=u<<24^u>>>8}for(let n=0;5>n;n++)e[n]=e[n].slice(0),t[n]=t[n].slice(0)}W(e,t){if(4!==e.length)throw new s("invalid aes block size");const n=this.v[t],r=n.length/4-2,i=[0,0,0,0],o=this.O[t],c=o[0],f=o[1],a=o[2],l=o[3],u=o[4];let w,h,d,p=e[0]^n[0],y=e[t?3:1]^n[1],m=e[2]^n[2],b=e[t?1:3]^n[3],g=4;for(let e=0;r>e;e++)w=c[p>>>24]^f[y>>16&255]^a[m>>8&255]^l[255&b]^n[g],h=c[y>>>24]^f[m>>16&255]^a[b>>8&255]^l[255&p]^n[g+1],d=c[m>>>24]^f[b>>16&255]^a[p>>8&255]^l[255&y]^n[g+2],b=c[b>>>24]^f[p>>16&255]^a[y>>8&255]^l[255&m]^n[g+3],g+=4,p=w,y=h,m=d;for(let e=0;4>e;e++)i[t?3&-e:e]=u[p>>>24]<<24^u[y>>16&255]<<16^u[m>>8&255]<<8^u[255&b]^n[g++],w=p,p=y,y=m,m=b,b=w;return i}},X=class{constructor(e,t){this.j=e,this.H=t,this.L=t}reset(){this.L=this.H}update(e){return this.F(this.j,e,this.L)}q(e){if(255==(e>>24&255)){let t=e>>16&255,n=e>>8&255,r=255&e;255===t?(t=0,255===n?(n=0,255===r?r=0:++r):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=r}else e+=1<<24;return e}G(e){0===(e[0]=this.q(e[0]))&&(e[1]=this.q(e[1]))}F(e,t,n){let r;if(!(r=t.length))return[];const s=C.l(t);for(let s=0;r>s;s+=4){this.G(n);const r=e.encrypt(n);t[s]^=r[0],t[s+1]^=r[1],t[s+2]^=r[2],t[s+3]^=r[3]}return C.u(t,s)}},Y=I.R;let Z=F&&G&&typeof q.importKey==L,$=F&&G&&typeof q.deriveBits==L;class ee extends p{constructor({password:e,signed:n,encryptionStrength:r,checkPasswordOnly:o}){super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:e,signed:n,X:r-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:c,J:f,ready:a}=n;r?(await(async(e,t,n,r)=>{const i=await re(e,t,n,ie(r,0,O[t])),o=ie(r,O[t]);if(i[0]!=o[0]||i[1]!=o[1])throw new s(V)})(n,c,r,ie(e,0,O[c]+2)),e=ie(e,O[c]+2),o?t.error(new s(R)):f()):await a;const l=new i(e.length-W-(e.length-W)%E);t.enqueue(ne(n,e,l,0,W,!0))},async flush(e){const{signed:t,Y:n,Z:r,pending:o,ready:c}=this;if(r&&n){await c;const f=ie(o,0,o.length-W),a=ie(o,o.length-W);let l=new i;if(f.length){const e=ce(J,f);r.update(e);const t=n.update(e);l=oe(J,t)}if(t){const e=ie(oe(J,r.digest()),0,W);for(let t=0;W>t;t++)if(e[t]!=a[t])throw new s(P)}e.enqueue(l)}}})}}class te extends p{constructor({password:e,encryptionStrength:n}){let r;super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:e,X:n-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:s,J:o,ready:c}=n;let f=new i;r?(f=await(async(e,t,n)=>{const r=B(new i(O[t]));return se(r,await re(e,t,n,r))})(n,s,r),o()):await c;const a=new i(f.length+e.length-e.length%E);a.set(f,0),t.enqueue(ne(n,e,a,f.length,0))},async flush(e){const{Y:t,Z:n,pending:s,ready:o}=this;if(n&&t){await o;let c=new i;if(s.length){const e=t.update(ce(J,s));n.update(e),c=oe(J,e)}r.signature=oe(J,n.digest()).slice(0,W),e.enqueue(se(c,r.signature))}}}),r=this}}function ne(e,t,n,r,s,o){const{Y:c,Z:f,pending:a}=e,l=t.length-s;let u;for(a.length&&(t=se(a,t),n=((e,t)=>{if(t&&t>e.length){const n=e;(e=new i(t)).set(n,0)}return e})(n,l-l%E)),u=0;l-E>=u;u+=E){const e=ce(J,ie(t,u,u+E));o&&f.update(e);const s=c.update(e);o||f.update(s),n.set(oe(J,s),u+r)}return e.pending=ie(t,u),n}async function re(n,r,s,o){n.password=null;const c=(e=>{if(void 0===w){const t=new i((e=unescape(encodeURIComponent(e))).length);for(let n=0;n<t.length;n++)t[n]=e.charCodeAt(n);return t}return(new w).encode(e)})(s),f=await(async(e,t,n,r,s)=>{if(!Z)return I.importKey(t);try{return await q.importKey("raw",t,n,!1,s)}catch(e){return Z=!1,I.importKey(t)}})(0,c,U,0,N),a=await(async(e,t,n)=>{if(!$)return I.B(t,e.salt,K.iterations,n);try{return await q.deriveBits(e,t,n)}catch(r){return $=!1,I.B(t,e.salt,K.iterations,n)}})(t.assign({salt:o},K),f,8*(2*T[r]+2)),l=new i(a),u=ce(J,ie(l,0,T[r])),h=ce(J,ie(l,T[r],2*T[r])),d=ie(l,2*T[r]);return t.assign(n,{keys:{key:u,$:h,passwordVerification:d},Y:new X(new Q(u),e.from(j)),Z:new Y(h)}),d}function se(e,t){let n=e;return e.length+t.length&&(n=new i(e.length+t.length),n.set(e,0),n.set(t,e.length)),n}function ie(e,t,n){return e.subarray(t,n)}function oe(e,t){return e.m(t)}function ce(e,t){return e.g(t)}class fe extends p{constructor({password:e,passwordVerification:n,checkPasswordOnly:r}){super({start(){t.assign(this,{password:e,passwordVerification:n}),we(this,e)},transform(e,t){const n=this;if(n.password){const t=le(n,e.subarray(0,12));if(n.password=null,t[11]!=n.passwordVerification)throw new s(V);e=e.subarray(12)}r?t.error(new s(R)):t.enqueue(le(n,e))}})}}class ae extends p{constructor({password:e,passwordVerification:n}){super({start(){t.assign(this,{password:e,passwordVerification:n}),we(this,e)},transform(e,t){const n=this;let r,s;if(n.password){n.password=null;const t=B(new i(12));t[11]=n.passwordVerification,r=new i(e.length+t.length),r.set(ue(n,t),0),s=12}else r=new i(e.length),s=0;r.set(ue(n,e),s),t.enqueue(r)}})}}function le(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=de(e)^t[r],he(e,n[r]);return n}function ue(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=de(e)^t[r],he(e,t[r]);return n}function we(e,n){const r=[305419896,591751049,878082192];t.assign(e,{keys:r,ee:new S(r[0]),te:new S(r[2])});for(let t=0;t<n.length;t++)he(e,n.charCodeAt(t))}function he(e,t){let[n,s,i]=e.keys;e.ee.append([t]),n=~e.ee.get(),s=ye(r.imul(ye(s+pe(n)),134775813)+1),e.te.append([s>>>24]),i=~e.te.get(),e.keys=[n,s,i]}function de(e){const t=2|e.keys[2];return pe(r.imul(t,1^t)>>>8)}function pe(e){return 255&e}function ye(e){return 4294967295&e}const me="deflate-raw";class be extends p{constructor(e,{chunkSize:t,CompressionStream:n,CompressionStreamNative:r}){super({});const{compressed:s,encrypted:i,useCompressionStream:o,zipCrypto:c,signed:f,level:a}=e,u=this;let w,h,d=ke(super.readable);i&&!c||!f||(w=new z,d=ze(d,w)),s&&(d=Se(d,o,{level:a,chunkSize:t},r,n)),i&&(c?d=ze(d,new ae(e)):(h=new te(e),d=ze(d,h))),ve(u,d,(()=>{let e;i&&!c&&(e=h.signature),i&&!c||!f||(e=new l(w.value.buffer).getUint32(0)),u.signature=e}))}}class ge extends p{constructor(e,{chunkSize:t,DecompressionStream:n,DecompressionStreamNative:r}){super({});const{zipCrypto:i,encrypted:o,signed:c,signature:f,compressed:a,useCompressionStream:u}=e;let w,h,d=ke(super.readable);o&&(i?d=ze(d,new fe(e)):(h=new ee(e),d=ze(d,h))),a&&(d=Se(d,u,{chunkSize:t},r,n)),o&&!i||!c||(w=new z,d=ze(d,w)),ve(this,d,(()=>{if((!o||i)&&c){const e=new l(w.value.buffer);if(f!=e.getUint32(0,!1))throw new s(P)}}))}}function ke(e){return ze(e,new p({transform(e,t){e&&e.length&&t.enqueue(e)}}))}function ve(e,n,r){n=ze(n,new p({flush:r})),t.defineProperty(e,"readable",{get:()=>n})}function Se(e,t,n,r,s){try{e=ze(e,new(t&&r?r:s)(me,n))}catch(r){if(!t)throw r;e=ze(e,new s(me,n))}return e}function ze(e,t){return e.pipeThrough(t)}const Ce="data";class xe extends p{constructor(e,n){super({});const r=this,{codecType:s}=e;let i;s.startsWith("deflate")?i=be:s.startsWith("inflate")&&(i=ge);let o=0;const c=new i(e,n),f=super.readable,a=new p({transform(e,t){e&&e.length&&(o+=e.length,t.enqueue(e))},flush(){const{signature:e}=c;t.assign(r,{signature:e,size:o})}});t.defineProperty(r,"readable",{get:()=>f.pipeThrough(c).pipeThrough(a)})}}const _e=new a,Ae=new a;let Ie=0;async function De(e){try{const{options:t,scripts:r,config:s}=e;r&&r.length&&importScripts.apply(void 0,r),self.initCodec&&self.initCodec(),s.CompressionStreamNative=self.CompressionStream,s.DecompressionStreamNative=self.DecompressionStream,self.Deflate&&(s.CompressionStream=new k(self.Deflate)),self.Inflate&&(s.DecompressionStream=new k(self.Inflate));const i={highWaterMark:1,size:()=>s.chunkSize},o=e.readable||new y({async pull(e){const t=new u((e=>_e.set(Ie,e)));Ve({type:"pull",messageId:Ie}),Ie=(Ie+1)%n.MAX_SAFE_INTEGER;const{value:r,done:s}=await t;e.enqueue(r),s&&e.close()}},i),c=e.writable||new m({async write(e){let t;const r=new u((e=>t=e));Ae.set(Ie,t),Ve({type:Ce,value:e,messageId:Ie}),Ie=(Ie+1)%n.MAX_SAFE_INTEGER,await r}},i),f=new xe(t,s);await o.pipeThrough(f).pipeTo(c,{preventClose:!0,preventAbort:!0});try{await c.getWriter().close()}catch(e){}const{signature:a,size:l}=f;Ve({type:"close",result:{signature:a,size:l}})}catch(e){Pe(e)}}function Ve(e){let{value:t}=e;if(t)if(t.length)try{t=new i(t),e.value=t.buffer,d(e,[e.value])}catch(t){d(e)}else d(e);else d(e)}function Pe(e=new s("Unknown error")){const{message:t,stack:n,code:r,name:i}=e;d({error:{message:t,stack:n,code:r,name:i}})}addEventListener("message",(({data:e})=>{const{type:t,messageId:n,value:r,done:s}=e;try{if("start"==t&&De(e),t==Ce){const e=_e.get(n);_e.delete(n),e({value:new i(r),done:s})}if("ack"==t){const e=Ae.get(n);Ae.delete(n),e()}}catch(e){Pe(e)}}));const Re=-2;function Be(t){return Ee(t.map((([t,n])=>new e(t).fill(n,0,t))))}function Ee(t){return t.reduce(((t,n)=>t.concat(e.isArray(n)?Ee(n):n)),[])}const Me=[0,1,2,3].concat(...Be([[2,4],[2,5],[4,6],[4,7],[8,8],[8,9],[16,10],[16,11],[32,12],[32,13],[64,14],[64,15],[2,0],[1,16],[1,17],[2,18],[2,19],[4,20],[4,21],[8,22],[8,23],[16,24],[16,25],[32,26],[32,27],[64,28],[64,29]]));function Ue(){const e=this;function t(e,t){let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}e.ne=n=>{const s=e.re,i=e.ie.se,o=e.ie.oe;let c,f,a,l=-1;for(n.ce=0,n.fe=573,c=0;o>c;c++)0!==s[2*c]?(n.ae[++n.ce]=l=c,n.le[c]=0):s[2*c+1]=0;for(;2>n.ce;)a=n.ae[++n.ce]=2>l?++l:0,s[2*a]=1,n.le[a]=0,n.ue--,i&&(n.we-=i[2*a+1]);for(e.he=l,c=r.floor(n.ce/2);c>=1;c--)n.de(s,c);a=o;do{c=n.ae[1],n.ae[1]=n.ae[n.ce--],n.de(s,1),f=n.ae[1],n.ae[--n.fe]=c,n.ae[--n.fe]=f,s[2*a]=s[2*c]+s[2*f],n.le[a]=r.max(n.le[c],n.le[f])+1,s[2*c+1]=s[2*f+1]=a,n.ae[1]=a++,n.de(s,1)}while(n.ce>=2);n.ae[--n.fe]=n.ae[1],(t=>{const n=e.re,r=e.ie.se,s=e.ie.pe,i=e.ie.ye,o=e.ie.me;let c,f,a,l,u,w,h=0;for(l=0;15>=l;l++)t.be[l]=0;for(n[2*t.ae[t.fe]+1]=0,c=t.fe+1;573>c;c++)f=t.ae[c],l=n[2*n[2*f+1]+1]+1,l>o&&(l=o,h++),n[2*f+1]=l,f>e.he||(t.be[l]++,u=0,i>f||(u=s[f-i]),w=n[2*f],t.ue+=w*(l+u),r&&(t.we+=w*(r[2*f+1]+u)));if(0!==h){do{for(l=o-1;0===t.be[l];)l--;t.be[l]--,t.be[l+1]+=2,t.be[o]--,h-=2}while(h>0);for(l=o;0!==l;l--)for(f=t.be[l];0!==f;)a=t.ae[--c],a>e.he||(n[2*a+1]!=l&&(t.ue+=(l-n[2*a+1])*n[2*a],n[2*a+1]=l),f--)}})(n),((e,n,r)=>{const s=[];let i,o,c,f=0;for(i=1;15>=i;i++)s[i]=f=f+r[i-1]<<1;for(o=0;n>=o;o++)c=e[2*o+1],0!==c&&(e[2*o]=t(s[c]++,c))})(s,e.he,n.be)}}function Ke(e,t,n,r,s){const i=this;i.se=e,i.pe=t,i.ye=n,i.oe=r,i.me=s}Ue.ge=[0,1,2,3,4,5,6,7].concat(...Be([[2,8],[2,9],[2,10],[2,11],[4,12],[4,13],[4,14],[4,15],[8,16],[8,17],[8,18],[8,19],[16,20],[16,21],[16,22],[16,23],[32,24],[32,25],[32,26],[31,27],[1,28]])),Ue.ke=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],Ue.ve=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],Ue.Se=e=>256>e?Me[e]:Me[256+(e>>>7)],Ue.ze=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],Ue.Ce=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],Ue.xe=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],Ue._e=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];const Ne=Be([[144,8],[112,9],[24,7],[8,8]]);Ke.Ae=Ee([12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,19,275,147,403,83,339,211,467,51,307,179,435,115,371,243,499,11,267,139,395,75,331,203,459,43,299,171,427,107,363,235,491,27,283,155,411,91,347,219,475,59,315,187,443,123,379,251,507,7,263,135,391,71,327,199,455,39,295,167,423,103,359,231,487,23,279,151,407,87,343,215,471,55,311,183,439,119,375,247,503,15,271,143,399,79,335,207,463,47,303,175,431,111,367,239,495,31,287,159,415,95,351,223,479,63,319,191,447,127,383,255,511,0,64,32,96,16,80,48,112,8,72,40,104,24,88,56,120,4,68,36,100,20,84,52,116,3,131,67,195,35,163,99,227].map(((e,t)=>[e,Ne[t]])));const Oe=Be([[30,5]]);function Te(e,t,n,r,s){const i=this;i.Ie=e,i.De=t,i.Ve=n,i.Pe=r,i.Re=s}Ke.Be=Ee([0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,30,1,17,9,25,5,21,13,29,3,19,11,27,7,23].map(((e,t)=>[e,Oe[t]]))),Ke.Ee=new Ke(Ke.Ae,Ue.ze,257,286,15),Ke.Me=new Ke(Ke.Be,Ue.Ce,0,30,15),Ke.Ue=new Ke(null,Ue.xe,0,19,7);const We=[new Te(0,0,0,0,0),new Te(4,4,8,4,1),new Te(4,5,16,8,1),new Te(4,6,32,32,1),new Te(4,4,16,16,2),new Te(8,16,32,32,2),new Te(8,16,128,128,2),new Te(8,32,128,256,2),new Te(32,128,258,1024,2),new Te(32,258,258,4096,2)],je=["need dictionary","stream end","","","stream error","data error","","buffer error","",""],He=113,Le=666,Fe=262;function qe(e,t,n,r){const s=e[2*t],i=e[2*n];return i>s||s==i&&r[t]<=r[n]}function Ge(){const e=this;let t,n,s,c,f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z,C,x,_,A,I,D,V,P,R,B,E,M,U;const K=new Ue,N=new Ue,O=new Ue;let T,W,j,H,L,F;function q(){let t;for(t=0;286>t;t++)E[2*t]=0;for(t=0;30>t;t++)M[2*t]=0;for(t=0;19>t;t++)U[2*t]=0;E[512]=1,e.ue=e.we=0,W=j=0}function G(e,t){let n,r=-1,s=e[1],i=0,o=7,c=4;0===s&&(o=138,c=3),e[2*(t+1)+1]=65535;for(let f=0;t>=f;f++)n=s,s=e[2*(f+1)+1],++i<o&&n==s||(c>i?U[2*n]+=i:0!==n?(n!=r&&U[2*n]++,U[32]++):i>10?U[36]++:U[34]++,i=0,r=n,0===s?(o=138,c=3):n==s?(o=6,c=3):(o=7,c=4))}function J(t){e.Ke[e.pending++]=t}function Q(e){J(255&e),J(e>>>8&255)}function X(e,t){let n;const r=t;F>16-r?(n=e,L|=n<<F&65535,Q(L),L=n>>>16-F,F+=r-16):(L|=e<<F&65535,F+=r)}function Y(e,t){const n=2*e;X(65535&t[n],65535&t[n+1])}function Z(e,t){let n,r,s=-1,i=e[1],o=0,c=7,f=4;for(0===i&&(c=138,f=3),n=0;t>=n;n++)if(r=i,i=e[2*(n+1)+1],++o>=c||r!=i){if(f>o)do{Y(r,U)}while(0!=--o);else 0!==r?(r!=s&&(Y(r,U),o--),Y(16,U),X(o-3,2)):o>10?(Y(18,U),X(o-11,7)):(Y(17,U),X(o-3,3));o=0,s=r,0===i?(c=138,f=3):r==i?(c=6,f=3):(c=7,f=4)}}function $(){16==F?(Q(L),L=0,F=0):8>F||(J(255&L),L>>>=8,F-=8)}function ee(t,n){let s,i,o;if(e.Ne[W]=t,e.Oe[W]=255&n,W++,0===t?E[2*n]++:(j++,t--,E[2*(Ue.ge[n]+256+1)]++,M[2*Ue.Se(t)]++),0==(8191&W)&&V>2){for(s=8*W,i=C-k,o=0;30>o;o++)s+=M[2*o]*(5+Ue.Ce[o]);if(s>>>=3,j<r.floor(W/2)&&s<r.floor(i/2))return!0}return W==T-1}function te(t,n){let r,s,i,o,c=0;if(0!==W)do{r=e.Ne[c],s=e.Oe[c],c++,0===r?Y(s,t):(i=Ue.ge[s],Y(i+256+1,t),o=Ue.ze[i],0!==o&&(s-=Ue.ke[i],X(s,o)),r--,i=Ue.Se(r),Y(i,n),o=Ue.Ce[i],0!==o&&(r-=Ue.ve[i],X(r,o)))}while(W>c);Y(256,t),H=t[513]}function ne(){F>8?Q(L):F>0&&J(255&L),L=0,F=0}function re(t,n,r){X(0+(r?1:0),3),((t,n)=>{ne(),H=8,Q(n),Q(~n),e.Ke.set(u.subarray(t,t+n),e.pending),e.pending+=n})(t,n)}function se(n){((t,n,r)=>{let s,i,o=0;V>0?(K.ne(e),N.ne(e),o=(()=>{let t;for(G(E,K.he),G(M,N.he),O.ne(e),t=18;t>=3&&0===U[2*Ue._e[t]+1];t--);return e.ue+=14+3*(t+1),t})(),s=e.ue+3+7>>>3,i=e.we+3+7>>>3,i>s||(s=i)):s=i=n+5,n+4>s||-1==t?i==s?(X(2+(r?1:0),3),te(Ke.Ae,Ke.Be)):(X(4+(r?1:0),3),((e,t,n)=>{let r;for(X(e-257,5),X(t-1,5),X(n-4,4),r=0;n>r;r++)X(U[2*Ue._e[r]+1],3);Z(E,e-1),Z(M,t-1)})(K.he+1,N.he+1,o+1),te(E,M)):re(t,n,r),q(),r&&ne()})(0>k?-1:k,C-k,n),k=C,t.Te()}function ie(){let e,n,r,s;do{if(s=w-_-C,0===s&&0===C&&0===_)s=f;else if(-1==s)s--;else if(C>=f+f-Fe){u.set(u.subarray(f,f+f),0),x-=f,C-=f,k-=f,e=y,r=e;do{n=65535&d[--r],d[r]=f>n?0:n-f}while(0!=--e);e=f,r=e;do{n=65535&h[--r],h[r]=f>n?0:n-f}while(0!=--e);s+=f}if(0===t.We)return;e=t.je(u,C+_,s),_+=e,3>_||(p=255&u[C],p=(p<<g^255&u[C+1])&b)}while(Fe>_&&0!==t.We)}function oe(e){let t,n,r=I,s=C,i=A;const o=C>f-Fe?C-(f-Fe):0;let c=B;const a=l,w=C+258;let d=u[s+i-1],p=u[s+i];R>A||(r>>=2),c>_&&(c=_);do{if(t=e,u[t+i]==p&&u[t+i-1]==d&&u[t]==u[s]&&u[++t]==u[s+1]){s+=2,t++;do{}while(u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&w>s);if(n=258-(w-s),s=w-258,n>i){if(x=e,i=n,n>=c)break;d=u[s+i-1],p=u[s+i]}}}while((e=65535&h[e&a])>o&&0!=--r);return i>_?_:i}e.le=[],e.be=[],e.ae=[],E=[],M=[],U=[],e.de=(t,n)=>{const r=e.ae,s=r[n];let i=n<<1;for(;i<=e.ce&&(i<e.ce&&qe(t,r[i+1],r[i],e.le)&&i++,!qe(t,s,r[i],e.le));)r[n]=r[i],n=i,i<<=1;r[n]=s},e.He=(t,S,x,W,j,G)=>(W||(W=8),j||(j=8),G||(G=0),t.Le=null,-1==S&&(S=6),1>j||j>9||8!=W||9>x||x>15||0>S||S>9||0>G||G>2?Re:(t.Fe=e,a=x,f=1<<a,l=f-1,m=j+7,y=1<<m,b=y-1,g=r.floor((m+3-1)/3),u=new i(2*f),h=[],d=[],T=1<<j+6,e.Ke=new i(4*T),s=4*T,e.Ne=new o(T),e.Oe=new i(T),V=S,P=G,(t=>(t.qe=t.Ge=0,t.Le=null,e.pending=0,e.Je=0,n=He,c=0,K.re=E,K.ie=Ke.Ee,N.re=M,N.ie=Ke.Me,O.re=U,O.ie=Ke.Ue,L=0,F=0,H=8,q(),(()=>{w=2*f,d[y-1]=0;for(let e=0;y-1>e;e++)d[e]=0;D=We[V].De,R=We[V].Ie,B=We[V].Ve,I=We[V].Pe,C=0,k=0,_=0,v=A=2,z=0,p=0})(),0))(t))),e.Qe=()=>42!=n&&n!=He&&n!=Le?Re:(e.Oe=null,e.Ne=null,e.Ke=null,d=null,h=null,u=null,e.Fe=null,n==He?-3:0),e.Xe=(e,t,n)=>{let r=0;return-1==t&&(t=6),0>t||t>9||0>n||n>2?Re:(We[V].Re!=We[t].Re&&0!==e.qe&&(r=e.Ye(1)),V!=t&&(V=t,D=We[V].De,R=We[V].Ie,B=We[V].Ve,I=We[V].Pe),P=n,r)},e.Ze=(e,t,r)=>{let s,i=r,o=0;if(!t||42!=n)return Re;if(3>i)return 0;for(i>f-Fe&&(i=f-Fe,o=r-i),u.set(t.subarray(o,o+i),0),C=i,k=i,p=255&u[0],p=(p<<g^255&u[1])&b,s=0;i-3>=s;s++)p=(p<<g^255&u[s+2])&b,h[s&l]=d[p],d[p]=s;return 0},e.Ye=(r,i)=>{let o,w,m,I,R;if(i>4||0>i)return Re;if(!r.$e||!r.et&&0!==r.We||n==Le&&4!=i)return r.Le=je[4],Re;if(0===r.tt)return r.Le=je[7],-5;var B;if(t=r,I=c,c=i,42==n&&(w=8+(a-8<<4)<<8,m=(V-1&255)>>1,m>3&&(m=3),w|=m<<6,0!==C&&(w|=32),w+=31-w%31,n=He,J((B=w)>>8&255),J(255&B)),0!==e.pending){if(t.Te(),0===t.tt)return c=-1,0}else if(0===t.We&&I>=i&&4!=i)return t.Le=je[7],-5;if(n==Le&&0!==t.We)return r.Le=je[7],-5;if(0!==t.We||0!==_||0!=i&&n!=Le){switch(R=-1,We[V].Re){case 0:R=(e=>{let n,r=65535;for(r>s-5&&(r=s-5);;){if(1>=_){if(ie(),0===_&&0==e)return 0;if(0===_)break}if(C+=_,_=0,n=k+r,(0===C||C>=n)&&(_=C-n,C=n,se(!1),0===t.tt))return 0;if(C-k>=f-Fe&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 1:R=(e=>{let n,r=0;for(;;){if(Fe>_){if(ie(),Fe>_&&0==e)return 0;if(0===_)break}if(3>_||(p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C),0===r||(C-r&65535)>f-Fe||2!=P&&(v=oe(r)),3>v)n=ee(0,255&u[C]),_--,C++;else if(n=ee(C-x,v-3),_-=v,v>D||3>_)C+=v,v=0,p=255&u[C],p=(p<<g^255&u[C+1])&b;else{v--;do{C++,p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C}while(0!=--v);C++}if(n&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 2:R=(e=>{let n,r,s=0;for(;;){if(Fe>_){if(ie(),Fe>_&&0==e)return 0;if(0===_)break}if(3>_||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C),A=v,S=x,v=2,0!==s&&D>A&&f-Fe>=(C-s&65535)&&(2!=P&&(v=oe(s)),5>=v&&(1==P||3==v&&C-x>4096)&&(v=2)),3>A||v>A)if(0!==z){if(n=ee(0,255&u[C-1]),n&&se(!1),C++,_--,0===t.tt)return 0}else z=1,C++,_--;else{r=C+_-3,n=ee(C-1-S,A-3),_-=A-1,A-=2;do{++C>r||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C)}while(0!=--A);if(z=0,v=2,C++,n&&(se(!1),0===t.tt))return 0}}return 0!==z&&(n=ee(0,255&u[C-1]),z=0),se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i)}if(2!=R&&3!=R||(n=Le),0==R||2==R)return 0===t.tt&&(c=-1),0;if(1==R){if(1==i)X(2,3),Y(256,Ke.Ae),$(),9>1+H+10-F&&(X(2,3),Y(256,Ke.Ae),$()),H=7;else if(re(0,0,!1),3==i)for(o=0;y>o;o++)d[o]=0;if(t.Te(),0===t.tt)return c=-1,0}}return 4!=i?0:1}}function Je(){const e=this;e.nt=0,e.rt=0,e.We=0,e.qe=0,e.tt=0,e.Ge=0}function Qe(e){const t=new Je,n=(o=e&&e.chunkSize?e.chunkSize:65536)+5*(r.floor(o/16383)+1);var o;const c=new i(n);let f=e?e.level:-1;void 0===f&&(f=-1),t.He(f),t.$e=c,this.append=(e,r)=>{let o,f,a=0,l=0,u=0;const w=[];if(e.length){t.nt=0,t.et=e,t.We=e.length;do{if(t.rt=0,t.tt=n,o=t.Ye(0),0!=o)throw new s("deflating: "+t.Le);t.rt&&(t.rt==n?w.push(new i(c)):w.push(c.subarray(0,t.rt))),u+=t.rt,r&&t.nt>0&&t.nt!=a&&(r(t.nt),a=t.nt)}while(t.We>0||0===t.tt);return w.length>1?(f=new i(u),w.forEach((e=>{f.set(e,l),l+=e.length}))):f=w[0]?new i(w[0]):new i,f}},this.flush=()=>{let e,r,o=0,f=0;const a=[];do{if(t.rt=0,t.tt=n,e=t.Ye(4),1!=e&&0!=e)throw new s("deflating: "+t.Le);n-t.tt>0&&a.push(c.slice(0,t.rt)),f+=t.rt}while(t.We>0||0===t.tt);return t.Qe(),r=new i(f),a.forEach((e=>{r.set(e,o),o+=e.length})),r}}Je.prototype={He(e,t){const n=this;return n.Fe=new Ge,t||(t=15),n.Fe.He(n,e,t)},Ye(e){const t=this;return t.Fe?t.Fe.Ye(t,e):Re},Qe(){const e=this;if(!e.Fe)return Re;const t=e.Fe.Qe();return e.Fe=null,t},Xe(e,t){const n=this;return n.Fe?n.Fe.Xe(n,e,t):Re},Ze(e,t){const n=this;return n.Fe?n.Fe.Ze(n,e,t):Re},je(e,t,n){const r=this;let s=r.We;return s>n&&(s=n),0===s?0:(r.We-=s,e.set(r.et.subarray(r.nt,r.nt+s),t),r.nt+=s,r.qe+=s,s)},Te(){const e=this;let t=e.Fe.pending;t>e.tt&&(t=e.tt),0!==t&&(e.$e.set(e.Fe.Ke.subarray(e.Fe.Je,e.Fe.Je+t),e.rt),e.rt+=t,e.Fe.Je+=t,e.Ge+=t,e.tt-=t,e.Fe.pending-=t,0===e.Fe.pending&&(e.Fe.Je=0))}};const Xe=-2,Ye=-3,Ze=-5,$e=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],et=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],tt=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],nt=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],rt=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],st=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],it=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];function ot(){let e,t,n,r,s,i;function o(e,t,o,c,f,a,l,u,w,h,d){let p,y,m,b,g,k,v,S,z,C,x,_,A,I,D;C=0,g=o;do{n[e[t+C]]++,C++,g--}while(0!==g);if(n[0]==o)return l[0]=-1,u[0]=0,0;for(S=u[0],k=1;15>=k&&0===n[k];k++);for(v=k,k>S&&(S=k),g=15;0!==g&&0===n[g];g--);for(m=g,S>g&&(S=g),u[0]=S,I=1<<k;g>k;k++,I<<=1)if(0>(I-=n[k]))return Ye;if(0>(I-=n[g]))return Ye;for(n[g]+=I,i[1]=k=0,C=1,A=2;0!=--g;)i[A]=k+=n[C],A++,C++;g=0,C=0;do{0!==(k=e[t+C])&&(d[i[k]++]=g),C++}while(++g<o);for(o=i[m],i[0]=g=0,C=0,b=-1,_=-S,s[0]=0,x=0,D=0;m>=v;v++)for(p=n[v];0!=p--;){for(;v>_+S;){if(b++,_+=S,D=m-_,D=D>S?S:D,(y=1<<(k=v-_))>p+1&&(y-=p+1,A=v,D>k))for(;++k<D&&(y<<=1)>n[++A];)y-=n[A];if(D=1<<k,h[0]+D>1440)return Ye;s[b]=x=h[0],h[0]+=D,0!==b?(i[b]=g,r[0]=k,r[1]=S,k=g>>>_-S,r[2]=x-s[b-1]-k,w.set(r,3*(s[b-1]+k))):l[0]=x}for(r[1]=v-_,o>C?d[C]<c?(r[0]=256>d[C]?0:96,r[2]=d[C++]):(r[0]=a[d[C]-c]+16+64,r[2]=f[d[C++]-c]):r[0]=192,y=1<<v-_,k=g>>>_;D>k;k+=y)w.set(r,3*(x+k));for(k=1<<v-1;0!=(g&k);k>>>=1)g^=k;for(g^=k,z=(1<<_)-1;(g&z)!=i[b];)b--,_-=S,z=(1<<_)-1}return 0!==I&&1!=m?Ze:0}function c(o){let c;for(e||(e=[],t=[],n=new f(16),r=[],s=new f(15),i=new f(16)),t.length<o&&(t=[]),c=0;o>c;c++)t[c]=0;for(c=0;16>c;c++)n[c]=0;for(c=0;3>c;c++)r[c]=0;s.set(n.subarray(0,15),0),i.set(n.subarray(0,16),0)}this.st=(n,r,s,i,f)=>{let a;return c(19),e[0]=0,a=o(n,0,19,19,null,null,s,r,i,e,t),a==Ye?f.Le="oversubscribed dynamic bit lengths tree":a!=Ze&&0!==r[0]||(f.Le="incomplete dynamic bit lengths tree",a=Ye),a},this.it=(n,r,s,i,f,a,l,u,w)=>{let h;return c(288),e[0]=0,h=o(s,0,n,257,nt,rt,a,i,u,e,t),0!=h||0===i[0]?(h==Ye?w.Le="oversubscribed literal/length tree":-4!=h&&(w.Le="incomplete literal/length tree",h=Ye),h):(c(288),h=o(s,n,r,0,st,it,l,f,u,e,t),0!=h||0===f[0]&&n>257?(h==Ye?w.Le="oversubscribed distance tree":h==Ze?(w.Le="incomplete distance tree",h=Ye):-4!=h&&(w.Le="empty distance tree with lengths",h=Ye),h):0)}}function ct(){const e=this;let t,n,r,s,i=0,o=0,c=0,f=0,a=0,l=0,u=0,w=0,h=0,d=0;function p(e,t,n,r,s,i,o,c){let f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z;d=c.nt,p=c.We,w=o.ot,h=o.ct,y=o.write,m=y<o.read?o.read-y-1:o.end-y,b=$e[e],g=$e[t];do{for(;20>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(f=w&b,a=n,l=r,z=3*(l+f),0!==(u=a[z]))for(;;){if(w>>=a[z+1],h-=a[z+1],0!=(16&u)){for(u&=15,k=a[z+2]+(w&$e[u]),w>>=u,h-=u;15>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;for(f=w&g,a=s,l=i,z=3*(l+f),u=a[z];;){if(w>>=a[z+1],h-=a[z+1],0!=(16&u)){for(u&=15;u>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(v=a[z+2]+(w&$e[u]),w>>=u,h-=u,m-=k,v>y){S=y-v;do{S+=o.end}while(0>S);if(u=o.end-S,k>u){if(k-=u,y-S>0&&u>y-S)do{o.lt[y++]=o.lt[S++]}while(0!=--u);else o.lt.set(o.lt.subarray(S,S+u),y),y+=u,S+=u,u=0;S=0}}else S=y-v,y-S>0&&2>y-S?(o.lt[y++]=o.lt[S++],o.lt[y++]=o.lt[S++],k-=2):(o.lt.set(o.lt.subarray(S,S+2),y),y+=2,S+=2,k-=2);if(y-S>0&&k>y-S)do{o.lt[y++]=o.lt[S++]}while(0!=--k);else o.lt.set(o.lt.subarray(S,S+k),y),y+=k,S+=k,k=0;break}if(0!=(64&u))return c.Le="invalid distance code",k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,Ye;f+=a[z+2],f+=w&$e[u],z=3*(l+f),u=a[z]}break}if(0!=(64&u))return 0!=(32&u)?(k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,1):(c.Le="invalid literal/length code",k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,Ye);if(f+=a[z+2],f+=w&$e[u],z=3*(l+f),0===(u=a[z])){w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--;break}}else w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--}while(m>=258&&p>=10);return k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,0}e.init=(e,i,o,c,f,a)=>{t=0,u=e,w=i,r=o,h=c,s=f,d=a,n=null},e.ut=(e,y,m)=>{let b,g,k,v,S,z,C,x=0,_=0,A=0;for(A=y.nt,v=y.We,x=e.ot,_=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S;;)switch(t){case 0:if(z>=258&&v>=10&&(e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,m=p(u,w,r,h,s,d,e,y),A=y.nt,v=y.We,x=e.ot,_=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S,0!=m)){t=1==m?7:9;break}c=u,n=r,o=h,t=1;case 1:for(b=c;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}if(g=3*(o+(x&$e[b])),x>>>=n[g+1],_-=n[g+1],k=n[g],0===k){f=n[g+2],t=6;break}if(0!=(16&k)){a=15&k,i=n[g+2],t=2;break}if(0==(64&k)){c=k,o=g/3+n[g+2];break}if(0!=(32&k)){t=7;break}return t=9,y.Le="invalid literal/length code",m=Ye,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 2:for(b=a;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}i+=x&$e[b],x>>=b,_-=b,c=w,n=s,o=d,t=3;case 3:for(b=c;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}if(g=3*(o+(x&$e[b])),x>>=n[g+1],_-=n[g+1],k=n[g],0!=(16&k)){a=15&k,l=n[g+2],t=4;break}if(0==(64&k)){c=k,o=g/3+n[g+2];break}return t=9,y.Le="invalid distance code",m=Ye,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 4:for(b=a;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}l+=x&$e[b],x>>=b,_-=b,t=5;case 5:for(C=S-l;0>C;)C+=e.end;for(;0!==i;){if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);e.lt[S++]=e.lt[C++],z--,C==e.end&&(C=0),i--}t=0;break;case 6:if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,e.lt[S++]=f,z--,t=0;break;case 7:if(_>7&&(_-=8,v++,A--),e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,e.read!=e.write)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);t=8;case 8:return m=1,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 9:return m=Ye,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);default:return m=Xe,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m)}},e.ht=()=>{}}ot.dt=(e,t,n,r)=>(e[0]=9,t[0]=5,n[0]=et,r[0]=tt,0);const ft=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];function at(e,t){const n=this;let r,s=0,o=0,c=0,a=0;const l=[0],u=[0],w=new ct;let h=0,d=new f(4320);const p=new ot;n.ct=0,n.ot=0,n.lt=new i(t),n.end=t,n.read=0,n.write=0,n.reset=(e,t)=>{t&&(t[0]=0),6==s&&w.ht(e),s=0,n.ct=0,n.ot=0,n.read=n.write=0},n.reset(e,null),n.wt=(e,t)=>{let r,s,i;return s=e.rt,i=n.read,r=(i>n.write?n.end:n.write)-i,r>e.tt&&(r=e.tt),0!==r&&t==Ze&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r,i==n.end&&(i=0,n.write==n.end&&(n.write=0),r=n.write-i,r>e.tt&&(r=e.tt),0!==r&&t==Ze&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r),e.rt=s,n.read=i,t},n.ut=(e,t)=>{let i,f,y,m,b,g,k,v;for(m=e.nt,b=e.We,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g;;){let S,z,C,x,_,A,I,D;switch(s){case 0:for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}switch(i=7&f,h=1&i,i>>>1){case 0:f>>>=3,y-=3,i=7&y,f>>>=i,y-=i,s=1;break;case 1:S=[],z=[],C=[[]],x=[[]],ot.dt(S,z,C,x),w.init(S[0],z[0],C[0],0,x[0],0),f>>>=3,y-=3,s=6;break;case 2:f>>>=3,y-=3,s=3;break;case 3:return f>>>=3,y-=3,s=9,e.Le="invalid block type",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}break;case 1:for(;32>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if((~f>>>16&65535)!=(65535&f))return s=9,e.Le="invalid stored block lengths",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);o=65535&f,f=y=0,s=0!==o?2:0!==h?7:0;break;case 2:if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(0===k&&(g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k&&(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k)))return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(t=0,i=o,i>b&&(i=b),i>k&&(i=k),n.lt.set(e.je(m,i),g),m+=i,b-=i,g+=i,k-=i,0!=(o-=i))break;s=0!==h?7:0;break;case 3:for(;14>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(c=i=16383&f,(31&i)>29||(i>>5&31)>29)return s=9,e.Le="too many length or distance symbols",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(i=258+(31&i)+(i>>5&31),!r||r.length<i)r=[];else for(v=0;i>v;v++)r[v]=0;f>>>=14,y-=14,a=0,s=4;case 4:for(;4+(c>>>10)>a;){for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}r[ft[a++]]=7&f,f>>>=3,y-=3}for(;19>a;)r[ft[a++]]=0;if(l[0]=7,i=p.st(r,l,u,d,e),0!=i)return(t=i)==Ye&&(r=null,s=9),n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);a=0,s=5;case 5:for(;i=c,258+(31&i)+(i>>5&31)>a;){let o,w;for(i=l[0];i>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(i=d[3*(u[0]+(f&$e[i]))+1],w=d[3*(u[0]+(f&$e[i]))+2],16>w)f>>>=i,y-=i,r[a++]=w;else{for(v=18==w?7:w-14,o=18==w?11:3;i+v>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(f>>>=i,y-=i,o+=f&$e[v],f>>>=v,y-=v,v=a,i=c,v+o>258+(31&i)+(i>>5&31)||16==w&&1>v)return r=null,s=9,e.Le="invalid bit length repeat",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w=16==w?r[v-1]:0;do{r[v++]=w}while(0!=--o);a=v}}if(u[0]=-1,_=[],A=[],I=[],D=[],_[0]=9,A[0]=6,i=c,i=p.it(257+(31&i),1+(i>>5&31),r,_,A,I,D,d,e),0!=i)return i==Ye&&(r=null,s=9),t=i,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w.init(_[0],A[0],d,I[0],d,D[0]),s=6;case 6:if(n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,1!=(t=w.ut(n,e,t)))return n.wt(e,t);if(t=0,w.ht(e),m=e.nt,b=e.We,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g,0===h){s=0;break}s=7;case 7:if(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,n.read!=n.write)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);s=8;case 8:return t=1,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);case 9:return t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);default:return t=Xe,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}}},n.ht=e=>{n.reset(e,null),n.lt=null,d=null},n.yt=(e,t,r)=>{n.lt.set(e.subarray(t,t+r),0),n.read=n.write=r},n.bt=()=>1==s?1:0}const lt=13,ut=[0,0,255,255];function wt(){const e=this;function t(e){return e&&e.gt?(e.qe=e.Ge=0,e.Le=null,e.gt.mode=7,e.gt.kt.reset(e,null),0):Xe}e.mode=0,e.method=0,e.vt=[0],e.St=0,e.marker=0,e.zt=0,e.Ct=t=>(e.kt&&e.kt.ht(t),e.kt=null,0),e.xt=(n,r)=>(n.Le=null,e.kt=null,8>r||r>15?(e.Ct(n),Xe):(e.zt=r,n.gt.kt=new at(n,1<<r),t(n),0)),e._t=(e,t)=>{let n,r;if(!e||!e.gt||!e.et)return Xe;const s=e.gt;for(t=4==t?Ze:0,n=Ze;;)switch(s.mode){case 0:if(0===e.We)return n;if(n=t,e.We--,e.qe++,8!=(15&(s.method=e.ft(e.nt++)))){s.mode=lt,e.Le="unknown compression method",s.marker=5;break}if(8+(s.method>>4)>s.zt){s.mode=lt,e.Le="invalid win size",s.marker=5;break}s.mode=1;case 1:if(0===e.We)return n;if(n=t,e.We--,e.qe++,r=255&e.ft(e.nt++),((s.method<<8)+r)%31!=0){s.mode=lt,e.Le="incorrect header check",s.marker=5;break}if(0==(32&r)){s.mode=7;break}s.mode=2;case 2:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St=(255&e.ft(e.nt++))<<24&4278190080,s.mode=3;case 3:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St+=(255&e.ft(e.nt++))<<16&16711680,s.mode=4;case 4:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St+=(255&e.ft(e.nt++))<<8&65280,s.mode=5;case 5:return 0===e.We?n:(n=t,e.We--,e.qe++,s.St+=255&e.ft(e.nt++),s.mode=6,2);case 6:return s.mode=lt,e.Le="need dictionary",s.marker=0,Xe;case 7:if(n=s.kt.ut(e,n),n==Ye){s.mode=lt,s.marker=0;break}if(0==n&&(n=t),1!=n)return n;n=t,s.kt.reset(e,s.vt),s.mode=12;case 12:return e.We=0,1;case lt:return Ye;default:return Xe}},e.At=(e,t,n)=>{let r=0,s=n;if(!e||!e.gt||6!=e.gt.mode)return Xe;const i=e.gt;return s<1<<i.zt||(s=(1<<i.zt)-1,r=n-s),i.kt.yt(t,r,s),i.mode=7,0},e.It=e=>{let n,r,s,i,o;if(!e||!e.gt)return Xe;const c=e.gt;if(c.mode!=lt&&(c.mode=lt,c.marker=0),0===(n=e.We))return Ze;for(r=e.nt,s=c.marker;0!==n&&4>s;)e.ft(r)==ut[s]?s++:s=0!==e.ft(r)?0:4-s,r++,n--;return e.qe+=r-e.nt,e.nt=r,e.We=n,c.marker=s,4!=s?Ye:(i=e.qe,o=e.Ge,t(e),e.qe=i,e.Ge=o,c.mode=7,0)},e.Dt=e=>e&&e.gt&&e.gt.kt?e.gt.kt.bt():Xe}function ht(){}function dt(e){const t=new ht,n=e&&e.chunkSize?r.floor(2*e.chunkSize):131072,o=new i(n);let c=!1;t.xt(),t.$e=o,this.append=(e,r)=>{const f=[];let a,l,u=0,w=0,h=0;if(0!==e.length){t.nt=0,t.et=e,t.We=e.length;do{if(t.rt=0,t.tt=n,0!==t.We||c||(t.nt=0,c=!0),a=t._t(0),c&&a===Ze){if(0!==t.We)throw new s("inflating: bad input")}else if(0!==a&&1!==a)throw new s("inflating: "+t.Le);if((c||1===a)&&t.We===e.length)throw new s("inflating: bad input");t.rt&&(t.rt===n?f.push(new i(o)):f.push(o.subarray(0,t.rt))),h+=t.rt,r&&t.nt>0&&t.nt!=u&&(r(t.nt),u=t.nt)}while(t.We>0||0===t.tt);return f.length>1?(l=new i(h),f.forEach((e=>{l.set(e,w),w+=e.length}))):l=f[0]?new i(f[0]):new i,l}},this.flush=()=>{t.Ct()}}ht.prototype={xt(e){const t=this;return t.gt=new wt,e||(e=15),t.gt.xt(t,e)},_t(e){const t=this;return t.gt?t.gt._t(t,e):Xe},Ct(){const e=this;if(!e.gt)return Xe;const t=e.gt.Ct(e);return e.gt=null,t},It(){const e=this;return e.gt?e.gt.It(e):Xe},At(e,t){const n=this;return n.gt?n.gt.At(n,e,t):Xe},ft(e){return this.et[e]},je(e,t){return this.et.subarray(e,e+t)}},self.initCodec=()=>{self.Deflate=Qe,self.Inflate=dt};\n'],{type:"text/javascript"}));e({workerScripts:{inflate:[t],deflate:[t]}})}(ir),ir({Deflate:function(e){const t=new tn,n=(r=e&&e.chunkSize?e.chunkSize:65536)+5*(Math.floor(r/16383)+1);var r;const i=new Uint8Array(n);let o=e?e.level:-1;void 0===o&&(o=-1),t.deflateInit(o),t.next_out=i,this.append=function(e,r){let o,s,a=0,c=0,l=0;const u=[];if(e.length){t.next_in_index=0,t.next_in=e,t.avail_in=e.length;do{if(t.next_out_index=0,t.avail_out=n,o=t.deflate(0),0!=o)throw new Error("deflating: "+t.msg);t.next_out_index&&(t.next_out_index==n?u.push(new Uint8Array(i)):u.push(i.subarray(0,t.next_out_index))),l+=t.next_out_index,r&&t.next_in_index>0&&t.next_in_index!=a&&(r(t.next_in_index),a=t.next_in_index)}while(t.avail_in>0||0===t.avail_out);return u.length>1?(s=new Uint8Array(l),u.forEach((function(e){s.set(e,c),c+=e.length}))):s=u[0]?new Uint8Array(u[0]):new Uint8Array,s}},this.flush=function(){let e,r,o=0,s=0;const a=[];do{if(t.next_out_index=0,t.avail_out=n,e=t.deflate(4),1!=e&&0!=e)throw new Error("deflating: "+t.msg);n-t.avail_out>0&&a.push(i.slice(0,t.next_out_index)),s+=t.next_out_index}while(t.avail_in>0||0===t.avail_out);return t.deflateEnd(),r=new Uint8Array(s),a.forEach((function(e){r.set(e,o),o+=e.length})),r}},Inflate:function(e){const t=new Hn,n=e&&e.chunkSize?Math.floor(2*e.chunkSize):131072,r=new Uint8Array(n);let i=!1;t.inflateInit(),t.next_out=r,this.append=function(e,o){const s=[];let a,c,l=0,u=0,d=0;if(0!==e.length){t.next_in_index=0,t.next_in=e,t.avail_in=e.length;do{if(t.next_out_index=0,t.avail_out=n,0!==t.avail_in||i||(t.next_in_index=0,i=!0),a=t.inflate(0),i&&a===cn){if(0!==t.avail_in)throw new Error("inflating: bad input")}else if(a!==nn&&a!==rn)throw new Error("inflating: "+t.msg);if((i||a===rn)&&t.avail_in===e.length)throw new Error("inflating: bad input");t.next_out_index&&(t.next_out_index===n?s.push(new Uint8Array(r)):s.push(r.subarray(0,t.next_out_index))),d+=t.next_out_index,o&&t.next_in_index>0&&t.next_in_index!=l&&(o(t.next_in_index),l=t.next_in_index)}while(t.avail_in>0||0===t.avail_out);return s.length>1?(c=new Uint8Array(d),s.forEach((function(e){c.set(e,u),u+=e.length}))):c=s[0]?new Uint8Array(s[0]):new Uint8Array,c}},this.flush=function(){t.inflateEnd()}}});var Uo=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},Do=function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,r=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}};function jo(){var e=this,t=te(!1),n=(t[0],t[1]),r=te([]),i=(r[0],r[1]),o=te(),s=o[0],a=o[1],c=function(t){t.forEach((function(t){var n=new FileReader;return n.onloadend=function(){return Uo(e,void 0,void 0,(function(){var n;return Do(this,(function(r){switch(r.label){case 0:return[4,new vo(new Li(t)).getEntries()];case 1:return n=r.sent(),[4,(i=n,Uo(e,void 0,void 0,(function(){var e,t=this;return Do(this,(function(n){switch(n.label){case 0:return i.map((function(e){return Uo(t,void 0,void 0,(function(){var t,n,r,i,o,s;return Do(this,(function(a){switch(a.label){case 0:return e.filename.endsWith(".mp3")?(r=new Bi,[4,e.getData(r)]):[3,3];case 1:return t=a.sent(),n=e.filename.replace(".mp3",""),[4,It.createFile(n,t)];case 2:return a.sent(),[3,7];case 3:return e.filename.endsWith(".json")?(r=new Oi,s=(o=JSON).parse,[4,e.getData(r)]):[3,6];case 4:return i=s.apply(o,[a.sent()]),[4,It.create(i)];case 5:return a.sent(),[3,7];case 6:console.log("Unsupported format for",e.filename),a.label=7;case 7:return[2]}}))}))})),e=zt,[4,It.getAll()];case 1:return e.value=n.sent(),[2]}}))})))];case 2:return r.sent(),[2]}var i}))}))},n.onerror=function(){console.error("There was an issue reading the file.")},n.readAsDataURL(t),n}))};return P("div",{className:"relative p-8 w-screen h-screen",children:[P("div",{onDragOver:function(e){e.preventDefault(),n(!0)},onDragLeave:function(e){e.preventDefault(),n(!1)},onDrop:function(e){e.preventDefault(),n(!1);var t=Array.from(e.dataTransfer.files);i(t),c(t)},onClick:function(e){s.click()},className:"flex w-full h-full bg-gray-800 rounded-md items-center justify-center",children:"Drag and drop some files here or click to upload files"}),P("input",{ref:function(e){return a(e)},onChange:function(e){console.log(e),c(Array.from(e.target.files))},type:"file",className:"hidden"})]})}var Io=n(379),To=n.n(Io),qo=n(795),Fo=n.n(qo),Lo=n(569),Bo=n.n(Lo),Oo=n(565),Mo=n.n(Oo),Po=n(216),No=n.n(Po),Ro=n(589),Vo=n.n(Ro),Ho=n(142),Ko={};Ko.styleTagTransform=Vo(),Ko.setAttributes=Mo(),Ko.insert=Bo().bind(null,"head"),Ko.domAPI=Fo(),Ko.insertStyleElement=No(),To()(Ho.Z,Ko),Ho.Z&&Ho.Z.locals&&Ho.Z.locals;var $o=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},Yo=function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,r=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},Go=Ze(0),Zo=Ze(!1),Xo=Ze(0),Jo=Ze(0);function Qo(){var e=this,t=Le(),n=function(e){return e.duration/60},r=function(e){var t=e.clientX,n=e.clientY;console.log("onMouseDown"),Zo.value=!0,Xo.value=t,Jo.value=n+96},i=function(){return $o(e,void 0,void 0,(function(){return Yo(this,(function(e){switch(e.label){case 0:switch(console.log("onMouseUp"),Zo.value=!1,Go.value){case 1:return[3,1];case 2:return[3,2];case 3:return[3,3];case 4:return[3,4];case 5:return[3,6];case 6:return[3,7];case 7:return[3,9];case 8:return[3,10]}return[3,11];case 1:return null!==t.currentTrackIndex?t.playing?Fe.pause():Fe.play():Fe.playTrack(0),[3,11];case 2:return null!==t.currentTrack&&Fe.seek(Fe.getCurrentTime()+8*n(t.currentTrack.song)),[3,11];case 3:return Fe.next(),[3,11];case 4:return[4,It.flagDownload(t.currentTrack.song.id,Fe)];case 5:case 8:return e.sent(),[3,11];case 6:return alert("Reset"),[3,11];case 7:return[4,It.flagDelete(t.currentTrack.song.id,Fe)];case 9:return Fe.prev(),[3,11];case 10:return null!==t.currentTrack&&Fe.seek(Fe.getCurrentTime()-8*n(t.currentTrack.song)),[3,11];case 11:return Go.value=void 0,this.wheel.setAttribute("data-chosen",void 0),[2]}}))}))},o=function(t){var n=t.clientX,r=t.clientY;if(console.log("onMouseMove"),Zo.value){var i=n-Xo.value,o=r-Jo.value+96,s=void 0;if(Math.sqrt(i*i+o*o)>=15){for(var a=Math.atan2(o,i)+.625*Math.PI;a<0;)a+=2*Math.PI;s=Math.floor(a/Math.PI*4)+1}Go.value=s,e.wheel.setAttribute("data-chosen",s)}};return P("div",{className:"relative overflow-hidden h-screen w-screen",onContextMenu:function(e){e.preventDefault(),e.stopPropagation()},onMouseDown:r,onMouseMove:o,onMouseUp:i,onTouchStart:function(e){return r(e.touches[0])},onTouchMove:function(e){return o(e.touches[0])},onTouchEnd:function(e){return i()},children:Zo&&P("div",{ref:function(t){return e.wheel=t},className:"wheel".concat(Zo.value?" on":""),style:{"--x":"".concat(Xo.value,"px"),"--y":"".concat(Jo.value,"px")},children:[P("div",{className:"arc",style:{"--color":"#3b0764","--color-border":"#3b0764"},children:t.playing?P("i",{className:"fas fa-pause"}):P("i",{className:"fas fa-play"})}),P("div",{className:"arc",style:{"--color":"#2e1065","--color-border":"#2e1065"},children:P("i",{className:"fas fa-angles-right"})}),P("div",{className:"arc",style:{"--color":"#1e1b4b","--color-border":"#1e1b4b"},children:P("i",{className:"fas fa-angle-right"})}),P("div",{className:"arc",style:{"--color":"#17a34a","--color-border":"#17a34a"},children:P("i",{className:"fas fa-save"})}),P("div",{className:"arc",style:{"--color":"#2563eb","--color-border":"#2563eb"},children:P("i",{className:"fas fa-rotate-left"})}),P("div",{className:"arc",style:{"--color":"#dc2625","--color-border":"#dc2625"},children:P("i",{className:"fas fa-trash-alt"})}),P("div",{className:"arc",style:{"--color":"#1e1b4b","--color-border":"#1e1b4b"},children:P("i",{className:"fas fa-angle-left"})}),P("div",{className:"arc",style:{"--color":"#2e1065","--color-border":"#2e1065"},children:P("i",{className:"fas fa-angles-left"})})]})})}function es(){var e=this,t=function(){return function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))}(e,void 0,void 0,(function(){var e;return function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,r=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(n){switch(n.label){case 0:return It.db?[3,1]:(setTimeout(t,1e3),[3,3]);case 1:return e=zt,[4,It.getAll()];case 2:e.value=n.sent(),n.label=3;case 3:return[2]}}))}))};return ne((function(){t()}),[zt]),0===zt.value.length?P(jo,{}):P(g,{children:[P(Ft,{}),P(Qo,{})]})}!function(n,r,i){var o,s,a,c;t.__&&t.__(n,r),s=(o="function"==typeof i)?null:i&&i.__k||r.__k,a=[],c=[],j(r,n=(!o&&i||r).__k=v(g,null,[n]),s||u,u,void 0!==r.ownerSVGElement,!o&&i?[i]:s?null:r.firstChild?e.call(r.childNodes):null,a,!o&&i?i:s?s.__e:r.firstChild,o,c),I(a,n,c)}(P((function(){return P(je,{children:[P(Ue,{path:"",component:es}),P(Ue,{children:["404: nothing found!",P("br",{}),P("br",{}),P("code",{children:"<Route />"})]})]})}),{}),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFBSyxHQUFJLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxFQUFHLElBQUssR0FBSSxJQUFLLEdBQUksSUFBSyxHQUFJLElBQUssR0FBSSxJQUFLLEdBQzlJLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxFQUFHLElBQUssR0FBSSxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLEdBQUksSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLEVBQUcsSUFBSyxHQUFJLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssR0FDOUksSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxHQUFJLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssR0FBSSxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLEdBQUksSUFDNUksSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxJQUFLLElBQzVJLEdBQUksSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxFQUFHLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLElBQy9JLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxHQUM1SSxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssSUFBSyxJQUFL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RUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUNoSixFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FDaEosRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQzlJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxJQUFLLEdBQUksRUFDOUksR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQzlJLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FDL0ksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFLLEVBQy9JLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUNqSixFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQy9JLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUM3SSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFDL0ksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQzdJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUNoSixFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFDL0ksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQy9JLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUMvSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFDOUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUM5SSxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFDL0ksSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQ2hKLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUNqSixHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFDakosSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQ2hKLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUNqSixJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFDakosSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQy9JLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFDakosRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFDakosSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ2pKLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUNqSixJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFDakosSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQ2pKLElBQUssRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUNoSixJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFDaEosSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQ2hKLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEtBQ3JHQyxHQUFXLENBQUMsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEtBQU0sR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEtBQU0sR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLE1BQU8sR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksR0FBSSxFQUNwSixLQUFNLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxLQUFNLEdBQUksRUFBRyxJQUFLLElBQUssRUFBRyxNQUFPLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxLQUFNLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxLQUFNLEdBQUksRUFBRyxHQUFJLEdBQUksRUFDNUksTUFBTyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsTUFBTyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsS0FBTSxHQUFJLEVBQUcsSUFBSyxJQUFLLEVBQUcsT0FHN0ZDLEdBQVMsQ0FDZCxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssRUFBRyxHQUdqSEMsR0FBUyxDQUNkLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVB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QyxFQUFFTCxFQUFFaEQsRUFBRSxDa0RxQ2w2UixDQUFPLEdBWlAsV0FDSSxPQUFPLEVBQUNtUCxHQUFNLFdBQ1YsRUFBQ1AsR0FBSyxDQUFDNUQsS0FBSyxHQUFHNkQsVUFBVyxLQUMxQixFQUFDRCxHQUFLLGlDQUVGLFdBQ0EsV0FDQSxtQkFBTyxtQkFHbkIsR0FFVyxJQUFLbFAsU0FBU28xQyxlQUFlLFEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL3NyYy9jb21wb25lbnRzL3doZWVsLnNjc3MiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvcHJlYWN0L2Rpc3QvcHJlYWN0Lm1vZHVsZS5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9wcmVhY3QvanN4LXJ1bnRpbWUvZGlzdC9qc3hSdW50aW1lLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9wcmVhY3QvaG9va3MvZGlzdC9ob29rcy5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvd291dGVyLXByZWFjdC9yZWFjdC1kZXBzLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL3dvdXRlci1wcmVhY3QvcGF0aHMuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvd291dGVyLXByZWFjdC91c2UtbG9jYXRpb24uanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvd291dGVyLXByZWFjdC9tYXRjaGVyLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL3dvdXRlci1wcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9zcmMvbGlicy9wdWJzdWIudHN4Iiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vc3JjL2xpYnMvcGxheWVyL3BsYXllci50c3giLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9zcmMvbGlicy9wbGF5ZXIvYXVkaW8udHN4Iiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vc3JjL2xpYnMvcGxheWVyL2hvb2tzLnRzeCIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL3NyYy9jb21wb25lbnRzL1BsYXlsaXN0L1RyYWNrL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AcHJlYWN0L3NpZ25hbHMtY29yZS9kaXN0L3NpZ25hbHMtY29yZS5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHByZWFjdC9zaWduYWxzL2Rpc3Qvc2lnbmFscy5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL3dyYXAtaWRiLXZhbHVlLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL2lkYi9idWlsZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL3NyYy9lbnRpdGllcy9zb25nLnRzeCIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL3NyYy9jb250cm9sbGVycy9zb25nQ29udHJvbGxlci50c3giLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9zcmMvY29tcG9uZW50cy9QbGF5bGlzdC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvbGliL2NvcmUvc3RyZWFtcy9jb2RlY3MvZGVmbGF0ZS5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvY29yZS9zdHJlYW1zL2NvZGVjcy9pbmZsYXRlLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvY29yZS9zdHJlYW1zL3N0cmVhbS1hZGFwdGVyLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL2NvbmZpZ3VyYXRpb24uanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvbGliL2NvcmUvdXRpbC9taW1lLXR5cGUuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvbGliL2NvcmUvc3RyZWFtcy9jb2RlY3MvY3JjMzIuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvbGliL2NvcmUvc3RyZWFtcy9jcmMzMi1zdHJlYW0uanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvbGliL2NvcmUvc3RyZWFtcy9jb2RlY3Mvc2pjbC5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvY29yZS9zdHJlYW1zL2NvbW1vbi1jcnlwdG8uanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvbGliL2NvcmUvc3RyZWFtcy9hZXMtY3J5cHRvLXN0cmVhbS5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvY29yZS91dGlsL2VuY29kZS10ZXh0LmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL3N0cmVhbXMvemlwLWNyeXB0by1zdHJlYW0uanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvbGliL2NvcmUvc3RyZWFtcy96aXAtZW50cnktc3RyZWFtLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL3N0cmVhbXMvY29kZWMtc3RyZWFtLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL2NvZGVjLXdvcmtlci5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvY29yZS9jb2RlYy1wb29sLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL2lvLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL3V0aWwvY3A0MzctZGVjb2RlLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL3V0aWwvZGVjb2RlLXRleHQuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvbGliL2NvcmUvemlwLWVudHJ5LmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL3ppcC1yZWFkZXIuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvbGliL3ppcC1mcy5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvY29yZS96aXAtd3JpdGVyLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi96LXdvcmtlci1pbmxpbmUuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9zcmMvY29tcG9uZW50cy9Tb25nTG9hZGVyLnRzeCIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL3NyYy9jb21wb25lbnRzL3doZWVsLnNjc3M/MDEwZiIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL3NyYy9jb21wb25lbnRzL1doZWVsLnRzeCIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL3NyYy92aWV3cy9EYXNoYm9hZC50c3giLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9zcmMvYXBwLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgKntib3gtc2l6aW5nOmJvcmRlci1ib3h9aHRtbHt1c2VyLXNlbGVjdDpub25lO292ZXJmbG93OmhpZGRlbn1odG1sIGJvZHl7YmFja2dyb3VuZC1jb2xvcjojMjIyO3dpZHRoOjEwMHZ3O2hlaWdodDoxMDB2aDtvdmVyZmxvdzpoaWRkZW47cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZzowO21hcmdpbjowfS53aGVlbHstLXg6IDBweDstLXk6IDBweDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6dmFyKC0teSk7bGVmdDp2YXIoLS14KTt3aWR0aDozOTZweDtoZWlnaHQ6Mzk2cHg7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAtMTAwJSk7dHJhbnNmb3JtLW9yaWdpbjowJSAwJX0ud2hlZWwub24gLmFyY3tvcGFjaXR5Oi44O3RyYW5zZm9ybTpzY2FsZSgxKSByb3RhdGUodmFyKC0tcm90YXRpb24pKSAhaW1wb3J0YW50O3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllcigwLCAwLjUsIDAuNSwgMS41KX0ud2hlZWwgLmFyY3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtyaWdodDowO3dpZHRoOjUwJTtoZWlnaHQ6NTAlO3RyYW5zZm9ybS1vcmlnaW46MCUgMTAwJTtiYWNrZ3JvdW5kLWltYWdlOnJhZGlhbC1ncmFkaWVudChjaXJjbGUgYXQgMCUgMTAwJSwgdHJhbnNwYXJlbnQsIHRyYW5zcGFyZW50IDI5LjUlLCB2YXIoLS1jb2xvci1ib3JkZXIpIDMwJSwgdmFyKC0tY29sb3ItYm9yZGVyKSAzMC41JSwgdmFyKC0tY29sb3IpIDMxJSwgdmFyKC0tY29sb3IpIDUwJSwgdmFyKC0tY29sb3ItYm9yZGVyKSA1MC4yNSUsIHZhcigtLWNvbG9yLWJvcmRlcikgNTEuNSUsIHRyYW5zcGFyZW50IDUxLjc1JSwgdHJhbnNwYXJlbnQpOy13ZWJraXQtY2xpcC1wYXRoOnBvbHlnb24oMCAwLCAwIDk5JSwgOTklIDApO2NsaXAtcGF0aDpwb2x5Z29uKDAgMCwgMCA5OSUsIDk5JSAwKTtvcGFjaXR5OjA7dHJhbnNmb3JtOnNjYWxlKDApIHJvdGF0ZSh2YXIoLS1yb3RhdGlvbikpfS53aGVlbCAuYXJjIGl7cG9zaXRpb246YWJzb2x1dGU7dG9wOjQwJTtsZWZ0OjE1JTtmb250LXNpemU6MnJlbTt0cmFuc2Zvcm06cm90YXRlKGNhbGModmFyKC0tcm90YXRpb24pICogLTEpKTtjb2xvcjpyZ2JhKDI1NSwyNTUsMjU1LC44KTt0cmFuc2l0aW9uOmNvbG9yIC4zc30ud2hlZWxbZGF0YS1jaG9zZW49XCIxXCJdIC5hcmM6bnRoLWNoaWxkKDEpe29wYWNpdHk6MTt0cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUodmFyKC0tcm90YXRpb24pKSAhaW1wb3J0YW50O2ZpbHRlcjpicmlnaHRuZXNzKDE1MCUpfS53aGVlbFtkYXRhLWNob3Nlbj1cIjFcIl0gLmFyYzpudGgtY2hpbGQoMSkgaXtjb2xvcjpyZ2JhKDAsMCwwLC41KX0ud2hlZWwgLmFyYzpudGgtY2hpbGQoMSl7LS1yb3RhdGlvbjogLTIyLjVkZWc7LS1jb2xvcjogaHNsKDE4MGRlZywgMzYlLCAzNiUpOy0tY29sb3ItYm9yZGVyOiBoc2woMTgwZGVnLCAzNiUsIDM2JSl9LndoZWVsW2RhdGEtY2hvc2VuPVwiMlwiXSAuYXJjOm50aC1jaGlsZCgyKXtvcGFjaXR5OjE7dHJhbnNmb3JtOnNjYWxlKDEuMSkgcm90YXRlKHZhcigtLXJvdGF0aW9uKSkgIWltcG9ydGFudDtmaWx0ZXI6YnJpZ2h0bmVzcygxNTAlKX0ud2hlZWxbZGF0YS1jaG9zZW49XCIyXCJdIC5hcmM6bnRoLWNoaWxkKDIpIGl7Y29sb3I6cmdiYSgwLDAsMCwuNSl9LndoZWVsIC5hcmM6bnRoLWNoaWxkKDIpey0tcm90YXRpb246IDIyLjVkZWc7LS1jb2xvcjogaHNsKDE4MGRlZywgMzYlLCAzNiUpOy0tY29sb3ItYm9yZGVyOiBoc2woMTgwZGVnLCAzNiUsIDM2JSl9LndoZWVsW2RhdGEtY2hvc2VuPVwiM1wiXSAuYXJjOm50aC1jaGlsZCgzKXtvcGFjaXR5OjE7dHJhbnNmb3JtOnNjYWxlKDEuMSkgcm90YXRlKHZhcigtLXJvdGF0aW9uKSkgIWltcG9ydGFudDtmaWx0ZXI6YnJpZ2h0bmVzcygxNTAlKX0ud2hlZWxbZGF0YS1jaG9zZW49XCIzXCJdIC5hcmM6bnRoLWNoaWxkKDMpIGl7Y29sb3I6cmdiYSgwLDAsMCwuNSl9LndoZWVsIC5hcmM6bnRoLWNoaWxkKDMpey0tcm90YXRpb246IDY3LjVkZWc7LS1jb2xvcjogaHNsKDE4MGRlZywgMzYlLCAzNiUpOy0tY29sb3ItYm9yZGVyOiBoc2woMTgwZGVnLCAzNiUsIDM2JSl9LndoZWVsW2RhdGEtY2hvc2VuPVwiNFwiXSAuYXJjOm50aC1jaGlsZCg0KXtvcGFjaXR5OjE7dHJhbnNmb3JtOnNjYWxlKDEuMSkgcm90YXRlKHZhcigtLXJvdGF0aW9uKSkgIWltcG9ydGFudDtmaWx0ZXI6YnJpZ2h0bmVzcygxNTAlKX0ud2hlZWxbZGF0YS1jaG9zZW49XCI0XCJdIC5hcmM6bnRoLWNoaWxkKDQpIGl7Y29sb3I6cmdiYSgwLDAsMCwuNSl9LndoZWVsIC5hcmM6bnRoLWNoaWxkKDQpey0tcm90YXRpb246IDExMi41ZGVnOy0tY29sb3I6IGhzbCgxODBkZWcsIDM2JSwgMzYlKTstLWNvbG9yLWJvcmRlcjogaHNsKDE4MGRlZywgMzYlLCAzNiUpfS53aGVlbFtkYXRhLWNob3Nlbj1cIjVcIl0gLmFyYzpudGgtY2hpbGQoNSl7b3BhY2l0eToxO3RyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSh2YXIoLS1yb3RhdGlvbikpICFpbXBvcnRhbnQ7ZmlsdGVyOmJyaWdodG5lc3MoMTUwJSl9LndoZWVsW2RhdGEtY2hvc2VuPVwiNVwiXSAuYXJjOm50aC1jaGlsZCg1KSBpe2NvbG9yOnJnYmEoMCwwLDAsLjUpfS53aGVlbCAuYXJjOm50aC1jaGlsZCg1KXstLXJvdGF0aW9uOiAxNTcuNWRlZzstLWNvbG9yOiBoc2woMTgwZGVnLCAzNiUsIDM2JSk7LS1jb2xvci1ib3JkZXI6IGhzbCgxODBkZWcsIDM2JSwgMzYlKX0ud2hlZWxbZGF0YS1jaG9zZW49XCI2XCJdIC5hcmM6bnRoLWNoaWxkKDYpe29wYWNpdHk6MTt0cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUodmFyKC0tcm90YXRpb24pKSAhaW1wb3J0YW50O2ZpbHRlcjpicmlnaHRuZXNzKDE1MCUpfS53aGVlbFtkYXRhLWNob3Nlbj1cIjZcIl0gLmFyYzpudGgtY2hpbGQoNikgaXtjb2xvcjpyZ2JhKDAsMCwwLC41KX0ud2hlZWwgLmFyYzpudGgtY2hpbGQoNil7LS1yb3RhdGlvbjogMjAyLjVkZWc7LS1jb2xvcjogaHNsKDE4MGRlZywgMzYlLCAzNiUpOy0tY29sb3ItYm9yZGVyOiBoc2woMTgwZGVnLCAzNiUsIDM2JSl9LndoZWVsW2RhdGEtY2hvc2VuPVwiN1wiXSAuYXJjOm50aC1jaGlsZCg3KXtvcGFjaXR5OjE7dHJhbnNmb3JtOnNjYWxlKDEuMSkgcm90YXRlKHZhcigtLXJvdGF0aW9uKSkgIWltcG9ydGFudDtmaWx0ZXI6YnJpZ2h0bmVzcygxNTAlKX0ud2hlZWxbZGF0YS1jaG9zZW49XCI3XCJdIC5hcmM6bnRoLWNoaWxkKDcpIGl7Y29sb3I6cmdiYSgwLDAsMCwuNSl9LndoZWVsIC5hcmM6bnRoLWNoaWxkKDcpey0tcm90YXRpb246IDI0Ny41ZGVnOy0tY29sb3I6IGhzbCgxODBkZWcsIDM2JSwgMzYlKTstLWNvbG9yLWJvcmRlcjogaHNsKDE4MGRlZywgMzYlLCAzNiUpfS53aGVlbFtkYXRhLWNob3Nlbj1cIjhcIl0gLmFyYzpudGgtY2hpbGQoOCl7b3BhY2l0eToxO3RyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSh2YXIoLS1yb3RhdGlvbikpICFpbXBvcnRhbnQ7ZmlsdGVyOmJyaWdodG5lc3MoMTUwJSl9LndoZWVsW2RhdGEtY2hvc2VuPVwiOFwiXSAuYXJjOm50aC1jaGlsZCg4KSBpe2NvbG9yOnJnYmEoMCwwLDAsLjUpfS53aGVlbCAuYXJjOm50aC1jaGlsZCg4KXstLXJvdGF0aW9uOiAyOTIuNWRlZzstLWNvbG9yOiBoc2woMTgwZGVnLCAzNiUsIDM2JSk7LS1jb2xvci1ib3JkZXI6IGhzbCgxODBkZWcsIDM2JSwgMzYlKX1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL3doZWVsLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsRUFDSSxxQkFBQSxDQUdKLEtBQ0ksZ0JBQUEsQ0FDQSxlQUFBLENBRUEsVUFDSSxxQkFBQSxDQUNBLFdBQUEsQ0FDQSxZQUFBLENBQ0EsZUFBQSxDQUNBLGlCQUFBLENBQ0EsU0FBQSxDQUNBLFFBQUEsQ0FJUixPQUNJLFFBQUEsQ0FDQSxRQUFBLENBQ0EsaUJBQUEsQ0FDQSxZQUFBLENBQ0EsYUFBQSxDQUNBLFdBQUEsQ0FDQSxZQUFBLENBQ0EsZ0NBQUEsQ0FDQSxzQkFBQSxDQUdJLGVBQ0ksVUFBQSxDQUNBLHFEQUFBLENBQ0EseURBQUEsQ0FJUixZQUNJLGlCQUFBLENBQ0EsS0FBQSxDQUNBLE9BQUEsQ0FDQSxTQUFBLENBQ0EsVUFBQSxDQUNBLHdCQUFBLENBQ0EsbVFBQUEsQ0FJQSw0Q0FBQSxDQUNBLG9DQUFBLENBQ0EsU0FBQSxDQUNBLDBDQUFBLENBRUEsY0FDSSxpQkFBQSxDQUNBLE9BQUEsQ0FDQSxRQUFBLENBQ0EsY0FBQSxDQUNBLDRDQUFBLENBQ0EsMEJBQUEsQ0FDQSxvQkFBQSxDQU9JLDBDQUNJLFNBQUEsQ0FDQSx1REFBQSxDQUNBLHVCQUFBLENBRUEsNENBQ0ksb0JBQUEsQ0FPWix5QkFDSSxvQkFBQSxDQUdBLDhCQUFBLENBQ0EscUNBQUEsQ0FsQkEsMENBQ0ksU0FBQSxDQUNBLHVEQUFBLENBQ0EsdUJBQUEsQ0FFQSw0Q0FDSSxvQkFBQSxDQU9aLHlCQUNJLG1CQUFBLENBR0EsOEJBQUEsQ0FDQSxxQ0FBQSxDQWxCQSwwQ0FDSSxTQUFBLENBQ0EsdURBQUEsQ0FDQSx1QkFBQSxDQUVBLDRDQUNJLG9CQUFBLENBT1oseUJBQ0ksbUJBQUEsQ0FHQSw4QkFBQSxDQUNBLHFDQUFBLENBbEJBLDBDQUNJLFNBQUEsQ0FDQSx1REFBQSxDQUNBLHVCQUFBLENBRUEsNENBQ0ksb0JBQUEsQ0FPWix5QkFDSSxvQkFBQSxDQUdBLDhCQUFBLENBQ0EscUNBQUEsQ0FsQkEsMENBQ0ksU0FBQSxDQUNBLHVEQUFBLENBQ0EsdUJBQUEsQ0FFQSw0Q0FDSSxvQkFBQSxDQU9aLHlCQUNJLG9CQUFBLENBR0EsOEJBQUEsQ0FDQSxxQ0FBQSxDQWxCQSwwQ0FDSSxTQUFBLENBQ0EsdURBQUEsQ0FDQSx1QkFBQSxDQUVBLDRDQUNJLG9CQUFBLENBT1oseUJBQ0ksb0JBQUEsQ0FHQSw4QkFBQSxDQUNBLHFDQUFBLENBbEJBLDBDQUNJLFNBQUEsQ0FDQSx1REFBQSxDQUNBLHVCQUFBLENBRUEsNENBQ0ksb0JBQUEsQ0FPWix5QkFDSSxvQkFBQSxDQUdBLDhCQUFBLENBQ0EscUNBQUEsQ0FsQkEsMENBQ0ksU0FBQSxDQUNBLHVEQUFBLENBQ0EsdUJBQUEsQ0FFQSw0Q0FDSSxvQkFBQSxDQU9aLHlCQUNJLG9CQUFBLENBR0EsOEJBQUEsQ0FDQSxxQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqIHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuaHRtbCB7XFxuICAgIHVzZXItc2VsZWN0OiBub25lO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcblxcbiAgICBib2R5IHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyMjI7XFxuICAgICAgICB3aWR0aDogMTAwdnc7XFxuICAgICAgICBoZWlnaHQ6IDEwMHZoO1xcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgIHBhZGRpbmc6IDA7XFxuICAgICAgICBtYXJnaW46IDA7XFxuICAgIH1cXG59XFxuXFxuLndoZWVsIHtcXG4gICAgLS14OiAwcHg7XFxuICAgIC0teTogMHB4O1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogdmFyKC0teSk7XFxuICAgIGxlZnQ6IHZhcigtLXgpO1xcbiAgICB3aWR0aDogMzk2cHg7XFxuICAgIGhlaWdodDogMzk2cHg7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC0xMDAlKTtcXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogMCUgMCU7XFxuXFxuICAgICYub24ge1xcbiAgICAgICAgLmFyYyB7XFxuICAgICAgICAgICAgb3BhY2l0eTogMC44O1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSkgcm90YXRlKHZhcigtLXJvdGF0aW9uKSkgIWltcG9ydGFudDtcXG4gICAgICAgICAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAsIDAuNSwgMC41LCAxLjUpO1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC5hcmMge1xcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgdG9wOiAwO1xcbiAgICAgICAgcmlnaHQ6IDA7XFxuICAgICAgICB3aWR0aDogNTAlO1xcbiAgICAgICAgaGVpZ2h0OiA1MCU7XFxuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwJSAxMDAlO1xcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogcmFkaWFsLWdyYWRpZW50KGNpcmNsZSBhdCAwJSAxMDAlLCB0cmFuc3BhcmVudCwgdHJhbnNwYXJlbnQgMjkuNSUsIHZhcigtLWNvbG9yLWJvcmRlcikgMzAlLCB2YXIoLS1jb2xvci1ib3JkZXIpIDMwLjUlLCB2YXIoLS1jb2xvcikgMzElLCB2YXIoLS1jb2xvcikgNTAlLCB2YXIoLS1jb2xvci1ib3JkZXIpIDUwLjI1JSwgdmFyKC0tY29sb3ItYm9yZGVyKSA1MS41JSwgdHJhbnNwYXJlbnQgNTEuNzUlLCB0cmFuc3BhcmVudCk7XFxuICAgICAgICAvLyB0cmFuc2l0aW9uLXByb3BlcnR5OiB0cmFuc2Zvcm0sIG9wYWNpdHk7XFxuICAgICAgICAvLyB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjNzO1xcbiAgICAgICAgLy8gdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQsIC0wLjQsIDAuNywgLTAuMyk7XFxuICAgICAgICAtd2Via2l0LWNsaXAtcGF0aDogcG9seWdvbigwIDAsIDAgOTklLCA5OSUgMCk7XFxuICAgICAgICBjbGlwLXBhdGg6IHBvbHlnb24oMCAwLCAwIDk5JSwgOTklIDApO1xcbiAgICAgICAgb3BhY2l0eTogMDtcXG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMCkgcm90YXRlKHZhcigtLXJvdGF0aW9uKSk7XFxuXFxuICAgICAgICBpIHtcXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICAgICAgdG9wOiA0MCU7XFxuICAgICAgICAgICAgbGVmdDogMTUlO1xcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMnJlbTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZShjYWxjKHZhcigtLXJvdGF0aW9uKSAqIC0xKSk7XFxuICAgICAgICAgICAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTtcXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBjb2xvciAwLjNzO1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggOCB7XFxuICAgICAgICAmW2RhdGEtY2hvc2VuPScjeyRpfSddIHtcXG4gICAgICAgICAgICAuYXJjIHtcXG4gICAgICAgICAgICAgICAgJjpudGgtY2hpbGQoI3skaX0pIHtcXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7XFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMSkgcm90YXRlKHZhcigtLXJvdGF0aW9uKSkgIWltcG9ydGFudDtcXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjogYnJpZ2h0bmVzcygxNTAlKTtcXG5cXG4gICAgICAgICAgICAgICAgICAgIGkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICAuYXJjIHtcXG4gICAgICAgICAgICAmOm50aC1jaGlsZCgjeyRpfSkge1xcbiAgICAgICAgICAgICAgICAtLXJvdGF0aW9uOiAjey0yMi41ICsgKCRpIC0gMSkgKiA0NX1kZWc7XFxuICAgICAgICAgICAgICAgIC8vIC0tY29sb3I6IGhzbChjYWxjKCN7KCRpIC0gMSkgKiA0NX1kZWcgKyAwZGVnKSwgMzYlLCAzNiUpO1xcbiAgICAgICAgICAgICAgICAvLyAtLWNvbG9yLWJvcmRlcjogaHNsKGNhbGMoI3soJGkgLSAxKSAqIDQ1fWRlZyArIDkwZGVnKSwgMzYlLCA2MCUpO1xcbiAgICAgICAgICAgICAgICAtLWNvbG9yOiBoc2woMTgwZGVnLCAzNiUsIDM2JSk7XFxuICAgICAgICAgICAgICAgIC0tY29sb3ItYm9yZGVyOiBoc2woMTgwZGVnLCAzNiUsIDM2JSk7XFxuICAgICAgICAgICAgICAgIC8vIHRyYW5zaXRpb24tZGVsYXk6ICN7KCRpICUgMikgKiAwLjAxNX1zO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfVxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwidmFyIG4sbCx1LHQsaSxvLHIsZixlLGM9e30scz1bXSxhPS9hY2l0fGV4KD86c3xnfG58cHwkKXxycGh8Z3JpZHxvd3N8bW5jfG50d3xpbmVbY2hdfHpvb3xeb3JkfGl0ZXJhL2ksaD1BcnJheS5pc0FycmF5O2Z1bmN0aW9uIHYobixsKXtmb3IodmFyIHUgaW4gbCluW3VdPWxbdV07cmV0dXJuIG59ZnVuY3Rpb24gcChuKXt2YXIgbD1uLnBhcmVudE5vZGU7bCYmbC5yZW1vdmVDaGlsZChuKX1mdW5jdGlvbiB5KGwsdSx0KXt2YXIgaSxvLHIsZj17fTtmb3IociBpbiB1KVwia2V5XCI9PXI/aT11W3JdOlwicmVmXCI9PXI/bz11W3JdOmZbcl09dVtyXTtpZihhcmd1bWVudHMubGVuZ3RoPjImJihmLmNoaWxkcmVuPWFyZ3VtZW50cy5sZW5ndGg+Mz9uLmNhbGwoYXJndW1lbnRzLDIpOnQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGwmJm51bGwhPWwuZGVmYXVsdFByb3BzKWZvcihyIGluIGwuZGVmYXVsdFByb3BzKXZvaWQgMD09PWZbcl0mJihmW3JdPWwuZGVmYXVsdFByb3BzW3JdKTtyZXR1cm4gZChsLGYsaSxvLG51bGwpfWZ1bmN0aW9uIGQobix0LGksbyxyKXt2YXIgZj17dHlwZTpuLHByb3BzOnQsa2V5OmkscmVmOm8sX19rOm51bGwsX186bnVsbCxfX2I6MCxfX2U6bnVsbCxfX2Q6dm9pZCAwLF9fYzpudWxsLGNvbnN0cnVjdG9yOnZvaWQgMCxfX3Y6bnVsbD09cj8rK3U6cixfX2k6LTEsX191OjB9O3JldHVybiBudWxsPT1yJiZudWxsIT1sLnZub2RlJiZsLnZub2RlKGYpLGZ9ZnVuY3Rpb24gXygpe3JldHVybntjdXJyZW50Om51bGx9fWZ1bmN0aW9uIGcobil7cmV0dXJuIG4uY2hpbGRyZW59ZnVuY3Rpb24gYihuLGwpe3RoaXMucHJvcHM9bix0aGlzLmNvbnRleHQ9bH1mdW5jdGlvbiBtKG4sbCl7aWYobnVsbD09bClyZXR1cm4gbi5fXz9tKG4uX18sbi5fX2krMSk6bnVsbDtmb3IodmFyIHU7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2UpcmV0dXJuIHUuX19lO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4udHlwZT9tKG4pOm51bGx9ZnVuY3Rpb24gayhuKXt2YXIgbCx1O2lmKG51bGwhPShuPW4uX18pJiZudWxsIT1uLl9fYyl7Zm9yKG4uX19lPW4uX19jLmJhc2U9bnVsbCxsPTA7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2Upe24uX19lPW4uX19jLmJhc2U9dS5fX2U7YnJlYWt9cmV0dXJuIGsobil9fWZ1bmN0aW9uIHcobil7KCFuLl9fZCYmKG4uX19kPSEwKSYmaS5wdXNoKG4pJiYheC5fX3IrK3x8byE9PWwuZGVib3VuY2VSZW5kZXJpbmcpJiYoKG89bC5kZWJvdW5jZVJlbmRlcmluZyl8fHIpKHgpfWZ1bmN0aW9uIHgoKXt2YXIgbix1LHQsbyxyLGUsYyxzLGE7Zm9yKGkuc29ydChmKTtuPWkuc2hpZnQoKTspbi5fX2QmJih1PWkubGVuZ3RoLG89dm9pZCAwLGU9KHI9KHQ9bikuX192KS5fX2Uscz1bXSxhPVtdLChjPXQuX19QKSYmKChvPXYoe30scikpLl9fdj1yLl9fdisxLGwudm5vZGUmJmwudm5vZGUobyksTChjLG8scix0Ll9fbix2b2lkIDAhPT1jLm93bmVyU1ZHRWxlbWVudCwzMiZyLl9fdT9bZV06bnVsbCxzLG51bGw9PWU/bShyKTplLCEhKDMyJnIuX191KSxhKSxvLl9fLl9fa1tvLl9faV09byxNKHMsbyxhKSxvLl9fZSE9ZSYmayhvKSksaS5sZW5ndGg+dSYmaS5zb3J0KGYpKTt4Ll9fcj0wfWZ1bmN0aW9uIEMobixsLHUsdCxpLG8scixmLGUsYSxoKXt2YXIgdixwLHksZCxfLGc9dCYmdC5fX2t8fHMsYj1sLmxlbmd0aDtmb3IodS5fX2Q9ZSxQKHUsbCxnKSxlPXUuX19kLHY9MDt2PGI7disrKW51bGwhPSh5PXUuX19rW3ZdKSYmXCJib29sZWFuXCIhPXR5cGVvZiB5JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB5JiYocD0tMT09PXkuX19pP2M6Z1t5Ll9faV18fGMseS5fX2k9dixMKG4seSxwLGksbyxyLGYsZSxhLGgpLGQ9eS5fX2UseS5yZWYmJnAucmVmIT15LnJlZiYmKHAucmVmJiZ6KHAucmVmLG51bGwseSksaC5wdXNoKHkucmVmLHkuX19jfHxkLHkpKSxudWxsPT1fJiZudWxsIT1kJiYoXz1kKSw2NTUzNiZ5Ll9fdXx8cC5fX2s9PT15Ll9faz9lPVMoeSxlLG4pOlwiZnVuY3Rpb25cIj09dHlwZW9mIHkudHlwZSYmdm9pZCAwIT09eS5fX2Q/ZT15Ll9fZDpkJiYoZT1kLm5leHRTaWJsaW5nKSx5Ll9fZD12b2lkIDAseS5fX3UmPS0xOTY2MDkpO3UuX19kPWUsdS5fX2U9X31mdW5jdGlvbiBQKG4sbCx1KXt2YXIgdCxpLG8scixmLGU9bC5sZW5ndGgsYz11Lmxlbmd0aCxzPWMsYT0wO2ZvcihuLl9faz1bXSx0PTA7dDxlO3QrKyludWxsIT0oaT1uLl9fa1t0XT1udWxsPT0oaT1sW3RdKXx8XCJib29sZWFuXCI9PXR5cGVvZiBpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBpP251bGw6XCJzdHJpbmdcIj09dHlwZW9mIGl8fFwibnVtYmVyXCI9PXR5cGVvZiBpfHxcImJpZ2ludFwiPT10eXBlb2YgaXx8aS5jb25zdHJ1Y3Rvcj09U3RyaW5nP2QobnVsbCxpLG51bGwsbnVsbCxpKTpoKGkpP2QoZyx7Y2hpbGRyZW46aX0sbnVsbCxudWxsLG51bGwpOmkuX19iPjA/ZChpLnR5cGUsaS5wcm9wcyxpLmtleSxpLnJlZj9pLnJlZjpudWxsLGkuX192KTppKT8oaS5fXz1uLGkuX19iPW4uX19iKzEsZj1IKGksdSxyPXQrYSxzKSxpLl9faT1mLG89bnVsbCwtMSE9PWYmJihzLS0sKG89dVtmXSkmJihvLl9fdXw9MTMxMDcyKSksbnVsbD09b3x8bnVsbD09PW8uX192PygtMT09ZiYmYS0tLFwiZnVuY3Rpb25cIiE9dHlwZW9mIGkudHlwZSYmKGkuX191fD02NTUzNikpOmYhPT1yJiYoZj09PXIrMT9hKys6Zj5yP3M+ZS1yP2ErPWYtcjphLS06YT1mPHImJmY9PXItMT9mLXI6MCxmIT09dCthJiYoaS5fX3V8PTY1NTM2KSkpOihvPXVbdF0pJiZudWxsPT1vLmtleSYmby5fX2UmJihvLl9fZT09bi5fX2QmJihuLl9fZD1tKG8pKSxOKG8sbywhMSksdVt0XT1udWxsLHMtLSk7aWYocylmb3IodD0wO3Q8Yzt0KyspbnVsbCE9KG89dVt0XSkmJjA9PSgxMzEwNzImby5fX3UpJiYoby5fX2U9PW4uX19kJiYobi5fX2Q9bShvKSksTihvLG8pKX1mdW5jdGlvbiBTKG4sbCx1KXt2YXIgdCxpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4udHlwZSl7Zm9yKHQ9bi5fX2ssaT0wO3QmJmk8dC5sZW5ndGg7aSsrKXRbaV0mJih0W2ldLl9fPW4sbD1TKHRbaV0sbCx1KSk7cmV0dXJuIGx9cmV0dXJuIG4uX19lIT1sJiYodS5pbnNlcnRCZWZvcmUobi5fX2UsbHx8bnVsbCksbD1uLl9fZSksbCYmbC5uZXh0U2libGluZ31mdW5jdGlvbiAkKG4sbCl7cmV0dXJuIGw9bHx8W10sbnVsbD09bnx8XCJib29sZWFuXCI9PXR5cGVvZiBufHwoaChuKT9uLnNvbWUoZnVuY3Rpb24obil7JChuLGwpfSk6bC5wdXNoKG4pKSxsfWZ1bmN0aW9uIEgobixsLHUsdCl7dmFyIGk9bi5rZXksbz1uLnR5cGUscj11LTEsZj11KzEsZT1sW3VdO2lmKG51bGw9PT1lfHxlJiZpPT1lLmtleSYmbz09PWUudHlwZSlyZXR1cm4gdTtpZih0PihudWxsIT1lJiYwPT0oMTMxMDcyJmUuX191KT8xOjApKWZvcig7cj49MHx8ZjxsLmxlbmd0aDspe2lmKHI+PTApe2lmKChlPWxbcl0pJiYwPT0oMTMxMDcyJmUuX191KSYmaT09ZS5rZXkmJm89PT1lLnR5cGUpcmV0dXJuIHI7ci0tfWlmKGY8bC5sZW5ndGgpe2lmKChlPWxbZl0pJiYwPT0oMTMxMDcyJmUuX191KSYmaT09ZS5rZXkmJm89PT1lLnR5cGUpcmV0dXJuIGY7ZisrfX1yZXR1cm4tMX1mdW5jdGlvbiBJKG4sbCx1KXtcIi1cIj09PWxbMF0/bi5zZXRQcm9wZXJ0eShsLG51bGw9PXU/XCJcIjp1KTpuW2xdPW51bGw9PXU/XCJcIjpcIm51bWJlclwiIT10eXBlb2YgdXx8YS50ZXN0KGwpP3U6dStcInB4XCJ9ZnVuY3Rpb24gVChuLGwsdSx0LGkpe3ZhciBvO246aWYoXCJzdHlsZVwiPT09bClpZihcInN0cmluZ1wiPT10eXBlb2YgdSluLnN0eWxlLmNzc1RleHQ9dTtlbHNle2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0JiYobi5zdHlsZS5jc3NUZXh0PXQ9XCJcIiksdClmb3IobCBpbiB0KXUmJmwgaW4gdXx8SShuLnN0eWxlLGwsXCJcIik7aWYodSlmb3IobCBpbiB1KXQmJnVbbF09PT10W2xdfHxJKG4uc3R5bGUsbCx1W2xdKX1lbHNlIGlmKFwib1wiPT09bFswXSYmXCJuXCI9PT1sWzFdKW89bCE9PShsPWwucmVwbGFjZSgvKFBvaW50ZXJDYXB0dXJlKSR8Q2FwdHVyZSQvLFwiJDFcIikpLGw9bC50b0xvd2VyQ2FzZSgpaW4gbj9sLnRvTG93ZXJDYXNlKCkuc2xpY2UoMik6bC5zbGljZSgyKSxuLmx8fChuLmw9e30pLG4ubFtsK29dPXUsdT90P3UudT10LnU6KHUudT1EYXRlLm5vdygpLG4uYWRkRXZlbnRMaXN0ZW5lcihsLG8/RDpBLG8pKTpuLnJlbW92ZUV2ZW50TGlzdGVuZXIobCxvP0Q6QSxvKTtlbHNle2lmKGkpbD1sLnJlcGxhY2UoL3hsaW5rKEh8OmgpLyxcImhcIikucmVwbGFjZSgvc05hbWUkLyxcInNcIik7ZWxzZSBpZihcIndpZHRoXCIhPT1sJiZcImhlaWdodFwiIT09bCYmXCJocmVmXCIhPT1sJiZcImxpc3RcIiE9PWwmJlwiZm9ybVwiIT09bCYmXCJ0YWJJbmRleFwiIT09bCYmXCJkb3dubG9hZFwiIT09bCYmXCJyb3dTcGFuXCIhPT1sJiZcImNvbFNwYW5cIiE9PWwmJlwicm9sZVwiIT09bCYmbCBpbiBuKXRyeXtuW2xdPW51bGw9PXU/XCJcIjp1O2JyZWFrIG59Y2F0Y2gobil7fVwiZnVuY3Rpb25cIj09dHlwZW9mIHV8fChudWxsPT11fHwhMT09PXUmJlwiLVwiIT09bFs0XT9uLnJlbW92ZUF0dHJpYnV0ZShsKTpuLnNldEF0dHJpYnV0ZShsLHUpKX19ZnVuY3Rpb24gQShuKXt2YXIgdT10aGlzLmxbbi50eXBlKyExXTtpZihuLnQpe2lmKG4udDw9dS51KXJldHVybn1lbHNlIG4udD1EYXRlLm5vdygpO3JldHVybiB1KGwuZXZlbnQ/bC5ldmVudChuKTpuKX1mdW5jdGlvbiBEKG4pe3JldHVybiB0aGlzLmxbbi50eXBlKyEwXShsLmV2ZW50P2wuZXZlbnQobik6bil9ZnVuY3Rpb24gTChuLHUsdCxpLG8scixmLGUsYyxzKXt2YXIgYSxwLHksZCxfLG0sayx3LHgsUCxTLCQsSCxJLFQsQT11LnR5cGU7aWYodm9pZCAwIT09dS5jb25zdHJ1Y3RvcilyZXR1cm4gbnVsbDsxMjgmdC5fX3UmJihjPSEhKDMyJnQuX191KSxyPVtlPXUuX19lPXQuX19lXSksKGE9bC5fX2IpJiZhKHUpO246aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgQSl0cnl7aWYodz11LnByb3BzLHg9KGE9QS5jb250ZXh0VHlwZSkmJmlbYS5fX2NdLFA9YT94P3gucHJvcHMudmFsdWU6YS5fXzppLHQuX19jP2s9KHA9dS5fX2M9dC5fX2MpLl9fPXAuX19FOihcInByb3RvdHlwZVwiaW4gQSYmQS5wcm90b3R5cGUucmVuZGVyP3UuX19jPXA9bmV3IEEodyxQKToodS5fX2M9cD1uZXcgYih3LFApLHAuY29uc3RydWN0b3I9QSxwLnJlbmRlcj1PKSx4JiZ4LnN1YihwKSxwLnByb3BzPXcscC5zdGF0ZXx8KHAuc3RhdGU9e30pLHAuY29udGV4dD1QLHAuX19uPWkseT1wLl9fZD0hMCxwLl9faD1bXSxwLl9zYj1bXSksbnVsbD09cC5fX3MmJihwLl9fcz1wLnN0YXRlKSxudWxsIT1BLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmKHAuX19zPT1wLnN0YXRlJiYocC5fX3M9dih7fSxwLl9fcykpLHYocC5fX3MsQS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHModyxwLl9fcykpKSxkPXAucHJvcHMsXz1wLnN0YXRlLHAuX192PXUseSludWxsPT1BLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmbnVsbCE9cC5jb21wb25lbnRXaWxsTW91bnQmJnAuY29tcG9uZW50V2lsbE1vdW50KCksbnVsbCE9cC5jb21wb25lbnREaWRNb3VudCYmcC5fX2gucHVzaChwLmNvbXBvbmVudERpZE1vdW50KTtlbHNle2lmKG51bGw9PUEuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZ3IT09ZCYmbnVsbCE9cC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZwLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHModyxQKSwhcC5fX2UmJihudWxsIT1wLnNob3VsZENvbXBvbmVudFVwZGF0ZSYmITE9PT1wLnNob3VsZENvbXBvbmVudFVwZGF0ZSh3LHAuX19zLFApfHx1Ll9fdj09PXQuX192KSl7Zm9yKHUuX192IT09dC5fX3YmJihwLnByb3BzPXcscC5zdGF0ZT1wLl9fcyxwLl9fZD0hMSksdS5fX2U9dC5fX2UsdS5fX2s9dC5fX2ssdS5fX2suZm9yRWFjaChmdW5jdGlvbihuKXtuJiYobi5fXz11KX0pLFM9MDtTPHAuX3NiLmxlbmd0aDtTKyspcC5fX2gucHVzaChwLl9zYltTXSk7cC5fc2I9W10scC5fX2gubGVuZ3RoJiZmLnB1c2gocCk7YnJlYWsgbn1udWxsIT1wLmNvbXBvbmVudFdpbGxVcGRhdGUmJnAuY29tcG9uZW50V2lsbFVwZGF0ZSh3LHAuX19zLFApLG51bGwhPXAuY29tcG9uZW50RGlkVXBkYXRlJiZwLl9faC5wdXNoKGZ1bmN0aW9uKCl7cC5jb21wb25lbnREaWRVcGRhdGUoZCxfLG0pfSl9aWYocC5jb250ZXh0PVAscC5wcm9wcz13LHAuX19QPW4scC5fX2U9ITEsJD1sLl9fcixIPTAsXCJwcm90b3R5cGVcImluIEEmJkEucHJvdG90eXBlLnJlbmRlcil7Zm9yKHAuc3RhdGU9cC5fX3MscC5fX2Q9ITEsJCYmJCh1KSxhPXAucmVuZGVyKHAucHJvcHMscC5zdGF0ZSxwLmNvbnRleHQpLEk9MDtJPHAuX3NiLmxlbmd0aDtJKyspcC5fX2gucHVzaChwLl9zYltJXSk7cC5fc2I9W119ZWxzZSBkb3twLl9fZD0hMSwkJiYkKHUpLGE9cC5yZW5kZXIocC5wcm9wcyxwLnN0YXRlLHAuY29udGV4dCkscC5zdGF0ZT1wLl9fc313aGlsZShwLl9fZCYmKytIPDI1KTtwLnN0YXRlPXAuX19zLG51bGwhPXAuZ2V0Q2hpbGRDb250ZXh0JiYoaT12KHYoe30saSkscC5nZXRDaGlsZENvbnRleHQoKSkpLHl8fG51bGw9PXAuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fChtPXAuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoZCxfKSksQyhuLGgoVD1udWxsIT1hJiZhLnR5cGU9PT1nJiZudWxsPT1hLmtleT9hLnByb3BzLmNoaWxkcmVuOmEpP1Q6W1RdLHUsdCxpLG8scixmLGUsYyxzKSxwLmJhc2U9dS5fX2UsdS5fX3UmPS0xNjEscC5fX2gubGVuZ3RoJiZmLnB1c2gocCksayYmKHAuX19FPXAuX189bnVsbCl9Y2F0Y2gobil7dS5fX3Y9bnVsbCxjfHxudWxsIT1yPyh1Ll9fZT1lLHUuX191fD1jPzE2MDozMixyW3IuaW5kZXhPZihlKV09bnVsbCk6KHUuX19lPXQuX19lLHUuX19rPXQuX19rKSxsLl9fZShuLHUsdCl9ZWxzZSBudWxsPT1yJiZ1Ll9fdj09PXQuX192Pyh1Ll9faz10Ll9fayx1Ll9fZT10Ll9fZSk6dS5fX2U9aih0Ll9fZSx1LHQsaSxvLHIsZixjLHMpOyhhPWwuZGlmZmVkKSYmYSh1KX1mdW5jdGlvbiBNKG4sdSx0KXt1Ll9fZD12b2lkIDA7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspeih0W2ldLHRbKytpXSx0WysraV0pO2wuX19jJiZsLl9fYyh1LG4pLG4uc29tZShmdW5jdGlvbih1KXt0cnl7bj11Ll9faCx1Ll9faD1bXSxuLnNvbWUoZnVuY3Rpb24obil7bi5jYWxsKHUpfSl9Y2F0Y2gobil7bC5fX2Uobix1Ll9fdil9fSl9ZnVuY3Rpb24gaihsLHUsdCxpLG8scixmLGUscyl7dmFyIGEsdix5LGQsXyxnLGIsaz10LnByb3BzLHc9dS5wcm9wcyx4PXUudHlwZTtpZihcInN2Z1wiPT09eCYmKG89ITApLG51bGwhPXIpZm9yKGE9MDthPHIubGVuZ3RoO2ErKylpZigoXz1yW2FdKSYmXCJzZXRBdHRyaWJ1dGVcImluIF89PSEheCYmKHg/Xy5sb2NhbE5hbWU9PT14OjM9PT1fLm5vZGVUeXBlKSl7bD1fLHJbYV09bnVsbDticmVha31pZihudWxsPT1sKXtpZihudWxsPT09eClyZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodyk7bD1vP2RvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIseCk6ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh4LHcuaXMmJncpLHI9bnVsbCxlPSExfWlmKG51bGw9PT14KWs9PT13fHxlJiZsLmRhdGE9PT13fHwobC5kYXRhPXcpO2Vsc2V7aWYocj1yJiZuLmNhbGwobC5jaGlsZE5vZGVzKSxrPXQucHJvcHN8fGMsIWUmJm51bGwhPXIpZm9yKGs9e30sYT0wO2E8bC5hdHRyaWJ1dGVzLmxlbmd0aDthKyspa1soXz1sLmF0dHJpYnV0ZXNbYV0pLm5hbWVdPV8udmFsdWU7Zm9yKGEgaW4gaylfPWtbYV0sXCJjaGlsZHJlblwiPT1hfHwoXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT1hP3k9XzpcImtleVwiPT09YXx8YSBpbiB3fHxUKGwsYSxudWxsLF8sbykpO2ZvcihhIGluIHcpXz13W2FdLFwiY2hpbGRyZW5cIj09YT9kPV86XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT1hP3Y9XzpcInZhbHVlXCI9PWE/Zz1fOlwiY2hlY2tlZFwiPT1hP2I9XzpcImtleVwiPT09YXx8ZSYmXCJmdW5jdGlvblwiIT10eXBlb2YgX3x8a1thXT09PV98fFQobCxhLF8sa1thXSxvKTtpZih2KWV8fHkmJih2Ll9faHRtbD09PXkuX19odG1sfHx2Ll9faHRtbD09PWwuaW5uZXJIVE1MKXx8KGwuaW5uZXJIVE1MPXYuX19odG1sKSx1Ll9faz1bXTtlbHNlIGlmKHkmJihsLmlubmVySFRNTD1cIlwiKSxDKGwsaChkKT9kOltkXSx1LHQsaSxvJiZcImZvcmVpZ25PYmplY3RcIiE9PXgscixmLHI/clswXTp0Ll9fayYmbSh0LDApLGUscyksbnVsbCE9cilmb3IoYT1yLmxlbmd0aDthLS07KW51bGwhPXJbYV0mJnAoclthXSk7ZXx8KGE9XCJ2YWx1ZVwiLHZvaWQgMCE9PWcmJihnIT09bFthXXx8XCJwcm9ncmVzc1wiPT09eCYmIWd8fFwib3B0aW9uXCI9PT14JiZnIT09a1thXSkmJlQobCxhLGcsa1thXSwhMSksYT1cImNoZWNrZWRcIix2b2lkIDAhPT1iJiZiIT09bFthXSYmVChsLGEsYixrW2FdLCExKSl9cmV0dXJuIGx9ZnVuY3Rpb24geihuLHUsdCl7dHJ5e1wiZnVuY3Rpb25cIj09dHlwZW9mIG4/bih1KTpuLmN1cnJlbnQ9dX1jYXRjaChuKXtsLl9fZShuLHQpfX1mdW5jdGlvbiBOKG4sdSx0KXt2YXIgaSxvO2lmKGwudW5tb3VudCYmbC51bm1vdW50KG4pLChpPW4ucmVmKSYmKGkuY3VycmVudCYmaS5jdXJyZW50IT09bi5fX2V8fHooaSxudWxsLHUpKSxudWxsIT0oaT1uLl9fYykpe2lmKGkuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2kuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChuKXtsLl9fZShuLHUpfWkuYmFzZT1pLl9fUD1udWxsLG4uX19jPXZvaWQgMH1pZihpPW4uX19rKWZvcihvPTA7bzxpLmxlbmd0aDtvKyspaVtvXSYmTihpW29dLHUsdHx8XCJmdW5jdGlvblwiIT10eXBlb2Ygbi50eXBlKTt0fHxudWxsPT1uLl9fZXx8cChuLl9fZSksbi5fXz1uLl9fZT1uLl9fZD12b2lkIDB9ZnVuY3Rpb24gTyhuLGwsdSl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3Iobix1KX1mdW5jdGlvbiBxKHUsdCxpKXt2YXIgbyxyLGYsZTtsLl9fJiZsLl9fKHUsdCkscj0obz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpKT9udWxsOmkmJmkuX19rfHx0Ll9fayxmPVtdLGU9W10sTCh0LHU9KCFvJiZpfHx0KS5fX2s9eShnLG51bGwsW3VdKSxyfHxjLGMsdm9pZCAwIT09dC5vd25lclNWR0VsZW1lbnQsIW8mJmk/W2ldOnI/bnVsbDp0LmZpcnN0Q2hpbGQ/bi5jYWxsKHQuY2hpbGROb2Rlcyk6bnVsbCxmLCFvJiZpP2k6cj9yLl9fZTp0LmZpcnN0Q2hpbGQsbyxlKSxNKGYsdSxlKX1mdW5jdGlvbiBCKG4sbCl7cShuLGwsQil9ZnVuY3Rpb24gRShsLHUsdCl7dmFyIGksbyxyLGYsZT12KHt9LGwucHJvcHMpO2ZvcihyIGluIGwudHlwZSYmbC50eXBlLmRlZmF1bHRQcm9wcyYmKGY9bC50eXBlLmRlZmF1bHRQcm9wcyksdSlcImtleVwiPT1yP2k9dVtyXTpcInJlZlwiPT1yP289dVtyXTplW3JdPXZvaWQgMD09PXVbcl0mJnZvaWQgMCE9PWY/ZltyXTp1W3JdO3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjImJihlLmNoaWxkcmVuPWFyZ3VtZW50cy5sZW5ndGg+Mz9uLmNhbGwoYXJndW1lbnRzLDIpOnQpLGQobC50eXBlLGUsaXx8bC5rZXksb3x8bC5yZWYsbnVsbCl9ZnVuY3Rpb24gRihuLGwpe3ZhciB1PXtfX2M6bD1cIl9fY0NcIitlKyssX186bixDb25zdW1lcjpmdW5jdGlvbihuLGwpe3JldHVybiBuLmNoaWxkcmVuKGwpfSxQcm92aWRlcjpmdW5jdGlvbihuKXt2YXIgdSx0O3JldHVybiB0aGlzLmdldENoaWxkQ29udGV4dHx8KHU9W10sKHQ9e30pW2xdPXRoaXMsdGhpcy5nZXRDaGlsZENvbnRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdH0sdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGU9ZnVuY3Rpb24obil7dGhpcy5wcm9wcy52YWx1ZSE9PW4udmFsdWUmJnUuc29tZShmdW5jdGlvbihuKXtuLl9fZT0hMCx3KG4pfSl9LHRoaXMuc3ViPWZ1bmN0aW9uKG4pe3UucHVzaChuKTt2YXIgbD1uLmNvbXBvbmVudFdpbGxVbm1vdW50O24uY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24oKXt1LnNwbGljZSh1LmluZGV4T2YobiksMSksbCYmbC5jYWxsKG4pfX0pLG4uY2hpbGRyZW59fTtyZXR1cm4gdS5Qcm92aWRlci5fXz11LkNvbnN1bWVyLmNvbnRleHRUeXBlPXV9bj1zLnNsaWNlLGw9e19fZTpmdW5jdGlvbihuLGwsdSx0KXtmb3IodmFyIGksbyxyO2w9bC5fXzspaWYoKGk9bC5fX2MpJiYhaS5fXyl0cnl7aWYoKG89aS5jb25zdHJ1Y3RvcikmJm51bGwhPW8uZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yJiYoaS5zZXRTdGF0ZShvLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihuKSkscj1pLl9fZCksbnVsbCE9aS5jb21wb25lbnREaWRDYXRjaCYmKGkuY29tcG9uZW50RGlkQ2F0Y2gobix0fHx7fSkscj1pLl9fZCkscilyZXR1cm4gaS5fX0U9aX1jYXRjaChsKXtuPWx9dGhyb3cgbn19LHU9MCx0PWZ1bmN0aW9uKG4pe3JldHVybiBudWxsIT1uJiZudWxsPT1uLmNvbnN0cnVjdG9yfSxiLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihuLGwpe3ZhciB1O3U9bnVsbCE9dGhpcy5fX3MmJnRoaXMuX19zIT09dGhpcy5zdGF0ZT90aGlzLl9fczp0aGlzLl9fcz12KHt9LHRoaXMuc3RhdGUpLFwiZnVuY3Rpb25cIj09dHlwZW9mIG4mJihuPW4odih7fSx1KSx0aGlzLnByb3BzKSksbiYmdih1LG4pLG51bGwhPW4mJnRoaXMuX192JiYobCYmdGhpcy5fc2IucHVzaChsKSx3KHRoaXMpKX0sYi5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24obil7dGhpcy5fX3YmJih0aGlzLl9fZT0hMCxuJiZ0aGlzLl9faC5wdXNoKG4pLHcodGhpcykpfSxiLnByb3RvdHlwZS5yZW5kZXI9ZyxpPVtdLHI9XCJmdW5jdGlvblwiPT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlLnByb3RvdHlwZS50aGVuLmJpbmQoUHJvbWlzZS5yZXNvbHZlKCkpOnNldFRpbWVvdXQsZj1mdW5jdGlvbihuLGwpe3JldHVybiBuLl9fdi5fX2ItbC5fX3YuX19ifSx4Ll9fcj0wLGU9MDtleHBvcnR7YiBhcyBDb21wb25lbnQsZyBhcyBGcmFnbWVudCxFIGFzIGNsb25lRWxlbWVudCxGIGFzIGNyZWF0ZUNvbnRleHQseSBhcyBjcmVhdGVFbGVtZW50LF8gYXMgY3JlYXRlUmVmLHkgYXMgaCxCIGFzIGh5ZHJhdGUsdCBhcyBpc1ZhbGlkRWxlbWVudCxsIGFzIG9wdGlvbnMscSBhcyByZW5kZXIsJCBhcyB0b0NoaWxkQXJyYXl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlYWN0Lm1vZHVsZS5qcy5tYXBcbiIsImltcG9ydHtvcHRpb25zIGFzIHIsRnJhZ21lbnQgYXMgZX1mcm9tXCJwcmVhY3RcIjtleHBvcnR7RnJhZ21lbnR9ZnJvbVwicHJlYWN0XCI7dmFyIHQ9L1tcIiY8XS87ZnVuY3Rpb24gbihyKXtpZigwPT09ci5sZW5ndGh8fCExPT09dC50ZXN0KHIpKXJldHVybiByO2Zvcih2YXIgZT0wLG49MCxvPVwiXCIsZj1cIlwiO248ci5sZW5ndGg7bisrKXtzd2l0Y2goci5jaGFyQ29kZUF0KG4pKXtjYXNlIDM0OmY9XCImcXVvdDtcIjticmVhaztjYXNlIDM4OmY9XCImYW1wO1wiO2JyZWFrO2Nhc2UgNjA6Zj1cIiZsdDtcIjticmVhaztkZWZhdWx0OmNvbnRpbnVlfW4hPT1lJiYobys9ci5zbGljZShlLG4pKSxvKz1mLGU9bisxfXJldHVybiBuIT09ZSYmKG8rPXIuc2xpY2UoZSxuKSksb312YXIgbz0vYWNpdHxleCg/OnN8Z3xufHB8JCl8cnBofGdyaWR8b3dzfG1uY3xudHd8aW5lW2NoXXx6b298Xm9yZHxpdGVyYS9pLGY9MCxpPUFycmF5LmlzQXJyYXk7ZnVuY3Rpb24gdShlLHQsbixvLGksdSl7dmFyIGEsYyxwPXt9O2ZvcihjIGluIHQpXCJyZWZcIj09Yz9hPXRbY106cFtjXT10W2NdO3ZhciBsPXt0eXBlOmUscHJvcHM6cCxrZXk6bixyZWY6YSxfX2s6bnVsbCxfXzpudWxsLF9fYjowLF9fZTpudWxsLF9fZDp2b2lkIDAsX19jOm51bGwsY29uc3RydWN0b3I6dm9pZCAwLF9fdjotLWYsX19pOi0xLF9fdTowLF9fc291cmNlOmksX19zZWxmOnV9O2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJihhPWUuZGVmYXVsdFByb3BzKSlmb3IoYyBpbiBhKXZvaWQgMD09PXBbY10mJihwW2NdPWFbY10pO3JldHVybiByLnZub2RlJiZyLnZub2RlKGwpLGx9ZnVuY3Rpb24gYShyKXt2YXIgdD11KGUse3RwbDpyLGV4cHJzOltdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpfSk7cmV0dXJuIHQua2V5PXQuX192LHR9dmFyIGM9e30scD0vW0EtWl0vZztmdW5jdGlvbiBsKGUsdCl7aWYoci5hdHRyKXt2YXIgZj1yLmF0dHIoZSx0KTtpZihcInN0cmluZ1wiPT10eXBlb2YgZilyZXR1cm4gZn1pZihcInJlZlwiPT09ZXx8XCJrZXlcIj09PWUpcmV0dXJuXCJcIjtpZihcInN0eWxlXCI9PT1lJiZcIm9iamVjdFwiPT10eXBlb2YgdCl7dmFyIGk9XCJcIjtmb3IodmFyIHUgaW4gdCl7dmFyIGE9dFt1XTtpZihudWxsIT1hJiZcIlwiIT09YSl7dmFyIGw9XCItXCI9PXVbMF0/dTpjW3VdfHwoY1t1XT11LnJlcGxhY2UocCxcIi0kJlwiKS50b0xvd2VyQ2FzZSgpKSxfPVwiO1wiO1wibnVtYmVyXCIhPXR5cGVvZiBhfHxsLnN0YXJ0c1dpdGgoXCItLVwiKXx8by50ZXN0KGwpfHwoXz1cInB4O1wiKSxpPWkrbCtcIjpcIithK199fXJldHVybiBlKyc9XCInK2krJ1wiJ31yZXR1cm4gbnVsbD09dHx8ITE9PT10fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0fHxcIm9iamVjdFwiPT10eXBlb2YgdD9cIlwiOiEwPT09dD9lOmUrJz1cIicrbih0KSsnXCInfWZ1bmN0aW9uIF8ocil7aWYobnVsbD09cnx8XCJib29sZWFuXCI9PXR5cGVvZiByfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiByKXJldHVybiBudWxsO2lmKFwib2JqZWN0XCI9PXR5cGVvZiByKXtpZih2b2lkIDA9PT1yLmNvbnN0cnVjdG9yKXJldHVybiByO2lmKGkocikpe2Zvcih2YXIgZT0wO2U8ci5sZW5ndGg7ZSsrKXJbZV09XyhyW2VdKTtyZXR1cm4gcn19cmV0dXJuIG4oXCJcIityKX1leHBvcnR7dSBhcyBqc3gsbCBhcyBqc3hBdHRyLHUgYXMganN4REVWLF8gYXMganN4RXNjYXBlLGEgYXMganN4VGVtcGxhdGUsdSBhcyBqc3hzfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpzeFJ1bnRpbWUubW9kdWxlLmpzLm1hcFxuIiwiaW1wb3J0e29wdGlvbnMgYXMgbn1mcm9tXCJwcmVhY3RcIjt2YXIgdCxyLHUsaSxvPTAsZj1bXSxjPVtdLGU9bi5fX2IsYT1uLl9fcix2PW4uZGlmZmVkLGw9bi5fX2MsbT1uLnVubW91bnQ7ZnVuY3Rpb24gZCh0LHUpe24uX19oJiZuLl9faChyLHQsb3x8dSksbz0wO3ZhciBpPXIuX19IfHwoci5fX0g9e19fOltdLF9faDpbXX0pO3JldHVybiB0Pj1pLl9fLmxlbmd0aCYmaS5fXy5wdXNoKHtfX1Y6Y30pLGkuX19bdF19ZnVuY3Rpb24gaChuKXtyZXR1cm4gbz0xLHMoQixuKX1mdW5jdGlvbiBzKG4sdSxpKXt2YXIgbz1kKHQrKywyKTtpZihvLnQ9biwhby5fX2MmJihvLl9fPVtpP2kodSk6Qih2b2lkIDAsdSksZnVuY3Rpb24obil7dmFyIHQ9by5fX04/by5fX05bMF06by5fX1swXSxyPW8udCh0LG4pO3QhPT1yJiYoby5fX049W3Isby5fX1sxXV0sby5fX2Muc2V0U3RhdGUoe30pKX1dLG8uX19jPXIsIXIudSkpe3ZhciBmPWZ1bmN0aW9uKG4sdCxyKXtpZighby5fX2MuX19IKXJldHVybiEwO3ZhciB1PW8uX19jLl9fSC5fXy5maWx0ZXIoZnVuY3Rpb24obil7cmV0dXJuIG4uX19jfSk7aWYodS5ldmVyeShmdW5jdGlvbihuKXtyZXR1cm4hbi5fX059KSlyZXR1cm4hY3x8Yy5jYWxsKHRoaXMsbix0LHIpO3ZhciBpPSExO3JldHVybiB1LmZvckVhY2goZnVuY3Rpb24obil7aWYobi5fX04pe3ZhciB0PW4uX19bMF07bi5fXz1uLl9fTixuLl9fTj12b2lkIDAsdCE9PW4uX19bMF0mJihpPSEwKX19KSwhKCFpJiZvLl9fYy5wcm9wcz09PW4pJiYoIWN8fGMuY2FsbCh0aGlzLG4sdCxyKSl9O3IudT0hMDt2YXIgYz1yLnNob3VsZENvbXBvbmVudFVwZGF0ZSxlPXIuY29tcG9uZW50V2lsbFVwZGF0ZTtyLmNvbXBvbmVudFdpbGxVcGRhdGU9ZnVuY3Rpb24obix0LHIpe2lmKHRoaXMuX19lKXt2YXIgdT1jO2M9dm9pZCAwLGYobix0LHIpLGM9dX1lJiZlLmNhbGwodGhpcyxuLHQscil9LHIuc2hvdWxkQ29tcG9uZW50VXBkYXRlPWZ9cmV0dXJuIG8uX19OfHxvLl9ffWZ1bmN0aW9uIHAodSxpKXt2YXIgbz1kKHQrKywzKTshbi5fX3MmJnooby5fX0gsaSkmJihvLl9fPXUsby5pPWksci5fX0guX19oLnB1c2gobykpfWZ1bmN0aW9uIHkodSxpKXt2YXIgbz1kKHQrKyw0KTshbi5fX3MmJnooby5fX0gsaSkmJihvLl9fPXUsby5pPWksci5fX2gucHVzaChvKSl9ZnVuY3Rpb24gXyhuKXtyZXR1cm4gbz01LEYoZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpufX0sW10pfWZ1bmN0aW9uIEEobix0LHIpe289Nix5KGZ1bmN0aW9uKCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2Ygbj8obih0KCkpLGZ1bmN0aW9uKCl7cmV0dXJuIG4obnVsbCl9KTpuPyhuLmN1cnJlbnQ9dCgpLGZ1bmN0aW9uKCl7cmV0dXJuIG4uY3VycmVudD1udWxsfSk6dm9pZCAwfSxudWxsPT1yP3I6ci5jb25jYXQobikpfWZ1bmN0aW9uIEYobixyKXt2YXIgdT1kKHQrKyw3KTtyZXR1cm4geih1Ll9fSCxyKT8odS5fX1Y9bigpLHUuaT1yLHUuX19oPW4sdS5fX1YpOnUuX199ZnVuY3Rpb24gVChuLHQpe3JldHVybiBvPTgsRihmdW5jdGlvbigpe3JldHVybiBufSx0KX1mdW5jdGlvbiBxKG4pe3ZhciB1PXIuY29udGV4dFtuLl9fY10saT1kKHQrKyw5KTtyZXR1cm4gaS5jPW4sdT8obnVsbD09aS5fXyYmKGkuX189ITAsdS5zdWIocikpLHUucHJvcHMudmFsdWUpOm4uX199ZnVuY3Rpb24geCh0LHIpe24udXNlRGVidWdWYWx1ZSYmbi51c2VEZWJ1Z1ZhbHVlKHI/cih0KTp0KX1mdW5jdGlvbiBQKG4pe3ZhciB1PWQodCsrLDEwKSxpPWgoKTtyZXR1cm4gdS5fXz1uLHIuY29tcG9uZW50RGlkQ2F0Y2h8fChyLmNvbXBvbmVudERpZENhdGNoPWZ1bmN0aW9uKG4sdCl7dS5fXyYmdS5fXyhuLHQpLGlbMV0obil9KSxbaVswXSxmdW5jdGlvbigpe2lbMV0odm9pZCAwKX1dfWZ1bmN0aW9uIFYoKXt2YXIgbj1kKHQrKywxMSk7aWYoIW4uX18pe2Zvcih2YXIgdT1yLl9fdjtudWxsIT09dSYmIXUuX19tJiZudWxsIT09dS5fXzspdT11Ll9fO3ZhciBpPXUuX19tfHwodS5fX209WzAsMF0pO24uX189XCJQXCIraVswXStcIi1cIitpWzFdKyt9cmV0dXJuIG4uX199ZnVuY3Rpb24gYigpe2Zvcih2YXIgdDt0PWYuc2hpZnQoKTspaWYodC5fX1AmJnQuX19IKXRyeXt0Ll9fSC5fX2guZm9yRWFjaChrKSx0Ll9fSC5fX2guZm9yRWFjaCh3KSx0Ll9fSC5fX2g9W119Y2F0Y2gocil7dC5fX0guX19oPVtdLG4uX19lKHIsdC5fX3YpfX1uLl9fYj1mdW5jdGlvbihuKXtyPW51bGwsZSYmZShuKX0sbi5fX3I9ZnVuY3Rpb24obil7YSYmYShuKSx0PTA7dmFyIGk9KHI9bi5fX2MpLl9fSDtpJiYodT09PXI/KGkuX19oPVtdLHIuX19oPVtdLGkuX18uZm9yRWFjaChmdW5jdGlvbihuKXtuLl9fTiYmKG4uX189bi5fX04pLG4uX19WPWMsbi5fX049bi5pPXZvaWQgMH0pKTooaS5fX2guZm9yRWFjaChrKSxpLl9faC5mb3JFYWNoKHcpLGkuX19oPVtdLHQ9MCkpLHU9cn0sbi5kaWZmZWQ9ZnVuY3Rpb24odCl7diYmdih0KTt2YXIgbz10Ll9fYztvJiZvLl9fSCYmKG8uX19ILl9faC5sZW5ndGgmJigxIT09Zi5wdXNoKG8pJiZpPT09bi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fCgoaT1uLnJlcXVlc3RBbmltYXRpb25GcmFtZSl8fGopKGIpKSxvLl9fSC5fXy5mb3JFYWNoKGZ1bmN0aW9uKG4pe24uaSYmKG4uX19IPW4uaSksbi5fX1YhPT1jJiYobi5fXz1uLl9fViksbi5pPXZvaWQgMCxuLl9fVj1jfSkpLHU9cj1udWxsfSxuLl9fYz1mdW5jdGlvbih0LHIpe3Iuc29tZShmdW5jdGlvbih0KXt0cnl7dC5fX2guZm9yRWFjaChrKSx0Ll9faD10Ll9faC5maWx0ZXIoZnVuY3Rpb24obil7cmV0dXJuIW4uX198fHcobil9KX1jYXRjaCh1KXtyLnNvbWUoZnVuY3Rpb24obil7bi5fX2gmJihuLl9faD1bXSl9KSxyPVtdLG4uX19lKHUsdC5fX3YpfX0pLGwmJmwodCxyKX0sbi51bm1vdW50PWZ1bmN0aW9uKHQpe20mJm0odCk7dmFyIHIsdT10Ll9fYzt1JiZ1Ll9fSCYmKHUuX19ILl9fLmZvckVhY2goZnVuY3Rpb24obil7dHJ5e2sobil9Y2F0Y2gobil7cj1ufX0pLHUuX19IPXZvaWQgMCxyJiZuLl9fZShyLHUuX192KSl9O3ZhciBnPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZTtmdW5jdGlvbiBqKG4pe3ZhciB0LHI9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodSksZyYmY2FuY2VsQW5pbWF0aW9uRnJhbWUodCksc2V0VGltZW91dChuKX0sdT1zZXRUaW1lb3V0KHIsMTAwKTtnJiYodD1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocikpfWZ1bmN0aW9uIGsobil7dmFyIHQ9cix1PW4uX19jO1wiZnVuY3Rpb25cIj09dHlwZW9mIHUmJihuLl9fYz12b2lkIDAsdSgpKSxyPXR9ZnVuY3Rpb24gdyhuKXt2YXIgdD1yO24uX19jPW4uX18oKSxyPXR9ZnVuY3Rpb24geihuLHQpe3JldHVybiFufHxuLmxlbmd0aCE9PXQubGVuZ3RofHx0LnNvbWUoZnVuY3Rpb24odCxyKXtyZXR1cm4gdCE9PW5bcl19KX1mdW5jdGlvbiBCKG4sdCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdD90KG4pOnR9ZXhwb3J0e1QgYXMgdXNlQ2FsbGJhY2sscSBhcyB1c2VDb250ZXh0LHggYXMgdXNlRGVidWdWYWx1ZSxwIGFzIHVzZUVmZmVjdCxQIGFzIHVzZUVycm9yQm91bmRhcnksViBhcyB1c2VJZCxBIGFzIHVzZUltcGVyYXRpdmVIYW5kbGUseSBhcyB1c2VMYXlvdXRFZmZlY3QsRiBhcyB1c2VNZW1vLHMgYXMgdXNlUmVkdWNlcixfIGFzIHVzZVJlZixoIGFzIHVzZVN0YXRlfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhvb2tzLm1vZHVsZS5qcy5tYXBcbiIsImltcG9ydCB7IHVzZVN0YXRlLCB1c2VMYXlvdXRFZmZlY3QsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuZXhwb3J0IHtcbiAgaXNWYWxpZEVsZW1lbnQsXG4gIGNyZWF0ZUNvbnRleHQsXG4gIGNsb25lRWxlbWVudCxcbiAgY3JlYXRlRWxlbWVudCxcbiAgRnJhZ21lbnQsXG59IGZyb20gXCJwcmVhY3RcIjtcbmV4cG9ydCB7XG4gIHVzZUxheW91dEVmZmVjdCBhcyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LFxuICB1c2VMYXlvdXRFZmZlY3QgYXMgdXNlSW5zZXJ0aW9uRWZmZWN0LFxuICB1c2VTdGF0ZSxcbiAgdXNlQ29udGV4dCxcbn0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuXG4vLyBDb3BpZWQgZnJvbTpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL21haW4vcGFja2FnZXMvc2hhcmVkL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzXG5jb25zdCBjYW5Vc2VET00gPSAhIShcbiAgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIlxuKTtcblxuLy8gVE9ETzogc3dpdGNoIHRvIGBleHBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9IGZyb20gXCJwcmVhY3QvY29tcGF0XCJgIG9uY2Ugd2UgdXBkYXRlIFByZWFjdCB0byA+PSAxMC4xMS4zXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIHJldHVybiAoeCA9PT0geSAmJiAoeCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkpKSB8fCAoeCAhPT0geCAmJiB5ICE9PSB5KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZShzdWJzY3JpYmUsIGdldFNuYXBzaG90LCBnZXRTU1JTbmFwc2hvdCkge1xuICBpZiAoZ2V0U1NSU25hcHNob3QgJiYgIWNhblVzZURPTSkgZ2V0U25hcHNob3QgPSBnZXRTU1JTbmFwc2hvdDtcbiAgY29uc3QgdmFsdWUgPSBnZXRTbmFwc2hvdCgpO1xuXG4gIGNvbnN0IFt7IF9pbnN0YW5jZSB9LCBmb3JjZVVwZGF0ZV0gPSB1c2VTdGF0ZSh7XG4gICAgX2luc3RhbmNlOiB7IF92YWx1ZTogdmFsdWUsIF9nZXRTbmFwc2hvdDogZ2V0U25hcHNob3QgfSxcbiAgfSk7XG5cbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBfaW5zdGFuY2UuX3ZhbHVlID0gdmFsdWU7XG4gICAgX2luc3RhbmNlLl9nZXRTbmFwc2hvdCA9IGdldFNuYXBzaG90O1xuXG4gICAgaWYgKCFpcyhfaW5zdGFuY2UuX3ZhbHVlLCBnZXRTbmFwc2hvdCgpKSkge1xuICAgICAgZm9yY2VVcGRhdGUoeyBfaW5zdGFuY2UgfSk7XG4gICAgfVxuICB9LCBbc3Vic2NyaWJlLCB2YWx1ZSwgZ2V0U25hcHNob3RdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghaXMoX2luc3RhbmNlLl92YWx1ZSwgX2luc3RhbmNlLl9nZXRTbmFwc2hvdCgpKSkge1xuICAgICAgZm9yY2VVcGRhdGUoeyBfaW5zdGFuY2UgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBpZiAoIWlzKF9pbnN0YW5jZS5fdmFsdWUsIF9pbnN0YW5jZS5fZ2V0U25hcHNob3QoKSkpIHtcbiAgICAgICAgZm9yY2VVcGRhdGUoeyBfaW5zdGFuY2UgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sIFtzdWJzY3JpYmVdKTtcblxuICByZXR1cm4gdmFsdWU7XG59XG5cbi8vIHByb3ZpZGUgZm9yd2FyZFJlZiBzdHViIGZvciBwcmVhY3RcbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkUmVmKGNvbXBvbmVudCkge1xuICByZXR1cm4gY29tcG9uZW50O1xufVxuXG4vLyBVc2VybGFuZCBwb2x5ZmlsbCB3aGlsZSB3ZSB3YWl0IGZvciB0aGUgZm9ydGhjb21pbmdcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JmY3MvYmxvYi91c2VldmVudC90ZXh0LzAwMDAtdXNlZXZlbnQubWRcbi8vIE5vdGU6IFwiQSBoaWdoLWZpZGVsdHkgcG9seWZpbGwgZm9yIHVzZUV2ZW50IGlzIG5vdCBwb3NzaWJsZSBiZWNhdXNlXG4vLyB0aGVyZSBpcyBubyBsaWZlY3ljbGUgb3IgSG9vayBpbiBSZWFjdCB0aGF0IHdlIGNhbiB1c2UgdG8gc3dpdGNoXG4vLyAuY3VycmVudCBhdCB0aGUgcmlnaHQgdGltaW5nLlwiXG4vLyBTbyB3ZSB3aWxsIGhhdmUgdG8gbWFrZSBkbyB3aXRoIHRoaXMgXCJjbG9zZSBlbm91Z2hcIiBhcHByb2FjaCBmb3Igbm93LlxuZXhwb3J0IGNvbnN0IHVzZUV2ZW50ID0gKGZuKSA9PiB7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZihbZm4sICguLi5hcmdzKSA9PiByZWZbMF0oLi4uYXJncyldKS5jdXJyZW50O1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIHJlZlswXSA9IGZuO1xuICB9KTtcbiAgcmV0dXJuIHJlZlsxXTtcbn07XG4iLCIvKlxuICogVHJhbnNmb3JtcyBgcGF0aGAgaW50byBpdHMgcmVsYXRpdmUgYGJhc2VgIHZlcnNpb25cbiAqIElmIGJhc2UgaXNuJ3QgcGFydCBvZiB0aGUgcGF0aCBwcm92aWRlZCByZXR1cm5zIGFic29sdXRlIHBhdGggZS5nLiBgfi9hcHBgXG4gKi9cbmV4cG9ydCBjb25zdCByZWxhdGl2ZVBhdGggPSAoYmFzZSA9IFwiXCIsIHBhdGggPSBsb2NhdGlvbi5wYXRobmFtZSkgPT5cbiAgIXBhdGgudG9Mb3dlckNhc2UoKS5pbmRleE9mKGJhc2UudG9Mb3dlckNhc2UoKSlcbiAgICA/IHBhdGguc2xpY2UoYmFzZS5sZW5ndGgpIHx8IFwiL1wiXG4gICAgOiBcIn5cIiArIHBhdGg7XG5cbmV4cG9ydCBjb25zdCBhYnNvbHV0ZVBhdGggPSAodG8sIGJhc2UgPSBcIlwiKSA9PlxuICB0b1swXSA9PT0gXCJ+XCIgPyB0by5zbGljZSgxKSA6IGJhc2UgKyB0bztcbiIsImltcG9ydCB7IHVzZVN5bmNFeHRlcm5hbFN0b3JlLCB1c2VFdmVudCB9IGZyb20gXCIuL3JlYWN0LWRlcHMuanNcIjtcbmltcG9ydCB7IGFic29sdXRlUGF0aCwgcmVsYXRpdmVQYXRoIH0gZnJvbSBcIi4vcGF0aHMuanNcIjtcblxuLyoqXG4gKiBIaXN0b3J5IEFQSSBkb2NzIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hpc3RvcnlcbiAqL1xuY29uc3QgZXZlbnRQb3BzdGF0ZSA9IFwicG9wc3RhdGVcIjtcbmNvbnN0IGV2ZW50UHVzaFN0YXRlID0gXCJwdXNoU3RhdGVcIjtcbmNvbnN0IGV2ZW50UmVwbGFjZVN0YXRlID0gXCJyZXBsYWNlU3RhdGVcIjtcbmNvbnN0IGV2ZW50SGFzaGNoYW5nZSA9IFwiaGFzaGNoYW5nZVwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50cyA9IFtcbiAgZXZlbnRQb3BzdGF0ZSxcbiAgZXZlbnRQdXNoU3RhdGUsXG4gIGV2ZW50UmVwbGFjZVN0YXRlLFxuICBldmVudEhhc2hjaGFuZ2UsXG5dO1xuXG5jb25zdCBzdWJzY3JpYmVUb0xvY2F0aW9uVXBkYXRlcyA9IChjYWxsYmFjaykgPT4ge1xuICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICByZXR1cm4gKCkgPT4ge1xuICAgIGZvciAoY29uc3QgZXZlbnQgb2YgZXZlbnRzKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUxvY2F0aW9uUHJvcGVydHkgPSAoZm4sIHNzckZuKSA9PlxuICB1c2VTeW5jRXh0ZXJuYWxTdG9yZShzdWJzY3JpYmVUb0xvY2F0aW9uVXBkYXRlcywgZm4sIHNzckZuKTtcblxuY29uc3QgY3VycmVudFNlYXJjaCA9ICgpID0+IGxvY2F0aW9uLnNlYXJjaDtcbmV4cG9ydCBjb25zdCB1c2VTZWFyY2ggPSAoKSA9PiB1c2VMb2NhdGlvblByb3BlcnR5KGN1cnJlbnRTZWFyY2gpO1xuXG5jb25zdCBjdXJyZW50UGF0aG5hbWUgPSAoKSA9PiBsb2NhdGlvbi5wYXRobmFtZTtcblxuZXhwb3J0IGNvbnN0IHVzZVBhdGhuYW1lID0gKHsgc3NyUGF0aCB9ID0ge30pID0+XG4gIHVzZUxvY2F0aW9uUHJvcGVydHkoXG4gICAgY3VycmVudFBhdGhuYW1lLFxuICAgIHNzclBhdGggPyAoKSA9PiBzc3JQYXRoIDogY3VycmVudFBhdGhuYW1lXG4gICk7XG5cbmV4cG9ydCBjb25zdCBuYXZpZ2F0ZSA9ICh0bywgeyByZXBsYWNlID0gZmFsc2UgfSA9IHt9KSA9PlxuICBoaXN0b3J5W3JlcGxhY2UgPyBldmVudFJlcGxhY2VTdGF0ZSA6IGV2ZW50UHVzaFN0YXRlXShudWxsLCBcIlwiLCB0byk7XG5cbi8vIHRoZSAybmQgYXJndW1lbnQgb2YgdGhlIGB1c2VMb2NhdGlvbmAgcmV0dXJuIHZhbHVlIGlzIGEgZnVuY3Rpb25cbi8vIHRoYXQgYWxsb3dzIHRvIHBlcmZvcm0gYSBuYXZpZ2F0aW9uLlxuLy9cbi8vIHRoZSBmdW5jdGlvbiByZWZlcmVuY2Ugc2hvdWxkIHN0YXkgdGhlIHNhbWUgYmV0d2VlbiByZS1yZW5kZXJzLCBzbyB0aGF0XG4vLyBpdCBjYW4gYmUgcGFzc2VkIGRvd24gYXMgYW4gZWxlbWVudCBwcm9wIHdpdGhvdXQgYW55IHBlcmZvcm1hbmNlIGNvbmNlcm5zLlxuLy8gKFRoaXMgaXMgYWNoaWV2ZWQgdmlhIGB1c2VFdmVudGAuKVxuY29uc3QgdXNlTG9jYXRpb24gPSAob3B0cyA9IHt9KSA9PiBbXG4gIHJlbGF0aXZlUGF0aChvcHRzLmJhc2UsIHVzZVBhdGhuYW1lKG9wdHMpKSxcbiAgdXNlRXZlbnQoKHRvLCBuYXZPcHRzKSA9PiBuYXZpZ2F0ZShhYnNvbHV0ZVBhdGgodG8sIG9wdHMuYmFzZSksIG5hdk9wdHMpKSxcbl07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUxvY2F0aW9uO1xuXG4vLyBXaGlsZSBIaXN0b3J5IEFQSSBkb2VzIGhhdmUgYHBvcHN0YXRlYCBldmVudCwgdGhlIG9ubHlcbi8vIHByb3BlciB3YXkgdG8gbGlzdGVuIHRvIGNoYW5nZXMgdmlhIGBwdXNoL3JlcGxhY2VTdGF0ZWBcbi8vIGlzIHRvIG1vbmtleS1wYXRjaCB0aGVzZSBtZXRob2RzLlxuLy9cbi8vIFNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDU4NTAzMVxuaWYgKHR5cGVvZiBoaXN0b3J5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvciAoY29uc3QgdHlwZSBvZiBbZXZlbnRQdXNoU3RhdGUsIGV2ZW50UmVwbGFjZVN0YXRlXSkge1xuICAgIGNvbnN0IG9yaWdpbmFsID0gaGlzdG9yeVt0eXBlXTtcbiAgICAvLyBUT0RPOiB3ZSBzaG91bGQgYmUgdXNpbmcgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgdG8gYXZvaWQgbXVsdGlwbGUgcmUtcmVuZGVycyxcbiAgICAvLyBob3dldmVyIHRoYXQgd2lsbCByZXF1aXJlIGFuIGFkZGl0aW9uYWwgcGVlciBkZXBlbmRlbmN5IG9uIHJlYWN0LWRvbS5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdHdnL3JlYWN0LTE4L2Rpc2N1c3Npb25zLzg2I2Rpc2N1c3Npb25jb21tZW50LTE1NjcxNDlcbiAgICBoaXN0b3J5W3R5cGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50KHR5cGUpO1xuICAgICAgZXZlbnQuYXJndW1lbnRzID0gYXJndW1lbnRzO1xuXG4gICAgICBkaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfVxufVxuIiwiLy8gY3JlYXRlcyBhIG1hdGNoZXIgZnVuY3Rpb25cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1ha2VNYXRjaGVyKG1ha2VSZWdleHBGbiA9IHBhdGhUb1JlZ2V4cCkge1xuICBsZXQgY2FjaGUgPSB7fTtcblxuICAvLyBvYnRhaW5zIGEgY2FjaGVkIHJlZ2V4cCB2ZXJzaW9uIG9mIHRoZSBwYXR0ZXJuXG4gIGNvbnN0IGdldFJlZ2V4cCA9IChwYXR0ZXJuKSA9PlxuICAgIGNhY2hlW3BhdHRlcm5dIHx8IChjYWNoZVtwYXR0ZXJuXSA9IG1ha2VSZWdleHBGbihwYXR0ZXJuKSk7XG5cbiAgcmV0dXJuIChwYXR0ZXJuLCBwYXRoKSA9PiB7XG4gICAgY29uc3QgeyByZWdleHAsIGtleXMgfSA9IGdldFJlZ2V4cChwYXR0ZXJuIHx8IFwiXCIpO1xuICAgIGNvbnN0IG91dCA9IHJlZ2V4cC5leGVjKHBhdGgpO1xuXG4gICAgaWYgKCFvdXQpIHJldHVybiBbZmFsc2UsIG51bGxdO1xuXG4gICAgLy8gZm9ybWF0cyBhbiBvYmplY3Qgd2l0aCBtYXRjaGVkIHBhcmFtc1xuICAgIGNvbnN0IHBhcmFtcyA9IGtleXMucmVkdWNlKChwYXJhbXMsIGtleSwgaSkgPT4ge1xuICAgICAgcGFyYW1zW2tleS5uYW1lXSA9IG91dFtpICsgMV07XG4gICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH0sIHt9KTtcblxuICAgIHJldHVybiBbdHJ1ZSwgcGFyYW1zXTtcbiAgfTtcbn1cblxuLy8gZXNjYXBlcyBhIHJlZ2V4cCBzdHJpbmcgKGJvcnJvd2VkIGZyb20gcGF0aC10by1yZWdleHAgc291cmNlcylcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9ibG9iL3YzLjAuMC9pbmRleC5qcyNMMjAyXG5jb25zdCBlc2NhcGVSeCA9IChzdHIpID0+IHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG5cbi8vIHJldHVybnMgYSBzZWdtZW50IHJlcHJlc2VudGF0aW9uIGluIFJlZ0V4cCBiYXNlZCBvbiBmbGFnc1xuLy8gYWRhcHRlZCBhbmQgc2ltcGxpZmllZCB2ZXJzaW9uIGZyb20gcGF0aC10by1yZWdleHAgc291cmNlc1xuY29uc3QgcnhGb3JTZWdtZW50ID0gKHJlcGVhdCwgb3B0aW9uYWwsIHByZWZpeCkgPT4ge1xuICBsZXQgY2FwdHVyZSA9IHJlcGVhdCA/IFwiKCg/OlteXFxcXC9dKz8pKD86XFxcXC8oPzpbXlxcXFwvXSs/KSkqKVwiIDogXCIoW15cXFxcL10rPylcIjtcbiAgaWYgKG9wdGlvbmFsICYmIHByZWZpeCkgY2FwdHVyZSA9IFwiKD86XFxcXC9cIiArIGNhcHR1cmUgKyBcIilcIjtcbiAgcmV0dXJuIGNhcHR1cmUgKyAob3B0aW9uYWwgPyBcIj9cIiA6IFwiXCIpO1xufTtcblxuY29uc3QgcGF0aFRvUmVnZXhwID0gKHBhdHRlcm4pID0+IHtcbiAgY29uc3QgZ3JvdXBSeCA9IC86KFtBLVphLXowLTlfXSspKFs/KypdPykvZztcblxuICBsZXQgbWF0Y2ggPSBudWxsLFxuICAgIGxhc3RJbmRleCA9IDAsXG4gICAga2V5cyA9IFtdLFxuICAgIHJlc3VsdCA9IFwiXCI7XG5cbiAgd2hpbGUgKChtYXRjaCA9IGdyb3VwUnguZXhlYyhwYXR0ZXJuKSkgIT09IG51bGwpIHtcbiAgICBjb25zdCBbXywgc2VnbWVudCwgbW9kXSA9IG1hdGNoO1xuXG4gICAgLy8gOmZvbyAgWzFdICAgICAgKCAgKVxuICAgIC8vIDpmb28/IFswIC0gMV0gICggbylcbiAgICAvLyA6Zm9vKyBbMSAtIOKInl0gIChyIClcbiAgICAvLyA6Zm9vKiBbMCAtIOKInl0gIChybylcbiAgICBjb25zdCByZXBlYXQgPSBtb2QgPT09IFwiK1wiIHx8IG1vZCA9PT0gXCIqXCI7XG4gICAgY29uc3Qgb3B0aW9uYWwgPSBtb2QgPT09IFwiP1wiIHx8IG1vZCA9PT0gXCIqXCI7XG4gICAgY29uc3QgcHJlZml4ID0gb3B0aW9uYWwgJiYgcGF0dGVyblttYXRjaC5pbmRleCAtIDFdID09PSBcIi9cIiA/IDEgOiAwO1xuXG4gICAgY29uc3QgcHJldiA9IHBhdHRlcm4uc3Vic3RyaW5nKGxhc3RJbmRleCwgbWF0Y2guaW5kZXggLSBwcmVmaXgpO1xuXG4gICAga2V5cy5wdXNoKHsgbmFtZTogc2VnbWVudCB9KTtcbiAgICBsYXN0SW5kZXggPSBncm91cFJ4Lmxhc3RJbmRleDtcblxuICAgIHJlc3VsdCArPSBlc2NhcGVSeChwcmV2KSArIHJ4Rm9yU2VnbWVudChyZXBlYXQsIG9wdGlvbmFsLCBwcmVmaXgpO1xuICB9XG5cbiAgcmVzdWx0ICs9IGVzY2FwZVJ4KHBhdHRlcm4uc3Vic3RyaW5nKGxhc3RJbmRleCkpO1xuICByZXR1cm4geyBrZXlzLCByZWdleHA6IG5ldyBSZWdFeHAoXCJeXCIgKyByZXN1bHQgKyBcIig/OlxcXFwvKT8kXCIsIFwiaVwiKSB9O1xufTtcbiIsImltcG9ydCBsb2NhdGlvbkhvb2sgZnJvbSBcIi4vdXNlLWxvY2F0aW9uLmpzXCI7XG5pbXBvcnQgbWF0Y2hlcldpdGhDYWNoZSBmcm9tIFwiLi9tYXRjaGVyLmpzXCI7XG5cbmltcG9ydCB7XG4gIHVzZUNvbnRleHQsXG4gIGNyZWF0ZUNvbnRleHQsXG4gIGlzVmFsaWRFbGVtZW50LFxuICBjbG9uZUVsZW1lbnQsXG4gIGNyZWF0ZUVsZW1lbnQgYXMgaCxcbiAgRnJhZ21lbnQsXG4gIHVzZVN0YXRlLFxuICBmb3J3YXJkUmVmLFxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LFxuICB1c2VFdmVudCxcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0LFxufSBmcm9tIFwiLi9yZWFjdC1kZXBzLmpzXCI7XG5cbi8qXG4gKiBSb3V0ZXIgYW5kIHJvdXRlciBjb250ZXh0LiBSb3V0ZXIgaXMgYSBsaWdodHdlaWdodCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBjdXJyZW50XG4gKiByb3V0aW5nIG9wdGlvbnM6IGhvdyBsb2NhdGlvbiBpcyBtYW5hZ2VkLCBiYXNlIHBhdGggZXRjLlxuICpcbiAqIFRoZXJlIGlzIGEgZGVmYXVsdCByb3V0ZXIgcHJlc2VudCBmb3IgbW9zdCBvZiB0aGUgdXNlIGNhc2VzLCBob3dldmVyIGl0IGNhbiBiZSBvdmVycmlkZGVuXG4gKiB2aWEgdGhlIDxSb3V0ZXIgLz4gY29tcG9uZW50LlxuICovXG5cbmNvbnN0IGRlZmF1bHRSb3V0ZXIgPSB7XG4gIGhvb2s6IGxvY2F0aW9uSG9vayxcbiAgbWF0Y2hlcjogbWF0Y2hlcldpdGhDYWNoZSgpLFxuICBiYXNlOiBcIlwiLFxuICAvLyB0aGlzIG9wdGlvbiBpcyB1c2VkIHRvIG92ZXJyaWRlIHRoZSBjdXJyZW50IGxvY2F0aW9uIGR1cmluZyBTU1JcbiAgLy8gc3NyUGF0aDogdW5kZWZpbmVkLFxufTtcblxuY29uc3QgUm91dGVyQ3R4ID0gY3JlYXRlQ29udGV4dChkZWZhdWx0Um91dGVyKTtcblxuLy8gZ2V0cyB0aGUgY2xvc2VzdCBwYXJlbnQgcm91dGVyIGZyb20gdGhlIGNvbnRleHRcbmV4cG9ydCBjb25zdCB1c2VSb3V0ZXIgPSAoKSA9PiB1c2VDb250ZXh0KFJvdXRlckN0eCk7XG5cbi8qXG4gKiBQYXJ0IDEsIEhvb2tzIEFQSTogdXNlUm91dGUsIHVzZUxvY2F0aW9uIGFuZCB1c2VQYXJhbXNcbiAqL1xuXG4vLyBJbnRlcm5hbCB2ZXJzaW9uIG9mIHVzZUxvY2F0aW9uIHRvIGF2b2lkIHJlZHVuZGFudCB1c2VSb3V0ZXIgY2FsbHNcbmNvbnN0IHVzZUxvY2F0aW9uRnJvbVJvdXRlciA9IChyb3V0ZXIpID0+IHJvdXRlci5ob29rKHJvdXRlcik7XG5cbmV4cG9ydCBjb25zdCB1c2VMb2NhdGlvbiA9ICgpID0+IHVzZUxvY2F0aW9uRnJvbVJvdXRlcih1c2VSb3V0ZXIoKSk7XG5cbmV4cG9ydCBjb25zdCB1c2VSb3V0ZSA9IChwYXR0ZXJuKSA9PiB7XG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuICBjb25zdCBbcGF0aF0gPSB1c2VMb2NhdGlvbkZyb21Sb3V0ZXIocm91dGVyKTtcbiAgcmV0dXJuIHJvdXRlci5tYXRjaGVyKHBhdHRlcm4sIHBhdGgpO1xufTtcblxuY29uc3QgUGFyYW1zQ3R4ID0gY3JlYXRlQ29udGV4dCh7IHBhcmFtczoge30gfSk7XG5leHBvcnQgY29uc3QgdXNlUGFyYW1zID0gKCkgPT4gdXNlQ29udGV4dChQYXJhbXNDdHgpLnBhcmFtcztcblxuLypcbiAqIFBhcnQgMiwgTG93IENhcmIgUm91dGVyIEFQSTogUm91dGVyLCBSb3V0ZSwgTGluaywgU3dpdGNoXG4gKi9cblxuZXhwb3J0IGNvbnN0IFJvdXRlciA9ICh7XG4gIGhvb2ssXG4gIG1hdGNoZXIsXG4gIHNzclBhdGgsXG4gIGJhc2UgPSBcIlwiLFxuICBwYXJlbnQsXG4gIGNoaWxkcmVuLFxufSkgPT4ge1xuICAvLyB1cGRhdGVzIHRoZSBjdXJyZW50IHJvdXRlciB3aXRoIHRoZSBwcm9wcyBwYXNzZWQgZG93biB0byB0aGUgY29tcG9uZW50XG4gIGNvbnN0IHVwZGF0ZVJvdXRlciA9IChyb3V0ZXIsIHByb3RvID0gcGFyZW50IHx8IGRlZmF1bHRSb3V0ZXIpID0+IHtcbiAgICByb3V0ZXIuaG9vayA9IGhvb2sgfHwgcHJvdG8uaG9vaztcbiAgICByb3V0ZXIubWF0Y2hlciA9IG1hdGNoZXIgfHwgcHJvdG8ubWF0Y2hlcjtcbiAgICByb3V0ZXIuc3NyUGF0aCA9IHNzclBhdGggfHwgcHJvdG8uc3NyUGF0aDtcbiAgICByb3V0ZXIub3duQmFzZSA9IGJhc2U7XG5cbiAgICAvLyBzdG9yZSByZWZlcmVuY2UgdG8gcGFyZW50IHJvdXRlclxuICAgIHJvdXRlci5wYXJlbnQgPSBwYXJlbnQ7XG5cbiAgICByZXR1cm4gcm91dGVyO1xuICB9O1xuXG4gIC8vIHdlIHVzZSBgdXNlU3RhdGVgIGhlcmUsIGJ1dCBpdCBvbmx5IGNhdGNoZXMgdGhlIGZpcnN0IHJlbmRlciBhbmQgbmV2ZXIgY2hhbmdlcy5cbiAgLy8gaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLWZhcS5odG1sI2hvdy10by1jcmVhdGUtZXhwZW5zaXZlLW9iamVjdHMtbGF6aWx5XG4gIGNvbnN0IFt2YWx1ZV0gPSB1c2VTdGF0ZSgoKSA9PlxuICAgIHVwZGF0ZVJvdXRlcih7XG4gICAgICAvLyBXZSBtdXN0IHN0b3JlIGJhc2UgYXMgYSBwcm9wZXJ0eSBhY2Nlc3NvciBiZWNhdXNlIGVmZmVjdHNcbiAgICAgIC8vIHNvbWV3aGF0IGNvdW50ZXItaW50dWl0aXZlbHkgcnVuIGluIGNoaWxkIGNvbXBvbmVudHMgKmZpcnN0KiFcbiAgICAgIC8vIFRoaXMgbWVhbnMgdGhhdCBieSB0aGUgdGltZSBhIHBhcmVudCdzIGJhc2UgaXMgdXBkYXRlZCBpbiB0aGVcbiAgICAgIC8vIHBhcmVudCBlZmZlY3QsIHRoZSBjaGlsZCBlZmZlY3QgaGFzIGFscmVhZHkgcnVuLCBhbmQgc2F3XG4gICAgICAvLyB0aGUgcGFyZW50J3MgKnByZXZpb3VzKiBiYXNlIGR1cmluZyBpdHMgb3duIGV4ZWN1dGlvbi5cbiAgICAgIGdldCBiYXNlKCkge1xuICAgICAgICByZXR1cm4gKHZhbHVlLnBhcmVudCB8fCBkZWZhdWx0Um91dGVyKS5iYXNlICsgdmFsdWUub3duQmFzZTtcbiAgICAgIH0sXG4gICAgfSlcbiAgKTsgLy8gY3JlYXRlIHRoZSBvYmplY3Qgb25jZS4uLlxuICB1c2VJbnNlcnRpb25FZmZlY3QoKCkgPT4ge1xuICAgIHVwZGF0ZVJvdXRlcih2YWx1ZSk7XG4gIH0pOyAvLyAuLi50aGVuIHVwZGF0ZSBpdCBvbiBlYWNoIHJlbmRlclxuXG4gIHJldHVybiBoKFJvdXRlckN0eC5Qcm92aWRlciwge1xuICAgIHZhbHVlLFxuICAgIGNoaWxkcmVuLFxuICB9KTtcbn07XG5cbi8vIEhlbHBlciB0byB3cmFwIGNoaWxkcmVuIGNvbXBvbmVudCBpbnNpZGUgdGhlIFBhcmFtc0N0eCBwcm92aWRlclxuY29uc3QgUGFyYW1zV3JhcHBlciA9IChwYXJhbXMsIGNoaWxkcmVuKSA9PlxuICBoKFBhcmFtc0N0eC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB7IHBhcmFtcyB9LFxuICAgIGNoaWxkcmVuLFxuICB9KTtcblxuZXhwb3J0IGNvbnN0IFJvdXRlID0gKHsgcGF0aCwgbWF0Y2gsIGNvbXBvbmVudCwgY2hpbGRyZW4gfSkgPT4ge1xuICBjb25zdCB1c2VSb3V0ZU1hdGNoID0gdXNlUm91dGUocGF0aCk7XG5cbiAgLy8gYHByb3BzLm1hdGNoYCBpcyBwcmVzZW50IC0gUm91dGUgaXMgY29udHJvbGxlZCBieSB0aGUgU3dpdGNoXG4gIGNvbnN0IFttYXRjaGVzLCBwYXJhbXNdID0gbWF0Y2ggfHwgdXNlUm91dGVNYXRjaDtcblxuICBpZiAoIW1hdGNoZXMpIHJldHVybiBudWxsO1xuXG4gIC8vIFJlYWN0LVJvdXRlciBzdHlsZSBgY29tcG9uZW50YCBwcm9wXG4gIGlmIChjb21wb25lbnQpIHJldHVybiBQYXJhbXNXcmFwcGVyKHBhcmFtcywgaChjb21wb25lbnQsIHsgcGFyYW1zIH0pKTtcblxuICAvLyBzdXBwb3J0IHJlbmRlciBwcm9wIG9yIHBsYWluIGNoaWxkcmVuXG4gIHJldHVybiBQYXJhbXNXcmFwcGVyKFxuICAgIHBhcmFtcyxcbiAgICB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKHBhcmFtcykgOiBjaGlsZHJlblxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IExpbmsgPSBmb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuICBjb25zdCBbLCBuYXZpZ2F0ZV0gPSB1c2VMb2NhdGlvbkZyb21Sb3V0ZXIocm91dGVyKTtcblxuICBjb25zdCB7IHRvLCBocmVmID0gdG8sIGNoaWxkcmVuLCBvbkNsaWNrIH0gPSBwcm9wcztcblxuICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUV2ZW50KChldmVudCkgPT4ge1xuICAgIC8vIGlnbm9yZXMgdGhlIG5hdmlnYXRpb24gd2hlbiBjbGlja2VkIHVzaW5nIHJpZ2h0IG1vdXNlIGJ1dHRvbiBvclxuICAgIC8vIGJ5IGhvbGRpbmcgYSBzcGVjaWFsIG1vZGlmaWVyIGtleTogY3RybCwgY29tbWFuZCwgd2luLCBhbHQsIHNoaWZ0XG4gICAgaWYgKFxuICAgICAgZXZlbnQuY3RybEtleSB8fFxuICAgICAgZXZlbnQubWV0YUtleSB8fFxuICAgICAgZXZlbnQuYWx0S2V5IHx8XG4gICAgICBldmVudC5zaGlmdEtleSB8fFxuICAgICAgZXZlbnQuYnV0dG9uICE9PSAwXG4gICAgKVxuICAgICAgcmV0dXJuO1xuXG4gICAgb25DbGljayAmJiBvbkNsaWNrKGV2ZW50KTtcbiAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBuYXZpZ2F0ZSh0byB8fCBocmVmLCBwcm9wcyk7XG4gICAgfVxuICB9KTtcblxuICAvLyB3cmFwcyBjaGlsZHJlbiBpbiBgYWAgaWYgbmVlZGVkXG4gIGNvbnN0IGV4dHJhUHJvcHMgPSB7XG4gICAgLy8gaGFuZGxlIG5lc3RlZCByb3V0ZXJzIGFuZCBhYnNvbHV0ZSBwYXRoc1xuICAgIGhyZWY6IGhyZWZbMF0gPT09IFwiflwiID8gaHJlZi5zbGljZSgxKSA6IHJvdXRlci5iYXNlICsgaHJlZixcbiAgICBvbkNsaWNrOiBoYW5kbGVDbGljayxcbiAgICB0bzogbnVsbCxcbiAgICByZWYsXG4gIH07XG4gIGNvbnN0IGpzeCA9IGlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSA/IGNoaWxkcmVuIDogaChcImFcIiwgcHJvcHMpO1xuXG4gIHJldHVybiBjbG9uZUVsZW1lbnQoanN4LCBleHRyYVByb3BzKTtcbn0pO1xuXG5jb25zdCBmbGF0dGVuQ2hpbGRyZW4gPSAoY2hpbGRyZW4pID0+IHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgPyBbXS5jb25jYXQoXG4gICAgICAgIC4uLmNoaWxkcmVuLm1hcCgoYykgPT5cbiAgICAgICAgICBjICYmIGMudHlwZSA9PT0gRnJhZ21lbnRcbiAgICAgICAgICAgID8gZmxhdHRlbkNoaWxkcmVuKGMucHJvcHMuY2hpbGRyZW4pXG4gICAgICAgICAgICA6IGZsYXR0ZW5DaGlsZHJlbihjKVxuICAgICAgICApXG4gICAgICApXG4gICAgOiBbY2hpbGRyZW5dO1xufTtcblxuZXhwb3J0IGNvbnN0IFN3aXRjaCA9ICh7IGNoaWxkcmVuLCBsb2NhdGlvbiB9KSA9PiB7XG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuICBjb25zdCBtYXRjaGVyID0gcm91dGVyLm1hdGNoZXI7XG4gIGNvbnN0IFtvcmlnaW5hbExvY2F0aW9uXSA9IHVzZUxvY2F0aW9uRnJvbVJvdXRlcihyb3V0ZXIpO1xuXG4gIGZvciAoY29uc3QgZWxlbWVudCBvZiBmbGF0dGVuQ2hpbGRyZW4oY2hpbGRyZW4pKSB7XG4gICAgbGV0IG1hdGNoID0gMDtcblxuICAgIGlmIChcbiAgICAgIGlzVmFsaWRFbGVtZW50KGVsZW1lbnQpICYmXG4gICAgICAvLyB3ZSBkb24ndCByZXF1aXJlIGFuIGVsZW1lbnQgdG8gYmUgb2YgdHlwZSBSb3V0ZSxcbiAgICAgIC8vIGJ1dCB3ZSBkbyByZXF1aXJlIGl0IHRvIGNvbnRhaW4gYSB0cnV0aHkgYHBhdGhgIHByb3AuXG4gICAgICAvLyB0aGlzIGFsbG93cyB0byB1c2UgZGlmZmVyZW50IGNvbXBvbmVudHMgdGhhdCB3cmFwIFJvdXRlXG4gICAgICAvLyBpbnNpZGUgb2YgYSBzd2l0Y2gsIGZvciBleGFtcGxlIDxBbmltYXRlZFJvdXRlIC8+LlxuICAgICAgKG1hdGNoID0gZWxlbWVudC5wcm9wcy5wYXRoXG4gICAgICAgID8gbWF0Y2hlcihlbGVtZW50LnByb3BzLnBhdGgsIGxvY2F0aW9uIHx8IG9yaWdpbmFsTG9jYXRpb24pXG4gICAgICAgIDogW3RydWUsIHt9XSlbMF1cbiAgICApXG4gICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGVsZW1lbnQsIHsgbWF0Y2ggfSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBSZWRpcmVjdCA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHRvLCBocmVmID0gdG8gfSA9IHByb3BzO1xuICBjb25zdCBbLCBuYXZpZ2F0ZV0gPSB1c2VMb2NhdGlvbigpO1xuICBjb25zdCByZWRpcmVjdCA9IHVzZUV2ZW50KCgpID0+IG5hdmlnYXRlKHRvIHx8IGhyZWYsIHByb3BzKSk7XG5cbiAgLy8gcmVkaXJlY3QgaXMgZ3VhcmFudGVlZCB0byBiZSBzdGFibGUgc2luY2UgaXQgaXMgcmV0dXJuZWQgZnJvbSB1c2VFdmVudFxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICByZWRpcmVjdCgpO1xuICB9LCBbXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VSb3V0ZTtcbiIsInR5cGUgTGlzdGVuZXIgPSAodmFsdWU6IGFueSkgPT4gdm9pZDtcblxudHlwZSBUb3BpY3MgPSB7XG4gICAgW25hbWU6IHN0cmluZ106IExpc3RlbmVyW107XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlUHViU3ViID0gKCkgPT4ge1xuICAgIGxldCB0b3BpY3M6IFRvcGljcyA9IHt9O1xuICAgIGxldCBkZXN0cm95ZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0IGdldFRvcGljID0gKG5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoIXRvcGljc1tuYW1lXSkge1xuICAgICAgICAgICAgdG9waWNzW25hbWVdID0gW107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG9waWNzW25hbWVdO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzdWJzY3JpYmUodG9waWM6IHN0cmluZywgZm46IExpc3RlbmVyKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSBnZXRUb3BpYyh0b3BpYyk7XG5cbiAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKGZuKTtcblxuICAgICAgICAgICAgY29uc3QgdW5zdWJzY3JpYmUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihmbik7XG5cbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgICAgICAgfSxcblxuICAgICAgICBwdWJsaXNoKHRvcGljOiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IGdldFRvcGljKHRvcGljKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoKTtcblxuICAgICAgICAgICAgY3VycmVudExpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZXN0cm95KCkge1xuICAgICAgICAgICAgdG9waWNzID0ge307XG4gICAgICAgICAgICBkZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuIiwiaW1wb3J0IHsgU29uZyB9IGZyb20gJ3NyYy9lbnRpdGllcy9zb25nJztcbmltcG9ydCB7IGNyZWF0ZVB1YlN1YiB9IGZyb20gJy4uL3B1YnN1Yic7XG5pbXBvcnQgeyBjcmVhdGVBdWRpbyB9IGZyb20gJy4vYXVkaW8nO1xuaW1wb3J0IHsgU3RhdGUsIFRyYWNrIH0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IGNyZWF0ZVBsYXllciA9ICgpID0+IHtcbiAgICBjb25zdCBwdWJzdWIgPSBjcmVhdGVQdWJTdWIoKTtcbiAgICBjb25zdCBhdWRpbyA9IGNyZWF0ZUF1ZGlvKCk7XG5cbiAgICBsZXQgc3RhdGU6IFN0YXRlID0ge1xuICAgICAgICAuLi5hdWRpby5nZXRTdGF0ZSgpLFxuICAgICAgICB0cmFja3M6IFtdLFxuICAgICAgICBjdXJyZW50VHJhY2tJbmRleDogbnVsbCxcbiAgICAgICAgY3VycmVudFRyYWNrOiBudWxsLFxuICAgIH07XG5cbiAgICBjb25zdCBzZXRTdGF0ZSA9ICh2YWx1ZTogUGFydGlhbDxTdGF0ZT4pID0+IHtcbiAgICAgICAgc3RhdGUgPSB7IC4uLnN0YXRlLCAuLi52YWx1ZSB9O1xuXG4gICAgICAgIHB1YnN1Yi5wdWJsaXNoKCdjaGFuZ2UnLCBzdGF0ZSk7XG4gICAgfTtcblxuICAgIGF1ZGlvLnN1YnNjcmliZShzZXRTdGF0ZSk7XG5cbiAgICBjb25zdCBjaGFuZ2VUcmFjayA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdHJhY2sgPSBzdGF0ZS5jdXJyZW50VHJhY2s7XG5cbiAgICAgICAgaWYgKHRyYWNrKSB7XG4gICAgICAgICAgICBhdWRpby5zZXRVcmwodHJhY2sudXJsKTtcbiAgICAgICAgICAgIGF1ZGlvLnBsYXkoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBuZXh0ID0gKCkgPT4ge1xuICAgICAgICBpZiAoc3RhdGUuY3VycmVudFRyYWNrSW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IHN0YXRlLnRyYWNrcy5sZW5ndGggLSAxO1xuICAgICAgICBjb25zdCBuZXdJbmRleCA9IHN0YXRlLmN1cnJlbnRUcmFja0luZGV4ICsgMTtcblxuICAgICAgICBpZiAobmV3SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgY3VycmVudFRyYWNrSW5kZXg6IG5ld0luZGV4LFxuICAgICAgICAgICAgICAgIGN1cnJlbnRUcmFjazogc3RhdGUudHJhY2tzW25ld0luZGV4XSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjaGFuZ2VUcmFjaygpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGF1ZGlvLm9uRW5kZWQobmV4dCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBwbGF5OiBhdWRpby5wbGF5LFxuICAgICAgICBwYXVzZTogYXVkaW8ucGF1c2UsXG4gICAgICAgIHNlZWs6IGF1ZGlvLnNlZWssXG4gICAgICAgIHZvbHVtZTogYXVkaW8udm9sdW1lLFxuICAgICAgICBnZXRDdXJyZW50VGltZTogYXVkaW8uZ2V0Q3VycmVudFRpbWUsXG4gICAgICAgIGdldEVsZW1lbnQ6IGF1ZGlvLmdldEVsZW1lbnQsXG4gICAgICAgIG9uQ2hhbmdlQ3VycmVudFRpbWU6IGF1ZGlvLm9uQ2hhbmdlQ3VycmVudFRpbWUsXG5cbiAgICAgICAgZ2V0U3RhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0UXVldWUodHJhY2tzOiBUcmFja1tdKSB7XG4gICAgICAgICAgICBzZXRTdGF0ZSh7IHRyYWNrcyB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBwbGF5VHJhY2sodHJhY2tJbmRleDogbnVtYmVyKSB7XG4gICAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgY3VycmVudFRyYWNrSW5kZXg6IHRyYWNrSW5kZXgsXG4gICAgICAgICAgICAgICAgY3VycmVudFRyYWNrOiBzdGF0ZS50cmFja3NbdHJhY2tJbmRleF0sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY2hhbmdlVHJhY2soKTtcbiAgICAgICAgfSxcblxuICAgICAgICBuZXh0LFxuXG4gICAgICAgIHByZXYoKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuY3VycmVudFRyYWNrSW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gc3RhdGUuY3VycmVudFRyYWNrSW5kZXggLSAxO1xuXG4gICAgICAgICAgICBpZiAobmV3SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRyYWNrOiBzdGF0ZS50cmFja3NbbmV3SW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VHJhY2tJbmRleDogbmV3SW5kZXgsXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjaGFuZ2VUcmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHN1YnNjcmliZShsaXN0ZW5lcjogKG5ld1N0YXRlOiBTdGF0ZSkgPT4gdm9pZCkge1xuICAgICAgICAgICAgcmV0dXJuIHB1YnN1Yi5zdWJzY3JpYmUoJ2NoYW5nZScsIGxpc3RlbmVyKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGVTb25nU3RhdHVzKGlkOiBzdHJpbmcsIHN0YXR1czogc3RyaW5nKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHN0YXRlLnRyYWNrcy5maW5kSW5kZXgodHJhY2sgPT4gdHJhY2suc29uZy5pZCA9PT0gaWQpXG4gICAgICAgICAgICBjb25zdCB0cmFja3MgPSBbLi4uc3RhdGUudHJhY2tzXVxuXG4gICAgICAgICAgICB0cmFja3NbaW5kZXhdLnN0YXR1cyA9IHN0YXR1c1xuXG4gICAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgdHJhY2tzLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH07XG59O1xuXG5jb25zdCBwbGF5ZXIgPSBjcmVhdGVQbGF5ZXIoKTtcblxuZXhwb3J0IGRlZmF1bHQgcGxheWVyO1xuIiwiaW1wb3J0IHsgY3JlYXRlUHViU3ViIH0gZnJvbSAnLi4vcHVic3ViJztcbmltcG9ydCB7IEF1ZGlvU3RhdGUgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUF1ZGlvID0gKCkgPT4ge1xuICAgIGNvbnN0IHB1YnN1YiA9IGNyZWF0ZVB1YlN1YigpO1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuXG4gICAgbGV0IGN1cnJlbnRUaW1lID0gMDtcblxuICAgIGxldCBzdGF0ZTogQXVkaW9TdGF0ZSA9IHtcbiAgICAgICAgZHVyYXRpb246IDAsXG4gICAgICAgIHBsYXlpbmc6IGZhbHNlLFxuICAgICAgICB2b2x1bWU6IDAsXG4gICAgfTtcblxuICAgIGNvbnN0IHNldFN0YXRlID0gKHZhbHVlOiBQYXJ0aWFsPEF1ZGlvU3RhdGU+KSA9PiB7XG4gICAgICAgIHN0YXRlID0geyAuLi5zdGF0ZSwgLi4udmFsdWUgfTtcblxuICAgICAgICBwdWJzdWIucHVibGlzaCgnY2hhbmdlJywgc3RhdGUpO1xuICAgIH07XG5cbiAgICBjb25zdCBzZXR1cCA9ICgpID0+IHtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkdXJhdGlvbmNoYW5nZScsICgpID0+XG4gICAgICAgICAgICBzZXRTdGF0ZSh7IGR1cmF0aW9uOiBlbGVtZW50LmR1cmF0aW9uIH0pLFxuICAgICAgICApO1xuXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncGxheWluZycsICgpID0+IHNldFN0YXRlKHsgcGxheWluZzogdHJ1ZSB9KSk7XG5cbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdwYXVzZScsICgpID0+IHNldFN0YXRlKHsgcGxheWluZzogZmFsc2UgfSkpO1xuXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndGltZXVwZGF0ZScsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0N1cnJlbnRUaW1lID0gTWF0aC5yb3VuZChlbGVtZW50LmN1cnJlbnRUaW1lKTtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRUaW1lICE9PSBuZXdDdXJyZW50VGltZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gbmV3Q3VycmVudFRpbWU7XG5cbiAgICAgICAgICAgICAgICBwdWJzdWIucHVibGlzaCgnY2hhbmdlLWN1cnJlbnQtdGltZScsIGN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd2b2x1bWVjaGFuZ2UnLCAoKSA9PlxuICAgICAgICAgICAgc2V0U3RhdGUoeyB2b2x1bWU6IGVsZW1lbnQudm9sdW1lIH0pLFxuICAgICAgICApO1xuXG4gICAgICAgIHNldFN0YXRlKHsgdm9sdW1lOiBlbGVtZW50LnZvbHVtZSB9KTtcbiAgICB9O1xuXG4gICAgc2V0dXAoKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHNlZWsoc2Vjb25kczogbnVtYmVyKSB7XG4gICAgICAgICAgICBlbGVtZW50LmN1cnJlbnRUaW1lID0gc2Vjb25kcztcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gc2Vjb25kcztcblxuICAgICAgICAgICAgcHVic3ViLnB1Ymxpc2goJ2NoYW5nZS1jdXJyZW50LXRpbWUnLCBjdXJyZW50VGltZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0RWxlbWVudCgpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldFN0YXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEN1cnJlbnRUaW1lKCkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBsYXkoKSB7XG4gICAgICAgICAgICBlbGVtZW50LnBsYXkoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBwYXVzZSgpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucGF1c2UoKTtcbiAgICAgICAgfSxcblxuICAgICAgICB2b2x1bWUodmFsdWU6IG51bWJlcikge1xuICAgICAgICAgICAgZWxlbWVudC52b2x1bWUgPSB2YWx1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRVcmwodXJsOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdzcmMnLCB1cmwpO1xuICAgICAgICAgICAgc2V0U3RhdGUoeyBwbGF5aW5nOiBmYWxzZSB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBzdWJzY3JpYmUobGlzdGVuZXI6IChuZXdTdGF0ZTogQXVkaW9TdGF0ZSkgPT4gdm9pZCkge1xuICAgICAgICAgICAgcmV0dXJuIHB1YnN1Yi5zdWJzY3JpYmUoJ2NoYW5nZScsIGxpc3RlbmVyKTtcbiAgICAgICAgfSxcblxuICAgICAgICBvbkNoYW5nZUN1cnJlbnRUaW1lKGxpc3RlbmVyOiAobmV3Q3VycmVudFRpbWU6IG51bWJlcikgPT4gdm9pZCkge1xuICAgICAgICAgICAgcmV0dXJuIHB1YnN1Yi5zdWJzY3JpYmUoJ2NoYW5nZS1jdXJyZW50LXRpbWUnLCBsaXN0ZW5lcik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb25FbmRlZChsaXN0ZW5lcjogKCkgPT4gdm9pZCkge1xuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdlbmRlZCcsIGxpc3RlbmVyKTtcblxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW5kZWQnLCBsaXN0ZW5lcik7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncHJlYWN0L2hvb2tzJztcbmltcG9ydCBwbGF5ZXIgZnJvbSAnLi9wbGF5ZXInO1xuXG5leHBvcnQgY29uc3QgdXNlUGxheWVyU3RhdGUgPSAoKSA9PiB7XG4gICAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZShwbGF5ZXIuZ2V0U3RhdGUoKSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCB1bnN1YnNjcmliZSA9IHBsYXllci5zdWJzY3JpYmUoc2V0U3RhdGUpO1xuXG4gICAgICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gc3RhdGU7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlQ3VycmVudFRpbWUgPSAoKSA9PiB7XG4gICAgY29uc3QgW2N1cnJlbnRUaW1lLCBzZXRDdXJyZW50VGltZV0gPSB1c2VTdGF0ZShwbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCB1bnN1YnNjcmliZSA9IHBsYXllci5vbkNoYW5nZUN1cnJlbnRUaW1lKHNldEN1cnJlbnRUaW1lKTtcblxuICAgICAgICByZXR1cm4gdW5zdWJzY3JpYmU7XG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIGN1cnJlbnRUaW1lO1xufTtcbiIsImltcG9ydCB7IEZDIH0gZnJvbSAncHJlYWN0L2NvbXBhdCc7XG5pbXBvcnQgcGxheWVyLCB7IHVzZVBsYXllclN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vbGlicy9wbGF5ZXInO1xuXG50eXBlIFByb3BzID0ge1xuICAgIGluZGV4OiBudW1iZXI7XG59O1xuXG5jb25zdCBUcmFjazogRkM8UHJvcHM+ID0gKHsgaW5kZXggfSkgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gdXNlUGxheWVyU3RhdGUoKTtcbiAgICBjb25zdCB0cmFjayA9IHN0YXRlLnRyYWNrc1tpbmRleF07XG5cbiAgICBjb25zdCBoYW5kbGVQbGF5ID0gKCkgPT4ge1xuICAgICAgICBpZiAoc3RhdGUuY3VycmVudFRyYWNrSW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUucGxheWluZykge1xuICAgICAgICAgICAgICAgIHBsYXllci5wYXVzZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXIucGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGxheWVyLnBsYXlUcmFjayhpbmRleCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgbGV0IGNvbG9yID0gXCJiZy1pbmRpZ28tNjAwXCJcblxuICAgIHN3aXRjaCAodHJhY2suc3RhdHVzKSB7XG4gICAgICAgIGNhc2UgXCJ0b19kZWxldGVcIjpcbiAgICAgICAgICAgIGNvbG9yID0gXCJiZy1yZWQtNjAwXCI7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIFwidG9fZG93bmxvYWRcIjpcbiAgICAgICAgICAgIGNvbG9yID0gXCJiZy1ncmVlbi02MDBcIlxuICAgICAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtgdy0xNiBoLTE2ICR7Y29sb3J9IHJvdW5kZWQtbWRgfSBvbkNsaWNrPXsoKSA9PiBoYW5kbGVQbGF5KCl9PjwvZGl2PlxuXG4gICAgLy8gPGxpPlxuICAgIC8vICAgICA8ZGl2Pnt0cmFjay50aXRsZX08L2Rpdj5cbiAgICAvLyAgICAgPGRpdj5cbiAgICAvLyAgICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gaGFuZGxlUGxheSgpfT5cbiAgICAvLyAgICAgICAgICAgICB7c3RhdGUuY3VycmVudFRyYWNrSW5kZXggPT09IGluZGV4ICYmIHN0YXRlLnBsYXlpbmcgPyAoXG4gICAgLy8gICAgICAgICAgICAgICAgIDxkaXY+UGF1c2U8L2Rpdj5cbiAgICAvLyAgICAgICAgICAgICApIDogKFxuICAgIC8vICAgICAgICAgICAgICAgICA8ZGl2PlBsYXk8L2Rpdj5cbiAgICAvLyAgICAgICAgICAgICApfVxuICAgIC8vICAgICAgICAgPC9idXR0b24+XG4gICAgLy8gICAgIDwvZGl2PlxuICAgIC8vIDwvbGk+XG4gICAgLy8gKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRyYWNrO1xuIiwiZnVuY3Rpb24gaSgpe3Rocm93IG5ldyBFcnJvcihcIkN5Y2xlIGRldGVjdGVkXCIpfXZhciB0PVN5bWJvbC5mb3IoXCJwcmVhY3Qtc2lnbmFsc1wiKTtmdW5jdGlvbiByKCl7aWYoISh2PjEpKXt2YXIgaSx0PSExO3doaWxlKHZvaWQgMCE9PWYpe3ZhciByPWY7Zj12b2lkIDA7ZSsrO3doaWxlKHZvaWQgMCE9PXIpe3ZhciBuPXIubztyLm89dm9pZCAwO3IuZiY9LTM7aWYoISg4JnIuZikmJmwocikpdHJ5e3IuYygpfWNhdGNoKHIpe2lmKCF0KXtpPXI7dD0hMH19cj1ufX1lPTA7di0tO2lmKHQpdGhyb3cgaX1lbHNlIHYtLX1mdW5jdGlvbiBuKGkpe2lmKHY+MClyZXR1cm4gaSgpO3YrKzt0cnl7cmV0dXJuIGkoKX1maW5hbGx5e3IoKX19dmFyIG89dm9pZCAwLGg9MDtmdW5jdGlvbiBzKGkpe2lmKGg+MClyZXR1cm4gaSgpO3ZhciB0PW87bz12b2lkIDA7aCsrO3RyeXtyZXR1cm4gaSgpfWZpbmFsbHl7aC0tO289dH19dmFyIGY9dm9pZCAwLHY9MCxlPTAsdT0wO2Z1bmN0aW9uIGMoaSl7aWYodm9pZCAwIT09byl7dmFyIHQ9aS5uO2lmKHZvaWQgMD09PXR8fHQudCE9PW8pe3Q9e2k6MCxTOmkscDpvLnMsbjp2b2lkIDAsdDpvLGU6dm9pZCAwLHg6dm9pZCAwLHI6dH07aWYodm9pZCAwIT09by5zKW8ucy5uPXQ7by5zPXQ7aS5uPXQ7aWYoMzImby5mKWkuUyh0KTtyZXR1cm4gdH1lbHNlIGlmKC0xPT09dC5pKXt0Lmk9MDtpZih2b2lkIDAhPT10Lm4pe3Qubi5wPXQucDtpZih2b2lkIDAhPT10LnApdC5wLm49dC5uO3QucD1vLnM7dC5uPXZvaWQgMDtvLnMubj10O28ucz10fXJldHVybiB0fX19ZnVuY3Rpb24gZChpKXt0aGlzLnY9aTt0aGlzLmk9MDt0aGlzLm49dm9pZCAwO3RoaXMudD12b2lkIDB9ZC5wcm90b3R5cGUuYnJhbmQ9dDtkLnByb3RvdHlwZS5oPWZ1bmN0aW9uKCl7cmV0dXJuITB9O2QucHJvdG90eXBlLlM9ZnVuY3Rpb24oaSl7aWYodGhpcy50IT09aSYmdm9pZCAwPT09aS5lKXtpLng9dGhpcy50O2lmKHZvaWQgMCE9PXRoaXMudCl0aGlzLnQuZT1pO3RoaXMudD1pfX07ZC5wcm90b3R5cGUuVT1mdW5jdGlvbihpKXtpZih2b2lkIDAhPT10aGlzLnQpe3ZhciB0PWkuZSxyPWkueDtpZih2b2lkIDAhPT10KXt0Lng9cjtpLmU9dm9pZCAwfWlmKHZvaWQgMCE9PXIpe3IuZT10O2kueD12b2lkIDB9aWYoaT09PXRoaXMudCl0aGlzLnQ9cn19O2QucHJvdG90eXBlLnN1YnNjcmliZT1mdW5jdGlvbihpKXt2YXIgdD10aGlzO3JldHVybiBPKGZ1bmN0aW9uKCl7dmFyIHI9dC52YWx1ZSxuPTMyJnRoaXMuZjt0aGlzLmYmPS0zMzt0cnl7aShyKX1maW5hbGx5e3RoaXMuZnw9bn19KX07ZC5wcm90b3R5cGUudmFsdWVPZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlfTtkLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlK1wiXCJ9O2QucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlfTtkLnByb3RvdHlwZS5wZWVrPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudn07T2JqZWN0LmRlZmluZVByb3BlcnR5KGQucHJvdG90eXBlLFwidmFsdWVcIix7Z2V0OmZ1bmN0aW9uKCl7dmFyIGk9Yyh0aGlzKTtpZih2b2lkIDAhPT1pKWkuaT10aGlzLmk7cmV0dXJuIHRoaXMudn0sc2V0OmZ1bmN0aW9uKHQpe2lmKG8gaW5zdGFuY2VvZiBfKSFmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIkNvbXB1dGVkIGNhbm5vdCBoYXZlIHNpZGUtZWZmZWN0c1wiKX0oKTtpZih0IT09dGhpcy52KXtpZihlPjEwMClpKCk7dGhpcy52PXQ7dGhpcy5pKys7dSsrO3YrKzt0cnl7Zm9yKHZhciBuPXRoaXMudDt2b2lkIDAhPT1uO249bi54KW4udC5OKCl9ZmluYWxseXtyKCl9fX19KTtmdW5jdGlvbiBhKGkpe3JldHVybiBuZXcgZChpKX1mdW5jdGlvbiBsKGkpe2Zvcih2YXIgdD1pLnM7dm9pZCAwIT09dDt0PXQubilpZih0LlMuaSE9PXQuaXx8IXQuUy5oKCl8fHQuUy5pIT09dC5pKXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIHkoaSl7Zm9yKHZhciB0PWkuczt2b2lkIDAhPT10O3Q9dC5uKXt2YXIgcj10LlMubjtpZih2b2lkIDAhPT1yKXQucj1yO3QuUy5uPXQ7dC5pPS0xO2lmKHZvaWQgMD09PXQubil7aS5zPXQ7YnJlYWt9fX1mdW5jdGlvbiB3KGkpe3ZhciB0PWkucyxyPXZvaWQgMDt3aGlsZSh2b2lkIDAhPT10KXt2YXIgbj10LnA7aWYoLTE9PT10Lmkpe3QuUy5VKHQpO2lmKHZvaWQgMCE9PW4pbi5uPXQubjtpZih2b2lkIDAhPT10Lm4pdC5uLnA9bn1lbHNlIHI9dDt0LlMubj10LnI7aWYodm9pZCAwIT09dC5yKXQucj12b2lkIDA7dD1ufWkucz1yfWZ1bmN0aW9uIF8oaSl7ZC5jYWxsKHRoaXMsdm9pZCAwKTt0aGlzLng9aTt0aGlzLnM9dm9pZCAwO3RoaXMuZz11LTE7dGhpcy5mPTR9KF8ucHJvdG90eXBlPW5ldyBkKS5oPWZ1bmN0aW9uKCl7dGhpcy5mJj0tMztpZigxJnRoaXMuZilyZXR1cm4hMTtpZigzMj09KDM2JnRoaXMuZikpcmV0dXJuITA7dGhpcy5mJj0tNTtpZih0aGlzLmc9PT11KXJldHVybiEwO3RoaXMuZz11O3RoaXMuZnw9MTtpZih0aGlzLmk+MCYmIWwodGhpcykpe3RoaXMuZiY9LTI7cmV0dXJuITB9dmFyIGk9bzt0cnl7eSh0aGlzKTtvPXRoaXM7dmFyIHQ9dGhpcy54KCk7aWYoMTYmdGhpcy5mfHx0aGlzLnYhPT10fHwwPT09dGhpcy5pKXt0aGlzLnY9dDt0aGlzLmYmPS0xNzt0aGlzLmkrK319Y2F0Y2goaSl7dGhpcy52PWk7dGhpcy5mfD0xNjt0aGlzLmkrK31vPWk7dyh0aGlzKTt0aGlzLmYmPS0yO3JldHVybiEwfTtfLnByb3RvdHlwZS5TPWZ1bmN0aW9uKGkpe2lmKHZvaWQgMD09PXRoaXMudCl7dGhpcy5mfD0zNjtmb3IodmFyIHQ9dGhpcy5zO3ZvaWQgMCE9PXQ7dD10Lm4pdC5TLlModCl9ZC5wcm90b3R5cGUuUy5jYWxsKHRoaXMsaSl9O18ucHJvdG90eXBlLlU9ZnVuY3Rpb24oaSl7aWYodm9pZCAwIT09dGhpcy50KXtkLnByb3RvdHlwZS5VLmNhbGwodGhpcyxpKTtpZih2b2lkIDA9PT10aGlzLnQpe3RoaXMuZiY9LTMzO2Zvcih2YXIgdD10aGlzLnM7dm9pZCAwIT09dDt0PXQubil0LlMuVSh0KX19fTtfLnByb3RvdHlwZS5OPWZ1bmN0aW9uKCl7aWYoISgyJnRoaXMuZikpe3RoaXMuZnw9Njtmb3IodmFyIGk9dGhpcy50O3ZvaWQgMCE9PWk7aT1pLngpaS50Lk4oKX19O18ucHJvdG90eXBlLnBlZWs9ZnVuY3Rpb24oKXtpZighdGhpcy5oKCkpaSgpO2lmKDE2JnRoaXMuZil0aHJvdyB0aGlzLnY7cmV0dXJuIHRoaXMudn07T2JqZWN0LmRlZmluZVByb3BlcnR5KF8ucHJvdG90eXBlLFwidmFsdWVcIix7Z2V0OmZ1bmN0aW9uKCl7aWYoMSZ0aGlzLmYpaSgpO3ZhciB0PWModGhpcyk7dGhpcy5oKCk7aWYodm9pZCAwIT09dCl0Lmk9dGhpcy5pO2lmKDE2JnRoaXMuZil0aHJvdyB0aGlzLnY7cmV0dXJuIHRoaXMudn19KTtmdW5jdGlvbiBwKGkpe3JldHVybiBuZXcgXyhpKX1mdW5jdGlvbiBnKGkpe3ZhciB0PWkudTtpLnU9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpe3YrKzt2YXIgbj1vO289dm9pZCAwO3RyeXt0KCl9Y2F0Y2godCl7aS5mJj0tMjtpLmZ8PTg7YihpKTt0aHJvdyB0fWZpbmFsbHl7bz1uO3IoKX19fWZ1bmN0aW9uIGIoaSl7Zm9yKHZhciB0PWkuczt2b2lkIDAhPT10O3Q9dC5uKXQuUy5VKHQpO2kueD12b2lkIDA7aS5zPXZvaWQgMDtnKGkpfWZ1bmN0aW9uIHgoaSl7aWYobyE9PXRoaXMpdGhyb3cgbmV3IEVycm9yKFwiT3V0LW9mLW9yZGVyIGVmZmVjdFwiKTt3KHRoaXMpO289aTt0aGlzLmYmPS0yO2lmKDgmdGhpcy5mKWIodGhpcyk7cigpfWZ1bmN0aW9uIEUoaSl7dGhpcy54PWk7dGhpcy51PXZvaWQgMDt0aGlzLnM9dm9pZCAwO3RoaXMubz12b2lkIDA7dGhpcy5mPTMyfUUucHJvdG90eXBlLmM9ZnVuY3Rpb24oKXt2YXIgaT10aGlzLlMoKTt0cnl7aWYoOCZ0aGlzLmYpcmV0dXJuO2lmKHZvaWQgMD09PXRoaXMueClyZXR1cm47dmFyIHQ9dGhpcy54KCk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdCl0aGlzLnU9dH1maW5hbGx5e2koKX19O0UucHJvdG90eXBlLlM9ZnVuY3Rpb24oKXtpZigxJnRoaXMuZilpKCk7dGhpcy5mfD0xO3RoaXMuZiY9LTk7Zyh0aGlzKTt5KHRoaXMpO3YrKzt2YXIgdD1vO289dGhpcztyZXR1cm4geC5iaW5kKHRoaXMsdCl9O0UucHJvdG90eXBlLk49ZnVuY3Rpb24oKXtpZighKDImdGhpcy5mKSl7dGhpcy5mfD0yO3RoaXMubz1mO2Y9dGhpc319O0UucHJvdG90eXBlLmQ9ZnVuY3Rpb24oKXt0aGlzLmZ8PTg7aWYoISgxJnRoaXMuZikpYih0aGlzKX07ZnVuY3Rpb24gTyhpKXt2YXIgdD1uZXcgRShpKTt0cnl7dC5jKCl9Y2F0Y2goaSl7dC5kKCk7dGhyb3cgaX1yZXR1cm4gdC5kLmJpbmQodCl9ZXhwb3J0e2QgYXMgU2lnbmFsLG4gYXMgYmF0Y2gscCBhcyBjb21wdXRlZCxPIGFzIGVmZmVjdCxhIGFzIHNpZ25hbCxzIGFzIHVudHJhY2tlZH07Ly8jIHNvdXJjZU1hcHBpbmdVUkw9c2lnbmFscy1jb3JlLm1vZHVsZS5qcy5tYXBcbiIsImltcG9ydHtDb21wb25lbnQgYXMgbixvcHRpb25zIGFzIHIsaXNWYWxpZEVsZW1lbnQgYXMgaX1mcm9tXCJwcmVhY3RcIjtpbXBvcnR7dXNlTWVtbyBhcyB0LHVzZVJlZiBhcyBmLHVzZUVmZmVjdCBhcyBvfWZyb21cInByZWFjdC9ob29rc1wiO2ltcG9ydHtTaWduYWwgYXMgZSxjb21wdXRlZCBhcyB1LHNpZ25hbCBhcyBhLGVmZmVjdCBhcyBjfWZyb21cIkBwcmVhY3Qvc2lnbmFscy1jb3JlXCI7ZXhwb3J0e1NpZ25hbCxiYXRjaCxjb21wdXRlZCxlZmZlY3Qsc2lnbmFsLHVudHJhY2tlZH1mcm9tXCJAcHJlYWN0L3NpZ25hbHMtY29yZVwiO3ZhciB2LHM7ZnVuY3Rpb24gbChuLGkpe3Jbbl09aS5iaW5kKG51bGwscltuXXx8ZnVuY3Rpb24oKXt9KX1mdW5jdGlvbiBkKG4pe2lmKHMpcygpO3M9biYmbi5TKCl9ZnVuY3Rpb24gcChuKXt2YXIgcj10aGlzLGY9bi5kYXRhLG89dXNlU2lnbmFsKGYpO28udmFsdWU9Zjt2YXIgZT10KGZ1bmN0aW9uKCl7dmFyIG49ci5fX3Y7d2hpbGUobj1uLl9fKWlmKG4uX19jKXtuLl9fYy5fXyRmfD00O2JyZWFrfXIuX18kdS5jPWZ1bmN0aW9uKCl7dmFyIG47aWYoIWkoZS5wZWVrKCkpJiYzPT09KG51bGw9PShuPXIuYmFzZSk/dm9pZCAwOm4ubm9kZVR5cGUpKXIuYmFzZS5kYXRhPWUucGVlaygpO2Vsc2V7ci5fXyRmfD0xO3Iuc2V0U3RhdGUoe30pfX07cmV0dXJuIHUoZnVuY3Rpb24oKXt2YXIgbj1vLnZhbHVlLnZhbHVlO3JldHVybiAwPT09bj8wOiEwPT09bj9cIlwiOm58fFwiXCJ9KX0sW10pO3JldHVybiBlLnZhbHVlfXAuZGlzcGxheU5hbWU9XCJfc3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTp2b2lkIDB9LHR5cGU6e2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTpwfSxwcm9wczp7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybntkYXRhOnRoaXN9fX0sX19iOntjb25maWd1cmFibGU6ITAsdmFsdWU6MX19KTtsKFwiX19iXCIsZnVuY3Rpb24obixyKXtpZihcInN0cmluZ1wiPT10eXBlb2Ygci50eXBlKXt2YXIgaSx0PXIucHJvcHM7Zm9yKHZhciBmIGluIHQpaWYoXCJjaGlsZHJlblwiIT09Zil7dmFyIG89dFtmXTtpZihvIGluc3RhbmNlb2YgZSl7aWYoIWkpci5fX25wPWk9e307aVtmXT1vO3RbZl09by5wZWVrKCl9fX1uKHIpfSk7bChcIl9fclwiLGZ1bmN0aW9uKG4scil7ZCgpO3ZhciBpLHQ9ci5fX2M7aWYodCl7dC5fXyRmJj0tMjtpZih2b2lkIDA9PT0oaT10Ll9fJHUpKXQuX18kdT1pPWZ1bmN0aW9uKG4pe3ZhciByO2MoZnVuY3Rpb24oKXtyPXRoaXN9KTtyLmM9ZnVuY3Rpb24oKXt0Ll9fJGZ8PTE7dC5zZXRTdGF0ZSh7fSl9O3JldHVybiByfSgpfXY9dDtkKGkpO24ocil9KTtsKFwiX19lXCIsZnVuY3Rpb24obixyLGksdCl7ZCgpO3Y9dm9pZCAwO24ocixpLHQpfSk7bChcImRpZmZlZFwiLGZ1bmN0aW9uKG4scil7ZCgpO3Y9dm9pZCAwO3ZhciBpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiByLnR5cGUmJihpPXIuX19lKSl7dmFyIHQ9ci5fX25wLGY9ci5wcm9wcztpZih0KXt2YXIgbz1pLlU7aWYobylmb3IodmFyIGUgaW4gbyl7dmFyIHU9b1tlXTtpZih2b2lkIDAhPT11JiYhKGUgaW4gdCkpe3UuZCgpO29bZV09dm9pZCAwfX1lbHNlIGkuVT1vPXt9O2Zvcih2YXIgYSBpbiB0KXt2YXIgYz1vW2FdLHM9dFthXTtpZih2b2lkIDA9PT1jKXtjPV8oaSxhLHMsZik7b1thXT1jfWVsc2UgYy5vKHMsZil9fX1uKHIpfSk7ZnVuY3Rpb24gXyhuLHIsaSx0KXt2YXIgZj1yIGluIG4mJnZvaWQgMD09PW4ub3duZXJTVkdFbGVtZW50LG89YShpKTtyZXR1cm57bzpmdW5jdGlvbihuLHIpe28udmFsdWU9bjt0PXJ9LGQ6YyhmdW5jdGlvbigpe3ZhciBpPW8udmFsdWUudmFsdWU7aWYodFtyXSE9PWkpe3Rbcl09aTtpZihmKW5bcl09aTtlbHNlIGlmKGkpbi5zZXRBdHRyaWJ1dGUocixpKTtlbHNlIG4ucmVtb3ZlQXR0cmlidXRlKHIpfX0pfX1sKFwidW5tb3VudFwiLGZ1bmN0aW9uKG4scil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHIudHlwZSl7dmFyIGk9ci5fX2U7aWYoaSl7dmFyIHQ9aS5VO2lmKHQpe2kuVT12b2lkIDA7Zm9yKHZhciBmIGluIHQpe3ZhciBvPXRbZl07aWYobylvLmQoKX19fX1lbHNle3ZhciBlPXIuX19jO2lmKGUpe3ZhciB1PWUuX18kdTtpZih1KXtlLl9fJHU9dm9pZCAwO3UuZCgpfX19bihyKX0pO2woXCJfX2hcIixmdW5jdGlvbihuLHIsaSx0KXtpZih0PDN8fDk9PT10KXIuX18kZnw9MjtuKHIsaSx0KX0pO24ucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZT1mdW5jdGlvbihuLHIpe3ZhciBpPXRoaXMuX18kdTtpZighKGkmJnZvaWQgMCE9PWkuc3x8NCZ0aGlzLl9fJGYpKXJldHVybiEwO2lmKDMmdGhpcy5fXyRmKXJldHVybiEwO2Zvcih2YXIgdCBpbiByKXJldHVybiEwO2Zvcih2YXIgZiBpbiBuKWlmKFwiX19zb3VyY2VcIiE9PWYmJm5bZl0hPT10aGlzLnByb3BzW2ZdKXJldHVybiEwO2Zvcih2YXIgbyBpbiB0aGlzLnByb3BzKWlmKCEobyBpbiBuKSlyZXR1cm4hMDtyZXR1cm4hMX07ZnVuY3Rpb24gdXNlU2lnbmFsKG4pe3JldHVybiB0KGZ1bmN0aW9uKCl7cmV0dXJuIGEobil9LFtdKX1mdW5jdGlvbiB1c2VDb21wdXRlZChuKXt2YXIgcj1mKG4pO3IuY3VycmVudD1uO3YuX18kZnw9NDtyZXR1cm4gdChmdW5jdGlvbigpe3JldHVybiB1KGZ1bmN0aW9uKCl7cmV0dXJuIHIuY3VycmVudCgpfSl9LFtdKX1mdW5jdGlvbiB1c2VTaWduYWxFZmZlY3Qobil7dmFyIHI9ZihuKTtyLmN1cnJlbnQ9bjtvKGZ1bmN0aW9uKCl7cmV0dXJuIGMoZnVuY3Rpb24oKXtyZXR1cm4gci5jdXJyZW50KCl9KX0sW10pfWV4cG9ydHt1c2VDb21wdXRlZCx1c2VTaWduYWwsdXNlU2lnbmFsRWZmZWN0fTsvLyMgc291cmNlTWFwcGluZ1VSTD1zaWduYWxzLm1vZHVsZS5qcy5tYXBcbiIsImNvbnN0IGluc3RhbmNlT2ZBbnkgPSAob2JqZWN0LCBjb25zdHJ1Y3RvcnMpID0+IGNvbnN0cnVjdG9ycy5zb21lKChjKSA9PiBvYmplY3QgaW5zdGFuY2VvZiBjKTtcblxubGV0IGlkYlByb3h5YWJsZVR5cGVzO1xubGV0IGN1cnNvckFkdmFuY2VNZXRob2RzO1xuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRJZGJQcm94eWFibGVUeXBlcygpIHtcbiAgICByZXR1cm4gKGlkYlByb3h5YWJsZVR5cGVzIHx8XG4gICAgICAgIChpZGJQcm94eWFibGVUeXBlcyA9IFtcbiAgICAgICAgICAgIElEQkRhdGFiYXNlLFxuICAgICAgICAgICAgSURCT2JqZWN0U3RvcmUsXG4gICAgICAgICAgICBJREJJbmRleCxcbiAgICAgICAgICAgIElEQkN1cnNvcixcbiAgICAgICAgICAgIElEQlRyYW5zYWN0aW9uLFxuICAgICAgICBdKSk7XG59XG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cbmZ1bmN0aW9uIGdldEN1cnNvckFkdmFuY2VNZXRob2RzKCkge1xuICAgIHJldHVybiAoY3Vyc29yQWR2YW5jZU1ldGhvZHMgfHxcbiAgICAgICAgKGN1cnNvckFkdmFuY2VNZXRob2RzID0gW1xuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5hZHZhbmNlLFxuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5jb250aW51ZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWVQcmltYXJ5S2V5LFxuICAgICAgICBdKSk7XG59XG5jb25zdCBjdXJzb3JSZXF1ZXN0TWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zYWN0aW9uRG9uZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3QocmVxdWVzdCkge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSh3cmFwKHJlcXVlc3QucmVzdWx0KSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChyZXF1ZXN0LmVycm9yKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgIH0pO1xuICAgIHByb21pc2VcbiAgICAgICAgLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgIC8vIFNpbmNlIGN1cnNvcmluZyByZXVzZXMgdGhlIElEQlJlcXVlc3QgKCpzaWdoKiksIHdlIGNhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWxcbiAgICAgICAgLy8gKHNlZSB3cmFwRnVuY3Rpb24pLlxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJDdXJzb3IpIHtcbiAgICAgICAgICAgIGN1cnNvclJlcXVlc3RNYXAuc2V0KHZhbHVlLCByZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYXRjaGluZyB0byBhdm9pZCBcIlVuY2F1Z2h0IFByb21pc2UgZXhjZXB0aW9uc1wiXG4gICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgLy8gVGhpcyBtYXBwaW5nIGV4aXN0cyBpbiByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYnV0IGRvZXNuJ3QgZG9lc24ndCBleGlzdCBpbiB0cmFuc2Zvcm1DYWNoZS4gVGhpc1xuICAgIC8vIGlzIGJlY2F1c2Ugd2UgY3JlYXRlIG1hbnkgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0LlxuICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQocHJvbWlzZSwgcmVxdWVzdCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odHgpIHtcbiAgICAvLyBFYXJseSBiYWlsIGlmIHdlJ3ZlIGFscmVhZHkgY3JlYXRlZCBhIGRvbmUgcHJvbWlzZSBmb3IgdGhpcyB0cmFuc2FjdGlvbi5cbiAgICBpZiAodHJhbnNhY3Rpb25Eb25lTWFwLmhhcyh0eCkpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBkb25lID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdCh0eC5lcnJvciB8fCBuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydEVycm9yJywgJ0Fib3J0RXJyb3InKSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xuICAgIH0pO1xuICAgIC8vIENhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWwuXG4gICAgdHJhbnNhY3Rpb25Eb25lTWFwLnNldCh0eCwgZG9uZSk7XG59XG5sZXQgaWRiUHJveHlUcmFwcyA9IHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yIHRyYW5zYWN0aW9uLmRvbmUuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2RvbmUnKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbkRvbmVNYXAuZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICAvLyBQb2x5ZmlsbCBmb3Igb2JqZWN0U3RvcmVOYW1lcyBiZWNhdXNlIG9mIEVkZ2UuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ29iamVjdFN0b3JlTmFtZXMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5vYmplY3RTdG9yZU5hbWVzIHx8IHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE1ha2UgdHguc3RvcmUgcmV0dXJuIHRoZSBvbmx5IHN0b3JlIGluIHRoZSB0cmFuc2FjdGlvbiwgb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGFyZSBtYW55LlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdzdG9yZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIub2JqZWN0U3RvcmVOYW1lc1sxXVxuICAgICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6IHJlY2VpdmVyLm9iamVjdFN0b3JlKHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEVsc2UgdHJhbnNmb3JtIHdoYXRldmVyIHdlIGdldCBiYWNrLlxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXRbcHJvcF0pO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24gJiZcbiAgICAgICAgICAgIChwcm9wID09PSAnZG9uZScgfHwgcHJvcCA9PT0gJ3N0b3JlJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wIGluIHRhcmdldDtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIHJlcGxhY2VUcmFwcyhjYWxsYmFjaykge1xuICAgIGlkYlByb3h5VHJhcHMgPSBjYWxsYmFjayhpZGJQcm94eVRyYXBzKTtcbn1cbmZ1bmN0aW9uIHdyYXBGdW5jdGlvbihmdW5jKSB7XG4gICAgLy8gRHVlIHRvIGV4cGVjdGVkIG9iamVjdCBlcXVhbGl0eSAod2hpY2ggaXMgZW5mb3JjZWQgYnkgdGhlIGNhY2hpbmcgaW4gYHdyYXBgKSwgd2VcbiAgICAvLyBvbmx5IGNyZWF0ZSBvbmUgbmV3IGZ1bmMgcGVyIGZ1bmMuXG4gICAgLy8gRWRnZSBkb2Vzbid0IHN1cHBvcnQgb2JqZWN0U3RvcmVOYW1lcyAoYm9vbyksIHNvIHdlIHBvbHlmaWxsIGl0IGhlcmUuXG4gICAgaWYgKGZ1bmMgPT09IElEQkRhdGFiYXNlLnByb3RvdHlwZS50cmFuc2FjdGlvbiAmJlxuICAgICAgICAhKCdvYmplY3RTdG9yZU5hbWVzJyBpbiBJREJUcmFuc2FjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3RvcmVOYW1lcywgLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgdHggPSBmdW5jLmNhbGwodW53cmFwKHRoaXMpLCBzdG9yZU5hbWVzLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5zZXQodHgsIHN0b3JlTmFtZXMuc29ydCA/IHN0b3JlTmFtZXMuc29ydCgpIDogW3N0b3JlTmFtZXNdKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKHR4KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ3Vyc29yIG1ldGhvZHMgYXJlIHNwZWNpYWwsIGFzIHRoZSBiZWhhdmlvdXIgaXMgYSBsaXR0bGUgbW9yZSBkaWZmZXJlbnQgdG8gc3RhbmRhcmQgSURCLiBJblxuICAgIC8vIElEQiwgeW91IGFkdmFuY2UgdGhlIGN1cnNvciBhbmQgd2FpdCBmb3IgYSBuZXcgJ3N1Y2Nlc3MnIG9uIHRoZSBJREJSZXF1ZXN0IHRoYXQgZ2F2ZSB5b3UgdGhlXG4gICAgLy8gY3Vyc29yLiBJdCdzIGtpbmRhIGxpa2UgYSBwcm9taXNlIHRoYXQgY2FuIHJlc29sdmUgd2l0aCBtYW55IHZhbHVlcy4gVGhhdCBkb2Vzbid0IG1ha2Ugc2Vuc2VcbiAgICAvLyB3aXRoIHJlYWwgcHJvbWlzZXMsIHNvIGVhY2ggYWR2YW5jZSBtZXRob2RzIHJldHVybnMgYSBuZXcgcHJvbWlzZSBmb3IgdGhlIGN1cnNvciBvYmplY3QsIG9yXG4gICAgLy8gdW5kZWZpbmVkIGlmIHRoZSBlbmQgb2YgdGhlIGN1cnNvciBoYXMgYmVlbiByZWFjaGVkLlxuICAgIGlmIChnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpLmluY2x1ZGVzKGZ1bmMpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJveHkgYXMgJ3RoaXMnIGNhdXNlcyBJTExFR0FMIElOVk9DQVRJT04sIHNvIHdlIHVzZVxuICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgICAgIGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKGN1cnNvclJlcXVlc3RNYXAuZ2V0KHRoaXMpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIC8vIENhbGxpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3h5IGFzICd0aGlzJyBjYXVzZXMgSUxMRUdBTCBJTlZPQ0FUSU9OLCBzbyB3ZSB1c2VcbiAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHdyYXAoZnVuYy5hcHBseSh1bndyYXAodGhpcyksIGFyZ3MpKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB3cmFwRnVuY3Rpb24odmFsdWUpO1xuICAgIC8vIFRoaXMgZG9lc24ndCByZXR1cm4sIGl0IGp1c3QgY3JlYXRlcyBhICdkb25lJyBwcm9taXNlIGZvciB0aGUgdHJhbnNhY3Rpb24sXG4gICAgLy8gd2hpY2ggaXMgbGF0ZXIgcmV0dXJuZWQgZm9yIHRyYW5zYWN0aW9uLmRvbmUgKHNlZSBpZGJPYmplY3RIYW5kbGVyKS5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbilcbiAgICAgICAgY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uKHZhbHVlKTtcbiAgICBpZiAoaW5zdGFuY2VPZkFueSh2YWx1ZSwgZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSkpXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodmFsdWUsIGlkYlByb3h5VHJhcHMpO1xuICAgIC8vIFJldHVybiB0aGUgc2FtZSB2YWx1ZSBiYWNrIGlmIHdlJ3JlIG5vdCBnb2luZyB0byB0cmFuc2Zvcm0gaXQuXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gd3JhcCh2YWx1ZSkge1xuICAgIC8vIFdlIHNvbWV0aW1lcyBnZW5lcmF0ZSBtdWx0aXBsZSBwcm9taXNlcyBmcm9tIGEgc2luZ2xlIElEQlJlcXVlc3QgKGVnIHdoZW4gY3Vyc29yaW5nKSwgYmVjYXVzZVxuICAgIC8vIElEQiBpcyB3ZWlyZCBhbmQgYSBzaW5nbGUgSURCUmVxdWVzdCBjYW4geWllbGQgbWFueSByZXNwb25zZXMsIHNvIHRoZXNlIGNhbid0IGJlIGNhY2hlZC5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJSZXF1ZXN0KVxuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdCh2YWx1ZSk7XG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSB0cmFuc2Zvcm1lZCB0aGlzIHZhbHVlIGJlZm9yZSwgcmV1c2UgdGhlIHRyYW5zZm9ybWVkIHZhbHVlLlxuICAgIC8vIFRoaXMgaXMgZmFzdGVyLCBidXQgaXQgYWxzbyBwcm92aWRlcyBvYmplY3QgZXF1YWxpdHkuXG4gICAgaWYgKHRyYW5zZm9ybUNhY2hlLmhhcyh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSk7XG4gICAgLy8gTm90IGFsbCB0eXBlcyBhcmUgdHJhbnNmb3JtZWQuXG4gICAgLy8gVGhlc2UgbWF5IGJlIHByaW1pdGl2ZSB0eXBlcywgc28gdGhleSBjYW4ndCBiZSBXZWFrTWFwIGtleXMuXG4gICAgaWYgKG5ld1ZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICB0cmFuc2Zvcm1DYWNoZS5zZXQodmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChuZXdWYWx1ZSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3VmFsdWU7XG59XG5jb25zdCB1bndyYXAgPSAodmFsdWUpID0+IHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuXG5leHBvcnQgeyByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYXMgYSwgaW5zdGFuY2VPZkFueSBhcyBpLCByZXBsYWNlVHJhcHMgYXMgciwgdW53cmFwIGFzIHUsIHdyYXAgYXMgdyB9O1xuIiwiaW1wb3J0IHsgdyBhcyB3cmFwLCByIGFzIHJlcGxhY2VUcmFwcyB9IGZyb20gJy4vd3JhcC1pZGItdmFsdWUuanMnO1xuZXhwb3J0IHsgdSBhcyB1bndyYXAsIHcgYXMgd3JhcCB9IGZyb20gJy4vd3JhcC1pZGItdmFsdWUuanMnO1xuXG4vKipcbiAqIE9wZW4gYSBkYXRhYmFzZS5cbiAqXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cbiAqIEBwYXJhbSB2ZXJzaW9uIFNjaGVtYSB2ZXJzaW9uLlxuICogQHBhcmFtIGNhbGxiYWNrcyBBZGRpdGlvbmFsIGNhbGxiYWNrcy5cbiAqL1xuZnVuY3Rpb24gb3BlbkRCKG5hbWUsIHZlcnNpb24sIHsgYmxvY2tlZCwgdXBncmFkZSwgYmxvY2tpbmcsIHRlcm1pbmF0ZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pO1xuICAgIGNvbnN0IG9wZW5Qcm9taXNlID0gd3JhcChyZXF1ZXN0KTtcbiAgICBpZiAodXBncmFkZSkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3VwZ3JhZGVuZWVkZWQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHVwZ3JhZGUod3JhcChyZXF1ZXN0LnJlc3VsdCksIGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIHdyYXAocmVxdWVzdC50cmFuc2FjdGlvbiksIGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChibG9ja2VkKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsIChldmVudCkgPT4gYmxvY2tlZChcbiAgICAgICAgLy8gQ2FzdGluZyBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0LURPTS1saWItZ2VuZXJhdG9yL3B1bGwvMTQwNVxuICAgICAgICBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCBldmVudCkpO1xuICAgIH1cbiAgICBvcGVuUHJvbWlzZVxuICAgICAgICAudGhlbigoZGIpID0+IHtcbiAgICAgICAgaWYgKHRlcm1pbmF0ZWQpXG4gICAgICAgICAgICBkYi5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IHRlcm1pbmF0ZWQoKSk7XG4gICAgICAgIGlmIChibG9ja2luZykge1xuICAgICAgICAgICAgZGIuYWRkRXZlbnRMaXN0ZW5lcigndmVyc2lvbmNoYW5nZScsIChldmVudCkgPT4gYmxvY2tpbmcoZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgZXZlbnQpKTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgIHJldHVybiBvcGVuUHJvbWlzZTtcbn1cbi8qKlxuICogRGVsZXRlIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKi9cbmZ1bmN0aW9uIGRlbGV0ZURCKG5hbWUsIHsgYmxvY2tlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKG5hbWUpO1xuICAgIGlmIChibG9ja2VkKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsIChldmVudCkgPT4gYmxvY2tlZChcbiAgICAgICAgLy8gQ2FzdGluZyBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0LURPTS1saWItZ2VuZXJhdG9yL3B1bGwvMTQwNVxuICAgICAgICBldmVudC5vbGRWZXJzaW9uLCBldmVudCkpO1xuICAgIH1cbiAgICByZXR1cm4gd3JhcChyZXF1ZXN0KS50aGVuKCgpID0+IHVuZGVmaW5lZCk7XG59XG5cbmNvbnN0IHJlYWRNZXRob2RzID0gWydnZXQnLCAnZ2V0S2V5JywgJ2dldEFsbCcsICdnZXRBbGxLZXlzJywgJ2NvdW50J107XG5jb25zdCB3cml0ZU1ldGhvZHMgPSBbJ3B1dCcsICdhZGQnLCAnZGVsZXRlJywgJ2NsZWFyJ107XG5jb25zdCBjYWNoZWRNZXRob2RzID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkge1xuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIElEQkRhdGFiYXNlICYmXG4gICAgICAgICEocHJvcCBpbiB0YXJnZXQpICYmXG4gICAgICAgIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FjaGVkTWV0aG9kcy5nZXQocHJvcCkpXG4gICAgICAgIHJldHVybiBjYWNoZWRNZXRob2RzLmdldChwcm9wKTtcbiAgICBjb25zdCB0YXJnZXRGdW5jTmFtZSA9IHByb3AucmVwbGFjZSgvRnJvbUluZGV4JC8sICcnKTtcbiAgICBjb25zdCB1c2VJbmRleCA9IHByb3AgIT09IHRhcmdldEZ1bmNOYW1lO1xuICAgIGNvbnN0IGlzV3JpdGUgPSB3cml0ZU1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpO1xuICAgIGlmIChcbiAgICAvLyBCYWlsIGlmIHRoZSB0YXJnZXQgZG9lc24ndCBleGlzdCBvbiB0aGUgdGFyZ2V0LiBFZywgZ2V0QWxsIGlzbid0IGluIEVkZ2UuXG4gICAgISh0YXJnZXRGdW5jTmFtZSBpbiAodXNlSW5kZXggPyBJREJJbmRleCA6IElEQk9iamVjdFN0b3JlKS5wcm90b3R5cGUpIHx8XG4gICAgICAgICEoaXNXcml0ZSB8fCByZWFkTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gYXN5bmMgZnVuY3Rpb24gKHN0b3JlTmFtZSwgLi4uYXJncykge1xuICAgICAgICAvLyBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiB1bmRlZmluZWQgZ3ppcHBzIGJldHRlciwgYnV0IGZhaWxzIGluIEVkZ2UgOihcbiAgICAgICAgY29uc3QgdHggPSB0aGlzLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogJ3JlYWRvbmx5Jyk7XG4gICAgICAgIGxldCB0YXJnZXQgPSB0eC5zdG9yZTtcbiAgICAgICAgaWYgKHVzZUluZGV4KVxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LmluZGV4KGFyZ3Muc2hpZnQoKSk7XG4gICAgICAgIC8vIE11c3QgcmVqZWN0IGlmIG9wIHJlamVjdHMuXG4gICAgICAgIC8vIElmIGl0J3MgYSB3cml0ZSBvcGVyYXRpb24sIG11c3QgcmVqZWN0IGlmIHR4LmRvbmUgcmVqZWN0cy5cbiAgICAgICAgLy8gTXVzdCByZWplY3Qgd2l0aCBvcCByZWplY3Rpb24gZmlyc3QuXG4gICAgICAgIC8vIE11c3QgcmVzb2x2ZSB3aXRoIG9wIHZhbHVlLlxuICAgICAgICAvLyBNdXN0IGhhbmRsZSBib3RoIHByb21pc2VzIChubyB1bmhhbmRsZWQgcmVqZWN0aW9ucylcbiAgICAgICAgcmV0dXJuIChhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0RnVuY05hbWVdKC4uLmFyZ3MpLFxuICAgICAgICAgICAgaXNXcml0ZSAmJiB0eC5kb25lLFxuICAgICAgICBdKSlbMF07XG4gICAgfTtcbiAgICBjYWNoZWRNZXRob2RzLnNldChwcm9wLCBtZXRob2QpO1xuICAgIHJldHVybiBtZXRob2Q7XG59XG5yZXBsYWNlVHJhcHMoKG9sZFRyYXBzKSA9PiAoe1xuICAgIC4uLm9sZFRyYXBzLFxuICAgIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+IGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSxcbiAgICBoYXM6ICh0YXJnZXQsIHByb3ApID0+ICEhZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuaGFzKHRhcmdldCwgcHJvcCksXG59KSk7XG5cbmV4cG9ydCB7IGRlbGV0ZURCLCBvcGVuREIgfTtcbiIsImltcG9ydCB7IHNpZ25hbCB9IGZyb20gJ0BwcmVhY3Qvc2lnbmFscyc7XG5pbXBvcnQgeyBvcGVuREIsIERCU2NoZW1hIH0gZnJvbSAnaWRiJztcblxuZXhwb3J0IHR5cGUgU29uZyA9IHtcbiAgICBpZDogc3RyaW5nLFxuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgaW5zdHJ1bWVudGF0aW9uOiBzdHJpbmcsXG4gICAgc291cmNlOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcsXG4gICAgdGVtcG86IG51bWJlcixcbiAgICBtZXRlcjogc3RyaW5nLFxuICAgIGR1cmF0aW9uOiBudW1iZXIsXG4gICAgc3RhdHVzOiBzdHJpbmcsXG4gICAgY292ZXJfZmlsZXBhdGg6IHN0cmluZyxcbiAgICBkb3dubG9hZF9maWxlcGF0aDogc3RyaW5nLFxuICAgIHJlY29yZF9maWxlcGF0aDogc3RyaW5nLFxuICAgIGNyZWF0ZWRfYXQ6IGFueSxcbiAgICB1cGRhdGVkX2F0OiBhbnksXG59XG5cbmV4cG9ydCB0eXBlIFNvbmdGaWxlID0ge1xuICAgIHNvbmdJRDogc3RyaW5nLFxuICAgIGZpbGU6IEJsb2Jcbn1cblxuZXhwb3J0IHR5cGUgU29uZ1N0YXR1cyA9IHtcbiAgICBzb25nSUQ6IHN0cmluZyxcbiAgICBzdGF0dXM6IHN0cmluZ1xufVxuXG5leHBvcnQgY29uc3Qgc29uZ3MgPSBzaWduYWwobmV3IEFycmF5PFNvbmc+KCkpO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNvbmdEQiBleHRlbmRzIERCU2NoZW1hIHtcbiAgICBzb25nczoge1xuICAgICAgICB2YWx1ZTogU29uZztcbiAgICAgICAga2V5OiBzdHJpbmc7XG4gICAgICAgIGluZGV4ZXM6IHsgJ2J5LWtleSc6IHN0cmluZyB9O1xuICAgIH07XG4gICAgc29uZ0ZpbGU6IHtcbiAgICAgICAgdmFsdWU6IFNvbmdGaWxlO1xuICAgICAgICBrZXk6IHN0cmluZztcbiAgICB9O1xuICAgIHNvbmdTdGF0dXM6IHtcbiAgICAgICAgdmFsdWU6IFNvbmdTdGF0dXM7XG4gICAgICAgIGtleTogc3RyaW5nO1xuICAgIH07XG59XG5cblxuZXhwb3J0IGNvbnN0IHNvbmdEQiA9IG9wZW5EQjxTb25nREI+KCdzb25nLWRiJywgMSwge1xuICAgIHVwZ3JhZGUoZGIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJVUEdSQURFIERCXCIpXG4gICAgICAgIGNvbnN0IHNvbmdTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKFwic29uZ3NcIiwge1xuICAgICAgICAgICAga2V5UGF0aDogJ2lkJyxcbiAgICAgICAgfSk7XG4gICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKFwic29uZ0ZpbGVcIiwge1xuICAgICAgICAgICAga2V5UGF0aDogJ3NvbmdJRCcsXG4gICAgICAgIH0pO1xuICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZShcInNvbmdTdGF0dXNcIiwge1xuICAgICAgICAgICAga2V5UGF0aDogJ3NvbmdJRCcsXG4gICAgICAgIH0pO1xuICAgICAgICBzb25nU3RvcmUuY3JlYXRlSW5kZXgoJ2J5LWtleScsICdrZXknKTtcbiAgICB9LFxufSk7IiwiaW1wb3J0IHsgU29uZywgU29uZ0RCLCBTb25nRmlsZSwgU29uZ1N0YXR1cywgc29uZ0RCIH0gZnJvbSBcIi4uL2VudGl0aWVzL3NvbmdcIlxuaW1wb3J0IHsgSURCUERhdGFiYXNlIH0gZnJvbSBcImlkYlwiXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzbGVlcChzZWNvbmRzOiBudW1iZXIsIG1heDogbnVtYmVyIHwgbnVsbCA9IG51bGwpIHtcbiAgICBpZiAobWF4ICE9PSBudWxsKSB7XG4gICAgICAgIHNlY29uZHMgKz0gTWF0aC5yYW5kb20oKSAqIChtYXggLSBzZWNvbmRzKVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHNlY29uZHMgKiAxMDAwKSlcbn1cblxuY2xhc3MgU29uZ0NvbnRyb2xsZXIge1xuICAgIGRiOiBJREJQRGF0YWJhc2U8U29uZ0RCPlxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaW5pdCgpXG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5kYiA9IGF3YWl0IHNvbmdEQlxuICAgIH1cblxuICAgIGFzeW5jIGNyZWF0ZShzb25nOiBTb25nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJDcmVhdGUgc29uZ1wiLCBzb25nKVxuXG4gICAgICAgIGNvbnN0IHN0YXR1cyA9IGF3YWl0IHRoaXMuZ2V0U3RhdHVzKHNvbmcuaWQpXG5cbiAgICAgICAgaWYgKCFzdGF0dXMpIHtcbiAgICAgICAgICAgIGF3YWl0IHNvbmdDb250cm9sbGVyLmNyZWF0ZVN0YXR1cyhzb25nLmlkLCBzb25nLnN0YXR1cylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmRiLnB1dChcInNvbmdzXCIsIHNvbmcpXG4gICAgfVxuXG4gICAgYXN5bmMgY3JlYXRlRmlsZShzb25nSUQ6IHN0cmluZywgZmlsZTogQmxvYikge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5kYi5wdXQoXCJzb25nRmlsZVwiLCB7XG4gICAgICAgICAgICBzb25nSUQsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGFzeW5jIGNyZWF0ZVN0YXR1cyhzb25nSUQ6IHN0cmluZywgc3RhdHVzOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZGIucHV0KFwic29uZ1N0YXR1c1wiLCB7XG4gICAgICAgICAgICBzb25nSUQsXG4gICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0KGlkOiBzdHJpbmcpOiBQcm9taXNlPFNvbmc+IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZGIuZ2V0KFwic29uZ3NcIiwgaWQpXG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RmlsZShpZDogc3RyaW5nKTogUHJvbWlzZTxTb25nRmlsZT4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5kYi5nZXQoXCJzb25nRmlsZVwiLCBpZClcbiAgICB9XG5cbiAgICBhc3luYyBnZXRTdGF0dXMoaWQ6IHN0cmluZyk6IFByb21pc2U8U29uZ1N0YXR1cz4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5kYi5nZXQoXCJzb25nU3RhdHVzXCIsIGlkKVxuICAgIH1cblxuICAgIGFzeW5jIHJlbmFtZShpZDogc3RyaW5nLCB0aXRsZTogc3RyaW5nKTogUHJvbWlzZTxTb25nPiB7XG4gICAgICAgIGxldCBzb25nID0gYXdhaXQgdGhpcy5nZXQoaWQpXG5cbiAgICAgICAgc29uZy50aXRsZSA9IHRpdGxlXG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0KGF3YWl0IHRoaXMuZGIucHV0KFwic29uZ3NcIiwgc29uZykpXG4gICAgfVxuXG4gICAgYXN5bmMgZmxhZ0Rvd25sb2FkKGlkOiBzdHJpbmcsIHBsYXllcjogYW55KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGxldCBzb25nID0gYXdhaXQgdGhpcy5kYi5nZXQoXCJzb25nU3RhdHVzXCIsIGlkKVxuXG4gICAgICAgIHNvbmcuc3RhdHVzID0gXCJ0b19kb3dubG9hZFwiXG5cbiAgICAgICAgYXdhaXQgdGhpcy5kYi5wdXQoXCJzb25nU3RhdHVzXCIsIHNvbmcpXG4gICAgICAgIHBsYXllci51cGRhdGVTb25nU3RhdHVzKGlkLCBcInRvX2Rvd25sb2FkXCIpXG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QWxsKCk6IFByb21pc2U8QXJyYXk8U29uZz4+IHtcbiAgICAgICAgaWYgKCF0aGlzLmRiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwKDEpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLmdldEFsbCgpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZGIuZ2V0QWxsKFwic29uZ3NcIilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGZsYWdEZWxldGUoaWQ6IHN0cmluZywgcGxheWVyOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgbGV0IHNvbmcgPSBhd2FpdCB0aGlzLmRiLmdldChcInNvbmdTdGF0dXNcIiwgaWQpXG5cbiAgICAgICAgc29uZy5zdGF0dXMgPSBcInRvX2RlbGV0ZVwiXG5cbiAgICAgICAgYXdhaXQgdGhpcy5kYi5wdXQoXCJzb25nU3RhdHVzXCIsIHNvbmcpXG4gICAgICAgIHBsYXllci51cGRhdGVTb25nU3RhdHVzKGlkLCBcInRvX2RlbGV0ZVwiKVxuICAgIH1cblxuICAgIGFzeW5jIGRlbGV0ZShpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmRiLmRlbGV0ZShcInNvbmdzXCIsIGlkKVxuICAgIH1cbn1cblxuY29uc3Qgc29uZ0NvbnRyb2xsZXIgPSBuZXcgU29uZ0NvbnRyb2xsZXIoKVxuXG5leHBvcnQgZGVmYXVsdCBzb25nQ29udHJvbGxlciIsImltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3ByZWFjdC9ob29rcyc7XG5pbXBvcnQgcGxheWVyLCB7IHVzZVBsYXllclN0YXRlIH0gZnJvbSAnLi4vLi4vbGlicy9wbGF5ZXInO1xuaW1wb3J0IFRyYWNrIGZyb20gJy4vVHJhY2snO1xuaW1wb3J0IHNvbmdDb250cm9sbGVyIGZyb20gJy4uLy4uL2NvbnRyb2xsZXJzL3NvbmdDb250cm9sbGVyJztcbmltcG9ydCB7IHNvbmdzIH0gZnJvbSAnLi4vLi4vZW50aXRpZXMvc29uZyc7XG5cbmNvbnN0IFBsYXlsaXN0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gdXNlUGxheWVyU3RhdGUoKTtcblxuICAgIGNvbnN0IHNldFF1ZXVlID0gYXN5bmMgKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHRyYWNrcyA9IGF3YWl0IFByb21pc2UuYWxsKHNvbmdzLnZhbHVlLm1hcChhc3luYyAoc29uZykgPT4ge1xuICAgICAgICAgICAgY29uc3QgZiA9IGF3YWl0IHNvbmdDb250cm9sbGVyLmdldEZpbGUoc29uZy5pZClcbiAgICAgICAgICAgIGNvbnN0IHMgPSBhd2FpdCBzb25nQ29udHJvbGxlci5nZXRTdGF0dXMoc29uZy5pZClcblxuICAgICAgICAgICAgY29uc29sZS5sb2cocy5zdGF0dXMpXG4gICAgICAgICAgICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGYuZmlsZSlcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc29uZzogc29uZywgdXJsOiB1cmwsIHN0YXR1czogcy5zdGF0dXMgPyBzLnN0YXR1cyA6IHNvbmcuc3RhdHVzXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgcGxheWVyLnNldFF1ZXVlKHRyYWNrcyk7XG4gICAgfVxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0UXVldWUoKVxuICAgIH0sIFtzb25ncy52YWx1ZV0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGwgcmVsYXRpdmUgaC0yNCBvdmVyZmxvdy14LWF1dG8gYmctZ3JheS05MDBcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgdG9wLTQgZ2FwLTQgc3RhcnQtMCBmbGV4XCI+XG4gICAgICAgICAgICAgICAge3N0YXRlLnRyYWNrcy5tYXAoKHRyYWNrLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8VHJhY2sgaW5kZXg9e2luZGV4fSBrZXk9e3RyYWNrLnVybH0gLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUGxheWxpc3Q7XG4iLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbi8qXG4gKiBUaGlzIHByb2dyYW0gaXMgYmFzZWQgb24gSlpsaWIgMS4wLjIgeW1uaywgSkNyYWZ0LEluYy5cbiAqIEpabGliIGlzIGJhc2VkIG9uIHpsaWItMS4xLjMsIHNvIGFsbCBjcmVkaXQgc2hvdWxkIGdvIGF1dGhvcnNcbiAqIEplYW4tbG91cCBHYWlsbHkoamxvdXBAZ3ppcC5vcmcpIGFuZCBNYXJrIEFkbGVyKG1hZGxlckBhbHVtbmkuY2FsdGVjaC5lZHUpXG4gKiBhbmQgY29udHJpYnV0b3JzIG9mIHpsaWIuXG4gKi9cblxuLy8gZGVuby1saW50LWlnbm9yZS1maWxlIG5vLXRoaXMtYWxpYXMgcHJlZmVyLWNvbnN0XG5cbi8vIEdsb2JhbFxuXG5jb25zdCBNQVhfQklUUyA9IDE1O1xuY29uc3QgRF9DT0RFUyA9IDMwO1xuY29uc3QgQkxfQ09ERVMgPSAxOTtcblxuY29uc3QgTEVOR1RIX0NPREVTID0gMjk7XG5jb25zdCBMSVRFUkFMUyA9IDI1NjtcbmNvbnN0IExfQ09ERVMgPSAoTElURVJBTFMgKyAxICsgTEVOR1RIX0NPREVTKTtcbmNvbnN0IEhFQVBfU0laRSA9ICgyICogTF9DT0RFUyArIDEpO1xuXG5jb25zdCBFTkRfQkxPQ0sgPSAyNTY7XG5cbi8vIEJpdCBsZW5ndGggY29kZXMgbXVzdCBub3QgZXhjZWVkIE1BWF9CTF9CSVRTIGJpdHNcbmNvbnN0IE1BWF9CTF9CSVRTID0gNztcblxuLy8gcmVwZWF0IHByZXZpb3VzIGJpdCBsZW5ndGggMy02IHRpbWVzICgyIGJpdHMgb2YgcmVwZWF0IGNvdW50KVxuY29uc3QgUkVQXzNfNiA9IDE2O1xuXG4vLyByZXBlYXQgYSB6ZXJvIGxlbmd0aCAzLTEwIHRpbWVzICgzIGJpdHMgb2YgcmVwZWF0IGNvdW50KVxuY29uc3QgUkVQWl8zXzEwID0gMTc7XG5cbi8vIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDExLTEzOCB0aW1lcyAoNyBiaXRzIG9mIHJlcGVhdCBjb3VudClcbmNvbnN0IFJFUFpfMTFfMTM4ID0gMTg7XG5cbi8vIFRoZSBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RoIGNvZGVzIGFyZSBzZW50IGluIG9yZGVyIG9mIGRlY3JlYXNpbmdcbi8vIHByb2JhYmlsaXR5LCB0byBhdm9pZCB0cmFuc21pdHRpbmcgdGhlIGxlbmd0aHMgZm9yIHVudXNlZCBiaXRcbi8vIGxlbmd0aCBjb2Rlcy5cblxuY29uc3QgQnVmX3NpemUgPSA4ICogMjtcblxuLy8gSlpsaWIgdmVyc2lvbiA6IFwiMS4wLjJcIlxuY29uc3QgWl9ERUZBVUxUX0NPTVBSRVNTSU9OID0gLTE7XG5cbi8vIGNvbXByZXNzaW9uIHN0cmF0ZWd5XG5jb25zdCBaX0ZJTFRFUkVEID0gMTtcbmNvbnN0IFpfSFVGRk1BTl9PTkxZID0gMjtcbmNvbnN0IFpfREVGQVVMVF9TVFJBVEVHWSA9IDA7XG5cbmNvbnN0IFpfTk9fRkxVU0ggPSAwO1xuY29uc3QgWl9QQVJUSUFMX0ZMVVNIID0gMTtcbmNvbnN0IFpfRlVMTF9GTFVTSCA9IDM7XG5jb25zdCBaX0ZJTklTSCA9IDQ7XG5cbmNvbnN0IFpfT0sgPSAwO1xuY29uc3QgWl9TVFJFQU1fRU5EID0gMTtcbmNvbnN0IFpfTkVFRF9ESUNUID0gMjtcbmNvbnN0IFpfU1RSRUFNX0VSUk9SID0gLTI7XG5jb25zdCBaX0RBVEFfRVJST1IgPSAtMztcbmNvbnN0IFpfQlVGX0VSUk9SID0gLTU7XG5cbi8vIFRyZWVcblxuZnVuY3Rpb24gZXh0cmFjdEFycmF5KGFycmF5KSB7XG5cdHJldHVybiBmbGF0QXJyYXkoYXJyYXkubWFwKChbbGVuZ3RoLCB2YWx1ZV0pID0+IChuZXcgQXJyYXkobGVuZ3RoKSkuZmlsbCh2YWx1ZSwgMCwgbGVuZ3RoKSkpO1xufVxuXG5mdW5jdGlvbiBmbGF0QXJyYXkoYXJyYXkpIHtcblx0cmV0dXJuIGFycmF5LnJlZHVjZSgoYSwgYikgPT4gYS5jb25jYXQoQXJyYXkuaXNBcnJheShiKSA/IGZsYXRBcnJheShiKSA6IGIpLCBbXSk7XG59XG5cbi8vIHNlZSBkZWZpbml0aW9uIG9mIGFycmF5IGRpc3RfY29kZSBiZWxvd1xuY29uc3QgX2Rpc3RfY29kZSA9IFswLCAxLCAyLCAzXS5jb25jYXQoLi4uZXh0cmFjdEFycmF5KFtcblx0WzIsIDRdLCBbMiwgNV0sIFs0LCA2XSwgWzQsIDddLCBbOCwgOF0sIFs4LCA5XSwgWzE2LCAxMF0sIFsxNiwgMTFdLCBbMzIsIDEyXSwgWzMyLCAxM10sIFs2NCwgMTRdLCBbNjQsIDE1XSwgWzIsIDBdLCBbMSwgMTZdLFxuXHRbMSwgMTddLCBbMiwgMThdLCBbMiwgMTldLCBbNCwgMjBdLCBbNCwgMjFdLCBbOCwgMjJdLCBbOCwgMjNdLCBbMTYsIDI0XSwgWzE2LCAyNV0sIFszMiwgMjZdLCBbMzIsIDI3XSwgWzY0LCAyOF0sIFs2NCwgMjldXG5dKSk7XG5cbmZ1bmN0aW9uIFRyZWUoKSB7XG5cdGNvbnN0IHRoYXQgPSB0aGlzO1xuXG5cdC8vIGR5bl90cmVlOyAvLyB0aGUgZHluYW1pYyB0cmVlXG5cdC8vIG1heF9jb2RlOyAvLyBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3lcblx0Ly8gc3RhdF9kZXNjOyAvLyB0aGUgY29ycmVzcG9uZGluZyBzdGF0aWMgdHJlZVxuXG5cdC8vIENvbXB1dGUgdGhlIG9wdGltYWwgYml0IGxlbmd0aHMgZm9yIGEgdHJlZSBhbmQgdXBkYXRlIHRoZSB0b3RhbCBiaXRcblx0Ly8gbGVuZ3RoXG5cdC8vIGZvciB0aGUgY3VycmVudCBibG9jay5cblx0Ly8gSU4gYXNzZXJ0aW9uOiB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LCBoZWFwW2hlYXBfbWF4XSBhbmRcblx0Ly8gYWJvdmUgYXJlIHRoZSB0cmVlIG5vZGVzIHNvcnRlZCBieSBpbmNyZWFzaW5nIGZyZXF1ZW5jeS5cblx0Ly8gT1VUIGFzc2VydGlvbnM6IHRoZSBmaWVsZCBsZW4gaXMgc2V0IHRvIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGgsIHRoZVxuXHQvLyBhcnJheSBibF9jb3VudCBjb250YWlucyB0aGUgZnJlcXVlbmNpZXMgZm9yIGVhY2ggYml0IGxlbmd0aC5cblx0Ly8gVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXMgYWxzbyB1cGRhdGVkIGlmIHN0cmVlIGlzXG5cdC8vIG5vdCBudWxsLlxuXHRmdW5jdGlvbiBnZW5fYml0bGVuKHMpIHtcblx0XHRjb25zdCB0cmVlID0gdGhhdC5keW5fdHJlZTtcblx0XHRjb25zdCBzdHJlZSA9IHRoYXQuc3RhdF9kZXNjLnN0YXRpY190cmVlO1xuXHRcdGNvbnN0IGV4dHJhID0gdGhhdC5zdGF0X2Rlc2MuZXh0cmFfYml0cztcblx0XHRjb25zdCBiYXNlID0gdGhhdC5zdGF0X2Rlc2MuZXh0cmFfYmFzZTtcblx0XHRjb25zdCBtYXhfbGVuZ3RoID0gdGhhdC5zdGF0X2Rlc2MubWF4X2xlbmd0aDtcblx0XHRsZXQgaDsgLy8gaGVhcCBpbmRleFxuXHRcdGxldCBuLCBtOyAvLyBpdGVyYXRlIG92ZXIgdGhlIHRyZWUgZWxlbWVudHNcblx0XHRsZXQgYml0czsgLy8gYml0IGxlbmd0aFxuXHRcdGxldCB4Yml0czsgLy8gZXh0cmEgYml0c1xuXHRcdGxldCBmOyAvLyBmcmVxdWVuY3lcblx0XHRsZXQgb3ZlcmZsb3cgPSAwOyAvLyBudW1iZXIgb2YgZWxlbWVudHMgd2l0aCBiaXQgbGVuZ3RoIHRvbyBsYXJnZVxuXG5cdFx0Zm9yIChiaXRzID0gMDsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKVxuXHRcdFx0cy5ibF9jb3VudFtiaXRzXSA9IDA7XG5cblx0XHQvLyBJbiBhIGZpcnN0IHBhc3MsIGNvbXB1dGUgdGhlIG9wdGltYWwgYml0IGxlbmd0aHMgKHdoaWNoIG1heVxuXHRcdC8vIG92ZXJmbG93IGluIHRoZSBjYXNlIG9mIHRoZSBiaXQgbGVuZ3RoIHRyZWUpLlxuXHRcdHRyZWVbcy5oZWFwW3MuaGVhcF9tYXhdICogMiArIDFdID0gMDsgLy8gcm9vdCBvZiB0aGUgaGVhcFxuXG5cdFx0Zm9yIChoID0gcy5oZWFwX21heCArIDE7IGggPCBIRUFQX1NJWkU7IGgrKykge1xuXHRcdFx0biA9IHMuaGVhcFtoXTtcblx0XHRcdGJpdHMgPSB0cmVlW3RyZWVbbiAqIDIgKyAxXSAqIDIgKyAxXSArIDE7XG5cdFx0XHRpZiAoYml0cyA+IG1heF9sZW5ndGgpIHtcblx0XHRcdFx0Yml0cyA9IG1heF9sZW5ndGg7XG5cdFx0XHRcdG92ZXJmbG93Kys7XG5cdFx0XHR9XG5cdFx0XHR0cmVlW24gKiAyICsgMV0gPSBiaXRzO1xuXHRcdFx0Ly8gV2Ugb3ZlcndyaXRlIHRyZWVbbioyKzFdIHdoaWNoIGlzIG5vIGxvbmdlciBuZWVkZWRcblxuXHRcdFx0aWYgKG4gPiB0aGF0Lm1heF9jb2RlKVxuXHRcdFx0XHRjb250aW51ZTsgLy8gbm90IGEgbGVhZiBub2RlXG5cblx0XHRcdHMuYmxfY291bnRbYml0c10rKztcblx0XHRcdHhiaXRzID0gMDtcblx0XHRcdGlmIChuID49IGJhc2UpXG5cdFx0XHRcdHhiaXRzID0gZXh0cmFbbiAtIGJhc2VdO1xuXHRcdFx0ZiA9IHRyZWVbbiAqIDJdO1xuXHRcdFx0cy5vcHRfbGVuICs9IGYgKiAoYml0cyArIHhiaXRzKTtcblx0XHRcdGlmIChzdHJlZSlcblx0XHRcdFx0cy5zdGF0aWNfbGVuICs9IGYgKiAoc3RyZWVbbiAqIDIgKyAxXSArIHhiaXRzKTtcblx0XHR9XG5cdFx0aWYgKG92ZXJmbG93ID09PSAwKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIGZvciBleGFtcGxlIG9uIG9iajIgYW5kIHBpYyBvZiB0aGUgQ2FsZ2FyeSBjb3JwdXNcblx0XHQvLyBGaW5kIHRoZSBmaXJzdCBiaXQgbGVuZ3RoIHdoaWNoIGNvdWxkIGluY3JlYXNlOlxuXHRcdGRvIHtcblx0XHRcdGJpdHMgPSBtYXhfbGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChzLmJsX2NvdW50W2JpdHNdID09PSAwKVxuXHRcdFx0XHRiaXRzLS07XG5cdFx0XHRzLmJsX2NvdW50W2JpdHNdLS07IC8vIG1vdmUgb25lIGxlYWYgZG93biB0aGUgdHJlZVxuXHRcdFx0cy5ibF9jb3VudFtiaXRzICsgMV0gKz0gMjsgLy8gbW92ZSBvbmUgb3ZlcmZsb3cgaXRlbSBhcyBpdHMgYnJvdGhlclxuXHRcdFx0cy5ibF9jb3VudFttYXhfbGVuZ3RoXS0tO1xuXHRcdFx0Ly8gVGhlIGJyb3RoZXIgb2YgdGhlIG92ZXJmbG93IGl0ZW0gYWxzbyBtb3ZlcyBvbmUgc3RlcCB1cCxcblx0XHRcdC8vIGJ1dCB0aGlzIGRvZXMgbm90IGFmZmVjdCBibF9jb3VudFttYXhfbGVuZ3RoXVxuXHRcdFx0b3ZlcmZsb3cgLT0gMjtcblx0XHR9IHdoaWxlIChvdmVyZmxvdyA+IDApO1xuXG5cdFx0Zm9yIChiaXRzID0gbWF4X2xlbmd0aDsgYml0cyAhPT0gMDsgYml0cy0tKSB7XG5cdFx0XHRuID0gcy5ibF9jb3VudFtiaXRzXTtcblx0XHRcdHdoaWxlIChuICE9PSAwKSB7XG5cdFx0XHRcdG0gPSBzLmhlYXBbLS1oXTtcblx0XHRcdFx0aWYgKG0gPiB0aGF0Lm1heF9jb2RlKVxuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAodHJlZVttICogMiArIDFdICE9IGJpdHMpIHtcblx0XHRcdFx0XHRzLm9wdF9sZW4gKz0gKGJpdHMgLSB0cmVlW20gKiAyICsgMV0pICogdHJlZVttICogMl07XG5cdFx0XHRcdFx0dHJlZVttICogMiArIDFdID0gYml0cztcblx0XHRcdFx0fVxuXHRcdFx0XHRuLS07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV2ZXJzZSB0aGUgZmlyc3QgbGVuIGJpdHMgb2YgYSBjb2RlLCB1c2luZyBzdHJhaWdodGZvcndhcmQgY29kZSAoYVxuXHQvLyBmYXN0ZXJcblx0Ly8gbWV0aG9kIHdvdWxkIHVzZSBhIHRhYmxlKVxuXHQvLyBJTiBhc3NlcnRpb246IDEgPD0gbGVuIDw9IDE1XG5cdGZ1bmN0aW9uIGJpX3JldmVyc2UoY29kZSwgLy8gdGhlIHZhbHVlIHRvIGludmVydFxuXHRcdGxlbiAvLyBpdHMgYml0IGxlbmd0aFxuXHQpIHtcblx0XHRsZXQgcmVzID0gMDtcblx0XHRkbyB7XG5cdFx0XHRyZXMgfD0gY29kZSAmIDE7XG5cdFx0XHRjb2RlID4+Pj0gMTtcblx0XHRcdHJlcyA8PD0gMTtcblx0XHR9IHdoaWxlICgtLWxlbiA+IDApO1xuXHRcdHJldHVybiByZXMgPj4+IDE7XG5cdH1cblxuXHQvLyBHZW5lcmF0ZSB0aGUgY29kZXMgZm9yIGEgZ2l2ZW4gdHJlZSBhbmQgYml0IGNvdW50cyAod2hpY2ggbmVlZCBub3QgYmVcblx0Ly8gb3B0aW1hbCkuXG5cdC8vIElOIGFzc2VydGlvbjogdGhlIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBiaXQgbGVuZ3RoIHN0YXRpc3RpY3MgZm9yXG5cdC8vIHRoZSBnaXZlbiB0cmVlIGFuZCB0aGUgZmllbGQgbGVuIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuXG5cdC8vIE9VVCBhc3NlcnRpb246IHRoZSBmaWVsZCBjb2RlIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMgb2Ygbm9uXG5cdC8vIHplcm8gY29kZSBsZW5ndGguXG5cdGZ1bmN0aW9uIGdlbl9jb2Rlcyh0cmVlLCAvLyB0aGUgdHJlZSB0byBkZWNvcmF0ZVxuXHRcdG1heF9jb2RlLCAvLyBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3lcblx0XHRibF9jb3VudCAvLyBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoXG5cdCkge1xuXHRcdGNvbnN0IG5leHRfY29kZSA9IFtdOyAvLyBuZXh0IGNvZGUgdmFsdWUgZm9yIGVhY2hcblx0XHQvLyBiaXQgbGVuZ3RoXG5cdFx0bGV0IGNvZGUgPSAwOyAvLyBydW5uaW5nIGNvZGUgdmFsdWVcblx0XHRsZXQgYml0czsgLy8gYml0IGluZGV4XG5cdFx0bGV0IG47IC8vIGNvZGUgaW5kZXhcblx0XHRsZXQgbGVuO1xuXG5cdFx0Ly8gVGhlIGRpc3RyaWJ1dGlvbiBjb3VudHMgYXJlIGZpcnN0IHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGNvZGUgdmFsdWVzXG5cdFx0Ly8gd2l0aG91dCBiaXQgcmV2ZXJzYWwuXG5cdFx0Zm9yIChiaXRzID0gMTsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XG5cdFx0XHRuZXh0X2NvZGVbYml0c10gPSBjb2RlID0gKChjb2RlICsgYmxfY291bnRbYml0cyAtIDFdKSA8PCAxKTtcblx0XHR9XG5cblx0XHQvLyBDaGVjayB0aGF0IHRoZSBiaXQgY291bnRzIGluIGJsX2NvdW50IGFyZSBjb25zaXN0ZW50LiBUaGUgbGFzdCBjb2RlXG5cdFx0Ly8gbXVzdCBiZSBhbGwgb25lcy5cblx0XHQvLyBBc3NlcnQgKGNvZGUgKyBibF9jb3VudFtNQVhfQklUU10tMSA9PSAoMTw8TUFYX0JJVFMpLTEsXG5cdFx0Ly8gXCJpbmNvbnNpc3RlbnQgYml0IGNvdW50c1wiKTtcblx0XHQvLyBUcmFjZXYoKHN0ZGVycixcImdlbl9jb2RlczogbWF4X2NvZGUgJWQgXCIsIG1heF9jb2RlKSk7XG5cblx0XHRmb3IgKG4gPSAwOyBuIDw9IG1heF9jb2RlOyBuKyspIHtcblx0XHRcdGxlbiA9IHRyZWVbbiAqIDIgKyAxXTtcblx0XHRcdGlmIChsZW4gPT09IDApXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0Ly8gTm93IHJldmVyc2UgdGhlIGJpdHNcblx0XHRcdHRyZWVbbiAqIDJdID0gYmlfcmV2ZXJzZShuZXh0X2NvZGVbbGVuXSsrLCBsZW4pO1xuXHRcdH1cblx0fVxuXG5cdC8vIENvbnN0cnVjdCBvbmUgSHVmZm1hbiB0cmVlIGFuZCBhc3NpZ25zIHRoZSBjb2RlIGJpdCBzdHJpbmdzIGFuZCBsZW5ndGhzLlxuXHQvLyBVcGRhdGUgdGhlIHRvdGFsIGJpdCBsZW5ndGggZm9yIHRoZSBjdXJyZW50IGJsb2NrLlxuXHQvLyBJTiBhc3NlcnRpb246IHRoZSBmaWVsZCBmcmVxIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuXG5cdC8vIE9VVCBhc3NlcnRpb25zOiB0aGUgZmllbGRzIGxlbiBhbmQgY29kZSBhcmUgc2V0IHRvIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhcblx0Ly8gYW5kIGNvcnJlc3BvbmRpbmcgY29kZS4gVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXNcblx0Ly8gYWxzbyB1cGRhdGVkIGlmIHN0cmVlIGlzIG5vdCBudWxsLiBUaGUgZmllbGQgbWF4X2NvZGUgaXMgc2V0LlxuXHR0aGF0LmJ1aWxkX3RyZWUgPSBmdW5jdGlvbiAocykge1xuXHRcdGNvbnN0IHRyZWUgPSB0aGF0LmR5bl90cmVlO1xuXHRcdGNvbnN0IHN0cmVlID0gdGhhdC5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XG5cdFx0Y29uc3QgZWxlbXMgPSB0aGF0LnN0YXRfZGVzYy5lbGVtcztcblx0XHRsZXQgbiwgbTsgLy8gaXRlcmF0ZSBvdmVyIGhlYXAgZWxlbWVudHNcblx0XHRsZXQgbWF4X2NvZGUgPSAtMTsgLy8gbGFyZ2VzdCBjb2RlIHdpdGggbm9uIHplcm8gZnJlcXVlbmN5XG5cdFx0bGV0IG5vZGU7IC8vIG5ldyBub2RlIGJlaW5nIGNyZWF0ZWRcblxuXHRcdC8vIENvbnN0cnVjdCB0aGUgaW5pdGlhbCBoZWFwLCB3aXRoIGxlYXN0IGZyZXF1ZW50IGVsZW1lbnQgaW5cblx0XHQvLyBoZWFwWzFdLiBUaGUgc29ucyBvZiBoZWFwW25dIGFyZSBoZWFwWzIqbl0gYW5kIGhlYXBbMipuKzFdLlxuXHRcdC8vIGhlYXBbMF0gaXMgbm90IHVzZWQuXG5cdFx0cy5oZWFwX2xlbiA9IDA7XG5cdFx0cy5oZWFwX21heCA9IEhFQVBfU0laRTtcblxuXHRcdGZvciAobiA9IDA7IG4gPCBlbGVtczsgbisrKSB7XG5cdFx0XHRpZiAodHJlZVtuICogMl0gIT09IDApIHtcblx0XHRcdFx0cy5oZWFwWysrcy5oZWFwX2xlbl0gPSBtYXhfY29kZSA9IG47XG5cdFx0XHRcdHMuZGVwdGhbbl0gPSAwO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHJlZVtuICogMiArIDFdID0gMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBUaGUgcGt6aXAgZm9ybWF0IHJlcXVpcmVzIHRoYXQgYXQgbGVhc3Qgb25lIGRpc3RhbmNlIGNvZGUgZXhpc3RzLFxuXHRcdC8vIGFuZCB0aGF0IGF0IGxlYXN0IG9uZSBiaXQgc2hvdWxkIGJlIHNlbnQgZXZlbiBpZiB0aGVyZSBpcyBvbmx5IG9uZVxuXHRcdC8vIHBvc3NpYmxlIGNvZGUuIFNvIHRvIGF2b2lkIHNwZWNpYWwgY2hlY2tzIGxhdGVyIG9uIHdlIGZvcmNlIGF0IGxlYXN0XG5cdFx0Ly8gdHdvIGNvZGVzIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeS5cblx0XHR3aGlsZSAocy5oZWFwX2xlbiA8IDIpIHtcblx0XHRcdG5vZGUgPSBzLmhlYXBbKytzLmhlYXBfbGVuXSA9IG1heF9jb2RlIDwgMiA/ICsrbWF4X2NvZGUgOiAwO1xuXHRcdFx0dHJlZVtub2RlICogMl0gPSAxO1xuXHRcdFx0cy5kZXB0aFtub2RlXSA9IDA7XG5cdFx0XHRzLm9wdF9sZW4tLTtcblx0XHRcdGlmIChzdHJlZSlcblx0XHRcdFx0cy5zdGF0aWNfbGVuIC09IHN0cmVlW25vZGUgKiAyICsgMV07XG5cdFx0XHQvLyBub2RlIGlzIDAgb3IgMSBzbyBpdCBkb2VzIG5vdCBoYXZlIGV4dHJhIGJpdHNcblx0XHR9XG5cdFx0dGhhdC5tYXhfY29kZSA9IG1heF9jb2RlO1xuXG5cdFx0Ly8gVGhlIGVsZW1lbnRzIGhlYXBbaGVhcF9sZW4vMisxIC4uIGhlYXBfbGVuXSBhcmUgbGVhdmVzIG9mIHRoZSB0cmVlLFxuXHRcdC8vIGVzdGFibGlzaCBzdWItaGVhcHMgb2YgaW5jcmVhc2luZyBsZW5ndGhzOlxuXG5cdFx0Zm9yIChuID0gTWF0aC5mbG9vcihzLmhlYXBfbGVuIC8gMik7IG4gPj0gMTsgbi0tKVxuXHRcdFx0cy5wcWRvd25oZWFwKHRyZWUsIG4pO1xuXG5cdFx0Ly8gQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgYnkgcmVwZWF0ZWRseSBjb21iaW5pbmcgdGhlIGxlYXN0IHR3b1xuXHRcdC8vIGZyZXF1ZW50IG5vZGVzLlxuXG5cdFx0bm9kZSA9IGVsZW1zOyAvLyBuZXh0IGludGVybmFsIG5vZGUgb2YgdGhlIHRyZWVcblx0XHRkbyB7XG5cdFx0XHQvLyBuID0gbm9kZSBvZiBsZWFzdCBmcmVxdWVuY3lcblx0XHRcdG4gPSBzLmhlYXBbMV07XG5cdFx0XHRzLmhlYXBbMV0gPSBzLmhlYXBbcy5oZWFwX2xlbi0tXTtcblx0XHRcdHMucHFkb3duaGVhcCh0cmVlLCAxKTtcblx0XHRcdG0gPSBzLmhlYXBbMV07IC8vIG0gPSBub2RlIG9mIG5leHQgbGVhc3QgZnJlcXVlbmN5XG5cblx0XHRcdHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbjsgLy8ga2VlcCB0aGUgbm9kZXMgc29ydGVkIGJ5IGZyZXF1ZW5jeVxuXHRcdFx0cy5oZWFwWy0tcy5oZWFwX21heF0gPSBtO1xuXG5cdFx0XHQvLyBDcmVhdGUgYSBuZXcgbm9kZSBmYXRoZXIgb2YgbiBhbmQgbVxuXHRcdFx0dHJlZVtub2RlICogMl0gPSAodHJlZVtuICogMl0gKyB0cmVlW20gKiAyXSk7XG5cdFx0XHRzLmRlcHRoW25vZGVdID0gTWF0aC5tYXgocy5kZXB0aFtuXSwgcy5kZXB0aFttXSkgKyAxO1xuXHRcdFx0dHJlZVtuICogMiArIDFdID0gdHJlZVttICogMiArIDFdID0gbm9kZTtcblxuXHRcdFx0Ly8gYW5kIGluc2VydCB0aGUgbmV3IG5vZGUgaW4gdGhlIGhlYXBcblx0XHRcdHMuaGVhcFsxXSA9IG5vZGUrKztcblx0XHRcdHMucHFkb3duaGVhcCh0cmVlLCAxKTtcblx0XHR9IHdoaWxlIChzLmhlYXBfbGVuID49IDIpO1xuXG5cdFx0cy5oZWFwWy0tcy5oZWFwX21heF0gPSBzLmhlYXBbMV07XG5cblx0XHQvLyBBdCB0aGlzIHBvaW50LCB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LiBXZSBjYW4gbm93XG5cdFx0Ly8gZ2VuZXJhdGUgdGhlIGJpdCBsZW5ndGhzLlxuXG5cdFx0Z2VuX2JpdGxlbihzKTtcblxuXHRcdC8vIFRoZSBmaWVsZCBsZW4gaXMgbm93IHNldCwgd2UgY2FuIGdlbmVyYXRlIHRoZSBiaXQgY29kZXNcblx0XHRnZW5fY29kZXModHJlZSwgdGhhdC5tYXhfY29kZSwgcy5ibF9jb3VudCk7XG5cdH07XG5cbn1cblxuVHJlZS5fbGVuZ3RoX2NvZGUgPSBbMCwgMSwgMiwgMywgNCwgNSwgNiwgN10uY29uY2F0KC4uLmV4dHJhY3RBcnJheShbXG5cdFsyLCA4XSwgWzIsIDldLCBbMiwgMTBdLCBbMiwgMTFdLCBbNCwgMTJdLCBbNCwgMTNdLCBbNCwgMTRdLCBbNCwgMTVdLCBbOCwgMTZdLCBbOCwgMTddLCBbOCwgMThdLCBbOCwgMTldLFxuXHRbMTYsIDIwXSwgWzE2LCAyMV0sIFsxNiwgMjJdLCBbMTYsIDIzXSwgWzMyLCAyNF0sIFszMiwgMjVdLCBbMzIsIDI2XSwgWzMxLCAyN10sIFsxLCAyOF1dKSk7XG5cblRyZWUuYmFzZV9sZW5ndGggPSBbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgMTAsIDEyLCAxNCwgMTYsIDIwLCAyNCwgMjgsIDMyLCA0MCwgNDgsIDU2LCA2NCwgODAsIDk2LCAxMTIsIDEyOCwgMTYwLCAxOTIsIDIyNCwgMF07XG5cblRyZWUuYmFzZV9kaXN0ID0gWzAsIDEsIDIsIDMsIDQsIDYsIDgsIDEyLCAxNiwgMjQsIDMyLCA0OCwgNjQsIDk2LCAxMjgsIDE5MiwgMjU2LCAzODQsIDUxMiwgNzY4LCAxMDI0LCAxNTM2LCAyMDQ4LCAzMDcyLCA0MDk2LCA2MTQ0LCA4MTkyLCAxMjI4OCwgMTYzODQsXG5cdDI0NTc2XTtcblxuLy8gTWFwcGluZyBmcm9tIGEgZGlzdGFuY2UgdG8gYSBkaXN0YW5jZSBjb2RlLiBkaXN0IGlzIHRoZSBkaXN0YW5jZSAtIDEgYW5kXG4vLyBtdXN0IG5vdCBoYXZlIHNpZGUgZWZmZWN0cy4gX2Rpc3RfY29kZVsyNTZdIGFuZCBfZGlzdF9jb2RlWzI1N10gYXJlIG5ldmVyXG4vLyB1c2VkLlxuVHJlZS5kX2NvZGUgPSBmdW5jdGlvbiAoZGlzdCkge1xuXHRyZXR1cm4gKChkaXN0KSA8IDI1NiA/IF9kaXN0X2NvZGVbZGlzdF0gOiBfZGlzdF9jb2RlWzI1NiArICgoZGlzdCkgPj4+IDcpXSk7XG59O1xuXG4vLyBleHRyYSBiaXRzIGZvciBlYWNoIGxlbmd0aCBjb2RlXG5UcmVlLmV4dHJhX2xiaXRzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDEsIDEsIDEsIDEsIDIsIDIsIDIsIDIsIDMsIDMsIDMsIDMsIDQsIDQsIDQsIDQsIDUsIDUsIDUsIDUsIDBdO1xuXG4vLyBleHRyYSBiaXRzIGZvciBlYWNoIGRpc3RhbmNlIGNvZGVcblRyZWUuZXh0cmFfZGJpdHMgPSBbMCwgMCwgMCwgMCwgMSwgMSwgMiwgMiwgMywgMywgNCwgNCwgNSwgNSwgNiwgNiwgNywgNywgOCwgOCwgOSwgOSwgMTAsIDEwLCAxMSwgMTEsIDEyLCAxMiwgMTMsIDEzXTtcblxuLy8gZXh0cmEgYml0cyBmb3IgZWFjaCBiaXQgbGVuZ3RoIGNvZGVcblRyZWUuZXh0cmFfYmxiaXRzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDIsIDMsIDddO1xuXG5UcmVlLmJsX29yZGVyID0gWzE2LCAxNywgMTgsIDAsIDgsIDcsIDksIDYsIDEwLCA1LCAxMSwgNCwgMTIsIDMsIDEzLCAyLCAxNCwgMSwgMTVdO1xuXG4vLyBTdGF0aWNUcmVlXG5cbmZ1bmN0aW9uIFN0YXRpY1RyZWUoc3RhdGljX3RyZWUsIGV4dHJhX2JpdHMsIGV4dHJhX2Jhc2UsIGVsZW1zLCBtYXhfbGVuZ3RoKSB7XG5cdGNvbnN0IHRoYXQgPSB0aGlzO1xuXHR0aGF0LnN0YXRpY190cmVlID0gc3RhdGljX3RyZWU7XG5cdHRoYXQuZXh0cmFfYml0cyA9IGV4dHJhX2JpdHM7XG5cdHRoYXQuZXh0cmFfYmFzZSA9IGV4dHJhX2Jhc2U7XG5cdHRoYXQuZWxlbXMgPSBlbGVtcztcblx0dGhhdC5tYXhfbGVuZ3RoID0gbWF4X2xlbmd0aDtcbn1cblxuY29uc3Qgc3RhdGljX2x0cmVlMl9maXJzdF9wYXJ0ID0gWzEyLCAxNDAsIDc2LCAyMDQsIDQ0LCAxNzIsIDEwOCwgMjM2LCAyOCwgMTU2LCA5MiwgMjIwLCA2MCwgMTg4LCAxMjQsIDI1MiwgMiwgMTMwLCA2NiwgMTk0LCAzNCwgMTYyLCA5OCwgMjI2LCAxOCwgMTQ2LCA4Mixcblx0MjEwLCA1MCwgMTc4LCAxMTQsIDI0MiwgMTAsIDEzOCwgNzQsIDIwMiwgNDIsIDE3MCwgMTA2LCAyMzQsIDI2LCAxNTQsIDkwLCAyMTgsIDU4LCAxODYsIDEyMiwgMjUwLCA2LCAxMzQsIDcwLCAxOTgsIDM4LCAxNjYsIDEwMiwgMjMwLCAyMiwgMTUwLCA4Nixcblx0MjE0LCA1NCwgMTgyLCAxMTgsIDI0NiwgMTQsIDE0MiwgNzgsIDIwNiwgNDYsIDE3NCwgMTEwLCAyMzgsIDMwLCAxNTgsIDk0LCAyMjIsIDYyLCAxOTAsIDEyNiwgMjU0LCAxLCAxMjksIDY1LCAxOTMsIDMzLCAxNjEsIDk3LCAyMjUsIDE3LCAxNDUsIDgxLFxuXHQyMDksIDQ5LCAxNzcsIDExMywgMjQxLCA5LCAxMzcsIDczLCAyMDEsIDQxLCAxNjksIDEwNSwgMjMzLCAyNSwgMTUzLCA4OSwgMjE3LCA1NywgMTg1LCAxMjEsIDI0OSwgNSwgMTMzLCA2OSwgMTk3LCAzNywgMTY1LCAxMDEsIDIyOSwgMjEsIDE0OSwgODUsXG5cdDIxMywgNTMsIDE4MSwgMTE3LCAyNDUsIDEzLCAxNDEsIDc3LCAyMDUsIDQ1LCAxNzMsIDEwOSwgMjM3LCAyOSwgMTU3LCA5MywgMjIxLCA2MSwgMTg5LCAxMjUsIDI1MywgMTksIDI3NSwgMTQ3LCA0MDMsIDgzLCAzMzksIDIxMSwgNDY3LCA1MSwgMzA3LFxuXHQxNzksIDQzNSwgMTE1LCAzNzEsIDI0MywgNDk5LCAxMSwgMjY3LCAxMzksIDM5NSwgNzUsIDMzMSwgMjAzLCA0NTksIDQzLCAyOTksIDE3MSwgNDI3LCAxMDcsIDM2MywgMjM1LCA0OTEsIDI3LCAyODMsIDE1NSwgNDExLCA5MSwgMzQ3LCAyMTksIDQ3NSxcblx0NTksIDMxNSwgMTg3LCA0NDMsIDEyMywgMzc5LCAyNTEsIDUwNywgNywgMjYzLCAxMzUsIDM5MSwgNzEsIDMyNywgMTk5LCA0NTUsIDM5LCAyOTUsIDE2NywgNDIzLCAxMDMsIDM1OSwgMjMxLCA0ODcsIDIzLCAyNzksIDE1MSwgNDA3LCA4NywgMzQzLCAyMTUsXG5cdDQ3MSwgNTUsIDMxMSwgMTgzLCA0MzksIDExOSwgMzc1LCAyNDcsIDUwMywgMTUsIDI3MSwgMTQzLCAzOTksIDc5LCAzMzUsIDIwNywgNDYzLCA0NywgMzAzLCAxNzUsIDQzMSwgMTExLCAzNjcsIDIzOSwgNDk1LCAzMSwgMjg3LCAxNTksIDQxNSwgOTUsXG5cdDM1MSwgMjIzLCA0NzksIDYzLCAzMTksIDE5MSwgNDQ3LCAxMjcsIDM4MywgMjU1LCA1MTEsIDAsIDY0LCAzMiwgOTYsIDE2LCA4MCwgNDgsIDExMiwgOCwgNzIsIDQwLCAxMDQsIDI0LCA4OCwgNTYsIDEyMCwgNCwgNjgsIDM2LCAxMDAsIDIwLCA4NCwgNTIsXG5cdDExNiwgMywgMTMxLCA2NywgMTk1LCAzNSwgMTYzLCA5OSwgMjI3XTtcbmNvbnN0IHN0YXRpY19sdHJlZTJfc2Vjb25kX3BhcnQgPSBleHRyYWN0QXJyYXkoW1sxNDQsIDhdLCBbMTEyLCA5XSwgWzI0LCA3XSwgWzgsIDhdXSk7XG5TdGF0aWNUcmVlLnN0YXRpY19sdHJlZSA9IGZsYXRBcnJheShzdGF0aWNfbHRyZWUyX2ZpcnN0X3BhcnQubWFwKCh2YWx1ZSwgaW5kZXgpID0+IFt2YWx1ZSwgc3RhdGljX2x0cmVlMl9zZWNvbmRfcGFydFtpbmRleF1dKSk7XG5cbmNvbnN0IHN0YXRpY19kdHJlZV9maXJzdF9wYXJ0ID0gWzAsIDE2LCA4LCAyNCwgNCwgMjAsIDEyLCAyOCwgMiwgMTgsIDEwLCAyNiwgNiwgMjIsIDE0LCAzMCwgMSwgMTcsIDksIDI1LCA1LCAyMSwgMTMsIDI5LCAzLCAxOSwgMTEsIDI3LCA3LCAyM107XG5jb25zdCBzdGF0aWNfZHRyZWVfc2Vjb25kX3BhcnQgPSBleHRyYWN0QXJyYXkoW1szMCwgNV1dKTtcblN0YXRpY1RyZWUuc3RhdGljX2R0cmVlID0gZmxhdEFycmF5KHN0YXRpY19kdHJlZV9maXJzdF9wYXJ0Lm1hcCgodmFsdWUsIGluZGV4KSA9PiBbdmFsdWUsIHN0YXRpY19kdHJlZV9zZWNvbmRfcGFydFtpbmRleF1dKSk7XG5cblN0YXRpY1RyZWUuc3RhdGljX2xfZGVzYyA9IG5ldyBTdGF0aWNUcmVlKFN0YXRpY1RyZWUuc3RhdGljX2x0cmVlLCBUcmVlLmV4dHJhX2xiaXRzLCBMSVRFUkFMUyArIDEsIExfQ09ERVMsIE1BWF9CSVRTKTtcblxuU3RhdGljVHJlZS5zdGF0aWNfZF9kZXNjID0gbmV3IFN0YXRpY1RyZWUoU3RhdGljVHJlZS5zdGF0aWNfZHRyZWUsIFRyZWUuZXh0cmFfZGJpdHMsIDAsIERfQ09ERVMsIE1BWF9CSVRTKTtcblxuU3RhdGljVHJlZS5zdGF0aWNfYmxfZGVzYyA9IG5ldyBTdGF0aWNUcmVlKG51bGwsIFRyZWUuZXh0cmFfYmxiaXRzLCAwLCBCTF9DT0RFUywgTUFYX0JMX0JJVFMpO1xuXG4vLyBEZWZsYXRlXG5cbmNvbnN0IE1BWF9NRU1fTEVWRUwgPSA5O1xuY29uc3QgREVGX01FTV9MRVZFTCA9IDg7XG5cbmZ1bmN0aW9uIENvbmZpZyhnb29kX2xlbmd0aCwgbWF4X2xhenksIG5pY2VfbGVuZ3RoLCBtYXhfY2hhaW4sIGZ1bmMpIHtcblx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdHRoYXQuZ29vZF9sZW5ndGggPSBnb29kX2xlbmd0aDtcblx0dGhhdC5tYXhfbGF6eSA9IG1heF9sYXp5O1xuXHR0aGF0Lm5pY2VfbGVuZ3RoID0gbmljZV9sZW5ndGg7XG5cdHRoYXQubWF4X2NoYWluID0gbWF4X2NoYWluO1xuXHR0aGF0LmZ1bmMgPSBmdW5jO1xufVxuXG5jb25zdCBTVE9SRUQgPSAwO1xuY29uc3QgRkFTVCA9IDE7XG5jb25zdCBTTE9XID0gMjtcbmNvbnN0IGNvbmZpZ190YWJsZSA9IFtcblx0bmV3IENvbmZpZygwLCAwLCAwLCAwLCBTVE9SRUQpLFxuXHRuZXcgQ29uZmlnKDQsIDQsIDgsIDQsIEZBU1QpLFxuXHRuZXcgQ29uZmlnKDQsIDUsIDE2LCA4LCBGQVNUKSxcblx0bmV3IENvbmZpZyg0LCA2LCAzMiwgMzIsIEZBU1QpLFxuXHRuZXcgQ29uZmlnKDQsIDQsIDE2LCAxNiwgU0xPVyksXG5cdG5ldyBDb25maWcoOCwgMTYsIDMyLCAzMiwgU0xPVyksXG5cdG5ldyBDb25maWcoOCwgMTYsIDEyOCwgMTI4LCBTTE9XKSxcblx0bmV3IENvbmZpZyg4LCAzMiwgMTI4LCAyNTYsIFNMT1cpLFxuXHRuZXcgQ29uZmlnKDMyLCAxMjgsIDI1OCwgMTAyNCwgU0xPVyksXG5cdG5ldyBDb25maWcoMzIsIDI1OCwgMjU4LCA0MDk2LCBTTE9XKVxuXTtcblxuY29uc3Qgel9lcnJtc2cgPSBbXCJuZWVkIGRpY3Rpb25hcnlcIiwgLy8gWl9ORUVEX0RJQ1Rcblx0Ly8gMlxuXHRcInN0cmVhbSBlbmRcIiwgLy8gWl9TVFJFQU1fRU5EIDFcblx0XCJcIiwgLy8gWl9PSyAwXG5cdFwiXCIsIC8vIFpfRVJSTk8gKC0xKVxuXHRcInN0cmVhbSBlcnJvclwiLCAvLyBaX1NUUkVBTV9FUlJPUiAoLTIpXG5cdFwiZGF0YSBlcnJvclwiLCAvLyBaX0RBVEFfRVJST1IgKC0zKVxuXHRcIlwiLCAvLyBaX01FTV9FUlJPUiAoLTQpXG5cdFwiYnVmZmVyIGVycm9yXCIsIC8vIFpfQlVGX0VSUk9SICgtNSlcblx0XCJcIiwvLyBaX1ZFUlNJT05fRVJST1IgKC02KVxuXHRcIlwiXTtcblxuLy8gYmxvY2sgbm90IGNvbXBsZXRlZCwgbmVlZCBtb3JlIGlucHV0IG9yIG1vcmUgb3V0cHV0XG5jb25zdCBOZWVkTW9yZSA9IDA7XG5cbi8vIGJsb2NrIGZsdXNoIHBlcmZvcm1lZFxuY29uc3QgQmxvY2tEb25lID0gMTtcblxuLy8gZmluaXNoIHN0YXJ0ZWQsIG5lZWQgb25seSBtb3JlIG91dHB1dCBhdCBuZXh0IGRlZmxhdGVcbmNvbnN0IEZpbmlzaFN0YXJ0ZWQgPSAyO1xuXG4vLyBmaW5pc2ggZG9uZSwgYWNjZXB0IG5vIG1vcmUgaW5wdXQgb3Igb3V0cHV0XG5jb25zdCBGaW5pc2hEb25lID0gMztcblxuLy8gcHJlc2V0IGRpY3Rpb25hcnkgZmxhZyBpbiB6bGliIGhlYWRlclxuY29uc3QgUFJFU0VUX0RJQ1QgPSAweDIwO1xuXG5jb25zdCBJTklUX1NUQVRFID0gNDI7XG5jb25zdCBCVVNZX1NUQVRFID0gMTEzO1xuY29uc3QgRklOSVNIX1NUQVRFID0gNjY2O1xuXG4vLyBUaGUgZGVmbGF0ZSBjb21wcmVzc2lvbiBtZXRob2RcbmNvbnN0IFpfREVGTEFURUQgPSA4O1xuXG5jb25zdCBTVE9SRURfQkxPQ0sgPSAwO1xuY29uc3QgU1RBVElDX1RSRUVTID0gMTtcbmNvbnN0IERZTl9UUkVFUyA9IDI7XG5cbmNvbnN0IE1JTl9NQVRDSCA9IDM7XG5jb25zdCBNQVhfTUFUQ0ggPSAyNTg7XG5jb25zdCBNSU5fTE9PS0FIRUFEID0gKE1BWF9NQVRDSCArIE1JTl9NQVRDSCArIDEpO1xuXG5mdW5jdGlvbiBzbWFsbGVyKHRyZWUsIG4sIG0sIGRlcHRoKSB7XG5cdGNvbnN0IHRuMiA9IHRyZWVbbiAqIDJdO1xuXHRjb25zdCB0bTIgPSB0cmVlW20gKiAyXTtcblx0cmV0dXJuICh0bjIgPCB0bTIgfHwgKHRuMiA9PSB0bTIgJiYgZGVwdGhbbl0gPD0gZGVwdGhbbV0pKTtcbn1cblxuZnVuY3Rpb24gRGVmbGF0ZSgpIHtcblxuXHRjb25zdCB0aGF0ID0gdGhpcztcblx0bGV0IHN0cm07IC8vIHBvaW50ZXIgYmFjayB0byB0aGlzIHpsaWIgc3RyZWFtXG5cdGxldCBzdGF0dXM7IC8vIGFzIHRoZSBuYW1lIGltcGxpZXNcblx0Ly8gcGVuZGluZ19idWY7IC8vIG91dHB1dCBzdGlsbCBwZW5kaW5nXG5cdGxldCBwZW5kaW5nX2J1Zl9zaXplOyAvLyBzaXplIG9mIHBlbmRpbmdfYnVmXG5cdC8vIHBlbmRpbmdfb3V0OyAvLyBuZXh0IHBlbmRpbmcgYnl0ZSB0byBvdXRwdXQgdG8gdGhlIHN0cmVhbVxuXHQvLyBwZW5kaW5nOyAvLyBuYiBvZiBieXRlcyBpbiB0aGUgcGVuZGluZyBidWZmZXJcblxuXHQvLyBkaXN0X2J1ZjsgLy8gYnVmZmVyIGZvciBkaXN0YW5jZXNcblx0Ly8gbGNfYnVmOyAvLyBidWZmZXIgZm9yIGxpdGVyYWxzIG9yIGxlbmd0aHNcblx0Ly8gVG8gc2ltcGxpZnkgdGhlIGNvZGUsIGRpc3RfYnVmIGFuZCBsY19idWYgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2YgZWxlbWVudHMuXG5cdC8vIFRvIHVzZSBkaWZmZXJlbnQgbGVuZ3RocywgYW4gZXh0cmEgZmxhZyBhcnJheSB3b3VsZCBiZSBuZWNlc3NhcnkuXG5cblx0bGV0IGxhc3RfZmx1c2g7IC8vIHZhbHVlIG9mIGZsdXNoIHBhcmFtIGZvciBwcmV2aW91cyBkZWZsYXRlIGNhbGxcblxuXHRsZXQgd19zaXplOyAvLyBMWjc3IHdpbiBzaXplICgzMksgYnkgZGVmYXVsdClcblx0bGV0IHdfYml0czsgLy8gbG9nMih3X3NpemUpICg4Li4xNilcblx0bGV0IHdfbWFzazsgLy8gd19zaXplIC0gMVxuXG5cdGxldCB3aW47XG5cdC8vIFNsaWRpbmcgd2luLiBJbnB1dCBieXRlcyBhcmUgcmVhZCBpbnRvIHRoZSBzZWNvbmQgaGFsZiBvZiB0aGUgd2luLFxuXHQvLyBhbmQgbW92ZSB0byB0aGUgZmlyc3QgaGFsZiBsYXRlciB0byBrZWVwIGEgZGljdGlvbmFyeSBvZiBhdCBsZWFzdCB3U2l6ZVxuXHQvLyBieXRlcy4gV2l0aCB0aGlzIG9yZ2FuaXphdGlvbiwgbWF0Y2hlcyBhcmUgbGltaXRlZCB0byBhIGRpc3RhbmNlIG9mXG5cdC8vIHdTaXplLU1BWF9NQVRDSCBieXRlcywgYnV0IHRoaXMgZW5zdXJlcyB0aGF0IElPIGlzIGFsd2F5c1xuXHQvLyBwZXJmb3JtZWQgd2l0aCBhIGxlbmd0aCBtdWx0aXBsZSBvZiB0aGUgYmxvY2sgc2l6ZS4gQWxzbywgaXQgbGltaXRzXG5cdC8vIHRoZSB3aW4gc2l6ZSB0byA2NEssIHdoaWNoIGlzIHF1aXRlIHVzZWZ1bCBvbiBNU0RPUy5cblx0Ly8gVG8gZG86IHVzZSB0aGUgdXNlciBpbnB1dCBidWZmZXIgYXMgc2xpZGluZyB3aW4uXG5cblx0bGV0IHdpbmRvd19zaXplO1xuXHQvLyBBY3R1YWwgc2l6ZSBvZiB3aW46IDIqd1NpemUsIGV4Y2VwdCB3aGVuIHRoZSB1c2VyIGlucHV0IGJ1ZmZlclxuXHQvLyBpcyBkaXJlY3RseSB1c2VkIGFzIHNsaWRpbmcgd2luLlxuXG5cdGxldCBwcmV2O1xuXHQvLyBMaW5rIHRvIG9sZGVyIHN0cmluZyB3aXRoIHNhbWUgaGFzaCBpbmRleC4gVG8gbGltaXQgdGhlIHNpemUgb2YgdGhpc1xuXHQvLyBhcnJheSB0byA2NEssIHRoaXMgbGluayBpcyBtYWludGFpbmVkIG9ubHkgZm9yIHRoZSBsYXN0IDMySyBzdHJpbmdzLlxuXHQvLyBBbiBpbmRleCBpbiB0aGlzIGFycmF5IGlzIHRodXMgYSB3aW4gaW5kZXggbW9kdWxvIDMySy5cblxuXHRsZXQgaGVhZDsgLy8gSGVhZHMgb2YgdGhlIGhhc2ggY2hhaW5zIG9yIE5JTC5cblxuXHRsZXQgaW5zX2g7IC8vIGhhc2ggaW5kZXggb2Ygc3RyaW5nIHRvIGJlIGluc2VydGVkXG5cdGxldCBoYXNoX3NpemU7IC8vIG51bWJlciBvZiBlbGVtZW50cyBpbiBoYXNoIHRhYmxlXG5cdGxldCBoYXNoX2JpdHM7IC8vIGxvZzIoaGFzaF9zaXplKVxuXHRsZXQgaGFzaF9tYXNrOyAvLyBoYXNoX3NpemUtMVxuXG5cdC8vIE51bWJlciBvZiBiaXRzIGJ5IHdoaWNoIGluc19oIG11c3QgYmUgc2hpZnRlZCBhdCBlYWNoIGlucHV0XG5cdC8vIHN0ZXAuIEl0IG11c3QgYmUgc3VjaCB0aGF0IGFmdGVyIE1JTl9NQVRDSCBzdGVwcywgdGhlIG9sZGVzdFxuXHQvLyBieXRlIG5vIGxvbmdlciB0YWtlcyBwYXJ0IGluIHRoZSBoYXNoIGtleSwgdGhhdCBpczpcblx0Ly8gaGFzaF9zaGlmdCAqIE1JTl9NQVRDSCA+PSBoYXNoX2JpdHNcblx0bGV0IGhhc2hfc2hpZnQ7XG5cblx0Ly8gV2luZG93IHBvc2l0aW9uIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGN1cnJlbnQgb3V0cHV0IGJsb2NrLiBHZXRzXG5cdC8vIG5lZ2F0aXZlIHdoZW4gdGhlIHdpbiBpcyBtb3ZlZCBiYWNrd2FyZHMuXG5cblx0bGV0IGJsb2NrX3N0YXJ0O1xuXG5cdGxldCBtYXRjaF9sZW5ndGg7IC8vIGxlbmd0aCBvZiBiZXN0IG1hdGNoXG5cdGxldCBwcmV2X21hdGNoOyAvLyBwcmV2aW91cyBtYXRjaFxuXHRsZXQgbWF0Y2hfYXZhaWxhYmxlOyAvLyBzZXQgaWYgcHJldmlvdXMgbWF0Y2ggZXhpc3RzXG5cdGxldCBzdHJzdGFydDsgLy8gc3RhcnQgb2Ygc3RyaW5nIHRvIGluc2VydFxuXHRsZXQgbWF0Y2hfc3RhcnQ7IC8vIHN0YXJ0IG9mIG1hdGNoaW5nIHN0cmluZ1xuXHRsZXQgbG9va2FoZWFkOyAvLyBudW1iZXIgb2YgdmFsaWQgYnl0ZXMgYWhlYWQgaW4gd2luXG5cblx0Ly8gTGVuZ3RoIG9mIHRoZSBiZXN0IG1hdGNoIGF0IHByZXZpb3VzIHN0ZXAuIE1hdGNoZXMgbm90IGdyZWF0ZXIgdGhhbiB0aGlzXG5cdC8vIGFyZSBkaXNjYXJkZWQuIFRoaXMgaXMgdXNlZCBpbiB0aGUgbGF6eSBtYXRjaCBldmFsdWF0aW9uLlxuXHRsZXQgcHJldl9sZW5ndGg7XG5cblx0Ly8gVG8gc3BlZWQgdXAgZGVmbGF0aW9uLCBoYXNoIGNoYWlucyBhcmUgbmV2ZXIgc2VhcmNoZWQgYmV5b25kIHRoaXNcblx0Ly8gbGVuZ3RoLiBBIGhpZ2hlciBsaW1pdCBpbXByb3ZlcyBjb21wcmVzc2lvbiByYXRpbyBidXQgZGVncmFkZXMgdGhlIHNwZWVkLlxuXHRsZXQgbWF4X2NoYWluX2xlbmd0aDtcblxuXHQvLyBBdHRlbXB0IHRvIGZpbmQgYSBiZXR0ZXIgbWF0Y2ggb25seSB3aGVuIHRoZSBjdXJyZW50IG1hdGNoIGlzIHN0cmljdGx5XG5cdC8vIHNtYWxsZXIgdGhhbiB0aGlzIHZhbHVlLiBUaGlzIG1lY2hhbmlzbSBpcyB1c2VkIG9ubHkgZm9yIGNvbXByZXNzaW9uXG5cdC8vIGxldmVscyA+PSA0LlxuXHRsZXQgbWF4X2xhenlfbWF0Y2g7XG5cblx0Ly8gSW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBoYXNoIHRhYmxlIG9ubHkgaWYgdGhlIG1hdGNoIGxlbmd0aCBpcyBub3Rcblx0Ly8gZ3JlYXRlciB0aGFuIHRoaXMgbGVuZ3RoLiBUaGlzIHNhdmVzIHRpbWUgYnV0IGRlZ3JhZGVzIGNvbXByZXNzaW9uLlxuXHQvLyBtYXhfaW5zZXJ0X2xlbmd0aCBpcyB1c2VkIG9ubHkgZm9yIGNvbXByZXNzaW9uIGxldmVscyA8PSAzLlxuXG5cdGxldCBsZXZlbDsgLy8gY29tcHJlc3Npb24gbGV2ZWwgKDEuLjkpXG5cdGxldCBzdHJhdGVneTsgLy8gZmF2b3Igb3IgZm9yY2UgSHVmZm1hbiBjb2RpbmdcblxuXHQvLyBVc2UgYSBmYXN0ZXIgc2VhcmNoIHdoZW4gdGhlIHByZXZpb3VzIG1hdGNoIGlzIGxvbmdlciB0aGFuIHRoaXNcblx0bGV0IGdvb2RfbWF0Y2g7XG5cblx0Ly8gU3RvcCBzZWFyY2hpbmcgd2hlbiBjdXJyZW50IG1hdGNoIGV4Y2VlZHMgdGhpc1xuXHRsZXQgbmljZV9tYXRjaDtcblxuXHRsZXQgZHluX2x0cmVlOyAvLyBsaXRlcmFsIGFuZCBsZW5ndGggdHJlZVxuXHRsZXQgZHluX2R0cmVlOyAvLyBkaXN0YW5jZSB0cmVlXG5cdGxldCBibF90cmVlOyAvLyBIdWZmbWFuIHRyZWUgZm9yIGJpdCBsZW5ndGhzXG5cblx0Y29uc3QgbF9kZXNjID0gbmV3IFRyZWUoKTsgLy8gZGVzYyBmb3IgbGl0ZXJhbCB0cmVlXG5cdGNvbnN0IGRfZGVzYyA9IG5ldyBUcmVlKCk7IC8vIGRlc2MgZm9yIGRpc3RhbmNlIHRyZWVcblx0Y29uc3QgYmxfZGVzYyA9IG5ldyBUcmVlKCk7IC8vIGRlc2MgZm9yIGJpdCBsZW5ndGggdHJlZVxuXG5cdC8vIHRoYXQuaGVhcF9sZW47IC8vIG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgaGVhcFxuXHQvLyB0aGF0LmhlYXBfbWF4OyAvLyBlbGVtZW50IG9mIGxhcmdlc3QgZnJlcXVlbmN5XG5cdC8vIFRoZSBzb25zIG9mIGhlYXBbbl0gYXJlIGhlYXBbMipuXSBhbmQgaGVhcFsyKm4rMV0uIGhlYXBbMF0gaXMgbm90IHVzZWQuXG5cdC8vIFRoZSBzYW1lIGhlYXAgYXJyYXkgaXMgdXNlZCB0byBidWlsZCBhbGwgdHJlZXMuXG5cblx0Ly8gRGVwdGggb2YgZWFjaCBzdWJ0cmVlIHVzZWQgYXMgdGllIGJyZWFrZXIgZm9yIHRyZWVzIG9mIGVxdWFsIGZyZXF1ZW5jeVxuXHR0aGF0LmRlcHRoID0gW107XG5cblx0Ly8gU2l6ZSBvZiBtYXRjaCBidWZmZXIgZm9yIGxpdGVyYWxzL2xlbmd0aHMuIFRoZXJlIGFyZSA0IHJlYXNvbnMgZm9yXG5cdC8vIGxpbWl0aW5nIGxpdF9idWZzaXplIHRvIDY0Szpcblx0Ly8gLSBmcmVxdWVuY2llcyBjYW4gYmUga2VwdCBpbiAxNiBiaXQgY291bnRlcnNcblx0Ly8gLSBpZiBjb21wcmVzc2lvbiBpcyBub3Qgc3VjY2Vzc2Z1bCBmb3IgdGhlIGZpcnN0IGJsb2NrLCBhbGwgaW5wdXRcblx0Ly8gZGF0YSBpcyBzdGlsbCBpbiB0aGUgd2luIHNvIHdlIGNhbiBzdGlsbCBlbWl0IGEgc3RvcmVkIGJsb2NrIGV2ZW5cblx0Ly8gd2hlbiBpbnB1dCBjb21lcyBmcm9tIHN0YW5kYXJkIGlucHV0LiAoVGhpcyBjYW4gYWxzbyBiZSBkb25lIGZvclxuXHQvLyBhbGwgYmxvY2tzIGlmIGxpdF9idWZzaXplIGlzIG5vdCBncmVhdGVyIHRoYW4gMzJLLilcblx0Ly8gLSBpZiBjb21wcmVzc2lvbiBpcyBub3Qgc3VjY2Vzc2Z1bCBmb3IgYSBmaWxlIHNtYWxsZXIgdGhhbiA2NEssIHdlIGNhblxuXHQvLyBldmVuIGVtaXQgYSBzdG9yZWQgZmlsZSBpbnN0ZWFkIG9mIGEgc3RvcmVkIGJsb2NrIChzYXZpbmcgNSBieXRlcykuXG5cdC8vIFRoaXMgaXMgYXBwbGljYWJsZSBvbmx5IGZvciB6aXAgKG5vdCBnemlwIG9yIHpsaWIpLlxuXHQvLyAtIGNyZWF0aW5nIG5ldyBIdWZmbWFuIHRyZWVzIGxlc3MgZnJlcXVlbnRseSBtYXkgbm90IHByb3ZpZGUgZmFzdFxuXHQvLyBhZGFwdGF0aW9uIHRvIGNoYW5nZXMgaW4gdGhlIGlucHV0IGRhdGEgc3RhdGlzdGljcy4gKFRha2UgZm9yXG5cdC8vIGV4YW1wbGUgYSBiaW5hcnkgZmlsZSB3aXRoIHBvb3JseSBjb21wcmVzc2libGUgY29kZSBmb2xsb3dlZCBieVxuXHQvLyBhIGhpZ2hseSBjb21wcmVzc2libGUgc3RyaW5nIHRhYmxlLikgU21hbGxlciBidWZmZXIgc2l6ZXMgZ2l2ZVxuXHQvLyBmYXN0IGFkYXB0YXRpb24gYnV0IGhhdmUgb2YgY291cnNlIHRoZSBvdmVyaGVhZCBvZiB0cmFuc21pdHRpbmdcblx0Ly8gdHJlZXMgbW9yZSBmcmVxdWVudGx5LlxuXHQvLyAtIEkgY2FuJ3QgY291bnQgYWJvdmUgNFxuXHRsZXQgbGl0X2J1ZnNpemU7XG5cblx0bGV0IGxhc3RfbGl0OyAvLyBydW5uaW5nIGluZGV4IGluIGRpc3RfYnVmIGFuZCBsY19idWZcblxuXHQvLyB0aGF0Lm9wdF9sZW47IC8vIGJpdCBsZW5ndGggb2YgY3VycmVudCBibG9jayB3aXRoIG9wdGltYWwgdHJlZXNcblx0Ly8gdGhhdC5zdGF0aWNfbGVuOyAvLyBiaXQgbGVuZ3RoIG9mIGN1cnJlbnQgYmxvY2sgd2l0aCBzdGF0aWMgdHJlZXNcblx0bGV0IG1hdGNoZXM7IC8vIG51bWJlciBvZiBzdHJpbmcgbWF0Y2hlcyBpbiBjdXJyZW50IGJsb2NrXG5cdGxldCBsYXN0X2VvYl9sZW47IC8vIGJpdCBsZW5ndGggb2YgRU9CIGNvZGUgZm9yIGxhc3QgYmxvY2tcblxuXHQvLyBPdXRwdXQgYnVmZmVyLiBiaXRzIGFyZSBpbnNlcnRlZCBzdGFydGluZyBhdCB0aGUgYm90dG9tIChsZWFzdFxuXHQvLyBzaWduaWZpY2FudCBiaXRzKS5cblx0bGV0IGJpX2J1ZjtcblxuXHQvLyBOdW1iZXIgb2YgdmFsaWQgYml0cyBpbiBiaV9idWYuIEFsbCBiaXRzIGFib3ZlIHRoZSBsYXN0IHZhbGlkIGJpdFxuXHQvLyBhcmUgYWx3YXlzIHplcm8uXG5cdGxldCBiaV92YWxpZDtcblxuXHQvLyBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoIGZvciBhbiBvcHRpbWFsIHRyZWVcblx0dGhhdC5ibF9jb3VudCA9IFtdO1xuXG5cdC8vIGhlYXAgdXNlZCB0byBidWlsZCB0aGUgSHVmZm1hbiB0cmVlc1xuXHR0aGF0LmhlYXAgPSBbXTtcblxuXHRkeW5fbHRyZWUgPSBbXTtcblx0ZHluX2R0cmVlID0gW107XG5cdGJsX3RyZWUgPSBbXTtcblxuXHRmdW5jdGlvbiBsbV9pbml0KCkge1xuXHRcdHdpbmRvd19zaXplID0gMiAqIHdfc2l6ZTtcblxuXHRcdGhlYWRbaGFzaF9zaXplIC0gMV0gPSAwO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgaGFzaF9zaXplIC0gMTsgaSsrKSB7XG5cdFx0XHRoZWFkW2ldID0gMDtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzOlxuXHRcdG1heF9sYXp5X21hdGNoID0gY29uZmlnX3RhYmxlW2xldmVsXS5tYXhfbGF6eTtcblx0XHRnb29kX21hdGNoID0gY29uZmlnX3RhYmxlW2xldmVsXS5nb29kX2xlbmd0aDtcblx0XHRuaWNlX21hdGNoID0gY29uZmlnX3RhYmxlW2xldmVsXS5uaWNlX2xlbmd0aDtcblx0XHRtYXhfY2hhaW5fbGVuZ3RoID0gY29uZmlnX3RhYmxlW2xldmVsXS5tYXhfY2hhaW47XG5cblx0XHRzdHJzdGFydCA9IDA7XG5cdFx0YmxvY2tfc3RhcnQgPSAwO1xuXHRcdGxvb2thaGVhZCA9IDA7XG5cdFx0bWF0Y2hfbGVuZ3RoID0gcHJldl9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuXHRcdG1hdGNoX2F2YWlsYWJsZSA9IDA7XG5cdFx0aW5zX2ggPSAwO1xuXHR9XG5cblx0ZnVuY3Rpb24gaW5pdF9ibG9jaygpIHtcblx0XHRsZXQgaTtcblx0XHQvLyBJbml0aWFsaXplIHRoZSB0cmVlcy5cblx0XHRmb3IgKGkgPSAwOyBpIDwgTF9DT0RFUzsgaSsrKVxuXHRcdFx0ZHluX2x0cmVlW2kgKiAyXSA9IDA7XG5cdFx0Zm9yIChpID0gMDsgaSA8IERfQ09ERVM7IGkrKylcblx0XHRcdGR5bl9kdHJlZVtpICogMl0gPSAwO1xuXHRcdGZvciAoaSA9IDA7IGkgPCBCTF9DT0RFUzsgaSsrKVxuXHRcdFx0YmxfdHJlZVtpICogMl0gPSAwO1xuXG5cdFx0ZHluX2x0cmVlW0VORF9CTE9DSyAqIDJdID0gMTtcblx0XHR0aGF0Lm9wdF9sZW4gPSB0aGF0LnN0YXRpY19sZW4gPSAwO1xuXHRcdGxhc3RfbGl0ID0gbWF0Y2hlcyA9IDA7XG5cdH1cblxuXHQvLyBJbml0aWFsaXplIHRoZSB0cmVlIGRhdGEgc3RydWN0dXJlcyBmb3IgYSBuZXcgemxpYiBzdHJlYW0uXG5cdGZ1bmN0aW9uIHRyX2luaXQoKSB7XG5cblx0XHRsX2Rlc2MuZHluX3RyZWUgPSBkeW5fbHRyZWU7XG5cdFx0bF9kZXNjLnN0YXRfZGVzYyA9IFN0YXRpY1RyZWUuc3RhdGljX2xfZGVzYztcblxuXHRcdGRfZGVzYy5keW5fdHJlZSA9IGR5bl9kdHJlZTtcblx0XHRkX2Rlc2Muc3RhdF9kZXNjID0gU3RhdGljVHJlZS5zdGF0aWNfZF9kZXNjO1xuXG5cdFx0YmxfZGVzYy5keW5fdHJlZSA9IGJsX3RyZWU7XG5cdFx0YmxfZGVzYy5zdGF0X2Rlc2MgPSBTdGF0aWNUcmVlLnN0YXRpY19ibF9kZXNjO1xuXG5cdFx0YmlfYnVmID0gMDtcblx0XHRiaV92YWxpZCA9IDA7XG5cdFx0bGFzdF9lb2JfbGVuID0gODsgLy8gZW5vdWdoIGxvb2thaGVhZCBmb3IgaW5mbGF0ZVxuXG5cdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgZmlyc3QgYmxvY2sgb2YgdGhlIGZpcnN0IGZpbGU6XG5cdFx0aW5pdF9ibG9jaygpO1xuXHR9XG5cblx0Ly8gUmVzdG9yZSB0aGUgaGVhcCBwcm9wZXJ0eSBieSBtb3ZpbmcgZG93biB0aGUgdHJlZSBzdGFydGluZyBhdCBub2RlIGssXG5cdC8vIGV4Y2hhbmdpbmcgYSBub2RlIHdpdGggdGhlIHNtYWxsZXN0IG9mIGl0cyB0d28gc29ucyBpZiBuZWNlc3NhcnksXG5cdC8vIHN0b3BwaW5nXG5cdC8vIHdoZW4gdGhlIGhlYXAgcHJvcGVydHkgaXMgcmUtZXN0YWJsaXNoZWQgKGVhY2ggZmF0aGVyIHNtYWxsZXIgdGhhbiBpdHNcblx0Ly8gdHdvIHNvbnMpLlxuXHR0aGF0LnBxZG93bmhlYXAgPSBmdW5jdGlvbiAodHJlZSwgLy8gdGhlIHRyZWUgdG8gcmVzdG9yZVxuXHRcdGsgLy8gbm9kZSB0byBtb3ZlIGRvd25cblx0KSB7XG5cdFx0Y29uc3QgaGVhcCA9IHRoYXQuaGVhcDtcblx0XHRjb25zdCB2ID0gaGVhcFtrXTtcblx0XHRsZXQgaiA9IGsgPDwgMTsgLy8gbGVmdCBzb24gb2Yga1xuXHRcdHdoaWxlIChqIDw9IHRoYXQuaGVhcF9sZW4pIHtcblx0XHRcdC8vIFNldCBqIHRvIHRoZSBzbWFsbGVzdCBvZiB0aGUgdHdvIHNvbnM6XG5cdFx0XHRpZiAoaiA8IHRoYXQuaGVhcF9sZW4gJiYgc21hbGxlcih0cmVlLCBoZWFwW2ogKyAxXSwgaGVhcFtqXSwgdGhhdC5kZXB0aCkpIHtcblx0XHRcdFx0aisrO1xuXHRcdFx0fVxuXHRcdFx0Ly8gRXhpdCBpZiB2IGlzIHNtYWxsZXIgdGhhbiBib3RoIHNvbnNcblx0XHRcdGlmIChzbWFsbGVyKHRyZWUsIHYsIGhlYXBbal0sIHRoYXQuZGVwdGgpKVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Ly8gRXhjaGFuZ2UgdiB3aXRoIHRoZSBzbWFsbGVzdCBzb25cblx0XHRcdGhlYXBba10gPSBoZWFwW2pdO1xuXHRcdFx0ayA9IGo7XG5cdFx0XHQvLyBBbmQgY29udGludWUgZG93biB0aGUgdHJlZSwgc2V0dGluZyBqIHRvIHRoZSBsZWZ0IHNvbiBvZiBrXG5cdFx0XHRqIDw8PSAxO1xuXHRcdH1cblx0XHRoZWFwW2tdID0gdjtcblx0fTtcblxuXHQvLyBTY2FuIGEgbGl0ZXJhbCBvciBkaXN0YW5jZSB0cmVlIHRvIGRldGVybWluZSB0aGUgZnJlcXVlbmNpZXMgb2YgdGhlIGNvZGVzXG5cdC8vIGluIHRoZSBiaXQgbGVuZ3RoIHRyZWUuXG5cdGZ1bmN0aW9uIHNjYW5fdHJlZSh0cmVlLC8vIHRoZSB0cmVlIHRvIGJlIHNjYW5uZWRcblx0XHRtYXhfY29kZSAvLyBhbmQgaXRzIGxhcmdlc3QgY29kZSBvZiBub24gemVybyBmcmVxdWVuY3lcblx0KSB7XG5cdFx0bGV0IHByZXZsZW4gPSAtMTsgLy8gbGFzdCBlbWl0dGVkIGxlbmd0aFxuXHRcdGxldCBjdXJsZW47IC8vIGxlbmd0aCBvZiBjdXJyZW50IGNvZGVcblx0XHRsZXQgbmV4dGxlbiA9IHRyZWVbMCAqIDIgKyAxXTsgLy8gbGVuZ3RoIG9mIG5leHQgY29kZVxuXHRcdGxldCBjb3VudCA9IDA7IC8vIHJlcGVhdCBjb3VudCBvZiB0aGUgY3VycmVudCBjb2RlXG5cdFx0bGV0IG1heF9jb3VudCA9IDc7IC8vIG1heCByZXBlYXQgY291bnRcblx0XHRsZXQgbWluX2NvdW50ID0gNDsgLy8gbWluIHJlcGVhdCBjb3VudFxuXG5cdFx0aWYgKG5leHRsZW4gPT09IDApIHtcblx0XHRcdG1heF9jb3VudCA9IDEzODtcblx0XHRcdG1pbl9jb3VudCA9IDM7XG5cdFx0fVxuXHRcdHRyZWVbKG1heF9jb2RlICsgMSkgKiAyICsgMV0gPSAweGZmZmY7IC8vIGd1YXJkXG5cblx0XHRmb3IgKGxldCBuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG5cdFx0XHRjdXJsZW4gPSBuZXh0bGVuO1xuXHRcdFx0bmV4dGxlbiA9IHRyZWVbKG4gKyAxKSAqIDIgKyAxXTtcblx0XHRcdGlmICgrK2NvdW50IDwgbWF4X2NvdW50ICYmIGN1cmxlbiA9PSBuZXh0bGVuKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuXHRcdFx0XHRibF90cmVlW2N1cmxlbiAqIDJdICs9IGNvdW50O1xuXHRcdFx0fSBlbHNlIGlmIChjdXJsZW4gIT09IDApIHtcblx0XHRcdFx0aWYgKGN1cmxlbiAhPSBwcmV2bGVuKVxuXHRcdFx0XHRcdGJsX3RyZWVbY3VybGVuICogMl0rKztcblx0XHRcdFx0YmxfdHJlZVtSRVBfM182ICogMl0rKztcblx0XHRcdH0gZWxzZSBpZiAoY291bnQgPD0gMTApIHtcblx0XHRcdFx0YmxfdHJlZVtSRVBaXzNfMTAgKiAyXSsrO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YmxfdHJlZVtSRVBaXzExXzEzOCAqIDJdKys7XG5cdFx0XHR9XG5cdFx0XHRjb3VudCA9IDA7XG5cdFx0XHRwcmV2bGVuID0gY3VybGVuO1xuXHRcdFx0aWYgKG5leHRsZW4gPT09IDApIHtcblx0XHRcdFx0bWF4X2NvdW50ID0gMTM4O1xuXHRcdFx0XHRtaW5fY291bnQgPSAzO1xuXHRcdFx0fSBlbHNlIGlmIChjdXJsZW4gPT0gbmV4dGxlbikge1xuXHRcdFx0XHRtYXhfY291bnQgPSA2O1xuXHRcdFx0XHRtaW5fY291bnQgPSAzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF4X2NvdW50ID0gNztcblx0XHRcdFx0bWluX2NvdW50ID0gNDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb25zdHJ1Y3QgdGhlIEh1ZmZtYW4gdHJlZSBmb3IgdGhlIGJpdCBsZW5ndGhzIGFuZCByZXR1cm4gdGhlIGluZGV4IGluXG5cdC8vIGJsX29yZGVyIG9mIHRoZSBsYXN0IGJpdCBsZW5ndGggY29kZSB0byBzZW5kLlxuXHRmdW5jdGlvbiBidWlsZF9ibF90cmVlKCkge1xuXHRcdGxldCBtYXhfYmxpbmRleDsgLy8gaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIHRoZSBiaXQgbGVuZ3RoIGZyZXF1ZW5jaWVzIGZvciBsaXRlcmFsIGFuZCBkaXN0YW5jZSB0cmVlc1xuXHRcdHNjYW5fdHJlZShkeW5fbHRyZWUsIGxfZGVzYy5tYXhfY29kZSk7XG5cdFx0c2Nhbl90cmVlKGR5bl9kdHJlZSwgZF9kZXNjLm1heF9jb2RlKTtcblxuXHRcdC8vIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWU6XG5cdFx0YmxfZGVzYy5idWlsZF90cmVlKHRoYXQpO1xuXHRcdC8vIG9wdF9sZW4gbm93IGluY2x1ZGVzIHRoZSBsZW5ndGggb2YgdGhlIHRyZWUgcmVwcmVzZW50YXRpb25zLCBleGNlcHRcblx0XHQvLyB0aGUgbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aHMgY29kZXMgYW5kIHRoZSA1KzUrNCBiaXRzIGZvciB0aGVcblx0XHQvLyBjb3VudHMuXG5cblx0XHQvLyBEZXRlcm1pbmUgdGhlIG51bWJlciBvZiBiaXQgbGVuZ3RoIGNvZGVzIHRvIHNlbmQuIFRoZSBwa3ppcCBmb3JtYXRcblx0XHQvLyByZXF1aXJlcyB0aGF0IGF0IGxlYXN0IDQgYml0IGxlbmd0aCBjb2RlcyBiZSBzZW50LiAoYXBwbm90ZS50eHQgc2F5c1xuXHRcdC8vIDMgYnV0IHRoZSBhY3R1YWwgdmFsdWUgdXNlZCBpcyA0Lilcblx0XHRmb3IgKG1heF9ibGluZGV4ID0gQkxfQ09ERVMgLSAxOyBtYXhfYmxpbmRleCA+PSAzOyBtYXhfYmxpbmRleC0tKSB7XG5cdFx0XHRpZiAoYmxfdHJlZVtUcmVlLmJsX29yZGVyW21heF9ibGluZGV4XSAqIDIgKyAxXSAhPT0gMClcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdC8vIFVwZGF0ZSBvcHRfbGVuIHRvIGluY2x1ZGUgdGhlIGJpdCBsZW5ndGggdHJlZSBhbmQgY291bnRzXG5cdFx0dGhhdC5vcHRfbGVuICs9IDMgKiAobWF4X2JsaW5kZXggKyAxKSArIDUgKyA1ICsgNDtcblxuXHRcdHJldHVybiBtYXhfYmxpbmRleDtcblx0fVxuXG5cdC8vIE91dHB1dCBhIGJ5dGUgb24gdGhlIHN0cmVhbS5cblx0Ly8gSU4gYXNzZXJ0aW9uOiB0aGVyZSBpcyBlbm91Z2ggcm9vbSBpbiBwZW5kaW5nX2J1Zi5cblx0ZnVuY3Rpb24gcHV0X2J5dGUocCkge1xuXHRcdHRoYXQucGVuZGluZ19idWZbdGhhdC5wZW5kaW5nKytdID0gcDtcblx0fVxuXG5cdGZ1bmN0aW9uIHB1dF9zaG9ydCh3KSB7XG5cdFx0cHV0X2J5dGUodyAmIDB4ZmYpO1xuXHRcdHB1dF9ieXRlKCh3ID4+PiA4KSAmIDB4ZmYpO1xuXHR9XG5cblx0ZnVuY3Rpb24gcHV0U2hvcnRNU0IoYikge1xuXHRcdHB1dF9ieXRlKChiID4+IDgpICYgMHhmZik7XG5cdFx0cHV0X2J5dGUoKGIgJiAweGZmKSAmIDB4ZmYpO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2VuZF9iaXRzKHZhbHVlLCBsZW5ndGgpIHtcblx0XHRsZXQgdmFsO1xuXHRcdGNvbnN0IGxlbiA9IGxlbmd0aDtcblx0XHRpZiAoYmlfdmFsaWQgPiBCdWZfc2l6ZSAtIGxlbikge1xuXHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHQvLyBiaV9idWYgfD0gKHZhbCA8PCBiaV92YWxpZCk7XG5cdFx0XHRiaV9idWYgfD0gKCh2YWwgPDwgYmlfdmFsaWQpICYgMHhmZmZmKTtcblx0XHRcdHB1dF9zaG9ydChiaV9idWYpO1xuXHRcdFx0YmlfYnVmID0gdmFsID4+PiAoQnVmX3NpemUgLSBiaV92YWxpZCk7XG5cdFx0XHRiaV92YWxpZCArPSBsZW4gLSBCdWZfc2l6ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gYmlfYnVmIHw9ICh2YWx1ZSkgPDwgYmlfdmFsaWQ7XG5cdFx0XHRiaV9idWYgfD0gKCgodmFsdWUpIDw8IGJpX3ZhbGlkKSAmIDB4ZmZmZik7XG5cdFx0XHRiaV92YWxpZCArPSBsZW47XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gc2VuZF9jb2RlKGMsIHRyZWUpIHtcblx0XHRjb25zdCBjMiA9IGMgKiAyO1xuXHRcdHNlbmRfYml0cyh0cmVlW2MyXSAmIDB4ZmZmZiwgdHJlZVtjMiArIDFdICYgMHhmZmZmKTtcblx0fVxuXG5cdC8vIFNlbmQgYSBsaXRlcmFsIG9yIGRpc3RhbmNlIHRyZWUgaW4gY29tcHJlc3NlZCBmb3JtLCB1c2luZyB0aGUgY29kZXMgaW5cblx0Ly8gYmxfdHJlZS5cblx0ZnVuY3Rpb24gc2VuZF90cmVlKHRyZWUsLy8gdGhlIHRyZWUgdG8gYmUgc2VudFxuXHRcdG1heF9jb2RlIC8vIGFuZCBpdHMgbGFyZ2VzdCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeVxuXHQpIHtcblx0XHRsZXQgbjsgLy8gaXRlcmF0ZXMgb3ZlciBhbGwgdHJlZSBlbGVtZW50c1xuXHRcdGxldCBwcmV2bGVuID0gLTE7IC8vIGxhc3QgZW1pdHRlZCBsZW5ndGhcblx0XHRsZXQgY3VybGVuOyAvLyBsZW5ndGggb2YgY3VycmVudCBjb2RlXG5cdFx0bGV0IG5leHRsZW4gPSB0cmVlWzAgKiAyICsgMV07IC8vIGxlbmd0aCBvZiBuZXh0IGNvZGVcblx0XHRsZXQgY291bnQgPSAwOyAvLyByZXBlYXQgY291bnQgb2YgdGhlIGN1cnJlbnQgY29kZVxuXHRcdGxldCBtYXhfY291bnQgPSA3OyAvLyBtYXggcmVwZWF0IGNvdW50XG5cdFx0bGV0IG1pbl9jb3VudCA9IDQ7IC8vIG1pbiByZXBlYXQgY291bnRcblxuXHRcdGlmIChuZXh0bGVuID09PSAwKSB7XG5cdFx0XHRtYXhfY291bnQgPSAxMzg7XG5cdFx0XHRtaW5fY291bnQgPSAzO1xuXHRcdH1cblxuXHRcdGZvciAobiA9IDA7IG4gPD0gbWF4X2NvZGU7IG4rKykge1xuXHRcdFx0Y3VybGVuID0gbmV4dGxlbjtcblx0XHRcdG5leHRsZW4gPSB0cmVlWyhuICsgMSkgKiAyICsgMV07XG5cdFx0XHRpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT0gbmV4dGxlbikge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH0gZWxzZSBpZiAoY291bnQgPCBtaW5fY291bnQpIHtcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdHNlbmRfY29kZShjdXJsZW4sIGJsX3RyZWUpO1xuXHRcdFx0XHR9IHdoaWxlICgtLWNvdW50ICE9PSAwKTtcblx0XHRcdH0gZWxzZSBpZiAoY3VybGVuICE9PSAwKSB7XG5cdFx0XHRcdGlmIChjdXJsZW4gIT0gcHJldmxlbikge1xuXHRcdFx0XHRcdHNlbmRfY29kZShjdXJsZW4sIGJsX3RyZWUpO1xuXHRcdFx0XHRcdGNvdW50LS07XG5cdFx0XHRcdH1cblx0XHRcdFx0c2VuZF9jb2RlKFJFUF8zXzYsIGJsX3RyZWUpO1xuXHRcdFx0XHRzZW5kX2JpdHMoY291bnQgLSAzLCAyKTtcblx0XHRcdH0gZWxzZSBpZiAoY291bnQgPD0gMTApIHtcblx0XHRcdFx0c2VuZF9jb2RlKFJFUFpfM18xMCwgYmxfdHJlZSk7XG5cdFx0XHRcdHNlbmRfYml0cyhjb3VudCAtIDMsIDMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VuZF9jb2RlKFJFUFpfMTFfMTM4LCBibF90cmVlKTtcblx0XHRcdFx0c2VuZF9iaXRzKGNvdW50IC0gMTEsIDcpO1xuXHRcdFx0fVxuXHRcdFx0Y291bnQgPSAwO1xuXHRcdFx0cHJldmxlbiA9IGN1cmxlbjtcblx0XHRcdGlmIChuZXh0bGVuID09PSAwKSB7XG5cdFx0XHRcdG1heF9jb3VudCA9IDEzODtcblx0XHRcdFx0bWluX2NvdW50ID0gMztcblx0XHRcdH0gZWxzZSBpZiAoY3VybGVuID09IG5leHRsZW4pIHtcblx0XHRcdFx0bWF4X2NvdW50ID0gNjtcblx0XHRcdFx0bWluX2NvdW50ID0gMztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1heF9jb3VudCA9IDc7XG5cdFx0XHRcdG1pbl9jb3VudCA9IDQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2VuZCB0aGUgaGVhZGVyIGZvciBhIGJsb2NrIHVzaW5nIGR5bmFtaWMgSHVmZm1hbiB0cmVlczogdGhlIGNvdW50cywgdGhlXG5cdC8vIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGggY29kZXMsIHRoZSBsaXRlcmFsIHRyZWUgYW5kIHRoZSBkaXN0YW5jZSB0cmVlLlxuXHQvLyBJTiBhc3NlcnRpb246IGxjb2RlcyA+PSAyNTcsIGRjb2RlcyA+PSAxLCBibGNvZGVzID49IDQuXG5cdGZ1bmN0aW9uIHNlbmRfYWxsX3RyZWVzKGxjb2RlcywgZGNvZGVzLCBibGNvZGVzKSB7XG5cdFx0bGV0IHJhbms7IC8vIGluZGV4IGluIGJsX29yZGVyXG5cblx0XHRzZW5kX2JpdHMobGNvZGVzIC0gMjU3LCA1KTsgLy8gbm90ICsyNTUgYXMgc3RhdGVkIGluIGFwcG5vdGUudHh0XG5cdFx0c2VuZF9iaXRzKGRjb2RlcyAtIDEsIDUpO1xuXHRcdHNlbmRfYml0cyhibGNvZGVzIC0gNCwgNCk7IC8vIG5vdCAtMyBhcyBzdGF0ZWQgaW4gYXBwbm90ZS50eHRcblx0XHRmb3IgKHJhbmsgPSAwOyByYW5rIDwgYmxjb2RlczsgcmFuaysrKSB7XG5cdFx0XHRzZW5kX2JpdHMoYmxfdHJlZVtUcmVlLmJsX29yZGVyW3JhbmtdICogMiArIDFdLCAzKTtcblx0XHR9XG5cdFx0c2VuZF90cmVlKGR5bl9sdHJlZSwgbGNvZGVzIC0gMSk7IC8vIGxpdGVyYWwgdHJlZVxuXHRcdHNlbmRfdHJlZShkeW5fZHRyZWUsIGRjb2RlcyAtIDEpOyAvLyBkaXN0YW5jZSB0cmVlXG5cdH1cblxuXHQvLyBGbHVzaCB0aGUgYml0IGJ1ZmZlciwga2VlcGluZyBhdCBtb3N0IDcgYml0cyBpbiBpdC5cblx0ZnVuY3Rpb24gYmlfZmx1c2goKSB7XG5cdFx0aWYgKGJpX3ZhbGlkID09IDE2KSB7XG5cdFx0XHRwdXRfc2hvcnQoYmlfYnVmKTtcblx0XHRcdGJpX2J1ZiA9IDA7XG5cdFx0XHRiaV92YWxpZCA9IDA7XG5cdFx0fSBlbHNlIGlmIChiaV92YWxpZCA+PSA4KSB7XG5cdFx0XHRwdXRfYnl0ZShiaV9idWYgJiAweGZmKTtcblx0XHRcdGJpX2J1ZiA+Pj49IDg7XG5cdFx0XHRiaV92YWxpZCAtPSA4O1xuXHRcdH1cblx0fVxuXG5cdC8vIFNlbmQgb25lIGVtcHR5IHN0YXRpYyBibG9jayB0byBnaXZlIGVub3VnaCBsb29rYWhlYWQgZm9yIGluZmxhdGUuXG5cdC8vIFRoaXMgdGFrZXMgMTAgYml0cywgb2Ygd2hpY2ggNyBtYXkgcmVtYWluIGluIHRoZSBiaXQgYnVmZmVyLlxuXHQvLyBUaGUgY3VycmVudCBpbmZsYXRlIGNvZGUgcmVxdWlyZXMgOSBiaXRzIG9mIGxvb2thaGVhZC4gSWYgdGhlXG5cdC8vIGxhc3QgdHdvIGNvZGVzIGZvciB0aGUgcHJldmlvdXMgYmxvY2sgKHJlYWwgY29kZSBwbHVzIEVPQikgd2VyZSBjb2RlZFxuXHQvLyBvbiA1IGJpdHMgb3IgbGVzcywgaW5mbGF0ZSBtYXkgaGF2ZSBvbmx5IDUrMyBiaXRzIG9mIGxvb2thaGVhZCB0byBkZWNvZGVcblx0Ly8gdGhlIGxhc3QgcmVhbCBjb2RlLiBJbiB0aGlzIGNhc2Ugd2Ugc2VuZCB0d28gZW1wdHkgc3RhdGljIGJsb2NrcyBpbnN0ZWFkXG5cdC8vIG9mIG9uZS4gKFRoZXJlIGFyZSBubyBwcm9ibGVtcyBpZiB0aGUgcHJldmlvdXMgYmxvY2sgaXMgc3RvcmVkIG9yIGZpeGVkLilcblx0Ly8gVG8gc2ltcGxpZnkgdGhlIGNvZGUsIHdlIGFzc3VtZSB0aGUgd29yc3QgY2FzZSBvZiBsYXN0IHJlYWwgY29kZSBlbmNvZGVkXG5cdC8vIG9uIG9uZSBiaXQgb25seS5cblx0ZnVuY3Rpb24gX3RyX2FsaWduKCkge1xuXHRcdHNlbmRfYml0cyhTVEFUSUNfVFJFRVMgPDwgMSwgMyk7XG5cdFx0c2VuZF9jb2RlKEVORF9CTE9DSywgU3RhdGljVHJlZS5zdGF0aWNfbHRyZWUpO1xuXG5cdFx0YmlfZmx1c2goKTtcblxuXHRcdC8vIE9mIHRoZSAxMCBiaXRzIGZvciB0aGUgZW1wdHkgYmxvY2ssIHdlIGhhdmUgYWxyZWFkeSBzZW50XG5cdFx0Ly8gKDEwIC0gYmlfdmFsaWQpIGJpdHMuIFRoZSBsb29rYWhlYWQgZm9yIHRoZSBsYXN0IHJlYWwgY29kZSAoYmVmb3JlXG5cdFx0Ly8gdGhlIEVPQiBvZiB0aGUgcHJldmlvdXMgYmxvY2spIHdhcyB0aHVzIGF0IGxlYXN0IG9uZSBwbHVzIHRoZSBsZW5ndGhcblx0XHQvLyBvZiB0aGUgRU9CIHBsdXMgd2hhdCB3ZSBoYXZlIGp1c3Qgc2VudCBvZiB0aGUgZW1wdHkgc3RhdGljIGJsb2NrLlxuXHRcdGlmICgxICsgbGFzdF9lb2JfbGVuICsgMTAgLSBiaV92YWxpZCA8IDkpIHtcblx0XHRcdHNlbmRfYml0cyhTVEFUSUNfVFJFRVMgPDwgMSwgMyk7XG5cdFx0XHRzZW5kX2NvZGUoRU5EX0JMT0NLLCBTdGF0aWNUcmVlLnN0YXRpY19sdHJlZSk7XG5cdFx0XHRiaV9mbHVzaCgpO1xuXHRcdH1cblx0XHRsYXN0X2VvYl9sZW4gPSA3O1xuXHR9XG5cblx0Ly8gU2F2ZSB0aGUgbWF0Y2ggaW5mbyBhbmQgdGFsbHkgdGhlIGZyZXF1ZW5jeSBjb3VudHMuIFJldHVybiB0cnVlIGlmXG5cdC8vIHRoZSBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZC5cblx0ZnVuY3Rpb24gX3RyX3RhbGx5KGRpc3QsIC8vIGRpc3RhbmNlIG9mIG1hdGNoZWQgc3RyaW5nXG5cdFx0bGMgLy8gbWF0Y2ggbGVuZ3RoLU1JTl9NQVRDSCBvciB1bm1hdGNoZWQgY2hhciAoaWYgZGlzdD09MClcblx0KSB7XG5cdFx0bGV0IG91dF9sZW5ndGgsIGluX2xlbmd0aCwgZGNvZGU7XG5cdFx0dGhhdC5kaXN0X2J1ZltsYXN0X2xpdF0gPSBkaXN0O1xuXHRcdHRoYXQubGNfYnVmW2xhc3RfbGl0XSA9IGxjICYgMHhmZjtcblx0XHRsYXN0X2xpdCsrO1xuXG5cdFx0aWYgKGRpc3QgPT09IDApIHtcblx0XHRcdC8vIGxjIGlzIHRoZSB1bm1hdGNoZWQgY2hhclxuXHRcdFx0ZHluX2x0cmVlW2xjICogMl0rKztcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlcysrO1xuXHRcdFx0Ly8gSGVyZSwgbGMgaXMgdGhlIG1hdGNoIGxlbmd0aCAtIE1JTl9NQVRDSFxuXHRcdFx0ZGlzdC0tOyAvLyBkaXN0ID0gbWF0Y2ggZGlzdGFuY2UgLSAxXG5cdFx0XHRkeW5fbHRyZWVbKFRyZWUuX2xlbmd0aF9jb2RlW2xjXSArIExJVEVSQUxTICsgMSkgKiAyXSsrO1xuXHRcdFx0ZHluX2R0cmVlW1RyZWUuZF9jb2RlKGRpc3QpICogMl0rKztcblx0XHR9XG5cblx0XHRpZiAoKGxhc3RfbGl0ICYgMHgxZmZmKSA9PT0gMCAmJiBsZXZlbCA+IDIpIHtcblx0XHRcdC8vIENvbXB1dGUgYW4gdXBwZXIgYm91bmQgZm9yIHRoZSBjb21wcmVzc2VkIGxlbmd0aFxuXHRcdFx0b3V0X2xlbmd0aCA9IGxhc3RfbGl0ICogODtcblx0XHRcdGluX2xlbmd0aCA9IHN0cnN0YXJ0IC0gYmxvY2tfc3RhcnQ7XG5cdFx0XHRmb3IgKGRjb2RlID0gMDsgZGNvZGUgPCBEX0NPREVTOyBkY29kZSsrKSB7XG5cdFx0XHRcdG91dF9sZW5ndGggKz0gZHluX2R0cmVlW2Rjb2RlICogMl0gKiAoNSArIFRyZWUuZXh0cmFfZGJpdHNbZGNvZGVdKTtcblx0XHRcdH1cblx0XHRcdG91dF9sZW5ndGggPj4+PSAzO1xuXHRcdFx0aWYgKChtYXRjaGVzIDwgTWF0aC5mbG9vcihsYXN0X2xpdCAvIDIpKSAmJiBvdXRfbGVuZ3RoIDwgTWF0aC5mbG9vcihpbl9sZW5ndGggLyAyKSlcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIChsYXN0X2xpdCA9PSBsaXRfYnVmc2l6ZSAtIDEpO1xuXHRcdC8vIFdlIGF2b2lkIGVxdWFsaXR5IHdpdGggbGl0X2J1ZnNpemUgYmVjYXVzZSBvZiB3cmFwYXJvdW5kIGF0IDY0S1xuXHRcdC8vIG9uIDE2IGJpdCBtYWNoaW5lcyBhbmQgYmVjYXVzZSBzdG9yZWQgYmxvY2tzIGFyZSByZXN0cmljdGVkIHRvXG5cdFx0Ly8gNjRLLTEgYnl0ZXMuXG5cdH1cblxuXHQvLyBTZW5kIHRoZSBibG9jayBkYXRhIGNvbXByZXNzZWQgdXNpbmcgdGhlIGdpdmVuIEh1ZmZtYW4gdHJlZXNcblx0ZnVuY3Rpb24gY29tcHJlc3NfYmxvY2sobHRyZWUsIGR0cmVlKSB7XG5cdFx0bGV0IGRpc3Q7IC8vIGRpc3RhbmNlIG9mIG1hdGNoZWQgc3RyaW5nXG5cdFx0bGV0IGxjOyAvLyBtYXRjaCBsZW5ndGggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3QgPT09IDApXG5cdFx0bGV0IGx4ID0gMDsgLy8gcnVubmluZyBpbmRleCBpbiBkaXN0X2J1ZiBhbmQgbGNfYnVmXG5cdFx0bGV0IGNvZGU7IC8vIHRoZSBjb2RlIHRvIHNlbmRcblx0XHRsZXQgZXh0cmE7IC8vIG51bWJlciBvZiBleHRyYSBiaXRzIHRvIHNlbmRcblxuXHRcdGlmIChsYXN0X2xpdCAhPT0gMCkge1xuXHRcdFx0ZG8ge1xuXHRcdFx0XHRkaXN0ID0gdGhhdC5kaXN0X2J1ZltseF07XG5cdFx0XHRcdGxjID0gdGhhdC5sY19idWZbbHhdO1xuXHRcdFx0XHRseCsrO1xuXG5cdFx0XHRcdGlmIChkaXN0ID09PSAwKSB7XG5cdFx0XHRcdFx0c2VuZF9jb2RlKGxjLCBsdHJlZSk7IC8vIHNlbmQgYSBsaXRlcmFsIGJ5dGVcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBIZXJlLCBsYyBpcyB0aGUgbWF0Y2ggbGVuZ3RoIC0gTUlOX01BVENIXG5cdFx0XHRcdFx0Y29kZSA9IFRyZWUuX2xlbmd0aF9jb2RlW2xjXTtcblxuXHRcdFx0XHRcdHNlbmRfY29kZShjb2RlICsgTElURVJBTFMgKyAxLCBsdHJlZSk7IC8vIHNlbmQgdGhlIGxlbmd0aFxuXHRcdFx0XHRcdC8vIGNvZGVcblx0XHRcdFx0XHRleHRyYSA9IFRyZWUuZXh0cmFfbGJpdHNbY29kZV07XG5cdFx0XHRcdFx0aWYgKGV4dHJhICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRsYyAtPSBUcmVlLmJhc2VfbGVuZ3RoW2NvZGVdO1xuXHRcdFx0XHRcdFx0c2VuZF9iaXRzKGxjLCBleHRyYSk7IC8vIHNlbmQgdGhlIGV4dHJhIGxlbmd0aCBiaXRzXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRpc3QtLTsgLy8gZGlzdCBpcyBub3cgdGhlIG1hdGNoIGRpc3RhbmNlIC0gMVxuXHRcdFx0XHRcdGNvZGUgPSBUcmVlLmRfY29kZShkaXN0KTtcblxuXHRcdFx0XHRcdHNlbmRfY29kZShjb2RlLCBkdHJlZSk7IC8vIHNlbmQgdGhlIGRpc3RhbmNlIGNvZGVcblx0XHRcdFx0XHRleHRyYSA9IFRyZWUuZXh0cmFfZGJpdHNbY29kZV07XG5cdFx0XHRcdFx0aWYgKGV4dHJhICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRkaXN0IC09IFRyZWUuYmFzZV9kaXN0W2NvZGVdO1xuXHRcdFx0XHRcdFx0c2VuZF9iaXRzKGRpc3QsIGV4dHJhKTsgLy8gc2VuZCB0aGUgZXh0cmEgZGlzdGFuY2UgYml0c1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSAvLyBsaXRlcmFsIG9yIG1hdGNoIHBhaXIgP1xuXHRcdFx0fSB3aGlsZSAobHggPCBsYXN0X2xpdCk7XG5cdFx0fVxuXG5cdFx0c2VuZF9jb2RlKEVORF9CTE9DSywgbHRyZWUpO1xuXHRcdGxhc3RfZW9iX2xlbiA9IGx0cmVlW0VORF9CTE9DSyAqIDIgKyAxXTtcblx0fVxuXG5cdC8vIEZsdXNoIHRoZSBiaXQgYnVmZmVyIGFuZCBhbGlnbiB0aGUgb3V0cHV0IG9uIGEgYnl0ZSBib3VuZGFyeVxuXHRmdW5jdGlvbiBiaV93aW5kdXAoKSB7XG5cdFx0aWYgKGJpX3ZhbGlkID4gOCkge1xuXHRcdFx0cHV0X3Nob3J0KGJpX2J1Zik7XG5cdFx0fSBlbHNlIGlmIChiaV92YWxpZCA+IDApIHtcblx0XHRcdHB1dF9ieXRlKGJpX2J1ZiAmIDB4ZmYpO1xuXHRcdH1cblx0XHRiaV9idWYgPSAwO1xuXHRcdGJpX3ZhbGlkID0gMDtcblx0fVxuXG5cdC8vIENvcHkgYSBzdG9yZWQgYmxvY2ssIHN0b3JpbmcgZmlyc3QgdGhlIGxlbmd0aCBhbmQgaXRzXG5cdC8vIG9uZSdzIGNvbXBsZW1lbnQgaWYgcmVxdWVzdGVkLlxuXHRmdW5jdGlvbiBjb3B5X2Jsb2NrKGJ1ZiwgLy8gdGhlIGlucHV0IGRhdGFcblx0XHRsZW4sIC8vIGl0cyBsZW5ndGhcblx0XHRoZWFkZXIgLy8gdHJ1ZSBpZiBibG9jayBoZWFkZXIgbXVzdCBiZSB3cml0dGVuXG5cdCkge1xuXHRcdGJpX3dpbmR1cCgpOyAvLyBhbGlnbiBvbiBieXRlIGJvdW5kYXJ5XG5cdFx0bGFzdF9lb2JfbGVuID0gODsgLy8gZW5vdWdoIGxvb2thaGVhZCBmb3IgaW5mbGF0ZVxuXG5cdFx0aWYgKGhlYWRlcikge1xuXHRcdFx0cHV0X3Nob3J0KGxlbik7XG5cdFx0XHRwdXRfc2hvcnQofmxlbik7XG5cdFx0fVxuXG5cdFx0dGhhdC5wZW5kaW5nX2J1Zi5zZXQod2luLnN1YmFycmF5KGJ1ZiwgYnVmICsgbGVuKSwgdGhhdC5wZW5kaW5nKTtcblx0XHR0aGF0LnBlbmRpbmcgKz0gbGVuO1xuXHR9XG5cblx0Ly8gU2VuZCBhIHN0b3JlZCBibG9ja1xuXHRmdW5jdGlvbiBfdHJfc3RvcmVkX2Jsb2NrKGJ1ZiwgLy8gaW5wdXQgYmxvY2tcblx0XHRzdG9yZWRfbGVuLCAvLyBsZW5ndGggb2YgaW5wdXQgYmxvY2tcblx0XHRlb2YgLy8gdHJ1ZSBpZiB0aGlzIGlzIHRoZSBsYXN0IGJsb2NrIGZvciBhIGZpbGVcblx0KSB7XG5cdFx0c2VuZF9iaXRzKChTVE9SRURfQkxPQ0sgPDwgMSkgKyAoZW9mID8gMSA6IDApLCAzKTsgLy8gc2VuZCBibG9jayB0eXBlXG5cdFx0Y29weV9ibG9jayhidWYsIHN0b3JlZF9sZW4sIHRydWUpOyAvLyB3aXRoIGhlYWRlclxuXHR9XG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nIGZvciB0aGUgY3VycmVudCBibG9jazogZHluYW1pYyB0cmVlcywgc3RhdGljXG5cdC8vIHRyZWVzIG9yIHN0b3JlLCBhbmQgb3V0cHV0IHRoZSBlbmNvZGVkIGJsb2NrIHRvIHRoZSB6aXAgZmlsZS5cblx0ZnVuY3Rpb24gX3RyX2ZsdXNoX2Jsb2NrKGJ1ZiwgLy8gaW5wdXQgYmxvY2ssIG9yIE5VTEwgaWYgdG9vIG9sZFxuXHRcdHN0b3JlZF9sZW4sIC8vIGxlbmd0aCBvZiBpbnB1dCBibG9ja1xuXHRcdGVvZiAvLyB0cnVlIGlmIHRoaXMgaXMgdGhlIGxhc3QgYmxvY2sgZm9yIGEgZmlsZVxuXHQpIHtcblx0XHRsZXQgb3B0X2xlbmIsIHN0YXRpY19sZW5iOy8vIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gaW4gYnl0ZXNcblx0XHRsZXQgbWF4X2JsaW5kZXggPSAwOyAvLyBpbmRleCBvZiBsYXN0IGJpdCBsZW5ndGggY29kZSBvZiBub24gemVybyBmcmVxXG5cblx0XHQvLyBCdWlsZCB0aGUgSHVmZm1hbiB0cmVlcyB1bmxlc3MgYSBzdG9yZWQgYmxvY2sgaXMgZm9yY2VkXG5cdFx0aWYgKGxldmVsID4gMCkge1xuXHRcdFx0Ly8gQ29uc3RydWN0IHRoZSBsaXRlcmFsIGFuZCBkaXN0YW5jZSB0cmVlc1xuXHRcdFx0bF9kZXNjLmJ1aWxkX3RyZWUodGhhdCk7XG5cblx0XHRcdGRfZGVzYy5idWlsZF90cmVlKHRoYXQpO1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBvcHRfbGVuIGFuZCBzdGF0aWNfbGVuIGFyZSB0aGUgdG90YWwgYml0IGxlbmd0aHNcblx0XHRcdC8vIG9mXG5cdFx0XHQvLyB0aGUgY29tcHJlc3NlZCBibG9jayBkYXRhLCBleGNsdWRpbmcgdGhlIHRyZWUgcmVwcmVzZW50YXRpb25zLlxuXG5cdFx0XHQvLyBCdWlsZCB0aGUgYml0IGxlbmd0aCB0cmVlIGZvciB0aGUgYWJvdmUgdHdvIHRyZWVzLCBhbmQgZ2V0IHRoZVxuXHRcdFx0Ly8gaW5kZXhcblx0XHRcdC8vIGluIGJsX29yZGVyIG9mIHRoZSBsYXN0IGJpdCBsZW5ndGggY29kZSB0byBzZW5kLlxuXHRcdFx0bWF4X2JsaW5kZXggPSBidWlsZF9ibF90cmVlKCk7XG5cblx0XHRcdC8vIERldGVybWluZSB0aGUgYmVzdCBlbmNvZGluZy4gQ29tcHV0ZSBmaXJzdCB0aGUgYmxvY2sgbGVuZ3RoIGluXG5cdFx0XHQvLyBieXRlc1xuXHRcdFx0b3B0X2xlbmIgPSAodGhhdC5vcHRfbGVuICsgMyArIDcpID4+PiAzO1xuXHRcdFx0c3RhdGljX2xlbmIgPSAodGhhdC5zdGF0aWNfbGVuICsgMyArIDcpID4+PiAzO1xuXG5cdFx0XHRpZiAoc3RhdGljX2xlbmIgPD0gb3B0X2xlbmIpXG5cdFx0XHRcdG9wdF9sZW5iID0gc3RhdGljX2xlbmI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9wdF9sZW5iID0gc3RhdGljX2xlbmIgPSBzdG9yZWRfbGVuICsgNTsgLy8gZm9yY2UgYSBzdG9yZWQgYmxvY2tcblx0XHR9XG5cblx0XHRpZiAoKHN0b3JlZF9sZW4gKyA0IDw9IG9wdF9sZW5iKSAmJiBidWYgIT0gLTEpIHtcblx0XHRcdC8vIDQ6IHR3byB3b3JkcyBmb3IgdGhlIGxlbmd0aHNcblx0XHRcdC8vIFRoZSB0ZXN0IGJ1ZiAhPSBOVUxMIGlzIG9ubHkgbmVjZXNzYXJ5IGlmIExJVF9CVUZTSVpFID4gV1NJWkUuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2UgY2FuJ3QgaGF2ZSBwcm9jZXNzZWQgbW9yZSB0aGFuIFdTSVpFIGlucHV0IGJ5dGVzXG5cdFx0XHQvLyBzaW5jZVxuXHRcdFx0Ly8gdGhlIGxhc3QgYmxvY2sgZmx1c2gsIGJlY2F1c2UgY29tcHJlc3Npb24gd291bGQgaGF2ZSBiZWVuXG5cdFx0XHQvLyBzdWNjZXNzZnVsLiBJZiBMSVRfQlVGU0laRSA8PSBXU0laRSwgaXQgaXMgbmV2ZXIgdG9vIGxhdGUgdG9cblx0XHRcdC8vIHRyYW5zZm9ybSBhIGJsb2NrIGludG8gYSBzdG9yZWQgYmxvY2suXG5cdFx0XHRfdHJfc3RvcmVkX2Jsb2NrKGJ1Ziwgc3RvcmVkX2xlbiwgZW9mKTtcblx0XHR9IGVsc2UgaWYgKHN0YXRpY19sZW5iID09IG9wdF9sZW5iKSB7XG5cdFx0XHRzZW5kX2JpdHMoKFNUQVRJQ19UUkVFUyA8PCAxKSArIChlb2YgPyAxIDogMCksIDMpO1xuXHRcdFx0Y29tcHJlc3NfYmxvY2soU3RhdGljVHJlZS5zdGF0aWNfbHRyZWUsIFN0YXRpY1RyZWUuc3RhdGljX2R0cmVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c2VuZF9iaXRzKChEWU5fVFJFRVMgPDwgMSkgKyAoZW9mID8gMSA6IDApLCAzKTtcblx0XHRcdHNlbmRfYWxsX3RyZWVzKGxfZGVzYy5tYXhfY29kZSArIDEsIGRfZGVzYy5tYXhfY29kZSArIDEsIG1heF9ibGluZGV4ICsgMSk7XG5cdFx0XHRjb21wcmVzc19ibG9jayhkeW5fbHRyZWUsIGR5bl9kdHJlZSk7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIGFib3ZlIGNoZWNrIGlzIG1hZGUgbW9kIDJeMzIsIGZvciBmaWxlcyBsYXJnZXIgdGhhbiA1MTIgTUJcblx0XHQvLyBhbmQgdUxvbmcgaW1wbGVtZW50ZWQgb24gMzIgYml0cy5cblxuXHRcdGluaXRfYmxvY2soKTtcblxuXHRcdGlmIChlb2YpIHtcblx0XHRcdGJpX3dpbmR1cCgpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGZsdXNoX2Jsb2NrX29ubHkoZW9mKSB7XG5cdFx0X3RyX2ZsdXNoX2Jsb2NrKGJsb2NrX3N0YXJ0ID49IDAgPyBibG9ja19zdGFydCA6IC0xLCBzdHJzdGFydCAtIGJsb2NrX3N0YXJ0LCBlb2YpO1xuXHRcdGJsb2NrX3N0YXJ0ID0gc3Ryc3RhcnQ7XG5cdFx0c3RybS5mbHVzaF9wZW5kaW5nKCk7XG5cdH1cblxuXHQvLyBGaWxsIHRoZSB3aW4gd2hlbiB0aGUgbG9va2FoZWFkIGJlY29tZXMgaW5zdWZmaWNpZW50LlxuXHQvLyBVcGRhdGVzIHN0cnN0YXJ0IGFuZCBsb29rYWhlYWQuXG5cdC8vXG5cdC8vIElOIGFzc2VydGlvbjogbG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRFxuXHQvLyBPVVQgYXNzZXJ0aW9uczogc3Ryc3RhcnQgPD0gd2luZG93X3NpemUtTUlOX0xPT0tBSEVBRFxuXHQvLyBBdCBsZWFzdCBvbmUgYnl0ZSBoYXMgYmVlbiByZWFkLCBvciBhdmFpbF9pbiA9PT0gMDsgcmVhZHMgYXJlXG5cdC8vIHBlcmZvcm1lZCBmb3IgYXQgbGVhc3QgdHdvIGJ5dGVzIChyZXF1aXJlZCBmb3IgdGhlIHppcCB0cmFuc2xhdGVfZW9sXG5cdC8vIG9wdGlvbiAtLSBub3Qgc3VwcG9ydGVkIGhlcmUpLlxuXHRmdW5jdGlvbiBmaWxsX3dpbmRvdygpIHtcblx0XHRsZXQgbiwgbTtcblx0XHRsZXQgcDtcblx0XHRsZXQgbW9yZTsgLy8gQW1vdW50IG9mIGZyZWUgc3BhY2UgYXQgdGhlIGVuZCBvZiB0aGUgd2luLlxuXG5cdFx0ZG8ge1xuXHRcdFx0bW9yZSA9ICh3aW5kb3dfc2l6ZSAtIGxvb2thaGVhZCAtIHN0cnN0YXJ0KTtcblxuXHRcdFx0Ly8gRGVhbCB3aXRoICFAIyQlIDY0SyBsaW1pdDpcblx0XHRcdGlmIChtb3JlID09PSAwICYmIHN0cnN0YXJ0ID09PSAwICYmIGxvb2thaGVhZCA9PT0gMCkge1xuXHRcdFx0XHRtb3JlID0gd19zaXplO1xuXHRcdFx0fSBlbHNlIGlmIChtb3JlID09IC0xKSB7XG5cdFx0XHRcdC8vIFZlcnkgdW5saWtlbHksIGJ1dCBwb3NzaWJsZSBvbiAxNiBiaXQgbWFjaGluZSBpZiBzdHJzdGFydCA9PVxuXHRcdFx0XHQvLyAwXG5cdFx0XHRcdC8vIGFuZCBsb29rYWhlYWQgPT0gMSAoaW5wdXQgZG9uZSBvbmUgYnl0ZSBhdCB0aW1lKVxuXHRcdFx0XHRtb3JlLS07XG5cblx0XHRcdFx0Ly8gSWYgdGhlIHdpbiBpcyBhbG1vc3QgZnVsbCBhbmQgdGhlcmUgaXMgaW5zdWZmaWNpZW50XG5cdFx0XHRcdC8vIGxvb2thaGVhZCxcblx0XHRcdFx0Ly8gbW92ZSB0aGUgdXBwZXIgaGFsZiB0byB0aGUgbG93ZXIgb25lIHRvIG1ha2Ugcm9vbSBpbiB0aGVcblx0XHRcdFx0Ly8gdXBwZXIgaGFsZi5cblx0XHRcdH0gZWxzZSBpZiAoc3Ryc3RhcnQgPj0gd19zaXplICsgd19zaXplIC0gTUlOX0xPT0tBSEVBRCkge1xuXHRcdFx0XHR3aW4uc2V0KHdpbi5zdWJhcnJheSh3X3NpemUsIHdfc2l6ZSArIHdfc2l6ZSksIDApO1xuXG5cdFx0XHRcdG1hdGNoX3N0YXJ0IC09IHdfc2l6ZTtcblx0XHRcdFx0c3Ryc3RhcnQgLT0gd19zaXplOyAvLyB3ZSBub3cgaGF2ZSBzdHJzdGFydCA+PSBNQVhfRElTVFxuXHRcdFx0XHRibG9ja19zdGFydCAtPSB3X3NpemU7XG5cblx0XHRcdFx0Ly8gU2xpZGUgdGhlIGhhc2ggdGFibGUgKGNvdWxkIGJlIGF2b2lkZWQgd2l0aCAzMiBiaXQgdmFsdWVzXG5cdFx0XHRcdC8vIGF0IHRoZSBleHBlbnNlIG9mIG1lbW9yeSB1c2FnZSkuIFdlIHNsaWRlIGV2ZW4gd2hlbiBsZXZlbCA9PVxuXHRcdFx0XHQvLyAwXG5cdFx0XHRcdC8vIHRvIGtlZXAgdGhlIGhhc2ggdGFibGUgY29uc2lzdGVudCBpZiB3ZSBzd2l0Y2ggYmFjayB0byBsZXZlbFxuXHRcdFx0XHQvLyA+IDBcblx0XHRcdFx0Ly8gbGF0ZXIuIChVc2luZyBsZXZlbCAwIHBlcm1hbmVudGx5IGlzIG5vdCBhbiBvcHRpbWFsIHVzYWdlIG9mXG5cdFx0XHRcdC8vIHpsaWIsIHNvIHdlIGRvbid0IGNhcmUgYWJvdXQgdGhpcyBwYXRob2xvZ2ljYWwgY2FzZS4pXG5cblx0XHRcdFx0biA9IGhhc2hfc2l6ZTtcblx0XHRcdFx0cCA9IG47XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRtID0gKGhlYWRbLS1wXSAmIDB4ZmZmZik7XG5cdFx0XHRcdFx0aGVhZFtwXSA9IChtID49IHdfc2l6ZSA/IG0gLSB3X3NpemUgOiAwKTtcblx0XHRcdFx0fSB3aGlsZSAoLS1uICE9PSAwKTtcblxuXHRcdFx0XHRuID0gd19zaXplO1xuXHRcdFx0XHRwID0gbjtcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdG0gPSAocHJldlstLXBdICYgMHhmZmZmKTtcblx0XHRcdFx0XHRwcmV2W3BdID0gKG0gPj0gd19zaXplID8gbSAtIHdfc2l6ZSA6IDApO1xuXHRcdFx0XHRcdC8vIElmIG4gaXMgbm90IG9uIGFueSBoYXNoIGNoYWluLCBwcmV2W25dIGlzIGdhcmJhZ2UgYnV0XG5cdFx0XHRcdFx0Ly8gaXRzIHZhbHVlIHdpbGwgbmV2ZXIgYmUgdXNlZC5cblx0XHRcdFx0fSB3aGlsZSAoLS1uICE9PSAwKTtcblx0XHRcdFx0bW9yZSArPSB3X3NpemU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChzdHJtLmF2YWlsX2luID09PSAwKVxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdC8vIElmIHRoZXJlIHdhcyBubyBzbGlkaW5nOlxuXHRcdFx0Ly8gc3Ryc3RhcnQgPD0gV1NJWkUrTUFYX0RJU1QtMSAmJiBsb29rYWhlYWQgPD0gTUlOX0xPT0tBSEVBRCAtIDEgJiZcblx0XHRcdC8vIG1vcmUgPT0gd2luZG93X3NpemUgLSBsb29rYWhlYWQgLSBzdHJzdGFydFxuXHRcdFx0Ly8gPT4gbW9yZSA+PSB3aW5kb3dfc2l6ZSAtIChNSU5fTE9PS0FIRUFELTEgKyBXU0laRSArIE1BWF9ESVNULTEpXG5cdFx0XHQvLyA9PiBtb3JlID49IHdpbmRvd19zaXplIC0gMipXU0laRSArIDJcblx0XHRcdC8vIEluIHRoZSBCSUdfTUVNIG9yIE1NQVAgY2FzZSAobm90IHlldCBzdXBwb3J0ZWQpLFxuXHRcdFx0Ly8gd2luZG93X3NpemUgPT0gaW5wdXRfc2l6ZSArIE1JTl9MT09LQUhFQUQgJiZcblx0XHRcdC8vIHN0cnN0YXJ0ICsgcy0+bG9va2FoZWFkIDw9IGlucHV0X3NpemUgPT4gbW9yZSA+PSBNSU5fTE9PS0FIRUFELlxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCB3aW5kb3dfc2l6ZSA9PSAyKldTSVpFIHNvIG1vcmUgPj0gMi5cblx0XHRcdC8vIElmIHRoZXJlIHdhcyBzbGlkaW5nLCBtb3JlID49IFdTSVpFLiBTbyBpbiBhbGwgY2FzZXMsIG1vcmUgPj0gMi5cblxuXHRcdFx0biA9IHN0cm0ucmVhZF9idWYod2luLCBzdHJzdGFydCArIGxvb2thaGVhZCwgbW9yZSk7XG5cdFx0XHRsb29rYWhlYWQgKz0gbjtcblxuXHRcdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgaGFzaCB2YWx1ZSBub3cgdGhhdCB3ZSBoYXZlIHNvbWUgaW5wdXQ6XG5cdFx0XHRpZiAobG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuXHRcdFx0XHRpbnNfaCA9IHdpbltzdHJzdGFydF0gJiAweGZmO1xuXHRcdFx0XHRpbnNfaCA9ICgoKGluc19oKSA8PCBoYXNoX3NoaWZ0KSBeICh3aW5bc3Ryc3RhcnQgKyAxXSAmIDB4ZmYpKSAmIGhhc2hfbWFzaztcblx0XHRcdH1cblx0XHRcdC8vIElmIHRoZSB3aG9sZSBpbnB1dCBoYXMgbGVzcyB0aGFuIE1JTl9NQVRDSCBieXRlcywgaW5zX2ggaXNcblx0XHRcdC8vIGdhcmJhZ2UsXG5cdFx0XHQvLyBidXQgdGhpcyBpcyBub3QgaW1wb3J0YW50IHNpbmNlIG9ubHkgbGl0ZXJhbCBieXRlcyB3aWxsIGJlXG5cdFx0XHQvLyBlbWl0dGVkLlxuXHRcdH0gd2hpbGUgKGxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCk7XG5cdH1cblxuXHQvLyBDb3B5IHdpdGhvdXQgY29tcHJlc3Npb24gYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sXG5cdC8vIHJldHVyblxuXHQvLyB0aGUgY3VycmVudCBibG9jayBzdGF0ZS5cblx0Ly8gVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBpbnNlcnQgbmV3IHN0cmluZ3MgaW4gdGhlIGRpY3Rpb25hcnkgc2luY2Vcblx0Ly8gdW5jb21wcmVzc2libGUgZGF0YSBpcyBwcm9iYWJseSBub3QgdXNlZnVsLiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWRcblx0Ly8gb25seSBmb3IgdGhlIGxldmVsPTAgY29tcHJlc3Npb24gb3B0aW9uLlxuXHQvLyBOT1RFOiB0aGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBvcHRpbWl6ZWQgdG8gYXZvaWQgZXh0cmEgY29weWluZyBmcm9tXG5cdC8vIHdpbiB0byBwZW5kaW5nX2J1Zi5cblx0ZnVuY3Rpb24gZGVmbGF0ZV9zdG9yZWQoZmx1c2gpIHtcblx0XHQvLyBTdG9yZWQgYmxvY2tzIGFyZSBsaW1pdGVkIHRvIDB4ZmZmZiBieXRlcywgcGVuZGluZ19idWYgaXMgbGltaXRlZFxuXHRcdC8vIHRvIHBlbmRpbmdfYnVmX3NpemUsIGFuZCBlYWNoIHN0b3JlZCBibG9jayBoYXMgYSA1IGJ5dGUgaGVhZGVyOlxuXG5cdFx0bGV0IG1heF9ibG9ja19zaXplID0gMHhmZmZmO1xuXHRcdGxldCBtYXhfc3RhcnQ7XG5cblx0XHRpZiAobWF4X2Jsb2NrX3NpemUgPiBwZW5kaW5nX2J1Zl9zaXplIC0gNSkge1xuXHRcdFx0bWF4X2Jsb2NrX3NpemUgPSBwZW5kaW5nX2J1Zl9zaXplIC0gNTtcblx0XHR9XG5cblx0XHQvLyBDb3B5IGFzIG11Y2ggYXMgcG9zc2libGUgZnJvbSBpbnB1dCB0byBvdXRwdXQ6XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuXHRcdHdoaWxlICh0cnVlKSB7XG5cdFx0XHQvLyBGaWxsIHRoZSB3aW4gYXMgbXVjaCBhcyBwb3NzaWJsZTpcblx0XHRcdGlmIChsb29rYWhlYWQgPD0gMSkge1xuXHRcdFx0XHRmaWxsX3dpbmRvdygpO1xuXHRcdFx0XHRpZiAobG9va2FoZWFkID09PSAwICYmIGZsdXNoID09IFpfTk9fRkxVU0gpXG5cdFx0XHRcdFx0cmV0dXJuIE5lZWRNb3JlO1xuXHRcdFx0XHRpZiAobG9va2FoZWFkID09PSAwKVxuXHRcdFx0XHRcdGJyZWFrOyAvLyBmbHVzaCB0aGUgY3VycmVudCBibG9ja1xuXHRcdFx0fVxuXG5cdFx0XHRzdHJzdGFydCArPSBsb29rYWhlYWQ7XG5cdFx0XHRsb29rYWhlYWQgPSAwO1xuXG5cdFx0XHQvLyBFbWl0IGEgc3RvcmVkIGJsb2NrIGlmIHBlbmRpbmdfYnVmIHdpbGwgYmUgZnVsbDpcblx0XHRcdG1heF9zdGFydCA9IGJsb2NrX3N0YXJ0ICsgbWF4X2Jsb2NrX3NpemU7XG5cdFx0XHRpZiAoc3Ryc3RhcnQgPT09IDAgfHwgc3Ryc3RhcnQgPj0gbWF4X3N0YXJ0KSB7XG5cdFx0XHRcdC8vIHN0cnN0YXJ0ID09PSAwIGlzIHBvc3NpYmxlIHdoZW4gd3JhcGFyb3VuZCBvbiAxNi1iaXQgbWFjaGluZVxuXHRcdFx0XHRsb29rYWhlYWQgPSAoc3Ryc3RhcnQgLSBtYXhfc3RhcnQpO1xuXHRcdFx0XHRzdHJzdGFydCA9IG1heF9zdGFydDtcblxuXHRcdFx0XHRmbHVzaF9ibG9ja19vbmx5KGZhbHNlKTtcblx0XHRcdFx0aWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKVxuXHRcdFx0XHRcdHJldHVybiBOZWVkTW9yZTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGbHVzaCBpZiB3ZSBtYXkgaGF2ZSB0byBzbGlkZSwgb3RoZXJ3aXNlIGJsb2NrX3N0YXJ0IG1heSBiZWNvbWVcblx0XHRcdC8vIG5lZ2F0aXZlIGFuZCB0aGUgZGF0YSB3aWxsIGJlIGdvbmU6XG5cdFx0XHRpZiAoc3Ryc3RhcnQgLSBibG9ja19zdGFydCA+PSB3X3NpemUgLSBNSU5fTE9PS0FIRUFEKSB7XG5cdFx0XHRcdGZsdXNoX2Jsb2NrX29ubHkoZmFsc2UpO1xuXHRcdFx0XHRpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApXG5cdFx0XHRcdFx0cmV0dXJuIE5lZWRNb3JlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZsdXNoX2Jsb2NrX29ubHkoZmx1c2ggPT0gWl9GSU5JU0gpO1xuXHRcdGlmIChzdHJtLmF2YWlsX291dCA9PT0gMClcblx0XHRcdHJldHVybiAoZmx1c2ggPT0gWl9GSU5JU0gpID8gRmluaXNoU3RhcnRlZCA6IE5lZWRNb3JlO1xuXG5cdFx0cmV0dXJuIGZsdXNoID09IFpfRklOSVNIID8gRmluaXNoRG9uZSA6IEJsb2NrRG9uZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGxvbmdlc3RfbWF0Y2goY3VyX21hdGNoKSB7XG5cdFx0bGV0IGNoYWluX2xlbmd0aCA9IG1heF9jaGFpbl9sZW5ndGg7IC8vIG1heCBoYXNoIGNoYWluIGxlbmd0aFxuXHRcdGxldCBzY2FuID0gc3Ryc3RhcnQ7IC8vIGN1cnJlbnQgc3RyaW5nXG5cdFx0bGV0IG1hdGNoOyAvLyBtYXRjaGVkIHN0cmluZ1xuXHRcdGxldCBsZW47IC8vIGxlbmd0aCBvZiBjdXJyZW50IG1hdGNoXG5cdFx0bGV0IGJlc3RfbGVuID0gcHJldl9sZW5ndGg7IC8vIGJlc3QgbWF0Y2ggbGVuZ3RoIHNvIGZhclxuXHRcdGNvbnN0IGxpbWl0ID0gc3Ryc3RhcnQgPiAod19zaXplIC0gTUlOX0xPT0tBSEVBRCkgPyBzdHJzdGFydCAtICh3X3NpemUgLSBNSU5fTE9PS0FIRUFEKSA6IDA7XG5cdFx0bGV0IF9uaWNlX21hdGNoID0gbmljZV9tYXRjaDtcblxuXHRcdC8vIFN0b3Agd2hlbiBjdXJfbWF0Y2ggYmVjb21lcyA8PSBsaW1pdC4gVG8gc2ltcGxpZnkgdGhlIGNvZGUsXG5cdFx0Ly8gd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZyBvZiB3aW4gaW5kZXggMC5cblxuXHRcdGNvbnN0IHdtYXNrID0gd19tYXNrO1xuXG5cdFx0Y29uc3Qgc3RyZW5kID0gc3Ryc3RhcnQgKyBNQVhfTUFUQ0g7XG5cdFx0bGV0IHNjYW5fZW5kMSA9IHdpbltzY2FuICsgYmVzdF9sZW4gLSAxXTtcblx0XHRsZXQgc2Nhbl9lbmQgPSB3aW5bc2NhbiArIGJlc3RfbGVuXTtcblxuXHRcdC8vIFRoZSBjb2RlIGlzIG9wdGltaXplZCBmb3IgSEFTSF9CSVRTID49IDggYW5kIE1BWF9NQVRDSC0yIG11bHRpcGxlIG9mXG5cdFx0Ly8gMTYuXG5cdFx0Ly8gSXQgaXMgZWFzeSB0byBnZXQgcmlkIG9mIHRoaXMgb3B0aW1pemF0aW9uIGlmIG5lY2Vzc2FyeS5cblxuXHRcdC8vIERvIG5vdCB3YXN0ZSB0b28gbXVjaCB0aW1lIGlmIHdlIGFscmVhZHkgaGF2ZSBhIGdvb2QgbWF0Y2g6XG5cdFx0aWYgKHByZXZfbGVuZ3RoID49IGdvb2RfbWF0Y2gpIHtcblx0XHRcdGNoYWluX2xlbmd0aCA+Pj0gMjtcblx0XHR9XG5cblx0XHQvLyBEbyBub3QgbG9vayBmb3IgbWF0Y2hlcyBiZXlvbmQgdGhlIGVuZCBvZiB0aGUgaW5wdXQuIFRoaXMgaXNcblx0XHQvLyBuZWNlc3Nhcnlcblx0XHQvLyB0byBtYWtlIGRlZmxhdGUgZGV0ZXJtaW5pc3RpYy5cblx0XHRpZiAoX25pY2VfbWF0Y2ggPiBsb29rYWhlYWQpXG5cdFx0XHRfbmljZV9tYXRjaCA9IGxvb2thaGVhZDtcblxuXHRcdGRvIHtcblx0XHRcdG1hdGNoID0gY3VyX21hdGNoO1xuXG5cdFx0XHQvLyBTa2lwIHRvIG5leHQgbWF0Y2ggaWYgdGhlIG1hdGNoIGxlbmd0aCBjYW5ub3QgaW5jcmVhc2Vcblx0XHRcdC8vIG9yIGlmIHRoZSBtYXRjaCBsZW5ndGggaXMgbGVzcyB0aGFuIDI6XG5cdFx0XHRpZiAod2luW21hdGNoICsgYmVzdF9sZW5dICE9IHNjYW5fZW5kIHx8IHdpblttYXRjaCArIGJlc3RfbGVuIC0gMV0gIT0gc2Nhbl9lbmQxIHx8IHdpblttYXRjaF0gIT0gd2luW3NjYW5dXG5cdFx0XHRcdHx8IHdpblsrK21hdGNoXSAhPSB3aW5bc2NhbiArIDFdKVxuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0Ly8gVGhlIGNoZWNrIGF0IGJlc3RfbGVuLTEgY2FuIGJlIHJlbW92ZWQgYmVjYXVzZSBpdCB3aWxsIGJlIG1hZGVcblx0XHRcdC8vIGFnYWluIGxhdGVyLiAoVGhpcyBoZXVyaXN0aWMgaXMgbm90IGFsd2F5cyBhIHdpbi4pXG5cdFx0XHQvLyBJdCBpcyBub3QgbmVjZXNzYXJ5IHRvIGNvbXBhcmUgc2NhblsyXSBhbmQgbWF0Y2hbMl0gc2luY2UgdGhleVxuXHRcdFx0Ly8gYXJlIGFsd2F5cyBlcXVhbCB3aGVuIHRoZSBvdGhlciBieXRlcyBtYXRjaCwgZ2l2ZW4gdGhhdFxuXHRcdFx0Ly8gdGhlIGhhc2gga2V5cyBhcmUgZXF1YWwgYW5kIHRoYXQgSEFTSF9CSVRTID49IDguXG5cdFx0XHRzY2FuICs9IDI7XG5cdFx0XHRtYXRjaCsrO1xuXG5cdFx0XHQvLyBXZSBjaGVjayBmb3IgaW5zdWZmaWNpZW50IGxvb2thaGVhZCBvbmx5IGV2ZXJ5IDh0aCBjb21wYXJpc29uO1xuXHRcdFx0Ly8gdGhlIDI1NnRoIGNoZWNrIHdpbGwgYmUgbWFkZSBhdCBzdHJzdGFydCsyNTguXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcblx0XHRcdGRvIHtcblx0XHRcdFx0Ly8gZW1wdHkgYmxvY2tcblx0XHRcdH0gd2hpbGUgKHdpblsrK3NjYW5dID09IHdpblsrK21hdGNoXSAmJiB3aW5bKytzY2FuXSA9PSB3aW5bKyttYXRjaF0gJiYgd2luWysrc2Nhbl0gPT0gd2luWysrbWF0Y2hdXG5cdFx0XHQmJiB3aW5bKytzY2FuXSA9PSB3aW5bKyttYXRjaF0gJiYgd2luWysrc2Nhbl0gPT0gd2luWysrbWF0Y2hdICYmIHdpblsrK3NjYW5dID09IHdpblsrK21hdGNoXVxuXHRcdFx0JiYgd2luWysrc2Nhbl0gPT0gd2luWysrbWF0Y2hdICYmIHdpblsrK3NjYW5dID09IHdpblsrK21hdGNoXSAmJiBzY2FuIDwgc3RyZW5kKTtcblxuXHRcdFx0bGVuID0gTUFYX01BVENIIC0gKHN0cmVuZCAtIHNjYW4pO1xuXHRcdFx0c2NhbiA9IHN0cmVuZCAtIE1BWF9NQVRDSDtcblxuXHRcdFx0aWYgKGxlbiA+IGJlc3RfbGVuKSB7XG5cdFx0XHRcdG1hdGNoX3N0YXJ0ID0gY3VyX21hdGNoO1xuXHRcdFx0XHRiZXN0X2xlbiA9IGxlbjtcblx0XHRcdFx0aWYgKGxlbiA+PSBfbmljZV9tYXRjaClcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0c2Nhbl9lbmQxID0gd2luW3NjYW4gKyBiZXN0X2xlbiAtIDFdO1xuXHRcdFx0XHRzY2FuX2VuZCA9IHdpbltzY2FuICsgYmVzdF9sZW5dO1xuXHRcdFx0fVxuXG5cdFx0fSB3aGlsZSAoKGN1cl9tYXRjaCA9IChwcmV2W2N1cl9tYXRjaCAmIHdtYXNrXSAmIDB4ZmZmZikpID4gbGltaXQgJiYgLS1jaGFpbl9sZW5ndGggIT09IDApO1xuXG5cdFx0aWYgKGJlc3RfbGVuIDw9IGxvb2thaGVhZClcblx0XHRcdHJldHVybiBiZXN0X2xlbjtcblx0XHRyZXR1cm4gbG9va2FoZWFkO1xuXHR9XG5cblx0Ly8gQ29tcHJlc3MgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sIHJldHVybiB0aGUgY3VycmVudFxuXHQvLyBibG9jayBzdGF0ZS5cblx0Ly8gVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBwZXJmb3JtIGxhenkgZXZhbHVhdGlvbiBvZiBtYXRjaGVzIGFuZCBpbnNlcnRzXG5cdC8vIG5ldyBzdHJpbmdzIGluIHRoZSBkaWN0aW9uYXJ5IG9ubHkgZm9yIHVubWF0Y2hlZCBzdHJpbmdzIG9yIGZvciBzaG9ydFxuXHQvLyBtYXRjaGVzLiBJdCBpcyB1c2VkIG9ubHkgZm9yIHRoZSBmYXN0IGNvbXByZXNzaW9uIG9wdGlvbnMuXG5cdGZ1bmN0aW9uIGRlZmxhdGVfZmFzdChmbHVzaCkge1xuXHRcdC8vIHNob3J0IGhhc2hfaGVhZCA9IDA7IC8vIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW5cblx0XHRsZXQgaGFzaF9oZWFkID0gMDsgLy8gaGVhZCBvZiB0aGUgaGFzaCBjaGFpblxuXHRcdGxldCBiZmx1c2g7IC8vIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZFxuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuXHRcdHdoaWxlICh0cnVlKSB7XG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSBhbHdheXMgaGF2ZSBlbm91Z2ggbG9va2FoZWFkLCBleGNlcHRcblx0XHRcdC8vIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG5cdFx0XHQvLyBmb3IgdGhlIG5leHQgbWF0Y2gsIHBsdXMgTUlOX01BVENIIGJ5dGVzIHRvIGluc2VydCB0aGVcblx0XHRcdC8vIHN0cmluZyBmb2xsb3dpbmcgdGhlIG5leHQgbWF0Y2guXG5cdFx0XHRpZiAobG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCkge1xuXHRcdFx0XHRmaWxsX3dpbmRvdygpO1xuXHRcdFx0XHRpZiAobG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCAmJiBmbHVzaCA9PSBaX05PX0ZMVVNIKSB7XG5cdFx0XHRcdFx0cmV0dXJuIE5lZWRNb3JlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChsb29rYWhlYWQgPT09IDApXG5cdFx0XHRcdFx0YnJlYWs7IC8vIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrXG5cdFx0XHR9XG5cblx0XHRcdC8vIEluc2VydCB0aGUgc3RyaW5nIHdpbltzdHJzdGFydCAuLiBzdHJzdGFydCsyXSBpbiB0aGVcblx0XHRcdC8vIGRpY3Rpb25hcnksIGFuZCBzZXQgaGFzaF9oZWFkIHRvIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluOlxuXHRcdFx0aWYgKGxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcblx0XHRcdFx0aW5zX2ggPSAoKChpbnNfaCkgPDwgaGFzaF9zaGlmdCkgXiAod2luWyhzdHJzdGFydCkgKyAoTUlOX01BVENIIC0gMSldICYgMHhmZikpICYgaGFzaF9tYXNrO1xuXG5cdFx0XHRcdC8vIHByZXZbc3Ryc3RhcnQmd19tYXNrXT1oYXNoX2hlYWQ9aGVhZFtpbnNfaF07XG5cdFx0XHRcdGhhc2hfaGVhZCA9IChoZWFkW2luc19oXSAmIDB4ZmZmZik7XG5cdFx0XHRcdHByZXZbc3Ryc3RhcnQgJiB3X21hc2tdID0gaGVhZFtpbnNfaF07XG5cdFx0XHRcdGhlYWRbaW5zX2hdID0gc3Ryc3RhcnQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZpbmQgdGhlIGxvbmdlc3QgbWF0Y2gsIGRpc2NhcmRpbmcgdGhvc2UgPD0gcHJldl9sZW5ndGguXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50IHdlIGhhdmUgYWx3YXlzIG1hdGNoX2xlbmd0aCA8IE1JTl9NQVRDSFxuXG5cdFx0XHRpZiAoaGFzaF9oZWFkICE9PSAwICYmICgoc3Ryc3RhcnQgLSBoYXNoX2hlYWQpICYgMHhmZmZmKSA8PSB3X3NpemUgLSBNSU5fTE9PS0FIRUFEKSB7XG5cdFx0XHRcdC8vIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLCB3ZSBwcmV2ZW50IG1hdGNoZXMgd2l0aCB0aGUgc3RyaW5nXG5cdFx0XHRcdC8vIG9mIHdpbiBpbmRleCAwIChpbiBwYXJ0aWN1bGFyIHdlIGhhdmUgdG8gYXZvaWQgYSBtYXRjaFxuXHRcdFx0XHQvLyBvZiB0aGUgc3RyaW5nIHdpdGggaXRzZWxmIGF0IHRoZSBzdGFydCBvZiB0aGUgaW5wdXQgZmlsZSkuXG5cdFx0XHRcdGlmIChzdHJhdGVneSAhPSBaX0hVRkZNQU5fT05MWSkge1xuXHRcdFx0XHRcdG1hdGNoX2xlbmd0aCA9IGxvbmdlc3RfbWF0Y2goaGFzaF9oZWFkKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBsb25nZXN0X21hdGNoKCkgc2V0cyBtYXRjaF9zdGFydFxuXHRcdFx0fVxuXHRcdFx0aWYgKG1hdGNoX2xlbmd0aCA+PSBNSU5fTUFUQ0gpIHtcblx0XHRcdFx0Ly8gY2hlY2tfbWF0Y2goc3Ryc3RhcnQsIG1hdGNoX3N0YXJ0LCBtYXRjaF9sZW5ndGgpO1xuXG5cdFx0XHRcdGJmbHVzaCA9IF90cl90YWxseShzdHJzdGFydCAtIG1hdGNoX3N0YXJ0LCBtYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gpO1xuXG5cdFx0XHRcdGxvb2thaGVhZCAtPSBtYXRjaF9sZW5ndGg7XG5cblx0XHRcdFx0Ly8gSW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBoYXNoIHRhYmxlIG9ubHkgaWYgdGhlIG1hdGNoIGxlbmd0aFxuXHRcdFx0XHQvLyBpcyBub3QgdG9vIGxhcmdlLiBUaGlzIHNhdmVzIHRpbWUgYnV0IGRlZ3JhZGVzIGNvbXByZXNzaW9uLlxuXHRcdFx0XHRpZiAobWF0Y2hfbGVuZ3RoIDw9IG1heF9sYXp5X21hdGNoICYmIGxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcblx0XHRcdFx0XHRtYXRjaF9sZW5ndGgtLTsgLy8gc3RyaW5nIGF0IHN0cnN0YXJ0IGFscmVhZHkgaW4gaGFzaCB0YWJsZVxuXHRcdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRcdHN0cnN0YXJ0Kys7XG5cblx0XHRcdFx0XHRcdGluc19oID0gKChpbnNfaCA8PCBoYXNoX3NoaWZ0KSBeICh3aW5bKHN0cnN0YXJ0KSArIChNSU5fTUFUQ0ggLSAxKV0gJiAweGZmKSkgJiBoYXNoX21hc2s7XG5cdFx0XHRcdFx0XHQvLyBwcmV2W3N0cnN0YXJ0JndfbWFza109aGFzaF9oZWFkPWhlYWRbaW5zX2hdO1xuXHRcdFx0XHRcdFx0aGFzaF9oZWFkID0gKGhlYWRbaW5zX2hdICYgMHhmZmZmKTtcblx0XHRcdFx0XHRcdHByZXZbc3Ryc3RhcnQgJiB3X21hc2tdID0gaGVhZFtpbnNfaF07XG5cdFx0XHRcdFx0XHRoZWFkW2luc19oXSA9IHN0cnN0YXJ0O1xuXG5cdFx0XHRcdFx0XHQvLyBzdHJzdGFydCBuZXZlciBleGNlZWRzIFdTSVpFLU1BWF9NQVRDSCwgc28gdGhlcmUgYXJlXG5cdFx0XHRcdFx0XHQvLyBhbHdheXMgTUlOX01BVENIIGJ5dGVzIGFoZWFkLlxuXHRcdFx0XHRcdH0gd2hpbGUgKC0tbWF0Y2hfbGVuZ3RoICE9PSAwKTtcblx0XHRcdFx0XHRzdHJzdGFydCsrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0cnN0YXJ0ICs9IG1hdGNoX2xlbmd0aDtcblx0XHRcdFx0XHRtYXRjaF9sZW5ndGggPSAwO1xuXHRcdFx0XHRcdGluc19oID0gd2luW3N0cnN0YXJ0XSAmIDB4ZmY7XG5cblx0XHRcdFx0XHRpbnNfaCA9ICgoKGluc19oKSA8PCBoYXNoX3NoaWZ0KSBeICh3aW5bc3Ryc3RhcnQgKyAxXSAmIDB4ZmYpKSAmIGhhc2hfbWFzaztcblx0XHRcdFx0XHQvLyBJZiBsb29rYWhlYWQgPCBNSU5fTUFUQ0gsIGluc19oIGlzIGdhcmJhZ2UsIGJ1dCBpdCBkb2VzXG5cdFx0XHRcdFx0Ly8gbm90XG5cdFx0XHRcdFx0Ly8gbWF0dGVyIHNpbmNlIGl0IHdpbGwgYmUgcmVjb21wdXRlZCBhdCBuZXh0IGRlZmxhdGUgY2FsbC5cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gTm8gbWF0Y2gsIG91dHB1dCBhIGxpdGVyYWwgYnl0ZVxuXG5cdFx0XHRcdGJmbHVzaCA9IF90cl90YWxseSgwLCB3aW5bc3Ryc3RhcnRdICYgMHhmZik7XG5cdFx0XHRcdGxvb2thaGVhZC0tO1xuXHRcdFx0XHRzdHJzdGFydCsrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGJmbHVzaCkge1xuXG5cdFx0XHRcdGZsdXNoX2Jsb2NrX29ubHkoZmFsc2UpO1xuXHRcdFx0XHRpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApXG5cdFx0XHRcdFx0cmV0dXJuIE5lZWRNb3JlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZsdXNoX2Jsb2NrX29ubHkoZmx1c2ggPT0gWl9GSU5JU0gpO1xuXHRcdGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuXHRcdFx0aWYgKGZsdXNoID09IFpfRklOSVNIKVxuXHRcdFx0XHRyZXR1cm4gRmluaXNoU3RhcnRlZDtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIE5lZWRNb3JlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmx1c2ggPT0gWl9GSU5JU0ggPyBGaW5pc2hEb25lIDogQmxvY2tEb25lO1xuXHR9XG5cblx0Ly8gU2FtZSBhcyBhYm92ZSwgYnV0IGFjaGlldmVzIGJldHRlciBjb21wcmVzc2lvbi4gV2UgdXNlIGEgbGF6eVxuXHQvLyBldmFsdWF0aW9uIGZvciBtYXRjaGVzOiBhIG1hdGNoIGlzIGZpbmFsbHkgYWRvcHRlZCBvbmx5IGlmIHRoZXJlIGlzXG5cdC8vIG5vIGJldHRlciBtYXRjaCBhdCB0aGUgbmV4dCB3aW4gcG9zaXRpb24uXG5cdGZ1bmN0aW9uIGRlZmxhdGVfc2xvdyhmbHVzaCkge1xuXHRcdC8vIHNob3J0IGhhc2hfaGVhZCA9IDA7IC8vIGhlYWQgb2YgaGFzaCBjaGFpblxuXHRcdGxldCBoYXNoX2hlYWQgPSAwOyAvLyBoZWFkIG9mIGhhc2ggY2hhaW5cblx0XHRsZXQgYmZsdXNoOyAvLyBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWRcblx0XHRsZXQgbWF4X2luc2VydDtcblxuXHRcdC8vIFByb2Nlc3MgdGhlIGlucHV0IGJsb2NrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cblx0XHR3aGlsZSAodHJ1ZSkge1xuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIGhhdmUgZW5vdWdoIGxvb2thaGVhZCwgZXhjZXB0XG5cdFx0XHQvLyBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlc1xuXHRcdFx0Ly8gZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXG5cdFx0XHQvLyBzdHJpbmcgZm9sbG93aW5nIHRoZSBuZXh0IG1hdGNoLlxuXG5cdFx0XHRpZiAobG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCkge1xuXHRcdFx0XHRmaWxsX3dpbmRvdygpO1xuXHRcdFx0XHRpZiAobG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCAmJiBmbHVzaCA9PSBaX05PX0ZMVVNIKSB7XG5cdFx0XHRcdFx0cmV0dXJuIE5lZWRNb3JlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChsb29rYWhlYWQgPT09IDApXG5cdFx0XHRcdFx0YnJlYWs7IC8vIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrXG5cdFx0XHR9XG5cblx0XHRcdC8vIEluc2VydCB0aGUgc3RyaW5nIHdpbltzdHJzdGFydCAuLiBzdHJzdGFydCsyXSBpbiB0aGVcblx0XHRcdC8vIGRpY3Rpb25hcnksIGFuZCBzZXQgaGFzaF9oZWFkIHRvIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluOlxuXG5cdFx0XHRpZiAobG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuXHRcdFx0XHRpbnNfaCA9ICgoKGluc19oKSA8PCBoYXNoX3NoaWZ0KSBeICh3aW5bKHN0cnN0YXJ0KSArIChNSU5fTUFUQ0ggLSAxKV0gJiAweGZmKSkgJiBoYXNoX21hc2s7XG5cdFx0XHRcdC8vIHByZXZbc3Ryc3RhcnQmd19tYXNrXT1oYXNoX2hlYWQ9aGVhZFtpbnNfaF07XG5cdFx0XHRcdGhhc2hfaGVhZCA9IChoZWFkW2luc19oXSAmIDB4ZmZmZik7XG5cdFx0XHRcdHByZXZbc3Ryc3RhcnQgJiB3X21hc2tdID0gaGVhZFtpbnNfaF07XG5cdFx0XHRcdGhlYWRbaW5zX2hdID0gc3Ryc3RhcnQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZpbmQgdGhlIGxvbmdlc3QgbWF0Y2gsIGRpc2NhcmRpbmcgdGhvc2UgPD0gcHJldl9sZW5ndGguXG5cdFx0XHRwcmV2X2xlbmd0aCA9IG1hdGNoX2xlbmd0aDtcblx0XHRcdHByZXZfbWF0Y2ggPSBtYXRjaF9zdGFydDtcblx0XHRcdG1hdGNoX2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG5cblx0XHRcdGlmIChoYXNoX2hlYWQgIT09IDAgJiYgcHJldl9sZW5ndGggPCBtYXhfbGF6eV9tYXRjaCAmJiAoKHN0cnN0YXJ0IC0gaGFzaF9oZWFkKSAmIDB4ZmZmZikgPD0gd19zaXplIC0gTUlOX0xPT0tBSEVBRCkge1xuXHRcdFx0XHQvLyBUbyBzaW1wbGlmeSB0aGUgY29kZSwgd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZ1xuXHRcdFx0XHQvLyBvZiB3aW4gaW5kZXggMCAoaW4gcGFydGljdWxhciB3ZSBoYXZlIHRvIGF2b2lkIGEgbWF0Y2hcblx0XHRcdFx0Ly8gb2YgdGhlIHN0cmluZyB3aXRoIGl0c2VsZiBhdCB0aGUgc3RhcnQgb2YgdGhlIGlucHV0IGZpbGUpLlxuXG5cdFx0XHRcdGlmIChzdHJhdGVneSAhPSBaX0hVRkZNQU5fT05MWSkge1xuXHRcdFx0XHRcdG1hdGNoX2xlbmd0aCA9IGxvbmdlc3RfbWF0Y2goaGFzaF9oZWFkKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBsb25nZXN0X21hdGNoKCkgc2V0cyBtYXRjaF9zdGFydFxuXG5cdFx0XHRcdGlmIChtYXRjaF9sZW5ndGggPD0gNSAmJiAoc3RyYXRlZ3kgPT0gWl9GSUxURVJFRCB8fCAobWF0Y2hfbGVuZ3RoID09IE1JTl9NQVRDSCAmJiBzdHJzdGFydCAtIG1hdGNoX3N0YXJ0ID4gNDA5NikpKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBwcmV2X21hdGNoIGlzIGFsc28gTUlOX01BVENILCBtYXRjaF9zdGFydCBpcyBnYXJiYWdlXG5cdFx0XHRcdFx0Ly8gYnV0IHdlIHdpbGwgaWdub3JlIHRoZSBjdXJyZW50IG1hdGNoIGFueXdheS5cblx0XHRcdFx0XHRtYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoZXJlIHdhcyBhIG1hdGNoIGF0IHRoZSBwcmV2aW91cyBzdGVwIGFuZCB0aGUgY3VycmVudFxuXHRcdFx0Ly8gbWF0Y2ggaXMgbm90IGJldHRlciwgb3V0cHV0IHRoZSBwcmV2aW91cyBtYXRjaDpcblx0XHRcdGlmIChwcmV2X2xlbmd0aCA+PSBNSU5fTUFUQ0ggJiYgbWF0Y2hfbGVuZ3RoIDw9IHByZXZfbGVuZ3RoKSB7XG5cdFx0XHRcdG1heF9pbnNlcnQgPSBzdHJzdGFydCArIGxvb2thaGVhZCAtIE1JTl9NQVRDSDtcblx0XHRcdFx0Ly8gRG8gbm90IGluc2VydCBzdHJpbmdzIGluIGhhc2ggdGFibGUgYmV5b25kIHRoaXMuXG5cblx0XHRcdFx0Ly8gY2hlY2tfbWF0Y2goc3Ryc3RhcnQtMSwgcHJldl9tYXRjaCwgcHJldl9sZW5ndGgpO1xuXG5cdFx0XHRcdGJmbHVzaCA9IF90cl90YWxseShzdHJzdGFydCAtIDEgLSBwcmV2X21hdGNoLCBwcmV2X2xlbmd0aCAtIE1JTl9NQVRDSCk7XG5cblx0XHRcdFx0Ly8gSW5zZXJ0IGluIGhhc2ggdGFibGUgYWxsIHN0cmluZ3MgdXAgdG8gdGhlIGVuZCBvZiB0aGUgbWF0Y2guXG5cdFx0XHRcdC8vIHN0cnN0YXJ0LTEgYW5kIHN0cnN0YXJ0IGFyZSBhbHJlYWR5IGluc2VydGVkLiBJZiB0aGVyZSBpcyBub3Rcblx0XHRcdFx0Ly8gZW5vdWdoIGxvb2thaGVhZCwgdGhlIGxhc3QgdHdvIHN0cmluZ3MgYXJlIG5vdCBpbnNlcnRlZCBpblxuXHRcdFx0XHQvLyB0aGUgaGFzaCB0YWJsZS5cblx0XHRcdFx0bG9va2FoZWFkIC09IHByZXZfbGVuZ3RoIC0gMTtcblx0XHRcdFx0cHJldl9sZW5ndGggLT0gMjtcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICgrK3N0cnN0YXJ0IDw9IG1heF9pbnNlcnQpIHtcblx0XHRcdFx0XHRcdGluc19oID0gKCgoaW5zX2gpIDw8IGhhc2hfc2hpZnQpIF4gKHdpblsoc3Ryc3RhcnQpICsgKE1JTl9NQVRDSCAtIDEpXSAmIDB4ZmYpKSAmIGhhc2hfbWFzaztcblx0XHRcdFx0XHRcdC8vIHByZXZbc3Ryc3RhcnQmd19tYXNrXT1oYXNoX2hlYWQ9aGVhZFtpbnNfaF07XG5cdFx0XHRcdFx0XHRoYXNoX2hlYWQgPSAoaGVhZFtpbnNfaF0gJiAweGZmZmYpO1xuXHRcdFx0XHRcdFx0cHJldltzdHJzdGFydCAmIHdfbWFza10gPSBoZWFkW2luc19oXTtcblx0XHRcdFx0XHRcdGhlYWRbaW5zX2hdID0gc3Ryc3RhcnQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICgtLXByZXZfbGVuZ3RoICE9PSAwKTtcblx0XHRcdFx0bWF0Y2hfYXZhaWxhYmxlID0gMDtcblx0XHRcdFx0bWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcblx0XHRcdFx0c3Ryc3RhcnQrKztcblxuXHRcdFx0XHRpZiAoYmZsdXNoKSB7XG5cdFx0XHRcdFx0Zmx1c2hfYmxvY2tfb25seShmYWxzZSk7XG5cdFx0XHRcdFx0aWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKVxuXHRcdFx0XHRcdFx0cmV0dXJuIE5lZWRNb3JlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKG1hdGNoX2F2YWlsYWJsZSAhPT0gMCkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIHdhcyBubyBtYXRjaCBhdCB0aGUgcHJldmlvdXMgcG9zaXRpb24sIG91dHB1dCBhXG5cdFx0XHRcdC8vIHNpbmdsZSBsaXRlcmFsLiBJZiB0aGVyZSB3YXMgYSBtYXRjaCBidXQgdGhlIGN1cnJlbnQgbWF0Y2hcblx0XHRcdFx0Ly8gaXMgbG9uZ2VyLCB0cnVuY2F0ZSB0aGUgcHJldmlvdXMgbWF0Y2ggdG8gYSBzaW5nbGUgbGl0ZXJhbC5cblxuXHRcdFx0XHRiZmx1c2ggPSBfdHJfdGFsbHkoMCwgd2luW3N0cnN0YXJ0IC0gMV0gJiAweGZmKTtcblxuXHRcdFx0XHRpZiAoYmZsdXNoKSB7XG5cdFx0XHRcdFx0Zmx1c2hfYmxvY2tfb25seShmYWxzZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3Ryc3RhcnQrKztcblx0XHRcdFx0bG9va2FoZWFkLS07XG5cdFx0XHRcdGlmIChzdHJtLmF2YWlsX291dCA9PT0gMClcblx0XHRcdFx0XHRyZXR1cm4gTmVlZE1vcmU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBUaGVyZSBpcyBubyBwcmV2aW91cyBtYXRjaCB0byBjb21wYXJlIHdpdGgsIHdhaXQgZm9yXG5cdFx0XHRcdC8vIHRoZSBuZXh0IHN0ZXAgdG8gZGVjaWRlLlxuXG5cdFx0XHRcdG1hdGNoX2F2YWlsYWJsZSA9IDE7XG5cdFx0XHRcdHN0cnN0YXJ0Kys7XG5cdFx0XHRcdGxvb2thaGVhZC0tO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChtYXRjaF9hdmFpbGFibGUgIT09IDApIHtcblx0XHRcdGJmbHVzaCA9IF90cl90YWxseSgwLCB3aW5bc3Ryc3RhcnQgLSAxXSAmIDB4ZmYpO1xuXHRcdFx0bWF0Y2hfYXZhaWxhYmxlID0gMDtcblx0XHR9XG5cdFx0Zmx1c2hfYmxvY2tfb25seShmbHVzaCA9PSBaX0ZJTklTSCk7XG5cblx0XHRpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcblx0XHRcdGlmIChmbHVzaCA9PSBaX0ZJTklTSClcblx0XHRcdFx0cmV0dXJuIEZpbmlzaFN0YXJ0ZWQ7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiBOZWVkTW9yZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmx1c2ggPT0gWl9GSU5JU0ggPyBGaW5pc2hEb25lIDogQmxvY2tEb25lO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVmbGF0ZVJlc2V0KHN0cm0pIHtcblx0XHRzdHJtLnRvdGFsX2luID0gc3RybS50b3RhbF9vdXQgPSAwO1xuXHRcdHN0cm0ubXNnID0gbnVsbDsgLy9cblxuXHRcdHRoYXQucGVuZGluZyA9IDA7XG5cdFx0dGhhdC5wZW5kaW5nX291dCA9IDA7XG5cblx0XHRzdGF0dXMgPSBCVVNZX1NUQVRFO1xuXG5cdFx0bGFzdF9mbHVzaCA9IFpfTk9fRkxVU0g7XG5cblx0XHR0cl9pbml0KCk7XG5cdFx0bG1faW5pdCgpO1xuXHRcdHJldHVybiBaX09LO1xuXHR9XG5cblx0dGhhdC5kZWZsYXRlSW5pdCA9IGZ1bmN0aW9uIChzdHJtLCBfbGV2ZWwsIGJpdHMsIF9tZXRob2QsIG1lbUxldmVsLCBfc3RyYXRlZ3kpIHtcblx0XHRpZiAoIV9tZXRob2QpXG5cdFx0XHRfbWV0aG9kID0gWl9ERUZMQVRFRDtcblx0XHRpZiAoIW1lbUxldmVsKVxuXHRcdFx0bWVtTGV2ZWwgPSBERUZfTUVNX0xFVkVMO1xuXHRcdGlmICghX3N0cmF0ZWd5KVxuXHRcdFx0X3N0cmF0ZWd5ID0gWl9ERUZBVUxUX1NUUkFURUdZO1xuXG5cdFx0Ly8gYnl0ZVtdIG15X3ZlcnNpb249WkxJQl9WRVJTSU9OO1xuXG5cdFx0Ly9cblx0XHQvLyBpZiAoIXZlcnNpb24gfHwgdmVyc2lvblswXSAhPSBteV92ZXJzaW9uWzBdXG5cdFx0Ly8gfHwgc3RyZWFtX3NpemUgIT0gc2l6ZW9mKHpfc3RyZWFtKSkge1xuXHRcdC8vIHJldHVybiBaX1ZFUlNJT05fRVJST1I7XG5cdFx0Ly8gfVxuXG5cdFx0c3RybS5tc2cgPSBudWxsO1xuXG5cdFx0aWYgKF9sZXZlbCA9PSBaX0RFRkFVTFRfQ09NUFJFU1NJT04pXG5cdFx0XHRfbGV2ZWwgPSA2O1xuXG5cdFx0aWYgKG1lbUxldmVsIDwgMSB8fCBtZW1MZXZlbCA+IE1BWF9NRU1fTEVWRUwgfHwgX21ldGhvZCAhPSBaX0RFRkxBVEVEIHx8IGJpdHMgPCA5IHx8IGJpdHMgPiAxNSB8fCBfbGV2ZWwgPCAwIHx8IF9sZXZlbCA+IDkgfHwgX3N0cmF0ZWd5IDwgMFxuXHRcdFx0fHwgX3N0cmF0ZWd5ID4gWl9IVUZGTUFOX09OTFkpIHtcblx0XHRcdHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblx0XHR9XG5cblx0XHRzdHJtLmRzdGF0ZSA9IHRoYXQ7XG5cblx0XHR3X2JpdHMgPSBiaXRzO1xuXHRcdHdfc2l6ZSA9IDEgPDwgd19iaXRzO1xuXHRcdHdfbWFzayA9IHdfc2l6ZSAtIDE7XG5cblx0XHRoYXNoX2JpdHMgPSBtZW1MZXZlbCArIDc7XG5cdFx0aGFzaF9zaXplID0gMSA8PCBoYXNoX2JpdHM7XG5cdFx0aGFzaF9tYXNrID0gaGFzaF9zaXplIC0gMTtcblx0XHRoYXNoX3NoaWZ0ID0gTWF0aC5mbG9vcigoaGFzaF9iaXRzICsgTUlOX01BVENIIC0gMSkgLyBNSU5fTUFUQ0gpO1xuXG5cdFx0d2luID0gbmV3IFVpbnQ4QXJyYXkod19zaXplICogMik7XG5cdFx0cHJldiA9IFtdO1xuXHRcdGhlYWQgPSBbXTtcblxuXHRcdGxpdF9idWZzaXplID0gMSA8PCAobWVtTGV2ZWwgKyA2KTsgLy8gMTZLIGVsZW1lbnRzIGJ5IGRlZmF1bHRcblxuXHRcdHRoYXQucGVuZGluZ19idWYgPSBuZXcgVWludDhBcnJheShsaXRfYnVmc2l6ZSAqIDQpO1xuXHRcdHBlbmRpbmdfYnVmX3NpemUgPSBsaXRfYnVmc2l6ZSAqIDQ7XG5cblx0XHR0aGF0LmRpc3RfYnVmID0gbmV3IFVpbnQxNkFycmF5KGxpdF9idWZzaXplKTtcblx0XHR0aGF0LmxjX2J1ZiA9IG5ldyBVaW50OEFycmF5KGxpdF9idWZzaXplKTtcblxuXHRcdGxldmVsID0gX2xldmVsO1xuXG5cdFx0c3RyYXRlZ3kgPSBfc3RyYXRlZ3k7XG5cblx0XHRyZXR1cm4gZGVmbGF0ZVJlc2V0KHN0cm0pO1xuXHR9O1xuXG5cdHRoYXQuZGVmbGF0ZUVuZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAoc3RhdHVzICE9IElOSVRfU1RBVEUgJiYgc3RhdHVzICE9IEJVU1lfU1RBVEUgJiYgc3RhdHVzICE9IEZJTklTSF9TVEFURSkge1xuXHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHRcdH1cblx0XHQvLyBEZWFsbG9jYXRlIGluIHJldmVyc2Ugb3JkZXIgb2YgYWxsb2NhdGlvbnM6XG5cdFx0dGhhdC5sY19idWYgPSBudWxsO1xuXHRcdHRoYXQuZGlzdF9idWYgPSBudWxsO1xuXHRcdHRoYXQucGVuZGluZ19idWYgPSBudWxsO1xuXHRcdGhlYWQgPSBudWxsO1xuXHRcdHByZXYgPSBudWxsO1xuXHRcdHdpbiA9IG51bGw7XG5cdFx0Ly8gZnJlZVxuXHRcdHRoYXQuZHN0YXRlID0gbnVsbDtcblx0XHRyZXR1cm4gc3RhdHVzID09IEJVU1lfU1RBVEUgPyBaX0RBVEFfRVJST1IgOiBaX09LO1xuXHR9O1xuXG5cdHRoYXQuZGVmbGF0ZVBhcmFtcyA9IGZ1bmN0aW9uIChzdHJtLCBfbGV2ZWwsIF9zdHJhdGVneSkge1xuXHRcdGxldCBlcnIgPSBaX09LO1xuXG5cdFx0aWYgKF9sZXZlbCA9PSBaX0RFRkFVTFRfQ09NUFJFU1NJT04pIHtcblx0XHRcdF9sZXZlbCA9IDY7XG5cdFx0fVxuXHRcdGlmIChfbGV2ZWwgPCAwIHx8IF9sZXZlbCA+IDkgfHwgX3N0cmF0ZWd5IDwgMCB8fCBfc3RyYXRlZ3kgPiBaX0hVRkZNQU5fT05MWSkge1xuXHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHRcdH1cblxuXHRcdGlmIChjb25maWdfdGFibGVbbGV2ZWxdLmZ1bmMgIT0gY29uZmlnX3RhYmxlW19sZXZlbF0uZnVuYyAmJiBzdHJtLnRvdGFsX2luICE9PSAwKSB7XG5cdFx0XHQvLyBGbHVzaCB0aGUgbGFzdCBidWZmZXI6XG5cdFx0XHRlcnIgPSBzdHJtLmRlZmxhdGUoWl9QQVJUSUFMX0ZMVVNIKTtcblx0XHR9XG5cblx0XHRpZiAobGV2ZWwgIT0gX2xldmVsKSB7XG5cdFx0XHRsZXZlbCA9IF9sZXZlbDtcblx0XHRcdG1heF9sYXp5X21hdGNoID0gY29uZmlnX3RhYmxlW2xldmVsXS5tYXhfbGF6eTtcblx0XHRcdGdvb2RfbWF0Y2ggPSBjb25maWdfdGFibGVbbGV2ZWxdLmdvb2RfbGVuZ3RoO1xuXHRcdFx0bmljZV9tYXRjaCA9IGNvbmZpZ190YWJsZVtsZXZlbF0ubmljZV9sZW5ndGg7XG5cdFx0XHRtYXhfY2hhaW5fbGVuZ3RoID0gY29uZmlnX3RhYmxlW2xldmVsXS5tYXhfY2hhaW47XG5cdFx0fVxuXHRcdHN0cmF0ZWd5ID0gX3N0cmF0ZWd5O1xuXHRcdHJldHVybiBlcnI7XG5cdH07XG5cblx0dGhhdC5kZWZsYXRlU2V0RGljdGlvbmFyeSA9IGZ1bmN0aW9uIChfc3RybSwgZGljdGlvbmFyeSwgZGljdExlbmd0aCkge1xuXHRcdGxldCBsZW5ndGggPSBkaWN0TGVuZ3RoO1xuXHRcdGxldCBuLCBpbmRleCA9IDA7XG5cblx0XHRpZiAoIWRpY3Rpb25hcnkgfHwgc3RhdHVzICE9IElOSVRfU1RBVEUpXG5cdFx0XHRyZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cblx0XHRpZiAobGVuZ3RoIDwgTUlOX01BVENIKVxuXHRcdFx0cmV0dXJuIFpfT0s7XG5cdFx0aWYgKGxlbmd0aCA+IHdfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIHtcblx0XHRcdGxlbmd0aCA9IHdfc2l6ZSAtIE1JTl9MT09LQUhFQUQ7XG5cdFx0XHRpbmRleCA9IGRpY3RMZW5ndGggLSBsZW5ndGg7IC8vIHVzZSB0aGUgdGFpbCBvZiB0aGUgZGljdGlvbmFyeVxuXHRcdH1cblx0XHR3aW4uc2V0KGRpY3Rpb25hcnkuc3ViYXJyYXkoaW5kZXgsIGluZGV4ICsgbGVuZ3RoKSwgMCk7XG5cblx0XHRzdHJzdGFydCA9IGxlbmd0aDtcblx0XHRibG9ja19zdGFydCA9IGxlbmd0aDtcblxuXHRcdC8vIEluc2VydCBhbGwgc3RyaW5ncyBpbiB0aGUgaGFzaCB0YWJsZSAoZXhjZXB0IGZvciB0aGUgbGFzdCB0d28gYnl0ZXMpLlxuXHRcdC8vIHMtPmxvb2thaGVhZCBzdGF5cyBudWxsLCBzbyBzLT5pbnNfaCB3aWxsIGJlIHJlY29tcHV0ZWQgYXQgdGhlIG5leHRcblx0XHQvLyBjYWxsIG9mIGZpbGxfd2luZG93LlxuXG5cdFx0aW5zX2ggPSB3aW5bMF0gJiAweGZmO1xuXHRcdGluc19oID0gKCgoaW5zX2gpIDw8IGhhc2hfc2hpZnQpIF4gKHdpblsxXSAmIDB4ZmYpKSAmIGhhc2hfbWFzaztcblxuXHRcdGZvciAobiA9IDA7IG4gPD0gbGVuZ3RoIC0gTUlOX01BVENIOyBuKyspIHtcblx0XHRcdGluc19oID0gKCgoaW5zX2gpIDw8IGhhc2hfc2hpZnQpIF4gKHdpblsobikgKyAoTUlOX01BVENIIC0gMSldICYgMHhmZikpICYgaGFzaF9tYXNrO1xuXHRcdFx0cHJldltuICYgd19tYXNrXSA9IGhlYWRbaW5zX2hdO1xuXHRcdFx0aGVhZFtpbnNfaF0gPSBuO1xuXHRcdH1cblx0XHRyZXR1cm4gWl9PSztcblx0fTtcblxuXHR0aGF0LmRlZmxhdGUgPSBmdW5jdGlvbiAoX3N0cm0sIGZsdXNoKSB7XG5cdFx0bGV0IGksIGhlYWRlciwgbGV2ZWxfZmxhZ3MsIG9sZF9mbHVzaCwgYnN0YXRlO1xuXG5cdFx0aWYgKGZsdXNoID4gWl9GSU5JU0ggfHwgZmx1c2ggPCAwKSB7XG5cdFx0XHRyZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdFx0fVxuXG5cdFx0aWYgKCFfc3RybS5uZXh0X291dCB8fCAoIV9zdHJtLm5leHRfaW4gJiYgX3N0cm0uYXZhaWxfaW4gIT09IDApIHx8IChzdGF0dXMgPT0gRklOSVNIX1NUQVRFICYmIGZsdXNoICE9IFpfRklOSVNIKSkge1xuXHRcdFx0X3N0cm0ubXNnID0gel9lcnJtc2dbWl9ORUVEX0RJQ1QgLSAoWl9TVFJFQU1fRVJST1IpXTtcblx0XHRcdHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblx0XHR9XG5cdFx0aWYgKF9zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuXHRcdFx0X3N0cm0ubXNnID0gel9lcnJtc2dbWl9ORUVEX0RJQ1QgLSAoWl9CVUZfRVJST1IpXTtcblx0XHRcdHJldHVybiBaX0JVRl9FUlJPUjtcblx0XHR9XG5cblx0XHRzdHJtID0gX3N0cm07IC8vIGp1c3QgaW4gY2FzZVxuXHRcdG9sZF9mbHVzaCA9IGxhc3RfZmx1c2g7XG5cdFx0bGFzdF9mbHVzaCA9IGZsdXNoO1xuXG5cdFx0Ly8gV3JpdGUgdGhlIHpsaWIgaGVhZGVyXG5cdFx0aWYgKHN0YXR1cyA9PSBJTklUX1NUQVRFKSB7XG5cdFx0XHRoZWFkZXIgPSAoWl9ERUZMQVRFRCArICgod19iaXRzIC0gOCkgPDwgNCkpIDw8IDg7XG5cdFx0XHRsZXZlbF9mbGFncyA9ICgobGV2ZWwgLSAxKSAmIDB4ZmYpID4+IDE7XG5cblx0XHRcdGlmIChsZXZlbF9mbGFncyA+IDMpXG5cdFx0XHRcdGxldmVsX2ZsYWdzID0gMztcblx0XHRcdGhlYWRlciB8PSAobGV2ZWxfZmxhZ3MgPDwgNik7XG5cdFx0XHRpZiAoc3Ryc3RhcnQgIT09IDApXG5cdFx0XHRcdGhlYWRlciB8PSBQUkVTRVRfRElDVDtcblx0XHRcdGhlYWRlciArPSAzMSAtIChoZWFkZXIgJSAzMSk7XG5cblx0XHRcdHN0YXR1cyA9IEJVU1lfU1RBVEU7XG5cdFx0XHRwdXRTaG9ydE1TQihoZWFkZXIpO1xuXHRcdH1cblxuXHRcdC8vIEZsdXNoIGFzIG11Y2ggcGVuZGluZyBvdXRwdXQgYXMgcG9zc2libGVcblx0XHRpZiAodGhhdC5wZW5kaW5nICE9PSAwKSB7XG5cdFx0XHRzdHJtLmZsdXNoX3BlbmRpbmcoKTtcblx0XHRcdGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhcIiBhdmFpbF9vdXQ9PTBcIik7XG5cdFx0XHRcdC8vIFNpbmNlIGF2YWlsX291dCBpcyAwLCBkZWZsYXRlIHdpbGwgYmUgY2FsbGVkIGFnYWluIHdpdGhcblx0XHRcdFx0Ly8gbW9yZSBvdXRwdXQgc3BhY2UsIGJ1dCBwb3NzaWJseSB3aXRoIGJvdGggcGVuZGluZyBhbmRcblx0XHRcdFx0Ly8gYXZhaWxfaW4gZXF1YWwgdG8gemVyby4gVGhlcmUgd29uJ3QgYmUgYW55dGhpbmcgdG8gZG8sXG5cdFx0XHRcdC8vIGJ1dCB0aGlzIGlzIG5vdCBhbiBlcnJvciBzaXR1YXRpb24gc28gbWFrZSBzdXJlIHdlXG5cdFx0XHRcdC8vIHJldHVybiBPSyBpbnN0ZWFkIG9mIEJVRl9FUlJPUiBhdCBuZXh0IGNhbGwgb2YgZGVmbGF0ZTpcblx0XHRcdFx0bGFzdF9mbHVzaCA9IC0xO1xuXHRcdFx0XHRyZXR1cm4gWl9PSztcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoZXJlIGlzIHNvbWV0aGluZyB0byBkbyBhbmQgYXZvaWQgZHVwbGljYXRlXG5cdFx0XHQvLyBjb25zZWN1dGl2ZVxuXHRcdFx0Ly8gZmx1c2hlcy4gRm9yIHJlcGVhdGVkIGFuZCB1c2VsZXNzIGNhbGxzIHdpdGggWl9GSU5JU0gsIHdlIGtlZXBcblx0XHRcdC8vIHJldHVybmluZyBaX1NUUkVBTV9FTkQgaW5zdGVhZCBvZiBaX0JVRkZfRVJST1IuXG5cdFx0fSBlbHNlIGlmIChzdHJtLmF2YWlsX2luID09PSAwICYmIGZsdXNoIDw9IG9sZF9mbHVzaCAmJiBmbHVzaCAhPSBaX0ZJTklTSCkge1xuXHRcdFx0c3RybS5tc2cgPSB6X2Vycm1zZ1taX05FRURfRElDVCAtIChaX0JVRl9FUlJPUildO1xuXHRcdFx0cmV0dXJuIFpfQlVGX0VSUk9SO1xuXHRcdH1cblxuXHRcdC8vIFVzZXIgbXVzdCBub3QgcHJvdmlkZSBtb3JlIGlucHV0IGFmdGVyIHRoZSBmaXJzdCBGSU5JU0g6XG5cdFx0aWYgKHN0YXR1cyA9PSBGSU5JU0hfU1RBVEUgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCkge1xuXHRcdFx0X3N0cm0ubXNnID0gel9lcnJtc2dbWl9ORUVEX0RJQ1QgLSAoWl9CVUZfRVJST1IpXTtcblx0XHRcdHJldHVybiBaX0JVRl9FUlJPUjtcblx0XHR9XG5cblx0XHQvLyBTdGFydCBhIG5ldyBibG9jayBvciBjb250aW51ZSB0aGUgY3VycmVudCBvbmUuXG5cdFx0aWYgKHN0cm0uYXZhaWxfaW4gIT09IDAgfHwgbG9va2FoZWFkICE9PSAwIHx8IChmbHVzaCAhPSBaX05PX0ZMVVNIICYmIHN0YXR1cyAhPSBGSU5JU0hfU1RBVEUpKSB7XG5cdFx0XHRic3RhdGUgPSAtMTtcblx0XHRcdHN3aXRjaCAoY29uZmlnX3RhYmxlW2xldmVsXS5mdW5jKSB7XG5cdFx0XHRcdGNhc2UgU1RPUkVEOlxuXHRcdFx0XHRcdGJzdGF0ZSA9IGRlZmxhdGVfc3RvcmVkKGZsdXNoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBGQVNUOlxuXHRcdFx0XHRcdGJzdGF0ZSA9IGRlZmxhdGVfZmFzdChmbHVzaCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgU0xPVzpcblx0XHRcdFx0XHRic3RhdGUgPSBkZWZsYXRlX3Nsb3coZmx1c2gpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYnN0YXRlID09IEZpbmlzaFN0YXJ0ZWQgfHwgYnN0YXRlID09IEZpbmlzaERvbmUpIHtcblx0XHRcdFx0c3RhdHVzID0gRklOSVNIX1NUQVRFO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGJzdGF0ZSA9PSBOZWVkTW9yZSB8fCBic3RhdGUgPT0gRmluaXNoU3RhcnRlZCkge1xuXHRcdFx0XHRpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcblx0XHRcdFx0XHRsYXN0X2ZsdXNoID0gLTE7IC8vIGF2b2lkIEJVRl9FUlJPUiBuZXh0IGNhbGwsIHNlZSBhYm92ZVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBaX09LO1xuXHRcdFx0XHQvLyBJZiBmbHVzaCAhPSBaX05PX0ZMVVNIICYmIGF2YWlsX291dCA9PT0gMCwgdGhlIG5leHQgY2FsbFxuXHRcdFx0XHQvLyBvZiBkZWZsYXRlIHNob3VsZCB1c2UgdGhlIHNhbWUgZmx1c2ggcGFyYW1ldGVyIHRvIG1ha2Ugc3VyZVxuXHRcdFx0XHQvLyB0aGF0IHRoZSBmbHVzaCBpcyBjb21wbGV0ZS4gU28gd2UgZG9uJ3QgaGF2ZSB0byBvdXRwdXQgYW5cblx0XHRcdFx0Ly8gZW1wdHkgYmxvY2sgaGVyZSwgdGhpcyB3aWxsIGJlIGRvbmUgYXQgbmV4dCBjYWxsLiBUaGlzIGFsc29cblx0XHRcdFx0Ly8gZW5zdXJlcyB0aGF0IGZvciBhIHZlcnkgc21hbGwgb3V0cHV0IGJ1ZmZlciwgd2UgZW1pdCBhdCBtb3N0XG5cdFx0XHRcdC8vIG9uZSBlbXB0eSBibG9jay5cblx0XHRcdH1cblxuXHRcdFx0aWYgKGJzdGF0ZSA9PSBCbG9ja0RvbmUpIHtcblx0XHRcdFx0aWYgKGZsdXNoID09IFpfUEFSVElBTF9GTFVTSCkge1xuXHRcdFx0XHRcdF90cl9hbGlnbigpO1xuXHRcdFx0XHR9IGVsc2UgeyAvLyBGVUxMX0ZMVVNIIG9yIFNZTkNfRkxVU0hcblx0XHRcdFx0XHRfdHJfc3RvcmVkX2Jsb2NrKDAsIDAsIGZhbHNlKTtcblx0XHRcdFx0XHQvLyBGb3IgYSBmdWxsIGZsdXNoLCB0aGlzIGVtcHR5IGJsb2NrIHdpbGwgYmUgcmVjb2duaXplZFxuXHRcdFx0XHRcdC8vIGFzIGEgc3BlY2lhbCBtYXJrZXIgYnkgaW5mbGF0ZV9zeW5jKCkuXG5cdFx0XHRcdFx0aWYgKGZsdXNoID09IFpfRlVMTF9GTFVTSCkge1xuXHRcdFx0XHRcdFx0Ly8gc3RhdGUuaGVhZFtzLmhhc2hfc2l6ZS0xXT0wO1xuXHRcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGhhc2hfc2l6ZS8qLTEqLzsgaSsrKVxuXHRcdFx0XHRcdFx0XHQvLyBmb3JnZXQgaGlzdG9yeVxuXHRcdFx0XHRcdFx0XHRoZWFkW2ldID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RybS5mbHVzaF9wZW5kaW5nKCk7XG5cdFx0XHRcdGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuXHRcdFx0XHRcdGxhc3RfZmx1c2ggPSAtMTsgLy8gYXZvaWQgQlVGX0VSUk9SIGF0IG5leHQgY2FsbCwgc2VlIGFib3ZlXG5cdFx0XHRcdFx0cmV0dXJuIFpfT0s7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZmx1c2ggIT0gWl9GSU5JU0gpXG5cdFx0XHRyZXR1cm4gWl9PSztcblx0XHRyZXR1cm4gWl9TVFJFQU1fRU5EO1xuXHR9O1xufVxuXG4vLyBaU3RyZWFtXG5cbmZ1bmN0aW9uIFpTdHJlYW0oKSB7XG5cdGNvbnN0IHRoYXQgPSB0aGlzO1xuXHR0aGF0Lm5leHRfaW5faW5kZXggPSAwO1xuXHR0aGF0Lm5leHRfb3V0X2luZGV4ID0gMDtcblx0Ly8gdGhhdC5uZXh0X2luOyAvLyBuZXh0IGlucHV0IGJ5dGVcblx0dGhhdC5hdmFpbF9pbiA9IDA7IC8vIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUgYXQgbmV4dF9pblxuXHR0aGF0LnRvdGFsX2luID0gMDsgLy8gdG90YWwgbmIgb2YgaW5wdXQgYnl0ZXMgcmVhZCBzbyBmYXJcblx0Ly8gdGhhdC5uZXh0X291dDsgLy8gbmV4dCBvdXRwdXQgYnl0ZSBzaG91bGQgYmUgcHV0IHRoZXJlXG5cdHRoYXQuYXZhaWxfb3V0ID0gMDsgLy8gcmVtYWluaW5nIGZyZWUgc3BhY2UgYXQgbmV4dF9vdXRcblx0dGhhdC50b3RhbF9vdXQgPSAwOyAvLyB0b3RhbCBuYiBvZiBieXRlcyBvdXRwdXQgc28gZmFyXG5cdC8vIHRoYXQubXNnO1xuXHQvLyB0aGF0LmRzdGF0ZTtcbn1cblxuWlN0cmVhbS5wcm90b3R5cGUgPSB7XG5cdGRlZmxhdGVJbml0KGxldmVsLCBiaXRzKSB7XG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdFx0dGhhdC5kc3RhdGUgPSBuZXcgRGVmbGF0ZSgpO1xuXHRcdGlmICghYml0cylcblx0XHRcdGJpdHMgPSBNQVhfQklUUztcblx0XHRyZXR1cm4gdGhhdC5kc3RhdGUuZGVmbGF0ZUluaXQodGhhdCwgbGV2ZWwsIGJpdHMpO1xuXHR9LFxuXG5cdGRlZmxhdGUoZmx1c2gpIHtcblx0XHRjb25zdCB0aGF0ID0gdGhpcztcblx0XHRpZiAoIXRoYXQuZHN0YXRlKSB7XG5cdFx0XHRyZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdFx0fVxuXHRcdHJldHVybiB0aGF0LmRzdGF0ZS5kZWZsYXRlKHRoYXQsIGZsdXNoKTtcblx0fSxcblxuXHRkZWZsYXRlRW5kKCkge1xuXHRcdGNvbnN0IHRoYXQgPSB0aGlzO1xuXHRcdGlmICghdGhhdC5kc3RhdGUpXG5cdFx0XHRyZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdFx0Y29uc3QgcmV0ID0gdGhhdC5kc3RhdGUuZGVmbGF0ZUVuZCgpO1xuXHRcdHRoYXQuZHN0YXRlID0gbnVsbDtcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGRlZmxhdGVQYXJhbXMobGV2ZWwsIHN0cmF0ZWd5KSB7XG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdFx0aWYgKCF0aGF0LmRzdGF0ZSlcblx0XHRcdHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblx0XHRyZXR1cm4gdGhhdC5kc3RhdGUuZGVmbGF0ZVBhcmFtcyh0aGF0LCBsZXZlbCwgc3RyYXRlZ3kpO1xuXHR9LFxuXG5cdGRlZmxhdGVTZXREaWN0aW9uYXJ5KGRpY3Rpb25hcnksIGRpY3RMZW5ndGgpIHtcblx0XHRjb25zdCB0aGF0ID0gdGhpcztcblx0XHRpZiAoIXRoYXQuZHN0YXRlKVxuXHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHRcdHJldHVybiB0aGF0LmRzdGF0ZS5kZWZsYXRlU2V0RGljdGlvbmFyeSh0aGF0LCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoKTtcblx0fSxcblxuXHQvLyBSZWFkIGEgbmV3IGJ1ZmZlciBmcm9tIHRoZSBjdXJyZW50IGlucHV0IHN0cmVhbSwgdXBkYXRlIHRoZVxuXHQvLyB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC4gQWxsIGRlZmxhdGUoKSBpbnB1dCBnb2VzIHRocm91Z2hcblx0Ly8gdGhpcyBmdW5jdGlvbiBzbyBzb21lIGFwcGxpY2F0aW9ucyBtYXkgd2lzaCB0byBtb2RpZnkgaXQgdG8gYXZvaWRcblx0Ly8gYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPm5leHRfaW4gYnVmZmVyIGFuZCBjb3B5aW5nIGZyb20gaXQuXG5cdC8vIChTZWUgYWxzbyBmbHVzaF9wZW5kaW5nKCkpLlxuXHRyZWFkX2J1ZihidWYsIHN0YXJ0LCBzaXplKSB7XG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdFx0bGV0IGxlbiA9IHRoYXQuYXZhaWxfaW47XG5cdFx0aWYgKGxlbiA+IHNpemUpXG5cdFx0XHRsZW4gPSBzaXplO1xuXHRcdGlmIChsZW4gPT09IDApXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR0aGF0LmF2YWlsX2luIC09IGxlbjtcblx0XHRidWYuc2V0KHRoYXQubmV4dF9pbi5zdWJhcnJheSh0aGF0Lm5leHRfaW5faW5kZXgsIHRoYXQubmV4dF9pbl9pbmRleCArIGxlbiksIHN0YXJ0KTtcblx0XHR0aGF0Lm5leHRfaW5faW5kZXggKz0gbGVuO1xuXHRcdHRoYXQudG90YWxfaW4gKz0gbGVuO1xuXHRcdHJldHVybiBsZW47XG5cdH0sXG5cblx0Ly8gRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZS4gQWxsIGRlZmxhdGUoKSBvdXRwdXQgZ29lc1xuXHQvLyB0aHJvdWdoIHRoaXMgZnVuY3Rpb24gc28gc29tZSBhcHBsaWNhdGlvbnMgbWF5IHdpc2ggdG8gbW9kaWZ5IGl0XG5cdC8vIHRvIGF2b2lkIGFsbG9jYXRpbmcgYSBsYXJnZSBzdHJtLT5uZXh0X291dCBidWZmZXIgYW5kIGNvcHlpbmcgaW50byBpdC5cblx0Ly8gKFNlZSBhbHNvIHJlYWRfYnVmKCkpLlxuXHRmbHVzaF9wZW5kaW5nKCkge1xuXHRcdGNvbnN0IHRoYXQgPSB0aGlzO1xuXHRcdGxldCBsZW4gPSB0aGF0LmRzdGF0ZS5wZW5kaW5nO1xuXG5cdFx0aWYgKGxlbiA+IHRoYXQuYXZhaWxfb3V0KVxuXHRcdFx0bGVuID0gdGhhdC5hdmFpbF9vdXQ7XG5cdFx0aWYgKGxlbiA9PT0gMClcblx0XHRcdHJldHVybjtcblxuXHRcdC8vIGlmICh0aGF0LmRzdGF0ZS5wZW5kaW5nX2J1Zi5sZW5ndGggPD0gdGhhdC5kc3RhdGUucGVuZGluZ19vdXQgfHwgdGhhdC5uZXh0X291dC5sZW5ndGggPD0gdGhhdC5uZXh0X291dF9pbmRleFxuXHRcdC8vIHx8IHRoYXQuZHN0YXRlLnBlbmRpbmdfYnVmLmxlbmd0aCA8ICh0aGF0LmRzdGF0ZS5wZW5kaW5nX291dCArIGxlbikgfHwgdGhhdC5uZXh0X291dC5sZW5ndGggPCAodGhhdC5uZXh0X291dF9pbmRleCArXG5cdFx0Ly8gbGVuKSkge1xuXHRcdC8vIGNvbnNvbGUubG9nKHRoYXQuZHN0YXRlLnBlbmRpbmdfYnVmLmxlbmd0aCArIFwiLCBcIiArIHRoYXQuZHN0YXRlLnBlbmRpbmdfb3V0ICsgXCIsIFwiICsgdGhhdC5uZXh0X291dC5sZW5ndGggKyBcIiwgXCIgK1xuXHRcdC8vIHRoYXQubmV4dF9vdXRfaW5kZXggKyBcIiwgXCIgKyBsZW4pO1xuXHRcdC8vIGNvbnNvbGUubG9nKFwiYXZhaWxfb3V0PVwiICsgdGhhdC5hdmFpbF9vdXQpO1xuXHRcdC8vIH1cblxuXHRcdHRoYXQubmV4dF9vdXQuc2V0KHRoYXQuZHN0YXRlLnBlbmRpbmdfYnVmLnN1YmFycmF5KHRoYXQuZHN0YXRlLnBlbmRpbmdfb3V0LCB0aGF0LmRzdGF0ZS5wZW5kaW5nX291dCArIGxlbiksIHRoYXQubmV4dF9vdXRfaW5kZXgpO1xuXG5cdFx0dGhhdC5uZXh0X291dF9pbmRleCArPSBsZW47XG5cdFx0dGhhdC5kc3RhdGUucGVuZGluZ19vdXQgKz0gbGVuO1xuXHRcdHRoYXQudG90YWxfb3V0ICs9IGxlbjtcblx0XHR0aGF0LmF2YWlsX291dCAtPSBsZW47XG5cdFx0dGhhdC5kc3RhdGUucGVuZGluZyAtPSBsZW47XG5cdFx0aWYgKHRoYXQuZHN0YXRlLnBlbmRpbmcgPT09IDApIHtcblx0XHRcdHRoYXQuZHN0YXRlLnBlbmRpbmdfb3V0ID0gMDtcblx0XHR9XG5cdH1cbn07XG5cbi8vIERlZmxhdGVcblxuZnVuY3Rpb24gWmlwRGVmbGF0ZShvcHRpb25zKSB7XG5cdGNvbnN0IHRoYXQgPSB0aGlzO1xuXHRjb25zdCB6ID0gbmV3IFpTdHJlYW0oKTtcblx0Y29uc3QgYnVmc2l6ZSA9IGdldE1heGltdW1Db21wcmVzc2VkU2l6ZShvcHRpb25zICYmIG9wdGlvbnMuY2h1bmtTaXplID8gb3B0aW9ucy5jaHVua1NpemUgOiA2NCAqIDEwMjQpO1xuXHRjb25zdCBmbHVzaCA9IFpfTk9fRkxVU0g7XG5cdGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KGJ1ZnNpemUpO1xuXHRsZXQgbGV2ZWwgPSBvcHRpb25zID8gb3B0aW9ucy5sZXZlbCA6IFpfREVGQVVMVF9DT01QUkVTU0lPTjtcblx0aWYgKHR5cGVvZiBsZXZlbCA9PSBcInVuZGVmaW5lZFwiKVxuXHRcdGxldmVsID0gWl9ERUZBVUxUX0NPTVBSRVNTSU9OO1xuXHR6LmRlZmxhdGVJbml0KGxldmVsKTtcblx0ei5uZXh0X291dCA9IGJ1ZjtcblxuXHR0aGF0LmFwcGVuZCA9IGZ1bmN0aW9uIChkYXRhLCBvbnByb2dyZXNzKSB7XG5cdFx0bGV0IGVyciwgYXJyYXksIGxhc3RJbmRleCA9IDAsIGJ1ZmZlckluZGV4ID0gMCwgYnVmZmVyU2l6ZSA9IDA7XG5cdFx0Y29uc3QgYnVmZmVycyA9IFtdO1xuXHRcdGlmICghZGF0YS5sZW5ndGgpXG5cdFx0XHRyZXR1cm47XG5cdFx0ei5uZXh0X2luX2luZGV4ID0gMDtcblx0XHR6Lm5leHRfaW4gPSBkYXRhO1xuXHRcdHouYXZhaWxfaW4gPSBkYXRhLmxlbmd0aDtcblx0XHRkbyB7XG5cdFx0XHR6Lm5leHRfb3V0X2luZGV4ID0gMDtcblx0XHRcdHouYXZhaWxfb3V0ID0gYnVmc2l6ZTtcblx0XHRcdGVyciA9IHouZGVmbGF0ZShmbHVzaCk7XG5cdFx0XHRpZiAoZXJyICE9IFpfT0spXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcImRlZmxhdGluZzogXCIgKyB6Lm1zZyk7XG5cdFx0XHRpZiAoei5uZXh0X291dF9pbmRleClcblx0XHRcdFx0aWYgKHoubmV4dF9vdXRfaW5kZXggPT0gYnVmc2l6ZSlcblx0XHRcdFx0XHRidWZmZXJzLnB1c2gobmV3IFVpbnQ4QXJyYXkoYnVmKSk7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRidWZmZXJzLnB1c2goYnVmLnN1YmFycmF5KDAsIHoubmV4dF9vdXRfaW5kZXgpKTtcblx0XHRcdGJ1ZmZlclNpemUgKz0gei5uZXh0X291dF9pbmRleDtcblx0XHRcdGlmIChvbnByb2dyZXNzICYmIHoubmV4dF9pbl9pbmRleCA+IDAgJiYgei5uZXh0X2luX2luZGV4ICE9IGxhc3RJbmRleCkge1xuXHRcdFx0XHRvbnByb2dyZXNzKHoubmV4dF9pbl9pbmRleCk7XG5cdFx0XHRcdGxhc3RJbmRleCA9IHoubmV4dF9pbl9pbmRleDtcblx0XHRcdH1cblx0XHR9IHdoaWxlICh6LmF2YWlsX2luID4gMCB8fCB6LmF2YWlsX291dCA9PT0gMCk7XG5cdFx0aWYgKGJ1ZmZlcnMubGVuZ3RoID4gMSkge1xuXHRcdFx0YXJyYXkgPSBuZXcgVWludDhBcnJheShidWZmZXJTaXplKTtcblx0XHRcdGJ1ZmZlcnMuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmspIHtcblx0XHRcdFx0YXJyYXkuc2V0KGNodW5rLCBidWZmZXJJbmRleCk7XG5cdFx0XHRcdGJ1ZmZlckluZGV4ICs9IGNodW5rLmxlbmd0aDtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhcnJheSA9IGJ1ZmZlcnNbMF0gPyBuZXcgVWludDhBcnJheShidWZmZXJzWzBdKSA6IG5ldyBVaW50OEFycmF5KCk7XG5cdFx0fVxuXHRcdHJldHVybiBhcnJheTtcblx0fTtcblx0dGhhdC5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcblx0XHRsZXQgZXJyLCBhcnJheSwgYnVmZmVySW5kZXggPSAwLCBidWZmZXJTaXplID0gMDtcblx0XHRjb25zdCBidWZmZXJzID0gW107XG5cdFx0ZG8ge1xuXHRcdFx0ei5uZXh0X291dF9pbmRleCA9IDA7XG5cdFx0XHR6LmF2YWlsX291dCA9IGJ1ZnNpemU7XG5cdFx0XHRlcnIgPSB6LmRlZmxhdGUoWl9GSU5JU0gpO1xuXHRcdFx0aWYgKGVyciAhPSBaX1NUUkVBTV9FTkQgJiYgZXJyICE9IFpfT0spXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcImRlZmxhdGluZzogXCIgKyB6Lm1zZyk7XG5cdFx0XHRpZiAoYnVmc2l6ZSAtIHouYXZhaWxfb3V0ID4gMClcblx0XHRcdFx0YnVmZmVycy5wdXNoKGJ1Zi5zbGljZSgwLCB6Lm5leHRfb3V0X2luZGV4KSk7XG5cdFx0XHRidWZmZXJTaXplICs9IHoubmV4dF9vdXRfaW5kZXg7XG5cdFx0fSB3aGlsZSAoei5hdmFpbF9pbiA+IDAgfHwgei5hdmFpbF9vdXQgPT09IDApO1xuXHRcdHouZGVmbGF0ZUVuZCgpO1xuXHRcdGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyU2l6ZSk7XG5cdFx0YnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVuaykge1xuXHRcdFx0YXJyYXkuc2V0KGNodW5rLCBidWZmZXJJbmRleCk7XG5cdFx0XHRidWZmZXJJbmRleCArPSBjaHVuay5sZW5ndGg7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIGFycmF5O1xuXHR9O1xufVxuXG5mdW5jdGlvbiBnZXRNYXhpbXVtQ29tcHJlc3NlZFNpemUodW5jb21wcmVzc2VkU2l6ZSkge1xuXHRyZXR1cm4gdW5jb21wcmVzc2VkU2l6ZSArICg1ICogKE1hdGguZmxvb3IodW5jb21wcmVzc2VkU2l6ZSAvIDE2MzgzKSArIDEpKTtcbn1cblxuZXhwb3J0IHtcblx0WmlwRGVmbGF0ZSBhcyBEZWZsYXRlXG59OyIsIi8qXG4gQ29weXJpZ2h0IChjKSAyMDIyIEdpbGRhcyBMb3JtZWF1LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiBcbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuIDMuIFRoZSBuYW1lcyBvZiB0aGUgYXV0aG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEICcnQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXG4gSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKQ1JBRlQsXG4gSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsXG4gT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLypcbiAqIFRoaXMgcHJvZ3JhbSBpcyBiYXNlZCBvbiBKWmxpYiAxLjAuMiB5bW5rLCBKQ3JhZnQsSW5jLlxuICogSlpsaWIgaXMgYmFzZWQgb24gemxpYi0xLjEuMywgc28gYWxsIGNyZWRpdCBzaG91bGQgZ28gYXV0aG9yc1xuICogSmVhbi1sb3VwIEdhaWxseShqbG91cEBnemlwLm9yZykgYW5kIE1hcmsgQWRsZXIobWFkbGVyQGFsdW1uaS5jYWx0ZWNoLmVkdSlcbiAqIGFuZCBjb250cmlidXRvcnMgb2YgemxpYi5cbiAqL1xuXG4vLyBkZW5vLWxpbnQtaWdub3JlLWZpbGUgbm8tdGhpcy1hbGlhcyBwcmVmZXItY29uc3RcblxuLy8gR2xvYmFsXG5cbmNvbnN0IE1BWF9CSVRTID0gMTU7XG5cbmNvbnN0IFpfT0sgPSAwO1xuY29uc3QgWl9TVFJFQU1fRU5EID0gMTtcbmNvbnN0IFpfTkVFRF9ESUNUID0gMjtcbmNvbnN0IFpfU1RSRUFNX0VSUk9SID0gLTI7XG5jb25zdCBaX0RBVEFfRVJST1IgPSAtMztcbmNvbnN0IFpfTUVNX0VSUk9SID0gLTQ7XG5jb25zdCBaX0JVRl9FUlJPUiA9IC01O1xuXG5jb25zdCBpbmZsYXRlX21hc2sgPSBbMHgwMDAwMDAwMCwgMHgwMDAwMDAwMSwgMHgwMDAwMDAwMywgMHgwMDAwMDAwNywgMHgwMDAwMDAwZiwgMHgwMDAwMDAxZiwgMHgwMDAwMDAzZiwgMHgwMDAwMDA3ZiwgMHgwMDAwMDBmZiwgMHgwMDAwMDFmZiwgMHgwMDAwMDNmZixcblx0MHgwMDAwMDdmZiwgMHgwMDAwMGZmZiwgMHgwMDAwMWZmZiwgMHgwMDAwM2ZmZiwgMHgwMDAwN2ZmZiwgMHgwMDAwZmZmZl07XG5cbmNvbnN0IE1BTlkgPSAxNDQwO1xuXG4vLyBKWmxpYiB2ZXJzaW9uIDogXCIxLjAuMlwiXG5jb25zdCBaX05PX0ZMVVNIID0gMDtcbmNvbnN0IFpfRklOSVNIID0gNDtcblxuLy8gSW5mVHJlZVxuY29uc3QgZml4ZWRfYmwgPSA5O1xuY29uc3QgZml4ZWRfYmQgPSA1O1xuXG5jb25zdCBmaXhlZF90bCA9IFs5NiwgNywgMjU2LCAwLCA4LCA4MCwgMCwgOCwgMTYsIDg0LCA4LCAxMTUsIDgyLCA3LCAzMSwgMCwgOCwgMTEyLCAwLCA4LCA0OCwgMCwgOSwgMTkyLCA4MCwgNywgMTAsIDAsIDgsIDk2LCAwLCA4LCAzMiwgMCwgOSwgMTYwLCAwLCA4LCAwLFxuXHQwLCA4LCAxMjgsIDAsIDgsIDY0LCAwLCA5LCAyMjQsIDgwLCA3LCA2LCAwLCA4LCA4OCwgMCwgOCwgMjQsIDAsIDksIDE0NCwgODMsIDcsIDU5LCAwLCA4LCAxMjAsIDAsIDgsIDU2LCAwLCA5LCAyMDgsIDgxLCA3LCAxNywgMCwgOCwgMTA0LCAwLCA4LCA0MCxcblx0MCwgOSwgMTc2LCAwLCA4LCA4LCAwLCA4LCAxMzYsIDAsIDgsIDcyLCAwLCA5LCAyNDAsIDgwLCA3LCA0LCAwLCA4LCA4NCwgMCwgOCwgMjAsIDg1LCA4LCAyMjcsIDgzLCA3LCA0MywgMCwgOCwgMTE2LCAwLCA4LCA1MiwgMCwgOSwgMjAwLCA4MSwgNywgMTMsXG5cdDAsIDgsIDEwMCwgMCwgOCwgMzYsIDAsIDksIDE2OCwgMCwgOCwgNCwgMCwgOCwgMTMyLCAwLCA4LCA2OCwgMCwgOSwgMjMyLCA4MCwgNywgOCwgMCwgOCwgOTIsIDAsIDgsIDI4LCAwLCA5LCAxNTIsIDg0LCA3LCA4MywgMCwgOCwgMTI0LCAwLCA4LCA2MCxcblx0MCwgOSwgMjE2LCA4MiwgNywgMjMsIDAsIDgsIDEwOCwgMCwgOCwgNDQsIDAsIDksIDE4NCwgMCwgOCwgMTIsIDAsIDgsIDE0MCwgMCwgOCwgNzYsIDAsIDksIDI0OCwgODAsIDcsIDMsIDAsIDgsIDgyLCAwLCA4LCAxOCwgODUsIDgsIDE2MywgODMsIDcsXG5cdDM1LCAwLCA4LCAxMTQsIDAsIDgsIDUwLCAwLCA5LCAxOTYsIDgxLCA3LCAxMSwgMCwgOCwgOTgsIDAsIDgsIDM0LCAwLCA5LCAxNjQsIDAsIDgsIDIsIDAsIDgsIDEzMCwgMCwgOCwgNjYsIDAsIDksIDIyOCwgODAsIDcsIDcsIDAsIDgsIDkwLCAwLCA4LFxuXHQyNiwgMCwgOSwgMTQ4LCA4NCwgNywgNjcsIDAsIDgsIDEyMiwgMCwgOCwgNTgsIDAsIDksIDIxMiwgODIsIDcsIDE5LCAwLCA4LCAxMDYsIDAsIDgsIDQyLCAwLCA5LCAxODAsIDAsIDgsIDEwLCAwLCA4LCAxMzgsIDAsIDgsIDc0LCAwLCA5LCAyNDQsIDgwLFxuXHQ3LCA1LCAwLCA4LCA4NiwgMCwgOCwgMjIsIDE5MiwgOCwgMCwgODMsIDcsIDUxLCAwLCA4LCAxMTgsIDAsIDgsIDU0LCAwLCA5LCAyMDQsIDgxLCA3LCAxNSwgMCwgOCwgMTAyLCAwLCA4LCAzOCwgMCwgOSwgMTcyLCAwLCA4LCA2LCAwLCA4LCAxMzQsIDAsXG5cdDgsIDcwLCAwLCA5LCAyMzYsIDgwLCA3LCA5LCAwLCA4LCA5NCwgMCwgOCwgMzAsIDAsIDksIDE1NiwgODQsIDcsIDk5LCAwLCA4LCAxMjYsIDAsIDgsIDYyLCAwLCA5LCAyMjAsIDgyLCA3LCAyNywgMCwgOCwgMTEwLCAwLCA4LCA0NiwgMCwgOSwgMTg4LCAwLFxuXHQ4LCAxNCwgMCwgOCwgMTQyLCAwLCA4LCA3OCwgMCwgOSwgMjUyLCA5NiwgNywgMjU2LCAwLCA4LCA4MSwgMCwgOCwgMTcsIDg1LCA4LCAxMzEsIDgyLCA3LCAzMSwgMCwgOCwgMTEzLCAwLCA4LCA0OSwgMCwgOSwgMTk0LCA4MCwgNywgMTAsIDAsIDgsIDk3LFxuXHQwLCA4LCAzMywgMCwgOSwgMTYyLCAwLCA4LCAxLCAwLCA4LCAxMjksIDAsIDgsIDY1LCAwLCA5LCAyMjYsIDgwLCA3LCA2LCAwLCA4LCA4OSwgMCwgOCwgMjUsIDAsIDksIDE0NiwgODMsIDcsIDU5LCAwLCA4LCAxMjEsIDAsIDgsIDU3LCAwLCA5LCAyMTAsXG5cdDgxLCA3LCAxNywgMCwgOCwgMTA1LCAwLCA4LCA0MSwgMCwgOSwgMTc4LCAwLCA4LCA5LCAwLCA4LCAxMzcsIDAsIDgsIDczLCAwLCA5LCAyNDIsIDgwLCA3LCA0LCAwLCA4LCA4NSwgMCwgOCwgMjEsIDgwLCA4LCAyNTgsIDgzLCA3LCA0MywgMCwgOCwgMTE3LFxuXHQwLCA4LCA1MywgMCwgOSwgMjAyLCA4MSwgNywgMTMsIDAsIDgsIDEwMSwgMCwgOCwgMzcsIDAsIDksIDE3MCwgMCwgOCwgNSwgMCwgOCwgMTMzLCAwLCA4LCA2OSwgMCwgOSwgMjM0LCA4MCwgNywgOCwgMCwgOCwgOTMsIDAsIDgsIDI5LCAwLCA5LCAxNTQsXG5cdDg0LCA3LCA4MywgMCwgOCwgMTI1LCAwLCA4LCA2MSwgMCwgOSwgMjE4LCA4MiwgNywgMjMsIDAsIDgsIDEwOSwgMCwgOCwgNDUsIDAsIDksIDE4NiwgMCwgOCwgMTMsIDAsIDgsIDE0MSwgMCwgOCwgNzcsIDAsIDksIDI1MCwgODAsIDcsIDMsIDAsIDgsIDgzLFxuXHQwLCA4LCAxOSwgODUsIDgsIDE5NSwgODMsIDcsIDM1LCAwLCA4LCAxMTUsIDAsIDgsIDUxLCAwLCA5LCAxOTgsIDgxLCA3LCAxMSwgMCwgOCwgOTksIDAsIDgsIDM1LCAwLCA5LCAxNjYsIDAsIDgsIDMsIDAsIDgsIDEzMSwgMCwgOCwgNjcsIDAsIDksIDIzMCxcblx0ODAsIDcsIDcsIDAsIDgsIDkxLCAwLCA4LCAyNywgMCwgOSwgMTUwLCA4NCwgNywgNjcsIDAsIDgsIDEyMywgMCwgOCwgNTksIDAsIDksIDIxNCwgODIsIDcsIDE5LCAwLCA4LCAxMDcsIDAsIDgsIDQzLCAwLCA5LCAxODIsIDAsIDgsIDExLCAwLCA4LCAxMzksXG5cdDAsIDgsIDc1LCAwLCA5LCAyNDYsIDgwLCA3LCA1LCAwLCA4LCA4NywgMCwgOCwgMjMsIDE5MiwgOCwgMCwgODMsIDcsIDUxLCAwLCA4LCAxMTksIDAsIDgsIDU1LCAwLCA5LCAyMDYsIDgxLCA3LCAxNSwgMCwgOCwgMTAzLCAwLCA4LCAzOSwgMCwgOSwgMTc0LFxuXHQwLCA4LCA3LCAwLCA4LCAxMzUsIDAsIDgsIDcxLCAwLCA5LCAyMzgsIDgwLCA3LCA5LCAwLCA4LCA5NSwgMCwgOCwgMzEsIDAsIDksIDE1OCwgODQsIDcsIDk5LCAwLCA4LCAxMjcsIDAsIDgsIDYzLCAwLCA5LCAyMjIsIDgyLCA3LCAyNywgMCwgOCwgMTExLFxuXHQwLCA4LCA0NywgMCwgOSwgMTkwLCAwLCA4LCAxNSwgMCwgOCwgMTQzLCAwLCA4LCA3OSwgMCwgOSwgMjU0LCA5NiwgNywgMjU2LCAwLCA4LCA4MCwgMCwgOCwgMTYsIDg0LCA4LCAxMTUsIDgyLCA3LCAzMSwgMCwgOCwgMTEyLCAwLCA4LCA0OCwgMCwgOSxcblx0MTkzLCA4MCwgNywgMTAsIDAsIDgsIDk2LCAwLCA4LCAzMiwgMCwgOSwgMTYxLCAwLCA4LCAwLCAwLCA4LCAxMjgsIDAsIDgsIDY0LCAwLCA5LCAyMjUsIDgwLCA3LCA2LCAwLCA4LCA4OCwgMCwgOCwgMjQsIDAsIDksIDE0NSwgODMsIDcsIDU5LCAwLCA4LFxuXHQxMjAsIDAsIDgsIDU2LCAwLCA5LCAyMDksIDgxLCA3LCAxNywgMCwgOCwgMTA0LCAwLCA4LCA0MCwgMCwgOSwgMTc3LCAwLCA4LCA4LCAwLCA4LCAxMzYsIDAsIDgsIDcyLCAwLCA5LCAyNDEsIDgwLCA3LCA0LCAwLCA4LCA4NCwgMCwgOCwgMjAsIDg1LCA4LFxuXHQyMjcsIDgzLCA3LCA0MywgMCwgOCwgMTE2LCAwLCA4LCA1MiwgMCwgOSwgMjAxLCA4MSwgNywgMTMsIDAsIDgsIDEwMCwgMCwgOCwgMzYsIDAsIDksIDE2OSwgMCwgOCwgNCwgMCwgOCwgMTMyLCAwLCA4LCA2OCwgMCwgOSwgMjMzLCA4MCwgNywgOCwgMCwgOCxcblx0OTIsIDAsIDgsIDI4LCAwLCA5LCAxNTMsIDg0LCA3LCA4MywgMCwgOCwgMTI0LCAwLCA4LCA2MCwgMCwgOSwgMjE3LCA4MiwgNywgMjMsIDAsIDgsIDEwOCwgMCwgOCwgNDQsIDAsIDksIDE4NSwgMCwgOCwgMTIsIDAsIDgsIDE0MCwgMCwgOCwgNzYsIDAsIDksXG5cdDI0OSwgODAsIDcsIDMsIDAsIDgsIDgyLCAwLCA4LCAxOCwgODUsIDgsIDE2MywgODMsIDcsIDM1LCAwLCA4LCAxMTQsIDAsIDgsIDUwLCAwLCA5LCAxOTcsIDgxLCA3LCAxMSwgMCwgOCwgOTgsIDAsIDgsIDM0LCAwLCA5LCAxNjUsIDAsIDgsIDIsIDAsIDgsXG5cdDEzMCwgMCwgOCwgNjYsIDAsIDksIDIyOSwgODAsIDcsIDcsIDAsIDgsIDkwLCAwLCA4LCAyNiwgMCwgOSwgMTQ5LCA4NCwgNywgNjcsIDAsIDgsIDEyMiwgMCwgOCwgNTgsIDAsIDksIDIxMywgODIsIDcsIDE5LCAwLCA4LCAxMDYsIDAsIDgsIDQyLCAwLCA5LFxuXHQxODEsIDAsIDgsIDEwLCAwLCA4LCAxMzgsIDAsIDgsIDc0LCAwLCA5LCAyNDUsIDgwLCA3LCA1LCAwLCA4LCA4NiwgMCwgOCwgMjIsIDE5MiwgOCwgMCwgODMsIDcsIDUxLCAwLCA4LCAxMTgsIDAsIDgsIDU0LCAwLCA5LCAyMDUsIDgxLCA3LCAxNSwgMCwgOCxcblx0MTAyLCAwLCA4LCAzOCwgMCwgOSwgMTczLCAwLCA4LCA2LCAwLCA4LCAxMzQsIDAsIDgsIDcwLCAwLCA5LCAyMzcsIDgwLCA3LCA5LCAwLCA4LCA5NCwgMCwgOCwgMzAsIDAsIDksIDE1NywgODQsIDcsIDk5LCAwLCA4LCAxMjYsIDAsIDgsIDYyLCAwLCA5LFxuXHQyMjEsIDgyLCA3LCAyNywgMCwgOCwgMTEwLCAwLCA4LCA0NiwgMCwgOSwgMTg5LCAwLCA4LCAxNCwgMCwgOCwgMTQyLCAwLCA4LCA3OCwgMCwgOSwgMjUzLCA5NiwgNywgMjU2LCAwLCA4LCA4MSwgMCwgOCwgMTcsIDg1LCA4LCAxMzEsIDgyLCA3LCAzMSwgMCxcblx0OCwgMTEzLCAwLCA4LCA0OSwgMCwgOSwgMTk1LCA4MCwgNywgMTAsIDAsIDgsIDk3LCAwLCA4LCAzMywgMCwgOSwgMTYzLCAwLCA4LCAxLCAwLCA4LCAxMjksIDAsIDgsIDY1LCAwLCA5LCAyMjcsIDgwLCA3LCA2LCAwLCA4LCA4OSwgMCwgOCwgMjUsIDAsIDksXG5cdDE0NywgODMsIDcsIDU5LCAwLCA4LCAxMjEsIDAsIDgsIDU3LCAwLCA5LCAyMTEsIDgxLCA3LCAxNywgMCwgOCwgMTA1LCAwLCA4LCA0MSwgMCwgOSwgMTc5LCAwLCA4LCA5LCAwLCA4LCAxMzcsIDAsIDgsIDczLCAwLCA5LCAyNDMsIDgwLCA3LCA0LCAwLCA4LFxuXHQ4NSwgMCwgOCwgMjEsIDgwLCA4LCAyNTgsIDgzLCA3LCA0MywgMCwgOCwgMTE3LCAwLCA4LCA1MywgMCwgOSwgMjAzLCA4MSwgNywgMTMsIDAsIDgsIDEwMSwgMCwgOCwgMzcsIDAsIDksIDE3MSwgMCwgOCwgNSwgMCwgOCwgMTMzLCAwLCA4LCA2OSwgMCwgOSxcblx0MjM1LCA4MCwgNywgOCwgMCwgOCwgOTMsIDAsIDgsIDI5LCAwLCA5LCAxNTUsIDg0LCA3LCA4MywgMCwgOCwgMTI1LCAwLCA4LCA2MSwgMCwgOSwgMjE5LCA4MiwgNywgMjMsIDAsIDgsIDEwOSwgMCwgOCwgNDUsIDAsIDksIDE4NywgMCwgOCwgMTMsIDAsIDgsXG5cdDE0MSwgMCwgOCwgNzcsIDAsIDksIDI1MSwgODAsIDcsIDMsIDAsIDgsIDgzLCAwLCA4LCAxOSwgODUsIDgsIDE5NSwgODMsIDcsIDM1LCAwLCA4LCAxMTUsIDAsIDgsIDUxLCAwLCA5LCAxOTksIDgxLCA3LCAxMSwgMCwgOCwgOTksIDAsIDgsIDM1LCAwLCA5LFxuXHQxNjcsIDAsIDgsIDMsIDAsIDgsIDEzMSwgMCwgOCwgNjcsIDAsIDksIDIzMSwgODAsIDcsIDcsIDAsIDgsIDkxLCAwLCA4LCAyNywgMCwgOSwgMTUxLCA4NCwgNywgNjcsIDAsIDgsIDEyMywgMCwgOCwgNTksIDAsIDksIDIxNSwgODIsIDcsIDE5LCAwLCA4LFxuXHQxMDcsIDAsIDgsIDQzLCAwLCA5LCAxODMsIDAsIDgsIDExLCAwLCA4LCAxMzksIDAsIDgsIDc1LCAwLCA5LCAyNDcsIDgwLCA3LCA1LCAwLCA4LCA4NywgMCwgOCwgMjMsIDE5MiwgOCwgMCwgODMsIDcsIDUxLCAwLCA4LCAxMTksIDAsIDgsIDU1LCAwLCA5LFxuXHQyMDcsIDgxLCA3LCAxNSwgMCwgOCwgMTAzLCAwLCA4LCAzOSwgMCwgOSwgMTc1LCAwLCA4LCA3LCAwLCA4LCAxMzUsIDAsIDgsIDcxLCAwLCA5LCAyMzksIDgwLCA3LCA5LCAwLCA4LCA5NSwgMCwgOCwgMzEsIDAsIDksIDE1OSwgODQsIDcsIDk5LCAwLCA4LFxuXHQxMjcsIDAsIDgsIDYzLCAwLCA5LCAyMjMsIDgyLCA3LCAyNywgMCwgOCwgMTExLCAwLCA4LCA0NywgMCwgOSwgMTkxLCAwLCA4LCAxNSwgMCwgOCwgMTQzLCAwLCA4LCA3OSwgMCwgOSwgMjU1XTtcbmNvbnN0IGZpeGVkX3RkID0gWzgwLCA1LCAxLCA4NywgNSwgMjU3LCA4MywgNSwgMTcsIDkxLCA1LCA0MDk3LCA4MSwgNSwgNSwgODksIDUsIDEwMjUsIDg1LCA1LCA2NSwgOTMsIDUsIDE2Mzg1LCA4MCwgNSwgMywgODgsIDUsIDUxMywgODQsIDUsIDMzLCA5MiwgNSxcblx0ODE5MywgODIsIDUsIDksIDkwLCA1LCAyMDQ5LCA4NiwgNSwgMTI5LCAxOTIsIDUsIDI0NTc3LCA4MCwgNSwgMiwgODcsIDUsIDM4NSwgODMsIDUsIDI1LCA5MSwgNSwgNjE0NSwgODEsIDUsIDcsIDg5LCA1LCAxNTM3LCA4NSwgNSwgOTcsIDkzLCA1LFxuXHQyNDU3NywgODAsIDUsIDQsIDg4LCA1LCA3NjksIDg0LCA1LCA0OSwgOTIsIDUsIDEyMjg5LCA4MiwgNSwgMTMsIDkwLCA1LCAzMDczLCA4NiwgNSwgMTkzLCAxOTIsIDUsIDI0NTc3XTtcblxuLy8gVGFibGVzIGZvciBkZWZsYXRlIGZyb20gUEtaSVAncyBhcHBub3RlLnR4dC5cbmNvbnN0IGNwbGVucyA9IFsgLy8gQ29weSBsZW5ndGhzIGZvciBsaXRlcmFsIGNvZGVzIDI1Ny4uMjg1XG5cdDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTMsIDE1LCAxNywgMTksIDIzLCAyNywgMzEsIDM1LCA0MywgNTEsIDU5LCA2NywgODMsIDk5LCAxMTUsIDEzMSwgMTYzLCAxOTUsIDIyNywgMjU4LCAwLCAwXTtcblxuLy8gc2VlIG5vdGUgIzEzIGFib3ZlIGFib3V0IDI1OFxuY29uc3QgY3BsZXh0ID0gWyAvLyBFeHRyYSBiaXRzIGZvciBsaXRlcmFsIGNvZGVzIDI1Ny4uMjg1XG5cdDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDEsIDEsIDEsIDEsIDIsIDIsIDIsIDIsIDMsIDMsIDMsIDMsIDQsIDQsIDQsIDQsIDUsIDUsIDUsIDUsIDAsIDExMiwgMTEyIC8vIDExMj09aW52YWxpZFxuXTtcblxuY29uc3QgY3BkaXN0ID0gWyAvLyBDb3B5IG9mZnNldHMgZm9yIGRpc3RhbmNlIGNvZGVzIDAuLjI5XG5cdDEsIDIsIDMsIDQsIDUsIDcsIDksIDEzLCAxNywgMjUsIDMzLCA0OSwgNjUsIDk3LCAxMjksIDE5MywgMjU3LCAzODUsIDUxMywgNzY5LCAxMDI1LCAxNTM3LCAyMDQ5LCAzMDczLCA0MDk3LCA2MTQ1LCA4MTkzLCAxMjI4OSwgMTYzODUsIDI0NTc3XTtcblxuY29uc3QgY3BkZXh0ID0gWyAvLyBFeHRyYSBiaXRzIGZvciBkaXN0YW5jZSBjb2Rlc1xuXHQwLCAwLCAwLCAwLCAxLCAxLCAyLCAyLCAzLCAzLCA0LCA0LCA1LCA1LCA2LCA2LCA3LCA3LCA4LCA4LCA5LCA5LCAxMCwgMTAsIDExLCAxMSwgMTIsIDEyLCAxMywgMTNdO1xuXG4vLyBJZiBCTUFYIG5lZWRzIHRvIGJlIGxhcmdlciB0aGFuIDE2LCB0aGVuIGggYW5kIHhbXSBzaG91bGQgYmUgdUxvbmcuXG5jb25zdCBCTUFYID0gMTU7IC8vIG1heGltdW0gYml0IGxlbmd0aCBvZiBhbnkgY29kZVxuXG5mdW5jdGlvbiBJbmZUcmVlKCkge1xuXHRjb25zdCB0aGF0ID0gdGhpcztcblxuXHRsZXQgaG47IC8vIGh1ZnRzIHVzZWQgaW4gc3BhY2Vcblx0bGV0IHY7IC8vIHdvcmsgYXJlYSBmb3IgaHVmdF9idWlsZFxuXHRsZXQgYzsgLy8gYml0IGxlbmd0aCBjb3VudCB0YWJsZVxuXHRsZXQgcjsgLy8gdGFibGUgZW50cnkgZm9yIHN0cnVjdHVyZSBhc3NpZ25tZW50XG5cdGxldCB1OyAvLyB0YWJsZSBzdGFja1xuXHRsZXQgeDsgLy8gYml0IG9mZnNldHMsIHRoZW4gY29kZSBzdGFja1xuXG5cdGZ1bmN0aW9uIGh1ZnRfYnVpbGQoYiwgLy8gY29kZSBsZW5ndGhzIGluIGJpdHMgKGFsbCBhc3N1bWVkIDw9XG5cdFx0Ly8gQk1BWClcblx0XHRiaW5kZXgsIG4sIC8vIG51bWJlciBvZiBjb2RlcyAoYXNzdW1lZCA8PSAyODgpXG5cdFx0cywgLy8gbnVtYmVyIG9mIHNpbXBsZS12YWx1ZWQgY29kZXMgKDAuLnMtMSlcblx0XHRkLCAvLyBsaXN0IG9mIGJhc2UgdmFsdWVzIGZvciBub24tc2ltcGxlIGNvZGVzXG5cdFx0ZSwgLy8gbGlzdCBvZiBleHRyYSBiaXRzIGZvciBub24tc2ltcGxlIGNvZGVzXG5cdFx0dCwgLy8gcmVzdWx0OiBzdGFydGluZyB0YWJsZVxuXHRcdG0sIC8vIG1heGltdW0gbG9va3VwIGJpdHMsIHJldHVybnMgYWN0dWFsXG5cdFx0aHAsLy8gc3BhY2UgZm9yIHRyZWVzXG5cdFx0aG4sLy8gaHVmdHMgdXNlZCBpbiBzcGFjZVxuXHRcdHYgLy8gd29ya2luZyBhcmVhOiB2YWx1ZXMgaW4gb3JkZXIgb2YgYml0IGxlbmd0aFxuXHQpIHtcblx0XHQvLyBHaXZlbiBhIGxpc3Qgb2YgY29kZSBsZW5ndGhzIGFuZCBhIG1heGltdW0gdGFibGUgc2l6ZSwgbWFrZSBhIHNldCBvZlxuXHRcdC8vIHRhYmxlcyB0byBkZWNvZGUgdGhhdCBzZXQgb2YgY29kZXMuIFJldHVybiBaX09LIG9uIHN1Y2Nlc3MsXG5cdFx0Ly8gWl9CVUZfRVJST1Jcblx0XHQvLyBpZiB0aGUgZ2l2ZW4gY29kZSBzZXQgaXMgaW5jb21wbGV0ZSAodGhlIHRhYmxlcyBhcmUgc3RpbGwgYnVpbHQgaW5cblx0XHQvLyB0aGlzXG5cdFx0Ly8gY2FzZSksIFpfREFUQV9FUlJPUiBpZiB0aGUgaW5wdXQgaXMgaW52YWxpZCAoYW4gb3Zlci1zdWJzY3JpYmVkIHNldFxuXHRcdC8vIG9mXG5cdFx0Ly8gbGVuZ3RocyksIG9yIFpfTUVNX0VSUk9SIGlmIG5vdCBlbm91Z2ggbWVtb3J5LlxuXG5cdFx0bGV0IGE7IC8vIGNvdW50ZXIgZm9yIGNvZGVzIG9mIGxlbmd0aCBrXG5cdFx0bGV0IGY7IC8vIGkgcmVwZWF0cyBpbiB0YWJsZSBldmVyeSBmIGVudHJpZXNcblx0XHRsZXQgZzsgLy8gbWF4aW11bSBjb2RlIGxlbmd0aFxuXHRcdGxldCBoOyAvLyB0YWJsZSBsZXZlbFxuXHRcdGxldCBpOyAvLyBjb3VudGVyLCBjdXJyZW50IGNvZGVcblx0XHRsZXQgajsgLy8gY291bnRlclxuXHRcdGxldCBrOyAvLyBudW1iZXIgb2YgYml0cyBpbiBjdXJyZW50IGNvZGVcblx0XHRsZXQgbDsgLy8gYml0cyBwZXIgdGFibGUgKHJldHVybmVkIGluIG0pXG5cdFx0bGV0IG1hc2s7IC8vICgxIDw8IHcpIC0gMSwgdG8gYXZvaWQgY2MgLU8gYnVnIG9uIEhQXG5cdFx0bGV0IHA7IC8vIHBvaW50ZXIgaW50byBjW10sIGJbXSwgb3IgdltdXG5cdFx0bGV0IHE7IC8vIHBvaW50cyB0byBjdXJyZW50IHRhYmxlXG5cdFx0bGV0IHc7IC8vIGJpdHMgYmVmb3JlIHRoaXMgdGFibGUgPT0gKGwgKiBoKVxuXHRcdGxldCB4cDsgLy8gcG9pbnRlciBpbnRvIHhcblx0XHRsZXQgeTsgLy8gbnVtYmVyIG9mIGR1bW15IGNvZGVzIGFkZGVkXG5cdFx0bGV0IHo7IC8vIG51bWJlciBvZiBlbnRyaWVzIGluIGN1cnJlbnQgdGFibGVcblxuXHRcdC8vIEdlbmVyYXRlIGNvdW50cyBmb3IgZWFjaCBiaXQgbGVuZ3RoXG5cblx0XHRwID0gMDtcblx0XHRpID0gbjtcblx0XHRkbyB7XG5cdFx0XHRjW2JbYmluZGV4ICsgcF1dKys7XG5cdFx0XHRwKys7XG5cdFx0XHRpLS07IC8vIGFzc3VtZSBhbGwgZW50cmllcyA8PSBCTUFYXG5cdFx0fSB3aGlsZSAoaSAhPT0gMCk7XG5cblx0XHRpZiAoY1swXSA9PSBuKSB7IC8vIG51bGwgaW5wdXQtLWFsbCB6ZXJvIGxlbmd0aCBjb2Rlc1xuXHRcdFx0dFswXSA9IC0xO1xuXHRcdFx0bVswXSA9IDA7XG5cdFx0XHRyZXR1cm4gWl9PSztcblx0XHR9XG5cblx0XHQvLyBGaW5kIG1pbmltdW0gYW5kIG1heGltdW0gbGVuZ3RoLCBib3VuZCAqbSBieSB0aG9zZVxuXHRcdGwgPSBtWzBdO1xuXHRcdGZvciAoaiA9IDE7IGogPD0gQk1BWDsgaisrKVxuXHRcdFx0aWYgKGNbal0gIT09IDApXG5cdFx0XHRcdGJyZWFrO1xuXHRcdGsgPSBqOyAvLyBtaW5pbXVtIGNvZGUgbGVuZ3RoXG5cdFx0aWYgKGwgPCBqKSB7XG5cdFx0XHRsID0gajtcblx0XHR9XG5cdFx0Zm9yIChpID0gQk1BWDsgaSAhPT0gMDsgaS0tKSB7XG5cdFx0XHRpZiAoY1tpXSAhPT0gMClcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGcgPSBpOyAvLyBtYXhpbXVtIGNvZGUgbGVuZ3RoXG5cdFx0aWYgKGwgPiBpKSB7XG5cdFx0XHRsID0gaTtcblx0XHR9XG5cdFx0bVswXSA9IGw7XG5cblx0XHQvLyBBZGp1c3QgbGFzdCBsZW5ndGggY291bnQgdG8gZmlsbCBvdXQgY29kZXMsIGlmIG5lZWRlZFxuXHRcdGZvciAoeSA9IDEgPDwgajsgaiA8IGk7IGorKywgeSA8PD0gMSkge1xuXHRcdFx0aWYgKCh5IC09IGNbal0pIDwgMCkge1xuXHRcdFx0XHRyZXR1cm4gWl9EQVRBX0VSUk9SO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoKHkgLT0gY1tpXSkgPCAwKSB7XG5cdFx0XHRyZXR1cm4gWl9EQVRBX0VSUk9SO1xuXHRcdH1cblx0XHRjW2ldICs9IHk7XG5cblx0XHQvLyBHZW5lcmF0ZSBzdGFydGluZyBvZmZzZXRzIGludG8gdGhlIHZhbHVlIHRhYmxlIGZvciBlYWNoIGxlbmd0aFxuXHRcdHhbMV0gPSBqID0gMDtcblx0XHRwID0gMTtcblx0XHR4cCA9IDI7XG5cdFx0d2hpbGUgKC0taSAhPT0gMCkgeyAvLyBub3RlIHRoYXQgaSA9PSBnIGZyb20gYWJvdmVcblx0XHRcdHhbeHBdID0gKGogKz0gY1twXSk7XG5cdFx0XHR4cCsrO1xuXHRcdFx0cCsrO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgYSB0YWJsZSBvZiB2YWx1ZXMgaW4gb3JkZXIgb2YgYml0IGxlbmd0aHNcblx0XHRpID0gMDtcblx0XHRwID0gMDtcblx0XHRkbyB7XG5cdFx0XHRpZiAoKGogPSBiW2JpbmRleCArIHBdKSAhPT0gMCkge1xuXHRcdFx0XHR2W3hbal0rK10gPSBpO1xuXHRcdFx0fVxuXHRcdFx0cCsrO1xuXHRcdH0gd2hpbGUgKCsraSA8IG4pO1xuXHRcdG4gPSB4W2ddOyAvLyBzZXQgbiB0byBsZW5ndGggb2YgdlxuXG5cdFx0Ly8gR2VuZXJhdGUgdGhlIEh1ZmZtYW4gY29kZXMgYW5kIGZvciBlYWNoLCBtYWtlIHRoZSB0YWJsZSBlbnRyaWVzXG5cdFx0eFswXSA9IGkgPSAwOyAvLyBmaXJzdCBIdWZmbWFuIGNvZGUgaXMgemVyb1xuXHRcdHAgPSAwOyAvLyBncmFiIHZhbHVlcyBpbiBiaXQgb3JkZXJcblx0XHRoID0gLTE7IC8vIG5vIHRhYmxlcyB5ZXQtLWxldmVsIC0xXG5cdFx0dyA9IC1sOyAvLyBiaXRzIGRlY29kZWQgPT0gKGwgKiBoKVxuXHRcdHVbMF0gPSAwOyAvLyBqdXN0IHRvIGtlZXAgY29tcGlsZXJzIGhhcHB5XG5cdFx0cSA9IDA7IC8vIGRpdHRvXG5cdFx0eiA9IDA7IC8vIGRpdHRvXG5cblx0XHQvLyBnbyB0aHJvdWdoIHRoZSBiaXQgbGVuZ3RocyAoayBhbHJlYWR5IGlzIGJpdHMgaW4gc2hvcnRlc3QgY29kZSlcblx0XHRmb3IgKDsgayA8PSBnOyBrKyspIHtcblx0XHRcdGEgPSBjW2tdO1xuXHRcdFx0d2hpbGUgKGEtLSAhPT0gMCkge1xuXHRcdFx0XHQvLyBoZXJlIGkgaXMgdGhlIEh1ZmZtYW4gY29kZSBvZiBsZW5ndGggayBiaXRzIGZvciB2YWx1ZSAqcFxuXHRcdFx0XHQvLyBtYWtlIHRhYmxlcyB1cCB0byByZXF1aXJlZCBsZXZlbFxuXHRcdFx0XHR3aGlsZSAoayA+IHcgKyBsKSB7XG5cdFx0XHRcdFx0aCsrO1xuXHRcdFx0XHRcdHcgKz0gbDsgLy8gcHJldmlvdXMgdGFibGUgYWx3YXlzIGwgYml0c1xuXHRcdFx0XHRcdC8vIGNvbXB1dGUgbWluaW11bSBzaXplIHRhYmxlIGxlc3MgdGhhbiBvciBlcXVhbCB0byBsIGJpdHNcblx0XHRcdFx0XHR6ID0gZyAtIHc7XG5cdFx0XHRcdFx0eiA9ICh6ID4gbCkgPyBsIDogejsgLy8gdGFibGUgc2l6ZSB1cHBlciBsaW1pdFxuXHRcdFx0XHRcdGlmICgoZiA9IDEgPDwgKGogPSBrIC0gdykpID4gYSArIDEpIHsgLy8gdHJ5IGEgay13IGJpdCB0YWJsZVxuXHRcdFx0XHRcdFx0Ly8gdG9vIGZldyBjb2RlcyBmb3Jcblx0XHRcdFx0XHRcdC8vIGstdyBiaXQgdGFibGVcblx0XHRcdFx0XHRcdGYgLT0gYSArIDE7IC8vIGRlZHVjdCBjb2RlcyBmcm9tIHBhdHRlcm5zIGxlZnRcblx0XHRcdFx0XHRcdHhwID0gaztcblx0XHRcdFx0XHRcdGlmIChqIDwgeikge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoKytqIDwgeikgeyAvLyB0cnkgc21hbGxlciB0YWJsZXMgdXAgdG8geiBiaXRzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKChmIDw8PSAxKSA8PSBjWysreHBdKVxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7IC8vIGVub3VnaCBjb2RlcyB0byB1c2UgdXAgaiBiaXRzXG5cdFx0XHRcdFx0XHRcdFx0ZiAtPSBjW3hwXTsgLy8gZWxzZSBkZWR1Y3QgY29kZXMgZnJvbSBwYXR0ZXJuc1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHogPSAxIDw8IGo7IC8vIHRhYmxlIGVudHJpZXMgZm9yIGotYml0IHRhYmxlXG5cblx0XHRcdFx0XHQvLyBhbGxvY2F0ZSBuZXcgdGFibGVcblx0XHRcdFx0XHRpZiAoaG5bMF0gKyB6ID4gTUFOWSkgeyAvLyAobm90ZTogZG9lc24ndCBtYXR0ZXIgZm9yIGZpeGVkKVxuXHRcdFx0XHRcdFx0cmV0dXJuIFpfREFUQV9FUlJPUjsgLy8gb3ZlcmZsb3cgb2YgTUFOWVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR1W2hdID0gcSA9IC8qIGhwKyAqL2huWzBdOyAvLyBERUJVR1xuXHRcdFx0XHRcdGhuWzBdICs9IHo7XG5cblx0XHRcdFx0XHQvLyBjb25uZWN0IHRvIGxhc3QgdGFibGUsIGlmIHRoZXJlIGlzIG9uZVxuXHRcdFx0XHRcdGlmIChoICE9PSAwKSB7XG5cdFx0XHRcdFx0XHR4W2hdID0gaTsgLy8gc2F2ZSBwYXR0ZXJuIGZvciBiYWNraW5nIHVwXG5cdFx0XHRcdFx0XHRyWzBdID0gLyogKGJ5dGUpICovajsgLy8gYml0cyBpbiB0aGlzIHRhYmxlXG5cdFx0XHRcdFx0XHRyWzFdID0gLyogKGJ5dGUpICovbDsgLy8gYml0cyB0byBkdW1wIGJlZm9yZSB0aGlzIHRhYmxlXG5cdFx0XHRcdFx0XHRqID0gaSA+Pj4gKHcgLSBsKTtcblx0XHRcdFx0XHRcdHJbMl0gPSAvKiAoaW50KSAqLyhxIC0gdVtoIC0gMV0gLSBqKTsgLy8gb2Zmc2V0IHRvIHRoaXMgdGFibGVcblx0XHRcdFx0XHRcdGhwLnNldChyLCAodVtoIC0gMV0gKyBqKSAqIDMpO1xuXHRcdFx0XHRcdFx0Ly8gdG9cblx0XHRcdFx0XHRcdC8vIGxhc3Rcblx0XHRcdFx0XHRcdC8vIHRhYmxlXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRbMF0gPSBxOyAvLyBmaXJzdCB0YWJsZSBpcyByZXR1cm5lZCByZXN1bHRcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBzZXQgdXAgdGFibGUgZW50cnkgaW4gclxuXHRcdFx0XHRyWzFdID0gLyogKGJ5dGUpICovKGsgLSB3KTtcblx0XHRcdFx0aWYgKHAgPj0gbikge1xuXHRcdFx0XHRcdHJbMF0gPSAxMjggKyA2NDsgLy8gb3V0IG9mIHZhbHVlcy0taW52YWxpZCBjb2RlXG5cdFx0XHRcdH0gZWxzZSBpZiAodltwXSA8IHMpIHtcblx0XHRcdFx0XHRyWzBdID0gLyogKGJ5dGUpICovKHZbcF0gPCAyNTYgPyAwIDogMzIgKyA2NCk7IC8vIDI1NiBpc1xuXHRcdFx0XHRcdC8vIGVuZC1vZi1ibG9ja1xuXHRcdFx0XHRcdHJbMl0gPSB2W3ArK107IC8vIHNpbXBsZSBjb2RlIGlzIGp1c3QgdGhlIHZhbHVlXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0clswXSA9IC8qIChieXRlKSAqLyhlW3ZbcF0gLSBzXSArIDE2ICsgNjQpOyAvLyBub24tc2ltcGxlLS1sb29rXG5cdFx0XHRcdFx0Ly8gdXAgaW4gbGlzdHNcblx0XHRcdFx0XHRyWzJdID0gZFt2W3ArK10gLSBzXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGZpbGwgY29kZS1saWtlIGVudHJpZXMgd2l0aCByXG5cdFx0XHRcdGYgPSAxIDw8IChrIC0gdyk7XG5cdFx0XHRcdGZvciAoaiA9IGkgPj4+IHc7IGogPCB6OyBqICs9IGYpIHtcblx0XHRcdFx0XHRocC5zZXQociwgKHEgKyBqKSAqIDMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gYmFja3dhcmRzIGluY3JlbWVudCB0aGUgay1iaXQgY29kZSBpXG5cdFx0XHRcdGZvciAoaiA9IDEgPDwgKGsgLSAxKTsgKGkgJiBqKSAhPT0gMDsgaiA+Pj49IDEpIHtcblx0XHRcdFx0XHRpIF49IGo7XG5cdFx0XHRcdH1cblx0XHRcdFx0aSBePSBqO1xuXG5cdFx0XHRcdC8vIGJhY2t1cCBvdmVyIGZpbmlzaGVkIHRhYmxlc1xuXHRcdFx0XHRtYXNrID0gKDEgPDwgdykgLSAxOyAvLyBuZWVkZWQgb24gSFAsIGNjIC1PIGJ1Z1xuXHRcdFx0XHR3aGlsZSAoKGkgJiBtYXNrKSAhPSB4W2hdKSB7XG5cdFx0XHRcdFx0aC0tOyAvLyBkb24ndCBuZWVkIHRvIHVwZGF0ZSBxXG5cdFx0XHRcdFx0dyAtPSBsO1xuXHRcdFx0XHRcdG1hc2sgPSAoMSA8PCB3KSAtIDE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gUmV0dXJuIFpfQlVGX0VSUk9SIGlmIHdlIHdlcmUgZ2l2ZW4gYW4gaW5jb21wbGV0ZSB0YWJsZVxuXHRcdHJldHVybiB5ICE9PSAwICYmIGcgIT0gMSA/IFpfQlVGX0VSUk9SIDogWl9PSztcblx0fVxuXG5cdGZ1bmN0aW9uIGluaXRXb3JrQXJlYSh2c2l6ZSkge1xuXHRcdGxldCBpO1xuXHRcdGlmICghaG4pIHtcblx0XHRcdGhuID0gW107IC8vIFtdOyAvL25ldyBBcnJheSgxKTtcblx0XHRcdHYgPSBbXTsgLy8gbmV3IEFycmF5KHZzaXplKTtcblx0XHRcdGMgPSBuZXcgSW50MzJBcnJheShCTUFYICsgMSk7IC8vIG5ldyBBcnJheShCTUFYICsgMSk7XG5cdFx0XHRyID0gW107IC8vIG5ldyBBcnJheSgzKTtcblx0XHRcdHUgPSBuZXcgSW50MzJBcnJheShCTUFYKTsgLy8gbmV3IEFycmF5KEJNQVgpO1xuXHRcdFx0eCA9IG5ldyBJbnQzMkFycmF5KEJNQVggKyAxKTsgLy8gbmV3IEFycmF5KEJNQVggKyAxKTtcblx0XHR9XG5cdFx0aWYgKHYubGVuZ3RoIDwgdnNpemUpIHtcblx0XHRcdHYgPSBbXTsgLy8gbmV3IEFycmF5KHZzaXplKTtcblx0XHR9XG5cdFx0Zm9yIChpID0gMDsgaSA8IHZzaXplOyBpKyspIHtcblx0XHRcdHZbaV0gPSAwO1xuXHRcdH1cblx0XHRmb3IgKGkgPSAwOyBpIDwgQk1BWCArIDE7IGkrKykge1xuXHRcdFx0Y1tpXSA9IDA7XG5cdFx0fVxuXHRcdGZvciAoaSA9IDA7IGkgPCAzOyBpKyspIHtcblx0XHRcdHJbaV0gPSAwO1xuXHRcdH1cblx0XHQvLyBmb3IoaW50IGk9MDsgaTxCTUFYOyBpKyspe3VbaV09MDt9XG5cdFx0dS5zZXQoYy5zdWJhcnJheSgwLCBCTUFYKSwgMCk7XG5cdFx0Ly8gZm9yKGludCBpPTA7IGk8Qk1BWCsxOyBpKyspe3hbaV09MDt9XG5cdFx0eC5zZXQoYy5zdWJhcnJheSgwLCBCTUFYICsgMSksIDApO1xuXHR9XG5cblx0dGhhdC5pbmZsYXRlX3RyZWVzX2JpdHMgPSBmdW5jdGlvbiAoYywgLy8gMTkgY29kZSBsZW5ndGhzXG5cdFx0YmIsIC8vIGJpdHMgdHJlZSBkZXNpcmVkL2FjdHVhbCBkZXB0aFxuXHRcdHRiLCAvLyBiaXRzIHRyZWUgcmVzdWx0XG5cdFx0aHAsIC8vIHNwYWNlIGZvciB0cmVlc1xuXHRcdHogLy8gZm9yIG1lc3NhZ2VzXG5cdCkge1xuXHRcdGxldCByZXN1bHQ7XG5cdFx0aW5pdFdvcmtBcmVhKDE5KTtcblx0XHRoblswXSA9IDA7XG5cdFx0cmVzdWx0ID0gaHVmdF9idWlsZChjLCAwLCAxOSwgMTksIG51bGwsIG51bGwsIHRiLCBiYiwgaHAsIGhuLCB2KTtcblxuXHRcdGlmIChyZXN1bHQgPT0gWl9EQVRBX0VSUk9SKSB7XG5cdFx0XHR6Lm1zZyA9IFwib3ZlcnN1YnNjcmliZWQgZHluYW1pYyBiaXQgbGVuZ3RocyB0cmVlXCI7XG5cdFx0fSBlbHNlIGlmIChyZXN1bHQgPT0gWl9CVUZfRVJST1IgfHwgYmJbMF0gPT09IDApIHtcblx0XHRcdHoubXNnID0gXCJpbmNvbXBsZXRlIGR5bmFtaWMgYml0IGxlbmd0aHMgdHJlZVwiO1xuXHRcdFx0cmVzdWx0ID0gWl9EQVRBX0VSUk9SO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdHRoYXQuaW5mbGF0ZV90cmVlc19keW5hbWljID0gZnVuY3Rpb24gKG5sLCAvLyBudW1iZXIgb2YgbGl0ZXJhbC9sZW5ndGggY29kZXNcblx0XHRuZCwgLy8gbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGVzXG5cdFx0YywgLy8gdGhhdCBtYW55ICh0b3RhbCkgY29kZSBsZW5ndGhzXG5cdFx0YmwsIC8vIGxpdGVyYWwgZGVzaXJlZC9hY3R1YWwgYml0IGRlcHRoXG5cdFx0YmQsIC8vIGRpc3RhbmNlIGRlc2lyZWQvYWN0dWFsIGJpdCBkZXB0aFxuXHRcdHRsLCAvLyBsaXRlcmFsL2xlbmd0aCB0cmVlIHJlc3VsdFxuXHRcdHRkLCAvLyBkaXN0YW5jZSB0cmVlIHJlc3VsdFxuXHRcdGhwLCAvLyBzcGFjZSBmb3IgdHJlZXNcblx0XHR6IC8vIGZvciBtZXNzYWdlc1xuXHQpIHtcblx0XHRsZXQgcmVzdWx0O1xuXG5cdFx0Ly8gYnVpbGQgbGl0ZXJhbC9sZW5ndGggdHJlZVxuXHRcdGluaXRXb3JrQXJlYSgyODgpO1xuXHRcdGhuWzBdID0gMDtcblx0XHRyZXN1bHQgPSBodWZ0X2J1aWxkKGMsIDAsIG5sLCAyNTcsIGNwbGVucywgY3BsZXh0LCB0bCwgYmwsIGhwLCBobiwgdik7XG5cdFx0aWYgKHJlc3VsdCAhPSBaX09LIHx8IGJsWzBdID09PSAwKSB7XG5cdFx0XHRpZiAocmVzdWx0ID09IFpfREFUQV9FUlJPUikge1xuXHRcdFx0XHR6Lm1zZyA9IFwib3ZlcnN1YnNjcmliZWQgbGl0ZXJhbC9sZW5ndGggdHJlZVwiO1xuXHRcdFx0fSBlbHNlIGlmIChyZXN1bHQgIT0gWl9NRU1fRVJST1IpIHtcblx0XHRcdFx0ei5tc2cgPSBcImluY29tcGxldGUgbGl0ZXJhbC9sZW5ndGggdHJlZVwiO1xuXHRcdFx0XHRyZXN1bHQgPSBaX0RBVEFfRVJST1I7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGRpc3RhbmNlIHRyZWVcblx0XHRpbml0V29ya0FyZWEoMjg4KTtcblx0XHRyZXN1bHQgPSBodWZ0X2J1aWxkKGMsIG5sLCBuZCwgMCwgY3BkaXN0LCBjcGRleHQsIHRkLCBiZCwgaHAsIGhuLCB2KTtcblxuXHRcdGlmIChyZXN1bHQgIT0gWl9PSyB8fCAoYmRbMF0gPT09IDAgJiYgbmwgPiAyNTcpKSB7XG5cdFx0XHRpZiAocmVzdWx0ID09IFpfREFUQV9FUlJPUikge1xuXHRcdFx0XHR6Lm1zZyA9IFwib3ZlcnN1YnNjcmliZWQgZGlzdGFuY2UgdHJlZVwiO1xuXHRcdFx0fSBlbHNlIGlmIChyZXN1bHQgPT0gWl9CVUZfRVJST1IpIHtcblx0XHRcdFx0ei5tc2cgPSBcImluY29tcGxldGUgZGlzdGFuY2UgdHJlZVwiO1xuXHRcdFx0XHRyZXN1bHQgPSBaX0RBVEFfRVJST1I7XG5cdFx0XHR9IGVsc2UgaWYgKHJlc3VsdCAhPSBaX01FTV9FUlJPUikge1xuXHRcdFx0XHR6Lm1zZyA9IFwiZW1wdHkgZGlzdGFuY2UgdHJlZSB3aXRoIGxlbmd0aHNcIjtcblx0XHRcdFx0cmVzdWx0ID0gWl9EQVRBX0VSUk9SO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cblx0XHRyZXR1cm4gWl9PSztcblx0fTtcblxufVxuXG5JbmZUcmVlLmluZmxhdGVfdHJlZXNfZml4ZWQgPSBmdW5jdGlvbiAoYmwsIC8vIGxpdGVyYWwgZGVzaXJlZC9hY3R1YWwgYml0IGRlcHRoXG5cdGJkLCAvLyBkaXN0YW5jZSBkZXNpcmVkL2FjdHVhbCBiaXQgZGVwdGhcblx0dGwsLy8gbGl0ZXJhbC9sZW5ndGggdHJlZSByZXN1bHRcblx0dGQvLyBkaXN0YW5jZSB0cmVlIHJlc3VsdFxuKSB7XG5cdGJsWzBdID0gZml4ZWRfYmw7XG5cdGJkWzBdID0gZml4ZWRfYmQ7XG5cdHRsWzBdID0gZml4ZWRfdGw7XG5cdHRkWzBdID0gZml4ZWRfdGQ7XG5cdHJldHVybiBaX09LO1xufTtcblxuLy8gSW5mQ29kZXNcblxuLy8gd2FpdGluZyBmb3IgXCJpOlwiPWlucHV0LFxuLy8gXCJvOlwiPW91dHB1dCxcbi8vIFwieDpcIj1ub3RoaW5nXG5jb25zdCBTVEFSVCA9IDA7IC8vIHg6IHNldCB1cCBmb3IgTEVOXG5jb25zdCBMRU4gPSAxOyAvLyBpOiBnZXQgbGVuZ3RoL2xpdGVyYWwvZW9iIG5leHRcbmNvbnN0IExFTkVYVCA9IDI7IC8vIGk6IGdldHRpbmcgbGVuZ3RoIGV4dHJhIChoYXZlIGJhc2UpXG5jb25zdCBESVNUID0gMzsgLy8gaTogZ2V0IGRpc3RhbmNlIG5leHRcbmNvbnN0IERJU1RFWFQgPSA0Oy8vIGk6IGdldHRpbmcgZGlzdGFuY2UgZXh0cmFcbmNvbnN0IENPUFkgPSA1OyAvLyBvOiBjb3B5aW5nIGJ5dGVzIGluIHdpbiwgd2FpdGluZ1xuLy8gZm9yIHNwYWNlXG5jb25zdCBMSVQgPSA2OyAvLyBvOiBnb3QgbGl0ZXJhbCwgd2FpdGluZyBmb3Igb3V0cHV0XG4vLyBzcGFjZVxuY29uc3QgV0FTSCA9IDc7IC8vIG86IGdvdCBlb2IsIHBvc3NpYmx5IHN0aWxsIG91dHB1dFxuLy8gd2FpdGluZ1xuY29uc3QgRU5EID0gODsgLy8geDogZ290IGVvYiBhbmQgYWxsIGRhdGEgZmx1c2hlZFxuY29uc3QgQkFEQ09ERSA9IDk7Ly8geDogZ290IGVycm9yXG5cbmZ1bmN0aW9uIEluZkNvZGVzKCkge1xuXHRjb25zdCB0aGF0ID0gdGhpcztcblxuXHRsZXQgbW9kZTsgLy8gY3VycmVudCBpbmZsYXRlX2NvZGVzIG1vZGVcblxuXHQvLyBtb2RlIGRlcGVuZGVudCBpbmZvcm1hdGlvblxuXHRsZXQgbGVuID0gMDtcblxuXHRsZXQgdHJlZTsgLy8gcG9pbnRlciBpbnRvIHRyZWVcblx0bGV0IHRyZWVfaW5kZXggPSAwO1xuXHRsZXQgbmVlZCA9IDA7IC8vIGJpdHMgbmVlZGVkXG5cblx0bGV0IGxpdCA9IDA7XG5cblx0Ly8gaWYgRVhUIG9yIENPUFksIHdoZXJlIGFuZCBob3cgbXVjaFxuXHRsZXQgZ2V0ID0gMDsgLy8gYml0cyB0byBnZXQgZm9yIGV4dHJhXG5cdGxldCBkaXN0ID0gMDsgLy8gZGlzdGFuY2UgYmFjayB0byBjb3B5IGZyb21cblxuXHRsZXQgbGJpdHMgPSAwOyAvLyBsdHJlZSBiaXRzIGRlY29kZWQgcGVyIGJyYW5jaFxuXHRsZXQgZGJpdHMgPSAwOyAvLyBkdHJlZSBiaXRzIGRlY29kZXIgcGVyIGJyYW5jaFxuXHRsZXQgbHRyZWU7IC8vIGxpdGVyYWwvbGVuZ3RoL2VvYiB0cmVlXG5cdGxldCBsdHJlZV9pbmRleCA9IDA7IC8vIGxpdGVyYWwvbGVuZ3RoL2VvYiB0cmVlXG5cdGxldCBkdHJlZTsgLy8gZGlzdGFuY2UgdHJlZVxuXHRsZXQgZHRyZWVfaW5kZXggPSAwOyAvLyBkaXN0YW5jZSB0cmVlXG5cblx0Ly8gQ2FsbGVkIHdpdGggbnVtYmVyIG9mIGJ5dGVzIGxlZnQgdG8gd3JpdGUgaW4gd2luIGF0IGxlYXN0IDI1OFxuXHQvLyAodGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aCkgYW5kIG51bWJlciBvZiBpbnB1dCBieXRlcyBhdmFpbGFibGVcblx0Ly8gYXQgbGVhc3QgdGVuLiBUaGUgdGVuIGJ5dGVzIGFyZSBzaXggYnl0ZXMgZm9yIHRoZSBsb25nZXN0IGxlbmd0aC9cblx0Ly8gZGlzdGFuY2UgcGFpciBwbHVzIGZvdXIgYnl0ZXMgZm9yIG92ZXJsb2FkaW5nIHRoZSBiaXQgYnVmZmVyLlxuXG5cdGZ1bmN0aW9uIGluZmxhdGVfZmFzdChibCwgYmQsIHRsLCB0bF9pbmRleCwgdGQsIHRkX2luZGV4LCBzLCB6KSB7XG5cdFx0bGV0IHQ7IC8vIHRlbXBvcmFyeSBwb2ludGVyXG5cdFx0bGV0IHRwOyAvLyB0ZW1wb3JhcnkgcG9pbnRlclxuXHRcdGxldCB0cF9pbmRleDsgLy8gdGVtcG9yYXJ5IHBvaW50ZXJcblx0XHRsZXQgZTsgLy8gZXh0cmEgYml0cyBvciBvcGVyYXRpb25cblx0XHRsZXQgYjsgLy8gYml0IGJ1ZmZlclxuXHRcdGxldCBrOyAvLyBiaXRzIGluIGJpdCBidWZmZXJcblx0XHRsZXQgcDsgLy8gaW5wdXQgZGF0YSBwb2ludGVyXG5cdFx0bGV0IG47IC8vIGJ5dGVzIGF2YWlsYWJsZSB0aGVyZVxuXHRcdGxldCBxOyAvLyBvdXRwdXQgd2luIHdyaXRlIHBvaW50ZXJcblx0XHRsZXQgbTsgLy8gYnl0ZXMgdG8gZW5kIG9mIHdpbiBvciByZWFkIHBvaW50ZXJcblx0XHRsZXQgbWw7IC8vIG1hc2sgZm9yIGxpdGVyYWwvbGVuZ3RoIHRyZWVcblx0XHRsZXQgbWQ7IC8vIG1hc2sgZm9yIGRpc3RhbmNlIHRyZWVcblx0XHRsZXQgYzsgLy8gYnl0ZXMgdG8gY29weVxuXHRcdGxldCBkOyAvLyBkaXN0YW5jZSBiYWNrIHRvIGNvcHkgZnJvbVxuXHRcdGxldCByOyAvLyBjb3B5IHNvdXJjZSBwb2ludGVyXG5cblx0XHRsZXQgdHBfaW5kZXhfdF8zOyAvLyAodHBfaW5kZXgrdCkqM1xuXG5cdFx0Ly8gbG9hZCBpbnB1dCwgb3V0cHV0LCBiaXQgdmFsdWVzXG5cdFx0cCA9IHoubmV4dF9pbl9pbmRleDtcblx0XHRuID0gei5hdmFpbF9pbjtcblx0XHRiID0gcy5iaXRiO1xuXHRcdGsgPSBzLmJpdGs7XG5cdFx0cSA9IHMud3JpdGU7XG5cdFx0bSA9IHEgPCBzLnJlYWQgPyBzLnJlYWQgLSBxIC0gMSA6IHMuZW5kIC0gcTtcblxuXHRcdC8vIGluaXRpYWxpemUgbWFza3Ncblx0XHRtbCA9IGluZmxhdGVfbWFza1tibF07XG5cdFx0bWQgPSBpbmZsYXRlX21hc2tbYmRdO1xuXG5cdFx0Ly8gZG8gdW50aWwgbm90IGVub3VnaCBpbnB1dCBvciBvdXRwdXQgc3BhY2UgZm9yIGZhc3QgbG9vcFxuXHRcdGRvIHsgLy8gYXNzdW1lIGNhbGxlZCB3aXRoIG0gPj0gMjU4ICYmIG4gPj0gMTBcblx0XHRcdC8vIGdldCBsaXRlcmFsL2xlbmd0aCBjb2RlXG5cdFx0XHR3aGlsZSAoayA8ICgyMCkpIHsgLy8gbWF4IGJpdHMgZm9yIGxpdGVyYWwvbGVuZ3RoIGNvZGVcblx0XHRcdFx0bi0tO1xuXHRcdFx0XHRiIHw9ICh6LnJlYWRfYnl0ZShwKyspICYgMHhmZikgPDwgaztcblx0XHRcdFx0ayArPSA4O1xuXHRcdFx0fVxuXG5cdFx0XHR0ID0gYiAmIG1sO1xuXHRcdFx0dHAgPSB0bDtcblx0XHRcdHRwX2luZGV4ID0gdGxfaW5kZXg7XG5cdFx0XHR0cF9pbmRleF90XzMgPSAodHBfaW5kZXggKyB0KSAqIDM7XG5cdFx0XHRpZiAoKGUgPSB0cFt0cF9pbmRleF90XzNdKSA9PT0gMCkge1xuXHRcdFx0XHRiID4+PSAodHBbdHBfaW5kZXhfdF8zICsgMV0pO1xuXHRcdFx0XHRrIC09ICh0cFt0cF9pbmRleF90XzMgKyAxXSk7XG5cblx0XHRcdFx0cy53aW5bcSsrXSA9IC8qIChieXRlKSAqL3RwW3RwX2luZGV4X3RfMyArIDJdO1xuXHRcdFx0XHRtLS07XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0ZG8ge1xuXG5cdFx0XHRcdGIgPj49ICh0cFt0cF9pbmRleF90XzMgKyAxXSk7XG5cdFx0XHRcdGsgLT0gKHRwW3RwX2luZGV4X3RfMyArIDFdKTtcblxuXHRcdFx0XHRpZiAoKGUgJiAxNikgIT09IDApIHtcblx0XHRcdFx0XHRlICY9IDE1O1xuXHRcdFx0XHRcdGMgPSB0cFt0cF9pbmRleF90XzMgKyAyXSArICgvKiAoaW50KSAqL2IgJiBpbmZsYXRlX21hc2tbZV0pO1xuXG5cdFx0XHRcdFx0YiA+Pj0gZTtcblx0XHRcdFx0XHRrIC09IGU7XG5cblx0XHRcdFx0XHQvLyBkZWNvZGUgZGlzdGFuY2UgYmFzZSBvZiBibG9jayB0byBjb3B5XG5cdFx0XHRcdFx0d2hpbGUgKGsgPCAoMTUpKSB7IC8vIG1heCBiaXRzIGZvciBkaXN0YW5jZSBjb2RlXG5cdFx0XHRcdFx0XHRuLS07XG5cdFx0XHRcdFx0XHRiIHw9ICh6LnJlYWRfYnl0ZShwKyspICYgMHhmZikgPDwgaztcblx0XHRcdFx0XHRcdGsgKz0gODtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0ID0gYiAmIG1kO1xuXHRcdFx0XHRcdHRwID0gdGQ7XG5cdFx0XHRcdFx0dHBfaW5kZXggPSB0ZF9pbmRleDtcblx0XHRcdFx0XHR0cF9pbmRleF90XzMgPSAodHBfaW5kZXggKyB0KSAqIDM7XG5cdFx0XHRcdFx0ZSA9IHRwW3RwX2luZGV4X3RfM107XG5cblx0XHRcdFx0XHRkbyB7XG5cblx0XHRcdFx0XHRcdGIgPj49ICh0cFt0cF9pbmRleF90XzMgKyAxXSk7XG5cdFx0XHRcdFx0XHRrIC09ICh0cFt0cF9pbmRleF90XzMgKyAxXSk7XG5cblx0XHRcdFx0XHRcdGlmICgoZSAmIDE2KSAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHQvLyBnZXQgZXh0cmEgYml0cyB0byBhZGQgdG8gZGlzdGFuY2UgYmFzZVxuXHRcdFx0XHRcdFx0XHRlICY9IDE1O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoayA8IChlKSkgeyAvLyBnZXQgZXh0cmEgYml0cyAodXAgdG8gMTMpXG5cdFx0XHRcdFx0XHRcdFx0bi0tO1xuXHRcdFx0XHRcdFx0XHRcdGIgfD0gKHoucmVhZF9ieXRlKHArKykgJiAweGZmKSA8PCBrO1xuXHRcdFx0XHRcdFx0XHRcdGsgKz0gODtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGQgPSB0cFt0cF9pbmRleF90XzMgKyAyXSArIChiICYgaW5mbGF0ZV9tYXNrW2VdKTtcblxuXHRcdFx0XHRcdFx0XHRiID4+PSAoZSk7XG5cdFx0XHRcdFx0XHRcdGsgLT0gKGUpO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRvIHRoZSBjb3B5XG5cdFx0XHRcdFx0XHRcdG0gLT0gYztcblx0XHRcdFx0XHRcdFx0aWYgKHEgPj0gZCkgeyAvLyBvZmZzZXQgYmVmb3JlIGRlc3Rcblx0XHRcdFx0XHRcdFx0XHQvLyBqdXN0IGNvcHlcblx0XHRcdFx0XHRcdFx0XHRyID0gcSAtIGQ7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHEgLSByID4gMCAmJiAyID4gKHEgLSByKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cy53aW5bcSsrXSA9IHMud2luW3IrK107IC8vIG1pbmltdW1cblx0XHRcdFx0XHRcdFx0XHRcdC8vIGNvdW50IGlzXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyB0aHJlZSxcblx0XHRcdFx0XHRcdFx0XHRcdHMud2luW3ErK10gPSBzLndpbltyKytdOyAvLyBzbyB1bnJvbGxcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGxvb3AgYVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gbGl0dGxlXG5cdFx0XHRcdFx0XHRcdFx0XHRjIC09IDI7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdHMud2luLnNldChzLndpbi5zdWJhcnJheShyLCByICsgMiksIHEpO1xuXHRcdFx0XHRcdFx0XHRcdFx0cSArPSAyO1xuXHRcdFx0XHRcdFx0XHRcdFx0ciArPSAyO1xuXHRcdFx0XHRcdFx0XHRcdFx0YyAtPSAyO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHsgLy8gZWxzZSBvZmZzZXQgYWZ0ZXIgZGVzdGluYXRpb25cblx0XHRcdFx0XHRcdFx0XHRyID0gcSAtIGQ7XG5cdFx0XHRcdFx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdFx0XHRcdFx0ciArPSBzLmVuZDsgLy8gZm9yY2UgcG9pbnRlciBpbiB3aW5cblx0XHRcdFx0XHRcdFx0XHR9IHdoaWxlIChyIDwgMCk7IC8vIGNvdmVycyBpbnZhbGlkIGRpc3RhbmNlc1xuXHRcdFx0XHRcdFx0XHRcdGUgPSBzLmVuZCAtIHI7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGMgPiBlKSB7IC8vIGlmIHNvdXJjZSBjcm9zc2VzLFxuXHRcdFx0XHRcdFx0XHRcdFx0YyAtPSBlOyAvLyB3cmFwcGVkIGNvcHlcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChxIC0gciA+IDAgJiYgZSA+IChxIC0gcikpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHMud2luW3ErK10gPSBzLndpbltyKytdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IHdoaWxlICgtLWUgIT09IDApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cy53aW4uc2V0KHMud2luLnN1YmFycmF5KHIsIHIgKyBlKSwgcSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHEgKz0gZTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ciArPSBlO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRlID0gMDtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdHIgPSAwOyAvLyBjb3B5IHJlc3QgZnJvbSBzdGFydCBvZiB3aW5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIGNvcHkgYWxsIG9yIHdoYXQncyBsZWZ0XG5cdFx0XHRcdFx0XHRcdGlmIChxIC0gciA+IDAgJiYgYyA+IChxIC0gcikpIHtcblx0XHRcdFx0XHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzLndpbltxKytdID0gcy53aW5bcisrXTtcblx0XHRcdFx0XHRcdFx0XHR9IHdoaWxlICgtLWMgIT09IDApO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHMud2luLnNldChzLndpbi5zdWJhcnJheShyLCByICsgYyksIHEpO1xuXHRcdFx0XHRcdFx0XHRcdHEgKz0gYztcblx0XHRcdFx0XHRcdFx0XHRyICs9IGM7XG5cdFx0XHRcdFx0XHRcdFx0YyA9IDA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKChlICYgNjQpID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdHQgKz0gdHBbdHBfaW5kZXhfdF8zICsgMl07XG5cdFx0XHRcdFx0XHRcdHQgKz0gKGIgJiBpbmZsYXRlX21hc2tbZV0pO1xuXHRcdFx0XHRcdFx0XHR0cF9pbmRleF90XzMgPSAodHBfaW5kZXggKyB0KSAqIDM7XG5cdFx0XHRcdFx0XHRcdGUgPSB0cFt0cF9pbmRleF90XzNdO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ei5tc2cgPSBcImludmFsaWQgZGlzdGFuY2UgY29kZVwiO1xuXG5cdFx0XHRcdFx0XHRcdGMgPSB6LmF2YWlsX2luIC0gbjtcblx0XHRcdFx0XHRcdFx0YyA9IChrID4+IDMpIDwgYyA/IGsgPj4gMyA6IGM7XG5cdFx0XHRcdFx0XHRcdG4gKz0gYztcblx0XHRcdFx0XHRcdFx0cCAtPSBjO1xuXHRcdFx0XHRcdFx0XHRrIC09IGMgPDwgMztcblxuXHRcdFx0XHRcdFx0XHRzLmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0XHRzLmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0XHRzLndyaXRlID0gcTtcblxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWl9EQVRBX0VSUk9SO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuXHRcdFx0XHRcdH0gd2hpbGUgKHRydWUpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKChlICYgNjQpID09PSAwKSB7XG5cdFx0XHRcdFx0dCArPSB0cFt0cF9pbmRleF90XzMgKyAyXTtcblx0XHRcdFx0XHR0ICs9IChiICYgaW5mbGF0ZV9tYXNrW2VdKTtcblx0XHRcdFx0XHR0cF9pbmRleF90XzMgPSAodHBfaW5kZXggKyB0KSAqIDM7XG5cdFx0XHRcdFx0aWYgKChlID0gdHBbdHBfaW5kZXhfdF8zXSkgPT09IDApIHtcblxuXHRcdFx0XHRcdFx0YiA+Pj0gKHRwW3RwX2luZGV4X3RfMyArIDFdKTtcblx0XHRcdFx0XHRcdGsgLT0gKHRwW3RwX2luZGV4X3RfMyArIDFdKTtcblxuXHRcdFx0XHRcdFx0cy53aW5bcSsrXSA9IC8qIChieXRlKSAqL3RwW3RwX2luZGV4X3RfMyArIDJdO1xuXHRcdFx0XHRcdFx0bS0tO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKChlICYgMzIpICE9PSAwKSB7XG5cblx0XHRcdFx0XHRjID0gei5hdmFpbF9pbiAtIG47XG5cdFx0XHRcdFx0YyA9IChrID4+IDMpIDwgYyA/IGsgPj4gMyA6IGM7XG5cdFx0XHRcdFx0biArPSBjO1xuXHRcdFx0XHRcdHAgLT0gYztcblx0XHRcdFx0XHRrIC09IGMgPDwgMztcblxuXHRcdFx0XHRcdHMuYml0YiA9IGI7XG5cdFx0XHRcdFx0cy5iaXRrID0gaztcblx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRzLndyaXRlID0gcTtcblxuXHRcdFx0XHRcdHJldHVybiBaX1NUUkVBTV9FTkQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ei5tc2cgPSBcImludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZVwiO1xuXG5cdFx0XHRcdFx0YyA9IHouYXZhaWxfaW4gLSBuO1xuXHRcdFx0XHRcdGMgPSAoayA+PiAzKSA8IGMgPyBrID4+IDMgOiBjO1xuXHRcdFx0XHRcdG4gKz0gYztcblx0XHRcdFx0XHRwIC09IGM7XG5cdFx0XHRcdFx0ayAtPSBjIDw8IDM7XG5cblx0XHRcdFx0XHRzLmJpdGIgPSBiO1xuXHRcdFx0XHRcdHMuYml0ayA9IGs7XG5cdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0cy53cml0ZSA9IHE7XG5cblx0XHRcdFx0XHRyZXR1cm4gWl9EQVRBX0VSUk9SO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cblx0XHRcdH0gd2hpbGUgKHRydWUpO1xuXHRcdH0gd2hpbGUgKG0gPj0gMjU4ICYmIG4gPj0gMTApO1xuXG5cdFx0Ly8gbm90IGVub3VnaCBpbnB1dCBvciBvdXRwdXQtLXJlc3RvcmUgcG9pbnRlcnMgYW5kIHJldHVyblxuXHRcdGMgPSB6LmF2YWlsX2luIC0gbjtcblx0XHRjID0gKGsgPj4gMykgPCBjID8gayA+PiAzIDogYztcblx0XHRuICs9IGM7XG5cdFx0cCAtPSBjO1xuXHRcdGsgLT0gYyA8PCAzO1xuXG5cdFx0cy5iaXRiID0gYjtcblx0XHRzLmJpdGsgPSBrO1xuXHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdHMud3JpdGUgPSBxO1xuXG5cdFx0cmV0dXJuIFpfT0s7XG5cdH1cblxuXHR0aGF0LmluaXQgPSBmdW5jdGlvbiAoYmwsIGJkLCB0bCwgdGxfaW5kZXgsIHRkLCB0ZF9pbmRleCkge1xuXHRcdG1vZGUgPSBTVEFSVDtcblx0XHRsYml0cyA9IC8qIChieXRlKSAqL2JsO1xuXHRcdGRiaXRzID0gLyogKGJ5dGUpICovYmQ7XG5cdFx0bHRyZWUgPSB0bDtcblx0XHRsdHJlZV9pbmRleCA9IHRsX2luZGV4O1xuXHRcdGR0cmVlID0gdGQ7XG5cdFx0ZHRyZWVfaW5kZXggPSB0ZF9pbmRleDtcblx0XHR0cmVlID0gbnVsbDtcblx0fTtcblxuXHR0aGF0LnByb2MgPSBmdW5jdGlvbiAocywgeiwgcikge1xuXHRcdGxldCBqOyAvLyB0ZW1wb3Jhcnkgc3RvcmFnZVxuXHRcdGxldCB0aW5kZXg7IC8vIHRlbXBvcmFyeSBwb2ludGVyXG5cdFx0bGV0IGU7IC8vIGV4dHJhIGJpdHMgb3Igb3BlcmF0aW9uXG5cdFx0bGV0IGIgPSAwOyAvLyBiaXQgYnVmZmVyXG5cdFx0bGV0IGsgPSAwOyAvLyBiaXRzIGluIGJpdCBidWZmZXJcblx0XHRsZXQgcCA9IDA7IC8vIGlucHV0IGRhdGEgcG9pbnRlclxuXHRcdGxldCBuOyAvLyBieXRlcyBhdmFpbGFibGUgdGhlcmVcblx0XHRsZXQgcTsgLy8gb3V0cHV0IHdpbiB3cml0ZSBwb2ludGVyXG5cdFx0bGV0IG07IC8vIGJ5dGVzIHRvIGVuZCBvZiB3aW4gb3IgcmVhZCBwb2ludGVyXG5cdFx0bGV0IGY7IC8vIHBvaW50ZXIgdG8gY29weSBzdHJpbmdzIGZyb21cblxuXHRcdC8vIGNvcHkgaW5wdXQvb3V0cHV0IGluZm9ybWF0aW9uIHRvIGxvY2FscyAoVVBEQVRFIG1hY3JvIHJlc3RvcmVzKVxuXHRcdHAgPSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0biA9IHouYXZhaWxfaW47XG5cdFx0YiA9IHMuYml0Yjtcblx0XHRrID0gcy5iaXRrO1xuXHRcdHEgPSBzLndyaXRlO1xuXHRcdG0gPSBxIDwgcy5yZWFkID8gcy5yZWFkIC0gcSAtIDEgOiBzLmVuZCAtIHE7XG5cblx0XHQvLyBwcm9jZXNzIGlucHV0IGFuZCBvdXRwdXQgYmFzZWQgb24gY3VycmVudCBzdGF0ZVxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cblx0XHR3aGlsZSAodHJ1ZSkge1xuXHRcdFx0c3dpdGNoIChtb2RlKSB7XG5cdFx0XHRcdC8vIHdhaXRpbmcgZm9yIFwiaTpcIj1pbnB1dCwgXCJvOlwiPW91dHB1dCwgXCJ4OlwiPW5vdGhpbmdcblx0XHRcdFx0Y2FzZSBTVEFSVDogLy8geDogc2V0IHVwIGZvciBMRU5cblx0XHRcdFx0XHRpZiAobSA+PSAyNTggJiYgbiA+PSAxMCkge1xuXG5cdFx0XHRcdFx0XHRzLmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0cy5iaXRrID0gaztcblx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRcdHMud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0ciA9IGluZmxhdGVfZmFzdChsYml0cywgZGJpdHMsIGx0cmVlLCBsdHJlZV9pbmRleCwgZHRyZWUsIGR0cmVlX2luZGV4LCBzLCB6KTtcblxuXHRcdFx0XHRcdFx0cCA9IHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdG4gPSB6LmF2YWlsX2luO1xuXHRcdFx0XHRcdFx0YiA9IHMuYml0Yjtcblx0XHRcdFx0XHRcdGsgPSBzLmJpdGs7XG5cdFx0XHRcdFx0XHRxID0gcy53cml0ZTtcblx0XHRcdFx0XHRcdG0gPSBxIDwgcy5yZWFkID8gcy5yZWFkIC0gcSAtIDEgOiBzLmVuZCAtIHE7XG5cblx0XHRcdFx0XHRcdGlmIChyICE9IFpfT0spIHtcblx0XHRcdFx0XHRcdFx0bW9kZSA9IHIgPT0gWl9TVFJFQU1fRU5EID8gV0FTSCA6IEJBRENPREU7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZWVkID0gbGJpdHM7XG5cdFx0XHRcdFx0dHJlZSA9IGx0cmVlO1xuXHRcdFx0XHRcdHRyZWVfaW5kZXggPSBsdHJlZV9pbmRleDtcblxuXHRcdFx0XHRcdG1vZGUgPSBMRU47XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSBMRU46IC8vIGk6IGdldCBsZW5ndGgvbGl0ZXJhbC9lb2IgbmV4dFxuXHRcdFx0XHRcdGogPSBuZWVkO1xuXG5cdFx0XHRcdFx0d2hpbGUgKGsgPCAoaikpIHtcblx0XHRcdFx0XHRcdGlmIChuICE9PSAwKVxuXHRcdFx0XHRcdFx0XHRyID0gWl9PSztcblx0XHRcdFx0XHRcdGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHMuYml0YiA9IGI7XG5cdFx0XHRcdFx0XHRcdHMuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHRcdHMud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bi0tO1xuXHRcdFx0XHRcdFx0YiB8PSAoei5yZWFkX2J5dGUocCsrKSAmIDB4ZmYpIDw8IGs7XG5cdFx0XHRcdFx0XHRrICs9IDg7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGluZGV4ID0gKHRyZWVfaW5kZXggKyAoYiAmIGluZmxhdGVfbWFza1tqXSkpICogMztcblxuXHRcdFx0XHRcdGIgPj4+PSAodHJlZVt0aW5kZXggKyAxXSk7XG5cdFx0XHRcdFx0ayAtPSAodHJlZVt0aW5kZXggKyAxXSk7XG5cblx0XHRcdFx0XHRlID0gdHJlZVt0aW5kZXhdO1xuXG5cdFx0XHRcdFx0aWYgKGUgPT09IDApIHsgLy8gbGl0ZXJhbFxuXHRcdFx0XHRcdFx0bGl0ID0gdHJlZVt0aW5kZXggKyAyXTtcblx0XHRcdFx0XHRcdG1vZGUgPSBMSVQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKChlICYgMTYpICE9PSAwKSB7IC8vIGxlbmd0aFxuXHRcdFx0XHRcdFx0Z2V0ID0gZSAmIDE1O1xuXHRcdFx0XHRcdFx0bGVuID0gdHJlZVt0aW5kZXggKyAyXTtcblx0XHRcdFx0XHRcdG1vZGUgPSBMRU5FWFQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKChlICYgNjQpID09PSAwKSB7IC8vIG5leHQgdGFibGVcblx0XHRcdFx0XHRcdG5lZWQgPSBlO1xuXHRcdFx0XHRcdFx0dHJlZV9pbmRleCA9IHRpbmRleCAvIDMgKyB0cmVlW3RpbmRleCArIDJdO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICgoZSAmIDMyKSAhPT0gMCkgeyAvLyBlbmQgb2YgYmxvY2tcblx0XHRcdFx0XHRcdG1vZGUgPSBXQVNIO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGUgPSBCQURDT0RFOyAvLyBpbnZhbGlkIGNvZGVcblx0XHRcdFx0XHR6Lm1zZyA9IFwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlXCI7XG5cdFx0XHRcdFx0ciA9IFpfREFUQV9FUlJPUjtcblxuXHRcdFx0XHRcdHMuYml0YiA9IGI7XG5cdFx0XHRcdFx0cy5iaXRrID0gaztcblx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRzLndyaXRlID0gcTtcblx0XHRcdFx0XHRyZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXG5cdFx0XHRcdGNhc2UgTEVORVhUOiAvLyBpOiBnZXR0aW5nIGxlbmd0aCBleHRyYSAoaGF2ZSBiYXNlKVxuXHRcdFx0XHRcdGogPSBnZXQ7XG5cblx0XHRcdFx0XHR3aGlsZSAoayA8IChqKSkge1xuXHRcdFx0XHRcdFx0aWYgKG4gIT09IDApXG5cdFx0XHRcdFx0XHRcdHIgPSBaX09LO1xuXHRcdFx0XHRcdFx0ZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0cy5iaXRiID0gYjtcblx0XHRcdFx0XHRcdFx0cy5iaXRrID0gaztcblx0XHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRcdFx0cy53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBzLmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRuLS07XG5cdFx0XHRcdFx0XHRiIHw9ICh6LnJlYWRfYnl0ZShwKyspICYgMHhmZikgPDwgaztcblx0XHRcdFx0XHRcdGsgKz0gODtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRsZW4gKz0gKGIgJiBpbmZsYXRlX21hc2tbal0pO1xuXG5cdFx0XHRcdFx0YiA+Pj0gajtcblx0XHRcdFx0XHRrIC09IGo7XG5cblx0XHRcdFx0XHRuZWVkID0gZGJpdHM7XG5cdFx0XHRcdFx0dHJlZSA9IGR0cmVlO1xuXHRcdFx0XHRcdHRyZWVfaW5kZXggPSBkdHJlZV9pbmRleDtcblx0XHRcdFx0XHRtb2RlID0gRElTVDtcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlIERJU1Q6IC8vIGk6IGdldCBkaXN0YW5jZSBuZXh0XG5cdFx0XHRcdFx0aiA9IG5lZWQ7XG5cblx0XHRcdFx0XHR3aGlsZSAoayA8IChqKSkge1xuXHRcdFx0XHRcdFx0aWYgKG4gIT09IDApXG5cdFx0XHRcdFx0XHRcdHIgPSBaX09LO1xuXHRcdFx0XHRcdFx0ZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0cy5iaXRiID0gYjtcblx0XHRcdFx0XHRcdFx0cy5iaXRrID0gaztcblx0XHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRcdFx0cy53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBzLmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRuLS07XG5cdFx0XHRcdFx0XHRiIHw9ICh6LnJlYWRfYnl0ZShwKyspICYgMHhmZikgPDwgaztcblx0XHRcdFx0XHRcdGsgKz0gODtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aW5kZXggPSAodHJlZV9pbmRleCArIChiICYgaW5mbGF0ZV9tYXNrW2pdKSkgKiAzO1xuXG5cdFx0XHRcdFx0YiA+Pj0gdHJlZVt0aW5kZXggKyAxXTtcblx0XHRcdFx0XHRrIC09IHRyZWVbdGluZGV4ICsgMV07XG5cblx0XHRcdFx0XHRlID0gKHRyZWVbdGluZGV4XSk7XG5cdFx0XHRcdFx0aWYgKChlICYgMTYpICE9PSAwKSB7IC8vIGRpc3RhbmNlXG5cdFx0XHRcdFx0XHRnZXQgPSBlICYgMTU7XG5cdFx0XHRcdFx0XHRkaXN0ID0gdHJlZVt0aW5kZXggKyAyXTtcblx0XHRcdFx0XHRcdG1vZGUgPSBESVNURVhUO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICgoZSAmIDY0KSA9PT0gMCkgeyAvLyBuZXh0IHRhYmxlXG5cdFx0XHRcdFx0XHRuZWVkID0gZTtcblx0XHRcdFx0XHRcdHRyZWVfaW5kZXggPSB0aW5kZXggLyAzICsgdHJlZVt0aW5kZXggKyAyXTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RlID0gQkFEQ09ERTsgLy8gaW52YWxpZCBjb2RlXG5cdFx0XHRcdFx0ei5tc2cgPSBcImludmFsaWQgZGlzdGFuY2UgY29kZVwiO1xuXHRcdFx0XHRcdHIgPSBaX0RBVEFfRVJST1I7XG5cblx0XHRcdFx0XHRzLmJpdGIgPSBiO1xuXHRcdFx0XHRcdHMuYml0ayA9IGs7XG5cdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0cy53cml0ZSA9IHE7XG5cdFx0XHRcdFx0cmV0dXJuIHMuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblxuXHRcdFx0XHRjYXNlIERJU1RFWFQ6IC8vIGk6IGdldHRpbmcgZGlzdGFuY2UgZXh0cmFcblx0XHRcdFx0XHRqID0gZ2V0O1xuXG5cdFx0XHRcdFx0d2hpbGUgKGsgPCAoaikpIHtcblx0XHRcdFx0XHRcdGlmIChuICE9PSAwKVxuXHRcdFx0XHRcdFx0XHRyID0gWl9PSztcblx0XHRcdFx0XHRcdGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHMuYml0YiA9IGI7XG5cdFx0XHRcdFx0XHRcdHMuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHRcdHMud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bi0tO1xuXHRcdFx0XHRcdFx0YiB8PSAoei5yZWFkX2J5dGUocCsrKSAmIDB4ZmYpIDw8IGs7XG5cdFx0XHRcdFx0XHRrICs9IDg7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZGlzdCArPSAoYiAmIGluZmxhdGVfbWFza1tqXSk7XG5cblx0XHRcdFx0XHRiID4+PSBqO1xuXHRcdFx0XHRcdGsgLT0gajtcblxuXHRcdFx0XHRcdG1vZGUgPSBDT1BZO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgQ09QWTogLy8gbzogY29weWluZyBieXRlcyBpbiB3aW4sIHdhaXRpbmcgZm9yIHNwYWNlXG5cdFx0XHRcdFx0ZiA9IHEgLSBkaXN0O1xuXHRcdFx0XHRcdHdoaWxlIChmIDwgMCkgeyAvLyBtb2R1bG8gd2luIHNpemUtXCJ3aGlsZVwiIGluc3RlYWRcblx0XHRcdFx0XHRcdGYgKz0gcy5lbmQ7IC8vIG9mIFwiaWZcIiBoYW5kbGVzIGludmFsaWQgZGlzdGFuY2VzXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlIChsZW4gIT09IDApIHtcblxuXHRcdFx0XHRcdFx0aWYgKG0gPT09IDApIHtcblx0XHRcdFx0XHRcdFx0aWYgKHEgPT0gcy5lbmQgJiYgcy5yZWFkICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0cSA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0bSA9IHEgPCBzLnJlYWQgPyBzLnJlYWQgLSBxIC0gMSA6IHMuZW5kIC0gcTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAobSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdHMud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0XHRcdHIgPSBzLmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0XHRcdFx0cSA9IHMud3JpdGU7XG5cdFx0XHRcdFx0XHRcdFx0bSA9IHEgPCBzLnJlYWQgPyBzLnJlYWQgLSBxIC0gMSA6IHMuZW5kIC0gcTtcblxuXHRcdFx0XHRcdFx0XHRcdGlmIChxID09IHMuZW5kICYmIHMucmVhZCAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cSA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0XHRtID0gcSA8IHMucmVhZCA/IHMucmVhZCAtIHEgLSAxIDogcy5lbmQgLSBxO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdGlmIChtID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzLmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0XHRcdFx0cy5iaXRrID0gaztcblx0XHRcdFx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRcdFx0XHRcdHMud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHMuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cy53aW5bcSsrXSA9IHMud2luW2YrK107XG5cdFx0XHRcdFx0XHRtLS07XG5cblx0XHRcdFx0XHRcdGlmIChmID09IHMuZW5kKVxuXHRcdFx0XHRcdFx0XHRmID0gMDtcblx0XHRcdFx0XHRcdGxlbi0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RlID0gU1RBUlQ7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgTElUOiAvLyBvOiBnb3QgbGl0ZXJhbCwgd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlXG5cdFx0XHRcdFx0aWYgKG0gPT09IDApIHtcblx0XHRcdFx0XHRcdGlmIChxID09IHMuZW5kICYmIHMucmVhZCAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRxID0gMDtcblx0XHRcdFx0XHRcdFx0bSA9IHEgPCBzLnJlYWQgPyBzLnJlYWQgLSBxIC0gMSA6IHMuZW5kIC0gcTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChtID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdHMud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0XHRyID0gcy5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdFx0XHRxID0gcy53cml0ZTtcblx0XHRcdFx0XHRcdFx0bSA9IHEgPCBzLnJlYWQgPyBzLnJlYWQgLSBxIC0gMSA6IHMuZW5kIC0gcTtcblxuXHRcdFx0XHRcdFx0XHRpZiAocSA9PSBzLmVuZCAmJiBzLnJlYWQgIT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRxID0gMDtcblx0XHRcdFx0XHRcdFx0XHRtID0gcSA8IHMucmVhZCA/IHMucmVhZCAtIHEgLSAxIDogcy5lbmQgLSBxO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChtID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0cy5iaXRiID0gYjtcblx0XHRcdFx0XHRcdFx0XHRzLmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0XHRcdHMud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBzLmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ciA9IFpfT0s7XG5cblx0XHRcdFx0XHRzLndpbltxKytdID0gLyogKGJ5dGUpICovbGl0O1xuXHRcdFx0XHRcdG0tLTtcblxuXHRcdFx0XHRcdG1vZGUgPSBTVEFSVDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBXQVNIOiAvLyBvOiBnb3QgZW9iLCBwb3NzaWJseSBtb3JlIG91dHB1dFxuXHRcdFx0XHRcdGlmIChrID4gNykgeyAvLyByZXR1cm4gdW51c2VkIGJ5dGUsIGlmIGFueVxuXHRcdFx0XHRcdFx0ayAtPSA4O1xuXHRcdFx0XHRcdFx0bisrO1xuXHRcdFx0XHRcdFx0cC0tOyAvLyBjYW4gYWx3YXlzIHJldHVybiBvbmVcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRzLndyaXRlID0gcTtcblx0XHRcdFx0XHRyID0gcy5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdHEgPSBzLndyaXRlO1xuXHRcdFx0XHRcdG0gPSBxIDwgcy5yZWFkID8gcy5yZWFkIC0gcSAtIDEgOiBzLmVuZCAtIHE7XG5cblx0XHRcdFx0XHRpZiAocy5yZWFkICE9IHMud3JpdGUpIHtcblx0XHRcdFx0XHRcdHMuYml0YiA9IGI7XG5cdFx0XHRcdFx0XHRzLmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0cy53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RlID0gRU5EO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgRU5EOlxuXHRcdFx0XHRcdHIgPSBaX1NUUkVBTV9FTkQ7XG5cdFx0XHRcdFx0cy5iaXRiID0gYjtcblx0XHRcdFx0XHRzLmJpdGsgPSBrO1xuXHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdHMud3JpdGUgPSBxO1xuXHRcdFx0XHRcdHJldHVybiBzLmluZmxhdGVfZmx1c2goeiwgcik7XG5cblx0XHRcdFx0Y2FzZSBCQURDT0RFOiAvLyB4OiBnb3QgZXJyb3JcblxuXHRcdFx0XHRcdHIgPSBaX0RBVEFfRVJST1I7XG5cblx0XHRcdFx0XHRzLmJpdGIgPSBiO1xuXHRcdFx0XHRcdHMuYml0ayA9IGs7XG5cdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0cy53cml0ZSA9IHE7XG5cdFx0XHRcdFx0cmV0dXJuIHMuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHIgPSBaX1NUUkVBTV9FUlJPUjtcblxuXHRcdFx0XHRcdHMuYml0YiA9IGI7XG5cdFx0XHRcdFx0cy5iaXRrID0gaztcblx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRzLndyaXRlID0gcTtcblx0XHRcdFx0XHRyZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHR0aGF0LmZyZWUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gWkZSRUUoeiwgYyk7XG5cdH07XG5cbn1cblxuLy8gSW5mQmxvY2tzXG5cbi8vIFRhYmxlIGZvciBkZWZsYXRlIGZyb20gUEtaSVAncyBhcHBub3RlLnR4dC5cbmNvbnN0IGJvcmRlciA9IFsgLy8gT3JkZXIgb2YgdGhlIGJpdCBsZW5ndGggY29kZSBsZW5ndGhzXG5cdDE2LCAxNywgMTgsIDAsIDgsIDcsIDksIDYsIDEwLCA1LCAxMSwgNCwgMTIsIDMsIDEzLCAyLCAxNCwgMSwgMTVdO1xuXG5jb25zdCBUWVBFID0gMDsgLy8gZ2V0IHR5cGUgYml0cyAoMywgaW5jbHVkaW5nIGVuZCBiaXQpXG5jb25zdCBMRU5TID0gMTsgLy8gZ2V0IGxlbmd0aHMgZm9yIHN0b3JlZFxuY29uc3QgU1RPUkVEID0gMjsvLyBwcm9jZXNzaW5nIHN0b3JlZCBibG9ja1xuY29uc3QgVEFCTEUgPSAzOyAvLyBnZXQgdGFibGUgbGVuZ3Roc1xuY29uc3QgQlRSRUUgPSA0OyAvLyBnZXQgYml0IGxlbmd0aHMgdHJlZSBmb3IgYSBkeW5hbWljXG4vLyBibG9ja1xuY29uc3QgRFRSRUUgPSA1OyAvLyBnZXQgbGVuZ3RoLCBkaXN0YW5jZSB0cmVlcyBmb3IgYVxuLy8gZHluYW1pYyBibG9ja1xuY29uc3QgQ09ERVMgPSA2OyAvLyBwcm9jZXNzaW5nIGZpeGVkIG9yIGR5bmFtaWMgYmxvY2tcbmNvbnN0IERSWSA9IDc7IC8vIG91dHB1dCByZW1haW5pbmcgd2luIGJ5dGVzXG5jb25zdCBET05FTE9DS1MgPSA4OyAvLyBmaW5pc2hlZCBsYXN0IGJsb2NrLCBkb25lXG5jb25zdCBCQURCTE9DS1MgPSA5OyAvLyBvdCBhIGRhdGEgZXJyb3ItLXN0dWNrIGhlcmVcblxuZnVuY3Rpb24gSW5mQmxvY2tzKHosIHcpIHtcblx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cblx0bGV0IG1vZGUgPSBUWVBFOyAvLyBjdXJyZW50IGluZmxhdGVfYmxvY2sgbW9kZVxuXG5cdGxldCBsZWZ0ID0gMDsgLy8gaWYgU1RPUkVELCBieXRlcyBsZWZ0IHRvIGNvcHlcblxuXHRsZXQgdGFibGUgPSAwOyAvLyB0YWJsZSBsZW5ndGhzICgxNCBiaXRzKVxuXHRsZXQgaW5kZXggPSAwOyAvLyBpbmRleCBpbnRvIGJsZW5zIChvciBib3JkZXIpXG5cdGxldCBibGVuczsgLy8gYml0IGxlbmd0aHMgb2YgY29kZXNcblx0Y29uc3QgYmIgPSBbMF07IC8vIGJpdCBsZW5ndGggdHJlZSBkZXB0aFxuXHRjb25zdCB0YiA9IFswXTsgLy8gYml0IGxlbmd0aCBkZWNvZGluZyB0cmVlXG5cblx0Y29uc3QgY29kZXMgPSBuZXcgSW5mQ29kZXMoKTsgLy8gaWYgQ09ERVMsIGN1cnJlbnQgc3RhdGVcblxuXHRsZXQgbGFzdCA9IDA7IC8vIHRydWUgaWYgdGhpcyBibG9jayBpcyB0aGUgbGFzdCBibG9ja1xuXG5cdGxldCBodWZ0cyA9IG5ldyBJbnQzMkFycmF5KE1BTlkgKiAzKTsgLy8gc2luZ2xlIG1hbGxvYyBmb3IgdHJlZSBzcGFjZVxuXHRjb25zdCBjaGVjayA9IDA7IC8vIGNoZWNrIG9uIG91dHB1dFxuXHRjb25zdCBpbmZ0cmVlID0gbmV3IEluZlRyZWUoKTtcblxuXHR0aGF0LmJpdGsgPSAwOyAvLyBiaXRzIGluIGJpdCBidWZmZXJcblx0dGhhdC5iaXRiID0gMDsgLy8gYml0IGJ1ZmZlclxuXHR0aGF0LndpbiA9IG5ldyBVaW50OEFycmF5KHcpOyAvLyBzbGlkaW5nIHdpblxuXHR0aGF0LmVuZCA9IHc7IC8vIG9uZSBieXRlIGFmdGVyIHNsaWRpbmcgd2luXG5cdHRoYXQucmVhZCA9IDA7IC8vIHdpbiByZWFkIHBvaW50ZXJcblx0dGhhdC53cml0ZSA9IDA7IC8vIHdpbiB3cml0ZSBwb2ludGVyXG5cblx0dGhhdC5yZXNldCA9IGZ1bmN0aW9uICh6LCBjKSB7XG5cdFx0aWYgKGMpXG5cdFx0XHRjWzBdID0gY2hlY2s7XG5cdFx0Ly8gaWYgKG1vZGUgPT0gQlRSRUUgfHwgbW9kZSA9PSBEVFJFRSkge1xuXHRcdC8vIH1cblx0XHRpZiAobW9kZSA9PSBDT0RFUykge1xuXHRcdFx0Y29kZXMuZnJlZSh6KTtcblx0XHR9XG5cdFx0bW9kZSA9IFRZUEU7XG5cdFx0dGhhdC5iaXRrID0gMDtcblx0XHR0aGF0LmJpdGIgPSAwO1xuXHRcdHRoYXQucmVhZCA9IHRoYXQud3JpdGUgPSAwO1xuXHR9O1xuXG5cdHRoYXQucmVzZXQoeiwgbnVsbCk7XG5cblx0Ly8gY29weSBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gdGhlIHNsaWRpbmcgd2luIHRvIHRoZSBvdXRwdXQgYXJlYVxuXHR0aGF0LmluZmxhdGVfZmx1c2ggPSBmdW5jdGlvbiAoeiwgcikge1xuXHRcdGxldCBuO1xuXHRcdGxldCBwO1xuXHRcdGxldCBxO1xuXG5cdFx0Ly8gbG9jYWwgY29waWVzIG9mIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gcG9pbnRlcnNcblx0XHRwID0gei5uZXh0X291dF9pbmRleDtcblx0XHRxID0gdGhhdC5yZWFkO1xuXG5cdFx0Ly8gY29tcHV0ZSBudW1iZXIgb2YgYnl0ZXMgdG8gY29weSBhcyBmYXIgYXMgZW5kIG9mIHdpblxuXHRcdG4gPSAvKiAoaW50KSAqLygocSA8PSB0aGF0LndyaXRlID8gdGhhdC53cml0ZSA6IHRoYXQuZW5kKSAtIHEpO1xuXHRcdGlmIChuID4gei5hdmFpbF9vdXQpXG5cdFx0XHRuID0gei5hdmFpbF9vdXQ7XG5cdFx0aWYgKG4gIT09IDAgJiYgciA9PSBaX0JVRl9FUlJPUilcblx0XHRcdHIgPSBaX09LO1xuXG5cdFx0Ly8gdXBkYXRlIGNvdW50ZXJzXG5cdFx0ei5hdmFpbF9vdXQgLT0gbjtcblx0XHR6LnRvdGFsX291dCArPSBuO1xuXG5cdFx0Ly8gY29weSBhcyBmYXIgYXMgZW5kIG9mIHdpblxuXHRcdHoubmV4dF9vdXQuc2V0KHRoYXQud2luLnN1YmFycmF5KHEsIHEgKyBuKSwgcCk7XG5cdFx0cCArPSBuO1xuXHRcdHEgKz0gbjtcblxuXHRcdC8vIHNlZSBpZiBtb3JlIHRvIGNvcHkgYXQgYmVnaW5uaW5nIG9mIHdpblxuXHRcdGlmIChxID09IHRoYXQuZW5kKSB7XG5cdFx0XHQvLyB3cmFwIHBvaW50ZXJzXG5cdFx0XHRxID0gMDtcblx0XHRcdGlmICh0aGF0LndyaXRlID09IHRoYXQuZW5kKVxuXHRcdFx0XHR0aGF0LndyaXRlID0gMDtcblxuXHRcdFx0Ly8gY29tcHV0ZSBieXRlcyB0byBjb3B5XG5cdFx0XHRuID0gdGhhdC53cml0ZSAtIHE7XG5cdFx0XHRpZiAobiA+IHouYXZhaWxfb3V0KVxuXHRcdFx0XHRuID0gei5hdmFpbF9vdXQ7XG5cdFx0XHRpZiAobiAhPT0gMCAmJiByID09IFpfQlVGX0VSUk9SKVxuXHRcdFx0XHRyID0gWl9PSztcblxuXHRcdFx0Ly8gdXBkYXRlIGNvdW50ZXJzXG5cdFx0XHR6LmF2YWlsX291dCAtPSBuO1xuXHRcdFx0ei50b3RhbF9vdXQgKz0gbjtcblxuXHRcdFx0Ly8gY29weVxuXHRcdFx0ei5uZXh0X291dC5zZXQodGhhdC53aW4uc3ViYXJyYXkocSwgcSArIG4pLCBwKTtcblx0XHRcdHAgKz0gbjtcblx0XHRcdHEgKz0gbjtcblx0XHR9XG5cblx0XHQvLyB1cGRhdGUgcG9pbnRlcnNcblx0XHR6Lm5leHRfb3V0X2luZGV4ID0gcDtcblx0XHR0aGF0LnJlYWQgPSBxO1xuXG5cdFx0Ly8gZG9uZVxuXHRcdHJldHVybiByO1xuXHR9O1xuXG5cdHRoYXQucHJvYyA9IGZ1bmN0aW9uICh6LCByKSB7XG5cdFx0bGV0IHQ7IC8vIHRlbXBvcmFyeSBzdG9yYWdlXG5cdFx0bGV0IGI7IC8vIGJpdCBidWZmZXJcblx0XHRsZXQgazsgLy8gYml0cyBpbiBiaXQgYnVmZmVyXG5cdFx0bGV0IHA7IC8vIGlucHV0IGRhdGEgcG9pbnRlclxuXHRcdGxldCBuOyAvLyBieXRlcyBhdmFpbGFibGUgdGhlcmVcblx0XHRsZXQgcTsgLy8gb3V0cHV0IHdpbiB3cml0ZSBwb2ludGVyXG5cdFx0bGV0IG07IC8vIGJ5dGVzIHRvIGVuZCBvZiB3aW4gb3IgcmVhZCBwb2ludGVyXG5cblx0XHRsZXQgaTtcblxuXHRcdC8vIGNvcHkgaW5wdXQvb3V0cHV0IGluZm9ybWF0aW9uIHRvIGxvY2FscyAoVVBEQVRFIG1hY3JvIHJlc3RvcmVzKVxuXHRcdC8vIHtcblx0XHRwID0gei5uZXh0X2luX2luZGV4O1xuXHRcdG4gPSB6LmF2YWlsX2luO1xuXHRcdGIgPSB0aGF0LmJpdGI7XG5cdFx0ayA9IHRoYXQuYml0aztcblx0XHQvLyB9XG5cdFx0Ly8ge1xuXHRcdHEgPSB0aGF0LndyaXRlO1xuXHRcdG0gPSAvKiAoaW50KSAqLyhxIDwgdGhhdC5yZWFkID8gdGhhdC5yZWFkIC0gcSAtIDEgOiB0aGF0LmVuZCAtIHEpO1xuXHRcdC8vIH1cblxuXHRcdC8vIHByb2Nlc3MgaW5wdXQgYmFzZWQgb24gY3VycmVudCBzdGF0ZVxuXHRcdC8vIERFQlVHIGR0cmVlXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuXHRcdHdoaWxlICh0cnVlKSB7XG5cdFx0XHRsZXQgYmwsIGJkLCB0bCwgdGQsIGJsXywgYmRfLCB0bF8sIHRkXztcblx0XHRcdHN3aXRjaCAobW9kZSkge1xuXHRcdFx0XHRjYXNlIFRZUEU6XG5cblx0XHRcdFx0XHR3aGlsZSAoayA8ICgzKSkge1xuXHRcdFx0XHRcdFx0aWYgKG4gIT09IDApIHtcblx0XHRcdFx0XHRcdFx0ciA9IFpfT0s7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0aGF0LmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0XHR0aGF0LmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0XHR0aGF0LndyaXRlID0gcTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG4tLTtcblx0XHRcdFx0XHRcdGIgfD0gKHoucmVhZF9ieXRlKHArKykgJiAweGZmKSA8PCBrO1xuXHRcdFx0XHRcdFx0ayArPSA4O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0ID0gLyogKGludCkgKi8oYiAmIDcpO1xuXHRcdFx0XHRcdGxhc3QgPSB0ICYgMTtcblxuXHRcdFx0XHRcdHN3aXRjaCAodCA+Pj4gMSkge1xuXHRcdFx0XHRcdFx0Y2FzZSAwOiAvLyBzdG9yZWRcblx0XHRcdFx0XHRcdFx0Ly8ge1xuXHRcdFx0XHRcdFx0XHRiID4+Pj0gKDMpO1xuXHRcdFx0XHRcdFx0XHRrIC09ICgzKTtcblx0XHRcdFx0XHRcdFx0Ly8gfVxuXHRcdFx0XHRcdFx0XHR0ID0gayAmIDc7IC8vIGdvIHRvIGJ5dGUgYm91bmRhcnlcblxuXHRcdFx0XHRcdFx0XHQvLyB7XG5cdFx0XHRcdFx0XHRcdGIgPj4+PSAodCk7XG5cdFx0XHRcdFx0XHRcdGsgLT0gKHQpO1xuXHRcdFx0XHRcdFx0XHQvLyB9XG5cdFx0XHRcdFx0XHRcdG1vZGUgPSBMRU5TOyAvLyBnZXQgbGVuZ3RoIG9mIHN0b3JlZCBibG9ja1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMTogLy8gZml4ZWRcblx0XHRcdFx0XHRcdFx0Ly8ge1xuXHRcdFx0XHRcdFx0XHRibCA9IFtdOyAvLyBuZXcgQXJyYXkoMSk7XG5cdFx0XHRcdFx0XHRcdGJkID0gW107IC8vIG5ldyBBcnJheSgxKTtcblx0XHRcdFx0XHRcdFx0dGwgPSBbW11dOyAvLyBuZXcgQXJyYXkoMSk7XG5cdFx0XHRcdFx0XHRcdHRkID0gW1tdXTsgLy8gbmV3IEFycmF5KDEpO1xuXG5cdFx0XHRcdFx0XHRcdEluZlRyZWUuaW5mbGF0ZV90cmVlc19maXhlZChibCwgYmQsIHRsLCB0ZCk7XG5cdFx0XHRcdFx0XHRcdGNvZGVzLmluaXQoYmxbMF0sIGJkWzBdLCB0bFswXSwgMCwgdGRbMF0sIDApO1xuXHRcdFx0XHRcdFx0XHQvLyB9XG5cblx0XHRcdFx0XHRcdFx0Ly8ge1xuXHRcdFx0XHRcdFx0XHRiID4+Pj0gKDMpO1xuXHRcdFx0XHRcdFx0XHRrIC09ICgzKTtcblx0XHRcdFx0XHRcdFx0Ly8gfVxuXG5cdFx0XHRcdFx0XHRcdG1vZGUgPSBDT0RFUztcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDI6IC8vIGR5bmFtaWNcblxuXHRcdFx0XHRcdFx0XHQvLyB7XG5cdFx0XHRcdFx0XHRcdGIgPj4+PSAoMyk7XG5cdFx0XHRcdFx0XHRcdGsgLT0gKDMpO1xuXHRcdFx0XHRcdFx0XHQvLyB9XG5cblx0XHRcdFx0XHRcdFx0bW9kZSA9IFRBQkxFO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMzogLy8gaWxsZWdhbFxuXG5cdFx0XHRcdFx0XHRcdC8vIHtcblx0XHRcdFx0XHRcdFx0YiA+Pj49ICgzKTtcblx0XHRcdFx0XHRcdFx0ayAtPSAoMyk7XG5cdFx0XHRcdFx0XHRcdC8vIH1cblx0XHRcdFx0XHRcdFx0bW9kZSA9IEJBREJMT0NLUztcblx0XHRcdFx0XHRcdFx0ei5tc2cgPSBcImludmFsaWQgYmxvY2sgdHlwZVwiO1xuXHRcdFx0XHRcdFx0XHRyID0gWl9EQVRBX0VSUk9SO1xuXG5cdFx0XHRcdFx0XHRcdHRoYXQuYml0YiA9IGI7XG5cdFx0XHRcdFx0XHRcdHRoYXQuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhhdC5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBMRU5TOlxuXG5cdFx0XHRcdFx0d2hpbGUgKGsgPCAoMzIpKSB7XG5cdFx0XHRcdFx0XHRpZiAobiAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRyID0gWl9PSztcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRoYXQuYml0YiA9IGI7XG5cdFx0XHRcdFx0XHRcdHRoYXQuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhhdC5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bi0tO1xuXHRcdFx0XHRcdFx0YiB8PSAoei5yZWFkX2J5dGUocCsrKSAmIDB4ZmYpIDw8IGs7XG5cdFx0XHRcdFx0XHRrICs9IDg7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCgoKH5iKSA+Pj4gMTYpICYgMHhmZmZmKSAhPSAoYiAmIDB4ZmZmZikpIHtcblx0XHRcdFx0XHRcdG1vZGUgPSBCQURCTE9DS1M7XG5cdFx0XHRcdFx0XHR6Lm1zZyA9IFwiaW52YWxpZCBzdG9yZWQgYmxvY2sgbGVuZ3Roc1wiO1xuXHRcdFx0XHRcdFx0ciA9IFpfREFUQV9FUlJPUjtcblxuXHRcdFx0XHRcdFx0dGhhdC5iaXRiID0gYjtcblx0XHRcdFx0XHRcdHRoYXQuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHR0aGF0LndyaXRlID0gcTtcblx0XHRcdFx0XHRcdHJldHVybiB0aGF0LmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGxlZnQgPSAoYiAmIDB4ZmZmZik7XG5cdFx0XHRcdFx0YiA9IGsgPSAwOyAvLyBkdW1wIGJpdHNcblx0XHRcdFx0XHRtb2RlID0gbGVmdCAhPT0gMCA/IFNUT1JFRCA6IChsYXN0ICE9PSAwID8gRFJZIDogVFlQRSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgU1RPUkVEOlxuXHRcdFx0XHRcdGlmIChuID09PSAwKSB7XG5cdFx0XHRcdFx0XHR0aGF0LmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0dGhhdC5iaXRrID0gaztcblx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAobSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0aWYgKHEgPT0gdGhhdC5lbmQgJiYgdGhhdC5yZWFkICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdHEgPSAwO1xuXHRcdFx0XHRcdFx0XHRtID0gLyogKGludCkgKi8ocSA8IHRoYXQucmVhZCA/IHRoYXQucmVhZCAtIHEgLSAxIDogdGhhdC5lbmQgLSBxKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChtID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0XHRyID0gdGhhdC5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdFx0XHRxID0gdGhhdC53cml0ZTtcblx0XHRcdFx0XHRcdFx0bSA9IC8qIChpbnQpICovKHEgPCB0aGF0LnJlYWQgPyB0aGF0LnJlYWQgLSBxIC0gMSA6IHRoYXQuZW5kIC0gcSk7XG5cdFx0XHRcdFx0XHRcdGlmIChxID09IHRoYXQuZW5kICYmIHRoYXQucmVhZCAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdHEgPSAwO1xuXHRcdFx0XHRcdFx0XHRcdG0gPSAvKiAoaW50KSAqLyhxIDwgdGhhdC5yZWFkID8gdGhhdC5yZWFkIC0gcSAtIDEgOiB0aGF0LmVuZCAtIHEpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChtID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhhdC5iaXRiID0gYjtcblx0XHRcdFx0XHRcdFx0XHR0aGF0LmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0aGF0LmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ciA9IFpfT0s7XG5cblx0XHRcdFx0XHR0ID0gbGVmdDtcblx0XHRcdFx0XHRpZiAodCA+IG4pXG5cdFx0XHRcdFx0XHR0ID0gbjtcblx0XHRcdFx0XHRpZiAodCA+IG0pXG5cdFx0XHRcdFx0XHR0ID0gbTtcblx0XHRcdFx0XHR0aGF0Lndpbi5zZXQoei5yZWFkX2J1ZihwLCB0KSwgcSk7XG5cdFx0XHRcdFx0cCArPSB0O1xuXHRcdFx0XHRcdG4gLT0gdDtcblx0XHRcdFx0XHRxICs9IHQ7XG5cdFx0XHRcdFx0bSAtPSB0O1xuXHRcdFx0XHRcdGlmICgobGVmdCAtPSB0KSAhPT0gMClcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdG1vZGUgPSBsYXN0ICE9PSAwID8gRFJZIDogVFlQRTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBUQUJMRTpcblxuXHRcdFx0XHRcdHdoaWxlIChrIDwgKDE0KSkge1xuXHRcdFx0XHRcdFx0aWYgKG4gIT09IDApIHtcblx0XHRcdFx0XHRcdFx0ciA9IFpfT0s7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0aGF0LmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0XHR0aGF0LmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0XHR0aGF0LndyaXRlID0gcTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bi0tO1xuXHRcdFx0XHRcdFx0YiB8PSAoei5yZWFkX2J5dGUocCsrKSAmIDB4ZmYpIDw8IGs7XG5cdFx0XHRcdFx0XHRrICs9IDg7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGFibGUgPSB0ID0gKGIgJiAweDNmZmYpO1xuXHRcdFx0XHRcdGlmICgodCAmIDB4MWYpID4gMjkgfHwgKCh0ID4+IDUpICYgMHgxZikgPiAyOSkge1xuXHRcdFx0XHRcdFx0bW9kZSA9IEJBREJMT0NLUztcblx0XHRcdFx0XHRcdHoubXNnID0gXCJ0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9sc1wiO1xuXHRcdFx0XHRcdFx0ciA9IFpfREFUQV9FUlJPUjtcblxuXHRcdFx0XHRcdFx0dGhhdC5iaXRiID0gYjtcblx0XHRcdFx0XHRcdHRoYXQuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHR0aGF0LndyaXRlID0gcTtcblx0XHRcdFx0XHRcdHJldHVybiB0aGF0LmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHQgPSAyNTggKyAodCAmIDB4MWYpICsgKCh0ID4+IDUpICYgMHgxZik7XG5cdFx0XHRcdFx0aWYgKCFibGVucyB8fCBibGVucy5sZW5ndGggPCB0KSB7XG5cdFx0XHRcdFx0XHRibGVucyA9IFtdOyAvLyBuZXcgQXJyYXkodCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCB0OyBpKyspIHtcblx0XHRcdFx0XHRcdFx0YmxlbnNbaV0gPSAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIHtcblx0XHRcdFx0XHRiID4+Pj0gKDE0KTtcblx0XHRcdFx0XHRrIC09ICgxNCk7XG5cdFx0XHRcdFx0Ly8gfVxuXG5cdFx0XHRcdFx0aW5kZXggPSAwO1xuXHRcdFx0XHRcdG1vZGUgPSBCVFJFRTtcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlIEJUUkVFOlxuXHRcdFx0XHRcdHdoaWxlIChpbmRleCA8IDQgKyAodGFibGUgPj4+IDEwKSkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKGsgPCAoMykpIHtcblx0XHRcdFx0XHRcdFx0aWYgKG4gIT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRyID0gWl9PSztcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGF0LmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0XHRcdHRoYXQuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHRcdFx0dGhhdC53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRuLS07XG5cdFx0XHRcdFx0XHRcdGIgfD0gKHoucmVhZF9ieXRlKHArKykgJiAweGZmKSA8PCBrO1xuXHRcdFx0XHRcdFx0XHRrICs9IDg7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGJsZW5zW2JvcmRlcltpbmRleCsrXV0gPSBiICYgNztcblxuXHRcdFx0XHRcdFx0Ly8ge1xuXHRcdFx0XHRcdFx0YiA+Pj49ICgzKTtcblx0XHRcdFx0XHRcdGsgLT0gKDMpO1xuXHRcdFx0XHRcdFx0Ly8gfVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHdoaWxlIChpbmRleCA8IDE5KSB7XG5cdFx0XHRcdFx0XHRibGVuc1tib3JkZXJbaW5kZXgrK11dID0gMDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRiYlswXSA9IDc7XG5cdFx0XHRcdFx0dCA9IGluZnRyZWUuaW5mbGF0ZV90cmVlc19iaXRzKGJsZW5zLCBiYiwgdGIsIGh1ZnRzLCB6KTtcblx0XHRcdFx0XHRpZiAodCAhPSBaX09LKSB7XG5cdFx0XHRcdFx0XHRyID0gdDtcblx0XHRcdFx0XHRcdGlmIChyID09IFpfREFUQV9FUlJPUikge1xuXHRcdFx0XHRcdFx0XHRibGVucyA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdG1vZGUgPSBCQURCTE9DS1M7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHRoYXQuYml0YiA9IGI7XG5cdFx0XHRcdFx0XHR0aGF0LmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0dGhhdC53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhhdC5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGluZGV4ID0gMDtcblx0XHRcdFx0XHRtb2RlID0gRFRSRUU7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSBEVFJFRTpcblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG5cdFx0XHRcdFx0d2hpbGUgKHRydWUpIHtcblx0XHRcdFx0XHRcdHQgPSB0YWJsZTtcblx0XHRcdFx0XHRcdGlmIChpbmRleCA+PSAyNTggKyAodCAmIDB4MWYpICsgKCh0ID4+IDUpICYgMHgxZikpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGxldCBqLCBjO1xuXG5cdFx0XHRcdFx0XHR0ID0gYmJbMF07XG5cblx0XHRcdFx0XHRcdHdoaWxlIChrIDwgKHQpKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChuICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0ciA9IFpfT0s7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhhdC5iaXRiID0gYjtcblx0XHRcdFx0XHRcdFx0XHR0aGF0LmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0aGF0LmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0bi0tO1xuXHRcdFx0XHRcdFx0XHRiIHw9ICh6LnJlYWRfYnl0ZShwKyspICYgMHhmZikgPDwgaztcblx0XHRcdFx0XHRcdFx0ayArPSA4O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBpZiAodGJbMF0gPT0gLTEpIHtcblx0XHRcdFx0XHRcdC8vIFN5c3RlbS5lcnIucHJpbnRsbihcIm51bGwuLi5cIik7XG5cdFx0XHRcdFx0XHQvLyB9XG5cblx0XHRcdFx0XHRcdHQgPSBodWZ0c1sodGJbMF0gKyAoYiAmIGluZmxhdGVfbWFza1t0XSkpICogMyArIDFdO1xuXHRcdFx0XHRcdFx0YyA9IGh1ZnRzWyh0YlswXSArIChiICYgaW5mbGF0ZV9tYXNrW3RdKSkgKiAzICsgMl07XG5cblx0XHRcdFx0XHRcdGlmIChjIDwgMTYpIHtcblx0XHRcdFx0XHRcdFx0YiA+Pj49ICh0KTtcblx0XHRcdFx0XHRcdFx0ayAtPSAodCk7XG5cdFx0XHRcdFx0XHRcdGJsZW5zW2luZGV4KytdID0gYztcblx0XHRcdFx0XHRcdH0gZWxzZSB7IC8vIGMgPT0gMTYuLjE4XG5cdFx0XHRcdFx0XHRcdGkgPSBjID09IDE4ID8gNyA6IGMgLSAxNDtcblx0XHRcdFx0XHRcdFx0aiA9IGMgPT0gMTggPyAxMSA6IDM7XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKGsgPCAodCArIGkpKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKG4gIT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHIgPSBaX09LO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGF0LmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0XHRcdFx0dGhhdC5iaXRrID0gaztcblx0XHRcdFx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0bi0tO1xuXHRcdFx0XHRcdFx0XHRcdGIgfD0gKHoucmVhZF9ieXRlKHArKykgJiAweGZmKSA8PCBrO1xuXHRcdFx0XHRcdFx0XHRcdGsgKz0gODtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGIgPj4+PSAodCk7XG5cdFx0XHRcdFx0XHRcdGsgLT0gKHQpO1xuXG5cdFx0XHRcdFx0XHRcdGogKz0gKGIgJiBpbmZsYXRlX21hc2tbaV0pO1xuXG5cdFx0XHRcdFx0XHRcdGIgPj4+PSAoaSk7XG5cdFx0XHRcdFx0XHRcdGsgLT0gKGkpO1xuXG5cdFx0XHRcdFx0XHRcdGkgPSBpbmRleDtcblx0XHRcdFx0XHRcdFx0dCA9IHRhYmxlO1xuXHRcdFx0XHRcdFx0XHRpZiAoaSArIGogPiAyNTggKyAodCAmIDB4MWYpICsgKCh0ID4+IDUpICYgMHgxZikgfHwgKGMgPT0gMTYgJiYgaSA8IDEpKSB7XG5cdFx0XHRcdFx0XHRcdFx0YmxlbnMgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHRcdG1vZGUgPSBCQURCTE9DS1M7XG5cdFx0XHRcdFx0XHRcdFx0ei5tc2cgPSBcImludmFsaWQgYml0IGxlbmd0aCByZXBlYXRcIjtcblx0XHRcdFx0XHRcdFx0XHRyID0gWl9EQVRBX0VSUk9SO1xuXG5cdFx0XHRcdFx0XHRcdFx0dGhhdC5iaXRiID0gYjtcblx0XHRcdFx0XHRcdFx0XHR0aGF0LmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0aGF0LmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRjID0gYyA9PSAxNiA/IGJsZW5zW2kgLSAxXSA6IDA7XG5cdFx0XHRcdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRcdFx0XHRibGVuc1tpKytdID0gYztcblx0XHRcdFx0XHRcdFx0fSB3aGlsZSAoLS1qICE9PSAwKTtcblx0XHRcdFx0XHRcdFx0aW5kZXggPSBpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRiWzBdID0gLTE7XG5cdFx0XHRcdFx0Ly8ge1xuXHRcdFx0XHRcdGJsXyA9IFtdOyAvLyBuZXcgQXJyYXkoMSk7XG5cdFx0XHRcdFx0YmRfID0gW107IC8vIG5ldyBBcnJheSgxKTtcblx0XHRcdFx0XHR0bF8gPSBbXTsgLy8gbmV3IEFycmF5KDEpO1xuXHRcdFx0XHRcdHRkXyA9IFtdOyAvLyBuZXcgQXJyYXkoMSk7XG5cdFx0XHRcdFx0YmxfWzBdID0gOTsgLy8gbXVzdCBiZSA8PSA5IGZvciBsb29rYWhlYWQgYXNzdW1wdGlvbnNcblx0XHRcdFx0XHRiZF9bMF0gPSA2OyAvLyBtdXN0IGJlIDw9IDkgZm9yIGxvb2thaGVhZCBhc3N1bXB0aW9uc1xuXG5cdFx0XHRcdFx0dCA9IHRhYmxlO1xuXHRcdFx0XHRcdHQgPSBpbmZ0cmVlLmluZmxhdGVfdHJlZXNfZHluYW1pYygyNTcgKyAodCAmIDB4MWYpLCAxICsgKCh0ID4+IDUpICYgMHgxZiksIGJsZW5zLCBibF8sIGJkXywgdGxfLCB0ZF8sIGh1ZnRzLCB6KTtcblxuXHRcdFx0XHRcdGlmICh0ICE9IFpfT0spIHtcblx0XHRcdFx0XHRcdGlmICh0ID09IFpfREFUQV9FUlJPUikge1xuXHRcdFx0XHRcdFx0XHRibGVucyA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdG1vZGUgPSBCQURCTE9DS1M7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyID0gdDtcblxuXHRcdFx0XHRcdFx0dGhhdC5iaXRiID0gYjtcblx0XHRcdFx0XHRcdHRoYXQuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHR0aGF0LndyaXRlID0gcTtcblx0XHRcdFx0XHRcdHJldHVybiB0aGF0LmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvZGVzLmluaXQoYmxfWzBdLCBiZF9bMF0sIGh1ZnRzLCB0bF9bMF0sIGh1ZnRzLCB0ZF9bMF0pO1xuXHRcdFx0XHRcdC8vIH1cblx0XHRcdFx0XHRtb2RlID0gQ09ERVM7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSBDT0RFUzpcblx0XHRcdFx0XHR0aGF0LmJpdGIgPSBiO1xuXHRcdFx0XHRcdHRoYXQuYml0ayA9IGs7XG5cdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0dGhhdC53cml0ZSA9IHE7XG5cblx0XHRcdFx0XHRpZiAoKHIgPSBjb2Rlcy5wcm9jKHRoYXQsIHosIHIpKSAhPSBaX1NUUkVBTV9FTkQpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGF0LmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHIgPSBaX09LO1xuXHRcdFx0XHRcdGNvZGVzLmZyZWUoeik7XG5cblx0XHRcdFx0XHRwID0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdG4gPSB6LmF2YWlsX2luO1xuXHRcdFx0XHRcdGIgPSB0aGF0LmJpdGI7XG5cdFx0XHRcdFx0ayA9IHRoYXQuYml0aztcblx0XHRcdFx0XHRxID0gdGhhdC53cml0ZTtcblx0XHRcdFx0XHRtID0gLyogKGludCkgKi8ocSA8IHRoYXQucmVhZCA/IHRoYXQucmVhZCAtIHEgLSAxIDogdGhhdC5lbmQgLSBxKTtcblxuXHRcdFx0XHRcdGlmIChsYXN0ID09PSAwKSB7XG5cdFx0XHRcdFx0XHRtb2RlID0gVFlQRTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RlID0gRFJZO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgRFJZOlxuXHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdHIgPSB0aGF0LmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0cSA9IHRoYXQud3JpdGU7XG5cdFx0XHRcdFx0bSA9IC8qIChpbnQpICovKHEgPCB0aGF0LnJlYWQgPyB0aGF0LnJlYWQgLSBxIC0gMSA6IHRoYXQuZW5kIC0gcSk7XG5cdFx0XHRcdFx0aWYgKHRoYXQucmVhZCAhPSB0aGF0LndyaXRlKSB7XG5cdFx0XHRcdFx0XHR0aGF0LmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0dGhhdC5iaXRrID0gaztcblx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kZSA9IERPTkVMT0NLUztcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlIERPTkVMT0NLUzpcblx0XHRcdFx0XHRyID0gWl9TVFJFQU1fRU5EO1xuXG5cdFx0XHRcdFx0dGhhdC5iaXRiID0gYjtcblx0XHRcdFx0XHR0aGF0LmJpdGsgPSBrO1xuXHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdHJldHVybiB0aGF0LmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdGNhc2UgQkFEQkxPQ0tTOlxuXHRcdFx0XHRcdHIgPSBaX0RBVEFfRVJST1I7XG5cblx0XHRcdFx0XHR0aGF0LmJpdGIgPSBiO1xuXHRcdFx0XHRcdHRoYXQuYml0ayA9IGs7XG5cdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0dGhhdC53cml0ZSA9IHE7XG5cdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHIgPSBaX1NUUkVBTV9FUlJPUjtcblxuXHRcdFx0XHRcdHRoYXQuYml0YiA9IGI7XG5cdFx0XHRcdFx0dGhhdC5iaXRrID0gaztcblx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHR0aGF0LndyaXRlID0gcTtcblx0XHRcdFx0XHRyZXR1cm4gdGhhdC5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHR0aGF0LmZyZWUgPSBmdW5jdGlvbiAoeikge1xuXHRcdHRoYXQucmVzZXQoeiwgbnVsbCk7XG5cdFx0dGhhdC53aW4gPSBudWxsO1xuXHRcdGh1ZnRzID0gbnVsbDtcblx0XHQvLyBaRlJFRSh6LCBzKTtcblx0fTtcblxuXHR0aGF0LnNldF9kaWN0aW9uYXJ5ID0gZnVuY3Rpb24gKGQsIHN0YXJ0LCBuKSB7XG5cdFx0dGhhdC53aW4uc2V0KGQuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbiksIDApO1xuXHRcdHRoYXQucmVhZCA9IHRoYXQud3JpdGUgPSBuO1xuXHR9O1xuXG5cdC8vIFJldHVybnMgdHJ1ZSBpZiBpbmZsYXRlIGlzIGN1cnJlbnRseSBhdCB0aGUgZW5kIG9mIGEgYmxvY2sgZ2VuZXJhdGVkXG5cdC8vIGJ5IFpfU1lOQ19GTFVTSCBvciBaX0ZVTExfRkxVU0guXG5cdHRoYXQuc3luY19wb2ludCA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gbW9kZSA9PSBMRU5TID8gMSA6IDA7XG5cdH07XG5cbn1cblxuLy8gSW5mbGF0ZVxuXG4vLyBwcmVzZXQgZGljdGlvbmFyeSBmbGFnIGluIHpsaWIgaGVhZGVyXG5jb25zdCBQUkVTRVRfRElDVCA9IDB4MjA7XG5cbmNvbnN0IFpfREVGTEFURUQgPSA4O1xuXG5jb25zdCBNRVRIT0QgPSAwOyAvLyB3YWl0aW5nIGZvciBtZXRob2QgYnl0ZVxuY29uc3QgRkxBRyA9IDE7IC8vIHdhaXRpbmcgZm9yIGZsYWcgYnl0ZVxuY29uc3QgRElDVDQgPSAyOyAvLyBmb3VyIGRpY3Rpb25hcnkgY2hlY2sgYnl0ZXMgdG8gZ29cbmNvbnN0IERJQ1QzID0gMzsgLy8gdGhyZWUgZGljdGlvbmFyeSBjaGVjayBieXRlcyB0byBnb1xuY29uc3QgRElDVDIgPSA0OyAvLyB0d28gZGljdGlvbmFyeSBjaGVjayBieXRlcyB0byBnb1xuY29uc3QgRElDVDEgPSA1OyAvLyBvbmUgZGljdGlvbmFyeSBjaGVjayBieXRlIHRvIGdvXG5jb25zdCBESUNUMCA9IDY7IC8vIHdhaXRpbmcgZm9yIGluZmxhdGVTZXREaWN0aW9uYXJ5XG5jb25zdCBCTE9DS1MgPSA3OyAvLyBkZWNvbXByZXNzaW5nIGJsb2Nrc1xuY29uc3QgRE9ORSA9IDEyOyAvLyBmaW5pc2hlZCBjaGVjaywgZG9uZVxuY29uc3QgQkFEID0gMTM7IC8vIGdvdCBhbiBlcnJvci0tc3RheSBoZXJlXG5cbmNvbnN0IG1hcmsgPSBbMCwgMCwgMHhmZiwgMHhmZl07XG5cbmZ1bmN0aW9uIEluZmxhdGUoKSB7XG5cdGNvbnN0IHRoYXQgPSB0aGlzO1xuXG5cdHRoYXQubW9kZSA9IDA7IC8vIGN1cnJlbnQgaW5mbGF0ZSBtb2RlXG5cblx0Ly8gbW9kZSBkZXBlbmRlbnQgaW5mb3JtYXRpb25cblx0dGhhdC5tZXRob2QgPSAwOyAvLyBpZiBGTEFHUywgbWV0aG9kIGJ5dGVcblxuXHQvLyBpZiBDSEVDSywgY2hlY2sgdmFsdWVzIHRvIGNvbXBhcmVcblx0dGhhdC53YXMgPSBbMF07IC8vIG5ldyBBcnJheSgxKTsgLy8gY29tcHV0ZWQgY2hlY2sgdmFsdWVcblx0dGhhdC5uZWVkID0gMDsgLy8gc3RyZWFtIGNoZWNrIHZhbHVlXG5cblx0Ly8gaWYgQkFELCBpbmZsYXRlU3luYydzIG1hcmtlciBieXRlcyBjb3VudFxuXHR0aGF0Lm1hcmtlciA9IDA7XG5cblx0Ly8gbW9kZSBpbmRlcGVuZGVudCBpbmZvcm1hdGlvblxuXHR0aGF0LndiaXRzID0gMDsgLy8gbG9nMih3aW4gc2l6ZSkgKDguLjE1LCBkZWZhdWx0cyB0byAxNSlcblxuXHQvLyB0aGlzLmJsb2NrczsgLy8gY3VycmVudCBpbmZsYXRlX2Jsb2NrcyBzdGF0ZVxuXG5cdGZ1bmN0aW9uIGluZmxhdGVSZXNldCh6KSB7XG5cdFx0aWYgKCF6IHx8ICF6LmlzdGF0ZSlcblx0XHRcdHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblxuXHRcdHoudG90YWxfaW4gPSB6LnRvdGFsX291dCA9IDA7XG5cdFx0ei5tc2cgPSBudWxsO1xuXHRcdHouaXN0YXRlLm1vZGUgPSBCTE9DS1M7XG5cdFx0ei5pc3RhdGUuYmxvY2tzLnJlc2V0KHosIG51bGwpO1xuXHRcdHJldHVybiBaX09LO1xuXHR9XG5cblx0dGhhdC5pbmZsYXRlRW5kID0gZnVuY3Rpb24gKHopIHtcblx0XHRpZiAodGhhdC5ibG9ja3MpXG5cdFx0XHR0aGF0LmJsb2Nrcy5mcmVlKHopO1xuXHRcdHRoYXQuYmxvY2tzID0gbnVsbDtcblx0XHQvLyBaRlJFRSh6LCB6LT5zdGF0ZSk7XG5cdFx0cmV0dXJuIFpfT0s7XG5cdH07XG5cblx0dGhhdC5pbmZsYXRlSW5pdCA9IGZ1bmN0aW9uICh6LCB3KSB7XG5cdFx0ei5tc2cgPSBudWxsO1xuXHRcdHRoYXQuYmxvY2tzID0gbnVsbDtcblxuXHRcdC8vIHNldCB3aW4gc2l6ZVxuXHRcdGlmICh3IDwgOCB8fCB3ID4gMTUpIHtcblx0XHRcdHRoYXQuaW5mbGF0ZUVuZCh6KTtcblx0XHRcdHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblx0XHR9XG5cdFx0dGhhdC53Yml0cyA9IHc7XG5cblx0XHR6LmlzdGF0ZS5ibG9ja3MgPSBuZXcgSW5mQmxvY2tzKHosIDEgPDwgdyk7XG5cblx0XHQvLyByZXNldCBzdGF0ZVxuXHRcdGluZmxhdGVSZXNldCh6KTtcblx0XHRyZXR1cm4gWl9PSztcblx0fTtcblxuXHR0aGF0LmluZmxhdGUgPSBmdW5jdGlvbiAoeiwgZikge1xuXHRcdGxldCByO1xuXHRcdGxldCBiO1xuXG5cdFx0aWYgKCF6IHx8ICF6LmlzdGF0ZSB8fCAhei5uZXh0X2luKVxuXHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHRcdGNvbnN0IGlzdGF0ZSA9IHouaXN0YXRlO1xuXHRcdGYgPSBmID09IFpfRklOSVNIID8gWl9CVUZfRVJST1IgOiBaX09LO1xuXHRcdHIgPSBaX0JVRl9FUlJPUjtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG5cdFx0d2hpbGUgKHRydWUpIHtcblx0XHRcdHN3aXRjaCAoaXN0YXRlLm1vZGUpIHtcblx0XHRcdFx0Y2FzZSBNRVRIT0Q6XG5cblx0XHRcdFx0XHRpZiAoei5hdmFpbF9pbiA9PT0gMClcblx0XHRcdFx0XHRcdHJldHVybiByO1xuXHRcdFx0XHRcdHIgPSBmO1xuXG5cdFx0XHRcdFx0ei5hdmFpbF9pbi0tO1xuXHRcdFx0XHRcdHoudG90YWxfaW4rKztcblx0XHRcdFx0XHRpZiAoKChpc3RhdGUubWV0aG9kID0gei5yZWFkX2J5dGUoei5uZXh0X2luX2luZGV4KyspKSAmIDB4ZikgIT0gWl9ERUZMQVRFRCkge1xuXHRcdFx0XHRcdFx0aXN0YXRlLm1vZGUgPSBCQUQ7XG5cdFx0XHRcdFx0XHR6Lm1zZyA9IFwidW5rbm93biBjb21wcmVzc2lvbiBtZXRob2RcIjtcblx0XHRcdFx0XHRcdGlzdGF0ZS5tYXJrZXIgPSA1OyAvLyBjYW4ndCB0cnkgaW5mbGF0ZVN5bmNcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoKGlzdGF0ZS5tZXRob2QgPj4gNCkgKyA4ID4gaXN0YXRlLndiaXRzKSB7XG5cdFx0XHRcdFx0XHRpc3RhdGUubW9kZSA9IEJBRDtcblx0XHRcdFx0XHRcdHoubXNnID0gXCJpbnZhbGlkIHdpbiBzaXplXCI7XG5cdFx0XHRcdFx0XHRpc3RhdGUubWFya2VyID0gNTsgLy8gY2FuJ3QgdHJ5IGluZmxhdGVTeW5jXG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aXN0YXRlLm1vZGUgPSBGTEFHO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgRkxBRzpcblxuXHRcdFx0XHRcdGlmICh6LmF2YWlsX2luID09PSAwKVxuXHRcdFx0XHRcdFx0cmV0dXJuIHI7XG5cdFx0XHRcdFx0ciA9IGY7XG5cblx0XHRcdFx0XHR6LmF2YWlsX2luLS07XG5cdFx0XHRcdFx0ei50b3RhbF9pbisrO1xuXHRcdFx0XHRcdGIgPSAoei5yZWFkX2J5dGUoei5uZXh0X2luX2luZGV4KyspKSAmIDB4ZmY7XG5cblx0XHRcdFx0XHRpZiAoKCgoaXN0YXRlLm1ldGhvZCA8PCA4KSArIGIpICUgMzEpICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRpc3RhdGUubW9kZSA9IEJBRDtcblx0XHRcdFx0XHRcdHoubXNnID0gXCJpbmNvcnJlY3QgaGVhZGVyIGNoZWNrXCI7XG5cdFx0XHRcdFx0XHRpc3RhdGUubWFya2VyID0gNTsgLy8gY2FuJ3QgdHJ5IGluZmxhdGVTeW5jXG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoKGIgJiBQUkVTRVRfRElDVCkgPT09IDApIHtcblx0XHRcdFx0XHRcdGlzdGF0ZS5tb2RlID0gQkxPQ0tTO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlzdGF0ZS5tb2RlID0gRElDVDQ7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSBESUNUNDpcblxuXHRcdFx0XHRcdGlmICh6LmF2YWlsX2luID09PSAwKVxuXHRcdFx0XHRcdFx0cmV0dXJuIHI7XG5cdFx0XHRcdFx0ciA9IGY7XG5cblx0XHRcdFx0XHR6LmF2YWlsX2luLS07XG5cdFx0XHRcdFx0ei50b3RhbF9pbisrO1xuXHRcdFx0XHRcdGlzdGF0ZS5uZWVkID0gKCh6LnJlYWRfYnl0ZSh6Lm5leHRfaW5faW5kZXgrKykgJiAweGZmKSA8PCAyNCkgJiAweGZmMDAwMDAwO1xuXHRcdFx0XHRcdGlzdGF0ZS5tb2RlID0gRElDVDM7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSBESUNUMzpcblxuXHRcdFx0XHRcdGlmICh6LmF2YWlsX2luID09PSAwKVxuXHRcdFx0XHRcdFx0cmV0dXJuIHI7XG5cdFx0XHRcdFx0ciA9IGY7XG5cblx0XHRcdFx0XHR6LmF2YWlsX2luLS07XG5cdFx0XHRcdFx0ei50b3RhbF9pbisrO1xuXHRcdFx0XHRcdGlzdGF0ZS5uZWVkICs9ICgoei5yZWFkX2J5dGUoei5uZXh0X2luX2luZGV4KyspICYgMHhmZikgPDwgMTYpICYgMHhmZjAwMDA7XG5cdFx0XHRcdFx0aXN0YXRlLm1vZGUgPSBESUNUMjtcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlIERJQ1QyOlxuXG5cdFx0XHRcdFx0aWYgKHouYXZhaWxfaW4gPT09IDApXG5cdFx0XHRcdFx0XHRyZXR1cm4gcjtcblx0XHRcdFx0XHRyID0gZjtcblxuXHRcdFx0XHRcdHouYXZhaWxfaW4tLTtcblx0XHRcdFx0XHR6LnRvdGFsX2luKys7XG5cdFx0XHRcdFx0aXN0YXRlLm5lZWQgKz0gKCh6LnJlYWRfYnl0ZSh6Lm5leHRfaW5faW5kZXgrKykgJiAweGZmKSA8PCA4KSAmIDB4ZmYwMDtcblx0XHRcdFx0XHRpc3RhdGUubW9kZSA9IERJQ1QxO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgRElDVDE6XG5cblx0XHRcdFx0XHRpZiAoei5hdmFpbF9pbiA9PT0gMClcblx0XHRcdFx0XHRcdHJldHVybiByO1xuXHRcdFx0XHRcdHIgPSBmO1xuXG5cdFx0XHRcdFx0ei5hdmFpbF9pbi0tO1xuXHRcdFx0XHRcdHoudG90YWxfaW4rKztcblx0XHRcdFx0XHRpc3RhdGUubmVlZCArPSAoei5yZWFkX2J5dGUoei5uZXh0X2luX2luZGV4KyspICYgMHhmZik7XG5cdFx0XHRcdFx0aXN0YXRlLm1vZGUgPSBESUNUMDtcblx0XHRcdFx0XHRyZXR1cm4gWl9ORUVEX0RJQ1Q7XG5cdFx0XHRcdGNhc2UgRElDVDA6XG5cdFx0XHRcdFx0aXN0YXRlLm1vZGUgPSBCQUQ7XG5cdFx0XHRcdFx0ei5tc2cgPSBcIm5lZWQgZGljdGlvbmFyeVwiO1xuXHRcdFx0XHRcdGlzdGF0ZS5tYXJrZXIgPSAwOyAvLyBjYW4gdHJ5IGluZmxhdGVTeW5jXG5cdFx0XHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHRcdFx0XHRjYXNlIEJMT0NLUzpcblxuXHRcdFx0XHRcdHIgPSBpc3RhdGUuYmxvY2tzLnByb2Moeiwgcik7XG5cdFx0XHRcdFx0aWYgKHIgPT0gWl9EQVRBX0VSUk9SKSB7XG5cdFx0XHRcdFx0XHRpc3RhdGUubW9kZSA9IEJBRDtcblx0XHRcdFx0XHRcdGlzdGF0ZS5tYXJrZXIgPSAwOyAvLyBjYW4gdHJ5IGluZmxhdGVTeW5jXG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHIgPT0gWl9PSykge1xuXHRcdFx0XHRcdFx0ciA9IGY7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChyICE9IFpfU1RSRUFNX0VORCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHIgPSBmO1xuXHRcdFx0XHRcdGlzdGF0ZS5ibG9ja3MucmVzZXQoeiwgaXN0YXRlLndhcyk7XG5cdFx0XHRcdFx0aXN0YXRlLm1vZGUgPSBET05FO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgRE9ORTpcblx0XHRcdFx0XHR6LmF2YWlsX2luID0gMDtcblx0XHRcdFx0XHRyZXR1cm4gWl9TVFJFQU1fRU5EO1xuXHRcdFx0XHRjYXNlIEJBRDpcblx0XHRcdFx0XHRyZXR1cm4gWl9EQVRBX0VSUk9SO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0dGhhdC5pbmZsYXRlU2V0RGljdGlvbmFyeSA9IGZ1bmN0aW9uICh6LCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoKSB7XG5cdFx0bGV0IGluZGV4ID0gMCwgbGVuZ3RoID0gZGljdExlbmd0aDtcblx0XHRpZiAoIXogfHwgIXouaXN0YXRlIHx8IHouaXN0YXRlLm1vZGUgIT0gRElDVDApXG5cdFx0XHRyZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdFx0Y29uc3QgaXN0YXRlID0gei5pc3RhdGU7XG5cdFx0aWYgKGxlbmd0aCA+PSAoMSA8PCBpc3RhdGUud2JpdHMpKSB7XG5cdFx0XHRsZW5ndGggPSAoMSA8PCBpc3RhdGUud2JpdHMpIC0gMTtcblx0XHRcdGluZGV4ID0gZGljdExlbmd0aCAtIGxlbmd0aDtcblx0XHR9XG5cdFx0aXN0YXRlLmJsb2Nrcy5zZXRfZGljdGlvbmFyeShkaWN0aW9uYXJ5LCBpbmRleCwgbGVuZ3RoKTtcblx0XHRpc3RhdGUubW9kZSA9IEJMT0NLUztcblx0XHRyZXR1cm4gWl9PSztcblx0fTtcblxuXHR0aGF0LmluZmxhdGVTeW5jID0gZnVuY3Rpb24gKHopIHtcblx0XHRsZXQgbjsgLy8gbnVtYmVyIG9mIGJ5dGVzIHRvIGxvb2sgYXRcblx0XHRsZXQgcDsgLy8gcG9pbnRlciB0byBieXRlc1xuXHRcdGxldCBtOyAvLyBudW1iZXIgb2YgbWFya2VyIGJ5dGVzIGZvdW5kIGluIGEgcm93XG5cdFx0bGV0IHIsIHc7IC8vIHRlbXBvcmFyaWVzIHRvIHNhdmUgdG90YWxfaW4gYW5kIHRvdGFsX291dFxuXG5cdFx0Ly8gc2V0IHVwXG5cdFx0aWYgKCF6IHx8ICF6LmlzdGF0ZSlcblx0XHRcdHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblx0XHRjb25zdCBpc3RhdGUgPSB6LmlzdGF0ZTtcblx0XHRpZiAoaXN0YXRlLm1vZGUgIT0gQkFEKSB7XG5cdFx0XHRpc3RhdGUubW9kZSA9IEJBRDtcblx0XHRcdGlzdGF0ZS5tYXJrZXIgPSAwO1xuXHRcdH1cblx0XHRpZiAoKG4gPSB6LmF2YWlsX2luKSA9PT0gMClcblx0XHRcdHJldHVybiBaX0JVRl9FUlJPUjtcblx0XHRwID0gei5uZXh0X2luX2luZGV4O1xuXHRcdG0gPSBpc3RhdGUubWFya2VyO1xuXG5cdFx0Ly8gc2VhcmNoXG5cdFx0d2hpbGUgKG4gIT09IDAgJiYgbSA8IDQpIHtcblx0XHRcdGlmICh6LnJlYWRfYnl0ZShwKSA9PSBtYXJrW21dKSB7XG5cdFx0XHRcdG0rKztcblx0XHRcdH0gZWxzZSBpZiAoei5yZWFkX2J5dGUocCkgIT09IDApIHtcblx0XHRcdFx0bSA9IDA7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtID0gNCAtIG07XG5cdFx0XHR9XG5cdFx0XHRwKys7XG5cdFx0XHRuLS07XG5cdFx0fVxuXG5cdFx0Ly8gcmVzdG9yZVxuXHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdGlzdGF0ZS5tYXJrZXIgPSBtO1xuXG5cdFx0Ly8gcmV0dXJuIG5vIGpveSBvciBzZXQgdXAgdG8gcmVzdGFydCBvbiBhIG5ldyBibG9ja1xuXHRcdGlmIChtICE9IDQpIHtcblx0XHRcdHJldHVybiBaX0RBVEFfRVJST1I7XG5cdFx0fVxuXHRcdHIgPSB6LnRvdGFsX2luO1xuXHRcdHcgPSB6LnRvdGFsX291dDtcblx0XHRpbmZsYXRlUmVzZXQoeik7XG5cdFx0ei50b3RhbF9pbiA9IHI7XG5cdFx0ei50b3RhbF9vdXQgPSB3O1xuXHRcdGlzdGF0ZS5tb2RlID0gQkxPQ0tTO1xuXHRcdHJldHVybiBaX09LO1xuXHR9O1xuXG5cdC8vIFJldHVybnMgdHJ1ZSBpZiBpbmZsYXRlIGlzIGN1cnJlbnRseSBhdCB0aGUgZW5kIG9mIGEgYmxvY2sgZ2VuZXJhdGVkXG5cdC8vIGJ5IFpfU1lOQ19GTFVTSCBvciBaX0ZVTExfRkxVU0guIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBieSBvbmUgUFBQXG5cdC8vIGltcGxlbWVudGF0aW9uIHRvIHByb3ZpZGUgYW4gYWRkaXRpb25hbCBzYWZldHkgY2hlY2suIFBQUCB1c2VzXG5cdC8vIFpfU1lOQ19GTFVTSFxuXHQvLyBidXQgcmVtb3ZlcyB0aGUgbGVuZ3RoIGJ5dGVzIG9mIHRoZSByZXN1bHRpbmcgZW1wdHkgc3RvcmVkIGJsb2NrLiBXaGVuXG5cdC8vIGRlY29tcHJlc3NpbmcsIFBQUCBjaGVja3MgdGhhdCBhdCB0aGUgZW5kIG9mIGlucHV0IHBhY2tldCwgaW5mbGF0ZSBpc1xuXHQvLyB3YWl0aW5nIGZvciB0aGVzZSBsZW5ndGggYnl0ZXMuXG5cdHRoYXQuaW5mbGF0ZVN5bmNQb2ludCA9IGZ1bmN0aW9uICh6KSB7XG5cdFx0aWYgKCF6IHx8ICF6LmlzdGF0ZSB8fCAhei5pc3RhdGUuYmxvY2tzKVxuXHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHRcdHJldHVybiB6LmlzdGF0ZS5ibG9ja3Muc3luY19wb2ludCgpO1xuXHR9O1xufVxuXG4vLyBaU3RyZWFtXG5cbmZ1bmN0aW9uIFpTdHJlYW0oKSB7XG59XG5cblpTdHJlYW0ucHJvdG90eXBlID0ge1xuXHRpbmZsYXRlSW5pdChiaXRzKSB7XG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdFx0dGhhdC5pc3RhdGUgPSBuZXcgSW5mbGF0ZSgpO1xuXHRcdGlmICghYml0cylcblx0XHRcdGJpdHMgPSBNQVhfQklUUztcblx0XHRyZXR1cm4gdGhhdC5pc3RhdGUuaW5mbGF0ZUluaXQodGhhdCwgYml0cyk7XG5cdH0sXG5cblx0aW5mbGF0ZShmKSB7XG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdFx0aWYgKCF0aGF0LmlzdGF0ZSlcblx0XHRcdHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblx0XHRyZXR1cm4gdGhhdC5pc3RhdGUuaW5mbGF0ZSh0aGF0LCBmKTtcblx0fSxcblxuXHRpbmZsYXRlRW5kKCkge1xuXHRcdGNvbnN0IHRoYXQgPSB0aGlzO1xuXHRcdGlmICghdGhhdC5pc3RhdGUpXG5cdFx0XHRyZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdFx0Y29uc3QgcmV0ID0gdGhhdC5pc3RhdGUuaW5mbGF0ZUVuZCh0aGF0KTtcblx0XHR0aGF0LmlzdGF0ZSA9IG51bGw7XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbmZsYXRlU3luYygpIHtcblx0XHRjb25zdCB0aGF0ID0gdGhpcztcblx0XHRpZiAoIXRoYXQuaXN0YXRlKVxuXHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHRcdHJldHVybiB0aGF0LmlzdGF0ZS5pbmZsYXRlU3luYyh0aGF0KTtcblx0fSxcblx0aW5mbGF0ZVNldERpY3Rpb25hcnkoZGljdGlvbmFyeSwgZGljdExlbmd0aCkge1xuXHRcdGNvbnN0IHRoYXQgPSB0aGlzO1xuXHRcdGlmICghdGhhdC5pc3RhdGUpXG5cdFx0XHRyZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdFx0cmV0dXJuIHRoYXQuaXN0YXRlLmluZmxhdGVTZXREaWN0aW9uYXJ5KHRoYXQsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgpO1xuXHR9LFxuXHRyZWFkX2J5dGUoc3RhcnQpIHtcblx0XHRjb25zdCB0aGF0ID0gdGhpcztcblx0XHRyZXR1cm4gdGhhdC5uZXh0X2luW3N0YXJ0XTtcblx0fSxcblx0cmVhZF9idWYoc3RhcnQsIHNpemUpIHtcblx0XHRjb25zdCB0aGF0ID0gdGhpcztcblx0XHRyZXR1cm4gdGhhdC5uZXh0X2luLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIHNpemUpO1xuXHR9XG59O1xuXG4vLyBJbmZsYXRlclxuXG5mdW5jdGlvbiBaaXBJbmZsYXRlKG9wdGlvbnMpIHtcblx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdGNvbnN0IHogPSBuZXcgWlN0cmVhbSgpO1xuXHRjb25zdCBidWZzaXplID0gb3B0aW9ucyAmJiBvcHRpb25zLmNodW5rU2l6ZSA/IE1hdGguZmxvb3Iob3B0aW9ucy5jaHVua1NpemUgKiAyKSA6IDEyOCAqIDEwMjQ7XG5cdGNvbnN0IGZsdXNoID0gWl9OT19GTFVTSDtcblx0Y29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYnVmc2l6ZSk7XG5cdGxldCBub21vcmVpbnB1dCA9IGZhbHNlO1xuXG5cdHouaW5mbGF0ZUluaXQoKTtcblx0ei5uZXh0X291dCA9IGJ1ZjtcblxuXHR0aGF0LmFwcGVuZCA9IGZ1bmN0aW9uIChkYXRhLCBvbnByb2dyZXNzKSB7XG5cdFx0Y29uc3QgYnVmZmVycyA9IFtdO1xuXHRcdGxldCBlcnIsIGFycmF5LCBsYXN0SW5kZXggPSAwLCBidWZmZXJJbmRleCA9IDAsIGJ1ZmZlclNpemUgPSAwO1xuXHRcdGlmIChkYXRhLmxlbmd0aCA9PT0gMClcblx0XHRcdHJldHVybjtcblx0XHR6Lm5leHRfaW5faW5kZXggPSAwO1xuXHRcdHoubmV4dF9pbiA9IGRhdGE7XG5cdFx0ei5hdmFpbF9pbiA9IGRhdGEubGVuZ3RoO1xuXHRcdGRvIHtcblx0XHRcdHoubmV4dF9vdXRfaW5kZXggPSAwO1xuXHRcdFx0ei5hdmFpbF9vdXQgPSBidWZzaXplO1xuXHRcdFx0aWYgKCh6LmF2YWlsX2luID09PSAwKSAmJiAoIW5vbW9yZWlucHV0KSkgeyAvLyBpZiBidWZmZXIgaXMgZW1wdHkgYW5kIG1vcmUgaW5wdXQgaXMgYXZhaWxhYmxlLCByZWZpbGwgaXRcblx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gMDtcblx0XHRcdFx0bm9tb3JlaW5wdXQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0ZXJyID0gei5pbmZsYXRlKGZsdXNoKTtcblx0XHRcdGlmIChub21vcmVpbnB1dCAmJiAoZXJyID09PSBaX0JVRl9FUlJPUikpIHtcblx0XHRcdFx0aWYgKHouYXZhaWxfaW4gIT09IDApXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW5mbGF0aW5nOiBiYWQgaW5wdXRcIik7XG5cdFx0XHR9IGVsc2UgaWYgKGVyciAhPT0gWl9PSyAmJiBlcnIgIT09IFpfU1RSRUFNX0VORClcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW5mbGF0aW5nOiBcIiArIHoubXNnKTtcblx0XHRcdGlmICgobm9tb3JlaW5wdXQgfHwgZXJyID09PSBaX1NUUkVBTV9FTkQpICYmICh6LmF2YWlsX2luID09PSBkYXRhLmxlbmd0aCkpXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcImluZmxhdGluZzogYmFkIGlucHV0XCIpO1xuXHRcdFx0aWYgKHoubmV4dF9vdXRfaW5kZXgpXG5cdFx0XHRcdGlmICh6Lm5leHRfb3V0X2luZGV4ID09PSBidWZzaXplKVxuXHRcdFx0XHRcdGJ1ZmZlcnMucHVzaChuZXcgVWludDhBcnJheShidWYpKTtcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdGJ1ZmZlcnMucHVzaChidWYuc3ViYXJyYXkoMCwgei5uZXh0X291dF9pbmRleCkpO1xuXHRcdFx0YnVmZmVyU2l6ZSArPSB6Lm5leHRfb3V0X2luZGV4O1xuXHRcdFx0aWYgKG9ucHJvZ3Jlc3MgJiYgei5uZXh0X2luX2luZGV4ID4gMCAmJiB6Lm5leHRfaW5faW5kZXggIT0gbGFzdEluZGV4KSB7XG5cdFx0XHRcdG9ucHJvZ3Jlc3Moei5uZXh0X2luX2luZGV4KTtcblx0XHRcdFx0bGFzdEluZGV4ID0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0fVxuXHRcdH0gd2hpbGUgKHouYXZhaWxfaW4gPiAwIHx8IHouYXZhaWxfb3V0ID09PSAwKTtcblx0XHRpZiAoYnVmZmVycy5sZW5ndGggPiAxKSB7XG5cdFx0XHRhcnJheSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlclNpemUpO1xuXHRcdFx0YnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVuaykge1xuXHRcdFx0XHRhcnJheS5zZXQoY2h1bmssIGJ1ZmZlckluZGV4KTtcblx0XHRcdFx0YnVmZmVySW5kZXggKz0gY2h1bmsubGVuZ3RoO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFycmF5ID0gYnVmZmVyc1swXSA/IG5ldyBVaW50OEFycmF5KGJ1ZmZlcnNbMF0pIDogbmV3IFVpbnQ4QXJyYXkoKTtcblx0XHR9XG5cdFx0cmV0dXJuIGFycmF5O1xuXHR9O1xuXHR0aGF0LmZsdXNoID0gZnVuY3Rpb24gKCkge1xuXHRcdHouaW5mbGF0ZUVuZCgpO1xuXHR9O1xufVxuXG5leHBvcnQge1xuXHRaaXBJbmZsYXRlIGFzIEluZmxhdGVcbn07IiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG5jb25zdCBNQVhfMzJfQklUUyA9IDB4ZmZmZmZmZmY7XG5jb25zdCBNQVhfMTZfQklUUyA9IDB4ZmZmZjtcbmNvbnN0IENPTVBSRVNTSU9OX01FVEhPRF9ERUZMQVRFID0gMHgwODtcbmNvbnN0IENPTVBSRVNTSU9OX01FVEhPRF9TVE9SRSA9IDB4MDA7XG5jb25zdCBDT01QUkVTU0lPTl9NRVRIT0RfQUVTID0gMHg2MztcblxuY29uc3QgTE9DQUxfRklMRV9IRUFERVJfU0lHTkFUVVJFID0gMHgwNDAzNGI1MDtcbmNvbnN0IFNQTElUX1pJUF9GSUxFX1NJR05BVFVSRSA9IDB4MDgwNzRiNTA7XG5jb25zdCBEQVRBX0RFU0NSSVBUT1JfUkVDT1JEX1NJR05BVFVSRSA9IFNQTElUX1pJUF9GSUxFX1NJR05BVFVSRTtcbmNvbnN0IENFTlRSQUxfRklMRV9IRUFERVJfU0lHTkFUVVJFID0gMHgwMjAxNGI1MDtcbmNvbnN0IEVORF9PRl9DRU5UUkFMX0RJUl9TSUdOQVRVUkUgPSAweDA2MDU0YjUwO1xuY29uc3QgWklQNjRfRU5EX09GX0NFTlRSQUxfRElSX1NJR05BVFVSRSA9IDB4MDYwNjRiNTA7XG5jb25zdCBaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTE9DQVRPUl9TSUdOQVRVUkUgPSAweDA3MDY0YjUwO1xuY29uc3QgRU5EX09GX0NFTlRSQUxfRElSX0xFTkdUSCA9IDIyO1xuY29uc3QgWklQNjRfRU5EX09GX0NFTlRSQUxfRElSX0xPQ0FUT1JfTEVOR1RIID0gMjA7XG5jb25zdCBaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RIID0gNTY7XG5jb25zdCBaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfVE9UQUxfTEVOR1RIID0gRU5EX09GX0NFTlRSQUxfRElSX0xFTkdUSCArIFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9MT0NBVE9SX0xFTkdUSCArIFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9MRU5HVEg7XG5cbmNvbnN0IEVYVFJBRklFTERfVFlQRV9aSVA2NCA9IDB4MDAwMTtcbmNvbnN0IEVYVFJBRklFTERfVFlQRV9BRVMgPSAweDk5MDE7XG5jb25zdCBFWFRSQUZJRUxEX1RZUEVfTlRGUyA9IDB4MDAwYTtcbmNvbnN0IEVYVFJBRklFTERfVFlQRV9OVEZTX1RBRzEgPSAweDAwMDE7XG5jb25zdCBFWFRSQUZJRUxEX1RZUEVfRVhURU5ERURfVElNRVNUQU1QID0gMHg1NDU1O1xuY29uc3QgRVhUUkFGSUVMRF9UWVBFX1VOSUNPREVfUEFUSCA9IDB4NzA3NTtcbmNvbnN0IEVYVFJBRklFTERfVFlQRV9VTklDT0RFX0NPTU1FTlQgPSAweDYzNzU7XG5jb25zdCBFWFRSQUZJRUxEX1RZUEVfVVNEWiA9IDB4MTk4NjtcblxuY29uc3QgQklURkxBR19FTkNSWVBURUQgPSAweDAxO1xuY29uc3QgQklURkxBR19MRVZFTCA9IDB4MDY7XG5jb25zdCBCSVRGTEFHX0RBVEFfREVTQ1JJUFRPUiA9IDB4MDAwODtcbmNvbnN0IEJJVEZMQUdfTEFOR19FTkNPRElOR19GTEFHID0gMHgwODAwO1xuY29uc3QgRklMRV9BVFRSX01TRE9TX0RJUl9NQVNLID0gMHgxMDtcblxuY29uc3QgVkVSU0lPTl9ERUZMQVRFID0gMHgxNDtcbmNvbnN0IFZFUlNJT05fWklQNjQgPSAweDJEO1xuY29uc3QgVkVSU0lPTl9BRVMgPSAweDMzO1xuXG5jb25zdCBESVJFQ1RPUllfU0lHTkFUVVJFID0gXCIvXCI7XG5cbmNvbnN0IE1BWF9EQVRFID0gbmV3IERhdGUoMjEwNywgMTEsIDMxKTtcbmNvbnN0IE1JTl9EQVRFID0gbmV3IERhdGUoMTk4MCwgMCwgMSk7XG5cbmNvbnN0IFVOREVGSU5FRF9WQUxVRSA9IHVuZGVmaW5lZDtcbmNvbnN0IFVOREVGSU5FRF9UWVBFID0gXCJ1bmRlZmluZWRcIjtcbmNvbnN0IEZVTkNUSU9OX1RZUEUgPSBcImZ1bmN0aW9uXCI7XG5cbmV4cG9ydCB7XG5cdE1BWF8zMl9CSVRTLFxuXHRNQVhfMTZfQklUUyxcblx0Q09NUFJFU1NJT05fTUVUSE9EX0RFRkxBVEUsXG5cdENPTVBSRVNTSU9OX01FVEhPRF9TVE9SRSxcblx0Q09NUFJFU1NJT05fTUVUSE9EX0FFUyxcblx0U1BMSVRfWklQX0ZJTEVfU0lHTkFUVVJFLFxuXHRMT0NBTF9GSUxFX0hFQURFUl9TSUdOQVRVUkUsXG5cdERBVEFfREVTQ1JJUFRPUl9SRUNPUkRfU0lHTkFUVVJFLFxuXHRDRU5UUkFMX0ZJTEVfSEVBREVSX1NJR05BVFVSRSxcblx0RU5EX09GX0NFTlRSQUxfRElSX1NJR05BVFVSRSxcblx0WklQNjRfRU5EX09GX0NFTlRSQUxfRElSX0xPQ0FUT1JfU0lHTkFUVVJFLFxuXHRaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfU0lHTkFUVVJFLFxuXHRFWFRSQUZJRUxEX1RZUEVfWklQNjQsXG5cdEVYVFJBRklFTERfVFlQRV9BRVMsXG5cdEVYVFJBRklFTERfVFlQRV9OVEZTLFxuXHRFWFRSQUZJRUxEX1RZUEVfTlRGU19UQUcxLFxuXHRFWFRSQUZJRUxEX1RZUEVfRVhURU5ERURfVElNRVNUQU1QLFxuXHRFWFRSQUZJRUxEX1RZUEVfVU5JQ09ERV9QQVRILFxuXHRFWFRSQUZJRUxEX1RZUEVfVU5JQ09ERV9DT01NRU5ULFxuXHRFWFRSQUZJRUxEX1RZUEVfVVNEWixcblx0RU5EX09GX0NFTlRSQUxfRElSX0xFTkdUSCxcblx0WklQNjRfRU5EX09GX0NFTlRSQUxfRElSX0xPQ0FUT1JfTEVOR1RILFxuXHRaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RILFxuXHRaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfVE9UQUxfTEVOR1RILFxuXHRCSVRGTEFHX0VOQ1JZUFRFRCxcblx0QklURkxBR19MRVZFTCxcblx0QklURkxBR19EQVRBX0RFU0NSSVBUT1IsXG5cdEJJVEZMQUdfTEFOR19FTkNPRElOR19GTEFHLFxuXHRGSUxFX0FUVFJfTVNET1NfRElSX01BU0ssXG5cdFZFUlNJT05fREVGTEFURSxcblx0VkVSU0lPTl9aSVA2NCxcblx0VkVSU0lPTl9BRVMsXG5cdERJUkVDVE9SWV9TSUdOQVRVUkUsXG5cdE1JTl9EQVRFLFxuXHRNQVhfREFURSxcblx0VU5ERUZJTkVEX1ZBTFVFLFxuXHRVTkRFRklORURfVFlQRSxcblx0RlVOQ1RJT05fVFlQRVxufTsiLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbi8qIGdsb2JhbCBUcmFuc2Zvcm1TdHJlYW0gKi9cblxuZXhwb3J0IHtcblx0U3RyZWFtQWRhcHRlclxufTtcblxuY2xhc3MgU3RyZWFtQWRhcHRlciB7XG5cblx0Y29uc3RydWN0b3IoQ29kZWMpIHtcblx0XHRyZXR1cm4gY2xhc3MgZXh0ZW5kcyBUcmFuc2Zvcm1TdHJlYW0ge1xuXHRcdFx0Y29uc3RydWN0b3IoX2Zvcm1hdCwgb3B0aW9ucykge1xuXHRcdFx0XHRjb25zdCBjb2RlYyA9IG5ldyBDb2RlYyhvcHRpb25zKTtcblx0XHRcdFx0c3VwZXIoe1xuXHRcdFx0XHRcdHRyYW5zZm9ybShjaHVuaywgY29udHJvbGxlcikge1xuXHRcdFx0XHRcdFx0Y29udHJvbGxlci5lbnF1ZXVlKGNvZGVjLmFwcGVuZChjaHVuaykpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Zmx1c2goY29udHJvbGxlcikge1xuXHRcdFx0XHRcdFx0Y29uc3QgY2h1bmsgPSBjb2RlYy5mbHVzaCgpO1xuXHRcdFx0XHRcdFx0aWYgKGNodW5rKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRyb2xsZXIuZW5xdWV1ZShjaHVuayk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG59IiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4vKiBnbG9iYWwgbmF2aWdhdG9yLCBDb21wcmVzc2lvblN0cmVhbSwgRGVjb21wcmVzc2lvblN0cmVhbSAqL1xuXG5pbXBvcnQge1xuXHRVTkRFRklORURfVkFMVUUsXG5cdFVOREVGSU5FRF9UWVBFXG59IGZyb20gXCIuL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgU3RyZWFtQWRhcHRlciB9IGZyb20gXCIuL3N0cmVhbXMvc3RyZWFtLWFkYXB0ZXIuanNcIjtcblxuY29uc3QgTUlOSU1VTV9DSFVOS19TSVpFID0gNjQ7XG5sZXQgbWF4V29ya2VycyA9IDI7XG50cnkge1xuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPSBVTkRFRklORURfVFlQRSAmJiBuYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeSkge1xuXHRcdG1heFdvcmtlcnMgPSBuYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeTtcblx0fVxufSBjYXRjaCAoX2Vycm9yKSB7XG5cdC8vIGlnbm9yZWRcbn1cbmNvbnN0IERFRkFVTFRfQ09ORklHVVJBVElPTiA9IHtcblx0Y2h1bmtTaXplOiA1MTIgKiAxMDI0LFxuXHRtYXhXb3JrZXJzLFxuXHR0ZXJtaW5hdGVXb3JrZXJUaW1lb3V0OiA1MDAwLFxuXHR1c2VXZWJXb3JrZXJzOiB0cnVlLFxuXHR1c2VDb21wcmVzc2lvblN0cmVhbTogdHJ1ZSxcblx0d29ya2VyU2NyaXB0czogVU5ERUZJTkVEX1ZBTFVFLFxuXHRDb21wcmVzc2lvblN0cmVhbU5hdGl2ZTogdHlwZW9mIENvbXByZXNzaW9uU3RyZWFtICE9IFVOREVGSU5FRF9UWVBFICYmIENvbXByZXNzaW9uU3RyZWFtLFxuXHREZWNvbXByZXNzaW9uU3RyZWFtTmF0aXZlOiB0eXBlb2YgRGVjb21wcmVzc2lvblN0cmVhbSAhPSBVTkRFRklORURfVFlQRSAmJiBEZWNvbXByZXNzaW9uU3RyZWFtXG59O1xuXG5jb25zdCBjb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0NPTkZJR1VSQVRJT04pO1xuXG5leHBvcnQge1xuXHRjb25maWd1cmUsXG5cdGdldENvbmZpZ3VyYXRpb24sXG5cdGdldENodW5rU2l6ZVxufTtcblxuZnVuY3Rpb24gZ2V0Q29uZmlndXJhdGlvbigpIHtcblx0cmV0dXJuIGNvbmZpZztcbn1cblxuZnVuY3Rpb24gZ2V0Q2h1bmtTaXplKGNvbmZpZykge1xuXHRyZXR1cm4gTWF0aC5tYXgoY29uZmlnLmNodW5rU2l6ZSwgTUlOSU1VTV9DSFVOS19TSVpFKTtcbn1cblxuZnVuY3Rpb24gY29uZmlndXJlKGNvbmZpZ3VyYXRpb24pIHtcblx0Y29uc3Qge1xuXHRcdGJhc2VVUkwsXG5cdFx0Y2h1bmtTaXplLFxuXHRcdG1heFdvcmtlcnMsXG5cdFx0dGVybWluYXRlV29ya2VyVGltZW91dCxcblx0XHR1c2VDb21wcmVzc2lvblN0cmVhbSxcblx0XHR1c2VXZWJXb3JrZXJzLFxuXHRcdERlZmxhdGUsXG5cdFx0SW5mbGF0ZSxcblx0XHRDb21wcmVzc2lvblN0cmVhbSxcblx0XHREZWNvbXByZXNzaW9uU3RyZWFtLFxuXHRcdHdvcmtlclNjcmlwdHNcblx0fSA9IGNvbmZpZ3VyYXRpb247XG5cdHNldElmRGVmaW5lZChcImJhc2VVUkxcIiwgYmFzZVVSTCk7XG5cdHNldElmRGVmaW5lZChcImNodW5rU2l6ZVwiLCBjaHVua1NpemUpO1xuXHRzZXRJZkRlZmluZWQoXCJtYXhXb3JrZXJzXCIsIG1heFdvcmtlcnMpO1xuXHRzZXRJZkRlZmluZWQoXCJ0ZXJtaW5hdGVXb3JrZXJUaW1lb3V0XCIsIHRlcm1pbmF0ZVdvcmtlclRpbWVvdXQpO1xuXHRzZXRJZkRlZmluZWQoXCJ1c2VDb21wcmVzc2lvblN0cmVhbVwiLCB1c2VDb21wcmVzc2lvblN0cmVhbSk7XG5cdHNldElmRGVmaW5lZChcInVzZVdlYldvcmtlcnNcIiwgdXNlV2ViV29ya2Vycyk7XG5cdGlmIChEZWZsYXRlKSB7XG5cdFx0Y29uZmlnLkNvbXByZXNzaW9uU3RyZWFtID0gbmV3IFN0cmVhbUFkYXB0ZXIoRGVmbGF0ZSk7XG5cdH1cblx0aWYgKEluZmxhdGUpIHtcblx0XHRjb25maWcuRGVjb21wcmVzc2lvblN0cmVhbSA9IG5ldyBTdHJlYW1BZGFwdGVyKEluZmxhdGUpO1xuXHR9XG5cdHNldElmRGVmaW5lZChcIkNvbXByZXNzaW9uU3RyZWFtXCIsIENvbXByZXNzaW9uU3RyZWFtKTtcblx0c2V0SWZEZWZpbmVkKFwiRGVjb21wcmVzc2lvblN0cmVhbVwiLCBEZWNvbXByZXNzaW9uU3RyZWFtKTtcblx0aWYgKHdvcmtlclNjcmlwdHMgIT09IFVOREVGSU5FRF9WQUxVRSkge1xuXHRcdGNvbnN0IHsgZGVmbGF0ZSwgaW5mbGF0ZSB9ID0gd29ya2VyU2NyaXB0cztcblx0XHRpZiAoZGVmbGF0ZSB8fCBpbmZsYXRlKSB7XG5cdFx0XHRpZiAoIWNvbmZpZy53b3JrZXJTY3JpcHRzKSB7XG5cdFx0XHRcdGNvbmZpZy53b3JrZXJTY3JpcHRzID0ge307XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChkZWZsYXRlKSB7XG5cdFx0XHRpZiAoIUFycmF5LmlzQXJyYXkoZGVmbGF0ZSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwid29ya2VyU2NyaXB0cy5kZWZsYXRlIG11c3QgYmUgYW4gYXJyYXlcIik7XG5cdFx0XHR9XG5cdFx0XHRjb25maWcud29ya2VyU2NyaXB0cy5kZWZsYXRlID0gZGVmbGF0ZTtcblx0XHR9XG5cdFx0aWYgKGluZmxhdGUpIHtcblx0XHRcdGlmICghQXJyYXkuaXNBcnJheShpbmZsYXRlKSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJ3b3JrZXJTY3JpcHRzLmluZmxhdGUgbXVzdCBiZSBhbiBhcnJheVwiKTtcblx0XHRcdH1cblx0XHRcdGNvbmZpZy53b3JrZXJTY3JpcHRzLmluZmxhdGUgPSBpbmZsYXRlO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBzZXRJZkRlZmluZWQocHJvcGVydHlOYW1lLCBwcm9wZXJ0eVZhbHVlKSB7XG5cdGlmIChwcm9wZXJ0eVZhbHVlICE9PSBVTkRFRklORURfVkFMVUUpIHtcblx0XHRjb25maWdbcHJvcGVydHlOYW1lXSA9IHByb3BlcnR5VmFsdWU7XG5cdH1cbn1cbiIsIi8qXG4gQ29weXJpZ2h0IChjKSAyMDIyIEdpbGRhcyBMb3JtZWF1LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiBcbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuIDMuIFRoZSBuYW1lcyBvZiB0aGUgYXV0aG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEICcnQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXG4gSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKQ1JBRlQsXG4gSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsXG4gT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLy8gZGVuby1saW50LWlnbm9yZS1maWxlIG5vLXByb3RvdHlwZS1idWlsdGluc1xuXG5pbXBvcnQgeyBnZXRNaW1lVHlwZSBhcyBnZXREZWZhdWx0TWltZVR5cGUgfSBmcm9tIFwiLi9kZWZhdWx0LW1pbWUtdHlwZS5qc1wiO1xuXG5jb25zdCB0YWJsZSA9IHtcblx0XCJhcHBsaWNhdGlvblwiOiB7XG5cdFx0XCJhbmRyZXctaW5zZXRcIjogXCJlelwiLFxuXHRcdFwiYW5ub2RleFwiOiBcImFueFwiLFxuXHRcdFwiYXRvbSt4bWxcIjogXCJhdG9tXCIsXG5cdFx0XCJhdG9tY2F0K3htbFwiOiBcImF0b21jYXRcIixcblx0XHRcImF0b21zZXJ2K3htbFwiOiBcImF0b21zcnZcIixcblx0XHRcImJib2xpblwiOiBcImxpblwiLFxuXHRcdFwiY3Utc2VlbWVcIjogXCJjdVwiLFxuXHRcdFwiZGF2bW91bnQreG1sXCI6IFwiZGF2bW91bnRcIixcblx0XHRcImRzcHR5cGVcIjogXCJ0c3BcIixcblx0XHRcImVjbWFzY3JpcHRcIjogW1xuXHRcdFx0XCJlc1wiLFxuXHRcdFx0XCJlY21hXCJcblx0XHRdLFxuXHRcdFwiZnV0dXJlc3BsYXNoXCI6IFwic3BsXCIsXG5cdFx0XCJodGFcIjogXCJodGFcIixcblx0XHRcImphdmEtYXJjaGl2ZVwiOiBcImphclwiLFxuXHRcdFwiamF2YS1zZXJpYWxpemVkLW9iamVjdFwiOiBcInNlclwiLFxuXHRcdFwiamF2YS12bVwiOiBcImNsYXNzXCIsXG5cdFx0XCJtM2dcIjogXCJtM2dcIixcblx0XHRcIm1hYy1iaW5oZXg0MFwiOiBcImhxeFwiLFxuXHRcdFwibWF0aGVtYXRpY2FcIjogW1xuXHRcdFx0XCJuYlwiLFxuXHRcdFx0XCJtYVwiLFxuXHRcdFx0XCJtYlwiXG5cdFx0XSxcblx0XHRcIm1zYWNjZXNzXCI6IFwibWRiXCIsXG5cdFx0XCJtc3dvcmRcIjogW1xuXHRcdFx0XCJkb2NcIixcblx0XHRcdFwiZG90XCIsXG5cdFx0XHRcIndpelwiXG5cdFx0XSxcblx0XHRcIm14ZlwiOiBcIm14ZlwiLFxuXHRcdFwib2RhXCI6IFwib2RhXCIsXG5cdFx0XCJvZ2dcIjogXCJvZ3hcIixcblx0XHRcInBkZlwiOiBcInBkZlwiLFxuXHRcdFwicGdwLWtleXNcIjogXCJrZXlcIixcblx0XHRcInBncC1zaWduYXR1cmVcIjogW1xuXHRcdFx0XCJhc2NcIixcblx0XHRcdFwic2lnXCJcblx0XHRdLFxuXHRcdFwicGljcy1ydWxlc1wiOiBcInByZlwiLFxuXHRcdFwicG9zdHNjcmlwdFwiOiBbXG5cdFx0XHRcInBzXCIsXG5cdFx0XHRcImFpXCIsXG5cdFx0XHRcImVwc1wiLFxuXHRcdFx0XCJlcHNpXCIsXG5cdFx0XHRcImVwc2ZcIixcblx0XHRcdFwiZXBzMlwiLFxuXHRcdFx0XCJlcHMzXCJcblx0XHRdLFxuXHRcdFwicmFyXCI6IFwicmFyXCIsXG5cdFx0XCJyZGYreG1sXCI6IFwicmRmXCIsXG5cdFx0XCJyc3MreG1sXCI6IFwicnNzXCIsXG5cdFx0XCJydGZcIjogXCJydGZcIixcblx0XHRcInhodG1sK3htbFwiOiBbXG5cdFx0XHRcInhodG1sXCIsXG5cdFx0XHRcInhodFwiXG5cdFx0XSxcblx0XHRcInhtbFwiOiBbXG5cdFx0XHRcInhtbFwiLFxuXHRcdFx0XCJ4c2xcIixcblx0XHRcdFwieHNkXCIsXG5cdFx0XHRcInhwZGxcIlxuXHRcdF0sXG5cdFx0XCJ4c3BmK3htbFwiOiBcInhzcGZcIixcblx0XHRcInppcFwiOiBcInppcFwiLFxuXHRcdFwidm5kLmFuZHJvaWQucGFja2FnZS1hcmNoaXZlXCI6IFwiYXBrXCIsXG5cdFx0XCJ2bmQuY2luZGVyZWxsYVwiOiBcImNkeVwiLFxuXHRcdFwidm5kLmdvb2dsZS1lYXJ0aC5rbWwreG1sXCI6IFwia21sXCIsXG5cdFx0XCJ2bmQuZ29vZ2xlLWVhcnRoLmttelwiOiBcImttelwiLFxuXHRcdFwidm5kLm1vemlsbGEueHVsK3htbFwiOiBcInh1bFwiLFxuXHRcdFwidm5kLm1zLWV4Y2VsXCI6IFtcblx0XHRcdFwieGxzXCIsXG5cdFx0XHRcInhsYlwiLFxuXHRcdFx0XCJ4bHRcIixcblx0XHRcdFwieGxtXCIsXG5cdFx0XHRcInhsYVwiLFxuXHRcdFx0XCJ4bGNcIixcblx0XHRcdFwieGx3XCJcblx0XHRdLFxuXHRcdFwidm5kLm1zLXBraS5zZWNjYXRcIjogXCJjYXRcIixcblx0XHRcInZuZC5tcy1wa2kuc3RsXCI6IFwic3RsXCIsXG5cdFx0XCJ2bmQubXMtcG93ZXJwb2ludFwiOiBbXG5cdFx0XHRcInBwdFwiLFxuXHRcdFx0XCJwcHNcIixcblx0XHRcdFwicG90XCIsXG5cdFx0XHRcInBwYVwiLFxuXHRcdFx0XCJwd3pcIlxuXHRcdF0sXG5cdFx0XCJ2bmQub2FzaXMub3BlbmRvY3VtZW50LmNoYXJ0XCI6IFwib2RjXCIsXG5cdFx0XCJ2bmQub2FzaXMub3BlbmRvY3VtZW50LmRhdGFiYXNlXCI6IFwib2RiXCIsXG5cdFx0XCJ2bmQub2FzaXMub3BlbmRvY3VtZW50LmZvcm11bGFcIjogXCJvZGZcIixcblx0XHRcInZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZ3JhcGhpY3NcIjogXCJvZGdcIixcblx0XHRcInZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZ3JhcGhpY3MtdGVtcGxhdGVcIjogXCJvdGdcIixcblx0XHRcInZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuaW1hZ2VcIjogXCJvZGlcIixcblx0XHRcInZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uXCI6IFwib2RwXCIsXG5cdFx0XCJ2bmQub2FzaXMub3BlbmRvY3VtZW50LnByZXNlbnRhdGlvbi10ZW1wbGF0ZVwiOiBcIm90cFwiLFxuXHRcdFwidm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldFwiOiBcIm9kc1wiLFxuXHRcdFwidm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldC10ZW1wbGF0ZVwiOiBcIm90c1wiLFxuXHRcdFwidm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0XCI6IFwib2R0XCIsXG5cdFx0XCJ2bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHQtbWFzdGVyXCI6IFtcblx0XHRcdFwib2RtXCIsXG5cdFx0XHRcIm90bVwiXG5cdFx0XSxcblx0XHRcInZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dC10ZW1wbGF0ZVwiOiBcIm90dFwiLFxuXHRcdFwidm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0LXdlYlwiOiBcIm90aFwiLFxuXHRcdFwidm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXRcIjogXCJ4bHN4XCIsXG5cdFx0XCJ2bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC50ZW1wbGF0ZVwiOiBcInhsdHhcIixcblx0XHRcInZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzZW50YXRpb25cIjogXCJwcHR4XCIsXG5cdFx0XCJ2bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuc2xpZGVzaG93XCI6IFwicHBzeFwiLFxuXHRcdFwidm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnRlbXBsYXRlXCI6IFwicG90eFwiLFxuXHRcdFwidm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnRcIjogXCJkb2N4XCIsXG5cdFx0XCJ2bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC50ZW1wbGF0ZVwiOiBcImRvdHhcIixcblx0XHRcInZuZC5zbWFmXCI6IFwibW1mXCIsXG5cdFx0XCJ2bmQuc3RhcmRpdmlzaW9uLmNhbGNcIjogXCJzZGNcIixcblx0XHRcInZuZC5zdGFyZGl2aXNpb24uY2hhcnRcIjogXCJzZHNcIixcblx0XHRcInZuZC5zdGFyZGl2aXNpb24uZHJhd1wiOiBcInNkYVwiLFxuXHRcdFwidm5kLnN0YXJkaXZpc2lvbi5pbXByZXNzXCI6IFwic2RkXCIsXG5cdFx0XCJ2bmQuc3RhcmRpdmlzaW9uLm1hdGhcIjogW1xuXHRcdFx0XCJzZGZcIixcblx0XHRcdFwic21mXCJcblx0XHRdLFxuXHRcdFwidm5kLnN0YXJkaXZpc2lvbi53cml0ZXJcIjogW1xuXHRcdFx0XCJzZHdcIixcblx0XHRcdFwidm9yXCJcblx0XHRdLFxuXHRcdFwidm5kLnN0YXJkaXZpc2lvbi53cml0ZXItZ2xvYmFsXCI6IFwic2dsXCIsXG5cdFx0XCJ2bmQuc3VuLnhtbC5jYWxjXCI6IFwic3hjXCIsXG5cdFx0XCJ2bmQuc3VuLnhtbC5jYWxjLnRlbXBsYXRlXCI6IFwic3RjXCIsXG5cdFx0XCJ2bmQuc3VuLnhtbC5kcmF3XCI6IFwic3hkXCIsXG5cdFx0XCJ2bmQuc3VuLnhtbC5kcmF3LnRlbXBsYXRlXCI6IFwic3RkXCIsXG5cdFx0XCJ2bmQuc3VuLnhtbC5pbXByZXNzXCI6IFwic3hpXCIsXG5cdFx0XCJ2bmQuc3VuLnhtbC5pbXByZXNzLnRlbXBsYXRlXCI6IFwic3RpXCIsXG5cdFx0XCJ2bmQuc3VuLnhtbC5tYXRoXCI6IFwic3htXCIsXG5cdFx0XCJ2bmQuc3VuLnhtbC53cml0ZXJcIjogXCJzeHdcIixcblx0XHRcInZuZC5zdW4ueG1sLndyaXRlci5nbG9iYWxcIjogXCJzeGdcIixcblx0XHRcInZuZC5zdW4ueG1sLndyaXRlci50ZW1wbGF0ZVwiOiBcInN0d1wiLFxuXHRcdFwidm5kLnN5bWJpYW4uaW5zdGFsbFwiOiBbXG5cdFx0XHRcInNpc1wiLFxuXHRcdFx0XCJzaXN4XCJcblx0XHRdLFxuXHRcdFwidm5kLnZpc2lvXCI6IFtcblx0XHRcdFwidnNkXCIsXG5cdFx0XHRcInZzdFwiLFxuXHRcdFx0XCJ2c3NcIixcblx0XHRcdFwidnN3XCIsXG5cdFx0XHRcInZzZHhcIixcblx0XHRcdFwidnNzeFwiLFxuXHRcdFx0XCJ2c3R4XCIsXG5cdFx0XHRcInZzc21cIixcblx0XHRcdFwidnN0bVwiXG5cdFx0XSxcblx0XHRcInZuZC53YXAud2J4bWxcIjogXCJ3YnhtbFwiLFxuXHRcdFwidm5kLndhcC53bWxjXCI6IFwid21sY1wiLFxuXHRcdFwidm5kLndhcC53bWxzY3JpcHRjXCI6IFwid21sc2NcIixcblx0XHRcInZuZC53b3JkcGVyZmVjdFwiOiBcIndwZFwiLFxuXHRcdFwidm5kLndvcmRwZXJmZWN0NS4xXCI6IFwid3A1XCIsXG5cdFx0XCJ4LTEyM1wiOiBcIndrXCIsXG5cdFx0XCJ4LTd6LWNvbXByZXNzZWRcIjogXCI3elwiLFxuXHRcdFwieC1hYml3b3JkXCI6IFwiYWJ3XCIsXG5cdFx0XCJ4LWFwcGxlLWRpc2tpbWFnZVwiOiBcImRtZ1wiLFxuXHRcdFwieC1iY3Bpb1wiOiBcImJjcGlvXCIsXG5cdFx0XCJ4LWJpdHRvcnJlbnRcIjogXCJ0b3JyZW50XCIsXG5cdFx0XCJ4LWNiclwiOiBbXG5cdFx0XHRcImNiclwiLFxuXHRcdFx0XCJjYmFcIixcblx0XHRcdFwiY2J0XCIsXG5cdFx0XHRcImNiN1wiXG5cdFx0XSxcblx0XHRcIngtY2J6XCI6IFwiY2J6XCIsXG5cdFx0XCJ4LWNkZlwiOiBbXG5cdFx0XHRcImNkZlwiLFxuXHRcdFx0XCJjZGFcIlxuXHRcdF0sXG5cdFx0XCJ4LWNkbGlua1wiOiBcInZjZFwiLFxuXHRcdFwieC1jaGVzcy1wZ25cIjogXCJwZ25cIixcblx0XHRcIngtY3Bpb1wiOiBcImNwaW9cIixcblx0XHRcIngtY3NoXCI6IFwiY3NoXCIsXG5cdFx0XCJ4LWRpcmVjdG9yXCI6IFtcblx0XHRcdFwiZGlyXCIsXG5cdFx0XHRcImR4clwiLFxuXHRcdFx0XCJjc3RcIixcblx0XHRcdFwiY2N0XCIsXG5cdFx0XHRcImN4dFwiLFxuXHRcdFx0XCJ3M2RcIixcblx0XHRcdFwiZmdkXCIsXG5cdFx0XHRcInN3YVwiXG5cdFx0XSxcblx0XHRcIngtZG1zXCI6IFwiZG1zXCIsXG5cdFx0XCJ4LWRvb21cIjogXCJ3YWRcIixcblx0XHRcIngtZHZpXCI6IFwiZHZpXCIsXG5cdFx0XCJ4LWh0dHBkLWVydWJ5XCI6IFwicmh0bWxcIixcblx0XHRcIngtZm9udFwiOiBcInBjZi5aXCIsXG5cdFx0XCJ4LWZyZWVtaW5kXCI6IFwibW1cIixcblx0XHRcIngtZ251bWVyaWNcIjogXCJnbnVtZXJpY1wiLFxuXHRcdFwieC1nby1zZ2ZcIjogXCJzZ2ZcIixcblx0XHRcIngtZ3JhcGhpbmctY2FsY3VsYXRvclwiOiBcImdjZlwiLFxuXHRcdFwieC1ndGFyXCI6IFtcblx0XHRcdFwiZ3RhclwiLFxuXHRcdFx0XCJ0YXpcIlxuXHRcdF0sXG5cdFx0XCJ4LWhkZlwiOiBcImhkZlwiLFxuXHRcdFwieC1odHRwZC1waHBcIjogW1xuXHRcdFx0XCJwaHRtbFwiLFxuXHRcdFx0XCJwaHRcIixcblx0XHRcdFwicGhwXCJcblx0XHRdLFxuXHRcdFwieC1odHRwZC1waHAtc291cmNlXCI6IFwicGhwc1wiLFxuXHRcdFwieC1odHRwZC1waHAzXCI6IFwicGhwM1wiLFxuXHRcdFwieC1odHRwZC1waHAzLXByZXByb2Nlc3NlZFwiOiBcInBocDNwXCIsXG5cdFx0XCJ4LWh0dHBkLXBocDRcIjogXCJwaHA0XCIsXG5cdFx0XCJ4LWh0dHBkLXBocDVcIjogXCJwaHA1XCIsXG5cdFx0XCJ4LWljYVwiOiBcImljYVwiLFxuXHRcdFwieC1pbmZvXCI6IFwiaW5mb1wiLFxuXHRcdFwieC1pbnRlcm5ldC1zaWdudXBcIjogW1xuXHRcdFx0XCJpbnNcIixcblx0XHRcdFwiaXNwXCJcblx0XHRdLFxuXHRcdFwieC1pcGhvbmVcIjogXCJpaWlcIixcblx0XHRcIngtaXNvOTY2MC1pbWFnZVwiOiBcImlzb1wiLFxuXHRcdFwieC1qYXZhLWpubHAtZmlsZVwiOiBcImpubHBcIixcblx0XHRcIngtam1vbFwiOiBcImptelwiLFxuXHRcdFwieC1raWxsdXN0cmF0b3JcIjogXCJraWxcIixcblx0XHRcIngtbGF0ZXhcIjogXCJsYXRleFwiLFxuXHRcdFwieC1seXhcIjogXCJseXhcIixcblx0XHRcIngtbHp4XCI6IFwibHp4XCIsXG5cdFx0XCJ4LW1ha2VyXCI6IFtcblx0XHRcdFwiZnJtXCIsXG5cdFx0XHRcImZiXCIsXG5cdFx0XHRcImZiZG9jXCJcblx0XHRdLFxuXHRcdFwieC1tcy13bWRcIjogXCJ3bWRcIixcblx0XHRcIngtbXNkb3MtcHJvZ3JhbVwiOiBbXG5cdFx0XHRcImNvbVwiLFxuXHRcdFx0XCJleGVcIixcblx0XHRcdFwiYmF0XCIsXG5cdFx0XHRcImRsbFwiXG5cdFx0XSxcblx0XHRcIngtbmV0Y2RmXCI6IFtcblx0XHRcdFwibmNcIlxuXHRcdF0sXG5cdFx0XCJ4LW5zLXByb3h5LWF1dG9jb25maWdcIjogW1xuXHRcdFx0XCJwYWNcIixcblx0XHRcdFwiZGF0XCJcblx0XHRdLFxuXHRcdFwieC1ud2NcIjogXCJud2NcIixcblx0XHRcIngtb2JqZWN0XCI6IFwib1wiLFxuXHRcdFwieC1vei1hcHBsaWNhdGlvblwiOiBcIm96YVwiLFxuXHRcdFwieC1wa2NzNy1jZXJ0cmVxcmVzcFwiOiBcInA3clwiLFxuXHRcdFwieC1weXRob24tY29kZVwiOiBbXG5cdFx0XHRcInB5Y1wiLFxuXHRcdFx0XCJweW9cIlxuXHRcdF0sXG5cdFx0XCJ4LXFnaXNcIjogW1xuXHRcdFx0XCJxZ3NcIixcblx0XHRcdFwic2hwXCIsXG5cdFx0XHRcInNoeFwiXG5cdFx0XSxcblx0XHRcIngtcXVpY2t0aW1lcGxheWVyXCI6IFwicXRsXCIsXG5cdFx0XCJ4LXJlZGhhdC1wYWNrYWdlLW1hbmFnZXJcIjogW1xuXHRcdFx0XCJycG1cIixcblx0XHRcdFwicnBhXCJcblx0XHRdLFxuXHRcdFwieC1ydWJ5XCI6IFwicmJcIixcblx0XHRcIngtc2hcIjogXCJzaFwiLFxuXHRcdFwieC1zaGFyXCI6IFwic2hhclwiLFxuXHRcdFwieC1zaG9ja3dhdmUtZmxhc2hcIjogW1xuXHRcdFx0XCJzd2ZcIixcblx0XHRcdFwic3dmbFwiXG5cdFx0XSxcblx0XHRcIngtc2lsdmVybGlnaHRcIjogXCJzY3JcIixcblx0XHRcIngtc3R1ZmZpdFwiOiBcInNpdFwiLFxuXHRcdFwieC1zdjRjcGlvXCI6IFwic3Y0Y3Bpb1wiLFxuXHRcdFwieC1zdjRjcmNcIjogXCJzdjRjcmNcIixcblx0XHRcIngtdGFyXCI6IFwidGFyXCIsXG5cdFx0XCJ4LXRleC1nZlwiOiBcImdmXCIsXG5cdFx0XCJ4LXRleC1wa1wiOiBcInBrXCIsXG5cdFx0XCJ4LXRleGluZm9cIjogW1xuXHRcdFx0XCJ0ZXhpbmZvXCIsXG5cdFx0XHRcInRleGlcIlxuXHRcdF0sXG5cdFx0XCJ4LXRyYXNoXCI6IFtcblx0XHRcdFwiflwiLFxuXHRcdFx0XCIlXCIsXG5cdFx0XHRcImJha1wiLFxuXHRcdFx0XCJvbGRcIixcblx0XHRcdFwic2lrXCJcblx0XHRdLFxuXHRcdFwieC11c3RhclwiOiBcInVzdGFyXCIsXG5cdFx0XCJ4LXdhaXMtc291cmNlXCI6IFwic3JjXCIsXG5cdFx0XCJ4LXdpbmd6XCI6IFwid3pcIixcblx0XHRcIngteDUwOS1jYS1jZXJ0XCI6IFtcblx0XHRcdFwiY3J0XCIsXG5cdFx0XHRcImRlclwiLFxuXHRcdFx0XCJjZXJcIlxuXHRcdF0sXG5cdFx0XCJ4LXhjZlwiOiBcInhjZlwiLFxuXHRcdFwieC14ZmlnXCI6IFwiZmlnXCIsXG5cdFx0XCJ4LXhwaW5zdGFsbFwiOiBcInhwaVwiLFxuXHRcdFwiYXBwbGl4d2FyZVwiOiBcImF3XCIsXG5cdFx0XCJhdG9tc3ZjK3htbFwiOiBcImF0b21zdmNcIixcblx0XHRcImNjeG1sK3htbFwiOiBcImNjeG1sXCIsXG5cdFx0XCJjZG1pLWNhcGFiaWxpdHlcIjogXCJjZG1pYVwiLFxuXHRcdFwiY2RtaS1jb250YWluZXJcIjogXCJjZG1pY1wiLFxuXHRcdFwiY2RtaS1kb21haW5cIjogXCJjZG1pZFwiLFxuXHRcdFwiY2RtaS1vYmplY3RcIjogXCJjZG1pb1wiLFxuXHRcdFwiY2RtaS1xdWV1ZVwiOiBcImNkbWlxXCIsXG5cdFx0XCJkb2Nib29rK3htbFwiOiBcImRia1wiLFxuXHRcdFwiZHNzYytkZXJcIjogXCJkc3NjXCIsXG5cdFx0XCJkc3NjK3htbFwiOiBcInhkc3NjXCIsXG5cdFx0XCJlbW1hK3htbFwiOiBcImVtbWFcIixcblx0XHRcImVwdWIremlwXCI6IFwiZXB1YlwiLFxuXHRcdFwiZXhpXCI6IFwiZXhpXCIsXG5cdFx0XCJmb250LXRkcGZyXCI6IFwicGZyXCIsXG5cdFx0XCJnbWwreG1sXCI6IFwiZ21sXCIsXG5cdFx0XCJncHgreG1sXCI6IFwiZ3B4XCIsXG5cdFx0XCJneGZcIjogXCJneGZcIixcblx0XHRcImh5cGVyc3R1ZGlvXCI6IFwic3RrXCIsXG5cdFx0XCJpbmttbCt4bWxcIjogW1xuXHRcdFx0XCJpbmtcIixcblx0XHRcdFwiaW5rbWxcIlxuXHRcdF0sXG5cdFx0XCJpcGZpeFwiOiBcImlwZml4XCIsXG5cdFx0XCJqc29ubWwranNvblwiOiBcImpzb25tbFwiLFxuXHRcdFwibG9zdCt4bWxcIjogXCJsb3N0eG1sXCIsXG5cdFx0XCJtYWRzK3htbFwiOiBcIm1hZHNcIixcblx0XHRcIm1hcmNcIjogXCJtcmNcIixcblx0XHRcIm1hcmN4bWwreG1sXCI6IFwibXJjeFwiLFxuXHRcdFwibWF0aG1sK3htbFwiOiBbXG5cdFx0XHRcIm1hdGhtbFwiLFxuXHRcdFx0XCJtbWxcIlxuXHRcdF0sXG5cdFx0XCJtYm94XCI6IFwibWJveFwiLFxuXHRcdFwibWVkaWFzZXJ2ZXJjb250cm9sK3htbFwiOiBcIm1zY21sXCIsXG5cdFx0XCJtZXRhbGluayt4bWxcIjogXCJtZXRhbGlua1wiLFxuXHRcdFwibWV0YWxpbms0K3htbFwiOiBcIm1ldGE0XCIsXG5cdFx0XCJtZXRzK3htbFwiOiBcIm1ldHNcIixcblx0XHRcIm1vZHMreG1sXCI6IFwibW9kc1wiLFxuXHRcdFwibXAyMVwiOiBbXG5cdFx0XHRcIm0yMVwiLFxuXHRcdFx0XCJtcDIxXCJcblx0XHRdLFxuXHRcdFwibXA0XCI6IFwibXA0c1wiLFxuXHRcdFwib2VicHMtcGFja2FnZSt4bWxcIjogXCJvcGZcIixcblx0XHRcIm9tZG9jK3htbFwiOiBcIm9tZG9jXCIsXG5cdFx0XCJvbmVub3RlXCI6IFtcblx0XHRcdFwib25ldG9jXCIsXG5cdFx0XHRcIm9uZXRvYzJcIixcblx0XHRcdFwib25ldG1wXCIsXG5cdFx0XHRcIm9uZXBrZ1wiXG5cdFx0XSxcblx0XHRcIm94cHNcIjogXCJveHBzXCIsXG5cdFx0XCJwYXRjaC1vcHMtZXJyb3IreG1sXCI6IFwieGVyXCIsXG5cdFx0XCJwZ3AtZW5jcnlwdGVkXCI6IFwicGdwXCIsXG5cdFx0XCJwa2NzMTBcIjogXCJwMTBcIixcblx0XHRcInBrY3M3LW1pbWVcIjogW1xuXHRcdFx0XCJwN21cIixcblx0XHRcdFwicDdjXCJcblx0XHRdLFxuXHRcdFwicGtjczctc2lnbmF0dXJlXCI6IFwicDdzXCIsXG5cdFx0XCJwa2NzOFwiOiBcInA4XCIsXG5cdFx0XCJwa2l4LWF0dHItY2VydFwiOiBcImFjXCIsXG5cdFx0XCJwa2l4LWNybFwiOiBcImNybFwiLFxuXHRcdFwicGtpeC1wa2lwYXRoXCI6IFwicGtpcGF0aFwiLFxuXHRcdFwicGtpeGNtcFwiOiBcInBraVwiLFxuXHRcdFwicGxzK3htbFwiOiBcInBsc1wiLFxuXHRcdFwicHJzLmN3d1wiOiBcImN3d1wiLFxuXHRcdFwicHNrYyt4bWxcIjogXCJwc2tjeG1sXCIsXG5cdFx0XCJyZWdpbmZvK3htbFwiOiBcInJpZlwiLFxuXHRcdFwicmVsYXgtbmctY29tcGFjdC1zeW50YXhcIjogXCJybmNcIixcblx0XHRcInJlc291cmNlLWxpc3RzK3htbFwiOiBcInJsXCIsXG5cdFx0XCJyZXNvdXJjZS1saXN0cy1kaWZmK3htbFwiOiBcInJsZFwiLFxuXHRcdFwicmxzLXNlcnZpY2VzK3htbFwiOiBcInJzXCIsXG5cdFx0XCJycGtpLWdob3N0YnVzdGVyc1wiOiBcImdiclwiLFxuXHRcdFwicnBraS1tYW5pZmVzdFwiOiBcIm1mdFwiLFxuXHRcdFwicnBraS1yb2FcIjogXCJyb2FcIixcblx0XHRcInJzZCt4bWxcIjogXCJyc2RcIixcblx0XHRcInNibWwreG1sXCI6IFwic2JtbFwiLFxuXHRcdFwic2N2cC1jdi1yZXF1ZXN0XCI6IFwic2NxXCIsXG5cdFx0XCJzY3ZwLWN2LXJlc3BvbnNlXCI6IFwic2NzXCIsXG5cdFx0XCJzY3ZwLXZwLXJlcXVlc3RcIjogXCJzcHFcIixcblx0XHRcInNjdnAtdnAtcmVzcG9uc2VcIjogXCJzcHBcIixcblx0XHRcInNkcFwiOiBcInNkcFwiLFxuXHRcdFwic2V0LXBheW1lbnQtaW5pdGlhdGlvblwiOiBcInNldHBheVwiLFxuXHRcdFwic2V0LXJlZ2lzdHJhdGlvbi1pbml0aWF0aW9uXCI6IFwic2V0cmVnXCIsXG5cdFx0XCJzaGYreG1sXCI6IFwic2hmXCIsXG5cdFx0XCJzcGFycWwtcXVlcnlcIjogXCJycVwiLFxuXHRcdFwic3BhcnFsLXJlc3VsdHMreG1sXCI6IFwic3J4XCIsXG5cdFx0XCJzcmdzXCI6IFwiZ3JhbVwiLFxuXHRcdFwic3Jncyt4bWxcIjogXCJncnhtbFwiLFxuXHRcdFwic3J1K3htbFwiOiBcInNydVwiLFxuXHRcdFwic3NkbCt4bWxcIjogXCJzc2RsXCIsXG5cdFx0XCJzc21sK3htbFwiOiBcInNzbWxcIixcblx0XHRcInRlaSt4bWxcIjogW1xuXHRcdFx0XCJ0ZWlcIixcblx0XHRcdFwidGVpY29ycHVzXCJcblx0XHRdLFxuXHRcdFwidGhyYXVkK3htbFwiOiBcInRmaVwiLFxuXHRcdFwidGltZXN0YW1wZWQtZGF0YVwiOiBcInRzZFwiLFxuXHRcdFwidm5kLjNncHAucGljLWJ3LWxhcmdlXCI6IFwicGxiXCIsXG5cdFx0XCJ2bmQuM2dwcC5waWMtYnctc21hbGxcIjogXCJwc2JcIixcblx0XHRcInZuZC4zZ3BwLnBpYy1idy12YXJcIjogXCJwdmJcIixcblx0XHRcInZuZC4zZ3BwMi50Y2FwXCI6IFwidGNhcFwiLFxuXHRcdFwidm5kLjNtLnBvc3QtaXQtbm90ZXNcIjogXCJwd25cIixcblx0XHRcInZuZC5hY2NwYWMuc2ltcGx5LmFzb1wiOiBcImFzb1wiLFxuXHRcdFwidm5kLmFjY3BhYy5zaW1wbHkuaW1wXCI6IFwiaW1wXCIsXG5cdFx0XCJ2bmQuYWN1Y29ib2xcIjogXCJhY3VcIixcblx0XHRcInZuZC5hY3Vjb3JwXCI6IFtcblx0XHRcdFwiYXRjXCIsXG5cdFx0XHRcImFjdXRjXCJcblx0XHRdLFxuXHRcdFwidm5kLmFkb2JlLmFpci1hcHBsaWNhdGlvbi1pbnN0YWxsZXItcGFja2FnZSt6aXBcIjogXCJhaXJcIixcblx0XHRcInZuZC5hZG9iZS5mb3Jtc2NlbnRyYWwuZmNkdFwiOiBcImZjZHRcIixcblx0XHRcInZuZC5hZG9iZS5meHBcIjogW1xuXHRcdFx0XCJmeHBcIixcblx0XHRcdFwiZnhwbFwiXG5cdFx0XSxcblx0XHRcInZuZC5hZG9iZS54ZHAreG1sXCI6IFwieGRwXCIsXG5cdFx0XCJ2bmQuYWRvYmUueGZkZlwiOiBcInhmZGZcIixcblx0XHRcInZuZC5haGVhZC5zcGFjZVwiOiBcImFoZWFkXCIsXG5cdFx0XCJ2bmQuYWlyemlwLmZpbGVzZWN1cmUuYXpmXCI6IFwiYXpmXCIsXG5cdFx0XCJ2bmQuYWlyemlwLmZpbGVzZWN1cmUuYXpzXCI6IFwiYXpzXCIsXG5cdFx0XCJ2bmQuYW1hem9uLmVib29rXCI6IFwiYXp3XCIsXG5cdFx0XCJ2bmQuYW1lcmljYW5keW5hbWljcy5hY2NcIjogXCJhY2NcIixcblx0XHRcInZuZC5hbWlnYS5hbWlcIjogXCJhbWlcIixcblx0XHRcInZuZC5hbnNlci13ZWItY2VydGlmaWNhdGUtaXNzdWUtaW5pdGlhdGlvblwiOiBcImNpaVwiLFxuXHRcdFwidm5kLmFuc2VyLXdlYi1mdW5kcy10cmFuc2Zlci1pbml0aWF0aW9uXCI6IFwiZnRpXCIsXG5cdFx0XCJ2bmQuYW50aXguZ2FtZS1jb21wb25lbnRcIjogXCJhdHhcIixcblx0XHRcInZuZC5hcHBsZS5pbnN0YWxsZXIreG1sXCI6IFwibXBrZ1wiLFxuXHRcdFwidm5kLmFwcGxlLm1wZWd1cmxcIjogXCJtM3U4XCIsXG5cdFx0XCJ2bmQuYXJpc3RhbmV0d29ya3Muc3dpXCI6IFwic3dpXCIsXG5cdFx0XCJ2bmQuYXN0cmFlYS1zb2Z0d2FyZS5pb3RhXCI6IFwiaW90YVwiLFxuXHRcdFwidm5kLmF1ZGlvZ3JhcGhcIjogXCJhZXBcIixcblx0XHRcInZuZC5ibHVlaWNlLm11bHRpcGFzc1wiOiBcIm1wbVwiLFxuXHRcdFwidm5kLmJtaVwiOiBcImJtaVwiLFxuXHRcdFwidm5kLmJ1c2luZXNzb2JqZWN0c1wiOiBcInJlcFwiLFxuXHRcdFwidm5kLmNoZW1kcmF3K3htbFwiOiBcImNkeG1sXCIsXG5cdFx0XCJ2bmQuY2hpcG51dHMua2FyYW9rZS1tbWRcIjogXCJtbWRcIixcblx0XHRcInZuZC5jbGF5bW9yZVwiOiBcImNsYVwiLFxuXHRcdFwidm5kLmNsb2FudG8ucnA5XCI6IFwicnA5XCIsXG5cdFx0XCJ2bmQuY2xvbmsuYzRncm91cFwiOiBbXG5cdFx0XHRcImM0Z1wiLFxuXHRcdFx0XCJjNGRcIixcblx0XHRcdFwiYzRmXCIsXG5cdFx0XHRcImM0cFwiLFxuXHRcdFx0XCJjNHVcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuY2x1ZXRydXN0LmNhcnRvbW9iaWxlLWNvbmZpZ1wiOiBcImMxMWFtY1wiLFxuXHRcdFwidm5kLmNsdWV0cnVzdC5jYXJ0b21vYmlsZS1jb25maWctcGtnXCI6IFwiYzExYW16XCIsXG5cdFx0XCJ2bmQuY29tbW9uc3BhY2VcIjogXCJjc3BcIixcblx0XHRcInZuZC5jb250YWN0LmNtc2dcIjogXCJjZGJjbXNnXCIsXG5cdFx0XCJ2bmQuY29zbW9jYWxsZXJcIjogXCJjbWNcIixcblx0XHRcInZuZC5jcmljay5jbGlja2VyXCI6IFwiY2xreFwiLFxuXHRcdFwidm5kLmNyaWNrLmNsaWNrZXIua2V5Ym9hcmRcIjogXCJjbGtrXCIsXG5cdFx0XCJ2bmQuY3JpY2suY2xpY2tlci5wYWxldHRlXCI6IFwiY2xrcFwiLFxuXHRcdFwidm5kLmNyaWNrLmNsaWNrZXIudGVtcGxhdGVcIjogXCJjbGt0XCIsXG5cdFx0XCJ2bmQuY3JpY2suY2xpY2tlci53b3JkYmFua1wiOiBcImNsa3dcIixcblx0XHRcInZuZC5jcml0aWNhbHRvb2xzLndicyt4bWxcIjogXCJ3YnNcIixcblx0XHRcInZuZC5jdGMtcG9zbWxcIjogXCJwbWxcIixcblx0XHRcInZuZC5jdXBzLXBwZFwiOiBcInBwZFwiLFxuXHRcdFwidm5kLmN1cmwuY2FyXCI6IFwiY2FyXCIsXG5cdFx0XCJ2bmQuY3VybC5wY3VybFwiOiBcInBjdXJsXCIsXG5cdFx0XCJ2bmQuZGFydFwiOiBcImRhcnRcIixcblx0XHRcInZuZC5kYXRhLXZpc2lvbi5yZHpcIjogXCJyZHpcIixcblx0XHRcInZuZC5kZWNlLmRhdGFcIjogW1xuXHRcdFx0XCJ1dmZcIixcblx0XHRcdFwidXZ2ZlwiLFxuXHRcdFx0XCJ1dmRcIixcblx0XHRcdFwidXZ2ZFwiXG5cdFx0XSxcblx0XHRcInZuZC5kZWNlLnR0bWwreG1sXCI6IFtcblx0XHRcdFwidXZ0XCIsXG5cdFx0XHRcInV2dnRcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuZGVjZS51bnNwZWNpZmllZFwiOiBbXG5cdFx0XHRcInV2eFwiLFxuXHRcdFx0XCJ1dnZ4XCJcblx0XHRdLFxuXHRcdFwidm5kLmRlY2UuemlwXCI6IFtcblx0XHRcdFwidXZ6XCIsXG5cdFx0XHRcInV2dnpcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuZGVub3ZvLmZjc2VsYXlvdXQtbGlua1wiOiBcImZlX2xhdW5jaFwiLFxuXHRcdFwidm5kLmRuYVwiOiBcImRuYVwiLFxuXHRcdFwidm5kLmRvbGJ5Lm1scFwiOiBcIm1scFwiLFxuXHRcdFwidm5kLmRwZ3JhcGhcIjogXCJkcGdcIixcblx0XHRcInZuZC5kcmVhbWZhY3RvcnlcIjogXCJkZmFjXCIsXG5cdFx0XCJ2bmQuZHMta2V5cG9pbnRcIjogXCJrcHh4XCIsXG5cdFx0XCJ2bmQuZHZiLmFpdFwiOiBcImFpdFwiLFxuXHRcdFwidm5kLmR2Yi5zZXJ2aWNlXCI6IFwic3ZjXCIsXG5cdFx0XCJ2bmQuZHluYWdlb1wiOiBcImdlb1wiLFxuXHRcdFwidm5kLmVjb3dpbi5jaGFydFwiOiBcIm1hZ1wiLFxuXHRcdFwidm5kLmVubGl2ZW5cIjogXCJubWxcIixcblx0XHRcInZuZC5lcHNvbi5lc2ZcIjogXCJlc2ZcIixcblx0XHRcInZuZC5lcHNvbi5tc2ZcIjogXCJtc2ZcIixcblx0XHRcInZuZC5lcHNvbi5xdWlja2FuaW1lXCI6IFwicWFtXCIsXG5cdFx0XCJ2bmQuZXBzb24uc2FsdFwiOiBcInNsdFwiLFxuXHRcdFwidm5kLmVwc29uLnNzZlwiOiBcInNzZlwiLFxuXHRcdFwidm5kLmVzemlnbm8zK3htbFwiOiBbXG5cdFx0XHRcImVzM1wiLFxuXHRcdFx0XCJldDNcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuZXpwaXgtYWxidW1cIjogXCJlejJcIixcblx0XHRcInZuZC5lenBpeC1wYWNrYWdlXCI6IFwiZXozXCIsXG5cdFx0XCJ2bmQuZmRmXCI6IFwiZmRmXCIsXG5cdFx0XCJ2bmQuZmRzbi5tc2VlZFwiOiBcIm1zZWVkXCIsXG5cdFx0XCJ2bmQuZmRzbi5zZWVkXCI6IFtcblx0XHRcdFwic2VlZFwiLFxuXHRcdFx0XCJkYXRhbGVzc1wiXG5cdFx0XSxcblx0XHRcInZuZC5mbG9ncmFwaGl0XCI6IFwiZ3BoXCIsXG5cdFx0XCJ2bmQuZmx1eHRpbWUuY2xpcFwiOiBcImZ0Y1wiLFxuXHRcdFwidm5kLmZyYW1lbWFrZXJcIjogW1xuXHRcdFx0XCJmbVwiLFxuXHRcdFx0XCJmcmFtZVwiLFxuXHRcdFx0XCJtYWtlclwiLFxuXHRcdFx0XCJib29rXCJcblx0XHRdLFxuXHRcdFwidm5kLmZyb2dhbnMuZm5jXCI6IFwiZm5jXCIsXG5cdFx0XCJ2bmQuZnJvZ2Fucy5sdGZcIjogXCJsdGZcIixcblx0XHRcInZuZC5mc2Mud2VibGF1bmNoXCI6IFwiZnNjXCIsXG5cdFx0XCJ2bmQuZnVqaXRzdS5vYXN5c1wiOiBcIm9hc1wiLFxuXHRcdFwidm5kLmZ1aml0c3Uub2FzeXMyXCI6IFwib2EyXCIsXG5cdFx0XCJ2bmQuZnVqaXRzdS5vYXN5czNcIjogXCJvYTNcIixcblx0XHRcInZuZC5mdWppdHN1Lm9hc3lzZ3BcIjogXCJmZzVcIixcblx0XHRcInZuZC5mdWppdHN1Lm9hc3lzcHJzXCI6IFwiYmgyXCIsXG5cdFx0XCJ2bmQuZnVqaXhlcm94LmRkZFwiOiBcImRkZFwiLFxuXHRcdFwidm5kLmZ1aml4ZXJveC5kb2N1d29ya3NcIjogXCJ4ZHdcIixcblx0XHRcInZuZC5mdWppeGVyb3guZG9jdXdvcmtzLmJpbmRlclwiOiBcInhiZFwiLFxuXHRcdFwidm5kLmZ1enp5c2hlZXRcIjogXCJmenNcIixcblx0XHRcInZuZC5nZW5vbWF0aXgudHV4ZWRvXCI6IFwidHhkXCIsXG5cdFx0XCJ2bmQuZ2VvZ2VicmEuZmlsZVwiOiBcImdnYlwiLFxuXHRcdFwidm5kLmdlb2dlYnJhLnRvb2xcIjogXCJnZ3RcIixcblx0XHRcInZuZC5nZW9tZXRyeS1leHBsb3JlclwiOiBbXG5cdFx0XHRcImdleFwiLFxuXHRcdFx0XCJncmVcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuZ2VvbmV4dFwiOiBcImd4dFwiLFxuXHRcdFwidm5kLmdlb3BsYW5cIjogXCJnMndcIixcblx0XHRcInZuZC5nZW9zcGFjZVwiOiBcImczd1wiLFxuXHRcdFwidm5kLmdteFwiOiBcImdteFwiLFxuXHRcdFwidm5kLmdyYWZlcVwiOiBbXG5cdFx0XHRcImdxZlwiLFxuXHRcdFx0XCJncXNcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuZ3Jvb3ZlLWFjY291bnRcIjogXCJnYWNcIixcblx0XHRcInZuZC5ncm9vdmUtaGVscFwiOiBcImdoZlwiLFxuXHRcdFwidm5kLmdyb292ZS1pZGVudGl0eS1tZXNzYWdlXCI6IFwiZ2ltXCIsXG5cdFx0XCJ2bmQuZ3Jvb3ZlLWluamVjdG9yXCI6IFwiZ3J2XCIsXG5cdFx0XCJ2bmQuZ3Jvb3ZlLXRvb2wtbWVzc2FnZVwiOiBcImd0bVwiLFxuXHRcdFwidm5kLmdyb292ZS10b29sLXRlbXBsYXRlXCI6IFwidHBsXCIsXG5cdFx0XCJ2bmQuZ3Jvb3ZlLXZjYXJkXCI6IFwidmNnXCIsXG5cdFx0XCJ2bmQuaGFsK3htbFwiOiBcImhhbFwiLFxuXHRcdFwidm5kLmhhbmRoZWxkLWVudGVydGFpbm1lbnQreG1sXCI6IFwiem1tXCIsXG5cdFx0XCJ2bmQuaGJjaVwiOiBcImhiY2lcIixcblx0XHRcInZuZC5oaGUubGVzc29uLXBsYXllclwiOiBcImxlc1wiLFxuXHRcdFwidm5kLmhwLWhwZ2xcIjogXCJocGdsXCIsXG5cdFx0XCJ2bmQuaHAtaHBpZFwiOiBcImhwaWRcIixcblx0XHRcInZuZC5ocC1ocHNcIjogXCJocHNcIixcblx0XHRcInZuZC5ocC1qbHl0XCI6IFwiamx0XCIsXG5cdFx0XCJ2bmQuaHAtcGNsXCI6IFwicGNsXCIsXG5cdFx0XCJ2bmQuaHAtcGNseGxcIjogXCJwY2x4bFwiLFxuXHRcdFwidm5kLmh5ZHJvc3RhdGl4LnNvZi1kYXRhXCI6IFwic2ZkLWhkc3R4XCIsXG5cdFx0XCJ2bmQuaWJtLm1pbmlwYXlcIjogXCJtcHlcIixcblx0XHRcInZuZC5pYm0ubW9kY2FwXCI6IFtcblx0XHRcdFwiYWZwXCIsXG5cdFx0XHRcImxpc3RhZnBcIixcblx0XHRcdFwibGlzdDM4MjBcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuaWJtLnJpZ2h0cy1tYW5hZ2VtZW50XCI6IFwiaXJtXCIsXG5cdFx0XCJ2bmQuaWJtLnNlY3VyZS1jb250YWluZXJcIjogXCJzY1wiLFxuXHRcdFwidm5kLmljY3Byb2ZpbGVcIjogW1xuXHRcdFx0XCJpY2NcIixcblx0XHRcdFwiaWNtXCJcblx0XHRdLFxuXHRcdFwidm5kLmlnbG9hZGVyXCI6IFwiaWdsXCIsXG5cdFx0XCJ2bmQuaW1tZXJ2aXNpb24taXZwXCI6IFwiaXZwXCIsXG5cdFx0XCJ2bmQuaW1tZXJ2aXNpb24taXZ1XCI6IFwiaXZ1XCIsXG5cdFx0XCJ2bmQuaW5zb3JzLmlnbVwiOiBcImlnbVwiLFxuXHRcdFwidm5kLmludGVyY29uLmZvcm1uZXRcIjogW1xuXHRcdFx0XCJ4cHdcIixcblx0XHRcdFwieHB4XCJcblx0XHRdLFxuXHRcdFwidm5kLmludGVyZ2VvXCI6IFwiaTJnXCIsXG5cdFx0XCJ2bmQuaW50dS5xYm9cIjogXCJxYm9cIixcblx0XHRcInZuZC5pbnR1LnFmeFwiOiBcInFmeFwiLFxuXHRcdFwidm5kLmlwdW5wbHVnZ2VkLnJjcHJvZmlsZVwiOiBcInJjcHJvZmlsZVwiLFxuXHRcdFwidm5kLmlyZXBvc2l0b3J5LnBhY2thZ2UreG1sXCI6IFwiaXJwXCIsXG5cdFx0XCJ2bmQuaXMteHByXCI6IFwieHByXCIsXG5cdFx0XCJ2bmQuaXNhYy5mY3NcIjogXCJmY3NcIixcblx0XHRcInZuZC5qYW1cIjogXCJqYW1cIixcblx0XHRcInZuZC5qY3AuamF2YW1lLm1pZGxldC1ybXNcIjogXCJybXNcIixcblx0XHRcInZuZC5qaXNwXCI6IFwiamlzcFwiLFxuXHRcdFwidm5kLmpvb3N0LmpvZGEtYXJjaGl2ZVwiOiBcImpvZGFcIixcblx0XHRcInZuZC5rYWhvb3R6XCI6IFtcblx0XHRcdFwia3R6XCIsXG5cdFx0XHRcImt0clwiXG5cdFx0XSxcblx0XHRcInZuZC5rZGUua2FyYm9uXCI6IFwia2FyYm9uXCIsXG5cdFx0XCJ2bmQua2RlLmtjaGFydFwiOiBcImNocnRcIixcblx0XHRcInZuZC5rZGUua2Zvcm11bGFcIjogXCJrZm9cIixcblx0XHRcInZuZC5rZGUua2l2aW9cIjogXCJmbHdcIixcblx0XHRcInZuZC5rZGUua29udG91clwiOiBcImtvblwiLFxuXHRcdFwidm5kLmtkZS5rcHJlc2VudGVyXCI6IFtcblx0XHRcdFwia3ByXCIsXG5cdFx0XHRcImtwdFwiXG5cdFx0XSxcblx0XHRcInZuZC5rZGUua3NwcmVhZFwiOiBcImtzcFwiLFxuXHRcdFwidm5kLmtkZS5rd29yZFwiOiBbXG5cdFx0XHRcImt3ZFwiLFxuXHRcdFx0XCJrd3RcIlxuXHRcdF0sXG5cdFx0XCJ2bmQua2VuYW1lYWFwcFwiOiBcImh0a2VcIixcblx0XHRcInZuZC5raWRzcGlyYXRpb25cIjogXCJraWFcIixcblx0XHRcInZuZC5raW5hclwiOiBbXG5cdFx0XHRcImtuZVwiLFxuXHRcdFx0XCJrbnBcIlxuXHRcdF0sXG5cdFx0XCJ2bmQua29hblwiOiBbXG5cdFx0XHRcInNrcFwiLFxuXHRcdFx0XCJza2RcIixcblx0XHRcdFwic2t0XCIsXG5cdFx0XHRcInNrbVwiXG5cdFx0XSxcblx0XHRcInZuZC5rb2Rhay1kZXNjcmlwdG9yXCI6IFwic3NlXCIsXG5cdFx0XCJ2bmQubGFzLmxhcyt4bWxcIjogXCJsYXN4bWxcIixcblx0XHRcInZuZC5sbGFtYWdyYXBoaWNzLmxpZmUtYmFsYW5jZS5kZXNrdG9wXCI6IFwibGJkXCIsXG5cdFx0XCJ2bmQubGxhbWFncmFwaGljcy5saWZlLWJhbGFuY2UuZXhjaGFuZ2UreG1sXCI6IFwibGJlXCIsXG5cdFx0XCJ2bmQubG90dXMtMS0yLTNcIjogXCIxMjNcIixcblx0XHRcInZuZC5sb3R1cy1hcHByb2FjaFwiOiBcImFwclwiLFxuXHRcdFwidm5kLmxvdHVzLWZyZWVsYW5jZVwiOiBcInByZVwiLFxuXHRcdFwidm5kLmxvdHVzLW5vdGVzXCI6IFwibnNmXCIsXG5cdFx0XCJ2bmQubG90dXMtb3JnYW5pemVyXCI6IFwib3JnXCIsXG5cdFx0XCJ2bmQubG90dXMtc2NyZWVuY2FtXCI6IFwic2NtXCIsXG5cdFx0XCJ2bmQubG90dXMtd29yZHByb1wiOiBcImx3cFwiLFxuXHRcdFwidm5kLm1hY3BvcnRzLnBvcnRwa2dcIjogXCJwb3J0cGtnXCIsXG5cdFx0XCJ2bmQubWNkXCI6IFwibWNkXCIsXG5cdFx0XCJ2bmQubWVkY2FsY2RhdGFcIjogXCJtYzFcIixcblx0XHRcInZuZC5tZWRpYXN0YXRpb24uY2RrZXlcIjogXCJjZGtleVwiLFxuXHRcdFwidm5kLm1mZXJcIjogXCJtd2ZcIixcblx0XHRcInZuZC5tZm1wXCI6IFwibWZtXCIsXG5cdFx0XCJ2bmQubWljcm9ncmFmeC5mbG9cIjogXCJmbG9cIixcblx0XHRcInZuZC5taWNyb2dyYWZ4LmlneFwiOiBcImlneFwiLFxuXHRcdFwidm5kLm1pZlwiOiBcIm1pZlwiLFxuXHRcdFwidm5kLm1vYml1cy5kYWZcIjogXCJkYWZcIixcblx0XHRcInZuZC5tb2JpdXMuZGlzXCI6IFwiZGlzXCIsXG5cdFx0XCJ2bmQubW9iaXVzLm1ia1wiOiBcIm1ia1wiLFxuXHRcdFwidm5kLm1vYml1cy5tcXlcIjogXCJtcXlcIixcblx0XHRcInZuZC5tb2JpdXMubXNsXCI6IFwibXNsXCIsXG5cdFx0XCJ2bmQubW9iaXVzLnBsY1wiOiBcInBsY1wiLFxuXHRcdFwidm5kLm1vYml1cy50eGZcIjogXCJ0eGZcIixcblx0XHRcInZuZC5tb3BodW4uYXBwbGljYXRpb25cIjogXCJtcG5cIixcblx0XHRcInZuZC5tb3BodW4uY2VydGlmaWNhdGVcIjogXCJtcGNcIixcblx0XHRcInZuZC5tcy1hcnRnYWxyeVwiOiBcImNpbFwiLFxuXHRcdFwidm5kLm1zLWNhYi1jb21wcmVzc2VkXCI6IFwiY2FiXCIsXG5cdFx0XCJ2bmQubXMtZXhjZWwuYWRkaW4ubWFjcm9lbmFibGVkLjEyXCI6IFwieGxhbVwiLFxuXHRcdFwidm5kLm1zLWV4Y2VsLnNoZWV0LmJpbmFyeS5tYWNyb2VuYWJsZWQuMTJcIjogXCJ4bHNiXCIsXG5cdFx0XCJ2bmQubXMtZXhjZWwuc2hlZXQubWFjcm9lbmFibGVkLjEyXCI6IFwieGxzbVwiLFxuXHRcdFwidm5kLm1zLWV4Y2VsLnRlbXBsYXRlLm1hY3JvZW5hYmxlZC4xMlwiOiBcInhsdG1cIixcblx0XHRcInZuZC5tcy1mb250b2JqZWN0XCI6IFwiZW90XCIsXG5cdFx0XCJ2bmQubXMtaHRtbGhlbHBcIjogXCJjaG1cIixcblx0XHRcInZuZC5tcy1pbXNcIjogXCJpbXNcIixcblx0XHRcInZuZC5tcy1scm1cIjogXCJscm1cIixcblx0XHRcInZuZC5tcy1vZmZpY2V0aGVtZVwiOiBcInRobXhcIixcblx0XHRcInZuZC5tcy1wb3dlcnBvaW50LmFkZGluLm1hY3JvZW5hYmxlZC4xMlwiOiBcInBwYW1cIixcblx0XHRcInZuZC5tcy1wb3dlcnBvaW50LnByZXNlbnRhdGlvbi5tYWNyb2VuYWJsZWQuMTJcIjogXCJwcHRtXCIsXG5cdFx0XCJ2bmQubXMtcG93ZXJwb2ludC5zbGlkZS5tYWNyb2VuYWJsZWQuMTJcIjogXCJzbGRtXCIsXG5cdFx0XCJ2bmQubXMtcG93ZXJwb2ludC5zbGlkZXNob3cubWFjcm9lbmFibGVkLjEyXCI6IFwicHBzbVwiLFxuXHRcdFwidm5kLm1zLXBvd2VycG9pbnQudGVtcGxhdGUubWFjcm9lbmFibGVkLjEyXCI6IFwicG90bVwiLFxuXHRcdFwidm5kLm1zLXByb2plY3RcIjogW1xuXHRcdFx0XCJtcHBcIixcblx0XHRcdFwibXB0XCJcblx0XHRdLFxuXHRcdFwidm5kLm1zLXdvcmQuZG9jdW1lbnQubWFjcm9lbmFibGVkLjEyXCI6IFwiZG9jbVwiLFxuXHRcdFwidm5kLm1zLXdvcmQudGVtcGxhdGUubWFjcm9lbmFibGVkLjEyXCI6IFwiZG90bVwiLFxuXHRcdFwidm5kLm1zLXdvcmtzXCI6IFtcblx0XHRcdFwid3BzXCIsXG5cdFx0XHRcIndrc1wiLFxuXHRcdFx0XCJ3Y21cIixcblx0XHRcdFwid2RiXCJcblx0XHRdLFxuXHRcdFwidm5kLm1zLXdwbFwiOiBcIndwbFwiLFxuXHRcdFwidm5kLm1zLXhwc2RvY3VtZW50XCI6IFwieHBzXCIsXG5cdFx0XCJ2bmQubXNlcVwiOiBcIm1zZXFcIixcblx0XHRcInZuZC5tdXNpY2lhblwiOiBcIm11c1wiLFxuXHRcdFwidm5kLm11dmVlLnN0eWxlXCI6IFwibXN0eVwiLFxuXHRcdFwidm5kLm15bmZjXCI6IFwidGFnbGV0XCIsXG5cdFx0XCJ2bmQubmV1cm9sYW5ndWFnZS5ubHVcIjogXCJubHVcIixcblx0XHRcInZuZC5uaXRmXCI6IFtcblx0XHRcdFwibnRmXCIsXG5cdFx0XHRcIm5pdGZcIlxuXHRcdF0sXG5cdFx0XCJ2bmQubm9ibGVuZXQtZGlyZWN0b3J5XCI6IFwibm5kXCIsXG5cdFx0XCJ2bmQubm9ibGVuZXQtc2VhbGVyXCI6IFwibm5zXCIsXG5cdFx0XCJ2bmQubm9ibGVuZXQtd2ViXCI6IFwibm53XCIsXG5cdFx0XCJ2bmQubm9raWEubi1nYWdlLmRhdGFcIjogXCJuZ2RhdFwiLFxuXHRcdFwidm5kLm5va2lhLm4tZ2FnZS5zeW1iaWFuLmluc3RhbGxcIjogXCJuLWdhZ2VcIixcblx0XHRcInZuZC5ub2tpYS5yYWRpby1wcmVzZXRcIjogXCJycHN0XCIsXG5cdFx0XCJ2bmQubm9raWEucmFkaW8tcHJlc2V0c1wiOiBcInJwc3NcIixcblx0XHRcInZuZC5ub3ZhZGlnbS5lZG1cIjogXCJlZG1cIixcblx0XHRcInZuZC5ub3ZhZGlnbS5lZHhcIjogXCJlZHhcIixcblx0XHRcInZuZC5ub3ZhZGlnbS5leHRcIjogXCJleHRcIixcblx0XHRcInZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuY2hhcnQtdGVtcGxhdGVcIjogXCJvdGNcIixcblx0XHRcInZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZm9ybXVsYS10ZW1wbGF0ZVwiOiBcIm9kZnRcIixcblx0XHRcInZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuaW1hZ2UtdGVtcGxhdGVcIjogXCJvdGlcIixcblx0XHRcInZuZC5vbHBjLXN1Z2FyXCI6IFwieG9cIixcblx0XHRcInZuZC5vbWEuZGQyK3htbFwiOiBcImRkMlwiLFxuXHRcdFwidm5kLm9wZW5vZmZpY2VvcmcuZXh0ZW5zaW9uXCI6IFwib3h0XCIsXG5cdFx0XCJ2bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuc2xpZGVcIjogXCJzbGR4XCIsXG5cdFx0XCJ2bmQub3NnZW8ubWFwZ3VpZGUucGFja2FnZVwiOiBcIm1ncFwiLFxuXHRcdFwidm5kLm9zZ2kuZHBcIjogXCJkcFwiLFxuXHRcdFwidm5kLm9zZ2kuc3Vic3lzdGVtXCI6IFwiZXNhXCIsXG5cdFx0XCJ2bmQucGFsbVwiOiBbXG5cdFx0XHRcInBkYlwiLFxuXHRcdFx0XCJwcWFcIixcblx0XHRcdFwib3ByY1wiXG5cdFx0XSxcblx0XHRcInZuZC5wYXdhYWZpbGVcIjogXCJwYXdcIixcblx0XHRcInZuZC5wZy5mb3JtYXRcIjogXCJzdHJcIixcblx0XHRcInZuZC5wZy5vc2FzbGlcIjogXCJlaTZcIixcblx0XHRcInZuZC5waWNzZWxcIjogXCJlZmlmXCIsXG5cdFx0XCJ2bmQucG1pLndpZGdldFwiOiBcIndnXCIsXG5cdFx0XCJ2bmQucG9ja2V0bGVhcm5cIjogXCJwbGZcIixcblx0XHRcInZuZC5wb3dlcmJ1aWxkZXI2XCI6IFwicGJkXCIsXG5cdFx0XCJ2bmQucHJldmlld3N5c3RlbXMuYm94XCI6IFwiYm94XCIsXG5cdFx0XCJ2bmQucHJvdGV1cy5tYWdhemluZVwiOiBcIm1nelwiLFxuXHRcdFwidm5kLnB1Ymxpc2hhcmUtZGVsdGEtdHJlZVwiOiBcInFwc1wiLFxuXHRcdFwidm5kLnB2aS5wdGlkMVwiOiBcInB0aWRcIixcblx0XHRcInZuZC5xdWFyay5xdWFya3hwcmVzc1wiOiBbXG5cdFx0XHRcInF4ZFwiLFxuXHRcdFx0XCJxeHRcIixcblx0XHRcdFwicXdkXCIsXG5cdFx0XHRcInF3dFwiLFxuXHRcdFx0XCJxeGxcIixcblx0XHRcdFwicXhiXCJcblx0XHRdLFxuXHRcdFwidm5kLnJlYWx2bmMuYmVkXCI6IFwiYmVkXCIsXG5cdFx0XCJ2bmQucmVjb3JkYXJlLm11c2ljeG1sXCI6IFwibXhsXCIsXG5cdFx0XCJ2bmQucmVjb3JkYXJlLm11c2ljeG1sK3htbFwiOiBcIm11c2ljeG1sXCIsXG5cdFx0XCJ2bmQucmlnLmNyeXB0b25vdGVcIjogXCJjcnlwdG9ub3RlXCIsXG5cdFx0XCJ2bmQucm4tcmVhbG1lZGlhXCI6IFwicm1cIixcblx0XHRcInZuZC5ybi1yZWFsbWVkaWEtdmJyXCI6IFwicm12YlwiLFxuXHRcdFwidm5kLnJvdXRlNjYubGluazY2K3htbFwiOiBcImxpbms2NlwiLFxuXHRcdFwidm5kLnNhaWxpbmd0cmFja2VyLnRyYWNrXCI6IFwic3RcIixcblx0XHRcInZuZC5zZWVtYWlsXCI6IFwic2VlXCIsXG5cdFx0XCJ2bmQuc2VtYVwiOiBcInNlbWFcIixcblx0XHRcInZuZC5zZW1kXCI6IFwic2VtZFwiLFxuXHRcdFwidm5kLnNlbWZcIjogXCJzZW1mXCIsXG5cdFx0XCJ2bmQuc2hhbmEuaW5mb3JtZWQuZm9ybWRhdGFcIjogXCJpZm1cIixcblx0XHRcInZuZC5zaGFuYS5pbmZvcm1lZC5mb3JtdGVtcGxhdGVcIjogXCJpdHBcIixcblx0XHRcInZuZC5zaGFuYS5pbmZvcm1lZC5pbnRlcmNoYW5nZVwiOiBcImlpZlwiLFxuXHRcdFwidm5kLnNoYW5hLmluZm9ybWVkLnBhY2thZ2VcIjogXCJpcGtcIixcblx0XHRcInZuZC5zaW10ZWNoLW1pbmRtYXBwZXJcIjogW1xuXHRcdFx0XCJ0d2RcIixcblx0XHRcdFwidHdkc1wiXG5cdFx0XSxcblx0XHRcInZuZC5zbWFydC50ZWFjaGVyXCI6IFwidGVhY2hlclwiLFxuXHRcdFwidm5kLnNvbGVudC5zZGttK3htbFwiOiBbXG5cdFx0XHRcInNka21cIixcblx0XHRcdFwic2RrZFwiXG5cdFx0XSxcblx0XHRcInZuZC5zcG90ZmlyZS5keHBcIjogXCJkeHBcIixcblx0XHRcInZuZC5zcG90ZmlyZS5zZnNcIjogXCJzZnNcIixcblx0XHRcInZuZC5zdGVwbWFuaWEucGFja2FnZVwiOiBcInNtemlwXCIsXG5cdFx0XCJ2bmQuc3RlcG1hbmlhLnN0ZXBjaGFydFwiOiBcInNtXCIsXG5cdFx0XCJ2bmQuc3VzLWNhbGVuZGFyXCI6IFtcblx0XHRcdFwic3VzXCIsXG5cdFx0XHRcInN1c3BcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuc3ZkXCI6IFwic3ZkXCIsXG5cdFx0XCJ2bmQuc3luY21sK3htbFwiOiBcInhzbVwiLFxuXHRcdFwidm5kLnN5bmNtbC5kbSt3YnhtbFwiOiBcImJkbVwiLFxuXHRcdFwidm5kLnN5bmNtbC5kbSt4bWxcIjogXCJ4ZG1cIixcblx0XHRcInZuZC50YW8uaW50ZW50LW1vZHVsZS1hcmNoaXZlXCI6IFwidGFvXCIsXG5cdFx0XCJ2bmQudGNwZHVtcC5wY2FwXCI6IFtcblx0XHRcdFwicGNhcFwiLFxuXHRcdFx0XCJjYXBcIixcblx0XHRcdFwiZG1wXCJcblx0XHRdLFxuXHRcdFwidm5kLnRtb2JpbGUtbGl2ZXR2XCI6IFwidG1vXCIsXG5cdFx0XCJ2bmQudHJpZC50cHRcIjogXCJ0cHRcIixcblx0XHRcInZuZC50cmlzY2FwZS5teHNcIjogXCJteHNcIixcblx0XHRcInZuZC50cnVlYXBwXCI6IFwidHJhXCIsXG5cdFx0XCJ2bmQudWZkbFwiOiBbXG5cdFx0XHRcInVmZFwiLFxuXHRcdFx0XCJ1ZmRsXCJcblx0XHRdLFxuXHRcdFwidm5kLnVpcS50aGVtZVwiOiBcInV0elwiLFxuXHRcdFwidm5kLnVtYWppblwiOiBcInVtalwiLFxuXHRcdFwidm5kLnVuaXR5XCI6IFwidW5pdHl3ZWJcIixcblx0XHRcInZuZC51b21sK3htbFwiOiBcInVvbWxcIixcblx0XHRcInZuZC52Y3hcIjogXCJ2Y3hcIixcblx0XHRcInZuZC52aXNpb25hcnlcIjogXCJ2aXNcIixcblx0XHRcInZuZC52c2ZcIjogXCJ2c2ZcIixcblx0XHRcInZuZC53ZWJ0dXJib1wiOiBcInd0YlwiLFxuXHRcdFwidm5kLndvbGZyYW0ucGxheWVyXCI6IFwibmJwXCIsXG5cdFx0XCJ2bmQud3FkXCI6IFwid3FkXCIsXG5cdFx0XCJ2bmQud3Quc3RmXCI6IFwic3RmXCIsXG5cdFx0XCJ2bmQueGFyYVwiOiBcInhhclwiLFxuXHRcdFwidm5kLnhmZGxcIjogXCJ4ZmRsXCIsXG5cdFx0XCJ2bmQueWFtYWhhLmh2LWRpY1wiOiBcImh2ZFwiLFxuXHRcdFwidm5kLnlhbWFoYS5odi1zY3JpcHRcIjogXCJodnNcIixcblx0XHRcInZuZC55YW1haGEuaHYtdm9pY2VcIjogXCJodnBcIixcblx0XHRcInZuZC55YW1haGEub3BlbnNjb3JlZm9ybWF0XCI6IFwib3NmXCIsXG5cdFx0XCJ2bmQueWFtYWhhLm9wZW5zY29yZWZvcm1hdC5vc2ZwdmcreG1sXCI6IFwib3NmcHZnXCIsXG5cdFx0XCJ2bmQueWFtYWhhLnNtYWYtYXVkaW9cIjogXCJzYWZcIixcblx0XHRcInZuZC55YW1haGEuc21hZi1waHJhc2VcIjogXCJzcGZcIixcblx0XHRcInZuZC55ZWxsb3dyaXZlci1jdXN0b20tbWVudVwiOiBcImNtcFwiLFxuXHRcdFwidm5kLnp1bFwiOiBbXG5cdFx0XHRcInppclwiLFxuXHRcdFx0XCJ6aXJ6XCJcblx0XHRdLFxuXHRcdFwidm5kLnp6YXp6LmRlY2sreG1sXCI6IFwiemF6XCIsXG5cdFx0XCJ2b2ljZXhtbCt4bWxcIjogXCJ2eG1sXCIsXG5cdFx0XCJ3aWRnZXRcIjogXCJ3Z3RcIixcblx0XHRcIndpbmhscFwiOiBcImhscFwiLFxuXHRcdFwid3NkbCt4bWxcIjogXCJ3c2RsXCIsXG5cdFx0XCJ3c3BvbGljeSt4bWxcIjogXCJ3c3BvbGljeVwiLFxuXHRcdFwieC1hY2UtY29tcHJlc3NlZFwiOiBcImFjZVwiLFxuXHRcdFwieC1hdXRob3J3YXJlLWJpblwiOiBbXG5cdFx0XHRcImFhYlwiLFxuXHRcdFx0XCJ4MzJcIixcblx0XHRcdFwidTMyXCIsXG5cdFx0XHRcInZveFwiXG5cdFx0XSxcblx0XHRcIngtYXV0aG9yd2FyZS1tYXBcIjogXCJhYW1cIixcblx0XHRcIngtYXV0aG9yd2FyZS1zZWdcIjogXCJhYXNcIixcblx0XHRcIngtYmxvcmJcIjogW1xuXHRcdFx0XCJibGJcIixcblx0XHRcdFwiYmxvcmJcIlxuXHRcdF0sXG5cdFx0XCJ4LWJ6aXBcIjogXCJielwiLFxuXHRcdFwieC1iemlwMlwiOiBbXG5cdFx0XHRcImJ6MlwiLFxuXHRcdFx0XCJib3pcIlxuXHRcdF0sXG5cdFx0XCJ4LWNmcy1jb21wcmVzc2VkXCI6IFwiY2ZzXCIsXG5cdFx0XCJ4LWNoYXRcIjogXCJjaGF0XCIsXG5cdFx0XCJ4LWNvbmZlcmVuY2VcIjogXCJuc2NcIixcblx0XHRcIngtZGdjLWNvbXByZXNzZWRcIjogXCJkZ2NcIixcblx0XHRcIngtZHRibmN4K3htbFwiOiBcIm5jeFwiLFxuXHRcdFwieC1kdGJvb2sreG1sXCI6IFwiZHRiXCIsXG5cdFx0XCJ4LWR0YnJlc291cmNlK3htbFwiOiBcInJlc1wiLFxuXHRcdFwieC1ldmFcIjogXCJldmFcIixcblx0XHRcIngtZm9udC1iZGZcIjogXCJiZGZcIixcblx0XHRcIngtZm9udC1naG9zdHNjcmlwdFwiOiBcImdzZlwiLFxuXHRcdFwieC1mb250LWxpbnV4LXBzZlwiOiBcInBzZlwiLFxuXHRcdFwieC1mb250LXBjZlwiOiBcInBjZlwiLFxuXHRcdFwieC1mb250LXNuZlwiOiBcInNuZlwiLFxuXHRcdFwieC1mb250LXR0ZlwiOiBbXG5cdFx0XHRcInR0ZlwiLFxuXHRcdFx0XCJ0dGNcIlxuXHRcdF0sXG5cdFx0XCJ4LWZvbnQtdHlwZTFcIjogW1xuXHRcdFx0XCJwZmFcIixcblx0XHRcdFwicGZiXCIsXG5cdFx0XHRcInBmbVwiLFxuXHRcdFx0XCJhZm1cIlxuXHRcdF0sXG5cdFx0XCJ4LWZyZWVhcmNcIjogXCJhcmNcIixcblx0XHRcIngtZ2NhLWNvbXByZXNzZWRcIjogXCJnY2FcIixcblx0XHRcIngtZ2x1bHhcIjogXCJ1bHhcIixcblx0XHRcIngtZ3JhbXBzLXhtbFwiOiBcImdyYW1wc1wiLFxuXHRcdFwieC1pbnN0YWxsLWluc3RydWN0aW9uc1wiOiBcImluc3RhbGxcIixcblx0XHRcIngtbHpoLWNvbXByZXNzZWRcIjogW1xuXHRcdFx0XCJsemhcIixcblx0XHRcdFwibGhhXCJcblx0XHRdLFxuXHRcdFwieC1taWVcIjogXCJtaWVcIixcblx0XHRcIngtbW9iaXBvY2tldC1lYm9va1wiOiBbXG5cdFx0XHRcInByY1wiLFxuXHRcdFx0XCJtb2JpXCJcblx0XHRdLFxuXHRcdFwieC1tcy1hcHBsaWNhdGlvblwiOiBcImFwcGxpY2F0aW9uXCIsXG5cdFx0XCJ4LW1zLXNob3J0Y3V0XCI6IFwibG5rXCIsXG5cdFx0XCJ4LW1zLXhiYXBcIjogXCJ4YmFwXCIsXG5cdFx0XCJ4LW1zYmluZGVyXCI6IFwib2JkXCIsXG5cdFx0XCJ4LW1zY2FyZGZpbGVcIjogXCJjcmRcIixcblx0XHRcIngtbXNjbGlwXCI6IFwiY2xwXCIsXG5cdFx0XCJhcHBsaWNhdGlvbi94LW1zLWluc3RhbGxlclwiOiBcIm1zaVwiLFxuXHRcdFwieC1tc21lZGlhdmlld1wiOiBbXG5cdFx0XHRcIm12YlwiLFxuXHRcdFx0XCJtMTNcIixcblx0XHRcdFwibTE0XCJcblx0XHRdLFxuXHRcdFwieC1tc21ldGFmaWxlXCI6IFtcblx0XHRcdFwid21mXCIsXG5cdFx0XHRcIndtelwiLFxuXHRcdFx0XCJlbWZcIixcblx0XHRcdFwiZW16XCJcblx0XHRdLFxuXHRcdFwieC1tc21vbmV5XCI6IFwibW55XCIsXG5cdFx0XCJ4LW1zcHVibGlzaGVyXCI6IFwicHViXCIsXG5cdFx0XCJ4LW1zc2NoZWR1bGVcIjogXCJzY2RcIixcblx0XHRcIngtbXN0ZXJtaW5hbFwiOiBcInRybVwiLFxuXHRcdFwieC1tc3dyaXRlXCI6IFwid3JpXCIsXG5cdFx0XCJ4LW56YlwiOiBcIm56YlwiLFxuXHRcdFwieC1wa2NzMTJcIjogW1xuXHRcdFx0XCJwMTJcIixcblx0XHRcdFwicGZ4XCJcblx0XHRdLFxuXHRcdFwieC1wa2NzNy1jZXJ0aWZpY2F0ZXNcIjogW1xuXHRcdFx0XCJwN2JcIixcblx0XHRcdFwic3BjXCJcblx0XHRdLFxuXHRcdFwieC1yZXNlYXJjaC1pbmZvLXN5c3RlbXNcIjogXCJyaXNcIixcblx0XHRcIngtc2lsdmVybGlnaHQtYXBwXCI6IFwieGFwXCIsXG5cdFx0XCJ4LXNxbFwiOiBcInNxbFwiLFxuXHRcdFwieC1zdHVmZml0eFwiOiBcInNpdHhcIixcblx0XHRcIngtc3VicmlwXCI6IFwic3J0XCIsXG5cdFx0XCJ4LXQzdm0taW1hZ2VcIjogXCJ0M1wiLFxuXHRcdFwieC10ZXgtdGZtXCI6IFwidGZtXCIsXG5cdFx0XCJ4LXRnaWZcIjogXCJvYmpcIixcblx0XHRcIngteGxpZmYreG1sXCI6IFwieGxmXCIsXG5cdFx0XCJ4LXh6XCI6IFwieHpcIixcblx0XHRcIngtem1hY2hpbmVcIjogW1xuXHRcdFx0XCJ6MVwiLFxuXHRcdFx0XCJ6MlwiLFxuXHRcdFx0XCJ6M1wiLFxuXHRcdFx0XCJ6NFwiLFxuXHRcdFx0XCJ6NVwiLFxuXHRcdFx0XCJ6NlwiLFxuXHRcdFx0XCJ6N1wiLFxuXHRcdFx0XCJ6OFwiXG5cdFx0XSxcblx0XHRcInhhbWwreG1sXCI6IFwieGFtbFwiLFxuXHRcdFwieGNhcC1kaWZmK3htbFwiOiBcInhkZlwiLFxuXHRcdFwieGVuYyt4bWxcIjogXCJ4ZW5jXCIsXG5cdFx0XCJ4bWwtZHRkXCI6IFwiZHRkXCIsXG5cdFx0XCJ4b3AreG1sXCI6IFwieG9wXCIsXG5cdFx0XCJ4cHJvYyt4bWxcIjogXCJ4cGxcIixcblx0XHRcInhzbHQreG1sXCI6IFwieHNsdFwiLFxuXHRcdFwieHYreG1sXCI6IFtcblx0XHRcdFwibXhtbFwiLFxuXHRcdFx0XCJ4aHZtbFwiLFxuXHRcdFx0XCJ4dm1sXCIsXG5cdFx0XHRcInh2bVwiXG5cdFx0XSxcblx0XHRcInlhbmdcIjogXCJ5YW5nXCIsXG5cdFx0XCJ5aW4reG1sXCI6IFwieWluXCIsXG5cdFx0XCJlbnZveVwiOiBcImV2eVwiLFxuXHRcdFwiZnJhY3RhbHNcIjogXCJmaWZcIixcblx0XHRcImludGVybmV0LXByb3BlcnR5LXN0cmVhbVwiOiBcImFjeFwiLFxuXHRcdFwib2xlc2NyaXB0XCI6IFwiYXhzXCIsXG5cdFx0XCJ2bmQubXMtb3V0bG9va1wiOiBcIm1zZ1wiLFxuXHRcdFwidm5kLm1zLXBraWNlcnRzdG9yZVwiOiBcInNzdFwiLFxuXHRcdFwieC1jb21wcmVzc1wiOiBcInpcIixcblx0XHRcIngtcGVyZm1vblwiOiBbXG5cdFx0XHRcInBtYVwiLFxuXHRcdFx0XCJwbWNcIixcblx0XHRcdFwicG1yXCIsXG5cdFx0XHRcInBtd1wiXG5cdFx0XSxcblx0XHRcInluZC5tcy1wa2lwa29cIjogXCJwa29cIixcblx0XHRcImd6aXBcIjogW1xuXHRcdFx0XCJnelwiLFxuXHRcdFx0XCJ0Z3pcIlxuXHRcdF0sXG5cdFx0XCJzbWlsK3htbFwiOiBbXG5cdFx0XHRcInNtaVwiLFxuXHRcdFx0XCJzbWlsXCJcblx0XHRdLFxuXHRcdFwidm5kLmRlYmlhbi5iaW5hcnktcGFja2FnZVwiOiBbXG5cdFx0XHRcImRlYlwiLFxuXHRcdFx0XCJ1ZGViXCJcblx0XHRdLFxuXHRcdFwidm5kLmh6bi0zZC1jcm9zc3dvcmRcIjogXCJ4M2RcIixcblx0XHRcInZuZC5zcWxpdGUzXCI6IFtcblx0XHRcdFwiZGJcIixcblx0XHRcdFwic3FsaXRlXCIsXG5cdFx0XHRcInNxbGl0ZTNcIixcblx0XHRcdFwiZGItd2FsXCIsXG5cdFx0XHRcInNxbGl0ZS13YWxcIixcblx0XHRcdFwiZGItc2htXCIsXG5cdFx0XHRcInNxbGl0ZS1zaG1cIlxuXHRcdF0sXG5cdFx0XCJ2bmQud2FwLnNpY1wiOiBcInNpY1wiLFxuXHRcdFwidm5kLndhcC5zbGNcIjogXCJzbGNcIixcblx0XHRcIngta3JpdGFcIjogW1xuXHRcdFx0XCJrcmFcIixcblx0XHRcdFwia3J6XCJcblx0XHRdLFxuXHRcdFwieC1wZXJsXCI6IFtcblx0XHRcdFwicG1cIixcblx0XHRcdFwicGxcIlxuXHRcdF0sXG5cdFx0XCJ5YW1sXCI6IFtcblx0XHRcdFwieWFtbFwiLFxuXHRcdFx0XCJ5bWxcIlxuXHRcdF1cblx0fSxcblx0XCJhdWRpb1wiOiB7XG5cdFx0XCJhbXJcIjogXCJhbXJcIixcblx0XHRcImFtci13YlwiOiBcImF3YlwiLFxuXHRcdFwiYW5ub2RleFwiOiBcImF4YVwiLFxuXHRcdFwiYmFzaWNcIjogW1xuXHRcdFx0XCJhdVwiLFxuXHRcdFx0XCJzbmRcIlxuXHRcdF0sXG5cdFx0XCJmbGFjXCI6IFwiZmxhY1wiLFxuXHRcdFwibWlkaVwiOiBbXG5cdFx0XHRcIm1pZFwiLFxuXHRcdFx0XCJtaWRpXCIsXG5cdFx0XHRcImthclwiLFxuXHRcdFx0XCJybWlcIlxuXHRcdF0sXG5cdFx0XCJtcGVnXCI6IFtcblx0XHRcdFwibXBnYVwiLFxuXHRcdFx0XCJtcGVnYVwiLFxuXHRcdFx0XCJtcDNcIixcblx0XHRcdFwibTRhXCIsXG5cdFx0XHRcIm1wMmFcIixcblx0XHRcdFwibTJhXCIsXG5cdFx0XHRcIm0zYVwiXG5cdFx0XSxcblx0XHRcIm1wZWd1cmxcIjogXCJtM3VcIixcblx0XHRcIm9nZ1wiOiBbXG5cdFx0XHRcIm9nYVwiLFxuXHRcdFx0XCJvZ2dcIixcblx0XHRcdFwic3B4XCJcblx0XHRdLFxuXHRcdFwicHJzLnNpZFwiOiBcInNpZFwiLFxuXHRcdFwieC1haWZmXCI6IFwiYWlmY1wiLFxuXHRcdFwieC1nc21cIjogXCJnc21cIixcblx0XHRcIngtbXMtd21hXCI6IFwid21hXCIsXG5cdFx0XCJ4LW1zLXdheFwiOiBcIndheFwiLFxuXHRcdFwieC1wbi1yZWFsYXVkaW9cIjogXCJyYW1cIixcblx0XHRcIngtcmVhbGF1ZGlvXCI6IFwicmFcIixcblx0XHRcIngtc2QyXCI6IFwic2QyXCIsXG5cdFx0XCJhZHBjbVwiOiBcImFkcFwiLFxuXHRcdFwibXA0XCI6IFwibXA0YVwiLFxuXHRcdFwiczNtXCI6IFwiczNtXCIsXG5cdFx0XCJzaWxrXCI6IFwic2lsXCIsXG5cdFx0XCJ2bmQuZGVjZS5hdWRpb1wiOiBbXG5cdFx0XHRcInV2YVwiLFxuXHRcdFx0XCJ1dnZhXCJcblx0XHRdLFxuXHRcdFwidm5kLmRpZ2l0YWwtd2luZHNcIjogXCJlb2xcIixcblx0XHRcInZuZC5kcmFcIjogXCJkcmFcIixcblx0XHRcInZuZC5kdHNcIjogXCJkdHNcIixcblx0XHRcInZuZC5kdHMuaGRcIjogXCJkdHNoZFwiLFxuXHRcdFwidm5kLmx1Y2VudC52b2ljZVwiOiBcImx2cFwiLFxuXHRcdFwidm5kLm1zLXBsYXlyZWFkeS5tZWRpYS5weWFcIjogXCJweWFcIixcblx0XHRcInZuZC5udWVyYS5lY2VscDQ4MDBcIjogXCJlY2VscDQ4MDBcIixcblx0XHRcInZuZC5udWVyYS5lY2VscDc0NzBcIjogXCJlY2VscDc0NzBcIixcblx0XHRcInZuZC5udWVyYS5lY2VscDk2MDBcIjogXCJlY2VscDk2MDBcIixcblx0XHRcInZuZC5yaXBcIjogXCJyaXBcIixcblx0XHRcIndlYm1cIjogXCJ3ZWJhXCIsXG5cdFx0XCJ4LWNhZlwiOiBcImNhZlwiLFxuXHRcdFwieC1tYXRyb3NrYVwiOiBcIm1rYVwiLFxuXHRcdFwieC1wbi1yZWFsYXVkaW8tcGx1Z2luXCI6IFwicm1wXCIsXG5cdFx0XCJ4bVwiOiBcInhtXCIsXG5cdFx0XCJhYWNcIjogXCJhYWNcIixcblx0XHRcImFpZmZcIjogW1xuXHRcdFx0XCJhaWZmXCIsXG5cdFx0XHRcImFpZlwiLFxuXHRcdFx0XCJhZmZcIlxuXHRcdF0sXG5cdFx0XCJvcHVzXCI6IFwib3B1c1wiLFxuXHRcdFwid2F2XCI6IFwid2F2XCJcblx0fSxcblx0XCJjaGVtaWNhbFwiOiB7XG5cdFx0XCJ4LWFsY2hlbXlcIjogXCJhbGNcIixcblx0XHRcIngtY2FjaGVcIjogW1xuXHRcdFx0XCJjYWNcIixcblx0XHRcdFwiY2FjaGVcIlxuXHRcdF0sXG5cdFx0XCJ4LWNhY2hlLWNzZlwiOiBcImNzZlwiLFxuXHRcdFwieC1jYWN0dnMtYmluYXJ5XCI6IFtcblx0XHRcdFwiY2JpblwiLFxuXHRcdFx0XCJjYXNjaWlcIixcblx0XHRcdFwiY3RhYlwiXG5cdFx0XSxcblx0XHRcIngtY2R4XCI6IFwiY2R4XCIsXG5cdFx0XCJ4LWNoZW0zZFwiOiBcImMzZFwiLFxuXHRcdFwieC1jaWZcIjogXCJjaWZcIixcblx0XHRcIngtY21kZlwiOiBcImNtZGZcIixcblx0XHRcIngtY21sXCI6IFwiY21sXCIsXG5cdFx0XCJ4LWNvbXBhc3NcIjogXCJjcGFcIixcblx0XHRcIngtY3Jvc3NmaXJlXCI6IFwiYnNkXCIsXG5cdFx0XCJ4LWNzbWxcIjogW1xuXHRcdFx0XCJjc21sXCIsXG5cdFx0XHRcImNzbVwiXG5cdFx0XSxcblx0XHRcIngtY3R4XCI6IFwiY3R4XCIsXG5cdFx0XCJ4LWN4ZlwiOiBbXG5cdFx0XHRcImN4ZlwiLFxuXHRcdFx0XCJjZWZcIlxuXHRcdF0sXG5cdFx0XCJ4LWVtYmwtZGwtbnVjbGVvdGlkZVwiOiBbXG5cdFx0XHRcImVtYlwiLFxuXHRcdFx0XCJlbWJsXCJcblx0XHRdLFxuXHRcdFwieC1nYW1lc3MtaW5wdXRcIjogW1xuXHRcdFx0XCJpbnBcIixcblx0XHRcdFwiZ2FtXCIsXG5cdFx0XHRcImdhbWluXCJcblx0XHRdLFxuXHRcdFwieC1nYXVzc2lhbi1jaGVja3BvaW50XCI6IFtcblx0XHRcdFwiZmNoXCIsXG5cdFx0XHRcImZjaGtcIlxuXHRcdF0sXG5cdFx0XCJ4LWdhdXNzaWFuLWN1YmVcIjogXCJjdWJcIixcblx0XHRcIngtZ2F1c3NpYW4taW5wdXRcIjogW1xuXHRcdFx0XCJnYXVcIixcblx0XHRcdFwiZ2pjXCIsXG5cdFx0XHRcImdqZlwiXG5cdFx0XSxcblx0XHRcIngtZ2F1c3NpYW4tbG9nXCI6IFwiZ2FsXCIsXG5cdFx0XCJ4LWdjZzgtc2VxdWVuY2VcIjogXCJnY2dcIixcblx0XHRcIngtZ2VuYmFua1wiOiBcImdlblwiLFxuXHRcdFwieC1oaW5cIjogXCJoaW5cIixcblx0XHRcIngtaXNvc3RhclwiOiBbXG5cdFx0XHRcImlzdHJcIixcblx0XHRcdFwiaXN0XCJcblx0XHRdLFxuXHRcdFwieC1qY2FtcC1keFwiOiBbXG5cdFx0XHRcImpkeFwiLFxuXHRcdFx0XCJkeFwiXG5cdFx0XSxcblx0XHRcIngta2luZW1hZ2VcIjogXCJraW5cIixcblx0XHRcIngtbWFjbW9sZWN1bGVcIjogXCJtY21cIixcblx0XHRcIngtbWFjcm9tb2RlbC1pbnB1dFwiOiBcIm1tb2RcIixcblx0XHRcIngtbWRsLW1vbGZpbGVcIjogXCJtb2xcIixcblx0XHRcIngtbWRsLXJkZmlsZVwiOiBcInJkXCIsXG5cdFx0XCJ4LW1kbC1yeG5maWxlXCI6IFwicnhuXCIsXG5cdFx0XCJ4LW1kbC1zZGZpbGVcIjogXCJzZFwiLFxuXHRcdFwieC1tZGwtdGdmXCI6IFwidGdmXCIsXG5cdFx0XCJ4LW1tY2lmXCI6IFwibWNpZlwiLFxuXHRcdFwieC1tb2wyXCI6IFwibW9sMlwiLFxuXHRcdFwieC1tb2xjb25uLVpcIjogXCJiXCIsXG5cdFx0XCJ4LW1vcGFjLWdyYXBoXCI6IFwiZ3B0XCIsXG5cdFx0XCJ4LW1vcGFjLWlucHV0XCI6IFtcblx0XHRcdFwibW9wXCIsXG5cdFx0XHRcIm1vcGNydFwiLFxuXHRcdFx0XCJ6bXRcIlxuXHRcdF0sXG5cdFx0XCJ4LW1vcGFjLW91dFwiOiBcIm1vb1wiLFxuXHRcdFwieC1uY2JpLWFzbjFcIjogXCJhc25cIixcblx0XHRcIngtbmNiaS1hc24xLWFzY2lpXCI6IFtcblx0XHRcdFwicHJ0XCIsXG5cdFx0XHRcImVudFwiXG5cdFx0XSxcblx0XHRcIngtbmNiaS1hc24xLWJpbmFyeVwiOiBcInZhbFwiLFxuXHRcdFwieC1yb3NkYWxcIjogXCJyb3NcIixcblx0XHRcIngtc3dpc3Nwcm90XCI6IFwic3dcIixcblx0XHRcIngtdmFtYXMtaXNvMTQ5NzZcIjogXCJ2bXNcIixcblx0XHRcIngtdm1kXCI6IFwidm1kXCIsXG5cdFx0XCJ4LXh0ZWxcIjogXCJ4dGVsXCIsXG5cdFx0XCJ4LXh5elwiOiBcInh5elwiXG5cdH0sXG5cdFwiZm9udFwiOiB7XG5cdFx0XCJvdGZcIjogXCJvdGZcIixcblx0XHRcIndvZmZcIjogXCJ3b2ZmXCIsXG5cdFx0XCJ3b2ZmMlwiOiBcIndvZmYyXCJcblx0fSxcblx0XCJpbWFnZVwiOiB7XG5cdFx0XCJnaWZcIjogXCJnaWZcIixcblx0XHRcImllZlwiOiBcImllZlwiLFxuXHRcdFwianBlZ1wiOiBbXG5cdFx0XHRcImpwZWdcIixcblx0XHRcdFwianBnXCIsXG5cdFx0XHRcImpwZVwiLFxuXHRcdFx0XCJqZmlmXCIsXG5cdFx0XHRcImpmaWYtdGJubFwiLFxuXHRcdFx0XCJqaWZcIlxuXHRcdF0sXG5cdFx0XCJwY3hcIjogXCJwY3hcIixcblx0XHRcInBuZ1wiOiBcInBuZ1wiLFxuXHRcdFwic3ZnK3htbFwiOiBbXG5cdFx0XHRcInN2Z1wiLFxuXHRcdFx0XCJzdmd6XCJcblx0XHRdLFxuXHRcdFwidGlmZlwiOiBbXG5cdFx0XHRcInRpZmZcIixcblx0XHRcdFwidGlmXCJcblx0XHRdLFxuXHRcdFwidm5kLmRqdnVcIjogW1xuXHRcdFx0XCJkanZ1XCIsXG5cdFx0XHRcImRqdlwiXG5cdFx0XSxcblx0XHRcInZuZC53YXAud2JtcFwiOiBcIndibXBcIixcblx0XHRcIngtY2Fub24tY3IyXCI6IFwiY3IyXCIsXG5cdFx0XCJ4LWNhbm9uLWNyd1wiOiBcImNyd1wiLFxuXHRcdFwieC1jbXUtcmFzdGVyXCI6IFwicmFzXCIsXG5cdFx0XCJ4LWNvcmVsZHJhd1wiOiBcImNkclwiLFxuXHRcdFwieC1jb3JlbGRyYXdwYXR0ZXJuXCI6IFwicGF0XCIsXG5cdFx0XCJ4LWNvcmVsZHJhd3RlbXBsYXRlXCI6IFwiY2R0XCIsXG5cdFx0XCJ4LWNvcmVscGhvdG9wYWludFwiOiBcImNwdFwiLFxuXHRcdFwieC1lcHNvbi1lcmZcIjogXCJlcmZcIixcblx0XHRcIngtaWNvblwiOiBcImljb1wiLFxuXHRcdFwieC1qZ1wiOiBcImFydFwiLFxuXHRcdFwieC1qbmdcIjogXCJqbmdcIixcblx0XHRcIngtbmlrb24tbmVmXCI6IFwibmVmXCIsXG5cdFx0XCJ4LW9seW1wdXMtb3JmXCI6IFwib3JmXCIsXG5cdFx0XCJ4LXBvcnRhYmxlLWFueW1hcFwiOiBcInBubVwiLFxuXHRcdFwieC1wb3J0YWJsZS1iaXRtYXBcIjogXCJwYm1cIixcblx0XHRcIngtcG9ydGFibGUtZ3JheW1hcFwiOiBcInBnbVwiLFxuXHRcdFwieC1wb3J0YWJsZS1waXhtYXBcIjogXCJwcG1cIixcblx0XHRcIngtcmdiXCI6IFwicmdiXCIsXG5cdFx0XCJ4LXhiaXRtYXBcIjogXCJ4Ym1cIixcblx0XHRcIngteHBpeG1hcFwiOiBcInhwbVwiLFxuXHRcdFwieC14d2luZG93ZHVtcFwiOiBcInh3ZFwiLFxuXHRcdFwiYm1wXCI6IFwiYm1wXCIsXG5cdFx0XCJjZ21cIjogXCJjZ21cIixcblx0XHRcImczZmF4XCI6IFwiZzNcIixcblx0XHRcImt0eFwiOiBcImt0eFwiLFxuXHRcdFwicHJzLmJ0aWZcIjogXCJidGlmXCIsXG5cdFx0XCJzZ2lcIjogXCJzZ2lcIixcblx0XHRcInZuZC5kZWNlLmdyYXBoaWNcIjogW1xuXHRcdFx0XCJ1dmlcIixcblx0XHRcdFwidXZ2aVwiLFxuXHRcdFx0XCJ1dmdcIixcblx0XHRcdFwidXZ2Z1wiXG5cdFx0XSxcblx0XHRcInZuZC5kd2dcIjogXCJkd2dcIixcblx0XHRcInZuZC5keGZcIjogXCJkeGZcIixcblx0XHRcInZuZC5mYXN0Ymlkc2hlZXRcIjogXCJmYnNcIixcblx0XHRcInZuZC5mcHhcIjogXCJmcHhcIixcblx0XHRcInZuZC5mc3RcIjogXCJmc3RcIixcblx0XHRcInZuZC5mdWppeGVyb3guZWRtaWNzLW1tclwiOiBcIm1tclwiLFxuXHRcdFwidm5kLmZ1aml4ZXJveC5lZG1pY3MtcmxjXCI6IFwicmxjXCIsXG5cdFx0XCJ2bmQubXMtbW9kaVwiOiBcIm1kaVwiLFxuXHRcdFwidm5kLm1zLXBob3RvXCI6IFwid2RwXCIsXG5cdFx0XCJ2bmQubmV0LWZweFwiOiBcIm5weFwiLFxuXHRcdFwidm5kLnhpZmZcIjogXCJ4aWZcIixcblx0XHRcIndlYnBcIjogXCJ3ZWJwXCIsXG5cdFx0XCJ4LTNkc1wiOiBcIjNkc1wiLFxuXHRcdFwieC1jbXhcIjogXCJjbXhcIixcblx0XHRcIngtZnJlZWhhbmRcIjogW1xuXHRcdFx0XCJmaFwiLFxuXHRcdFx0XCJmaGNcIixcblx0XHRcdFwiZmg0XCIsXG5cdFx0XHRcImZoNVwiLFxuXHRcdFx0XCJmaDdcIlxuXHRcdF0sXG5cdFx0XCJ4LXBpY3RcIjogW1xuXHRcdFx0XCJwaWNcIixcblx0XHRcdFwicGN0XCJcblx0XHRdLFxuXHRcdFwieC10Z2FcIjogXCJ0Z2FcIixcblx0XHRcImNpcy1jb2RcIjogXCJjb2RcIixcblx0XHRcImF2aWZcIjogXCJhdmlmc1wiLFxuXHRcdFwiaGVpY1wiOiBbXG5cdFx0XHRcImhlaWZcIixcblx0XHRcdFwiaGVpY1wiXG5cdFx0XSxcblx0XHRcInBqcGVnXCI6IFtcblx0XHRcdFwicGpwZ1wiXG5cdFx0XSxcblx0XHRcInZuZC5hZG9iZS5waG90b3Nob3BcIjogXCJwc2RcIixcblx0XHRcIngtYWRvYmUtZG5nXCI6IFwiZG5nXCIsXG5cdFx0XCJ4LWZ1amktcmFmXCI6IFwicmFmXCIsXG5cdFx0XCJ4LWljbnNcIjogXCJpY25zXCIsXG5cdFx0XCJ4LWtvZGFrLWRjclwiOiBcImRjclwiLFxuXHRcdFwieC1rb2Rhay1rMjVcIjogXCJrMjVcIixcblx0XHRcIngta29kYWsta2RjXCI6IFwia2RjXCIsXG5cdFx0XCJ4LW1pbm9sdGEtbXJ3XCI6IFwibXJ3XCIsXG5cdFx0XCJ4LXBhbmFzb25pYy1yYXdcIjogW1xuXHRcdFx0XCJyYXdcIixcblx0XHRcdFwicncyXCIsXG5cdFx0XHRcInJ3bFwiXG5cdFx0XSxcblx0XHRcIngtcGVudGF4LXBlZlwiOiBbXG5cdFx0XHRcInBlZlwiLFxuXHRcdFx0XCJwdHhcIlxuXHRcdF0sXG5cdFx0XCJ4LXNpZ21hLXgzZlwiOiBcIngzZlwiLFxuXHRcdFwieC1zb255LWFyd1wiOiBcImFyd1wiLFxuXHRcdFwieC1zb255LXNyMlwiOiBcInNyMlwiLFxuXHRcdFwieC1zb255LXNyZlwiOiBcInNyZlwiXG5cdH0sXG5cdFwibWVzc2FnZVwiOiB7XG5cdFx0XCJyZmM4MjJcIjogW1xuXHRcdFx0XCJlbWxcIixcblx0XHRcdFwibWltZVwiLFxuXHRcdFx0XCJtaHRcIixcblx0XHRcdFwibWh0bWxcIixcblx0XHRcdFwibndzXCJcblx0XHRdXG5cdH0sXG5cdFwibW9kZWxcIjoge1xuXHRcdFwiaWdlc1wiOiBbXG5cdFx0XHRcImlnc1wiLFxuXHRcdFx0XCJpZ2VzXCJcblx0XHRdLFxuXHRcdFwibWVzaFwiOiBbXG5cdFx0XHRcIm1zaFwiLFxuXHRcdFx0XCJtZXNoXCIsXG5cdFx0XHRcInNpbG9cIlxuXHRcdF0sXG5cdFx0XCJ2cm1sXCI6IFtcblx0XHRcdFwid3JsXCIsXG5cdFx0XHRcInZybWxcIlxuXHRcdF0sXG5cdFx0XCJ4M2QrdnJtbFwiOiBbXG5cdFx0XHRcIngzZHZcIixcblx0XHRcdFwieDNkdnpcIlxuXHRcdF0sXG5cdFx0XCJ4M2QreG1sXCI6IFwieDNkelwiLFxuXHRcdFwieDNkK2JpbmFyeVwiOiBbXG5cdFx0XHRcIngzZGJcIixcblx0XHRcdFwieDNkYnpcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuY29sbGFkYSt4bWxcIjogXCJkYWVcIixcblx0XHRcInZuZC5kd2ZcIjogXCJkd2ZcIixcblx0XHRcInZuZC5nZGxcIjogXCJnZGxcIixcblx0XHRcInZuZC5ndHdcIjogXCJndHdcIixcblx0XHRcInZuZC5tdHNcIjogXCJtdHNcIixcblx0XHRcInZuZC51c2R6K3ppcFwiOiBcInVzZHpcIixcblx0XHRcInZuZC52dHVcIjogXCJ2dHVcIlxuXHR9LFxuXHRcInRleHRcIjoge1xuXHRcdFwiY2FjaGUtbWFuaWZlc3RcIjogW1xuXHRcdFx0XCJtYW5pZmVzdFwiLFxuXHRcdFx0XCJhcHBjYWNoZVwiXG5cdFx0XSxcblx0XHRcImNhbGVuZGFyXCI6IFtcblx0XHRcdFwiaWNzXCIsXG5cdFx0XHRcImljelwiLFxuXHRcdFx0XCJpZmJcIlxuXHRcdF0sXG5cdFx0XCJjc3NcIjogXCJjc3NcIixcblx0XHRcImNzdlwiOiBcImNzdlwiLFxuXHRcdFwiaDMyM1wiOiBcIjMyM1wiLFxuXHRcdFwiaHRtbFwiOiBbXG5cdFx0XHRcImh0bWxcIixcblx0XHRcdFwiaHRtXCIsXG5cdFx0XHRcInNodG1sXCIsXG5cdFx0XHRcInN0bVwiXG5cdFx0XSxcblx0XHRcIml1bHNcIjogXCJ1bHNcIixcblx0XHRcInBsYWluXCI6IFtcblx0XHRcdFwidHh0XCIsXG5cdFx0XHRcInRleHRcIixcblx0XHRcdFwiYnJmXCIsXG5cdFx0XHRcImNvbmZcIixcblx0XHRcdFwiZGVmXCIsXG5cdFx0XHRcImxpc3RcIixcblx0XHRcdFwibG9nXCIsXG5cdFx0XHRcImluXCIsXG5cdFx0XHRcImJhc1wiLFxuXHRcdFx0XCJkaWZmXCIsXG5cdFx0XHRcImtzaFwiXG5cdFx0XSxcblx0XHRcInJpY2h0ZXh0XCI6IFwicnR4XCIsXG5cdFx0XCJzY3JpcHRsZXRcIjogW1xuXHRcdFx0XCJzY3RcIixcblx0XHRcdFwid3NjXCJcblx0XHRdLFxuXHRcdFwidGV4bWFjc1wiOiBcInRtXCIsXG5cdFx0XCJ0YWItc2VwYXJhdGVkLXZhbHVlc1wiOiBcInRzdlwiLFxuXHRcdFwidm5kLnN1bi5qMm1lLmFwcC1kZXNjcmlwdG9yXCI6IFwiamFkXCIsXG5cdFx0XCJ2bmQud2FwLndtbFwiOiBcIndtbFwiLFxuXHRcdFwidm5kLndhcC53bWxzY3JpcHRcIjogXCJ3bWxzXCIsXG5cdFx0XCJ4LWJpYnRleFwiOiBcImJpYlwiLFxuXHRcdFwieC1ib29cIjogXCJib29cIixcblx0XHRcIngtYysraGRyXCI6IFtcblx0XHRcdFwiaCsrXCIsXG5cdFx0XHRcImhwcFwiLFxuXHRcdFx0XCJoeHhcIixcblx0XHRcdFwiaGhcIlxuXHRcdF0sXG5cdFx0XCJ4LWMrK3NyY1wiOiBbXG5cdFx0XHRcImMrK1wiLFxuXHRcdFx0XCJjcHBcIixcblx0XHRcdFwiY3h4XCIsXG5cdFx0XHRcImNjXCJcblx0XHRdLFxuXHRcdFwieC1jb21wb25lbnRcIjogXCJodGNcIixcblx0XHRcIngtZHNyY1wiOiBcImRcIixcblx0XHRcIngtZGlmZlwiOiBcInBhdGNoXCIsXG5cdFx0XCJ4LWhhc2tlbGxcIjogXCJoc1wiLFxuXHRcdFwieC1qYXZhXCI6IFwiamF2YVwiLFxuXHRcdFwieC1saXRlcmF0ZS1oYXNrZWxsXCI6IFwibGhzXCIsXG5cdFx0XCJ4LW1vY1wiOiBcIm1vY1wiLFxuXHRcdFwieC1wYXNjYWxcIjogW1xuXHRcdFx0XCJwXCIsXG5cdFx0XHRcInBhc1wiLFxuXHRcdFx0XCJwcFwiLFxuXHRcdFx0XCJpbmNcIlxuXHRcdF0sXG5cdFx0XCJ4LXBjcy1nY2RcIjogXCJnY2RcIixcblx0XHRcIngtcHl0aG9uXCI6IFwicHlcIixcblx0XHRcIngtc2NhbGFcIjogXCJzY2FsYVwiLFxuXHRcdFwieC1zZXRleHRcIjogXCJldHhcIixcblx0XHRcIngtdGNsXCI6IFtcblx0XHRcdFwidGNsXCIsXG5cdFx0XHRcInRrXCJcblx0XHRdLFxuXHRcdFwieC10ZXhcIjogW1xuXHRcdFx0XCJ0ZXhcIixcblx0XHRcdFwibHR4XCIsXG5cdFx0XHRcInN0eVwiLFxuXHRcdFx0XCJjbHNcIlxuXHRcdF0sXG5cdFx0XCJ4LXZjYWxlbmRhclwiOiBcInZjc1wiLFxuXHRcdFwieC12Y2FyZFwiOiBcInZjZlwiLFxuXHRcdFwibjNcIjogXCJuM1wiLFxuXHRcdFwicHJzLmxpbmVzLnRhZ1wiOiBcImRzY1wiLFxuXHRcdFwic2dtbFwiOiBbXG5cdFx0XHRcInNnbWxcIixcblx0XHRcdFwic2dtXCJcblx0XHRdLFxuXHRcdFwidHJvZmZcIjogW1xuXHRcdFx0XCJ0XCIsXG5cdFx0XHRcInRyXCIsXG5cdFx0XHRcInJvZmZcIixcblx0XHRcdFwibWFuXCIsXG5cdFx0XHRcIm1lXCIsXG5cdFx0XHRcIm1zXCJcblx0XHRdLFxuXHRcdFwidHVydGxlXCI6IFwidHRsXCIsXG5cdFx0XCJ1cmktbGlzdFwiOiBbXG5cdFx0XHRcInVyaVwiLFxuXHRcdFx0XCJ1cmlzXCIsXG5cdFx0XHRcInVybHNcIlxuXHRcdF0sXG5cdFx0XCJ2Y2FyZFwiOiBcInZjYXJkXCIsXG5cdFx0XCJ2bmQuY3VybFwiOiBcImN1cmxcIixcblx0XHRcInZuZC5jdXJsLmRjdXJsXCI6IFwiZGN1cmxcIixcblx0XHRcInZuZC5jdXJsLnNjdXJsXCI6IFwic2N1cmxcIixcblx0XHRcInZuZC5jdXJsLm1jdXJsXCI6IFwibWN1cmxcIixcblx0XHRcInZuZC5kdmIuc3VidGl0bGVcIjogXCJzdWJcIixcblx0XHRcInZuZC5mbHlcIjogXCJmbHlcIixcblx0XHRcInZuZC5mbWkuZmxleHN0b3JcIjogXCJmbHhcIixcblx0XHRcInZuZC5ncmFwaHZpelwiOiBcImd2XCIsXG5cdFx0XCJ2bmQuaW4zZC4zZG1sXCI6IFwiM2RtbFwiLFxuXHRcdFwidm5kLmluM2Quc3BvdFwiOiBcInNwb3RcIixcblx0XHRcIngtYXNtXCI6IFtcblx0XHRcdFwic1wiLFxuXHRcdFx0XCJhc21cIlxuXHRcdF0sXG5cdFx0XCJ4LWNcIjogW1xuXHRcdFx0XCJjXCIsXG5cdFx0XHRcImhcIixcblx0XHRcdFwiZGljXCJcblx0XHRdLFxuXHRcdFwieC1mb3J0cmFuXCI6IFtcblx0XHRcdFwiZlwiLFxuXHRcdFx0XCJmb3JcIixcblx0XHRcdFwiZjc3XCIsXG5cdFx0XHRcImY5MFwiXG5cdFx0XSxcblx0XHRcIngtb3BtbFwiOiBcIm9wbWxcIixcblx0XHRcIngtbmZvXCI6IFwibmZvXCIsXG5cdFx0XCJ4LXNmdlwiOiBcInNmdlwiLFxuXHRcdFwieC11dWVuY29kZVwiOiBcInV1XCIsXG5cdFx0XCJ3ZWJ2aWV3aHRtbFwiOiBcImh0dFwiLFxuXHRcdFwiamF2YXNjcmlwdFwiOiBcImpzXCIsXG5cdFx0XCJqc29uXCI6IFwianNvblwiLFxuXHRcdFwibWFya2Rvd25cIjogW1xuXHRcdFx0XCJtZFwiLFxuXHRcdFx0XCJtYXJrZG93blwiLFxuXHRcdFx0XCJtZG93blwiLFxuXHRcdFx0XCJtYXJrZG5cIlxuXHRcdF0sXG5cdFx0XCJ2bmQud2FwLnNpXCI6IFwic2lcIixcblx0XHRcInZuZC53YXAuc2xcIjogXCJzbFwiXG5cdH0sXG5cdFwidmlkZW9cIjoge1xuXHRcdFwiYXZpZlwiOiBcImF2aWZcIixcblx0XHRcIjNncHBcIjogXCIzZ3BcIixcblx0XHRcImFubm9kZXhcIjogXCJheHZcIixcblx0XHRcImRsXCI6IFwiZGxcIixcblx0XHRcImR2XCI6IFtcblx0XHRcdFwiZGlmXCIsXG5cdFx0XHRcImR2XCJcblx0XHRdLFxuXHRcdFwiZmxpXCI6IFwiZmxpXCIsXG5cdFx0XCJnbFwiOiBcImdsXCIsXG5cdFx0XCJtcGVnXCI6IFtcblx0XHRcdFwibXBlZ1wiLFxuXHRcdFx0XCJtcGdcIixcblx0XHRcdFwibXBlXCIsXG5cdFx0XHRcIm0xdlwiLFxuXHRcdFx0XCJtMnZcIixcblx0XHRcdFwibXAyXCIsXG5cdFx0XHRcIm1wYVwiLFxuXHRcdFx0XCJtcHYyXCJcblx0XHRdLFxuXHRcdFwibXA0XCI6IFtcblx0XHRcdFwibXA0XCIsXG5cdFx0XHRcIm1wNHZcIixcblx0XHRcdFwibXBnNFwiXG5cdFx0XSxcblx0XHRcInF1aWNrdGltZVwiOiBbXG5cdFx0XHRcInF0XCIsXG5cdFx0XHRcIm1vdlwiXG5cdFx0XSxcblx0XHRcIm9nZ1wiOiBcIm9ndlwiLFxuXHRcdFwidm5kLm1wZWd1cmxcIjogW1xuXHRcdFx0XCJteHVcIixcblx0XHRcdFwibTR1XCJcblx0XHRdLFxuXHRcdFwieC1mbHZcIjogXCJmbHZcIixcblx0XHRcIngtbGEtYXNmXCI6IFtcblx0XHRcdFwibHNmXCIsXG5cdFx0XHRcImxzeFwiXG5cdFx0XSxcblx0XHRcIngtbW5nXCI6IFwibW5nXCIsXG5cdFx0XCJ4LW1zLWFzZlwiOiBbXG5cdFx0XHRcImFzZlwiLFxuXHRcdFx0XCJhc3hcIixcblx0XHRcdFwiYXNyXCJcblx0XHRdLFxuXHRcdFwieC1tcy13bVwiOiBcIndtXCIsXG5cdFx0XCJ4LW1zLXdtdlwiOiBcIndtdlwiLFxuXHRcdFwieC1tcy13bXhcIjogXCJ3bXhcIixcblx0XHRcIngtbXMtd3Z4XCI6IFwid3Z4XCIsXG5cdFx0XCJ4LW1zdmlkZW9cIjogXCJhdmlcIixcblx0XHRcIngtc2dpLW1vdmllXCI6IFwibW92aWVcIixcblx0XHRcIngtbWF0cm9za2FcIjogW1xuXHRcdFx0XCJtcHZcIixcblx0XHRcdFwibWt2XCIsXG5cdFx0XHRcIm1rM2RcIixcblx0XHRcdFwibWtzXCJcblx0XHRdLFxuXHRcdFwiM2dwcDJcIjogXCIzZzJcIixcblx0XHRcImgyNjFcIjogXCJoMjYxXCIsXG5cdFx0XCJoMjYzXCI6IFwiaDI2M1wiLFxuXHRcdFwiaDI2NFwiOiBcImgyNjRcIixcblx0XHRcImpwZWdcIjogXCJqcGd2XCIsXG5cdFx0XCJqcG1cIjogW1xuXHRcdFx0XCJqcG1cIixcblx0XHRcdFwianBnbVwiXG5cdFx0XSxcblx0XHRcIm1qMlwiOiBbXG5cdFx0XHRcIm1qMlwiLFxuXHRcdFx0XCJtanAyXCJcblx0XHRdLFxuXHRcdFwidm5kLmRlY2UuaGRcIjogW1xuXHRcdFx0XCJ1dmhcIixcblx0XHRcdFwidXZ2aFwiXG5cdFx0XSxcblx0XHRcInZuZC5kZWNlLm1vYmlsZVwiOiBbXG5cdFx0XHRcInV2bVwiLFxuXHRcdFx0XCJ1dnZtXCJcblx0XHRdLFxuXHRcdFwidm5kLmRlY2UucGRcIjogW1xuXHRcdFx0XCJ1dnBcIixcblx0XHRcdFwidXZ2cFwiXG5cdFx0XSxcblx0XHRcInZuZC5kZWNlLnNkXCI6IFtcblx0XHRcdFwidXZzXCIsXG5cdFx0XHRcInV2dnNcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuZGVjZS52aWRlb1wiOiBbXG5cdFx0XHRcInV2dlwiLFxuXHRcdFx0XCJ1dnZ2XCJcblx0XHRdLFxuXHRcdFwidm5kLmR2Yi5maWxlXCI6IFwiZHZiXCIsXG5cdFx0XCJ2bmQuZnZ0XCI6IFwiZnZ0XCIsXG5cdFx0XCJ2bmQubXMtcGxheXJlYWR5Lm1lZGlhLnB5dlwiOiBcInB5dlwiLFxuXHRcdFwidm5kLnV2dnUubXA0XCI6IFtcblx0XHRcdFwidXZ1XCIsXG5cdFx0XHRcInV2dnVcIlxuXHRcdF0sXG5cdFx0XCJ2bmQudml2b1wiOiBcInZpdlwiLFxuXHRcdFwid2VibVwiOiBcIndlYm1cIixcblx0XHRcIngtZjR2XCI6IFwiZjR2XCIsXG5cdFx0XCJ4LW00dlwiOiBcIm00dlwiLFxuXHRcdFwieC1tcy12b2JcIjogXCJ2b2JcIixcblx0XHRcIngtc212XCI6IFwic212XCIsXG5cdFx0XCJtcDJ0XCI6IFwidHNcIlxuXHR9LFxuXHRcIngtY29uZmVyZW5jZVwiOiB7XG5cdFx0XCJ4LWNvb2x0YWxrXCI6IFwiaWNlXCJcblx0fSxcblx0XCJ4LXdvcmxkXCI6IHtcblx0XHRcIngtdnJtbFwiOiBbXG5cdFx0XHRcInZybVwiLFxuXHRcdFx0XCJmbHJcIixcblx0XHRcdFwid3J6XCIsXG5cdFx0XHRcInhhZlwiLFxuXHRcdFx0XCJ4b2ZcIlxuXHRcdF1cblx0fVxufTtcblxuY29uc3QgbWltZVR5cGVzID0gKCgpID0+IHtcblx0Y29uc3QgbWltZVR5cGVzID0ge307XG5cdGZvciAoY29uc3QgdHlwZSBvZiBPYmplY3Qua2V5cyh0YWJsZSkpIHtcblx0XHRmb3IgKGNvbnN0IHN1YnR5cGUgb2YgT2JqZWN0LmtleXModGFibGVbdHlwZV0pKSB7XG5cdFx0XHRjb25zdCB2YWx1ZSA9IHRhYmxlW3R5cGVdW3N1YnR5cGVdO1xuXHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdG1pbWVUeXBlc1t2YWx1ZV0gPSB0eXBlICsgXCIvXCIgKyBzdWJ0eXBlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yIChsZXQgaW5kZXhNaW1lVHlwZSA9IDA7IGluZGV4TWltZVR5cGUgPCB2YWx1ZS5sZW5ndGg7IGluZGV4TWltZVR5cGUrKykge1xuXHRcdFx0XHRcdG1pbWVUeXBlc1t2YWx1ZVtpbmRleE1pbWVUeXBlXV0gPSB0eXBlICsgXCIvXCIgKyBzdWJ0eXBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtaW1lVHlwZXM7XG59KSgpO1xuXG5leHBvcnQge1xuXHRtaW1lVHlwZXMsXG5cdGdldE1pbWVUeXBlXG59O1xuXG5mdW5jdGlvbiBnZXRNaW1lVHlwZShmaWxlbmFtZSkge1xuXHRyZXR1cm4gZmlsZW5hbWUgJiYgbWltZVR5cGVzW2ZpbGVuYW1lLnNwbGl0KFwiLlwiKS5wb3AoKS50b0xvd2VyQ2FzZSgpXSB8fCBnZXREZWZhdWx0TWltZVR5cGUoKTtcbn0iLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbmNvbnN0IHRhYmxlID0gW107XG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG5cdGxldCB0ID0gaTtcblx0Zm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIHtcblx0XHRpZiAodCAmIDEpIHtcblx0XHRcdHQgPSAodCA+Pj4gMSkgXiAweEVEQjg4MzIwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0ID0gdCA+Pj4gMTtcblx0XHR9XG5cdH1cblx0dGFibGVbaV0gPSB0O1xufVxuXG5jbGFzcyBDcmMzMiB7XG5cblx0Y29uc3RydWN0b3IoY3JjKSB7XG5cdFx0dGhpcy5jcmMgPSBjcmMgfHwgLTE7XG5cdH1cblxuXHRhcHBlbmQoZGF0YSkge1xuXHRcdGxldCBjcmMgPSB0aGlzLmNyYyB8IDA7XG5cdFx0Zm9yIChsZXQgb2Zmc2V0ID0gMCwgbGVuZ3RoID0gZGF0YS5sZW5ndGggfCAwOyBvZmZzZXQgPCBsZW5ndGg7IG9mZnNldCsrKSB7XG5cdFx0XHRjcmMgPSAoY3JjID4+PiA4KSBeIHRhYmxlWyhjcmMgXiBkYXRhW29mZnNldF0pICYgMHhGRl07XG5cdFx0fVxuXHRcdHRoaXMuY3JjID0gY3JjO1xuXHR9XG5cblx0Z2V0KCkge1xuXHRcdHJldHVybiB+dGhpcy5jcmM7XG5cdH1cbn1cblxuZXhwb3J0IHtcblx0Q3JjMzJcbn07IiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4vKiBnbG9iYWwgVHJhbnNmb3JtU3RyZWFtICovXG5cbmltcG9ydCB7IENyYzMyIH0gZnJvbSBcIi4vY29kZWNzL2NyYzMyLmpzXCI7XG5cbmNsYXNzIENyYzMyU3RyZWFtIGV4dGVuZHMgVHJhbnNmb3JtU3RyZWFtIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRsZXQgc3RyZWFtO1xuXHRcdGNvbnN0IGNyYzMyID0gbmV3IENyYzMyKCk7XG5cdFx0c3VwZXIoe1xuXHRcdFx0dHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG5cdFx0XHRcdGNyYzMyLmFwcGVuZChjaHVuayk7XG5cdFx0XHRcdGNvbnRyb2xsZXIuZW5xdWV1ZShjaHVuayk7XG5cdFx0XHR9LFxuXHRcdFx0Zmx1c2goKSB7XG5cdFx0XHRcdGNvbnN0IHZhbHVlID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG5cdFx0XHRcdGNvbnN0IGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KHZhbHVlLmJ1ZmZlcik7XG5cdFx0XHRcdGRhdGFWaWV3LnNldFVpbnQzMigwLCBjcmMzMi5nZXQoKSk7XG5cdFx0XHRcdHN0cmVhbS52YWx1ZSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHN0cmVhbSA9IHRoaXM7XG5cdH1cbn1cblxuZXhwb3J0IHtcblx0Q3JjMzJTdHJlYW1cbn07IiwiLy8gRGVyaXZlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS94cWRvbzAwby9qc3ppcC9ibG9iL21hc3Rlci9saWIvc2pjbC5qcyBhbmQgaHR0cHM6Ly9naXRodWIuY29tL2JpdHdpc2VzaGlmdGxlZnQvc2pjbFxuXG4vLyBkZW5vLWxpbnQtaWdub3JlLWZpbGUgbm8tdGhpcy1hbGlhc1xuXG4vKlxuICogU0pDTCBpcyBvcGVuLiBZb3UgY2FuIHVzZSwgbW9kaWZ5IGFuZCByZWRpc3RyaWJ1dGUgaXQgdW5kZXIgYSBCU0RcbiAqIGxpY2Vuc2Ugb3IgdW5kZXIgdGhlIEdOVSBHUEwsIHZlcnNpb24gMi4wLlxuICovXG5cbi8qKiBAZmlsZU92ZXJ2aWV3IEphdmFzY3JpcHQgY3J5cHRvZ3JhcGh5IGltcGxlbWVudGF0aW9uLlxuICpcbiAqIENydXNoIHRvIHJlbW92ZSBjb21tZW50cywgc2hvcnRlbiB2YXJpYWJsZSBuYW1lcyBhbmRcbiAqIGdlbmVyYWxseSByZWR1Y2UgdHJhbnNtaXNzaW9uIHNpemUuXG4gKlxuICogQGF1dGhvciBFbWlseSBTdGFya1xuICogQGF1dGhvciBNaWtlIEhhbWJ1cmdcbiAqIEBhdXRob3IgRGFuIEJvbmVoXG4gKi9cblxuLypqc2xpbnQgaW5kZW50OiAyLCBiaXR3aXNlOiBmYWxzZSwgbm9tZW46IGZhbHNlLCBwbHVzcGx1czogZmFsc2UsIHdoaXRlOiBmYWxzZSwgcmVnZXhwOiBmYWxzZSAqL1xuXG4vKiogQGZpbGVPdmVydmlldyBBcnJheXMgb2YgYml0cywgZW5jb2RlZCBhcyBhcnJheXMgb2YgTnVtYmVycy5cbiAqXG4gKiBAYXV0aG9yIEVtaWx5IFN0YXJrXG4gKiBAYXV0aG9yIE1pa2UgSGFtYnVyZ1xuICogQGF1dGhvciBEYW4gQm9uZWhcbiAqL1xuXG4vKipcbiAqIEFycmF5cyBvZiBiaXRzLCBlbmNvZGVkIGFzIGFycmF5cyBvZiBOdW1iZXJzLlxuICogQG5hbWVzcGFjZVxuICogQGRlc2NyaXB0aW9uXG4gKiA8cD5cbiAqIFRoZXNlIG9iamVjdHMgYXJlIHRoZSBjdXJyZW5jeSBhY2NlcHRlZCBieSBTSkNMJ3MgY3J5cHRvIGZ1bmN0aW9ucy5cbiAqIDwvcD5cbiAqXG4gKiA8cD5cbiAqIE1vc3Qgb2Ygb3VyIGNyeXB0byBwcmltaXRpdmVzIG9wZXJhdGUgb24gYXJyYXlzIG9mIDQtYnl0ZSB3b3JkcyBpbnRlcm5hbGx5LFxuICogYnV0IG1hbnkgb2YgdGhlbSBjYW4gdGFrZSBhcmd1bWVudHMgdGhhdCBhcmUgbm90IGEgbXVsdGlwbGUgb2YgNCBieXRlcy5cbiAqIFRoaXMgbGlicmFyeSBlbmNvZGVzIGFycmF5cyBvZiBiaXRzICh3aG9zZSBzaXplIG5lZWQgbm90IGJlIGEgbXVsdGlwbGUgb2YgOFxuICogYml0cykgYXMgYXJyYXlzIG9mIDMyLWJpdCB3b3Jkcy4gIFRoZSBiaXRzIGFyZSBwYWNrZWQsIGJpZy1lbmRpYW4sIGludG8gYW5cbiAqIGFycmF5IG9mIHdvcmRzLCAzMiBiaXRzIGF0IGEgdGltZS4gIFNpbmNlIHRoZSB3b3JkcyBhcmUgZG91YmxlLXByZWNpc2lvblxuICogZmxvYXRpbmcgcG9pbnQgbnVtYmVycywgdGhleSBmaXQgc29tZSBleHRyYSBkYXRhLiAgV2UgdXNlIHRoaXMgKGluIGEgcHJpdmF0ZSxcbiAqIHBvc3NpYmx5LWNoYW5naW5nIG1hbm5lcikgdG8gZW5jb2RlIHRoZSBudW1iZXIgb2YgYml0cyBhY3R1YWxseSAgcHJlc2VudFxuICogaW4gdGhlIGxhc3Qgd29yZCBvZiB0aGUgYXJyYXkuXG4gKiA8L3A+XG4gKlxuICogPHA+XG4gKiBCZWNhdXNlIGJpdHdpc2Ugb3BzIGNsZWFyIHRoaXMgb3V0LW9mLWJhbmQgZGF0YSwgdGhlc2UgYXJyYXlzIGNhbiBiZSBwYXNzZWRcbiAqIHRvIGNpcGhlcnMgbGlrZSBBRVMgd2hpY2ggd2FudCBhcnJheXMgb2Ygd29yZHMuXG4gKiA8L3A+XG4gKi9cbmNvbnN0IGJpdEFycmF5ID0ge1xuXHQvKipcblx0ICogQ29uY2F0ZW5hdGUgdHdvIGJpdCBhcnJheXMuXG5cdCAqIEBwYXJhbSB7Yml0QXJyYXl9IGExIFRoZSBmaXJzdCBhcnJheS5cblx0ICogQHBhcmFtIHtiaXRBcnJheX0gYTIgVGhlIHNlY29uZCBhcnJheS5cblx0ICogQHJldHVybiB7Yml0QXJyYXl9IFRoZSBjb25jYXRlbmF0aW9uIG9mIGExIGFuZCBhMi5cblx0ICovXG5cdGNvbmNhdChhMSwgYTIpIHtcblx0XHRpZiAoYTEubGVuZ3RoID09PSAwIHx8IGEyLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIGExLmNvbmNhdChhMik7XG5cdFx0fVxuXG5cdFx0Y29uc3QgbGFzdCA9IGExW2ExLmxlbmd0aCAtIDFdLCBzaGlmdCA9IGJpdEFycmF5LmdldFBhcnRpYWwobGFzdCk7XG5cdFx0aWYgKHNoaWZ0ID09PSAzMikge1xuXHRcdFx0cmV0dXJuIGExLmNvbmNhdChhMik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBiaXRBcnJheS5fc2hpZnRSaWdodChhMiwgc2hpZnQsIGxhc3QgfCAwLCBhMS5zbGljZSgwLCBhMS5sZW5ndGggLSAxKSk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBGaW5kIHRoZSBsZW5ndGggb2YgYW4gYXJyYXkgb2YgYml0cy5cblx0ICogQHBhcmFtIHtiaXRBcnJheX0gYSBUaGUgYXJyYXkuXG5cdCAqIEByZXR1cm4ge051bWJlcn0gVGhlIGxlbmd0aCBvZiBhLCBpbiBiaXRzLlxuXHQgKi9cblx0Yml0TGVuZ3RoKGEpIHtcblx0XHRjb25zdCBsID0gYS5sZW5ndGg7XG5cdFx0aWYgKGwgPT09IDApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0XHRjb25zdCB4ID0gYVtsIC0gMV07XG5cdFx0cmV0dXJuIChsIC0gMSkgKiAzMiArIGJpdEFycmF5LmdldFBhcnRpYWwoeCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFRydW5jYXRlIGFuIGFycmF5LlxuXHQgKiBAcGFyYW0ge2JpdEFycmF5fSBhIFRoZSBhcnJheS5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IGxlbiBUaGUgbGVuZ3RoIHRvIHRydW5jYXRlIHRvLCBpbiBiaXRzLlxuXHQgKiBAcmV0dXJuIHtiaXRBcnJheX0gQSBuZXcgYXJyYXksIHRydW5jYXRlZCB0byBsZW4gYml0cy5cblx0ICovXG5cdGNsYW1wKGEsIGxlbikge1xuXHRcdGlmIChhLmxlbmd0aCAqIDMyIDwgbGVuKSB7XG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9XG5cdFx0YSA9IGEuc2xpY2UoMCwgTWF0aC5jZWlsKGxlbiAvIDMyKSk7XG5cdFx0Y29uc3QgbCA9IGEubGVuZ3RoO1xuXHRcdGxlbiA9IGxlbiAmIDMxO1xuXHRcdGlmIChsID4gMCAmJiBsZW4pIHtcblx0XHRcdGFbbCAtIDFdID0gYml0QXJyYXkucGFydGlhbChsZW4sIGFbbCAtIDFdICYgMHg4MDAwMDAwMCA+PiAobGVuIC0gMSksIDEpO1xuXHRcdH1cblx0XHRyZXR1cm4gYTtcblx0fSxcblxuXHQvKipcblx0ICogTWFrZSBhIHBhcnRpYWwgd29yZCBmb3IgYSBiaXQgYXJyYXkuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBsZW4gVGhlIG51bWJlciBvZiBiaXRzIGluIHRoZSB3b3JkLlxuXHQgKiBAcGFyYW0ge051bWJlcn0geCBUaGUgYml0cy5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtfZW5kPTBdIFBhc3MgMSBpZiB4IGhhcyBhbHJlYWR5IGJlZW4gc2hpZnRlZCB0byB0aGUgaGlnaCBzaWRlLlxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IFRoZSBwYXJ0aWFsIHdvcmQuXG5cdCAqL1xuXHRwYXJ0aWFsKGxlbiwgeCwgX2VuZCkge1xuXHRcdGlmIChsZW4gPT09IDMyKSB7XG5cdFx0XHRyZXR1cm4geDtcblx0XHR9XG5cdFx0cmV0dXJuIChfZW5kID8geCB8IDAgOiB4IDw8ICgzMiAtIGxlbikpICsgbGVuICogMHgxMDAwMDAwMDAwMDtcblx0fSxcblxuXHQvKipcblx0ICogR2V0IHRoZSBudW1iZXIgb2YgYml0cyB1c2VkIGJ5IGEgcGFydGlhbCB3b3JkLlxuXHQgKiBAcGFyYW0ge051bWJlcn0geCBUaGUgcGFydGlhbCB3b3JkLlxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IFRoZSBudW1iZXIgb2YgYml0cyB1c2VkIGJ5IHRoZSBwYXJ0aWFsIHdvcmQuXG5cdCAqL1xuXHRnZXRQYXJ0aWFsKHgpIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCh4IC8gMHgxMDAwMDAwMDAwMCkgfHwgMzI7XG5cdH0sXG5cblx0LyoqIFNoaWZ0IGFuIGFycmF5IHJpZ2h0LlxuXHQgKiBAcGFyYW0ge2JpdEFycmF5fSBhIFRoZSBhcnJheSB0byBzaGlmdC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHNoaWZ0IFRoZSBudW1iZXIgb2YgYml0cyB0byBzaGlmdC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtjYXJyeT0wXSBBIGJ5dGUgdG8gY2FycnkgaW5cblx0ICogQHBhcmFtIHtiaXRBcnJheX0gW291dD1bXV0gQW4gYXJyYXkgdG8gcHJlcGVuZCB0byB0aGUgb3V0cHV0LlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3NoaWZ0UmlnaHQoYSwgc2hpZnQsIGNhcnJ5LCBvdXQpIHtcblx0XHRpZiAob3V0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdG91dCA9IFtdO1xuXHRcdH1cblxuXHRcdGZvciAoOyBzaGlmdCA+PSAzMjsgc2hpZnQgLT0gMzIpIHtcblx0XHRcdG91dC5wdXNoKGNhcnJ5KTtcblx0XHRcdGNhcnJ5ID0gMDtcblx0XHR9XG5cdFx0aWYgKHNoaWZ0ID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gb3V0LmNvbmNhdChhKTtcblx0XHR9XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcblx0XHRcdG91dC5wdXNoKGNhcnJ5IHwgYVtpXSA+Pj4gc2hpZnQpO1xuXHRcdFx0Y2FycnkgPSBhW2ldIDw8ICgzMiAtIHNoaWZ0KTtcblx0XHR9XG5cdFx0Y29uc3QgbGFzdDIgPSBhLmxlbmd0aCA/IGFbYS5sZW5ndGggLSAxXSA6IDA7XG5cdFx0Y29uc3Qgc2hpZnQyID0gYml0QXJyYXkuZ2V0UGFydGlhbChsYXN0Mik7XG5cdFx0b3V0LnB1c2goYml0QXJyYXkucGFydGlhbChzaGlmdCArIHNoaWZ0MiAmIDMxLCAoc2hpZnQgKyBzaGlmdDIgPiAzMikgPyBjYXJyeSA6IG91dC5wb3AoKSwgMSkpO1xuXHRcdHJldHVybiBvdXQ7XG5cdH1cbn07XG5cbi8qKiBAZmlsZU92ZXJ2aWV3IEJpdCBhcnJheSBjb2RlYyBpbXBsZW1lbnRhdGlvbnMuXG4gKlxuICogQGF1dGhvciBFbWlseSBTdGFya1xuICogQGF1dGhvciBNaWtlIEhhbWJ1cmdcbiAqIEBhdXRob3IgRGFuIEJvbmVoXG4gKi9cblxuLyoqXG4gKiBBcnJheXMgb2YgYnl0ZXNcbiAqIEBuYW1lc3BhY2VcbiAqL1xuY29uc3QgY29kZWMgPSB7XG5cdGJ5dGVzOiB7XG5cdFx0LyoqIENvbnZlcnQgZnJvbSBhIGJpdEFycmF5IHRvIGFuIGFycmF5IG9mIGJ5dGVzLiAqL1xuXHRcdGZyb21CaXRzKGFycikge1xuXHRcdFx0Y29uc3QgYmwgPSBiaXRBcnJheS5iaXRMZW5ndGgoYXJyKTtcblx0XHRcdGNvbnN0IGJ5dGVMZW5ndGggPSBibCAvIDg7XG5cdFx0XHRjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheShieXRlTGVuZ3RoKTtcblx0XHRcdGxldCB0bXA7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVMZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAoKGkgJiAzKSA9PT0gMCkge1xuXHRcdFx0XHRcdHRtcCA9IGFycltpIC8gNF07XG5cdFx0XHRcdH1cblx0XHRcdFx0b3V0W2ldID0gdG1wID4+PiAyNDtcblx0XHRcdFx0dG1wIDw8PSA4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG91dDtcblx0XHR9LFxuXHRcdC8qKiBDb252ZXJ0IGZyb20gYW4gYXJyYXkgb2YgYnl0ZXMgdG8gYSBiaXRBcnJheS4gKi9cblx0XHR0b0JpdHMoYnl0ZXMpIHtcblx0XHRcdGNvbnN0IG91dCA9IFtdO1xuXHRcdFx0bGV0IGk7XG5cdFx0XHRsZXQgdG1wID0gMDtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR0bXAgPSB0bXAgPDwgOCB8IGJ5dGVzW2ldO1xuXHRcdFx0XHRpZiAoKGkgJiAzKSA9PT0gMykge1xuXHRcdFx0XHRcdG91dC5wdXNoKHRtcCk7XG5cdFx0XHRcdFx0dG1wID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGkgJiAzKSB7XG5cdFx0XHRcdG91dC5wdXNoKGJpdEFycmF5LnBhcnRpYWwoOCAqIChpICYgMyksIHRtcCkpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG91dDtcblx0XHR9XG5cdH1cbn07XG5cbmNvbnN0IGhhc2ggPSB7fTtcblxuLyoqXG4gKiBDb250ZXh0IGZvciBhIFNIQS0xIG9wZXJhdGlvbiBpbiBwcm9ncmVzcy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5oYXNoLnNoYTEgPSBjbGFzcyB7XG5cdGNvbnN0cnVjdG9yKGhhc2gpIHtcblx0XHRjb25zdCBzaGExID0gdGhpcztcblx0XHQvKipcblx0XHQgKiBUaGUgaGFzaCdzIGJsb2NrIHNpemUsIGluIGJpdHMuXG5cdFx0ICogQGNvbnN0YW50XG5cdFx0ICovXG5cdFx0c2hhMS5ibG9ja1NpemUgPSA1MTI7XG5cdFx0LyoqXG5cdFx0ICogVGhlIFNIQS0xIGluaXRpYWxpemF0aW9uIHZlY3Rvci5cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHNoYTEuX2luaXQgPSBbMHg2NzQ1MjMwMSwgMHhFRkNEQUI4OSwgMHg5OEJBRENGRSwgMHgxMDMyNTQ3NiwgMHhDM0QyRTFGMF07XG5cdFx0LyoqXG5cdFx0ICogVGhlIFNIQS0xIGhhc2gga2V5LlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0c2hhMS5fa2V5ID0gWzB4NUE4Mjc5OTksIDB4NkVEOUVCQTEsIDB4OEYxQkJDREMsIDB4Q0E2MkMxRDZdO1xuXHRcdGlmIChoYXNoKSB7XG5cdFx0XHRzaGExLl9oID0gaGFzaC5faC5zbGljZSgwKTtcblx0XHRcdHNoYTEuX2J1ZmZlciA9IGhhc2guX2J1ZmZlci5zbGljZSgwKTtcblx0XHRcdHNoYTEuX2xlbmd0aCA9IGhhc2guX2xlbmd0aDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c2hhMS5yZXNldCgpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNldCB0aGUgaGFzaCBzdGF0ZS5cblx0ICogQHJldHVybiB0aGlzXG5cdCAqL1xuXHRyZXNldCgpIHtcblx0XHRjb25zdCBzaGExID0gdGhpcztcblx0XHRzaGExLl9oID0gc2hhMS5faW5pdC5zbGljZSgwKTtcblx0XHRzaGExLl9idWZmZXIgPSBbXTtcblx0XHRzaGExLl9sZW5ndGggPSAwO1xuXHRcdHJldHVybiBzaGExO1xuXHR9XG5cblx0LyoqXG5cdCAqIElucHV0IHNldmVyYWwgd29yZHMgdG8gdGhlIGhhc2guXG5cdCAqIEBwYXJhbSB7Yml0QXJyYXl8U3RyaW5nfSBkYXRhIHRoZSBkYXRhIHRvIGhhc2guXG5cdCAqIEByZXR1cm4gdGhpc1xuXHQgKi9cblx0dXBkYXRlKGRhdGEpIHtcblx0XHRjb25zdCBzaGExID0gdGhpcztcblx0XHRpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdGRhdGEgPSBjb2RlYy51dGY4U3RyaW5nLnRvQml0cyhkYXRhKTtcblx0XHR9XG5cdFx0Y29uc3QgYiA9IHNoYTEuX2J1ZmZlciA9IGJpdEFycmF5LmNvbmNhdChzaGExLl9idWZmZXIsIGRhdGEpO1xuXHRcdGNvbnN0IG9sID0gc2hhMS5fbGVuZ3RoO1xuXHRcdGNvbnN0IG5sID0gc2hhMS5fbGVuZ3RoID0gb2wgKyBiaXRBcnJheS5iaXRMZW5ndGgoZGF0YSk7XG5cdFx0aWYgKG5sID4gOTAwNzE5OTI1NDc0MDk5MSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGhhc2ggbW9yZSB0aGFuIDJeNTMgLSAxIGJpdHNcIik7XG5cdFx0fVxuXHRcdGNvbnN0IGMgPSBuZXcgVWludDMyQXJyYXkoYik7XG5cdFx0bGV0IGogPSAwO1xuXHRcdGZvciAobGV0IGkgPSBzaGExLmJsb2NrU2l6ZSArIG9sIC0gKChzaGExLmJsb2NrU2l6ZSArIG9sKSAmIChzaGExLmJsb2NrU2l6ZSAtIDEpKTsgaSA8PSBubDtcblx0XHRcdGkgKz0gc2hhMS5ibG9ja1NpemUpIHtcblx0XHRcdHNoYTEuX2Jsb2NrKGMuc3ViYXJyYXkoMTYgKiBqLCAxNiAqIChqICsgMSkpKTtcblx0XHRcdGogKz0gMTtcblx0XHR9XG5cdFx0Yi5zcGxpY2UoMCwgMTYgKiBqKTtcblx0XHRyZXR1cm4gc2hhMTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wbGV0ZSBoYXNoaW5nIGFuZCBvdXRwdXQgdGhlIGhhc2ggdmFsdWUuXG5cdCAqIEByZXR1cm4ge2JpdEFycmF5fSBUaGUgaGFzaCB2YWx1ZSwgYW4gYXJyYXkgb2YgNSBiaWctZW5kaWFuIHdvcmRzLiBUT0RPXG5cdCAqL1xuXHRmaW5hbGl6ZSgpIHtcblx0XHRjb25zdCBzaGExID0gdGhpcztcblx0XHRsZXQgYiA9IHNoYTEuX2J1ZmZlcjtcblx0XHRjb25zdCBoID0gc2hhMS5faDtcblxuXHRcdC8vIFJvdW5kIG91dCBhbmQgcHVzaCB0aGUgYnVmZmVyXG5cdFx0YiA9IGJpdEFycmF5LmNvbmNhdChiLCBbYml0QXJyYXkucGFydGlhbCgxLCAxKV0pO1xuXHRcdC8vIFJvdW5kIG91dCB0aGUgYnVmZmVyIHRvIGEgbXVsdGlwbGUgb2YgMTYgd29yZHMsIGxlc3MgdGhlIDIgbGVuZ3RoIHdvcmRzLlxuXHRcdGZvciAobGV0IGkgPSBiLmxlbmd0aCArIDI7IGkgJiAxNTsgaSsrKSB7XG5cdFx0XHRiLnB1c2goMCk7XG5cdFx0fVxuXG5cdFx0Ly8gYXBwZW5kIHRoZSBsZW5ndGhcblx0XHRiLnB1c2goTWF0aC5mbG9vcihzaGExLl9sZW5ndGggLyAweDEwMDAwMDAwMCkpO1xuXHRcdGIucHVzaChzaGExLl9sZW5ndGggfCAwKTtcblxuXHRcdHdoaWxlIChiLmxlbmd0aCkge1xuXHRcdFx0c2hhMS5fYmxvY2soYi5zcGxpY2UoMCwgMTYpKTtcblx0XHR9XG5cblx0XHRzaGExLnJlc2V0KCk7XG5cdFx0cmV0dXJuIGg7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIFNIQS0xIGxvZ2ljYWwgZnVuY3Rpb25zIGYoMCksIGYoMSksIC4uLiwgZig3OSkuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZih0LCBiLCBjLCBkKSB7XG5cdFx0aWYgKHQgPD0gMTkpIHtcblx0XHRcdHJldHVybiAoYiAmIGMpIHwgKH5iICYgZCk7XG5cdFx0fSBlbHNlIGlmICh0IDw9IDM5KSB7XG5cdFx0XHRyZXR1cm4gYiBeIGMgXiBkO1xuXHRcdH0gZWxzZSBpZiAodCA8PSA1OSkge1xuXHRcdFx0cmV0dXJuIChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKTtcblx0XHR9IGVsc2UgaWYgKHQgPD0gNzkpIHtcblx0XHRcdHJldHVybiBiIF4gYyBeIGQ7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIENpcmN1bGFyIGxlZnQtc2hpZnQgb3BlcmF0b3IuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfUyhuLCB4KSB7XG5cdFx0cmV0dXJuICh4IDw8IG4pIHwgKHggPj4+IDMyIC0gbik7XG5cdH1cblxuXHQvKipcblx0ICogUGVyZm9ybSBvbmUgY3ljbGUgb2YgU0hBLTEuXG5cdCAqIEBwYXJhbSB7VWludDMyQXJyYXl8Yml0QXJyYXl9IHdvcmRzIG9uZSBibG9jayBvZiB3b3Jkcy5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9ibG9jayh3b3Jkcykge1xuXHRcdGNvbnN0IHNoYTEgPSB0aGlzO1xuXHRcdGNvbnN0IGggPSBzaGExLl9oO1xuXHRcdC8vIFdoZW4gd29yZHMgaXMgcGFzc2VkIHRvIF9ibG9jaywgaXQgaGFzIDE2IGVsZW1lbnRzLiBTSEExIF9ibG9ja1xuXHRcdC8vIGZ1bmN0aW9uIGV4dGVuZHMgd29yZHMgd2l0aCBuZXcgZWxlbWVudHMgKGF0IHRoZSBlbmQgdGhlcmUgYXJlIDgwIGVsZW1lbnRzKS4gXG5cdFx0Ly8gVGhlIHByb2JsZW0gaXMgdGhhdCBpZiB3ZSB1c2UgVWludDMyQXJyYXkgaW5zdGVhZCBvZiBBcnJheSwgXG5cdFx0Ly8gdGhlIGxlbmd0aCBvZiBVaW50MzJBcnJheSBjYW5ub3QgYmUgY2hhbmdlZC4gVGh1cywgd2UgcmVwbGFjZSB3b3JkcyB3aXRoIGEgXG5cdFx0Ly8gbm9ybWFsIEFycmF5IGhlcmUuXG5cdFx0Y29uc3QgdyA9IEFycmF5KDgwKTsgLy8gZG8gbm90IHVzZSBVaW50MzJBcnJheSBoZXJlIGFzIHRoZSBpbnN0YW50aWF0aW9uIGlzIHNsb3dlclxuXHRcdGZvciAobGV0IGogPSAwOyBqIDwgMTY7IGorKykge1xuXHRcdFx0d1tqXSA9IHdvcmRzW2pdO1xuXHRcdH1cblxuXHRcdGxldCBhID0gaFswXTtcblx0XHRsZXQgYiA9IGhbMV07XG5cdFx0bGV0IGMgPSBoWzJdO1xuXHRcdGxldCBkID0gaFszXTtcblx0XHRsZXQgZSA9IGhbNF07XG5cblx0XHRmb3IgKGxldCB0ID0gMDsgdCA8PSA3OTsgdCsrKSB7XG5cdFx0XHRpZiAodCA+PSAxNikge1xuXHRcdFx0XHR3W3RdID0gc2hhMS5fUygxLCB3W3QgLSAzXSBeIHdbdCAtIDhdIF4gd1t0IC0gMTRdIF4gd1t0IC0gMTZdKTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IHRtcCA9IChzaGExLl9TKDUsIGEpICsgc2hhMS5fZih0LCBiLCBjLCBkKSArIGUgKyB3W3RdICtcblx0XHRcdFx0c2hhMS5fa2V5W01hdGguZmxvb3IodCAvIDIwKV0pIHwgMDtcblx0XHRcdGUgPSBkO1xuXHRcdFx0ZCA9IGM7XG5cdFx0XHRjID0gc2hhMS5fUygzMCwgYik7XG5cdFx0XHRiID0gYTtcblx0XHRcdGEgPSB0bXA7XG5cdFx0fVxuXG5cdFx0aFswXSA9IChoWzBdICsgYSkgfCAwO1xuXHRcdGhbMV0gPSAoaFsxXSArIGIpIHwgMDtcblx0XHRoWzJdID0gKGhbMl0gKyBjKSB8IDA7XG5cdFx0aFszXSA9IChoWzNdICsgZCkgfCAwO1xuXHRcdGhbNF0gPSAoaFs0XSArIGUpIHwgMDtcblx0fVxufTtcblxuLyoqIEBmaWxlT3ZlcnZpZXcgTG93LWxldmVsIEFFUyBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgYSBsb3ctbGV2ZWwgaW1wbGVtZW50YXRpb24gb2YgQUVTLCBvcHRpbWl6ZWQgZm9yXG4gKiBzaXplIGFuZCBmb3IgZWZmaWNpZW5jeSBvbiBzZXZlcmFsIGJyb3dzZXJzLiAgSXQgaXMgYmFzZWQgb25cbiAqIE9wZW5TU0wncyBhZXNfY29yZS5jLCBhIHB1YmxpYy1kb21haW4gaW1wbGVtZW50YXRpb24gYnkgVmluY2VudFxuICogUmlqbWVuLCBBbnRvb24gQm9zc2VsYWVycyBhbmQgUGF1bG8gQmFycmV0by5cbiAqXG4gKiBBbiBvbGRlciB2ZXJzaW9uIG9mIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgYXZhaWxhYmxlIGluIHRoZSBwdWJsaWNcbiAqIGRvbWFpbiwgYnV0IHRoaXMgb25lIGlzIChjKSBFbWlseSBTdGFyaywgTWlrZSBIYW1idXJnLCBEYW4gQm9uZWgsXG4gKiBTdGFuZm9yZCBVbml2ZXJzaXR5IDIwMDgtMjAxMCBhbmQgQlNELWxpY2Vuc2VkIGZvciBsaWFiaWxpdHlcbiAqIHJlYXNvbnMuXG4gKlxuICogQGF1dGhvciBFbWlseSBTdGFya1xuICogQGF1dGhvciBNaWtlIEhhbWJ1cmdcbiAqIEBhdXRob3IgRGFuIEJvbmVoXG4gKi9cblxuY29uc3QgY2lwaGVyID0ge307XG5cbi8qKlxuICogU2NoZWR1bGUgb3V0IGFuIEFFUyBrZXkgZm9yIGJvdGggZW5jcnlwdGlvbiBhbmQgZGVjcnlwdGlvbi4gIFRoaXNcbiAqIGlzIGEgbG93LWxldmVsIGNsYXNzLiAgVXNlIGEgY2lwaGVyIG1vZGUgdG8gZG8gYnVsayBlbmNyeXB0aW9uLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0ga2V5IFRoZSBrZXkgYXMgYW4gYXJyYXkgb2YgNCwgNiBvciA4IHdvcmRzLlxuICovXG5jaXBoZXIuYWVzID0gY2xhc3Mge1xuXHRjb25zdHJ1Y3RvcihrZXkpIHtcblx0XHQvKipcblx0XHQgKiBUaGUgZXhwYW5kZWQgUy1ib3ggYW5kIGludmVyc2UgUy1ib3ggdGFibGVzLiAgVGhlc2Ugd2lsbCBiZSBjb21wdXRlZFxuXHRcdCAqIG9uIHRoZSBjbGllbnQgc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIHNlbmQgdGhlbSBkb3duIHRoZSB3aXJlLlxuXHRcdCAqXG5cdFx0ICogVGhlcmUgYXJlIHR3byB0YWJsZXMsIF90YWJsZXNbMF0gaXMgZm9yIGVuY3J5cHRpb24gYW5kXG5cdFx0ICogX3RhYmxlc1sxXSBpcyBmb3IgZGVjcnlwdGlvbi5cblx0XHQgKlxuXHRcdCAqIFRoZSBmaXJzdCA0IHN1Yi10YWJsZXMgYXJlIHRoZSBleHBhbmRlZCBTLWJveCB3aXRoIE1peENvbHVtbnMuICBUaGVcblx0XHQgKiBsYXN0IChfdGFibGVzWzAxXVs0XSkgaXMgdGhlIFMtYm94IGl0c2VsZi5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0Y29uc3QgYWVzID0gdGhpcztcblx0XHRhZXMuX3RhYmxlcyA9IFtbW10sIFtdLCBbXSwgW10sIFtdXSwgW1tdLCBbXSwgW10sIFtdLCBbXV1dO1xuXG5cdFx0aWYgKCFhZXMuX3RhYmxlc1swXVswXVswXSkge1xuXHRcdFx0YWVzLl9wcmVjb21wdXRlKCk7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgc2JveCA9IGFlcy5fdGFibGVzWzBdWzRdO1xuXHRcdGNvbnN0IGRlY1RhYmxlID0gYWVzLl90YWJsZXNbMV07XG5cdFx0Y29uc3Qga2V5TGVuID0ga2V5Lmxlbmd0aDtcblxuXHRcdGxldCBpLCBlbmNLZXksIGRlY0tleSwgcmNvbiA9IDE7XG5cblx0XHRpZiAoa2V5TGVuICE9PSA0ICYmIGtleUxlbiAhPT0gNiAmJiBrZXlMZW4gIT09IDgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImludmFsaWQgYWVzIGtleSBzaXplXCIpO1xuXHRcdH1cblxuXHRcdGFlcy5fa2V5ID0gW2VuY0tleSA9IGtleS5zbGljZSgwKSwgZGVjS2V5ID0gW11dO1xuXG5cdFx0Ly8gc2NoZWR1bGUgZW5jcnlwdGlvbiBrZXlzXG5cdFx0Zm9yIChpID0ga2V5TGVuOyBpIDwgNCAqIGtleUxlbiArIDI4OyBpKyspIHtcblx0XHRcdGxldCB0bXAgPSBlbmNLZXlbaSAtIDFdO1xuXG5cdFx0XHQvLyBhcHBseSBzYm94XG5cdFx0XHRpZiAoaSAlIGtleUxlbiA9PT0gMCB8fCAoa2V5TGVuID09PSA4ICYmIGkgJSBrZXlMZW4gPT09IDQpKSB7XG5cdFx0XHRcdHRtcCA9IHNib3hbdG1wID4+PiAyNF0gPDwgMjQgXiBzYm94W3RtcCA+PiAxNiAmIDI1NV0gPDwgMTYgXiBzYm94W3RtcCA+PiA4ICYgMjU1XSA8PCA4IF4gc2JveFt0bXAgJiAyNTVdO1xuXG5cdFx0XHRcdC8vIHNoaWZ0IHJvd3MgYW5kIGFkZCByY29uXG5cdFx0XHRcdGlmIChpICUga2V5TGVuID09PSAwKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wIDw8IDggXiB0bXAgPj4+IDI0IF4gcmNvbiA8PCAyNDtcblx0XHRcdFx0XHRyY29uID0gcmNvbiA8PCAxIF4gKHJjb24gPj4gNykgKiAyODM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0ZW5jS2V5W2ldID0gZW5jS2V5W2kgLSBrZXlMZW5dIF4gdG1wO1xuXHRcdH1cblxuXHRcdC8vIHNjaGVkdWxlIGRlY3J5cHRpb24ga2V5c1xuXHRcdGZvciAobGV0IGogPSAwOyBpOyBqKyssIGktLSkge1xuXHRcdFx0Y29uc3QgdG1wID0gZW5jS2V5W2ogJiAzID8gaSA6IGkgLSA0XTtcblx0XHRcdGlmIChpIDw9IDQgfHwgaiA8IDQpIHtcblx0XHRcdFx0ZGVjS2V5W2pdID0gdG1wO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVjS2V5W2pdID0gZGVjVGFibGVbMF1bc2JveFt0bXAgPj4+IDI0XV0gXlxuXHRcdFx0XHRcdGRlY1RhYmxlWzFdW3Nib3hbdG1wID4+IDE2ICYgMjU1XV0gXlxuXHRcdFx0XHRcdGRlY1RhYmxlWzJdW3Nib3hbdG1wID4+IDggJiAyNTVdXSBeXG5cdFx0XHRcdFx0ZGVjVGFibGVbM11bc2JveFt0bXAgJiAyNTVdXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Ly8gcHVibGljXG5cdC8qIFNvbWV0aGluZyBsaWtlIHRoaXMgbWlnaHQgYXBwZWFyIGhlcmUgZXZlbnR1YWxseVxuXHRuYW1lOiBcIkFFU1wiLFxuXHRibG9ja1NpemU6IDQsXG5cdGtleVNpemVzOiBbNCw2LDhdLFxuXHQqL1xuXG5cdC8qKlxuXHQgKiBFbmNyeXB0IGFuIGFycmF5IG9mIDQgYmlnLWVuZGlhbiB3b3Jkcy5cblx0ICogQHBhcmFtIHtBcnJheX0gZGF0YSBUaGUgcGxhaW50ZXh0LlxuXHQgKiBAcmV0dXJuIHtBcnJheX0gVGhlIGNpcGhlcnRleHQuXG5cdCAqL1xuXHRlbmNyeXB0KGRhdGEpIHtcblx0XHRyZXR1cm4gdGhpcy5fY3J5cHQoZGF0YSwgMCk7XG5cdH1cblxuXHQvKipcblx0ICogRGVjcnlwdCBhbiBhcnJheSBvZiA0IGJpZy1lbmRpYW4gd29yZHMuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgVGhlIGNpcGhlcnRleHQuXG5cdCAqIEByZXR1cm4ge0FycmF5fSBUaGUgcGxhaW50ZXh0LlxuXHQgKi9cblx0ZGVjcnlwdChkYXRhKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2NyeXB0KGRhdGEsIDEpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV4cGFuZCB0aGUgUy1ib3ggdGFibGVzLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3ByZWNvbXB1dGUoKSB7XG5cdFx0Y29uc3QgZW5jVGFibGUgPSB0aGlzLl90YWJsZXNbMF07XG5cdFx0Y29uc3QgZGVjVGFibGUgPSB0aGlzLl90YWJsZXNbMV07XG5cdFx0Y29uc3Qgc2JveCA9IGVuY1RhYmxlWzRdO1xuXHRcdGNvbnN0IHNib3hJbnYgPSBkZWNUYWJsZVs0XTtcblx0XHRjb25zdCBkID0gW107XG5cdFx0Y29uc3QgdGggPSBbXTtcblx0XHRsZXQgeEludiwgeDIsIHg0LCB4ODtcblxuXHRcdC8vIENvbXB1dGUgZG91YmxlIGFuZCB0aGlyZCB0YWJsZXNcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG5cdFx0XHR0aFsoZFtpXSA9IGkgPDwgMSBeIChpID4+IDcpICogMjgzKSBeIGldID0gaTtcblx0XHR9XG5cblx0XHRmb3IgKGxldCB4ID0geEludiA9IDA7ICFzYm94W3hdOyB4IF49IHgyIHx8IDEsIHhJbnYgPSB0aFt4SW52XSB8fCAxKSB7XG5cdFx0XHQvLyBDb21wdXRlIHNib3hcblx0XHRcdGxldCBzID0geEludiBeIHhJbnYgPDwgMSBeIHhJbnYgPDwgMiBeIHhJbnYgPDwgMyBeIHhJbnYgPDwgNDtcblx0XHRcdHMgPSBzID4+IDggXiBzICYgMjU1IF4gOTk7XG5cdFx0XHRzYm94W3hdID0gcztcblx0XHRcdHNib3hJbnZbc10gPSB4O1xuXG5cdFx0XHQvLyBDb21wdXRlIE1peENvbHVtbnNcblx0XHRcdHg4ID0gZFt4NCA9IGRbeDIgPSBkW3hdXV07XG5cdFx0XHRsZXQgdERlYyA9IHg4ICogMHgxMDEwMTAxIF4geDQgKiAweDEwMDAxIF4geDIgKiAweDEwMSBeIHggKiAweDEwMTAxMDA7XG5cdFx0XHRsZXQgdEVuYyA9IGRbc10gKiAweDEwMSBeIHMgKiAweDEwMTAxMDA7XG5cblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdFx0XHRcdGVuY1RhYmxlW2ldW3hdID0gdEVuYyA9IHRFbmMgPDwgMjQgXiB0RW5jID4+PiA4O1xuXHRcdFx0XHRkZWNUYWJsZVtpXVtzXSA9IHREZWMgPSB0RGVjIDw8IDI0IF4gdERlYyA+Pj4gODtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb21wYWN0aWZ5LiAgQ29uc2lkZXJhYmxlIHNwZWVkdXAgb24gRmlyZWZveC5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDU7IGkrKykge1xuXHRcdFx0ZW5jVGFibGVbaV0gPSBlbmNUYWJsZVtpXS5zbGljZSgwKTtcblx0XHRcdGRlY1RhYmxlW2ldID0gZGVjVGFibGVbaV0uc2xpY2UoMCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEVuY3J5cHRpb24gYW5kIGRlY3J5cHRpb24gY29yZS5cblx0ICogQHBhcmFtIHtBcnJheX0gaW5wdXQgRm91ciB3b3JkcyB0byBiZSBlbmNyeXB0ZWQgb3IgZGVjcnlwdGVkLlxuXHQgKiBAcGFyYW0gZGlyIFRoZSBkaXJlY3Rpb24sIDAgZm9yIGVuY3J5cHQgYW5kIDEgZm9yIGRlY3J5cHQuXG5cdCAqIEByZXR1cm4ge0FycmF5fSBUaGUgZm91ciBlbmNyeXB0ZWQgb3IgZGVjcnlwdGVkIHdvcmRzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2NyeXB0KGlucHV0LCBkaXIpIHtcblx0XHRpZiAoaW5wdXQubGVuZ3RoICE9PSA0KSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGFlcyBibG9jayBzaXplXCIpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGtleSA9IHRoaXMuX2tleVtkaXJdO1xuXG5cdFx0Y29uc3QgbklubmVyUm91bmRzID0ga2V5Lmxlbmd0aCAvIDQgLSAyO1xuXHRcdGNvbnN0IG91dCA9IFswLCAwLCAwLCAwXTtcblx0XHRjb25zdCB0YWJsZSA9IHRoaXMuX3RhYmxlc1tkaXJdO1xuXG5cdFx0Ly8gbG9hZCB1cCB0aGUgdGFibGVzXG5cdFx0Y29uc3QgdDAgPSB0YWJsZVswXTtcblx0XHRjb25zdCB0MSA9IHRhYmxlWzFdO1xuXHRcdGNvbnN0IHQyID0gdGFibGVbMl07XG5cdFx0Y29uc3QgdDMgPSB0YWJsZVszXTtcblx0XHRjb25zdCBzYm94ID0gdGFibGVbNF07XG5cblx0XHQvLyBzdGF0ZSB2YXJpYWJsZXMgYSxiLGMsZCBhcmUgbG9hZGVkIHdpdGggcHJlLXdoaXRlbmVkIGRhdGFcblx0XHRsZXQgYSA9IGlucHV0WzBdIF4ga2V5WzBdO1xuXHRcdGxldCBiID0gaW5wdXRbZGlyID8gMyA6IDFdIF4ga2V5WzFdO1xuXHRcdGxldCBjID0gaW5wdXRbMl0gXiBrZXlbMl07XG5cdFx0bGV0IGQgPSBpbnB1dFtkaXIgPyAxIDogM10gXiBrZXlbM107XG5cdFx0bGV0IGtJbmRleCA9IDQ7XG5cdFx0bGV0IGEyLCBiMiwgYzI7XG5cblx0XHQvLyBJbm5lciByb3VuZHMuICBDcmliYmVkIGZyb20gT3BlblNTTC5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5Jbm5lclJvdW5kczsgaSsrKSB7XG5cdFx0XHRhMiA9IHQwW2EgPj4+IDI0XSBeIHQxW2IgPj4gMTYgJiAyNTVdIF4gdDJbYyA+PiA4ICYgMjU1XSBeIHQzW2QgJiAyNTVdIF4ga2V5W2tJbmRleF07XG5cdFx0XHRiMiA9IHQwW2IgPj4+IDI0XSBeIHQxW2MgPj4gMTYgJiAyNTVdIF4gdDJbZCA+PiA4ICYgMjU1XSBeIHQzW2EgJiAyNTVdIF4ga2V5W2tJbmRleCArIDFdO1xuXHRcdFx0YzIgPSB0MFtjID4+PiAyNF0gXiB0MVtkID4+IDE2ICYgMjU1XSBeIHQyW2EgPj4gOCAmIDI1NV0gXiB0M1tiICYgMjU1XSBeIGtleVtrSW5kZXggKyAyXTtcblx0XHRcdGQgPSB0MFtkID4+PiAyNF0gXiB0MVthID4+IDE2ICYgMjU1XSBeIHQyW2IgPj4gOCAmIDI1NV0gXiB0M1tjICYgMjU1XSBeIGtleVtrSW5kZXggKyAzXTtcblx0XHRcdGtJbmRleCArPSA0O1xuXHRcdFx0YSA9IGEyOyBiID0gYjI7IGMgPSBjMjtcblx0XHR9XG5cblx0XHQvLyBMYXN0IHJvdW5kLlxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdFx0XHRvdXRbZGlyID8gMyAmIC1pIDogaV0gPVxuXHRcdFx0XHRzYm94W2EgPj4+IDI0XSA8PCAyNCBeXG5cdFx0XHRcdHNib3hbYiA+PiAxNiAmIDI1NV0gPDwgMTYgXlxuXHRcdFx0XHRzYm94W2MgPj4gOCAmIDI1NV0gPDwgOCBeXG5cdFx0XHRcdHNib3hbZCAmIDI1NV0gXlxuXHRcdFx0XHRrZXlba0luZGV4KytdO1xuXHRcdFx0YTIgPSBhOyBhID0gYjsgYiA9IGM7IGMgPSBkOyBkID0gYTI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dDtcblx0fVxufTtcblxuLyoqXG4gKiBSYW5kb20gdmFsdWVzXG4gKiBAbmFtZXNwYWNlXG4gKi9cbmNvbnN0IHJhbmRvbSA9IHtcblx0LyoqIFxuXHQgKiBHZW5lcmF0ZSByYW5kb20gd29yZHMgd2l0aCBwdXJlIGpzLCBjcnlwdG9ncmFwaGljYWxseSBub3QgYXMgc3Ryb25nICYgc2FmZSBhcyBuYXRpdmUgaW1wbGVtZW50YXRpb24uXG5cdCAqIEBwYXJhbSB7VHlwZWRBcnJheX0gdHlwZWRBcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cblx0ICogQHJldHVybiB7VHlwZWRBcnJheX0gVGhlIHJhbmRvbSB2YWx1ZXMuXG5cdCAqL1xuXHRnZXRSYW5kb21WYWx1ZXModHlwZWRBcnJheSkge1xuXHRcdGNvbnN0IHdvcmRzID0gbmV3IFVpbnQzMkFycmF5KHR5cGVkQXJyYXkuYnVmZmVyKTtcblx0XHRjb25zdCByID0gKG1fdykgPT4ge1xuXHRcdFx0bGV0IG1feiA9IDB4M2FkZTY4YjE7XG5cdFx0XHRjb25zdCBtYXNrID0gMHhmZmZmZmZmZjtcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdG1feiA9ICgweDkwNjkgKiAobV96ICYgMHhGRkZGKSArIChtX3ogPj4gMHgxMCkpICYgbWFzaztcblx0XHRcdFx0bV93ID0gKDB4NDY1MCAqIChtX3cgJiAweEZGRkYpICsgKG1fdyA+PiAweDEwKSkgJiBtYXNrO1xuXHRcdFx0XHRjb25zdCByZXN1bHQgPSAoKCgobV96IDw8IDB4MTApICsgbV93KSAmIG1hc2spIC8gMHgxMDAwMDAwMDApICsgLjU7XG5cdFx0XHRcdHJldHVybiByZXN1bHQgKiAoTWF0aC5yYW5kb20oKSA+IC41ID8gMSA6IC0xKTtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRmb3IgKGxldCBpID0gMCwgcmNhY2hlOyBpIDwgdHlwZWRBcnJheS5sZW5ndGg7IGkgKz0gNCkge1xuXHRcdFx0Y29uc3QgX3IgPSByKChyY2FjaGUgfHwgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwMDAwMCk7XG5cdFx0XHRyY2FjaGUgPSBfcigpICogMHgzYWRlNjdiNztcblx0XHRcdHdvcmRzW2kgLyA0XSA9IChfcigpICogMHgxMDAwMDAwMDApIHwgMDtcblx0XHR9XG5cdFx0cmV0dXJuIHR5cGVkQXJyYXk7XG5cdH1cbn07XG5cbi8qKiBAZmlsZU92ZXJ2aWV3IENUUiBtb2RlIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIFNwZWNpYWwgdGhhbmtzIHRvIFJveSBOaWNob2xzb24gZm9yIHBvaW50aW5nIG91dCBhIGJ1ZyBpbiBvdXJcbiAqIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBhdXRob3IgRW1pbHkgU3RhcmtcbiAqIEBhdXRob3IgTWlrZSBIYW1idXJnXG4gKiBAYXV0aG9yIERhbiBCb25laFxuICovXG5cbi8qKiBCcmlhbiBHbGFkbWFuJ3MgQ1RSIE1vZGUuXG4qIEBjb25zdHJ1Y3RvclxuKiBAcGFyYW0ge09iamVjdH0gX3ByZiBUaGUgYWVzIGluc3RhbmNlIHRvIGdlbmVyYXRlIGtleS5cbiogQHBhcmFtIHtiaXRBcnJheX0gX2l2IFRoZSBpdiBmb3IgY3RyIG1vZGUsIGl0IG11c3QgYmUgMTI4IGJpdHMuXG4qL1xuXG5jb25zdCBtb2RlID0ge307XG5cbi8qKlxuICogQnJpYW4gR2xhZG1hbidzIENUUiBNb2RlLlxuICogQG5hbWVzcGFjZVxuICovXG5tb2RlLmN0ckdsYWRtYW4gPSBjbGFzcyB7XG5cdGNvbnN0cnVjdG9yKHByZiwgaXYpIHtcblx0XHR0aGlzLl9wcmYgPSBwcmY7XG5cdFx0dGhpcy5faW5pdEl2ID0gaXY7XG5cdFx0dGhpcy5faXYgPSBpdjtcblx0fVxuXG5cdHJlc2V0KCkge1xuXHRcdHRoaXMuX2l2ID0gdGhpcy5faW5pdEl2O1xuXHR9XG5cblx0LyoqIElucHV0IHNvbWUgZGF0YSB0byBjYWxjdWxhdGUuXG5cdCAqIEBwYXJhbSB7Yml0QXJyYXl9IGRhdGEgdGhlIGRhdGEgdG8gcHJvY2VzcywgaXQgbXVzdCBiZSBpbnRlcmdyYWwgbXVsdGlwbGUgb2YgMTI4IGJpdHMgdW5sZXNzIGl0J3MgdGhlIGxhc3QuXG5cdCAqL1xuXHR1cGRhdGUoZGF0YSkge1xuXHRcdHJldHVybiB0aGlzLmNhbGN1bGF0ZSh0aGlzLl9wcmYsIGRhdGEsIHRoaXMuX2l2KTtcblx0fVxuXG5cdGluY1dvcmQod29yZCkge1xuXHRcdGlmICgoKHdvcmQgPj4gMjQpICYgMHhmZikgPT09IDB4ZmYpIHsgLy9vdmVyZmxvd1xuXHRcdFx0bGV0IGIxID0gKHdvcmQgPj4gMTYpICYgMHhmZjtcblx0XHRcdGxldCBiMiA9ICh3b3JkID4+IDgpICYgMHhmZjtcblx0XHRcdGxldCBiMyA9IHdvcmQgJiAweGZmO1xuXG5cdFx0XHRpZiAoYjEgPT09IDB4ZmYpIHsgLy8gb3ZlcmZsb3cgYjEgICBcblx0XHRcdFx0YjEgPSAwO1xuXHRcdFx0XHRpZiAoYjIgPT09IDB4ZmYpIHtcblx0XHRcdFx0XHRiMiA9IDA7XG5cdFx0XHRcdFx0aWYgKGIzID09PSAweGZmKSB7XG5cdFx0XHRcdFx0XHRiMyA9IDA7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdCsrYjM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCsrYjI7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCsrYjE7XG5cdFx0XHR9XG5cblx0XHRcdHdvcmQgPSAwO1xuXHRcdFx0d29yZCArPSAoYjEgPDwgMTYpO1xuXHRcdFx0d29yZCArPSAoYjIgPDwgOCk7XG5cdFx0XHR3b3JkICs9IGIzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3b3JkICs9ICgweDAxIDw8IDI0KTtcblx0XHR9XG5cdFx0cmV0dXJuIHdvcmQ7XG5cdH1cblxuXHRpbmNDb3VudGVyKGNvdW50ZXIpIHtcblx0XHRpZiAoKGNvdW50ZXJbMF0gPSB0aGlzLmluY1dvcmQoY291bnRlclswXSkpID09PSAwKSB7XG5cdFx0XHQvLyBlbmNyX2RhdGEgaW4gZmlsZWVuYy5jIGZyb20gIERyIEJyaWFuIEdsYWRtYW4ncyBjb3VudHMgb25seSB3aXRoIERXT1JEIGogPCA4XG5cdFx0XHRjb3VudGVyWzFdID0gdGhpcy5pbmNXb3JkKGNvdW50ZXJbMV0pO1xuXHRcdH1cblx0fVxuXG5cdGNhbGN1bGF0ZShwcmYsIGRhdGEsIGl2KSB7XG5cdFx0bGV0IGw7XG5cdFx0aWYgKCEobCA9IGRhdGEubGVuZ3RoKSkge1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH1cblx0XHRjb25zdCBibCA9IGJpdEFycmF5LmJpdExlbmd0aChkYXRhKTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkgKz0gNCkge1xuXHRcdFx0dGhpcy5pbmNDb3VudGVyKGl2KTtcblx0XHRcdGNvbnN0IGUgPSBwcmYuZW5jcnlwdChpdik7XG5cdFx0XHRkYXRhW2ldIF49IGVbMF07XG5cdFx0XHRkYXRhW2kgKyAxXSBePSBlWzFdO1xuXHRcdFx0ZGF0YVtpICsgMl0gXj0gZVsyXTtcblx0XHRcdGRhdGFbaSArIDNdIF49IGVbM107XG5cdFx0fVxuXHRcdHJldHVybiBiaXRBcnJheS5jbGFtcChkYXRhLCBibCk7XG5cdH1cbn07XG5cbmNvbnN0IG1pc2MgPSB7XG5cdGltcG9ydEtleShwYXNzd29yZCkge1xuXHRcdHJldHVybiBuZXcgbWlzYy5obWFjU2hhMShjb2RlYy5ieXRlcy50b0JpdHMocGFzc3dvcmQpKTtcblx0fSxcblx0cGJrZGYyKHByZiwgc2FsdCwgY291bnQsIGxlbmd0aCkge1xuXHRcdGNvdW50ID0gY291bnQgfHwgMTAwMDA7XG5cdFx0aWYgKGxlbmd0aCA8IDAgfHwgY291bnQgPCAwKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHBhcmFtcyB0byBwYmtkZjJcIik7XG5cdFx0fVxuXHRcdGNvbnN0IGJ5dGVMZW5ndGggPSAoKGxlbmd0aCA+PiA1KSArIDEpIDw8IDI7XG5cdFx0bGV0IHUsIHVpLCBpLCBqLCBrO1xuXHRcdGNvbnN0IGFycmF5QnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuXHRcdGNvbnN0IG91dCA9IG5ldyBEYXRhVmlldyhhcnJheUJ1ZmZlcik7XG5cdFx0bGV0IG91dExlbmd0aCA9IDA7XG5cdFx0Y29uc3QgYiA9IGJpdEFycmF5O1xuXHRcdHNhbHQgPSBjb2RlYy5ieXRlcy50b0JpdHMoc2FsdCk7XG5cdFx0Zm9yIChrID0gMTsgb3V0TGVuZ3RoIDwgKGJ5dGVMZW5ndGggfHwgMSk7IGsrKykge1xuXHRcdFx0dSA9IHVpID0gcHJmLmVuY3J5cHQoYi5jb25jYXQoc2FsdCwgW2tdKSk7XG5cdFx0XHRmb3IgKGkgPSAxOyBpIDwgY291bnQ7IGkrKykge1xuXHRcdFx0XHR1aSA9IHByZi5lbmNyeXB0KHVpKTtcblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IHVpLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0dVtqXSBePSB1aVtqXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Zm9yIChpID0gMDsgb3V0TGVuZ3RoIDwgKGJ5dGVMZW5ndGggfHwgMSkgJiYgaSA8IHUubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0b3V0LnNldEludDMyKG91dExlbmd0aCwgdVtpXSk7XG5cdFx0XHRcdG91dExlbmd0aCArPSA0O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gYXJyYXlCdWZmZXIuc2xpY2UoMCwgbGVuZ3RoIC8gOCk7XG5cdH1cbn07XG5cbi8qKiBAZmlsZU92ZXJ2aWV3IEhNQUMgaW1wbGVtZW50YXRpb24uXG4gKlxuICogQGF1dGhvciBFbWlseSBTdGFya1xuICogQGF1dGhvciBNaWtlIEhhbWJ1cmdcbiAqIEBhdXRob3IgRGFuIEJvbmVoXG4gKi9cblxuLyoqIEhNQUMgd2l0aCB0aGUgc3BlY2lmaWVkIGhhc2ggZnVuY3Rpb24uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7Yml0QXJyYXl9IGtleSB0aGUga2V5IGZvciBITUFDLlxuICogQHBhcmFtIHtPYmplY3R9IFtIYXNoPWhhc2guc2hhMV0gVGhlIGhhc2ggZnVuY3Rpb24gdG8gdXNlLlxuICovXG5taXNjLmhtYWNTaGExID0gY2xhc3Mge1xuXG5cdGNvbnN0cnVjdG9yKGtleSkge1xuXHRcdGNvbnN0IGhtYWMgPSB0aGlzO1xuXHRcdGNvbnN0IEhhc2ggPSBobWFjLl9oYXNoID0gaGFzaC5zaGExO1xuXHRcdGNvbnN0IGV4S2V5ID0gW1tdLCBbXV07XG5cdFx0aG1hYy5fYmFzZUhhc2ggPSBbbmV3IEhhc2goKSwgbmV3IEhhc2goKV07XG5cdFx0Y29uc3QgYnMgPSBobWFjLl9iYXNlSGFzaFswXS5ibG9ja1NpemUgLyAzMjtcblxuXHRcdGlmIChrZXkubGVuZ3RoID4gYnMpIHtcblx0XHRcdGtleSA9IG5ldyBIYXNoKCkudXBkYXRlKGtleSkuZmluYWxpemUoKTtcblx0XHR9XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGJzOyBpKyspIHtcblx0XHRcdGV4S2V5WzBdW2ldID0ga2V5W2ldIF4gMHgzNjM2MzYzNjtcblx0XHRcdGV4S2V5WzFdW2ldID0ga2V5W2ldIF4gMHg1QzVDNUM1Qztcblx0XHR9XG5cblx0XHRobWFjLl9iYXNlSGFzaFswXS51cGRhdGUoZXhLZXlbMF0pO1xuXHRcdGhtYWMuX2Jhc2VIYXNoWzFdLnVwZGF0ZShleEtleVsxXSk7XG5cdFx0aG1hYy5fcmVzdWx0SGFzaCA9IG5ldyBIYXNoKGhtYWMuX2Jhc2VIYXNoWzBdKTtcblx0fVxuXHRyZXNldCgpIHtcblx0XHRjb25zdCBobWFjID0gdGhpcztcblx0XHRobWFjLl9yZXN1bHRIYXNoID0gbmV3IGhtYWMuX2hhc2goaG1hYy5fYmFzZUhhc2hbMF0pO1xuXHRcdGhtYWMuX3VwZGF0ZWQgPSBmYWxzZTtcblx0fVxuXG5cdHVwZGF0ZShkYXRhKSB7XG5cdFx0Y29uc3QgaG1hYyA9IHRoaXM7XG5cdFx0aG1hYy5fdXBkYXRlZCA9IHRydWU7XG5cdFx0aG1hYy5fcmVzdWx0SGFzaC51cGRhdGUoZGF0YSk7XG5cdH1cblxuXHRkaWdlc3QoKSB7XG5cdFx0Y29uc3QgaG1hYyA9IHRoaXM7XG5cdFx0Y29uc3QgdyA9IGhtYWMuX3Jlc3VsdEhhc2guZmluYWxpemUoKTtcblx0XHRjb25zdCByZXN1bHQgPSBuZXcgKGhtYWMuX2hhc2gpKGhtYWMuX2Jhc2VIYXNoWzFdKS51cGRhdGUodykuZmluYWxpemUoKTtcblxuXHRcdGhtYWMucmVzZXQoKTtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRlbmNyeXB0KGRhdGEpIHtcblx0XHRpZiAoIXRoaXMuX3VwZGF0ZWQpIHtcblx0XHRcdHRoaXMudXBkYXRlKGRhdGEpO1xuXHRcdFx0cmV0dXJuIHRoaXMuZGlnZXN0KGRhdGEpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJlbmNyeXB0IG9uIGFscmVhZHkgdXBkYXRlZCBobWFjIGNhbGxlZCFcIik7XG5cdFx0fVxuXHR9XG59O1xuXG5leHBvcnQge1xuXHRjaXBoZXIsXG5cdGNvZGVjLFxuXHRtaXNjLFxuXHRtb2RlLFxuXHRyYW5kb21cbn07IiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4vKiBnbG9iYWwgY3J5cHRvICovXG5cbmltcG9ydCB7XG5cdHJhbmRvbVxufSBmcm9tIFwiLi9jb2RlY3Mvc2pjbC5qc1wiO1xuXG5jb25zdCBHRVRfUkFORE9NX1ZBTFVFU19TVVBQT1JURUQgPSB0eXBlb2YgY3J5cHRvICE9IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT0gXCJmdW5jdGlvblwiO1xuXG5jb25zdCBFUlJfSU5WQUxJRF9QQVNTV09SRCA9IFwiSW52YWxpZCBwYXNzd29yZFwiO1xuY29uc3QgRVJSX0lOVkFMSURfU0lHTkFUVVJFID0gXCJJbnZhbGlkIHNpZ25hdHVyZVwiO1xuY29uc3QgRVJSX0FCT1JUX0NIRUNLX1BBU1NXT1JEID0gXCJ6aXBqcy1hYm9ydC1jaGVjay1wYXNzd29yZFwiO1xuXG5leHBvcnQge1xuXHRnZXRSYW5kb21WYWx1ZXMsXG5cdEVSUl9JTlZBTElEX1BBU1NXT1JELFxuXHRFUlJfSU5WQUxJRF9TSUdOQVRVUkUsXG5cdEVSUl9BQk9SVF9DSEVDS19QQVNTV09SRFxufTtcblxuZnVuY3Rpb24gZ2V0UmFuZG9tVmFsdWVzKGFycmF5KSB7XG5cdGlmIChHRVRfUkFORE9NX1ZBTFVFU19TVVBQT1JURUQpIHtcblx0XHRyZXR1cm4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHJhbmRvbS5nZXRSYW5kb21WYWx1ZXMoYXJyYXkpO1xuXHR9XG59IiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4vKiBnbG9iYWwgY3J5cHRvLCBUcmFuc2Zvcm1TdHJlYW0gKi9cbi8vIGRlbm8tbGludC1pZ25vcmUtZmlsZSBuby10aGlzLWFsaWFzXG5cbmltcG9ydCB7IGVuY29kZVRleHQgfSBmcm9tIFwiLi8uLi91dGlsL2VuY29kZS10ZXh0LmpzXCI7XG5pbXBvcnQge1xuXHRjaXBoZXIsXG5cdGNvZGVjLFxuXHRtaXNjLFxuXHRtb2RlXG59IGZyb20gXCIuL2NvZGVjcy9zamNsLmpzXCI7XG5pbXBvcnQge1xuXHRFUlJfSU5WQUxJRF9QQVNTV09SRCxcblx0RVJSX0lOVkFMSURfU0lHTkFUVVJFLFxuXHRFUlJfQUJPUlRfQ0hFQ0tfUEFTU1dPUkQsXG5cdGdldFJhbmRvbVZhbHVlc1xufSBmcm9tIFwiLi9jb21tb24tY3J5cHRvLmpzXCI7XG5cbmNvbnN0IEJMT0NLX0xFTkdUSCA9IDE2O1xuY29uc3QgUkFXX0ZPUk1BVCA9IFwicmF3XCI7XG5jb25zdCBQQktERjJfQUxHT1JJVEhNID0geyBuYW1lOiBcIlBCS0RGMlwiIH07XG5jb25zdCBIQVNIX0FMR09SSVRITSA9IHsgbmFtZTogXCJITUFDXCIgfTtcbmNvbnN0IEhBU0hfRlVOQ1RJT04gPSBcIlNIQS0xXCI7XG5jb25zdCBCQVNFX0tFWV9BTEdPUklUSE0gPSBPYmplY3QuYXNzaWduKHsgaGFzaDogSEFTSF9BTEdPUklUSE0gfSwgUEJLREYyX0FMR09SSVRITSk7XG5jb25zdCBERVJJVkVEX0JJVFNfQUxHT1JJVEhNID0gT2JqZWN0LmFzc2lnbih7IGl0ZXJhdGlvbnM6IDEwMDAsIGhhc2g6IHsgbmFtZTogSEFTSF9GVU5DVElPTiB9IH0sIFBCS0RGMl9BTEdPUklUSE0pO1xuY29uc3QgREVSSVZFRF9CSVRTX1VTQUdFID0gW1wiZGVyaXZlQml0c1wiXTtcbmNvbnN0IFNBTFRfTEVOR1RIID0gWzgsIDEyLCAxNl07XG5jb25zdCBLRVlfTEVOR1RIID0gWzE2LCAyNCwgMzJdO1xuY29uc3QgU0lHTkFUVVJFX0xFTkdUSCA9IDEwO1xuY29uc3QgQ09VTlRFUl9ERUZBVUxUX1ZBTFVFID0gWzAsIDAsIDAsIDBdO1xuY29uc3QgVU5ERUZJTkVEX1RZUEUgPSBcInVuZGVmaW5lZFwiO1xuY29uc3QgRlVOQ1RJT05fVFlQRSA9IFwiZnVuY3Rpb25cIjtcbi8vIGRlbm8tbGludC1pZ25vcmUgdmFsaWQtdHlwZW9mXG5jb25zdCBDUllQVE9fQVBJX1NVUFBPUlRFRCA9IHR5cGVvZiBjcnlwdG8gIT0gVU5ERUZJTkVEX1RZUEU7XG5jb25zdCBzdWJ0bGUgPSBDUllQVE9fQVBJX1NVUFBPUlRFRCAmJiBjcnlwdG8uc3VidGxlO1xuY29uc3QgU1VCVExFX0FQSV9TVVBQT1JURUQgPSBDUllQVE9fQVBJX1NVUFBPUlRFRCAmJiB0eXBlb2Ygc3VidGxlICE9IFVOREVGSU5FRF9UWVBFO1xuY29uc3QgY29kZWNCeXRlcyA9IGNvZGVjLmJ5dGVzO1xuY29uc3QgQWVzID0gY2lwaGVyLmFlcztcbmNvbnN0IEN0ckdsYWRtYW4gPSBtb2RlLmN0ckdsYWRtYW47XG5jb25zdCBIbWFjU2hhMSA9IG1pc2MuaG1hY1NoYTE7XG5cbmxldCBJTVBPUlRfS0VZX1NVUFBPUlRFRCA9IENSWVBUT19BUElfU1VQUE9SVEVEICYmIFNVQlRMRV9BUElfU1VQUE9SVEVEICYmIHR5cGVvZiBzdWJ0bGUuaW1wb3J0S2V5ID09IEZVTkNUSU9OX1RZUEU7XG5sZXQgREVSSVZFX0JJVFNfU1VQUE9SVEVEID0gQ1JZUFRPX0FQSV9TVVBQT1JURUQgJiYgU1VCVExFX0FQSV9TVVBQT1JURUQgJiYgdHlwZW9mIHN1YnRsZS5kZXJpdmVCaXRzID09IEZVTkNUSU9OX1RZUEU7XG5cbmNsYXNzIEFFU0RlY3J5cHRpb25TdHJlYW0gZXh0ZW5kcyBUcmFuc2Zvcm1TdHJlYW0ge1xuXG5cdGNvbnN0cnVjdG9yKHsgcGFzc3dvcmQsIHNpZ25lZCwgZW5jcnlwdGlvblN0cmVuZ3RoLCBjaGVja1Bhc3N3b3JkT25seSB9KSB7XG5cdFx0c3VwZXIoe1xuXHRcdFx0c3RhcnQoKSB7XG5cdFx0XHRcdE9iamVjdC5hc3NpZ24odGhpcywge1xuXHRcdFx0XHRcdHJlYWR5OiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHRoaXMucmVzb2x2ZVJlYWR5ID0gcmVzb2x2ZSksXG5cdFx0XHRcdFx0cGFzc3dvcmQsXG5cdFx0XHRcdFx0c2lnbmVkLFxuXHRcdFx0XHRcdHN0cmVuZ3RoOiBlbmNyeXB0aW9uU3RyZW5ndGggLSAxLFxuXHRcdFx0XHRcdHBlbmRpbmc6IG5ldyBVaW50OEFycmF5KClcblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXHRcdFx0YXN5bmMgdHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG5cdFx0XHRcdGNvbnN0IGFlc0NyeXB0byA9IHRoaXM7XG5cdFx0XHRcdGNvbnN0IHtcblx0XHRcdFx0XHRwYXNzd29yZCxcblx0XHRcdFx0XHRzdHJlbmd0aCxcblx0XHRcdFx0XHRyZXNvbHZlUmVhZHksXG5cdFx0XHRcdFx0cmVhZHlcblx0XHRcdFx0fSA9IGFlc0NyeXB0bztcblx0XHRcdFx0aWYgKHBhc3N3b3JkKSB7XG5cdFx0XHRcdFx0YXdhaXQgY3JlYXRlRGVjcnlwdGlvbktleXMoYWVzQ3J5cHRvLCBzdHJlbmd0aCwgcGFzc3dvcmQsIHN1YmFycmF5KGNodW5rLCAwLCBTQUxUX0xFTkdUSFtzdHJlbmd0aF0gKyAyKSk7XG5cdFx0XHRcdFx0Y2h1bmsgPSBzdWJhcnJheShjaHVuaywgU0FMVF9MRU5HVEhbc3RyZW5ndGhdICsgMik7XG5cdFx0XHRcdFx0aWYgKGNoZWNrUGFzc3dvcmRPbmx5KSB7XG5cdFx0XHRcdFx0XHRjb250cm9sbGVyLmVycm9yKG5ldyBFcnJvcihFUlJfQUJPUlRfQ0hFQ0tfUEFTU1dPUkQpKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzb2x2ZVJlYWR5KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGF3YWl0IHJlYWR5O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IG91dHB1dCA9IG5ldyBVaW50OEFycmF5KGNodW5rLmxlbmd0aCAtIFNJR05BVFVSRV9MRU5HVEggLSAoKGNodW5rLmxlbmd0aCAtIFNJR05BVFVSRV9MRU5HVEgpICUgQkxPQ0tfTEVOR1RIKSk7XG5cdFx0XHRcdGNvbnRyb2xsZXIuZW5xdWV1ZShhcHBlbmQoYWVzQ3J5cHRvLCBjaHVuaywgb3V0cHV0LCAwLCBTSUdOQVRVUkVfTEVOR1RILCB0cnVlKSk7XG5cdFx0XHR9LFxuXHRcdFx0YXN5bmMgZmx1c2goY29udHJvbGxlcikge1xuXHRcdFx0XHRjb25zdCB7XG5cdFx0XHRcdFx0c2lnbmVkLFxuXHRcdFx0XHRcdGN0cixcblx0XHRcdFx0XHRobWFjLFxuXHRcdFx0XHRcdHBlbmRpbmcsXG5cdFx0XHRcdFx0cmVhZHlcblx0XHRcdFx0fSA9IHRoaXM7XG5cdFx0XHRcdGlmIChobWFjICYmIGN0cikge1xuXHRcdFx0XHRcdGF3YWl0IHJlYWR5O1xuXHRcdFx0XHRcdGNvbnN0IGNodW5rVG9EZWNyeXB0ID0gc3ViYXJyYXkocGVuZGluZywgMCwgcGVuZGluZy5sZW5ndGggLSBTSUdOQVRVUkVfTEVOR1RIKTtcblx0XHRcdFx0XHRjb25zdCBvcmlnaW5hbFNpZ25hdHVyZSA9IHN1YmFycmF5KHBlbmRpbmcsIHBlbmRpbmcubGVuZ3RoIC0gU0lHTkFUVVJFX0xFTkdUSCk7XG5cdFx0XHRcdFx0bGV0IGRlY3J5cHRlZENodW5rQXJyYXkgPSBuZXcgVWludDhBcnJheSgpO1xuXHRcdFx0XHRcdGlmIChjaHVua1RvRGVjcnlwdC5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdGNvbnN0IGVuY3J5cHRlZENodW5rID0gdG9CaXRzKGNvZGVjQnl0ZXMsIGNodW5rVG9EZWNyeXB0KTtcblx0XHRcdFx0XHRcdGhtYWMudXBkYXRlKGVuY3J5cHRlZENodW5rKTtcblx0XHRcdFx0XHRcdGNvbnN0IGRlY3J5cHRlZENodW5rID0gY3RyLnVwZGF0ZShlbmNyeXB0ZWRDaHVuayk7XG5cdFx0XHRcdFx0XHRkZWNyeXB0ZWRDaHVua0FycmF5ID0gZnJvbUJpdHMoY29kZWNCeXRlcywgZGVjcnlwdGVkQ2h1bmspO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoc2lnbmVkKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBzaWduYXR1cmUgPSBzdWJhcnJheShmcm9tQml0cyhjb2RlY0J5dGVzLCBobWFjLmRpZ2VzdCgpKSwgMCwgU0lHTkFUVVJFX0xFTkdUSCk7XG5cdFx0XHRcdFx0XHRmb3IgKGxldCBpbmRleFNpZ25hdHVyZSA9IDA7IGluZGV4U2lnbmF0dXJlIDwgU0lHTkFUVVJFX0xFTkdUSDsgaW5kZXhTaWduYXR1cmUrKykge1xuXHRcdFx0XHRcdFx0XHRpZiAoc2lnbmF0dXJlW2luZGV4U2lnbmF0dXJlXSAhPSBvcmlnaW5hbFNpZ25hdHVyZVtpbmRleFNpZ25hdHVyZV0pIHtcblx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0lOVkFMSURfU0lHTkFUVVJFKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb250cm9sbGVyLmVucXVldWUoZGVjcnlwdGVkQ2h1bmtBcnJheSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuXG5jbGFzcyBBRVNFbmNyeXB0aW9uU3RyZWFtIGV4dGVuZHMgVHJhbnNmb3JtU3RyZWFtIHtcblxuXHRjb25zdHJ1Y3Rvcih7IHBhc3N3b3JkLCBlbmNyeXB0aW9uU3RyZW5ndGggfSkge1xuXHRcdC8vIGRlbm8tbGludC1pZ25vcmUgcHJlZmVyLWNvbnN0XG5cdFx0bGV0IHN0cmVhbTtcblx0XHRzdXBlcih7XG5cdFx0XHRzdGFydCgpIHtcblx0XHRcdFx0T2JqZWN0LmFzc2lnbih0aGlzLCB7XG5cdFx0XHRcdFx0cmVhZHk6IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gdGhpcy5yZXNvbHZlUmVhZHkgPSByZXNvbHZlKSxcblx0XHRcdFx0XHRwYXNzd29yZCxcblx0XHRcdFx0XHRzdHJlbmd0aDogZW5jcnlwdGlvblN0cmVuZ3RoIC0gMSxcblx0XHRcdFx0XHRwZW5kaW5nOiBuZXcgVWludDhBcnJheSgpXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSxcblx0XHRcdGFzeW5jIHRyYW5zZm9ybShjaHVuaywgY29udHJvbGxlcikge1xuXHRcdFx0XHRjb25zdCBhZXNDcnlwdG8gPSB0aGlzO1xuXHRcdFx0XHRjb25zdCB7XG5cdFx0XHRcdFx0cGFzc3dvcmQsXG5cdFx0XHRcdFx0c3RyZW5ndGgsXG5cdFx0XHRcdFx0cmVzb2x2ZVJlYWR5LFxuXHRcdFx0XHRcdHJlYWR5XG5cdFx0XHRcdH0gPSBhZXNDcnlwdG87XG5cdFx0XHRcdGxldCBwcmVhbWJsZSA9IG5ldyBVaW50OEFycmF5KCk7XG5cdFx0XHRcdGlmIChwYXNzd29yZCkge1xuXHRcdFx0XHRcdHByZWFtYmxlID0gYXdhaXQgY3JlYXRlRW5jcnlwdGlvbktleXMoYWVzQ3J5cHRvLCBzdHJlbmd0aCwgcGFzc3dvcmQpO1xuXHRcdFx0XHRcdHJlc29sdmVSZWFkeSgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGF3YWl0IHJlYWR5O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IG91dHB1dCA9IG5ldyBVaW50OEFycmF5KHByZWFtYmxlLmxlbmd0aCArIGNodW5rLmxlbmd0aCAtIChjaHVuay5sZW5ndGggJSBCTE9DS19MRU5HVEgpKTtcblx0XHRcdFx0b3V0cHV0LnNldChwcmVhbWJsZSwgMCk7XG5cdFx0XHRcdGNvbnRyb2xsZXIuZW5xdWV1ZShhcHBlbmQoYWVzQ3J5cHRvLCBjaHVuaywgb3V0cHV0LCBwcmVhbWJsZS5sZW5ndGgsIDApKTtcblx0XHRcdH0sXG5cdFx0XHRhc3luYyBmbHVzaChjb250cm9sbGVyKSB7XG5cdFx0XHRcdGNvbnN0IHtcblx0XHRcdFx0XHRjdHIsXG5cdFx0XHRcdFx0aG1hYyxcblx0XHRcdFx0XHRwZW5kaW5nLFxuXHRcdFx0XHRcdHJlYWR5XG5cdFx0XHRcdH0gPSB0aGlzO1xuXHRcdFx0XHRpZiAoaG1hYyAmJiBjdHIpIHtcblx0XHRcdFx0XHRhd2FpdCByZWFkeTtcblx0XHRcdFx0XHRsZXQgZW5jcnlwdGVkQ2h1bmtBcnJheSA9IG5ldyBVaW50OEFycmF5KCk7XG5cdFx0XHRcdFx0aWYgKHBlbmRpbmcubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBlbmNyeXB0ZWRDaHVuayA9IGN0ci51cGRhdGUodG9CaXRzKGNvZGVjQnl0ZXMsIHBlbmRpbmcpKTtcblx0XHRcdFx0XHRcdGhtYWMudXBkYXRlKGVuY3J5cHRlZENodW5rKTtcblx0XHRcdFx0XHRcdGVuY3J5cHRlZENodW5rQXJyYXkgPSBmcm9tQml0cyhjb2RlY0J5dGVzLCBlbmNyeXB0ZWRDaHVuayk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHN0cmVhbS5zaWduYXR1cmUgPSBmcm9tQml0cyhjb2RlY0J5dGVzLCBobWFjLmRpZ2VzdCgpKS5zbGljZSgwLCBTSUdOQVRVUkVfTEVOR1RIKTtcblx0XHRcdFx0XHRjb250cm9sbGVyLmVucXVldWUoY29uY2F0KGVuY3J5cHRlZENodW5rQXJyYXksIHN0cmVhbS5zaWduYXR1cmUpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHN0cmVhbSA9IHRoaXM7XG5cdH1cbn1cblxuZXhwb3J0IHtcblx0QUVTRGVjcnlwdGlvblN0cmVhbSxcblx0QUVTRW5jcnlwdGlvblN0cmVhbSxcblx0RVJSX0lOVkFMSURfUEFTU1dPUkRcbn07XG5cbmZ1bmN0aW9uIGFwcGVuZChhZXNDcnlwdG8sIGlucHV0LCBvdXRwdXQsIHBhZGRpbmdTdGFydCwgcGFkZGluZ0VuZCwgdmVyaWZ5U2lnbmF0dXJlKSB7XG5cdGNvbnN0IHtcblx0XHRjdHIsXG5cdFx0aG1hYyxcblx0XHRwZW5kaW5nXG5cdH0gPSBhZXNDcnlwdG87XG5cdGNvbnN0IGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoIC0gcGFkZGluZ0VuZDtcblx0aWYgKHBlbmRpbmcubGVuZ3RoKSB7XG5cdFx0aW5wdXQgPSBjb25jYXQocGVuZGluZywgaW5wdXQpO1xuXHRcdG91dHB1dCA9IGV4cGFuZChvdXRwdXQsIGlucHV0TGVuZ3RoIC0gKGlucHV0TGVuZ3RoICUgQkxPQ0tfTEVOR1RIKSk7XG5cdH1cblx0bGV0IG9mZnNldDtcblx0Zm9yIChvZmZzZXQgPSAwOyBvZmZzZXQgPD0gaW5wdXRMZW5ndGggLSBCTE9DS19MRU5HVEg7IG9mZnNldCArPSBCTE9DS19MRU5HVEgpIHtcblx0XHRjb25zdCBpbnB1dENodW5rID0gdG9CaXRzKGNvZGVjQnl0ZXMsIHN1YmFycmF5KGlucHV0LCBvZmZzZXQsIG9mZnNldCArIEJMT0NLX0xFTkdUSCkpO1xuXHRcdGlmICh2ZXJpZnlTaWduYXR1cmUpIHtcblx0XHRcdGhtYWMudXBkYXRlKGlucHV0Q2h1bmspO1xuXHRcdH1cblx0XHRjb25zdCBvdXRwdXRDaHVuayA9IGN0ci51cGRhdGUoaW5wdXRDaHVuayk7XG5cdFx0aWYgKCF2ZXJpZnlTaWduYXR1cmUpIHtcblx0XHRcdGhtYWMudXBkYXRlKG91dHB1dENodW5rKTtcblx0XHR9XG5cdFx0b3V0cHV0LnNldChmcm9tQml0cyhjb2RlY0J5dGVzLCBvdXRwdXRDaHVuayksIG9mZnNldCArIHBhZGRpbmdTdGFydCk7XG5cdH1cblx0YWVzQ3J5cHRvLnBlbmRpbmcgPSBzdWJhcnJheShpbnB1dCwgb2Zmc2V0KTtcblx0cmV0dXJuIG91dHB1dDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlRGVjcnlwdGlvbktleXMoZGVjcnlwdCwgc3RyZW5ndGgsIHBhc3N3b3JkLCBwcmVhbWJsZSkge1xuXHRjb25zdCBwYXNzd29yZFZlcmlmaWNhdGlvbktleSA9IGF3YWl0IGNyZWF0ZUtleXMoZGVjcnlwdCwgc3RyZW5ndGgsIHBhc3N3b3JkLCBzdWJhcnJheShwcmVhbWJsZSwgMCwgU0FMVF9MRU5HVEhbc3RyZW5ndGhdKSk7XG5cdGNvbnN0IHBhc3N3b3JkVmVyaWZpY2F0aW9uID0gc3ViYXJyYXkocHJlYW1ibGUsIFNBTFRfTEVOR1RIW3N0cmVuZ3RoXSk7XG5cdGlmIChwYXNzd29yZFZlcmlmaWNhdGlvbktleVswXSAhPSBwYXNzd29yZFZlcmlmaWNhdGlvblswXSB8fCBwYXNzd29yZFZlcmlmaWNhdGlvbktleVsxXSAhPSBwYXNzd29yZFZlcmlmaWNhdGlvblsxXSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihFUlJfSU5WQUxJRF9QQVNTV09SRCk7XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlRW5jcnlwdGlvbktleXMoZW5jcnlwdCwgc3RyZW5ndGgsIHBhc3N3b3JkKSB7XG5cdGNvbnN0IHNhbHQgPSBnZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoU0FMVF9MRU5HVEhbc3RyZW5ndGhdKSk7XG5cdGNvbnN0IHBhc3N3b3JkVmVyaWZpY2F0aW9uID0gYXdhaXQgY3JlYXRlS2V5cyhlbmNyeXB0LCBzdHJlbmd0aCwgcGFzc3dvcmQsIHNhbHQpO1xuXHRyZXR1cm4gY29uY2F0KHNhbHQsIHBhc3N3b3JkVmVyaWZpY2F0aW9uKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlS2V5cyhhZXNDcnlwdG8sIHN0cmVuZ3RoLCBwYXNzd29yZCwgc2FsdCkge1xuXHRhZXNDcnlwdG8ucGFzc3dvcmQgPSBudWxsO1xuXHRjb25zdCBlbmNvZGVkUGFzc3dvcmQgPSBlbmNvZGVUZXh0KHBhc3N3b3JkKTtcblx0Y29uc3QgYmFzZUtleSA9IGF3YWl0IGltcG9ydEtleShSQVdfRk9STUFULCBlbmNvZGVkUGFzc3dvcmQsIEJBU0VfS0VZX0FMR09SSVRITSwgZmFsc2UsIERFUklWRURfQklUU19VU0FHRSk7XG5cdGNvbnN0IGRlcml2ZWRCaXRzID0gYXdhaXQgZGVyaXZlQml0cyhPYmplY3QuYXNzaWduKHsgc2FsdCB9LCBERVJJVkVEX0JJVFNfQUxHT1JJVEhNKSwgYmFzZUtleSwgOCAqICgoS0VZX0xFTkdUSFtzdHJlbmd0aF0gKiAyKSArIDIpKTtcblx0Y29uc3QgY29tcG9zaXRlS2V5ID0gbmV3IFVpbnQ4QXJyYXkoZGVyaXZlZEJpdHMpO1xuXHRjb25zdCBrZXkgPSB0b0JpdHMoY29kZWNCeXRlcywgc3ViYXJyYXkoY29tcG9zaXRlS2V5LCAwLCBLRVlfTEVOR1RIW3N0cmVuZ3RoXSkpO1xuXHRjb25zdCBhdXRoZW50aWNhdGlvbiA9IHRvQml0cyhjb2RlY0J5dGVzLCBzdWJhcnJheShjb21wb3NpdGVLZXksIEtFWV9MRU5HVEhbc3RyZW5ndGhdLCBLRVlfTEVOR1RIW3N0cmVuZ3RoXSAqIDIpKTtcblx0Y29uc3QgcGFzc3dvcmRWZXJpZmljYXRpb24gPSBzdWJhcnJheShjb21wb3NpdGVLZXksIEtFWV9MRU5HVEhbc3RyZW5ndGhdICogMik7XG5cdE9iamVjdC5hc3NpZ24oYWVzQ3J5cHRvLCB7XG5cdFx0a2V5czoge1xuXHRcdFx0a2V5LFxuXHRcdFx0YXV0aGVudGljYXRpb24sXG5cdFx0XHRwYXNzd29yZFZlcmlmaWNhdGlvblxuXHRcdH0sXG5cdFx0Y3RyOiBuZXcgQ3RyR2xhZG1hbihuZXcgQWVzKGtleSksIEFycmF5LmZyb20oQ09VTlRFUl9ERUZBVUxUX1ZBTFVFKSksXG5cdFx0aG1hYzogbmV3IEhtYWNTaGExKGF1dGhlbnRpY2F0aW9uKVxuXHR9KTtcblx0cmV0dXJuIHBhc3N3b3JkVmVyaWZpY2F0aW9uO1xufVxuXG5hc3luYyBmdW5jdGlvbiBpbXBvcnRLZXkoZm9ybWF0LCBwYXNzd29yZCwgYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XG5cdGlmIChJTVBPUlRfS0VZX1NVUFBPUlRFRCkge1xuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gYXdhaXQgc3VidGxlLmltcG9ydEtleShmb3JtYXQsIHBhc3N3b3JkLCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xuXHRcdH0gY2F0Y2ggKF9lcnJvcikge1xuXHRcdFx0SU1QT1JUX0tFWV9TVVBQT1JURUQgPSBmYWxzZTtcblx0XHRcdHJldHVybiBtaXNjLmltcG9ydEtleShwYXNzd29yZCk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBtaXNjLmltcG9ydEtleShwYXNzd29yZCk7XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZGVyaXZlQml0cyhhbGdvcml0aG0sIGJhc2VLZXksIGxlbmd0aCkge1xuXHRpZiAoREVSSVZFX0JJVFNfU1VQUE9SVEVEKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBhd2FpdCBzdWJ0bGUuZGVyaXZlQml0cyhhbGdvcml0aG0sIGJhc2VLZXksIGxlbmd0aCk7XG5cdFx0fSBjYXRjaCAoX2Vycm9yKSB7XG5cdFx0XHRERVJJVkVfQklUU19TVVBQT1JURUQgPSBmYWxzZTtcblx0XHRcdHJldHVybiBtaXNjLnBia2RmMihiYXNlS2V5LCBhbGdvcml0aG0uc2FsdCwgREVSSVZFRF9CSVRTX0FMR09SSVRITS5pdGVyYXRpb25zLCBsZW5ndGgpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbWlzYy5wYmtkZjIoYmFzZUtleSwgYWxnb3JpdGhtLnNhbHQsIERFUklWRURfQklUU19BTEdPUklUSE0uaXRlcmF0aW9ucywgbGVuZ3RoKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjb25jYXQobGVmdEFycmF5LCByaWdodEFycmF5KSB7XG5cdGxldCBhcnJheSA9IGxlZnRBcnJheTtcblx0aWYgKGxlZnRBcnJheS5sZW5ndGggKyByaWdodEFycmF5Lmxlbmd0aCkge1xuXHRcdGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkobGVmdEFycmF5Lmxlbmd0aCArIHJpZ2h0QXJyYXkubGVuZ3RoKTtcblx0XHRhcnJheS5zZXQobGVmdEFycmF5LCAwKTtcblx0XHRhcnJheS5zZXQocmlnaHRBcnJheSwgbGVmdEFycmF5Lmxlbmd0aCk7XG5cdH1cblx0cmV0dXJuIGFycmF5O1xufVxuXG5mdW5jdGlvbiBleHBhbmQoaW5wdXRBcnJheSwgbGVuZ3RoKSB7XG5cdGlmIChsZW5ndGggJiYgbGVuZ3RoID4gaW5wdXRBcnJheS5sZW5ndGgpIHtcblx0XHRjb25zdCBhcnJheSA9IGlucHV0QXJyYXk7XG5cdFx0aW5wdXRBcnJheSA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG5cdFx0aW5wdXRBcnJheS5zZXQoYXJyYXksIDApO1xuXHR9XG5cdHJldHVybiBpbnB1dEFycmF5O1xufVxuXG5mdW5jdGlvbiBzdWJhcnJheShhcnJheSwgYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gYXJyYXkuc3ViYXJyYXkoYmVnaW4sIGVuZCk7XG59XG5cbmZ1bmN0aW9uIGZyb21CaXRzKGNvZGVjQnl0ZXMsIGNodW5rKSB7XG5cdHJldHVybiBjb2RlY0J5dGVzLmZyb21CaXRzKGNodW5rKTtcbn1cbmZ1bmN0aW9uIHRvQml0cyhjb2RlY0J5dGVzLCBjaHVuaykge1xuXHRyZXR1cm4gY29kZWNCeXRlcy50b0JpdHMoY2h1bmspO1xufSIsIi8qXG4gQ29weXJpZ2h0IChjKSAyMDIyIEdpbGRhcyBMb3JtZWF1LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiBcbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuIDMuIFRoZSBuYW1lcyBvZiB0aGUgYXV0aG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEICcnQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXG4gSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKQ1JBRlQsXG4gSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsXG4gT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLyogZ2xvYmFsIFRleHRFbmNvZGVyICovXG5cbmV4cG9ydCB7XG5cdGVuY29kZVRleHRcbn07XG5cbmZ1bmN0aW9uIGVuY29kZVRleHQodmFsdWUpIHtcblx0aWYgKHR5cGVvZiBUZXh0RW5jb2RlciA9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0dmFsdWUgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblx0XHRjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheSh2YWx1ZS5sZW5ndGgpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRyZXN1bHRbaV0gPSB2YWx1ZS5jaGFyQ29kZUF0KGkpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUodmFsdWUpO1xuXHR9XG59IiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4vKiBnbG9iYWwgVHJhbnNmb3JtU3RyZWFtICovXG4vLyBkZW5vLWxpbnQtaWdub3JlLWZpbGUgbm8tdGhpcy1hbGlhc1xuXG5pbXBvcnQgeyBDcmMzMiB9IGZyb20gXCIuL2NvZGVjcy9jcmMzMi5qc1wiO1xuaW1wb3J0IHtcblx0RVJSX0lOVkFMSURfUEFTU1dPUkQsXG5cdEVSUl9BQk9SVF9DSEVDS19QQVNTV09SRCxcblx0Z2V0UmFuZG9tVmFsdWVzXG59IGZyb20gXCIuL2NvbW1vbi1jcnlwdG8uanNcIjtcblxuY29uc3QgSEVBREVSX0xFTkdUSCA9IDEyO1xuXG5jbGFzcyBaaXBDcnlwdG9EZWNyeXB0aW9uU3RyZWFtIGV4dGVuZHMgVHJhbnNmb3JtU3RyZWFtIHtcblxuXHRjb25zdHJ1Y3Rvcih7IHBhc3N3b3JkLCBwYXNzd29yZFZlcmlmaWNhdGlvbiwgY2hlY2tQYXNzd29yZE9ubHkgfSkge1xuXHRcdHN1cGVyKHtcblx0XHRcdHN0YXJ0KCkge1xuXHRcdFx0XHRPYmplY3QuYXNzaWduKHRoaXMsIHtcblx0XHRcdFx0XHRwYXNzd29yZCxcblx0XHRcdFx0XHRwYXNzd29yZFZlcmlmaWNhdGlvblxuXHRcdFx0XHR9KTtcblx0XHRcdFx0Y3JlYXRlS2V5cyh0aGlzLCBwYXNzd29yZCk7XG5cdFx0XHR9LFxuXHRcdFx0dHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG5cdFx0XHRcdGNvbnN0IHppcENyeXB0byA9IHRoaXM7XG5cdFx0XHRcdGlmICh6aXBDcnlwdG8ucGFzc3dvcmQpIHtcblx0XHRcdFx0XHRjb25zdCBkZWNyeXB0ZWRIZWFkZXIgPSBkZWNyeXB0KHppcENyeXB0bywgY2h1bmsuc3ViYXJyYXkoMCwgSEVBREVSX0xFTkdUSCkpO1xuXHRcdFx0XHRcdHppcENyeXB0by5wYXNzd29yZCA9IG51bGw7XG5cdFx0XHRcdFx0aWYgKGRlY3J5cHRlZEhlYWRlcltIRUFERVJfTEVOR1RIIC0gMV0gIT0gemlwQ3J5cHRvLnBhc3N3b3JkVmVyaWZpY2F0aW9uKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0lOVkFMSURfUEFTU1dPUkQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjaHVuayA9IGNodW5rLnN1YmFycmF5KEhFQURFUl9MRU5HVEgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChjaGVja1Bhc3N3b3JkT25seSkge1xuXHRcdFx0XHRcdGNvbnRyb2xsZXIuZXJyb3IobmV3IEVycm9yKEVSUl9BQk9SVF9DSEVDS19QQVNTV09SRCkpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRyb2xsZXIuZW5xdWV1ZShkZWNyeXB0KHppcENyeXB0bywgY2h1bmspKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59XG5cbmNsYXNzIFppcENyeXB0b0VuY3J5cHRpb25TdHJlYW0gZXh0ZW5kcyBUcmFuc2Zvcm1TdHJlYW0ge1xuXG5cdGNvbnN0cnVjdG9yKHsgcGFzc3dvcmQsIHBhc3N3b3JkVmVyaWZpY2F0aW9uIH0pIHtcblx0XHRzdXBlcih7XG5cdFx0XHRzdGFydCgpIHtcblx0XHRcdFx0T2JqZWN0LmFzc2lnbih0aGlzLCB7XG5cdFx0XHRcdFx0cGFzc3dvcmQsXG5cdFx0XHRcdFx0cGFzc3dvcmRWZXJpZmljYXRpb25cblx0XHRcdFx0fSk7XG5cdFx0XHRcdGNyZWF0ZUtleXModGhpcywgcGFzc3dvcmQpO1xuXHRcdFx0fSxcblx0XHRcdHRyYW5zZm9ybShjaHVuaywgY29udHJvbGxlcikge1xuXHRcdFx0XHRjb25zdCB6aXBDcnlwdG8gPSB0aGlzO1xuXHRcdFx0XHRsZXQgb3V0cHV0O1xuXHRcdFx0XHRsZXQgb2Zmc2V0O1xuXHRcdFx0XHRpZiAoemlwQ3J5cHRvLnBhc3N3b3JkKSB7XG5cdFx0XHRcdFx0emlwQ3J5cHRvLnBhc3N3b3JkID0gbnVsbDtcblx0XHRcdFx0XHRjb25zdCBoZWFkZXIgPSBnZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoSEVBREVSX0xFTkdUSCkpO1xuXHRcdFx0XHRcdGhlYWRlcltIRUFERVJfTEVOR1RIIC0gMV0gPSB6aXBDcnlwdG8ucGFzc3dvcmRWZXJpZmljYXRpb247XG5cdFx0XHRcdFx0b3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkoY2h1bmsubGVuZ3RoICsgaGVhZGVyLmxlbmd0aCk7XG5cdFx0XHRcdFx0b3V0cHV0LnNldChlbmNyeXB0KHppcENyeXB0bywgaGVhZGVyKSwgMCk7XG5cdFx0XHRcdFx0b2Zmc2V0ID0gSEVBREVSX0xFTkdUSDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRvdXRwdXQgPSBuZXcgVWludDhBcnJheShjaHVuay5sZW5ndGgpO1xuXHRcdFx0XHRcdG9mZnNldCA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0b3V0cHV0LnNldChlbmNyeXB0KHppcENyeXB0bywgY2h1bmspLCBvZmZzZXQpO1xuXHRcdFx0XHRjb250cm9sbGVyLmVucXVldWUob3V0cHV0KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuXG5leHBvcnQge1xuXHRaaXBDcnlwdG9EZWNyeXB0aW9uU3RyZWFtLFxuXHRaaXBDcnlwdG9FbmNyeXB0aW9uU3RyZWFtLFxuXHRFUlJfSU5WQUxJRF9QQVNTV09SRFxufTtcblxuZnVuY3Rpb24gZGVjcnlwdCh0YXJnZXQsIGlucHV0KSB7XG5cdGNvbnN0IG91dHB1dCA9IG5ldyBVaW50OEFycmF5KGlucHV0Lmxlbmd0aCk7XG5cdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBpbnB1dC5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRvdXRwdXRbaW5kZXhdID0gZ2V0Qnl0ZSh0YXJnZXQpIF4gaW5wdXRbaW5kZXhdO1xuXHRcdHVwZGF0ZUtleXModGFyZ2V0LCBvdXRwdXRbaW5kZXhdKTtcblx0fVxuXHRyZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBlbmNyeXB0KHRhcmdldCwgaW5wdXQpIHtcblx0Y29uc3Qgb3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkoaW5wdXQubGVuZ3RoKTtcblx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGlucHV0Lmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdG91dHB1dFtpbmRleF0gPSBnZXRCeXRlKHRhcmdldCkgXiBpbnB1dFtpbmRleF07XG5cdFx0dXBkYXRlS2V5cyh0YXJnZXQsIGlucHV0W2luZGV4XSk7XG5cdH1cblx0cmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5cyh0YXJnZXQsIHBhc3N3b3JkKSB7XG5cdGNvbnN0IGtleXMgPSBbMHgxMjM0NTY3OCwgMHgyMzQ1Njc4OSwgMHgzNDU2Nzg5MF07XG5cdE9iamVjdC5hc3NpZ24odGFyZ2V0LCB7XG5cdFx0a2V5cyxcblx0XHRjcmNLZXkwOiBuZXcgQ3JjMzIoa2V5c1swXSksXG5cdFx0Y3JjS2V5MjogbmV3IENyYzMyKGtleXNbMl0pLFxuXHR9KTtcblx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHBhc3N3b3JkLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdHVwZGF0ZUtleXModGFyZ2V0LCBwYXNzd29yZC5jaGFyQ29kZUF0KGluZGV4KSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlS2V5cyh0YXJnZXQsIGJ5dGUpIHtcblx0bGV0IFtrZXkwLCBrZXkxLCBrZXkyXSA9IHRhcmdldC5rZXlzO1xuXHR0YXJnZXQuY3JjS2V5MC5hcHBlbmQoW2J5dGVdKTtcblx0a2V5MCA9IH50YXJnZXQuY3JjS2V5MC5nZXQoKTtcblx0a2V5MSA9IGdldEludDMyKE1hdGguaW11bChnZXRJbnQzMihrZXkxICsgZ2V0SW50OChrZXkwKSksIDEzNDc3NTgxMykgKyAxKTtcblx0dGFyZ2V0LmNyY0tleTIuYXBwZW5kKFtrZXkxID4+PiAyNF0pO1xuXHRrZXkyID0gfnRhcmdldC5jcmNLZXkyLmdldCgpO1xuXHR0YXJnZXQua2V5cyA9IFtrZXkwLCBrZXkxLCBrZXkyXTtcbn1cblxuZnVuY3Rpb24gZ2V0Qnl0ZSh0YXJnZXQpIHtcblx0Y29uc3QgdGVtcCA9IHRhcmdldC5rZXlzWzJdIHwgMjtcblx0cmV0dXJuIGdldEludDgoTWF0aC5pbXVsKHRlbXAsICh0ZW1wIF4gMSkpID4+PiA4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SW50OChudW1iZXIpIHtcblx0cmV0dXJuIG51bWJlciAmIDB4RkY7XG59XG5cbmZ1bmN0aW9uIGdldEludDMyKG51bWJlcikge1xuXHRyZXR1cm4gbnVtYmVyICYgMHhGRkZGRkZGRjtcbn0iLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbi8qIGdsb2JhbCBUcmFuc2Zvcm1TdHJlYW0gKi9cbi8vIGRlbm8tbGludC1pZ25vcmUtZmlsZSBuby10aGlzLWFsaWFzXG5cbmltcG9ydCB7IENyYzMyU3RyZWFtIH0gZnJvbSBcIi4vY3JjMzItc3RyZWFtLmpzXCI7XG5pbXBvcnQge1xuXHRBRVNFbmNyeXB0aW9uU3RyZWFtLFxuXHRBRVNEZWNyeXB0aW9uU3RyZWFtXG59IGZyb20gXCIuL2Flcy1jcnlwdG8tc3RyZWFtLmpzXCI7XG5pbXBvcnQge1xuXHRaaXBDcnlwdG9FbmNyeXB0aW9uU3RyZWFtLFxuXHRaaXBDcnlwdG9EZWNyeXB0aW9uU3RyZWFtXG59IGZyb20gXCIuL3ppcC1jcnlwdG8tc3RyZWFtLmpzXCI7XG5pbXBvcnQge1xuXHRFUlJfSU5WQUxJRF9QQVNTV09SRCxcblx0RVJSX0lOVkFMSURfU0lHTkFUVVJFLFxuXHRFUlJfQUJPUlRfQ0hFQ0tfUEFTU1dPUkRcbn0gZnJvbSBcIi4vY29tbW9uLWNyeXB0by5qc1wiO1xuXG5jb25zdCBDT01QUkVTU0lPTl9GT1JNQVQgPSBcImRlZmxhdGUtcmF3XCI7XG5cbmNsYXNzIERlZmxhdGVTdHJlYW0gZXh0ZW5kcyBUcmFuc2Zvcm1TdHJlYW0ge1xuXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMsIHsgY2h1bmtTaXplLCBDb21wcmVzc2lvblN0cmVhbSwgQ29tcHJlc3Npb25TdHJlYW1OYXRpdmUgfSkge1xuXHRcdHN1cGVyKHt9KTtcblx0XHRjb25zdCB7IGNvbXByZXNzZWQsIGVuY3J5cHRlZCwgdXNlQ29tcHJlc3Npb25TdHJlYW0sIHppcENyeXB0bywgc2lnbmVkLCBsZXZlbCB9ID0gb3B0aW9ucztcblx0XHRjb25zdCBzdHJlYW0gPSB0aGlzO1xuXHRcdGxldCBjcmMzMlN0cmVhbSwgZW5jcnlwdGlvblN0cmVhbTtcblx0XHRsZXQgcmVhZGFibGUgPSBmaWx0ZXJFbXB0eUNodW5rcyhzdXBlci5yZWFkYWJsZSk7XG5cdFx0aWYgKCghZW5jcnlwdGVkIHx8IHppcENyeXB0bykgJiYgc2lnbmVkKSB7XG5cdFx0XHRjcmMzMlN0cmVhbSA9IG5ldyBDcmMzMlN0cmVhbSgpO1xuXHRcdFx0cmVhZGFibGUgPSBwaXBlVGhyb3VnaChyZWFkYWJsZSwgY3JjMzJTdHJlYW0pO1xuXHRcdH1cblx0XHRpZiAoY29tcHJlc3NlZCkge1xuXHRcdFx0cmVhZGFibGUgPSBwaXBlVGhyb3VnaENvbW1wcmVzc2lvblN0cmVhbShyZWFkYWJsZSwgdXNlQ29tcHJlc3Npb25TdHJlYW0sIHsgbGV2ZWwsIGNodW5rU2l6ZSB9LCBDb21wcmVzc2lvblN0cmVhbU5hdGl2ZSwgQ29tcHJlc3Npb25TdHJlYW0pO1xuXHRcdH1cblx0XHRpZiAoZW5jcnlwdGVkKSB7XG5cdFx0XHRpZiAoemlwQ3J5cHRvKSB7XG5cdFx0XHRcdHJlYWRhYmxlID0gcGlwZVRocm91Z2gocmVhZGFibGUsIG5ldyBaaXBDcnlwdG9FbmNyeXB0aW9uU3RyZWFtKG9wdGlvbnMpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVuY3J5cHRpb25TdHJlYW0gPSBuZXcgQUVTRW5jcnlwdGlvblN0cmVhbShvcHRpb25zKTtcblx0XHRcdFx0cmVhZGFibGUgPSBwaXBlVGhyb3VnaChyZWFkYWJsZSwgZW5jcnlwdGlvblN0cmVhbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHNldFJlYWRhYmxlKHN0cmVhbSwgcmVhZGFibGUsICgpID0+IHtcblx0XHRcdGxldCBzaWduYXR1cmU7XG5cdFx0XHRpZiAoZW5jcnlwdGVkICYmICF6aXBDcnlwdG8pIHtcblx0XHRcdFx0c2lnbmF0dXJlID0gZW5jcnlwdGlvblN0cmVhbS5zaWduYXR1cmU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoKCFlbmNyeXB0ZWQgfHwgemlwQ3J5cHRvKSAmJiBzaWduZWQpIHtcblx0XHRcdFx0c2lnbmF0dXJlID0gbmV3IERhdGFWaWV3KGNyYzMyU3RyZWFtLnZhbHVlLmJ1ZmZlcikuZ2V0VWludDMyKDApO1xuXHRcdFx0fVxuXHRcdFx0c3RyZWFtLnNpZ25hdHVyZSA9IHNpZ25hdHVyZTtcblx0XHR9KTtcblx0fVxufVxuXG5jbGFzcyBJbmZsYXRlU3RyZWFtIGV4dGVuZHMgVHJhbnNmb3JtU3RyZWFtIHtcblxuXHRjb25zdHJ1Y3RvcihvcHRpb25zLCB7IGNodW5rU2l6ZSwgRGVjb21wcmVzc2lvblN0cmVhbSwgRGVjb21wcmVzc2lvblN0cmVhbU5hdGl2ZSB9KSB7XG5cdFx0c3VwZXIoe30pO1xuXHRcdGNvbnN0IHsgemlwQ3J5cHRvLCBlbmNyeXB0ZWQsIHNpZ25lZCwgc2lnbmF0dXJlLCBjb21wcmVzc2VkLCB1c2VDb21wcmVzc2lvblN0cmVhbSB9ID0gb3B0aW9ucztcblx0XHRsZXQgY3JjMzJTdHJlYW0sIGRlY3J5cHRpb25TdHJlYW07XG5cdFx0bGV0IHJlYWRhYmxlID0gZmlsdGVyRW1wdHlDaHVua3Moc3VwZXIucmVhZGFibGUpO1xuXHRcdGlmIChlbmNyeXB0ZWQpIHtcblx0XHRcdGlmICh6aXBDcnlwdG8pIHtcblx0XHRcdFx0cmVhZGFibGUgPSBwaXBlVGhyb3VnaChyZWFkYWJsZSwgbmV3IFppcENyeXB0b0RlY3J5cHRpb25TdHJlYW0ob3B0aW9ucykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVjcnlwdGlvblN0cmVhbSA9IG5ldyBBRVNEZWNyeXB0aW9uU3RyZWFtKG9wdGlvbnMpO1xuXHRcdFx0XHRyZWFkYWJsZSA9IHBpcGVUaHJvdWdoKHJlYWRhYmxlLCBkZWNyeXB0aW9uU3RyZWFtKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGNvbXByZXNzZWQpIHtcblx0XHRcdHJlYWRhYmxlID0gcGlwZVRocm91Z2hDb21tcHJlc3Npb25TdHJlYW0ocmVhZGFibGUsIHVzZUNvbXByZXNzaW9uU3RyZWFtLCB7IGNodW5rU2l6ZSB9LCBEZWNvbXByZXNzaW9uU3RyZWFtTmF0aXZlLCBEZWNvbXByZXNzaW9uU3RyZWFtKTtcblx0XHR9XG5cdFx0aWYgKCghZW5jcnlwdGVkIHx8IHppcENyeXB0bykgJiYgc2lnbmVkKSB7XG5cdFx0XHRjcmMzMlN0cmVhbSA9IG5ldyBDcmMzMlN0cmVhbSgpO1xuXHRcdFx0cmVhZGFibGUgPSBwaXBlVGhyb3VnaChyZWFkYWJsZSwgY3JjMzJTdHJlYW0pO1xuXHRcdH1cblx0XHRzZXRSZWFkYWJsZSh0aGlzLCByZWFkYWJsZSwgKCkgPT4ge1xuXHRcdFx0aWYgKCghZW5jcnlwdGVkIHx8IHppcENyeXB0bykgJiYgc2lnbmVkKSB7XG5cdFx0XHRcdGNvbnN0IGRhdGFWaWV3U2lnbmF0dXJlID0gbmV3IERhdGFWaWV3KGNyYzMyU3RyZWFtLnZhbHVlLmJ1ZmZlcik7XG5cdFx0XHRcdGlmIChzaWduYXR1cmUgIT0gZGF0YVZpZXdTaWduYXR1cmUuZ2V0VWludDMyKDAsIGZhbHNlKSkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfSU5WQUxJRF9TSUdOQVRVUkUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cblxuZXhwb3J0IHtcblx0RGVmbGF0ZVN0cmVhbSxcblx0SW5mbGF0ZVN0cmVhbSxcblx0RVJSX0lOVkFMSURfUEFTU1dPUkQsXG5cdEVSUl9JTlZBTElEX1NJR05BVFVSRSxcblx0RVJSX0FCT1JUX0NIRUNLX1BBU1NXT1JEXG59O1xuXG5mdW5jdGlvbiBmaWx0ZXJFbXB0eUNodW5rcyhyZWFkYWJsZSkge1xuXHRyZXR1cm4gcGlwZVRocm91Z2gocmVhZGFibGUsIG5ldyBUcmFuc2Zvcm1TdHJlYW0oe1xuXHRcdHRyYW5zZm9ybShjaHVuaywgY29udHJvbGxlcikge1xuXHRcdFx0aWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuXHRcdFx0XHRjb250cm9sbGVyLmVucXVldWUoY2h1bmspO1xuXHRcdFx0fVxuXHRcdH1cblx0fSkpO1xufVxuXG5mdW5jdGlvbiBzZXRSZWFkYWJsZShzdHJlYW0sIHJlYWRhYmxlLCBmbHVzaCkge1xuXHRyZWFkYWJsZSA9IHBpcGVUaHJvdWdoKHJlYWRhYmxlLCBuZXcgVHJhbnNmb3JtU3RyZWFtKHsgZmx1c2ggfSkpO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoc3RyZWFtLCBcInJlYWRhYmxlXCIsIHtcblx0XHRnZXQoKSB7XG5cdFx0XHRyZXR1cm4gcmVhZGFibGU7XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gcGlwZVRocm91Z2hDb21tcHJlc3Npb25TdHJlYW0ocmVhZGFibGUsIHVzZUNvbXByZXNzaW9uU3RyZWFtLCBvcHRpb25zLCBDb2RlY1N0cmVhbU5hdGl2ZSwgQ29kZWNTdHJlYW0pIHtcblx0dHJ5IHtcblx0XHRjb25zdCBDb21wcmVzc2lvblN0cmVhbSA9IHVzZUNvbXByZXNzaW9uU3RyZWFtICYmIENvZGVjU3RyZWFtTmF0aXZlID8gQ29kZWNTdHJlYW1OYXRpdmUgOiBDb2RlY1N0cmVhbTtcblx0XHRyZWFkYWJsZSA9IHBpcGVUaHJvdWdoKHJlYWRhYmxlLCBuZXcgQ29tcHJlc3Npb25TdHJlYW0oQ09NUFJFU1NJT05fRk9STUFULCBvcHRpb25zKSk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKHVzZUNvbXByZXNzaW9uU3RyZWFtKSB7XG5cdFx0XHRyZWFkYWJsZSA9IHBpcGVUaHJvdWdoKHJlYWRhYmxlLCBuZXcgQ29kZWNTdHJlYW0oQ09NUFJFU1NJT05fRk9STUFULCBvcHRpb25zKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IGVycm9yO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVhZGFibGU7XG59XG5cbmZ1bmN0aW9uIHBpcGVUaHJvdWdoKHJlYWRhYmxlLCB0cmFuc2Zvcm1TdHJlYW0pIHtcblx0cmV0dXJuIHJlYWRhYmxlLnBpcGVUaHJvdWdoKHRyYW5zZm9ybVN0cmVhbSk7XG59IiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4vKlxuICogVGhpcyBwcm9ncmFtIGlzIGJhc2VkIG9uIEpabGliIDEuMC4yIHltbmssIEpDcmFmdCxJbmMuXG4gKiBKWmxpYiBpcyBiYXNlZCBvbiB6bGliLTEuMS4zLCBzbyBhbGwgY3JlZGl0IHNob3VsZCBnbyBhdXRob3JzXG4gKiBKZWFuLWxvdXAgR2FpbGx5KGpsb3VwQGd6aXAub3JnKSBhbmQgTWFyayBBZGxlcihtYWRsZXJAYWx1bW5pLmNhbHRlY2guZWR1KVxuICogYW5kIGNvbnRyaWJ1dG9ycyBvZiB6bGliLlxuICovXG5cbi8qIGdsb2JhbCBUcmFuc2Zvcm1TdHJlYW0gKi9cbi8vIGRlbm8tbGludC1pZ25vcmUtZmlsZSBuby10aGlzLWFsaWFzXG5cbmltcG9ydCB7XG5cdEVSUl9JTlZBTElEX1BBU1NXT1JELFxuXHRFUlJfSU5WQUxJRF9TSUdOQVRVUkUsXG5cdEVSUl9BQk9SVF9DSEVDS19QQVNTV09SRCxcblx0SW5mbGF0ZVN0cmVhbSxcblx0RGVmbGF0ZVN0cmVhbVxufSBmcm9tIFwiLi96aXAtZW50cnktc3RyZWFtLmpzXCI7XG5cbmNvbnN0IE1FU1NBR0VfRVZFTlRfVFlQRSA9IFwibWVzc2FnZVwiO1xuY29uc3QgTUVTU0FHRV9TVEFSVCA9IFwic3RhcnRcIjtcbmNvbnN0IE1FU1NBR0VfUFVMTCA9IFwicHVsbFwiO1xuY29uc3QgTUVTU0FHRV9EQVRBID0gXCJkYXRhXCI7XG5jb25zdCBNRVNTQUdFX0FDS19EQVRBID0gXCJhY2tcIjtcbmNvbnN0IE1FU1NBR0VfQ0xPU0UgPSBcImNsb3NlXCI7XG5jb25zdCBDT0RFQ19ERUZMQVRFID0gXCJkZWZsYXRlXCI7XG5jb25zdCBDT0RFQ19JTkZMQVRFID0gXCJpbmZsYXRlXCI7XG5cbmV4cG9ydCB7XG5cdENPREVDX0RFRkxBVEUsXG5cdENPREVDX0lORkxBVEUsXG5cdE1FU1NBR0VfRVZFTlRfVFlQRSxcblx0TUVTU0FHRV9TVEFSVCxcblx0TUVTU0FHRV9QVUxMLFxuXHRNRVNTQUdFX0RBVEEsXG5cdE1FU1NBR0VfQUNLX0RBVEEsXG5cdE1FU1NBR0VfQ0xPU0UsXG5cdEVSUl9JTlZBTElEX1BBU1NXT1JELFxuXHRFUlJfSU5WQUxJRF9TSUdOQVRVUkUsXG5cdEVSUl9BQk9SVF9DSEVDS19QQVNTV09SRCxcblx0Q29kZWNTdHJlYW1cbn07XG5cbmNsYXNzIENvZGVjU3RyZWFtIGV4dGVuZHMgVHJhbnNmb3JtU3RyZWFtIHtcblxuXHRjb25zdHJ1Y3RvcihvcHRpb25zLCBjb25maWcpIHtcblx0XHRzdXBlcih7fSk7XG5cdFx0Y29uc3QgY29kZWMgPSB0aGlzO1xuXHRcdGNvbnN0IHsgY29kZWNUeXBlIH0gPSBvcHRpb25zO1xuXHRcdGxldCBTdHJlYW07XG5cdFx0aWYgKGNvZGVjVHlwZS5zdGFydHNXaXRoKENPREVDX0RFRkxBVEUpKSB7XG5cdFx0XHRTdHJlYW0gPSBEZWZsYXRlU3RyZWFtO1xuXHRcdH0gZWxzZSBpZiAoY29kZWNUeXBlLnN0YXJ0c1dpdGgoQ09ERUNfSU5GTEFURSkpIHtcblx0XHRcdFN0cmVhbSA9IEluZmxhdGVTdHJlYW07XG5cdFx0fVxuXHRcdGxldCBzaXplID0gMDtcblx0XHRjb25zdCBzdHJlYW0gPSBuZXcgU3RyZWFtKG9wdGlvbnMsIGNvbmZpZyk7XG5cdFx0Y29uc3QgcmVhZGFibGUgPSBzdXBlci5yZWFkYWJsZTtcblx0XHRjb25zdCB0cmFuc2Zvcm1TdHJlYW0gPSBuZXcgVHJhbnNmb3JtU3RyZWFtKHtcblx0XHRcdHRyYW5zZm9ybShjaHVuaywgY29udHJvbGxlcikge1xuXHRcdFx0XHRpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7XG5cdFx0XHRcdFx0c2l6ZSArPSBjaHVuay5sZW5ndGg7XG5cdFx0XHRcdFx0Y29udHJvbGxlci5lbnF1ZXVlKGNodW5rKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGZsdXNoKCkge1xuXHRcdFx0XHRjb25zdCB7IHNpZ25hdHVyZSB9ID0gc3RyZWFtO1xuXHRcdFx0XHRPYmplY3QuYXNzaWduKGNvZGVjLCB7XG5cdFx0XHRcdFx0c2lnbmF0dXJlLFxuXHRcdFx0XHRcdHNpemVcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvZGVjLCBcInJlYWRhYmxlXCIsIHtcblx0XHRcdGdldCgpIHtcblx0XHRcdFx0cmV0dXJuIHJlYWRhYmxlLnBpcGVUaHJvdWdoKHN0cmVhbSkucGlwZVRocm91Z2godHJhbnNmb3JtU3RyZWFtKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufSIsIi8qXG4gQ29weXJpZ2h0IChjKSAyMDIyIEdpbGRhcyBMb3JtZWF1LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiBcbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuIDMuIFRoZSBuYW1lcyBvZiB0aGUgYXV0aG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEICcnQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXG4gSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKQ1JBRlQsXG4gSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsXG4gT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLyogZ2xvYmFsIFdvcmtlciwgVVJMLCBUcmFuc2Zvcm1TdHJlYW0sIFdyaXRhYmxlU3RyZWFtICovXG5cbmltcG9ydCB7XG5cdFVOREVGSU5FRF9UWVBFLFxuXHRGVU5DVElPTl9UWVBFXG59IGZyb20gXCIuL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHtcblx0Q29kZWNTdHJlYW0sXG5cdE1FU1NBR0VfRVZFTlRfVFlQRSxcblx0TUVTU0FHRV9TVEFSVCxcblx0TUVTU0FHRV9QVUxMLFxuXHRNRVNTQUdFX0RBVEEsXG5cdE1FU1NBR0VfQUNLX0RBVEEsXG5cdE1FU1NBR0VfQ0xPU0Vcbn0gZnJvbSBcIi4vc3RyZWFtcy9jb2RlYy1zdHJlYW0uanNcIjtcblxuLy8gZGVuby1saW50LWlnbm9yZSB2YWxpZC10eXBlb2ZcbmNvbnN0IFdFQl9XT1JLRVJTX1NVUFBPUlRFRCA9IHR5cGVvZiBXb3JrZXIgIT0gVU5ERUZJTkVEX1RZUEU7XG5cbmV4cG9ydCB7XG5cdENvZGVjV29ya2VyXG59O1xuXG5jbGFzcyBDb2RlY1dvcmtlciB7XG5cblx0Y29uc3RydWN0b3Iod29ya2VyRGF0YSwgeyByZWFkYWJsZSwgd3JpdGFibGUgfSwgeyBvcHRpb25zLCBjb25maWcsIHN0cmVhbU9wdGlvbnMsIHVzZVdlYldvcmtlcnMsIHRyYW5zZmVyU3RyZWFtcywgc2NyaXB0cyB9LCBvblRhc2tGaW5pc2hlZCkge1xuXHRcdGNvbnN0IHsgc2lnbmFsIH0gPSBzdHJlYW1PcHRpb25zO1xuXHRcdE9iamVjdC5hc3NpZ24od29ya2VyRGF0YSwge1xuXHRcdFx0YnVzeTogdHJ1ZSxcblx0XHRcdHJlYWRhYmxlOiByZWFkYWJsZS5waXBlVGhyb3VnaChuZXcgUHJvZ3Jlc3NXYXRjaGVyU3RyZWFtKHJlYWRhYmxlLCBzdHJlYW1PcHRpb25zLCBjb25maWcpLCB7IHNpZ25hbCB9KSxcblx0XHRcdHdyaXRhYmxlLFxuXHRcdFx0b3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksXG5cdFx0XHRzY3JpcHRzLFxuXHRcdFx0dHJhbnNmZXJTdHJlYW1zLFxuXHRcdFx0dGVybWluYXRlKCkge1xuXHRcdFx0XHRjb25zdCB7IHdvcmtlciwgYnVzeSB9ID0gd29ya2VyRGF0YTtcblx0XHRcdFx0aWYgKHdvcmtlciAmJiAhYnVzeSkge1xuXHRcdFx0XHRcdHdvcmtlci50ZXJtaW5hdGUoKTtcblx0XHRcdFx0XHR3b3JrZXJEYXRhLmludGVyZmFjZSA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRvblRhc2tGaW5pc2hlZCgpIHtcblx0XHRcdFx0d29ya2VyRGF0YS5idXN5ID0gZmFsc2U7XG5cdFx0XHRcdG9uVGFza0ZpbmlzaGVkKHdvcmtlckRhdGEpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiAodXNlV2ViV29ya2VycyAmJiBXRUJfV09SS0VSU19TVVBQT1JURUQgPyBjcmVhdGVXZWJXb3JrZXJJbnRlcmZhY2UgOiBjcmVhdGVXb3JrZXJJbnRlcmZhY2UpKHdvcmtlckRhdGEsIGNvbmZpZyk7XG5cdH1cbn1cblxuY2xhc3MgUHJvZ3Jlc3NXYXRjaGVyU3RyZWFtIGV4dGVuZHMgVHJhbnNmb3JtU3RyZWFtIHtcblxuXHRjb25zdHJ1Y3RvcihyZWFkYWJsZVNvdXJjZSwgeyBvbnN0YXJ0LCBvbnByb2dyZXNzLCBzaXplLCBvbmVuZCB9LCB7IGNodW5rU2l6ZSB9KSB7XG5cdFx0bGV0IGNodW5rT2Zmc2V0ID0gMDtcblx0XHRzdXBlcih7XG5cdFx0XHRzdGFydCgpIHtcblx0XHRcdFx0aWYgKG9uc3RhcnQpIHtcblx0XHRcdFx0XHRjYWxsSGFuZGxlcihvbnN0YXJ0LCBzaXplKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGFzeW5jIHRyYW5zZm9ybShjaHVuaywgY29udHJvbGxlcikge1xuXHRcdFx0XHRjaHVua09mZnNldCArPSBjaHVuay5sZW5ndGg7XG5cdFx0XHRcdGlmIChvbnByb2dyZXNzKSB7XG5cdFx0XHRcdFx0YXdhaXQgY2FsbEhhbmRsZXIob25wcm9ncmVzcywgY2h1bmtPZmZzZXQsIHNpemUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRyb2xsZXIuZW5xdWV1ZShjaHVuayk7XG5cdFx0XHR9LFxuXHRcdFx0Zmx1c2goKSB7XG5cdFx0XHRcdHJlYWRhYmxlU291cmNlLnNpemUgPSBjaHVua09mZnNldDtcblx0XHRcdFx0aWYgKG9uZW5kKSB7XG5cdFx0XHRcdFx0Y2FsbEhhbmRsZXIob25lbmQsIGNodW5rT2Zmc2V0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sIHsgaGlnaFdhdGVyTWFyazogMSwgc2l6ZTogKCkgPT4gY2h1bmtTaXplIH0pO1xuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNhbGxIYW5kbGVyKGhhbmRsZXIsIC4uLnBhcmFtZXRlcnMpIHtcblx0dHJ5IHtcblx0XHRhd2FpdCBoYW5kbGVyKC4uLnBhcmFtZXRlcnMpO1xuXHR9IGNhdGNoIChfZXJyb3IpIHtcblx0XHQvLyBpZ25vcmVkXG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV29ya2VySW50ZXJmYWNlKHdvcmtlckRhdGEsIGNvbmZpZykge1xuXHRyZXR1cm4ge1xuXHRcdHJ1bjogKCkgPT4gcnVuV29ya2VyKHdvcmtlckRhdGEsIGNvbmZpZylcblx0fTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlV2ViV29ya2VySW50ZXJmYWNlKHdvcmtlckRhdGEsIHsgYmFzZVVSTCwgY2h1bmtTaXplIH0pIHtcblx0aWYgKCF3b3JrZXJEYXRhLmludGVyZmFjZSkge1xuXHRcdE9iamVjdC5hc3NpZ24od29ya2VyRGF0YSwge1xuXHRcdFx0d29ya2VyOiBnZXRXZWJXb3JrZXIod29ya2VyRGF0YS5zY3JpcHRzWzBdLCBiYXNlVVJMLCB3b3JrZXJEYXRhKSxcblx0XHRcdGludGVyZmFjZToge1xuXHRcdFx0XHRydW46ICgpID0+IHJ1bldlYldvcmtlcih3b3JrZXJEYXRhLCB7IGNodW5rU2l6ZSB9KVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdHJldHVybiB3b3JrZXJEYXRhLmludGVyZmFjZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVuV29ya2VyKHsgb3B0aW9ucywgcmVhZGFibGUsIHdyaXRhYmxlLCBvblRhc2tGaW5pc2hlZCB9LCBjb25maWcpIHtcblx0Y29uc3QgY29kZWNTdHJlYW0gPSBuZXcgQ29kZWNTdHJlYW0ob3B0aW9ucywgY29uZmlnKTtcblx0dHJ5IHtcblx0XHRhd2FpdCByZWFkYWJsZS5waXBlVGhyb3VnaChjb2RlY1N0cmVhbSkucGlwZVRvKHdyaXRhYmxlLCB7IHByZXZlbnRDbG9zZTogdHJ1ZSwgcHJldmVudEFib3J0OiB0cnVlIH0pO1xuXHRcdGNvbnN0IHtcblx0XHRcdHNpZ25hdHVyZSxcblx0XHRcdHNpemVcblx0XHR9ID0gY29kZWNTdHJlYW07XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNpZ25hdHVyZSxcblx0XHRcdHNpemVcblx0XHR9O1xuXHR9IGZpbmFsbHkge1xuXHRcdG9uVGFza0ZpbmlzaGVkKCk7XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVuV2ViV29ya2VyKHdvcmtlckRhdGEsIGNvbmZpZykge1xuXHRsZXQgcmVzb2x2ZVJlc3VsdCwgcmVqZWN0UmVzdWx0O1xuXHRjb25zdCByZXN1bHQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0cmVzb2x2ZVJlc3VsdCA9IHJlc29sdmU7XG5cdFx0cmVqZWN0UmVzdWx0ID0gcmVqZWN0O1xuXHR9KTtcblx0T2JqZWN0LmFzc2lnbih3b3JrZXJEYXRhLCB7XG5cdFx0cmVhZGVyOiBudWxsLFxuXHRcdHdyaXRlcjogbnVsbCxcblx0XHRyZXNvbHZlUmVzdWx0LFxuXHRcdHJlamVjdFJlc3VsdCxcblx0XHRyZXN1bHRcblx0fSk7XG5cdGNvbnN0IHsgcmVhZGFibGUsIG9wdGlvbnMsIHNjcmlwdHMgfSA9IHdvcmtlckRhdGE7XG5cdGNvbnN0IHsgd3JpdGFibGUsIGNsb3NlZCB9ID0gd2F0Y2hDbG9zZWRTdHJlYW0od29ya2VyRGF0YS53cml0YWJsZSk7XG5cdGNvbnN0IHN0cmVhbXNUcmFuc2ZlcnJlZCA9IHNlbmRNZXNzYWdlKHtcblx0XHR0eXBlOiBNRVNTQUdFX1NUQVJULFxuXHRcdHNjcmlwdHM6IHNjcmlwdHMuc2xpY2UoMSksXG5cdFx0b3B0aW9ucyxcblx0XHRjb25maWcsXG5cdFx0cmVhZGFibGUsXG5cdFx0d3JpdGFibGVcblx0fSwgd29ya2VyRGF0YSk7XG5cdGlmICghc3RyZWFtc1RyYW5zZmVycmVkKSB7XG5cdFx0T2JqZWN0LmFzc2lnbih3b3JrZXJEYXRhLCB7XG5cdFx0XHRyZWFkZXI6IHJlYWRhYmxlLmdldFJlYWRlcigpLFxuXHRcdFx0d3JpdGVyOiB3cml0YWJsZS5nZXRXcml0ZXIoKVxuXHRcdH0pO1xuXHR9XG5cdGNvbnN0IHJlc3VsdFZhbHVlID0gYXdhaXQgcmVzdWx0O1xuXHR0cnkge1xuXHRcdGF3YWl0IHdyaXRhYmxlLmdldFdyaXRlcigpLmNsb3NlKCk7XG5cdH0gY2F0Y2ggKF9lcnJvcikge1xuXHRcdC8vIGlnbm9yZWRcblx0fVxuXHRhd2FpdCBjbG9zZWQ7XG5cdHJldHVybiByZXN1bHRWYWx1ZTtcbn1cblxuZnVuY3Rpb24gd2F0Y2hDbG9zZWRTdHJlYW0od3JpdGFibGVTb3VyY2UpIHtcblx0Y29uc3Qgd3JpdGVyID0gd3JpdGFibGVTb3VyY2UuZ2V0V3JpdGVyKCk7XG5cdGxldCByZXNvbHZlU3RyZWFtQ2xvc2VkO1xuXHRjb25zdCBjbG9zZWQgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHJlc29sdmVTdHJlYW1DbG9zZWQgPSByZXNvbHZlKTtcblx0Y29uc3Qgd3JpdGFibGUgPSBuZXcgV3JpdGFibGVTdHJlYW0oe1xuXHRcdGFzeW5jIHdyaXRlKGNodW5rKSB7XG5cdFx0XHRhd2FpdCB3cml0ZXIucmVhZHk7XG5cdFx0XHRhd2FpdCB3cml0ZXIud3JpdGUoY2h1bmspO1xuXHRcdH0sXG5cdFx0Y2xvc2UoKSB7XG5cdFx0XHR3cml0ZXIucmVsZWFzZUxvY2soKTtcblx0XHRcdHJlc29sdmVTdHJlYW1DbG9zZWQoKTtcblx0XHR9LFxuXHRcdGFib3J0KHJlYXNvbikge1xuXHRcdFx0cmV0dXJuIHdyaXRlci5hYm9ydChyZWFzb24pO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiB7IHdyaXRhYmxlLCBjbG9zZWQgfTtcbn1cblxubGV0IGNsYXNzaWNXb3JrZXJzU3VwcG9ydGVkID0gdHJ1ZTtcbmxldCB0cmFuc2ZlclN0cmVhbXNTdXBwb3J0ZWQgPSB0cnVlO1xuXG5mdW5jdGlvbiBnZXRXZWJXb3JrZXIodXJsLCBiYXNlVVJMLCB3b3JrZXJEYXRhKSB7XG5cdGNvbnN0IHdvcmtlck9wdGlvbnMgPSB7IHR5cGU6IFwibW9kdWxlXCIgfTtcblx0bGV0IHNjcmlwdFVybCwgd29ya2VyO1xuXHQvLyBkZW5vLWxpbnQtaWdub3JlIHZhbGlkLXR5cGVvZlxuXHRpZiAodHlwZW9mIHVybCA9PSBGVU5DVElPTl9UWVBFKSB7XG5cdFx0dXJsID0gdXJsKCk7XG5cdH1cblx0dHJ5IHtcblx0XHRzY3JpcHRVcmwgPSBuZXcgVVJMKHVybCwgYmFzZVVSTCk7XG5cdH0gY2F0Y2ggKF9lcnJvcikge1xuXHRcdHNjcmlwdFVybCA9IHVybDtcblx0fVxuXHRpZiAoY2xhc3NpY1dvcmtlcnNTdXBwb3J0ZWQpIHtcblx0XHR0cnkge1xuXHRcdFx0d29ya2VyID0gbmV3IFdvcmtlcihzY3JpcHRVcmwpO1xuXHRcdH0gY2F0Y2ggKF9lcnJvcikge1xuXHRcdFx0Y2xhc3NpY1dvcmtlcnNTdXBwb3J0ZWQgPSBmYWxzZTtcblx0XHRcdHdvcmtlciA9IG5ldyBXb3JrZXIoc2NyaXB0VXJsLCB3b3JrZXJPcHRpb25zKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0d29ya2VyID0gbmV3IFdvcmtlcihzY3JpcHRVcmwsIHdvcmtlck9wdGlvbnMpO1xuXHR9XG5cdHdvcmtlci5hZGRFdmVudExpc3RlbmVyKE1FU1NBR0VfRVZFTlRfVFlQRSwgZXZlbnQgPT4gb25NZXNzYWdlKGV2ZW50LCB3b3JrZXJEYXRhKSk7XG5cdHJldHVybiB3b3JrZXI7XG59XG5cbmZ1bmN0aW9uIHNlbmRNZXNzYWdlKG1lc3NhZ2UsIHsgd29ya2VyLCB3cml0ZXIsIG9uVGFza0ZpbmlzaGVkLCB0cmFuc2ZlclN0cmVhbXMgfSkge1xuXHR0cnkge1xuXHRcdGxldCB7IHZhbHVlLCByZWFkYWJsZSwgd3JpdGFibGUgfSA9IG1lc3NhZ2U7XG5cdFx0Y29uc3QgdHJhbnNmZXJhYmxlcyA9IFtdO1xuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0aWYgKHZhbHVlLmJ5dGVMZW5ndGggPCB2YWx1ZS5idWZmZXIuYnl0ZUxlbmd0aCkge1xuXHRcdFx0XHRtZXNzYWdlLnZhbHVlID0gdmFsdWUuYnVmZmVyLnNsaWNlKDAsIHZhbHVlLmJ5dGVMZW5ndGgpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdG1lc3NhZ2UudmFsdWUgPSB2YWx1ZS5idWZmZXI7XG5cdFx0XHR9XG5cdFx0XHR0cmFuc2ZlcmFibGVzLnB1c2gobWVzc2FnZS52YWx1ZSk7XG5cdFx0fVxuXHRcdGlmICh0cmFuc2ZlclN0cmVhbXMgJiYgdHJhbnNmZXJTdHJlYW1zU3VwcG9ydGVkKSB7XG5cdFx0XHRpZiAocmVhZGFibGUpIHtcblx0XHRcdFx0dHJhbnNmZXJhYmxlcy5wdXNoKHJlYWRhYmxlKTtcblx0XHRcdH1cblx0XHRcdGlmICh3cml0YWJsZSkge1xuXHRcdFx0XHR0cmFuc2ZlcmFibGVzLnB1c2god3JpdGFibGUpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZXNzYWdlLnJlYWRhYmxlID0gbWVzc2FnZS53cml0YWJsZSA9IG51bGw7XG5cdFx0fVxuXHRcdGlmICh0cmFuc2ZlcmFibGVzLmxlbmd0aCkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0d29ya2VyLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIHRyYW5zZmVyYWJsZXMpO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gY2F0Y2ggKF9lcnJvcikge1xuXHRcdFx0XHR0cmFuc2ZlclN0cmVhbXNTdXBwb3J0ZWQgPSBmYWxzZTtcblx0XHRcdFx0bWVzc2FnZS5yZWFkYWJsZSA9IG1lc3NhZ2Uud3JpdGFibGUgPSBudWxsO1xuXHRcdFx0XHR3b3JrZXIucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdvcmtlci5wb3N0TWVzc2FnZShtZXNzYWdlKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKHdyaXRlcikge1xuXHRcdFx0d3JpdGVyLnJlbGVhc2VMb2NrKCk7XG5cdFx0fVxuXHRcdG9uVGFza0ZpbmlzaGVkKCk7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gb25NZXNzYWdlKHsgZGF0YSB9LCB3b3JrZXJEYXRhKSB7XG5cdGNvbnN0IHsgdHlwZSwgdmFsdWUsIG1lc3NhZ2VJZCwgcmVzdWx0LCBlcnJvciB9ID0gZGF0YTtcblx0Y29uc3QgeyByZWFkZXIsIHdyaXRlciwgcmVzb2x2ZVJlc3VsdCwgcmVqZWN0UmVzdWx0LCBvblRhc2tGaW5pc2hlZCB9ID0gd29ya2VyRGF0YTtcblx0dHJ5IHtcblx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdGNvbnN0IHsgbWVzc2FnZSwgc3RhY2ssIGNvZGUsIG5hbWUgfSA9IGVycm9yO1xuXHRcdFx0Y29uc3QgcmVzcG9uc2VFcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcblx0XHRcdE9iamVjdC5hc3NpZ24ocmVzcG9uc2VFcnJvciwgeyBzdGFjaywgY29kZSwgbmFtZSB9KTtcblx0XHRcdGNsb3NlKHJlc3BvbnNlRXJyb3IpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAodHlwZSA9PSBNRVNTQUdFX1BVTEwpIHtcblx0XHRcdFx0Y29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcblx0XHRcdFx0c2VuZE1lc3NhZ2UoeyB0eXBlOiBNRVNTQUdFX0RBVEEsIHZhbHVlLCBkb25lLCBtZXNzYWdlSWQgfSwgd29ya2VyRGF0YSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodHlwZSA9PSBNRVNTQUdFX0RBVEEpIHtcblx0XHRcdFx0YXdhaXQgd3JpdGVyLnJlYWR5O1xuXHRcdFx0XHRhd2FpdCB3cml0ZXIud3JpdGUobmV3IFVpbnQ4QXJyYXkodmFsdWUpKTtcblx0XHRcdFx0c2VuZE1lc3NhZ2UoeyB0eXBlOiBNRVNTQUdFX0FDS19EQVRBLCBtZXNzYWdlSWQgfSwgd29ya2VyRGF0YSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodHlwZSA9PSBNRVNTQUdFX0NMT1NFKSB7XG5cdFx0XHRcdGNsb3NlKG51bGwsIHJlc3VsdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNsb3NlKGVycm9yKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNsb3NlKGVycm9yLCByZXN1bHQpIHtcblx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdHJlamVjdFJlc3VsdChlcnJvcik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc29sdmVSZXN1bHQocmVzdWx0KTtcblx0XHR9XG5cdFx0aWYgKHdyaXRlcikge1xuXHRcdFx0d3JpdGVyLnJlbGVhc2VMb2NrKCk7XG5cdFx0fVxuXHRcdG9uVGFza0ZpbmlzaGVkKCk7XG5cdH1cbn0iLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbi8qIGdsb2JhbCBzZXRUaW1lb3V0LCBjbGVhclRpbWVvdXQgKi9cblxuaW1wb3J0IHsgVU5ERUZJTkVEX1ZBTFVFIH0gZnJvbSBcIi4vY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQge1xuXHRDT0RFQ19JTkZMQVRFLFxuXHRDT0RFQ19ERUZMQVRFLFxuXHRFUlJfSU5WQUxJRF9TSUdOQVRVUkUsXG5cdEVSUl9JTlZBTElEX1BBU1NXT1JELFxuXHRFUlJfQUJPUlRfQ0hFQ0tfUEFTU1dPUkRcbn0gZnJvbSBcIi4vc3RyZWFtcy9jb2RlYy1zdHJlYW0uanNcIjtcbmltcG9ydCB7IENvZGVjV29ya2VyIH0gZnJvbSBcIi4vY29kZWMtd29ya2VyLmpzXCI7XG5cbmxldCBwb29sID0gW107XG5jb25zdCBwZW5kaW5nUmVxdWVzdHMgPSBbXTtcblxuZXhwb3J0IHtcblx0cnVuV29ya2VyLFxuXHR0ZXJtaW5hdGVXb3JrZXJzLFxuXHRDT0RFQ19ERUZMQVRFLFxuXHRDT0RFQ19JTkZMQVRFLFxuXHRFUlJfSU5WQUxJRF9TSUdOQVRVUkUsXG5cdEVSUl9JTlZBTElEX1BBU1NXT1JELFxuXHRFUlJfQUJPUlRfQ0hFQ0tfUEFTU1dPUkRcbn07XG5cbmxldCBpbmRleFdvcmtlciA9IDA7XG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bldvcmtlcihzdHJlYW0sIHdvcmtlck9wdGlvbnMpIHtcblx0Y29uc3QgeyBvcHRpb25zLCBjb25maWcgfSA9IHdvcmtlck9wdGlvbnM7XG5cdGNvbnN0IHsgdHJhbnNmZXJTdHJlYW1zLCB1c2VXZWJXb3JrZXJzLCB1c2VDb21wcmVzc2lvblN0cmVhbSwgY29kZWNUeXBlLCBjb21wcmVzc2VkLCBzaWduZWQsIGVuY3J5cHRlZCB9ID0gb3B0aW9ucztcblx0Y29uc3QgeyB3b3JrZXJTY3JpcHRzLCBtYXhXb3JrZXJzLCB0ZXJtaW5hdGVXb3JrZXJUaW1lb3V0IH0gPSBjb25maWc7XG5cdHdvcmtlck9wdGlvbnMudHJhbnNmZXJTdHJlYW1zID0gdHJhbnNmZXJTdHJlYW1zIHx8IHRyYW5zZmVyU3RyZWFtcyA9PT0gVU5ERUZJTkVEX1ZBTFVFO1xuXHRjb25zdCBzdHJlYW1Db3B5ID0gIWNvbXByZXNzZWQgJiYgIXNpZ25lZCAmJiAhZW5jcnlwdGVkICYmICF3b3JrZXJPcHRpb25zLnRyYW5zZmVyU3RyZWFtcztcblx0d29ya2VyT3B0aW9ucy51c2VXZWJXb3JrZXJzID0gIXN0cmVhbUNvcHkgJiYgKHVzZVdlYldvcmtlcnMgfHwgKHVzZVdlYldvcmtlcnMgPT09IFVOREVGSU5FRF9WQUxVRSAmJiBjb25maWcudXNlV2ViV29ya2VycykpO1xuXHR3b3JrZXJPcHRpb25zLnNjcmlwdHMgPSB3b3JrZXJPcHRpb25zLnVzZVdlYldvcmtlcnMgJiYgd29ya2VyU2NyaXB0cyA/IHdvcmtlclNjcmlwdHNbY29kZWNUeXBlXSA6IFtdO1xuXHRvcHRpb25zLnVzZUNvbXByZXNzaW9uU3RyZWFtID0gdXNlQ29tcHJlc3Npb25TdHJlYW0gfHwgKHVzZUNvbXByZXNzaW9uU3RyZWFtID09PSBVTkRFRklORURfVkFMVUUgJiYgY29uZmlnLnVzZUNvbXByZXNzaW9uU3RyZWFtKTtcblx0bGV0IHdvcmtlcjtcblx0Y29uc3Qgd29ya2VyRGF0YSA9IHBvb2wuZmluZCh3b3JrZXJEYXRhID0+ICF3b3JrZXJEYXRhLmJ1c3kpO1xuXHRpZiAod29ya2VyRGF0YSkge1xuXHRcdGNsZWFyVGVybWluYXRlVGltZW91dCh3b3JrZXJEYXRhKTtcblx0XHR3b3JrZXIgPSBuZXcgQ29kZWNXb3JrZXIod29ya2VyRGF0YSwgc3RyZWFtLCB3b3JrZXJPcHRpb25zLCBvblRhc2tGaW5pc2hlZCk7XG5cdH0gZWxzZSBpZiAocG9vbC5sZW5ndGggPCBtYXhXb3JrZXJzKSB7XG5cdFx0Y29uc3Qgd29ya2VyRGF0YSA9IHsgaW5kZXhXb3JrZXIgfTtcblx0XHRpbmRleFdvcmtlcisrO1xuXHRcdHBvb2wucHVzaCh3b3JrZXJEYXRhKTtcblx0XHR3b3JrZXIgPSBuZXcgQ29kZWNXb3JrZXIod29ya2VyRGF0YSwgc3RyZWFtLCB3b3JrZXJPcHRpb25zLCBvblRhc2tGaW5pc2hlZCk7XG5cdH0gZWxzZSB7XG5cdFx0d29ya2VyID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBwZW5kaW5nUmVxdWVzdHMucHVzaCh7IHJlc29sdmUsIHN0cmVhbSwgd29ya2VyT3B0aW9ucyB9KSk7XG5cdH1cblx0cmV0dXJuIHdvcmtlci5ydW4oKTtcblxuXHRmdW5jdGlvbiBvblRhc2tGaW5pc2hlZCh3b3JrZXJEYXRhKSB7XG5cdFx0aWYgKHBlbmRpbmdSZXF1ZXN0cy5sZW5ndGgpIHtcblx0XHRcdGNvbnN0IFt7IHJlc29sdmUsIHN0cmVhbSwgd29ya2VyT3B0aW9ucyB9XSA9IHBlbmRpbmdSZXF1ZXN0cy5zcGxpY2UoMCwgMSk7XG5cdFx0XHRyZXNvbHZlKG5ldyBDb2RlY1dvcmtlcih3b3JrZXJEYXRhLCBzdHJlYW0sIHdvcmtlck9wdGlvbnMsIG9uVGFza0ZpbmlzaGVkKSk7XG5cdFx0fSBlbHNlIGlmICh3b3JrZXJEYXRhLndvcmtlcikge1xuXHRcdFx0Y2xlYXJUZXJtaW5hdGVUaW1lb3V0KHdvcmtlckRhdGEpO1xuXHRcdFx0aWYgKE51bWJlci5pc0Zpbml0ZSh0ZXJtaW5hdGVXb3JrZXJUaW1lb3V0KSAmJiB0ZXJtaW5hdGVXb3JrZXJUaW1lb3V0ID49IDApIHtcblx0XHRcdFx0d29ya2VyRGF0YS50ZXJtaW5hdGVUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0cG9vbCA9IHBvb2wuZmlsdGVyKGRhdGEgPT4gZGF0YSAhPSB3b3JrZXJEYXRhKTtcblx0XHRcdFx0XHR3b3JrZXJEYXRhLnRlcm1pbmF0ZSgpO1xuXHRcdFx0XHR9LCB0ZXJtaW5hdGVXb3JrZXJUaW1lb3V0KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0cG9vbCA9IHBvb2wuZmlsdGVyKGRhdGEgPT4gZGF0YSAhPSB3b3JrZXJEYXRhKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gY2xlYXJUZXJtaW5hdGVUaW1lb3V0KHdvcmtlckRhdGEpIHtcblx0Y29uc3QgeyB0ZXJtaW5hdGVUaW1lb3V0IH0gPSB3b3JrZXJEYXRhO1xuXHRpZiAodGVybWluYXRlVGltZW91dCkge1xuXHRcdGNsZWFyVGltZW91dCh0ZXJtaW5hdGVUaW1lb3V0KTtcblx0XHR3b3JrZXJEYXRhLnRlcm1pbmF0ZVRpbWVvdXQgPSBudWxsO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHRlcm1pbmF0ZVdvcmtlcnMoKSB7XG5cdHBvb2wuZm9yRWFjaCh3b3JrZXJEYXRhID0+IHtcblx0XHRjbGVhclRlcm1pbmF0ZVRpbWVvdXQod29ya2VyRGF0YSk7XG5cdFx0d29ya2VyRGF0YS50ZXJtaW5hdGUoKTtcblx0fSk7XG59IiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4vKiBnbG9iYWwgQmxvYiwgYXRvYiwgYnRvYSwgWE1MSHR0cFJlcXVlc3QsIFVSTCwgZmV0Y2gsIFJlYWRhYmxlU3RyZWFtLCBXcml0YWJsZVN0cmVhbSwgRmlsZVJlYWRlciwgVHJhbnNmb3JtU3RyZWFtLCBSZXNwb25zZSAqL1xuLy8gZGVuby1saW50LWlnbm9yZS1maWxlIG5vLXRoaXMtYWxpYXNcblxuaW1wb3J0IHtcblx0VU5ERUZJTkVEX1ZBTFVFLFxuXHRGVU5DVElPTl9UWVBFXG59IGZyb20gXCIuL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgZ2V0Q29uZmlndXJhdGlvbiB9IGZyb20gXCIuL2NvbmZpZ3VyYXRpb24uanNcIjtcblxuY29uc3QgRVJSX0hUVFBfU1RBVFVTID0gXCJIVFRQIGVycm9yIFwiO1xuY29uc3QgRVJSX0hUVFBfUkFOR0UgPSBcIkhUVFAgUmFuZ2Ugbm90IHN1cHBvcnRlZFwiO1xuY29uc3QgRVJSX0lURVJBVE9SX0NPTVBMRVRFRF9UT09fU09PTiA9IFwiV3JpdGVyIGl0ZXJhdG9yIGNvbXBsZXRlZCB0b28gc29vblwiO1xuXG5jb25zdCBDT05URU5UX1RZUEVfVEVYVF9QTEFJTiA9IFwidGV4dC9wbGFpblwiO1xuY29uc3QgSFRUUF9IRUFERVJfQ09OVEVOVF9MRU5HVEggPSBcIkNvbnRlbnQtTGVuZ3RoXCI7XG5jb25zdCBIVFRQX0hFQURFUl9DT05URU5UX1JBTkdFID0gXCJDb250ZW50LVJhbmdlXCI7XG5jb25zdCBIVFRQX0hFQURFUl9BQ0NFUFRfUkFOR0VTID0gXCJBY2NlcHQtUmFuZ2VzXCI7XG5jb25zdCBIVFRQX0hFQURFUl9SQU5HRSA9IFwiUmFuZ2VcIjtcbmNvbnN0IEhUVFBfSEVBREVSX0NPTlRFTlRfVFlQRSA9IFwiQ29udGVudC1UeXBlXCI7XG5jb25zdCBIVFRQX01FVEhPRF9IRUFEID0gXCJIRUFEXCI7XG5jb25zdCBIVFRQX01FVEhPRF9HRVQgPSBcIkdFVFwiO1xuY29uc3QgSFRUUF9SQU5HRV9VTklUID0gXCJieXRlc1wiO1xuY29uc3QgREVGQVVMVF9DSFVOS19TSVpFID0gNjQgKiAxMDI0O1xuXG5jb25zdCBQUk9QRVJUWV9OQU1FX1dSSVRBQkxFID0gXCJ3cml0YWJsZVwiO1xuXG5jbGFzcyBTdHJlYW0ge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuc2l6ZSA9IDA7XG5cdH1cblxuXHRpbml0KCkge1xuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHR9XG59XG5cbmNsYXNzIFJlYWRlciBleHRlbmRzIFN0cmVhbSB7XG5cblx0Z2V0IHJlYWRhYmxlKCkge1xuXHRcdGNvbnN0IHJlYWRlciA9IHRoaXM7XG5cdFx0Y29uc3QgeyBjaHVua1NpemUgPSBERUZBVUxUX0NIVU5LX1NJWkUgfSA9IHJlYWRlcjtcblx0XHRjb25zdCByZWFkYWJsZSA9IG5ldyBSZWFkYWJsZVN0cmVhbSh7XG5cdFx0XHRzdGFydCgpIHtcblx0XHRcdFx0dGhpcy5jaHVua09mZnNldCA9IDA7XG5cdFx0XHR9LFxuXHRcdFx0YXN5bmMgcHVsbChjb250cm9sbGVyKSB7XG5cdFx0XHRcdGNvbnN0IHsgb2Zmc2V0ID0gMCwgc2l6ZSwgZGlza051bWJlclN0YXJ0IH0gPSByZWFkYWJsZTtcblx0XHRcdFx0Y29uc3QgeyBjaHVua09mZnNldCB9ID0gdGhpcztcblx0XHRcdFx0Y29udHJvbGxlci5lbnF1ZXVlKGF3YWl0IHJlYWRVaW50OEFycmF5KHJlYWRlciwgb2Zmc2V0ICsgY2h1bmtPZmZzZXQsIE1hdGgubWluKGNodW5rU2l6ZSwgc2l6ZSAtIGNodW5rT2Zmc2V0KSwgZGlza051bWJlclN0YXJ0KSk7XG5cdFx0XHRcdGlmIChjaHVua09mZnNldCArIGNodW5rU2l6ZSA+IHNpemUpIHtcblx0XHRcdFx0XHRjb250cm9sbGVyLmNsb3NlKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5jaHVua09mZnNldCArPSBjaHVua1NpemU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gcmVhZGFibGU7XG5cdH1cbn1cblxuY2xhc3MgV3JpdGVyIGV4dGVuZHMgU3RyZWFtIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHRcdGNvbnN0IHdyaXRlciA9IHRoaXM7XG5cdFx0Y29uc3Qgd3JpdGFibGUgPSBuZXcgV3JpdGFibGVTdHJlYW0oe1xuXHRcdFx0d3JpdGUoY2h1bmspIHtcblx0XHRcdFx0cmV0dXJuIHdyaXRlci53cml0ZVVpbnQ4QXJyYXkoY2h1bmspO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3cml0ZXIsIFBST1BFUlRZX05BTUVfV1JJVEFCTEUsIHtcblx0XHRcdGdldCgpIHtcblx0XHRcdFx0cmV0dXJuIHdyaXRhYmxlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0d3JpdGVVaW50OEFycmF5KCkge1xuXHRcdC8vIGFic3RyYWN0XG5cdH1cbn1cblxuY2xhc3MgRGF0YTY0VVJJUmVhZGVyIGV4dGVuZHMgUmVhZGVyIHtcblxuXHRjb25zdHJ1Y3RvcihkYXRhVVJJKSB7XG5cdFx0c3VwZXIoKTtcblx0XHRsZXQgZGF0YUVuZCA9IGRhdGFVUkkubGVuZ3RoO1xuXHRcdHdoaWxlIChkYXRhVVJJLmNoYXJBdChkYXRhRW5kIC0gMSkgPT0gXCI9XCIpIHtcblx0XHRcdGRhdGFFbmQtLTtcblx0XHR9XG5cdFx0Y29uc3QgZGF0YVN0YXJ0ID0gZGF0YVVSSS5pbmRleE9mKFwiLFwiKSArIDE7XG5cdFx0T2JqZWN0LmFzc2lnbih0aGlzLCB7XG5cdFx0XHRkYXRhVVJJLFxuXHRcdFx0ZGF0YVN0YXJ0LFxuXHRcdFx0c2l6ZTogTWF0aC5mbG9vcigoZGF0YUVuZCAtIGRhdGFTdGFydCkgKiAwLjc1KVxuXHRcdH0pO1xuXHR9XG5cblx0cmVhZFVpbnQ4QXJyYXkob2Zmc2V0LCBsZW5ndGgpIHtcblx0XHRjb25zdCB7XG5cdFx0XHRkYXRhU3RhcnQsXG5cdFx0XHRkYXRhVVJJXG5cdFx0fSA9IHRoaXM7XG5cdFx0Y29uc3QgZGF0YUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcblx0XHRjb25zdCBzdGFydCA9IE1hdGguZmxvb3Iob2Zmc2V0IC8gMykgKiA0O1xuXHRcdGNvbnN0IGJ5dGVzID0gYXRvYihkYXRhVVJJLnN1YnN0cmluZyhzdGFydCArIGRhdGFTdGFydCwgTWF0aC5jZWlsKChvZmZzZXQgKyBsZW5ndGgpIC8gMykgKiA0ICsgZGF0YVN0YXJ0KSk7XG5cdFx0Y29uc3QgZGVsdGEgPSBvZmZzZXQgLSBNYXRoLmZsb29yKHN0YXJ0IC8gNCkgKiAzO1xuXHRcdGZvciAobGV0IGluZGV4Qnl0ZSA9IGRlbHRhOyBpbmRleEJ5dGUgPCBkZWx0YSArIGxlbmd0aDsgaW5kZXhCeXRlKyspIHtcblx0XHRcdGRhdGFBcnJheVtpbmRleEJ5dGUgLSBkZWx0YV0gPSBieXRlcy5jaGFyQ29kZUF0KGluZGV4Qnl0ZSk7XG5cdFx0fVxuXHRcdHJldHVybiBkYXRhQXJyYXk7XG5cdH1cbn1cblxuY2xhc3MgRGF0YTY0VVJJV3JpdGVyIGV4dGVuZHMgV3JpdGVyIHtcblxuXHRjb25zdHJ1Y3Rvcihjb250ZW50VHlwZSkge1xuXHRcdHN1cGVyKCk7XG5cdFx0T2JqZWN0LmFzc2lnbih0aGlzLCB7XG5cdFx0XHRkYXRhOiBcImRhdGE6XCIgKyAoY29udGVudFR5cGUgfHwgXCJcIikgKyBcIjtiYXNlNjQsXCIsXG5cdFx0XHRwZW5kaW5nOiBbXVxuXHRcdH0pO1xuXHR9XG5cblx0d3JpdGVVaW50OEFycmF5KGFycmF5KSB7XG5cdFx0Y29uc3Qgd3JpdGVyID0gdGhpcztcblx0XHRsZXQgaW5kZXhBcnJheSA9IDA7XG5cdFx0bGV0IGRhdGFTdHJpbmcgPSB3cml0ZXIucGVuZGluZztcblx0XHRjb25zdCBkZWx0YSA9IHdyaXRlci5wZW5kaW5nLmxlbmd0aDtcblx0XHR3cml0ZXIucGVuZGluZyA9IFwiXCI7XG5cdFx0Zm9yIChpbmRleEFycmF5ID0gMDsgaW5kZXhBcnJheSA8IChNYXRoLmZsb29yKChkZWx0YSArIGFycmF5Lmxlbmd0aCkgLyAzKSAqIDMpIC0gZGVsdGE7IGluZGV4QXJyYXkrKykge1xuXHRcdFx0ZGF0YVN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGFycmF5W2luZGV4QXJyYXldKTtcblx0XHR9XG5cdFx0Zm9yICg7IGluZGV4QXJyYXkgPCBhcnJheS5sZW5ndGg7IGluZGV4QXJyYXkrKykge1xuXHRcdFx0d3JpdGVyLnBlbmRpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShhcnJheVtpbmRleEFycmF5XSk7XG5cdFx0fVxuXHRcdGlmIChkYXRhU3RyaW5nLmxlbmd0aCA+IDIpIHtcblx0XHRcdHdyaXRlci5kYXRhICs9IGJ0b2EoZGF0YVN0cmluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdyaXRlci5wZW5kaW5nID0gZGF0YVN0cmluZztcblx0XHR9XG5cdH1cblxuXHRnZXREYXRhKCkge1xuXHRcdHJldHVybiB0aGlzLmRhdGEgKyBidG9hKHRoaXMucGVuZGluZyk7XG5cdH1cbn1cblxuY2xhc3MgQmxvYlJlYWRlciBleHRlbmRzIFJlYWRlciB7XG5cblx0Y29uc3RydWN0b3IoYmxvYikge1xuXHRcdHN1cGVyKCk7XG5cdFx0T2JqZWN0LmFzc2lnbih0aGlzLCB7XG5cdFx0XHRibG9iLFxuXHRcdFx0c2l6ZTogYmxvYi5zaXplXG5cdFx0fSk7XG5cdH1cblxuXHRhc3luYyByZWFkVWludDhBcnJheShvZmZzZXQsIGxlbmd0aCkge1xuXHRcdGNvbnN0IHJlYWRlciA9IHRoaXM7XG5cdFx0Y29uc3Qgb2Zmc2V0RW5kID0gb2Zmc2V0ICsgbGVuZ3RoO1xuXHRcdGNvbnN0IGJsb2IgPSBvZmZzZXQgfHwgb2Zmc2V0RW5kIDwgcmVhZGVyLnNpemUgPyByZWFkZXIuYmxvYi5zbGljZShvZmZzZXQsIG9mZnNldEVuZCkgOiByZWFkZXIuYmxvYjtcblx0XHRsZXQgYXJyYXlCdWZmZXIgPSBhd2FpdCBibG9iLmFycmF5QnVmZmVyKCk7XG5cdFx0aWYgKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGggPiBsZW5ndGgpIHtcblx0XHRcdGFycmF5QnVmZmVyID0gYXJyYXlCdWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXRFbmQpO1xuXHRcdH1cblx0XHRyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpO1xuXHR9XG59XG5cbmNsYXNzIEJsb2JXcml0ZXIgZXh0ZW5kcyBTdHJlYW0ge1xuXG5cdGNvbnN0cnVjdG9yKGNvbnRlbnRUeXBlKSB7XG5cdFx0c3VwZXIoKTtcblx0XHRjb25zdCB3cml0ZXIgPSB0aGlzO1xuXHRcdGNvbnN0IHRyYW5zZm9ybVN0cmVhbSA9IG5ldyBUcmFuc2Zvcm1TdHJlYW0oKTtcblx0XHRjb25zdCBoZWFkZXJzID0gW107XG5cdFx0aWYgKGNvbnRlbnRUeXBlKSB7XG5cdFx0XHRoZWFkZXJzLnB1c2goW0hUVFBfSEVBREVSX0NPTlRFTlRfVFlQRSwgY29udGVudFR5cGVdKTtcblx0XHR9XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHdyaXRlciwgUFJPUEVSVFlfTkFNRV9XUklUQUJMRSwge1xuXHRcdFx0Z2V0KCkge1xuXHRcdFx0XHRyZXR1cm4gdHJhbnNmb3JtU3RyZWFtLndyaXRhYmxlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHdyaXRlci5ibG9iID0gbmV3IFJlc3BvbnNlKHRyYW5zZm9ybVN0cmVhbS5yZWFkYWJsZSwgeyBoZWFkZXJzIH0pLmJsb2IoKTtcblx0fVxuXG5cdGdldERhdGEoKSB7XG5cdFx0cmV0dXJuIHRoaXMuYmxvYjtcblx0fVxufVxuXG5jbGFzcyBUZXh0UmVhZGVyIGV4dGVuZHMgQmxvYlJlYWRlciB7XG5cblx0Y29uc3RydWN0b3IodGV4dCkge1xuXHRcdHN1cGVyKG5ldyBCbG9iKFt0ZXh0XSwgeyB0eXBlOiBDT05URU5UX1RZUEVfVEVYVF9QTEFJTiB9KSk7XG5cdH1cbn1cblxuY2xhc3MgVGV4dFdyaXRlciBleHRlbmRzIEJsb2JXcml0ZXIge1xuXG5cdGNvbnN0cnVjdG9yKGVuY29kaW5nKSB7XG5cdFx0c3VwZXIoZW5jb2RpbmcpO1xuXHRcdE9iamVjdC5hc3NpZ24odGhpcywge1xuXHRcdFx0ZW5jb2RpbmcsXG5cdFx0XHR1dGY4OiAhZW5jb2RpbmcgfHwgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSA9PSBcInV0Zi04XCJcblx0XHR9KTtcblx0fVxuXG5cdGFzeW5jIGdldERhdGEoKSB7XG5cdFx0Y29uc3Qge1xuXHRcdFx0ZW5jb2RpbmcsXG5cdFx0XHR1dGY4XG5cdFx0fSA9IHRoaXM7XG5cdFx0Y29uc3QgYmxvYiA9IGF3YWl0IHN1cGVyLmdldERhdGEoKTtcblx0XHRpZiAoYmxvYi50ZXh0ICYmIHV0ZjgpIHtcblx0XHRcdHJldHVybiBibG9iLnRleHQoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRcdE9iamVjdC5hc3NpZ24ocmVhZGVyLCB7XG5cdFx0XHRcdFx0b25sb2FkOiAoeyB0YXJnZXQgfSkgPT4gcmVzb2x2ZSh0YXJnZXQucmVzdWx0KSxcblx0XHRcdFx0XHRvbmVycm9yOiAoKSA9PiByZWplY3QocmVhZGVyLmVycm9yKVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmVhZGVyLnJlYWRBc1RleHQoYmxvYiwgZW5jb2RpbmcpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG59XG5cbmNsYXNzIEZldGNoUmVhZGVyIGV4dGVuZHMgUmVhZGVyIHtcblxuXHRjb25zdHJ1Y3Rvcih1cmwsIG9wdGlvbnMpIHtcblx0XHRzdXBlcigpO1xuXHRcdGNyZWF0ZUh0cFJlYWRlcih0aGlzLCB1cmwsIG9wdGlvbnMpO1xuXHR9XG5cblx0YXN5bmMgaW5pdCgpIHtcblx0XHRhd2FpdCBpbml0SHR0cFJlYWRlcih0aGlzLCBzZW5kRmV0Y2hSZXF1ZXN0LCBnZXRGZXRjaFJlcXVlc3REYXRhKTtcblx0XHRzdXBlci5pbml0KCk7XG5cdH1cblxuXHRyZWFkVWludDhBcnJheShpbmRleCwgbGVuZ3RoKSB7XG5cdFx0cmV0dXJuIHJlYWRVaW50OEFycmF5SHR0cFJlYWRlcih0aGlzLCBpbmRleCwgbGVuZ3RoLCBzZW5kRmV0Y2hSZXF1ZXN0LCBnZXRGZXRjaFJlcXVlc3REYXRhKTtcblx0fVxufVxuXG5jbGFzcyBYSFJSZWFkZXIgZXh0ZW5kcyBSZWFkZXIge1xuXG5cdGNvbnN0cnVjdG9yKHVybCwgb3B0aW9ucykge1xuXHRcdHN1cGVyKCk7XG5cdFx0Y3JlYXRlSHRwUmVhZGVyKHRoaXMsIHVybCwgb3B0aW9ucyk7XG5cdH1cblxuXHRhc3luYyBpbml0KCkge1xuXHRcdGF3YWl0IGluaXRIdHRwUmVhZGVyKHRoaXMsIHNlbmRYTUxIdHRwUmVxdWVzdCwgZ2V0WE1MSHR0cFJlcXVlc3REYXRhKTtcblx0XHRzdXBlci5pbml0KCk7XG5cdH1cblxuXHRyZWFkVWludDhBcnJheShpbmRleCwgbGVuZ3RoKSB7XG5cdFx0cmV0dXJuIHJlYWRVaW50OEFycmF5SHR0cFJlYWRlcih0aGlzLCBpbmRleCwgbGVuZ3RoLCBzZW5kWE1MSHR0cFJlcXVlc3QsIGdldFhNTEh0dHBSZXF1ZXN0RGF0YSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlSHRwUmVhZGVyKGh0dHBSZWFkZXIsIHVybCwgb3B0aW9ucykge1xuXHRjb25zdCB7XG5cdFx0cHJldmVudEhlYWRSZXF1ZXN0LFxuXHRcdHVzZVJhbmdlSGVhZGVyLFxuXHRcdGZvcmNlUmFuZ2VSZXF1ZXN0c1xuXHR9ID0gb3B0aW9ucztcblx0b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuXHRkZWxldGUgb3B0aW9ucy5wcmV2ZW50SGVhZFJlcXVlc3Q7XG5cdGRlbGV0ZSBvcHRpb25zLnVzZVJhbmdlSGVhZGVyO1xuXHRkZWxldGUgb3B0aW9ucy5mb3JjZVJhbmdlUmVxdWVzdHM7XG5cdGRlbGV0ZSBvcHRpb25zLnVzZVhIUjtcblx0T2JqZWN0LmFzc2lnbihodHRwUmVhZGVyLCB7XG5cdFx0dXJsLFxuXHRcdG9wdGlvbnMsXG5cdFx0cHJldmVudEhlYWRSZXF1ZXN0LFxuXHRcdHVzZVJhbmdlSGVhZGVyLFxuXHRcdGZvcmNlUmFuZ2VSZXF1ZXN0c1xuXHR9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5pdEh0dHBSZWFkZXIoaHR0cFJlYWRlciwgc2VuZFJlcXVlc3QsIGdldFJlcXVlc3REYXRhKSB7XG5cdGNvbnN0IHtcblx0XHR1cmwsXG5cdFx0dXNlUmFuZ2VIZWFkZXIsXG5cdFx0Zm9yY2VSYW5nZVJlcXVlc3RzXG5cdH0gPSBodHRwUmVhZGVyO1xuXHRpZiAoaXNIdHRwRmFtaWx5KHVybCkgJiYgKHVzZVJhbmdlSGVhZGVyIHx8IGZvcmNlUmFuZ2VSZXF1ZXN0cykpIHtcblx0XHRjb25zdCB7IGhlYWRlcnMgfSA9IGF3YWl0IHNlbmRSZXF1ZXN0KEhUVFBfTUVUSE9EX0dFVCwgaHR0cFJlYWRlciwgZ2V0UmFuZ2VIZWFkZXJzKGh0dHBSZWFkZXIpKTtcblx0XHRpZiAoIWZvcmNlUmFuZ2VSZXF1ZXN0cyAmJiBoZWFkZXJzLmdldChIVFRQX0hFQURFUl9BQ0NFUFRfUkFOR0VTKSAhPSBIVFRQX1JBTkdFX1VOSVQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfSFRUUF9SQU5HRSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxldCBjb250ZW50U2l6ZTtcblx0XHRcdGNvbnN0IGNvbnRlbnRSYW5nZUhlYWRlciA9IGhlYWRlcnMuZ2V0KEhUVFBfSEVBREVSX0NPTlRFTlRfUkFOR0UpO1xuXHRcdFx0aWYgKGNvbnRlbnRSYW5nZUhlYWRlcikge1xuXHRcdFx0XHRjb25zdCBzcGxpdEhlYWRlciA9IGNvbnRlbnRSYW5nZUhlYWRlci50cmltKCkuc3BsaXQoL1xccypcXC9cXHMqLyk7XG5cdFx0XHRcdGlmIChzcGxpdEhlYWRlci5sZW5ndGgpIHtcblx0XHRcdFx0XHRjb25zdCBoZWFkZXJWYWx1ZSA9IHNwbGl0SGVhZGVyWzFdO1xuXHRcdFx0XHRcdGlmIChoZWFkZXJWYWx1ZSAmJiBoZWFkZXJWYWx1ZSAhPSBcIipcIikge1xuXHRcdFx0XHRcdFx0Y29udGVudFNpemUgPSBOdW1iZXIoaGVhZGVyVmFsdWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGNvbnRlbnRTaXplID09PSBVTkRFRklORURfVkFMVUUpIHtcblx0XHRcdFx0YXdhaXQgZ2V0Q29udGVudExlbmd0aChodHRwUmVhZGVyLCBzZW5kUmVxdWVzdCwgZ2V0UmVxdWVzdERhdGEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aHR0cFJlYWRlci5zaXplID0gY29udGVudFNpemU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGF3YWl0IGdldENvbnRlbnRMZW5ndGgoaHR0cFJlYWRlciwgc2VuZFJlcXVlc3QsIGdldFJlcXVlc3REYXRhKTtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiByZWFkVWludDhBcnJheUh0dHBSZWFkZXIoaHR0cFJlYWRlciwgaW5kZXgsIGxlbmd0aCwgc2VuZFJlcXVlc3QsIGdldFJlcXVlc3REYXRhKSB7XG5cdGNvbnN0IHtcblx0XHR1c2VSYW5nZUhlYWRlcixcblx0XHRmb3JjZVJhbmdlUmVxdWVzdHMsXG5cdFx0b3B0aW9uc1xuXHR9ID0gaHR0cFJlYWRlcjtcblx0aWYgKHVzZVJhbmdlSGVhZGVyIHx8IGZvcmNlUmFuZ2VSZXF1ZXN0cykge1xuXHRcdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc2VuZFJlcXVlc3QoSFRUUF9NRVRIT0RfR0VULCBodHRwUmVhZGVyLCBnZXRSYW5nZUhlYWRlcnMoaHR0cFJlYWRlciwgaW5kZXgsIGxlbmd0aCkpO1xuXHRcdGlmIChyZXNwb25zZS5zdGF0dXMgIT0gMjA2KSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0hUVFBfUkFOR0UpO1xuXHRcdH1cblx0XHRyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSk7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc3QgeyBkYXRhIH0gPSBodHRwUmVhZGVyO1xuXHRcdGlmICghZGF0YSkge1xuXHRcdFx0YXdhaXQgZ2V0UmVxdWVzdERhdGEoaHR0cFJlYWRlciwgb3B0aW9ucyk7XG5cdFx0fVxuXHRcdHJldHVybiBuZXcgVWludDhBcnJheShodHRwUmVhZGVyLmRhdGEuc3ViYXJyYXkoaW5kZXgsIGluZGV4ICsgbGVuZ3RoKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0UmFuZ2VIZWFkZXJzKGh0dHBSZWFkZXIsIGluZGV4ID0gMCwgbGVuZ3RoID0gMSkge1xuXHRyZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZ2V0SGVhZGVycyhodHRwUmVhZGVyKSwgeyBbSFRUUF9IRUFERVJfUkFOR0VdOiBIVFRQX1JBTkdFX1VOSVQgKyBcIj1cIiArIGluZGV4ICsgXCItXCIgKyAoaW5kZXggKyBsZW5ndGggLSAxKSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGVhZGVycyh7IG9wdGlvbnMgfSkge1xuXHRjb25zdCB7IGhlYWRlcnMgfSA9IG9wdGlvbnM7XG5cdGlmIChoZWFkZXJzKSB7XG5cdFx0aWYgKFN5bWJvbC5pdGVyYXRvciBpbiBoZWFkZXJzKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGhlYWRlcnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gaGVhZGVycztcblx0XHR9XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0RmV0Y2hSZXF1ZXN0RGF0YShodHRwUmVhZGVyKSB7XG5cdGF3YWl0IGdldFJlcXVlc3REYXRhKGh0dHBSZWFkZXIsIHNlbmRGZXRjaFJlcXVlc3QpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRYTUxIdHRwUmVxdWVzdERhdGEoaHR0cFJlYWRlcikge1xuXHRhd2FpdCBnZXRSZXF1ZXN0RGF0YShodHRwUmVhZGVyLCBzZW5kWE1MSHR0cFJlcXVlc3QpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRSZXF1ZXN0RGF0YShodHRwUmVhZGVyLCBzZW5kUmVxdWVzdCkge1xuXHRjb25zdCByZXNwb25zZSA9IGF3YWl0IHNlbmRSZXF1ZXN0KEhUVFBfTUVUSE9EX0dFVCwgaHR0cFJlYWRlciwgZ2V0SGVhZGVycyhodHRwUmVhZGVyKSk7XG5cdGh0dHBSZWFkZXIuZGF0YSA9IG5ldyBVaW50OEFycmF5KGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpO1xuXHRpZiAoIWh0dHBSZWFkZXIuc2l6ZSkge1xuXHRcdGh0dHBSZWFkZXIuc2l6ZSA9IGh0dHBSZWFkZXIuZGF0YS5sZW5ndGg7XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q29udGVudExlbmd0aChodHRwUmVhZGVyLCBzZW5kUmVxdWVzdCwgZ2V0UmVxdWVzdERhdGEpIHtcblx0aWYgKGh0dHBSZWFkZXIucHJldmVudEhlYWRSZXF1ZXN0KSB7XG5cdFx0YXdhaXQgZ2V0UmVxdWVzdERhdGEoaHR0cFJlYWRlciwgaHR0cFJlYWRlci5vcHRpb25zKTtcblx0fSBlbHNlIHtcblx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IHNlbmRSZXF1ZXN0KEhUVFBfTUVUSE9EX0hFQUQsIGh0dHBSZWFkZXIsIGdldEhlYWRlcnMoaHR0cFJlYWRlcikpO1xuXHRcdGNvbnN0IGNvbnRlbnRMZW5ndGggPSByZXNwb25zZS5oZWFkZXJzLmdldChIVFRQX0hFQURFUl9DT05URU5UX0xFTkdUSCk7XG5cdFx0aWYgKGNvbnRlbnRMZW5ndGgpIHtcblx0XHRcdGh0dHBSZWFkZXIuc2l6ZSA9IE51bWJlcihjb250ZW50TGVuZ3RoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YXdhaXQgZ2V0UmVxdWVzdERhdGEoaHR0cFJlYWRlciwgaHR0cFJlYWRlci5vcHRpb25zKTtcblx0XHR9XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gc2VuZEZldGNoUmVxdWVzdChtZXRob2QsIHsgb3B0aW9ucywgdXJsIH0sIGhlYWRlcnMpIHtcblx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHsgbWV0aG9kLCBoZWFkZXJzIH0pKTtcblx0aWYgKHJlc3BvbnNlLnN0YXR1cyA8IDQwMCkge1xuXHRcdHJldHVybiByZXNwb25zZTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyByZXNwb25zZS5zdGF0dXMgPT0gNDE2ID8gbmV3IEVycm9yKEVSUl9IVFRQX1JBTkdFKSA6IG5ldyBFcnJvcihFUlJfSFRUUF9TVEFUVVMgKyAocmVzcG9uc2Uuc3RhdHVzVGV4dCB8fCByZXNwb25zZS5zdGF0dXMpKTtcblx0fVxufVxuXG5mdW5jdGlvbiBzZW5kWE1MSHR0cFJlcXVlc3QobWV0aG9kLCB7IHVybCB9LCBoZWFkZXJzKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0Y29uc3QgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXHRcdHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4ge1xuXHRcdFx0aWYgKHJlcXVlc3Quc3RhdHVzIDwgNDAwKSB7XG5cdFx0XHRcdGNvbnN0IGhlYWRlcnMgPSBbXTtcblx0XHRcdFx0cmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKS50cmltKCkuc3BsaXQoL1tcXHJcXG5dKy8pLmZvckVhY2goaGVhZGVyID0+IHtcblx0XHRcdFx0XHRjb25zdCBzcGxpdEhlYWRlciA9IGhlYWRlci50cmltKCkuc3BsaXQoL1xccyo6XFxzKi8pO1xuXHRcdFx0XHRcdHNwbGl0SGVhZGVyWzBdID0gc3BsaXRIZWFkZXJbMF0udHJpbSgpLnJlcGxhY2UoL15bYS16XXwtW2Etel0vZywgdmFsdWUgPT4gdmFsdWUudG9VcHBlckNhc2UoKSk7XG5cdFx0XHRcdFx0aGVhZGVycy5wdXNoKHNwbGl0SGVhZGVyKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJlc29sdmUoe1xuXHRcdFx0XHRcdHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG5cdFx0XHRcdFx0YXJyYXlCdWZmZXI6ICgpID0+IHJlcXVlc3QucmVzcG9uc2UsXG5cdFx0XHRcdFx0aGVhZGVyczogbmV3IE1hcChoZWFkZXJzKVxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlamVjdChyZXF1ZXN0LnN0YXR1cyA9PSA0MTYgPyBuZXcgRXJyb3IoRVJSX0hUVFBfUkFOR0UpIDogbmV3IEVycm9yKEVSUl9IVFRQX1NUQVRVUyArIChyZXF1ZXN0LnN0YXR1c1RleHQgfHwgcmVxdWVzdC5zdGF0dXMpKSk7XG5cdFx0XHR9XG5cdFx0fSwgZmFsc2UpO1xuXHRcdHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGV2ZW50ID0+IHJlamVjdChldmVudC5kZXRhaWwgPyBldmVudC5kZXRhaWwuZXJyb3IgOiBuZXcgRXJyb3IoXCJOZXR3b3JrIGVycm9yXCIpKSwgZmFsc2UpO1xuXHRcdHJlcXVlc3Qub3BlbihtZXRob2QsIHVybCk7XG5cdFx0aWYgKGhlYWRlcnMpIHtcblx0XHRcdGZvciAoY29uc3QgZW50cnkgb2YgT2JqZWN0LmVudHJpZXMoaGVhZGVycykpIHtcblx0XHRcdFx0cmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGVudHJ5WzBdLCBlbnRyeVsxXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlcXVlc3QucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuXHRcdHJlcXVlc3Quc2VuZCgpO1xuXHR9KTtcbn1cblxuY2xhc3MgSHR0cFJlYWRlciBleHRlbmRzIFJlYWRlciB7XG5cblx0Y29uc3RydWN0b3IodXJsLCBvcHRpb25zID0ge30pIHtcblx0XHRzdXBlcigpO1xuXHRcdE9iamVjdC5hc3NpZ24odGhpcywge1xuXHRcdFx0dXJsLFxuXHRcdFx0cmVhZGVyOiBvcHRpb25zLnVzZVhIUiA/IG5ldyBYSFJSZWFkZXIodXJsLCBvcHRpb25zKSA6IG5ldyBGZXRjaFJlYWRlcih1cmwsIG9wdGlvbnMpXG5cdFx0fSk7XG5cdH1cblxuXHRzZXQgc2l6ZSh2YWx1ZSkge1xuXHRcdC8vIGlnbm9yZWRcblx0fVxuXG5cdGdldCBzaXplKCkge1xuXHRcdHJldHVybiB0aGlzLnJlYWRlci5zaXplO1xuXHR9XG5cblx0YXN5bmMgaW5pdCgpIHtcblx0XHRhd2FpdCB0aGlzLnJlYWRlci5pbml0KCk7XG5cdFx0c3VwZXIuaW5pdCgpO1xuXHR9XG5cblx0cmVhZFVpbnQ4QXJyYXkoaW5kZXgsIGxlbmd0aCkge1xuXHRcdHJldHVybiB0aGlzLnJlYWRlci5yZWFkVWludDhBcnJheShpbmRleCwgbGVuZ3RoKTtcblx0fVxufVxuXG5jbGFzcyBIdHRwUmFuZ2VSZWFkZXIgZXh0ZW5kcyBIdHRwUmVhZGVyIHtcblxuXHRjb25zdHJ1Y3Rvcih1cmwsIG9wdGlvbnMgPSB7fSkge1xuXHRcdG9wdGlvbnMudXNlUmFuZ2VIZWFkZXIgPSB0cnVlO1xuXHRcdHN1cGVyKHVybCwgb3B0aW9ucyk7XG5cdH1cbn1cblxuXG5jbGFzcyBVaW50OEFycmF5UmVhZGVyIGV4dGVuZHMgUmVhZGVyIHtcblxuXHRjb25zdHJ1Y3RvcihhcnJheSkge1xuXHRcdHN1cGVyKCk7XG5cdFx0T2JqZWN0LmFzc2lnbih0aGlzLCB7XG5cdFx0XHRhcnJheSxcblx0XHRcdHNpemU6IGFycmF5Lmxlbmd0aFxuXHRcdH0pO1xuXHR9XG5cblx0cmVhZFVpbnQ4QXJyYXkoaW5kZXgsIGxlbmd0aCkge1xuXHRcdHJldHVybiB0aGlzLmFycmF5LnNsaWNlKGluZGV4LCBpbmRleCArIGxlbmd0aCk7XG5cdH1cbn1cblxuY2xhc3MgVWludDhBcnJheVdyaXRlciBleHRlbmRzIFdyaXRlciB7XG5cblx0aW5pdChpbml0U2l6ZSA9IDApIHtcblx0XHRPYmplY3QuYXNzaWduKHRoaXMsIHtcblx0XHRcdG9mZnNldDogMCxcblx0XHRcdGFycmF5OiBuZXcgVWludDhBcnJheShpbml0U2l6ZSlcblx0XHR9KTtcblx0XHRzdXBlci5pbml0KCk7XG5cdH1cblxuXHR3cml0ZVVpbnQ4QXJyYXkoYXJyYXkpIHtcblx0XHRjb25zdCB3cml0ZXIgPSB0aGlzO1xuXHRcdGlmICh3cml0ZXIub2Zmc2V0ICsgYXJyYXkubGVuZ3RoID4gd3JpdGVyLmFycmF5Lmxlbmd0aCkge1xuXHRcdFx0Y29uc3QgcHJldmlvdXNBcnJheSA9IHdyaXRlci5hcnJheTtcblx0XHRcdHdyaXRlci5hcnJheSA9IG5ldyBVaW50OEFycmF5KHByZXZpb3VzQXJyYXkubGVuZ3RoICsgYXJyYXkubGVuZ3RoKTtcblx0XHRcdHdyaXRlci5hcnJheS5zZXQocHJldmlvdXNBcnJheSk7XG5cdFx0fVxuXHRcdHdyaXRlci5hcnJheS5zZXQoYXJyYXksIHdyaXRlci5vZmZzZXQpO1xuXHRcdHdyaXRlci5vZmZzZXQgKz0gYXJyYXkubGVuZ3RoO1xuXHR9XG5cblx0Z2V0RGF0YSgpIHtcblx0XHRyZXR1cm4gdGhpcy5hcnJheTtcblx0fVxufVxuXG5jbGFzcyBTcGxpdERhdGFSZWFkZXIgZXh0ZW5kcyBSZWFkZXIge1xuXG5cdGNvbnN0cnVjdG9yKHJlYWRlcnMpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMucmVhZGVycyA9IHJlYWRlcnM7XG5cdH1cblxuXHRhc3luYyBpbml0KCkge1xuXHRcdGNvbnN0IHJlYWRlciA9IHRoaXM7XG5cdFx0Y29uc3QgeyByZWFkZXJzIH0gPSByZWFkZXI7XG5cdFx0cmVhZGVyLmxhc3REaXNrTnVtYmVyID0gMDtcblx0XHRyZWFkZXIubGFzdERpc2tPZmZzZXQgPSAwO1xuXHRcdGF3YWl0IFByb21pc2UuYWxsKHJlYWRlcnMubWFwKGFzeW5jIChkaXNrUmVhZGVyLCBpbmRleERpc2tSZWFkZXIpID0+IHtcblx0XHRcdGF3YWl0IGRpc2tSZWFkZXIuaW5pdCgpO1xuXHRcdFx0aWYgKGluZGV4RGlza1JlYWRlciAhPSByZWFkZXJzLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0cmVhZGVyLmxhc3REaXNrT2Zmc2V0ICs9IGRpc2tSZWFkZXIuc2l6ZTtcblx0XHRcdH1cblx0XHRcdHJlYWRlci5zaXplICs9IGRpc2tSZWFkZXIuc2l6ZTtcblx0XHR9KSk7XG5cdFx0c3VwZXIuaW5pdCgpO1xuXHR9XG5cblx0YXN5bmMgcmVhZFVpbnQ4QXJyYXkob2Zmc2V0LCBsZW5ndGgsIGRpc2tOdW1iZXIgPSAwKSB7XG5cdFx0Y29uc3QgcmVhZGVyID0gdGhpcztcblx0XHRjb25zdCB7IHJlYWRlcnMgfSA9IHRoaXM7XG5cdFx0bGV0IHJlc3VsdDtcblx0XHRsZXQgY3VycmVudERpc2tOdW1iZXIgPSBkaXNrTnVtYmVyO1xuXHRcdGlmIChjdXJyZW50RGlza051bWJlciA9PSAtMSkge1xuXHRcdFx0Y3VycmVudERpc2tOdW1iZXIgPSByZWFkZXJzLmxlbmd0aCAtIDE7XG5cdFx0fVxuXHRcdGxldCBjdXJyZW50UmVhZGVyT2Zmc2V0ID0gb2Zmc2V0O1xuXHRcdHdoaWxlIChjdXJyZW50UmVhZGVyT2Zmc2V0ID49IHJlYWRlcnNbY3VycmVudERpc2tOdW1iZXJdLnNpemUpIHtcblx0XHRcdGN1cnJlbnRSZWFkZXJPZmZzZXQgLT0gcmVhZGVyc1tjdXJyZW50RGlza051bWJlcl0uc2l6ZTtcblx0XHRcdGN1cnJlbnREaXNrTnVtYmVyKys7XG5cdFx0fVxuXHRcdGNvbnN0IGN1cnJlbnRSZWFkZXIgPSByZWFkZXJzW2N1cnJlbnREaXNrTnVtYmVyXTtcblx0XHRjb25zdCBjdXJyZW50UmVhZGVyU2l6ZSA9IGN1cnJlbnRSZWFkZXIuc2l6ZTtcblx0XHRpZiAoY3VycmVudFJlYWRlck9mZnNldCArIGxlbmd0aCA8PSBjdXJyZW50UmVhZGVyU2l6ZSkge1xuXHRcdFx0cmVzdWx0ID0gYXdhaXQgcmVhZFVpbnQ4QXJyYXkoY3VycmVudFJlYWRlciwgY3VycmVudFJlYWRlck9mZnNldCwgbGVuZ3RoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgY2h1bmtMZW5ndGggPSBjdXJyZW50UmVhZGVyU2l6ZSAtIGN1cnJlbnRSZWFkZXJPZmZzZXQ7XG5cdFx0XHRyZXN1bHQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuXHRcdFx0cmVzdWx0LnNldChhd2FpdCByZWFkVWludDhBcnJheShjdXJyZW50UmVhZGVyLCBjdXJyZW50UmVhZGVyT2Zmc2V0LCBjaHVua0xlbmd0aCkpO1xuXHRcdFx0cmVzdWx0LnNldChhd2FpdCByZWFkZXIucmVhZFVpbnQ4QXJyYXkob2Zmc2V0ICsgY2h1bmtMZW5ndGgsIGxlbmd0aCAtIGNodW5rTGVuZ3RoLCBkaXNrTnVtYmVyKSwgY2h1bmtMZW5ndGgpO1xuXHRcdH1cblx0XHRyZWFkZXIubGFzdERpc2tOdW1iZXIgPSBNYXRoLm1heChjdXJyZW50RGlza051bWJlciwgcmVhZGVyLmxhc3REaXNrTnVtYmVyKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG59XG5cbmNsYXNzIFNwbGl0RGF0YVdyaXRlciBleHRlbmRzIFN0cmVhbSB7XG5cblx0Y29uc3RydWN0b3Iod3JpdGVyR2VuZXJhdG9yLCBtYXhTaXplID0gNDI5NDk2NzI5NSkge1xuXHRcdHN1cGVyKCk7XG5cdFx0Y29uc3QgemlwV3JpdGVyID0gdGhpcztcblx0XHRPYmplY3QuYXNzaWduKHppcFdyaXRlciwge1xuXHRcdFx0ZGlza051bWJlcjogMCxcblx0XHRcdGRpc2tPZmZzZXQ6IDAsXG5cdFx0XHRzaXplOiAwLFxuXHRcdFx0bWF4U2l6ZSxcblx0XHRcdGF2YWlsYWJsZVNpemU6IG1heFNpemVcblx0XHR9KTtcblx0XHRsZXQgZGlza1NvdXJjZVdyaXRlciwgZGlza1dyaXRhYmxlLCBkaXNrV3JpdGVyO1xuXHRcdGNvbnN0IHdyaXRhYmxlID0gbmV3IFdyaXRhYmxlU3RyZWFtKHtcblx0XHRcdGFzeW5jIHdyaXRlKGNodW5rKSB7XG5cdFx0XHRcdGNvbnN0IHsgYXZhaWxhYmxlU2l6ZSB9ID0gemlwV3JpdGVyO1xuXHRcdFx0XHRpZiAoIWRpc2tXcml0ZXIpIHtcblx0XHRcdFx0XHRjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBhd2FpdCB3cml0ZXJHZW5lcmF0b3IubmV4dCgpO1xuXHRcdFx0XHRcdGlmIChkb25lICYmICF2YWx1ZSkge1xuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9JVEVSQVRPUl9DT01QTEVURURfVE9PX1NPT04pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRkaXNrU291cmNlV3JpdGVyID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRkaXNrU291cmNlV3JpdGVyLnNpemUgPSAwO1xuXHRcdFx0XHRcdFx0aWYgKGRpc2tTb3VyY2VXcml0ZXIubWF4U2l6ZSkge1xuXHRcdFx0XHRcdFx0XHR6aXBXcml0ZXIubWF4U2l6ZSA9IGRpc2tTb3VyY2VXcml0ZXIubWF4U2l6ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHppcFdyaXRlci5hdmFpbGFibGVTaXplID0gemlwV3JpdGVyLm1heFNpemU7XG5cdFx0XHRcdFx0XHRhd2FpdCBpbml0U3RyZWFtKGRpc2tTb3VyY2VXcml0ZXIpO1xuXHRcdFx0XHRcdFx0ZGlza1dyaXRhYmxlID0gdmFsdWUud3JpdGFibGU7XG5cdFx0XHRcdFx0XHRkaXNrV3JpdGVyID0gZGlza1dyaXRhYmxlLmdldFdyaXRlcigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRhd2FpdCB0aGlzLndyaXRlKGNodW5rKTtcblx0XHRcdFx0fSBlbHNlIGlmIChjaHVuay5sZW5ndGggPj0gYXZhaWxhYmxlU2l6ZSkge1xuXHRcdFx0XHRcdGF3YWl0IHdyaXRlQ2h1bmsoY2h1bmsuc2xpY2UoMCwgYXZhaWxhYmxlU2l6ZSkpO1xuXHRcdFx0XHRcdGF3YWl0IGNsb3NlRGlzaygpO1xuXHRcdFx0XHRcdHppcFdyaXRlci5kaXNrT2Zmc2V0ICs9IGRpc2tTb3VyY2VXcml0ZXIuc2l6ZTtcblx0XHRcdFx0XHR6aXBXcml0ZXIuZGlza051bWJlcisrO1xuXHRcdFx0XHRcdGRpc2tXcml0ZXIgPSBudWxsO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMud3JpdGUoY2h1bmsuc2xpY2UoYXZhaWxhYmxlU2l6ZSkpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGF3YWl0IHdyaXRlQ2h1bmsoY2h1bmspO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0YXN5bmMgY2xvc2UoKSB7XG5cdFx0XHRcdGF3YWl0IGRpc2tXcml0ZXIucmVhZHk7XG5cdFx0XHRcdGF3YWl0IGNsb3NlRGlzaygpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh6aXBXcml0ZXIsIFBST1BFUlRZX05BTUVfV1JJVEFCTEUsIHtcblx0XHRcdGdldCgpIHtcblx0XHRcdFx0cmV0dXJuIHdyaXRhYmxlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXN5bmMgZnVuY3Rpb24gd3JpdGVDaHVuayhjaHVuaykge1xuXHRcdFx0Y29uc3QgY2h1bmtMZW5ndGggPSBjaHVuay5sZW5ndGg7XG5cdFx0XHRpZiAoY2h1bmtMZW5ndGgpIHtcblx0XHRcdFx0YXdhaXQgZGlza1dyaXRlci5yZWFkeTtcblx0XHRcdFx0YXdhaXQgZGlza1dyaXRlci53cml0ZShjaHVuayk7XG5cdFx0XHRcdGRpc2tTb3VyY2VXcml0ZXIuc2l6ZSArPSBjaHVua0xlbmd0aDtcblx0XHRcdFx0emlwV3JpdGVyLnNpemUgKz0gY2h1bmtMZW5ndGg7XG5cdFx0XHRcdHppcFdyaXRlci5hdmFpbGFibGVTaXplIC09IGNodW5rTGVuZ3RoO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGFzeW5jIGZ1bmN0aW9uIGNsb3NlRGlzaygpIHtcblx0XHRcdGRpc2tXcml0YWJsZS5zaXplID0gZGlza1NvdXJjZVdyaXRlci5zaXplO1xuXHRcdFx0YXdhaXQgZGlza1dyaXRlci5jbG9zZSgpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBpc0h0dHBGYW1pbHkodXJsKSB7XG5cdGNvbnN0IHsgYmFzZVVSTCB9ID0gZ2V0Q29uZmlndXJhdGlvbigpO1xuXHRjb25zdCB7IHByb3RvY29sIH0gPSBuZXcgVVJMKHVybCwgYmFzZVVSTCk7XG5cdHJldHVybiBwcm90b2NvbCA9PSBcImh0dHA6XCIgfHwgcHJvdG9jb2wgPT0gXCJodHRwczpcIjtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5pdFN0cmVhbShzdHJlYW0sIGluaXRTaXplKSB7XG5cdGlmIChzdHJlYW0uaW5pdCAmJiAhc3RyZWFtLmluaXRpYWxpemVkKSB7XG5cdFx0YXdhaXQgc3RyZWFtLmluaXQoaW5pdFNpemUpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGluaXRSZWFkZXIocmVhZGVyKSB7XG5cdGlmIChBcnJheS5pc0FycmF5KHJlYWRlcikpIHtcblx0XHRyZWFkZXIgPSBuZXcgU3BsaXREYXRhUmVhZGVyKHJlYWRlcik7XG5cdH1cblx0aWYgKHJlYWRlciBpbnN0YW5jZW9mIFJlYWRhYmxlU3RyZWFtKSB7XG5cdFx0cmVhZGVyID0ge1xuXHRcdFx0cmVhZGFibGU6IHJlYWRlclxuXHRcdH07XG5cdH1cblx0cmV0dXJuIHJlYWRlcjtcbn1cblxuZnVuY3Rpb24gaW5pdFdyaXRlcih3cml0ZXIpIHtcblx0aWYgKHdyaXRlci53cml0YWJsZSA9PT0gVU5ERUZJTkVEX1ZBTFVFICYmIHR5cGVvZiB3cml0ZXIubmV4dCA9PSBGVU5DVElPTl9UWVBFKSB7XG5cdFx0d3JpdGVyID0gbmV3IFNwbGl0RGF0YVdyaXRlcih3cml0ZXIpO1xuXHR9XG5cdGlmICh3cml0ZXIgaW5zdGFuY2VvZiBXcml0YWJsZVN0cmVhbSkge1xuXHRcdHdyaXRlciA9IHtcblx0XHRcdHdyaXRhYmxlOiB3cml0ZXJcblx0XHR9O1xuXHR9XG5cdGNvbnN0IHsgd3JpdGFibGUgfSA9IHdyaXRlcjtcblx0aWYgKHdyaXRhYmxlLnNpemUgPT09IFVOREVGSU5FRF9WQUxVRSkge1xuXHRcdHdyaXRhYmxlLnNpemUgPSAwO1xuXHR9XG5cdGNvbnN0IHNwbGl0WmlwRmlsZSA9IHdyaXRlciBpbnN0YW5jZW9mIFNwbGl0RGF0YVdyaXRlcjtcblx0aWYgKCFzcGxpdFppcEZpbGUpIHtcblx0XHRPYmplY3QuYXNzaWduKHdyaXRlciwge1xuXHRcdFx0ZGlza051bWJlcjogMCxcblx0XHRcdGRpc2tPZmZzZXQ6IDAsXG5cdFx0XHRhdmFpbGFibGVTaXplOiBJbmZpbml0eSxcblx0XHRcdG1heFNpemU6IEluZmluaXR5XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIHdyaXRlcjtcbn1cblxuZnVuY3Rpb24gcmVhZFVpbnQ4QXJyYXkocmVhZGVyLCBvZmZzZXQsIHNpemUsIGRpc2tOdW1iZXIpIHtcblx0cmV0dXJuIHJlYWRlci5yZWFkVWludDhBcnJheShvZmZzZXQsIHNpemUsIGRpc2tOdW1iZXIpO1xufVxuXG5jb25zdCBTcGxpdFppcFJlYWRlciA9IFNwbGl0RGF0YVJlYWRlcjtcbmNvbnN0IFNwbGl0WmlwV3JpdGVyID0gU3BsaXREYXRhV3JpdGVyO1xuXG5leHBvcnQge1xuXHRpbml0U3RyZWFtLFxuXHRpbml0UmVhZGVyLFxuXHRpbml0V3JpdGVyLFxuXHRyZWFkVWludDhBcnJheSxcblx0UmVhZGVyLFxuXHRXcml0ZXIsXG5cdFRleHRSZWFkZXIsXG5cdFRleHRXcml0ZXIsXG5cdERhdGE2NFVSSVJlYWRlcixcblx0RGF0YTY0VVJJV3JpdGVyLFxuXHRCbG9iUmVhZGVyLFxuXHRCbG9iV3JpdGVyLFxuXHRVaW50OEFycmF5UmVhZGVyLFxuXHRVaW50OEFycmF5V3JpdGVyLFxuXHRIdHRwUmVhZGVyLFxuXHRIdHRwUmFuZ2VSZWFkZXIsXG5cdFNwbGl0WmlwUmVhZGVyLFxuXHRTcGxpdFppcFdyaXRlcixcblx0U3BsaXREYXRhUmVhZGVyLFxuXHRTcGxpdERhdGFXcml0ZXIsXG5cdEVSUl9IVFRQX1JBTkdFLFxuXHRFUlJfSVRFUkFUT1JfQ09NUExFVEVEX1RPT19TT09OXG59OyIsIi8qXG4gQ29weXJpZ2h0IChjKSAyMDIyIEdpbGRhcyBMb3JtZWF1LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiBcbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuIDMuIFRoZSBuYW1lcyBvZiB0aGUgYXV0aG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEICcnQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXG4gSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKQ1JBRlQsXG4gSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsXG4gT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLyogZ2xvYmFsIFRleHREZWNvZGVyICovXG5cbmNvbnN0IENQNDM3ID0gXCJcXDDimLrimLvimaXimabimaPimaDigKLil5jil4vil5nimYLimYDimarimavimLzilrril4TihpXigLzCtsKn4pas4oao4oaR4oaT4oaS4oaQ4oif4oaU4pay4pa8ICFcXFwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxcXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX7ijILDh8O8w6nDosOkw6DDpcOnw6rDq8Oow6/DrsOsw4TDhcOJw6bDhsO0w7bDssO7w7nDv8OWw5zCosKjwqXigqfGksOhw63Ds8O6w7HDkcKqwrrCv+KMkMKswr3CvMKhwqvCu+KWkeKWkuKWk+KUguKUpOKVoeKVouKVluKVleKVo+KVkeKVl+KVneKVnOKVm+KUkOKUlOKUtOKUrOKUnOKUgOKUvOKVnuKVn+KVmuKVlOKVqeKVpuKVoOKVkOKVrOKVp+KVqOKVpOKVpeKVmeKVmOKVkuKVk+KVq+KVquKUmOKUjOKWiOKWhOKWjOKWkOKWgM6xw5/Ok8+AzqPPg8K1z4TOps6YzqnOtOKIns+GzrXiiKniiaHCseKJpeKJpOKMoOKMocO34omIwrDiiJnCt+KImuKBv8Ky4pagIFwiLnNwbGl0KFwiXCIpO1xuY29uc3QgVkFMSURfQ1A0MzcgPSBDUDQzNy5sZW5ndGggPT0gMjU2O1xuXG5leHBvcnQge1xuXHRkZWNvZGVDUDQzN1xufTtcblxuZnVuY3Rpb24gZGVjb2RlQ1A0Mzcoc3RyaW5nVmFsdWUpIHtcblx0aWYgKFZBTElEX0NQNDM3KSB7XG5cdFx0bGV0IHJlc3VsdCA9IFwiXCI7XG5cdFx0Zm9yIChsZXQgaW5kZXhDaGFyYWN0ZXIgPSAwOyBpbmRleENoYXJhY3RlciA8IHN0cmluZ1ZhbHVlLmxlbmd0aDsgaW5kZXhDaGFyYWN0ZXIrKykge1xuXHRcdFx0cmVzdWx0ICs9IENQNDM3W3N0cmluZ1ZhbHVlW2luZGV4Q2hhcmFjdGVyXV07XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShzdHJpbmdWYWx1ZSk7XG5cdH1cbn0iLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbi8qIGdsb2JhbCBUZXh0RGVjb2RlciAqL1xuXG5pbXBvcnQgeyBkZWNvZGVDUDQzNyB9IGZyb20gXCIuL2NwNDM3LWRlY29kZS5qc1wiO1xuXG5leHBvcnQge1xuXHRkZWNvZGVUZXh0XG59O1xuXG5mdW5jdGlvbiBkZWNvZGVUZXh0KHZhbHVlLCBlbmNvZGluZykge1xuXHRpZiAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudHJpbSgpLnRvTG93ZXJDYXNlKCkgPT0gXCJjcDQzN1wiKSB7XG5cdFx0cmV0dXJuIGRlY29kZUNQNDM3KHZhbHVlKTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbmV3IFRleHREZWNvZGVyKGVuY29kaW5nKS5kZWNvZGUodmFsdWUpO1xuXHR9XG59IiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG5jb25zdCBQUk9QRVJUWV9OQU1FX0ZJTEVOQU1FID0gXCJmaWxlbmFtZVwiO1xuY29uc3QgUFJPUEVSVFlfTkFNRV9SQVdfRklMRU5BTUUgPSBcInJhd0ZpbGVuYW1lXCI7XG5jb25zdCBQUk9QRVJUWV9OQU1FX0NPTU1FTlQgPSBcImNvbW1lbnRcIjtcbmNvbnN0IFBST1BFUlRZX05BTUVfUkFXX0NPTU1FTlQgPSBcInJhd0NvbW1lbnRcIjtcbmNvbnN0IFBST1BFUlRZX05BTUVfVU5DT01QUFJFU1NFRF9TSVpFID0gXCJ1bmNvbXByZXNzZWRTaXplXCI7XG5jb25zdCBQUk9QRVJUWV9OQU1FX0NPTVBQUkVTU0VEX1NJWkUgPSBcImNvbXByZXNzZWRTaXplXCI7XG5jb25zdCBQUk9QRVJUWV9OQU1FX09GRlNFVCA9IFwib2Zmc2V0XCI7XG5jb25zdCBQUk9QRVJUWV9OQU1FX0RJU0tfTlVNQkVSX1NUQVJUID0gXCJkaXNrTnVtYmVyU3RhcnRcIjtcbmNvbnN0IFBST1BFUlRZX05BTUVfTEFTVF9NT0RJRklDQVRJT05fREFURSA9IFwibGFzdE1vZERhdGVcIjtcbmNvbnN0IFBST1BFUlRZX05BTUVfUkFXX0xBU1RfTU9ESUZJQ0FUSU9OX0RBVEUgPSBcInJhd0xhc3RNb2REYXRlXCI7XG5jb25zdCBQUk9QRVJUWV9OQU1FX0xBU1RfQUNDRVNTX0RBVEUgPSBcImxhc3RBY2Nlc3NEYXRlXCI7XG5jb25zdCBQUk9QRVJUWV9OQU1FX1JBV19MQVNUX0FDQ0VTU19EQVRFID0gXCJyYXdMYXN0QWNjZXNzRGF0ZVwiO1xuY29uc3QgUFJPUEVSVFlfTkFNRV9DUkVBVElPTl9EQVRFID0gXCJjcmVhdGlvbkRhdGVcIjtcbmNvbnN0IFBST1BFUlRZX05BTUVfUkFXX0NSRUFUSU9OX0RBVEUgPSBcInJhd0NyZWF0aW9uRGF0ZVwiO1xuY29uc3QgUFJPUEVSVFlfTkFNRV9JTlRFUk5BTF9GSUxFX0FUVFJJQlVURSA9IFwiaW50ZXJuYWxGaWxlQXR0cmlidXRlXCI7XG5jb25zdCBQUk9QRVJUWV9OQU1FX0VYVEVSTkFMX0ZJTEVfQVRUUklCVVRFID0gXCJleHRlcm5hbEZpbGVBdHRyaWJ1dGVcIjtcbmNvbnN0IFBST1BFUlRZX05BTUVfTVNfRE9TX0NPTVBBVElCTEUgPSBcIm1zRG9zQ29tcGF0aWJsZVwiO1xuY29uc3QgUFJPUEVSVFlfTkFNRV9aSVA2NCA9IFwiemlwNjRcIjtcblxuY29uc3QgUFJPUEVSVFlfTkFNRVMgPSBbXG5cdFBST1BFUlRZX05BTUVfRklMRU5BTUUsIFBST1BFUlRZX05BTUVfUkFXX0ZJTEVOQU1FLCBQUk9QRVJUWV9OQU1FX0NPTVBQUkVTU0VEX1NJWkUsIFBST1BFUlRZX05BTUVfVU5DT01QUFJFU1NFRF9TSVpFLFxuXHRQUk9QRVJUWV9OQU1FX0xBU1RfTU9ESUZJQ0FUSU9OX0RBVEUsIFBST1BFUlRZX05BTUVfUkFXX0xBU1RfTU9ESUZJQ0FUSU9OX0RBVEUsIFBST1BFUlRZX05BTUVfQ09NTUVOVCwgUFJPUEVSVFlfTkFNRV9SQVdfQ09NTUVOVCxcblx0UFJPUEVSVFlfTkFNRV9MQVNUX0FDQ0VTU19EQVRFLCBQUk9QRVJUWV9OQU1FX0NSRUFUSU9OX0RBVEUsIFBST1BFUlRZX05BTUVfT0ZGU0VULCBQUk9QRVJUWV9OQU1FX0RJU0tfTlVNQkVSX1NUQVJULFxuXHRQUk9QRVJUWV9OQU1FX0RJU0tfTlVNQkVSX1NUQVJULCBQUk9QRVJUWV9OQU1FX0lOVEVSTkFMX0ZJTEVfQVRUUklCVVRFLCBQUk9QRVJUWV9OQU1FX0VYVEVSTkFMX0ZJTEVfQVRUUklCVVRFLFxuXHRQUk9QRVJUWV9OQU1FX01TX0RPU19DT01QQVRJQkxFLCBQUk9QRVJUWV9OQU1FX1pJUDY0LFxuXHRcImRpcmVjdG9yeVwiLCBcImJpdEZsYWdcIiwgXCJlbmNyeXB0ZWRcIiwgXCJzaWduYXR1cmVcIiwgXCJmaWxlbmFtZVVURjhcIiwgXCJjb21tZW50VVRGOFwiLCBcImNvbXByZXNzaW9uTWV0aG9kXCIsIFwidmVyc2lvblwiLCBcInZlcnNpb25NYWRlQnlcIixcblx0XCJleHRyYUZpZWxkXCIsIFwicmF3RXh0cmFGaWVsZFwiLCBcImV4dHJhRmllbGRaaXA2NFwiLCBcImV4dHJhRmllbGRVbmljb2RlUGF0aFwiLCBcImV4dHJhRmllbGRVbmljb2RlQ29tbWVudFwiLCBcImV4dHJhRmllbGRBRVNcIiwgXCJleHRyYUZpZWxkTlRGU1wiLFxuXHRcImV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcFwiXTtcblxuY2xhc3MgRW50cnkge1xuXG5cdGNvbnN0cnVjdG9yKGRhdGEpIHtcblx0XHRQUk9QRVJUWV9OQU1FUy5mb3JFYWNoKG5hbWUgPT4gdGhpc1tuYW1lXSA9IGRhdGFbbmFtZV0pO1xuXHR9XG5cbn1cblxuZXhwb3J0IHtcblx0UFJPUEVSVFlfTkFNRV9GSUxFTkFNRSxcblx0UFJPUEVSVFlfTkFNRV9SQVdfRklMRU5BTUUsXG5cdFBST1BFUlRZX05BTUVfQ09NTUVOVCxcblx0UFJPUEVSVFlfTkFNRV9SQVdfQ09NTUVOVCxcblx0UFJPUEVSVFlfTkFNRV9VTkNPTVBQUkVTU0VEX1NJWkUsXG5cdFBST1BFUlRZX05BTUVfQ09NUFBSRVNTRURfU0laRSxcblx0UFJPUEVSVFlfTkFNRV9PRkZTRVQsXG5cdFBST1BFUlRZX05BTUVfRElTS19OVU1CRVJfU1RBUlQsXG5cdFBST1BFUlRZX05BTUVfTEFTVF9NT0RJRklDQVRJT05fREFURSxcblx0UFJPUEVSVFlfTkFNRV9SQVdfTEFTVF9NT0RJRklDQVRJT05fREFURSxcblx0UFJPUEVSVFlfTkFNRV9MQVNUX0FDQ0VTU19EQVRFLFxuXHRQUk9QRVJUWV9OQU1FX1JBV19MQVNUX0FDQ0VTU19EQVRFLFxuXHRQUk9QRVJUWV9OQU1FX0NSRUFUSU9OX0RBVEUsXG5cdFBST1BFUlRZX05BTUVfUkFXX0NSRUFUSU9OX0RBVEUsXG5cdFBST1BFUlRZX05BTUVfSU5URVJOQUxfRklMRV9BVFRSSUJVVEUsXG5cdFBST1BFUlRZX05BTUVfRVhURVJOQUxfRklMRV9BVFRSSUJVVEUsXG5cdFBST1BFUlRZX05BTUVfTVNfRE9TX0NPTVBBVElCTEUsXG5cdFBST1BFUlRZX05BTUVfWklQNjQsXG5cdEVudHJ5XG59OyIsIi8qXG4gQ29weXJpZ2h0IChjKSAyMDIyIEdpbGRhcyBMb3JtZWF1LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiBcbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuIDMuIFRoZSBuYW1lcyBvZiB0aGUgYXV0aG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEICcnQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXG4gSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKQ1JBRlQsXG4gSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsXG4gT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLyogZ2xvYmFsIEJpZ0ludCwgUmVzcG9uc2UsIFdyaXRhYmxlU3RyZWFtICovXG4vLyBkZW5vLWxpbnQtaWdub3JlLWZpbGUgbm8tdGhpcy1hbGlhc1xuXG5pbXBvcnQge1xuXHRNQVhfMzJfQklUUyxcblx0TUFYXzE2X0JJVFMsXG5cdENPTVBSRVNTSU9OX01FVEhPRF9ERUZMQVRFLFxuXHRDT01QUkVTU0lPTl9NRVRIT0RfU1RPUkUsXG5cdENPTVBSRVNTSU9OX01FVEhPRF9BRVMsXG5cdFNQTElUX1pJUF9GSUxFX1NJR05BVFVSRSxcblx0TE9DQUxfRklMRV9IRUFERVJfU0lHTkFUVVJFLFxuXHRDRU5UUkFMX0ZJTEVfSEVBREVSX1NJR05BVFVSRSxcblx0RU5EX09GX0NFTlRSQUxfRElSX1NJR05BVFVSRSxcblx0WklQNjRfRU5EX09GX0NFTlRSQUxfRElSX0xPQ0FUT1JfU0lHTkFUVVJFLFxuXHRaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfU0lHTkFUVVJFLFxuXHRFWFRSQUZJRUxEX1RZUEVfWklQNjQsXG5cdEVYVFJBRklFTERfVFlQRV9VTklDT0RFX1BBVEgsXG5cdEVYVFJBRklFTERfVFlQRV9VTklDT0RFX0NPTU1FTlQsXG5cdEVYVFJBRklFTERfVFlQRV9BRVMsXG5cdEVYVFJBRklFTERfVFlQRV9OVEZTLFxuXHRFWFRSQUZJRUxEX1RZUEVfTlRGU19UQUcxLFxuXHRFWFRSQUZJRUxEX1RZUEVfRVhURU5ERURfVElNRVNUQU1QLFxuXHRFWFRSQUZJRUxEX1RZUEVfVVNEWixcblx0RU5EX09GX0NFTlRSQUxfRElSX0xFTkdUSCxcblx0WklQNjRfRU5EX09GX0NFTlRSQUxfRElSX0xPQ0FUT1JfTEVOR1RILFxuXHRaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RILFxuXHRCSVRGTEFHX0VOQ1JZUFRFRCxcblx0QklURkxBR19MRVZFTCxcblx0QklURkxBR19EQVRBX0RFU0NSSVBUT1IsXG5cdEJJVEZMQUdfTEFOR19FTkNPRElOR19GTEFHLFxuXHRGSUxFX0FUVFJfTVNET1NfRElSX01BU0ssXG5cdERJUkVDVE9SWV9TSUdOQVRVUkUsXG5cdFVOREVGSU5FRF9WQUxVRVxufSBmcm9tIFwiLi9jb25zdGFudHMuanNcIjtcbmltcG9ydCB7XG5cdGdldENvbmZpZ3VyYXRpb24sXG5cdGdldENodW5rU2l6ZVxufSBmcm9tIFwiLi9jb25maWd1cmF0aW9uLmpzXCI7XG5pbXBvcnQge1xuXHRydW5Xb3JrZXIsXG5cdENPREVDX0lORkxBVEUsXG5cdEVSUl9JTlZBTElEX1NJR05BVFVSRSxcblx0RVJSX0lOVkFMSURfUEFTU1dPUkQsXG5cdEVSUl9BQk9SVF9DSEVDS19QQVNTV09SRFxufSBmcm9tIFwiLi9jb2RlYy1wb29sLmpzXCI7XG5pbXBvcnQge1xuXHRpbml0U3RyZWFtLFxuXHRpbml0UmVhZGVyLFxuXHRpbml0V3JpdGVyLFxuXHRyZWFkVWludDhBcnJheSxcblx0QmxvYlJlYWRlclxufSBmcm9tIFwiLi9pby5qc1wiO1xuaW1wb3J0IHsgZGVjb2RlVGV4dCB9IGZyb20gXCIuL3V0aWwvZGVjb2RlLXRleHQuanNcIjtcbmltcG9ydCB7IENyYzMyIH0gZnJvbSBcIi4vc3RyZWFtcy9jb2RlY3MvY3JjMzIuanNcIjtcbmltcG9ydCB7XG5cdFBST1BFUlRZX05BTUVfUkFXX0ZJTEVOQU1FLFxuXHRQUk9QRVJUWV9OQU1FX0ZJTEVOQU1FLFxuXHRQUk9QRVJUWV9OQU1FX1JBV19DT01NRU5ULFxuXHRQUk9QRVJUWV9OQU1FX0NPTU1FTlQsXG5cdFBST1BFUlRZX05BTUVfVU5DT01QUFJFU1NFRF9TSVpFLFxuXHRQUk9QRVJUWV9OQU1FX0NPTVBQUkVTU0VEX1NJWkUsXG5cdFBST1BFUlRZX05BTUVfT0ZGU0VULFxuXHRQUk9QRVJUWV9OQU1FX0RJU0tfTlVNQkVSX1NUQVJULFxuXHRQUk9QRVJUWV9OQU1FX0xBU1RfTU9ESUZJQ0FUSU9OX0RBVEUsXG5cdFBST1BFUlRZX05BTUVfUkFXX0xBU1RfTU9ESUZJQ0FUSU9OX0RBVEUsXG5cdFBST1BFUlRZX05BTUVfTEFTVF9BQ0NFU1NfREFURSxcblx0UFJPUEVSVFlfTkFNRV9SQVdfTEFTVF9BQ0NFU1NfREFURSxcblx0UFJPUEVSVFlfTkFNRV9DUkVBVElPTl9EQVRFLFxuXHRQUk9QRVJUWV9OQU1FX1JBV19DUkVBVElPTl9EQVRFLFxuXHRFbnRyeVxufSBmcm9tIFwiLi96aXAtZW50cnkuanNcIjtcblxuY29uc3QgRVJSX0JBRF9GT1JNQVQgPSBcIkZpbGUgZm9ybWF0IGlzIG5vdCByZWNvZ25pemVkXCI7XG5jb25zdCBFUlJfRU9DRFJfTk9UX0ZPVU5EID0gXCJFbmQgb2YgY2VudHJhbCBkaXJlY3Rvcnkgbm90IGZvdW5kXCI7XG5jb25zdCBFUlJfRU9DRFJfWklQNjRfTk9UX0ZPVU5EID0gXCJFbmQgb2YgWmlwNjQgY2VudHJhbCBkaXJlY3Rvcnkgbm90IGZvdW5kXCI7XG5jb25zdCBFUlJfRU9DRFJfTE9DQVRPUl9aSVA2NF9OT1RfRk9VTkQgPSBcIkVuZCBvZiBaaXA2NCBjZW50cmFsIGRpcmVjdG9yeSBsb2NhdG9yIG5vdCBmb3VuZFwiO1xuY29uc3QgRVJSX0NFTlRSQUxfRElSRUNUT1JZX05PVF9GT1VORCA9IFwiQ2VudHJhbCBkaXJlY3RvcnkgaGVhZGVyIG5vdCBmb3VuZFwiO1xuY29uc3QgRVJSX0xPQ0FMX0ZJTEVfSEVBREVSX05PVF9GT1VORCA9IFwiTG9jYWwgZmlsZSBoZWFkZXIgbm90IGZvdW5kXCI7XG5jb25zdCBFUlJfRVhUUkFGSUVMRF9aSVA2NF9OT1RfRk9VTkQgPSBcIlppcDY0IGV4dHJhIGZpZWxkIG5vdCBmb3VuZFwiO1xuY29uc3QgRVJSX0VOQ1JZUFRFRCA9IFwiRmlsZSBjb250YWlucyBlbmNyeXB0ZWQgZW50cnlcIjtcbmNvbnN0IEVSUl9VTlNVUFBPUlRFRF9FTkNSWVBUSU9OID0gXCJFbmNyeXB0aW9uIG1ldGhvZCBub3Qgc3VwcG9ydGVkXCI7XG5jb25zdCBFUlJfVU5TVVBQT1JURURfQ09NUFJFU1NJT04gPSBcIkNvbXByZXNzaW9uIG1ldGhvZCBub3Qgc3VwcG9ydGVkXCI7XG5jb25zdCBFUlJfU1BMSVRfWklQX0ZJTEUgPSBcIlNwbGl0IHppcCBmaWxlXCI7XG5jb25zdCBDSEFSU0VUX1VURjggPSBcInV0Zi04XCI7XG5jb25zdCBDSEFSU0VUX0NQNDM3ID0gXCJjcDQzN1wiO1xuY29uc3QgWklQNjRfUFJPUEVSVElFUyA9IFtcblx0W1BST1BFUlRZX05BTUVfVU5DT01QUFJFU1NFRF9TSVpFLCBNQVhfMzJfQklUU10sXG5cdFtQUk9QRVJUWV9OQU1FX0NPTVBQUkVTU0VEX1NJWkUsIE1BWF8zMl9CSVRTXSxcblx0W1BST1BFUlRZX05BTUVfT0ZGU0VULCBNQVhfMzJfQklUU10sXG5cdFtQUk9QRVJUWV9OQU1FX0RJU0tfTlVNQkVSX1NUQVJULCBNQVhfMTZfQklUU11cbl07XG5jb25zdCBaSVA2NF9FWFRSQUNUSU9OID0ge1xuXHRbTUFYXzE2X0JJVFNdOiB7XG5cdFx0Z2V0VmFsdWU6IGdldFVpbnQzMixcblx0XHRieXRlczogNFxuXHR9LFxuXHRbTUFYXzMyX0JJVFNdOiB7XG5cdFx0Z2V0VmFsdWU6IGdldEJpZ1VpbnQ2NCxcblx0XHRieXRlczogOFxuXHR9XG59O1xuXG5jbGFzcyBaaXBSZWFkZXIge1xuXG5cdGNvbnN0cnVjdG9yKHJlYWRlciwgb3B0aW9ucyA9IHt9KSB7XG5cdFx0T2JqZWN0LmFzc2lnbih0aGlzLCB7XG5cdFx0XHRyZWFkZXI6IGluaXRSZWFkZXIocmVhZGVyKSxcblx0XHRcdG9wdGlvbnMsXG5cdFx0XHRjb25maWc6IGdldENvbmZpZ3VyYXRpb24oKVxuXHRcdH0pO1xuXHR9XG5cblx0YXN5bmMqIGdldEVudHJpZXNHZW5lcmF0b3Iob3B0aW9ucyA9IHt9KSB7XG5cdFx0Y29uc3QgemlwUmVhZGVyID0gdGhpcztcblx0XHRsZXQgeyByZWFkZXIgfSA9IHppcFJlYWRlcjtcblx0XHRjb25zdCB7IGNvbmZpZyB9ID0gemlwUmVhZGVyO1xuXHRcdGF3YWl0IGluaXRTdHJlYW0ocmVhZGVyKTtcblx0XHRpZiAocmVhZGVyLnNpemUgPT09IFVOREVGSU5FRF9WQUxVRSB8fCAhcmVhZGVyLnJlYWRVaW50OEFycmF5KSB7XG5cdFx0XHRyZWFkZXIgPSBuZXcgQmxvYlJlYWRlcihhd2FpdCBuZXcgUmVzcG9uc2UocmVhZGVyLnJlYWRhYmxlKS5ibG9iKCkpO1xuXHRcdFx0YXdhaXQgaW5pdFN0cmVhbShyZWFkZXIpO1xuXHRcdH1cblx0XHRpZiAocmVhZGVyLnNpemUgPCBFTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RIKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0JBRF9GT1JNQVQpO1xuXHRcdH1cblx0XHRyZWFkZXIuY2h1bmtTaXplID0gZ2V0Q2h1bmtTaXplKGNvbmZpZyk7XG5cdFx0Y29uc3QgZW5kT2ZEaXJlY3RvcnlJbmZvID0gYXdhaXQgc2Vla1NpZ25hdHVyZShyZWFkZXIsIEVORF9PRl9DRU5UUkFMX0RJUl9TSUdOQVRVUkUsIHJlYWRlci5zaXplLCBFTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RILCBNQVhfMTZfQklUUyAqIDE2KTtcblx0XHRpZiAoIWVuZE9mRGlyZWN0b3J5SW5mbykge1xuXHRcdFx0Y29uc3Qgc2lnbmF0dXJlQXJyYXkgPSBhd2FpdCByZWFkVWludDhBcnJheShyZWFkZXIsIDAsIDQpO1xuXHRcdFx0Y29uc3Qgc2lnbmF0dXJlVmlldyA9IGdldERhdGFWaWV3KHNpZ25hdHVyZUFycmF5KTtcblx0XHRcdGlmIChnZXRVaW50MzIoc2lnbmF0dXJlVmlldykgPT0gU1BMSVRfWklQX0ZJTEVfU0lHTkFUVVJFKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfU1BMSVRfWklQX0ZJTEUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9FT0NEUl9OT1RfRk9VTkQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRjb25zdCBlbmRPZkRpcmVjdG9yeVZpZXcgPSBnZXREYXRhVmlldyhlbmRPZkRpcmVjdG9yeUluZm8pO1xuXHRcdGxldCBkaXJlY3RvcnlEYXRhTGVuZ3RoID0gZ2V0VWludDMyKGVuZE9mRGlyZWN0b3J5VmlldywgMTIpO1xuXHRcdGxldCBkaXJlY3RvcnlEYXRhT2Zmc2V0ID0gZ2V0VWludDMyKGVuZE9mRGlyZWN0b3J5VmlldywgMTYpO1xuXHRcdGNvbnN0IGNvbW1lbnRPZmZzZXQgPSBlbmRPZkRpcmVjdG9yeUluZm8ub2Zmc2V0O1xuXHRcdGNvbnN0IGNvbW1lbnRMZW5ndGggPSBnZXRVaW50MTYoZW5kT2ZEaXJlY3RvcnlWaWV3LCAyMCk7XG5cdFx0Y29uc3QgYXBwZW5kZWREYXRhT2Zmc2V0ID0gY29tbWVudE9mZnNldCArIEVORF9PRl9DRU5UUkFMX0RJUl9MRU5HVEggKyBjb21tZW50TGVuZ3RoO1xuXHRcdGxldCBsYXN0RGlza051bWJlciA9IGdldFVpbnQxNihlbmRPZkRpcmVjdG9yeVZpZXcsIDQpO1xuXHRcdGNvbnN0IGV4cGVjdGVkTGFzdERpc2tOdW1iZXIgPSByZWFkZXIubGFzdERpc2tOdW1iZXIgfHwgMDtcblx0XHRsZXQgZGlza051bWJlciA9IGdldFVpbnQxNihlbmRPZkRpcmVjdG9yeVZpZXcsIDYpO1xuXHRcdGxldCBmaWxlc0xlbmd0aCA9IGdldFVpbnQxNihlbmRPZkRpcmVjdG9yeVZpZXcsIDgpO1xuXHRcdGxldCBwcmVwZW5kZWREYXRhTGVuZ3RoID0gMDtcblx0XHRsZXQgc3RhcnRPZmZzZXQgPSAwO1xuXHRcdGlmIChkaXJlY3RvcnlEYXRhT2Zmc2V0ID09IE1BWF8zMl9CSVRTIHx8IGRpcmVjdG9yeURhdGFMZW5ndGggPT0gTUFYXzMyX0JJVFMgfHwgZmlsZXNMZW5ndGggPT0gTUFYXzE2X0JJVFMgfHwgZGlza051bWJlciA9PSBNQVhfMTZfQklUUykge1xuXHRcdFx0Y29uc3QgZW5kT2ZEaXJlY3RvcnlMb2NhdG9yQXJyYXkgPSBhd2FpdCByZWFkVWludDhBcnJheShyZWFkZXIsIGVuZE9mRGlyZWN0b3J5SW5mby5vZmZzZXQgLSBaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTE9DQVRPUl9MRU5HVEgsIFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9MT0NBVE9SX0xFTkdUSCk7XG5cdFx0XHRjb25zdCBlbmRPZkRpcmVjdG9yeUxvY2F0b3JWaWV3ID0gZ2V0RGF0YVZpZXcoZW5kT2ZEaXJlY3RvcnlMb2NhdG9yQXJyYXkpO1xuXHRcdFx0aWYgKGdldFVpbnQzMihlbmRPZkRpcmVjdG9yeUxvY2F0b3JWaWV3LCAwKSAhPSBaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTE9DQVRPUl9TSUdOQVRVUkUpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9FT0NEUl9aSVA2NF9OT1RfRk9VTkQpO1xuXHRcdFx0fVxuXHRcdFx0ZGlyZWN0b3J5RGF0YU9mZnNldCA9IGdldEJpZ1VpbnQ2NChlbmRPZkRpcmVjdG9yeUxvY2F0b3JWaWV3LCA4KTtcblx0XHRcdGxldCBlbmRPZkRpcmVjdG9yeUFycmF5ID0gYXdhaXQgcmVhZFVpbnQ4QXJyYXkocmVhZGVyLCBkaXJlY3RvcnlEYXRhT2Zmc2V0LCBaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RILCAtMSk7XG5cdFx0XHRsZXQgZW5kT2ZEaXJlY3RvcnlWaWV3ID0gZ2V0RGF0YVZpZXcoZW5kT2ZEaXJlY3RvcnlBcnJheSk7XG5cdFx0XHRjb25zdCBleHBlY3RlZERpcmVjdG9yeURhdGFPZmZzZXQgPSBlbmRPZkRpcmVjdG9yeUluZm8ub2Zmc2V0IC0gWklQNjRfRU5EX09GX0NFTlRSQUxfRElSX0xPQ0FUT1JfTEVOR1RIIC0gWklQNjRfRU5EX09GX0NFTlRSQUxfRElSX0xFTkdUSDtcblx0XHRcdGlmIChnZXRVaW50MzIoZW5kT2ZEaXJlY3RvcnlWaWV3LCAwKSAhPSBaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfU0lHTkFUVVJFICYmIGRpcmVjdG9yeURhdGFPZmZzZXQgIT0gZXhwZWN0ZWREaXJlY3RvcnlEYXRhT2Zmc2V0KSB7XG5cdFx0XHRcdGNvbnN0IG9yaWdpbmFsRGlyZWN0b3J5RGF0YU9mZnNldCA9IGRpcmVjdG9yeURhdGFPZmZzZXQ7XG5cdFx0XHRcdGRpcmVjdG9yeURhdGFPZmZzZXQgPSBleHBlY3RlZERpcmVjdG9yeURhdGFPZmZzZXQ7XG5cdFx0XHRcdHByZXBlbmRlZERhdGFMZW5ndGggPSBkaXJlY3RvcnlEYXRhT2Zmc2V0IC0gb3JpZ2luYWxEaXJlY3RvcnlEYXRhT2Zmc2V0O1xuXHRcdFx0XHRlbmRPZkRpcmVjdG9yeUFycmF5ID0gYXdhaXQgcmVhZFVpbnQ4QXJyYXkocmVhZGVyLCBkaXJlY3RvcnlEYXRhT2Zmc2V0LCBaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RILCAtMSk7XG5cdFx0XHRcdGVuZE9mRGlyZWN0b3J5VmlldyA9IGdldERhdGFWaWV3KGVuZE9mRGlyZWN0b3J5QXJyYXkpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGdldFVpbnQzMihlbmRPZkRpcmVjdG9yeVZpZXcsIDApICE9IFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9TSUdOQVRVUkUpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9FT0NEUl9MT0NBVE9SX1pJUDY0X05PVF9GT1VORCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAobGFzdERpc2tOdW1iZXIgPT0gTUFYXzE2X0JJVFMpIHtcblx0XHRcdFx0bGFzdERpc2tOdW1iZXIgPSBnZXRVaW50MzIoZW5kT2ZEaXJlY3RvcnlWaWV3LCAxNik7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZGlza051bWJlciA9PSBNQVhfMTZfQklUUykge1xuXHRcdFx0XHRkaXNrTnVtYmVyID0gZ2V0VWludDMyKGVuZE9mRGlyZWN0b3J5VmlldywgMjApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGZpbGVzTGVuZ3RoID09IE1BWF8xNl9CSVRTKSB7XG5cdFx0XHRcdGZpbGVzTGVuZ3RoID0gZ2V0QmlnVWludDY0KGVuZE9mRGlyZWN0b3J5VmlldywgMzIpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRpcmVjdG9yeURhdGFMZW5ndGggPT0gTUFYXzMyX0JJVFMpIHtcblx0XHRcdFx0ZGlyZWN0b3J5RGF0YUxlbmd0aCA9IGdldEJpZ1VpbnQ2NChlbmRPZkRpcmVjdG9yeVZpZXcsIDQwKTtcblx0XHRcdH1cblx0XHRcdGRpcmVjdG9yeURhdGFPZmZzZXQgLT0gZGlyZWN0b3J5RGF0YUxlbmd0aDtcblx0XHR9XG5cdFx0aWYgKGRpcmVjdG9yeURhdGFPZmZzZXQgPj0gcmVhZGVyLnNpemUpIHtcblx0XHRcdHByZXBlbmRlZERhdGFMZW5ndGggPSByZWFkZXIuc2l6ZSAtIGRpcmVjdG9yeURhdGFPZmZzZXQgLSBkaXJlY3RvcnlEYXRhTGVuZ3RoIC0gRU5EX09GX0NFTlRSQUxfRElSX0xFTkdUSDtcblx0XHRcdGRpcmVjdG9yeURhdGFPZmZzZXQgPSByZWFkZXIuc2l6ZSAtIGRpcmVjdG9yeURhdGFMZW5ndGggLSBFTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RIO1x0XG5cdFx0fVxuXHRcdGlmIChleHBlY3RlZExhc3REaXNrTnVtYmVyICE9IGxhc3REaXNrTnVtYmVyKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX1NQTElUX1pJUF9GSUxFKTtcblx0XHR9XG5cdFx0aWYgKGRpcmVjdG9yeURhdGFPZmZzZXQgPCAwKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0JBRF9GT1JNQVQpO1xuXHRcdH1cblx0XHRsZXQgb2Zmc2V0ID0gMDtcblx0XHRsZXQgZGlyZWN0b3J5QXJyYXkgPSBhd2FpdCByZWFkVWludDhBcnJheShyZWFkZXIsIGRpcmVjdG9yeURhdGFPZmZzZXQsIGRpcmVjdG9yeURhdGFMZW5ndGgsIGRpc2tOdW1iZXIpO1xuXHRcdGxldCBkaXJlY3RvcnlWaWV3ID0gZ2V0RGF0YVZpZXcoZGlyZWN0b3J5QXJyYXkpO1xuXHRcdGlmIChkaXJlY3RvcnlEYXRhTGVuZ3RoKSB7XG5cdFx0XHRjb25zdCBleHBlY3RlZERpcmVjdG9yeURhdGFPZmZzZXQgPSBlbmRPZkRpcmVjdG9yeUluZm8ub2Zmc2V0IC0gZGlyZWN0b3J5RGF0YUxlbmd0aDtcblx0XHRcdGlmIChnZXRVaW50MzIoZGlyZWN0b3J5Vmlldywgb2Zmc2V0KSAhPSBDRU5UUkFMX0ZJTEVfSEVBREVSX1NJR05BVFVSRSAmJiBkaXJlY3RvcnlEYXRhT2Zmc2V0ICE9IGV4cGVjdGVkRGlyZWN0b3J5RGF0YU9mZnNldCkge1xuXHRcdFx0XHRjb25zdCBvcmlnaW5hbERpcmVjdG9yeURhdGFPZmZzZXQgPSBkaXJlY3RvcnlEYXRhT2Zmc2V0O1xuXHRcdFx0XHRkaXJlY3RvcnlEYXRhT2Zmc2V0ID0gZXhwZWN0ZWREaXJlY3RvcnlEYXRhT2Zmc2V0O1xuXHRcdFx0XHRwcmVwZW5kZWREYXRhTGVuZ3RoICs9IGRpcmVjdG9yeURhdGFPZmZzZXQgLSBvcmlnaW5hbERpcmVjdG9yeURhdGFPZmZzZXQ7XG5cdFx0XHRcdGRpcmVjdG9yeUFycmF5ID0gYXdhaXQgcmVhZFVpbnQ4QXJyYXkocmVhZGVyLCBkaXJlY3RvcnlEYXRhT2Zmc2V0LCBkaXJlY3RvcnlEYXRhTGVuZ3RoLCBkaXNrTnVtYmVyKTtcblx0XHRcdFx0ZGlyZWN0b3J5VmlldyA9IGdldERhdGFWaWV3KGRpcmVjdG9yeUFycmF5KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Y29uc3QgZXhwZWN0ZWREaXJlY3RvcnlEYXRhTGVuZ3RoID0gZW5kT2ZEaXJlY3RvcnlJbmZvLm9mZnNldCAtIGRpcmVjdG9yeURhdGFPZmZzZXQgLSAocmVhZGVyLmxhc3REaXNrT2Zmc2V0IHx8IDApO1xuXHRcdGlmIChkaXJlY3RvcnlEYXRhTGVuZ3RoICE9IGV4cGVjdGVkRGlyZWN0b3J5RGF0YUxlbmd0aCAmJiBleHBlY3RlZERpcmVjdG9yeURhdGFMZW5ndGggPj0gMCkge1xuXHRcdFx0ZGlyZWN0b3J5RGF0YUxlbmd0aCA9IGV4cGVjdGVkRGlyZWN0b3J5RGF0YUxlbmd0aDtcblx0XHRcdGRpcmVjdG9yeUFycmF5ID0gYXdhaXQgcmVhZFVpbnQ4QXJyYXkocmVhZGVyLCBkaXJlY3RvcnlEYXRhT2Zmc2V0LCBkaXJlY3RvcnlEYXRhTGVuZ3RoLCBkaXNrTnVtYmVyKTtcblx0XHRcdGRpcmVjdG9yeVZpZXcgPSBnZXREYXRhVmlldyhkaXJlY3RvcnlBcnJheSk7XG5cdFx0fVxuXHRcdGlmIChkaXJlY3RvcnlEYXRhT2Zmc2V0IDwgMCB8fCBkaXJlY3RvcnlEYXRhT2Zmc2V0ID49IHJlYWRlci5zaXplKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0JBRF9GT1JNQVQpO1xuXHRcdH1cblx0XHRjb25zdCBmaWxlbmFtZUVuY29kaW5nID0gZ2V0T3B0aW9uVmFsdWUoemlwUmVhZGVyLCBvcHRpb25zLCBcImZpbGVuYW1lRW5jb2RpbmdcIik7XG5cdFx0Y29uc3QgY29tbWVudEVuY29kaW5nID0gZ2V0T3B0aW9uVmFsdWUoemlwUmVhZGVyLCBvcHRpb25zLCBcImNvbW1lbnRFbmNvZGluZ1wiKTtcblx0XHRmb3IgKGxldCBpbmRleEZpbGUgPSAwOyBpbmRleEZpbGUgPCBmaWxlc0xlbmd0aDsgaW5kZXhGaWxlKyspIHtcblx0XHRcdGNvbnN0IGZpbGVFbnRyeSA9IG5ldyBaaXBFbnRyeShyZWFkZXIsIGNvbmZpZywgemlwUmVhZGVyLm9wdGlvbnMpO1xuXHRcdFx0aWYgKGdldFVpbnQzMihkaXJlY3RvcnlWaWV3LCBvZmZzZXQpICE9IENFTlRSQUxfRklMRV9IRUFERVJfU0lHTkFUVVJFKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfQ0VOVFJBTF9ESVJFQ1RPUllfTk9UX0ZPVU5EKTtcblx0XHRcdH1cblx0XHRcdHJlYWRDb21tb25IZWFkZXIoZmlsZUVudHJ5LCBkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyA2KTtcblx0XHRcdGNvbnN0IGxhbmd1YWdlRW5jb2RpbmdGbGFnID0gQm9vbGVhbihmaWxlRW50cnkuYml0RmxhZy5sYW5ndWFnZUVuY29kaW5nRmxhZyk7XG5cdFx0XHRjb25zdCBmaWxlbmFtZU9mZnNldCA9IG9mZnNldCArIDQ2O1xuXHRcdFx0Y29uc3QgZXh0cmFGaWVsZE9mZnNldCA9IGZpbGVuYW1lT2Zmc2V0ICsgZmlsZUVudHJ5LmZpbGVuYW1lTGVuZ3RoO1xuXHRcdFx0Y29uc3QgY29tbWVudE9mZnNldCA9IGV4dHJhRmllbGRPZmZzZXQgKyBmaWxlRW50cnkuZXh0cmFGaWVsZExlbmd0aDtcblx0XHRcdGNvbnN0IHZlcnNpb25NYWRlQnkgPSBnZXRVaW50MTYoZGlyZWN0b3J5Vmlldywgb2Zmc2V0ICsgNCk7XG5cdFx0XHRjb25zdCBtc0Rvc0NvbXBhdGlibGUgPSAodmVyc2lvbk1hZGVCeSAmIDApID09IDA7XG5cdFx0XHRjb25zdCByYXdGaWxlbmFtZSA9IGRpcmVjdG9yeUFycmF5LnN1YmFycmF5KGZpbGVuYW1lT2Zmc2V0LCBleHRyYUZpZWxkT2Zmc2V0KTtcblx0XHRcdGNvbnN0IGNvbW1lbnRMZW5ndGggPSBnZXRVaW50MTYoZGlyZWN0b3J5Vmlldywgb2Zmc2V0ICsgMzIpO1xuXHRcdFx0Y29uc3QgZW5kT2Zmc2V0ID0gY29tbWVudE9mZnNldCArIGNvbW1lbnRMZW5ndGg7XG5cdFx0XHRjb25zdCByYXdDb21tZW50ID0gZGlyZWN0b3J5QXJyYXkuc3ViYXJyYXkoY29tbWVudE9mZnNldCwgZW5kT2Zmc2V0KTtcblx0XHRcdGNvbnN0IGZpbGVuYW1lVVRGOCA9IGxhbmd1YWdlRW5jb2RpbmdGbGFnO1xuXHRcdFx0Y29uc3QgY29tbWVudFVURjggPSBsYW5ndWFnZUVuY29kaW5nRmxhZztcblx0XHRcdGNvbnN0IGRpcmVjdG9yeSA9IG1zRG9zQ29tcGF0aWJsZSAmJiAoKGdldFVpbnQ4KGRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDM4KSAmIEZJTEVfQVRUUl9NU0RPU19ESVJfTUFTSykgPT0gRklMRV9BVFRSX01TRE9TX0RJUl9NQVNLKTtcblx0XHRcdGNvbnN0IG9mZnNldEZpbGVFbnRyeSA9IGdldFVpbnQzMihkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyA0MikgKyBwcmVwZW5kZWREYXRhTGVuZ3RoO1xuXHRcdFx0T2JqZWN0LmFzc2lnbihmaWxlRW50cnksIHtcblx0XHRcdFx0dmVyc2lvbk1hZGVCeSxcblx0XHRcdFx0bXNEb3NDb21wYXRpYmxlLFxuXHRcdFx0XHRjb21wcmVzc2VkU2l6ZTogMCxcblx0XHRcdFx0dW5jb21wcmVzc2VkU2l6ZTogMCxcblx0XHRcdFx0Y29tbWVudExlbmd0aCxcblx0XHRcdFx0ZGlyZWN0b3J5LFxuXHRcdFx0XHRvZmZzZXQ6IG9mZnNldEZpbGVFbnRyeSxcblx0XHRcdFx0ZGlza051bWJlclN0YXJ0OiBnZXRVaW50MTYoZGlyZWN0b3J5Vmlldywgb2Zmc2V0ICsgMzQpLFxuXHRcdFx0XHRpbnRlcm5hbEZpbGVBdHRyaWJ1dGU6IGdldFVpbnQxNihkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyAzNiksXG5cdFx0XHRcdGV4dGVybmFsRmlsZUF0dHJpYnV0ZTogZ2V0VWludDMyKGRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDM4KSxcblx0XHRcdFx0cmF3RmlsZW5hbWUsXG5cdFx0XHRcdGZpbGVuYW1lVVRGOCxcblx0XHRcdFx0Y29tbWVudFVURjgsXG5cdFx0XHRcdHJhd0V4dHJhRmllbGQ6IGRpcmVjdG9yeUFycmF5LnN1YmFycmF5KGV4dHJhRmllbGRPZmZzZXQsIGNvbW1lbnRPZmZzZXQpXG5cdFx0XHR9KTtcblx0XHRcdGNvbnN0IFtmaWxlbmFtZSwgY29tbWVudF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG5cdFx0XHRcdGRlY29kZVRleHQocmF3RmlsZW5hbWUsIGZpbGVuYW1lVVRGOCA/IENIQVJTRVRfVVRGOCA6IGZpbGVuYW1lRW5jb2RpbmcgfHwgQ0hBUlNFVF9DUDQzNyksXG5cdFx0XHRcdGRlY29kZVRleHQocmF3Q29tbWVudCwgY29tbWVudFVURjggPyBDSEFSU0VUX1VURjggOiBjb21tZW50RW5jb2RpbmcgfHwgQ0hBUlNFVF9DUDQzNylcblx0XHRcdF0pO1xuXHRcdFx0T2JqZWN0LmFzc2lnbihmaWxlRW50cnksIHtcblx0XHRcdFx0cmF3Q29tbWVudCxcblx0XHRcdFx0ZmlsZW5hbWUsXG5cdFx0XHRcdGNvbW1lbnQsXG5cdFx0XHRcdGRpcmVjdG9yeTogZGlyZWN0b3J5IHx8IGZpbGVuYW1lLmVuZHNXaXRoKERJUkVDVE9SWV9TSUdOQVRVUkUpXG5cdFx0XHR9KTtcblx0XHRcdHN0YXJ0T2Zmc2V0ID0gTWF0aC5tYXgob2Zmc2V0RmlsZUVudHJ5LCBzdGFydE9mZnNldCk7XG5cdFx0XHRhd2FpdCByZWFkQ29tbW9uRm9vdGVyKGZpbGVFbnRyeSwgZmlsZUVudHJ5LCBkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyA2KTtcblx0XHRcdGNvbnN0IGVudHJ5ID0gbmV3IEVudHJ5KGZpbGVFbnRyeSk7XG5cdFx0XHRlbnRyeS5nZXREYXRhID0gKHdyaXRlciwgb3B0aW9ucykgPT4gZmlsZUVudHJ5LmdldERhdGEod3JpdGVyLCBlbnRyeSwgb3B0aW9ucyk7XG5cdFx0XHRvZmZzZXQgPSBlbmRPZmZzZXQ7XG5cdFx0XHRjb25zdCB7IG9ucHJvZ3Jlc3MgfSA9IG9wdGlvbnM7XG5cdFx0XHRpZiAob25wcm9ncmVzcykge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGF3YWl0IG9ucHJvZ3Jlc3MoaW5kZXhGaWxlICsgMSwgZmlsZXNMZW5ndGgsIG5ldyBFbnRyeShmaWxlRW50cnkpKTtcblx0XHRcdFx0fSBjYXRjaCAoX2Vycm9yKSB7XG5cdFx0XHRcdFx0Ly8gaWdub3JlZFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR5aWVsZCBlbnRyeTtcblx0XHR9XG5cdFx0Y29uc3QgZXh0cmFjdFByZXBlbmRlZERhdGEgPSBnZXRPcHRpb25WYWx1ZSh6aXBSZWFkZXIsIG9wdGlvbnMsIFwiZXh0cmFjdFByZXBlbmRlZERhdGFcIik7XG5cdFx0Y29uc3QgZXh0cmFjdEFwcGVuZGVkRGF0YSA9IGdldE9wdGlvblZhbHVlKHppcFJlYWRlciwgb3B0aW9ucywgXCJleHRyYWN0QXBwZW5kZWREYXRhXCIpO1xuXHRcdGlmIChleHRyYWN0UHJlcGVuZGVkRGF0YSkge1xuXHRcdFx0emlwUmVhZGVyLnByZXBlbmRlZERhdGEgPSBzdGFydE9mZnNldCA+IDAgPyBhd2FpdCByZWFkVWludDhBcnJheShyZWFkZXIsIDAsIHN0YXJ0T2Zmc2V0KSA6IG5ldyBVaW50OEFycmF5KCk7XG5cdFx0fVxuXHRcdHppcFJlYWRlci5jb21tZW50ID0gY29tbWVudExlbmd0aCA/IGF3YWl0IHJlYWRVaW50OEFycmF5KHJlYWRlciwgY29tbWVudE9mZnNldCArIEVORF9PRl9DRU5UUkFMX0RJUl9MRU5HVEgsIGNvbW1lbnRMZW5ndGgpIDogbmV3IFVpbnQ4QXJyYXkoKTtcblx0XHRpZiAoZXh0cmFjdEFwcGVuZGVkRGF0YSkge1xuXHRcdFx0emlwUmVhZGVyLmFwcGVuZGVkRGF0YSA9IGFwcGVuZGVkRGF0YU9mZnNldCA8IHJlYWRlci5zaXplID8gYXdhaXQgcmVhZFVpbnQ4QXJyYXkocmVhZGVyLCBhcHBlbmRlZERhdGFPZmZzZXQsIHJlYWRlci5zaXplIC0gYXBwZW5kZWREYXRhT2Zmc2V0KSA6IG5ldyBVaW50OEFycmF5KCk7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0YXN5bmMgZ2V0RW50cmllcyhvcHRpb25zID0ge30pIHtcblx0XHRjb25zdCBlbnRyaWVzID0gW107XG5cdFx0Zm9yIGF3YWl0IChjb25zdCBlbnRyeSBvZiB0aGlzLmdldEVudHJpZXNHZW5lcmF0b3Iob3B0aW9ucykpIHtcblx0XHRcdGVudHJpZXMucHVzaChlbnRyeSk7XG5cdFx0fVxuXHRcdHJldHVybiBlbnRyaWVzO1xuXHR9XG5cblx0YXN5bmMgY2xvc2UoKSB7XG5cdH1cbn1cblxuZXhwb3J0IHtcblx0WmlwUmVhZGVyLFxuXHRFUlJfQkFEX0ZPUk1BVCxcblx0RVJSX0VPQ0RSX05PVF9GT1VORCxcblx0RVJSX0VPQ0RSX1pJUDY0X05PVF9GT1VORCxcblx0RVJSX0VPQ0RSX0xPQ0FUT1JfWklQNjRfTk9UX0ZPVU5ELFxuXHRFUlJfQ0VOVFJBTF9ESVJFQ1RPUllfTk9UX0ZPVU5ELFxuXHRFUlJfTE9DQUxfRklMRV9IRUFERVJfTk9UX0ZPVU5ELFxuXHRFUlJfRVhUUkFGSUVMRF9aSVA2NF9OT1RfRk9VTkQsXG5cdEVSUl9FTkNSWVBURUQsXG5cdEVSUl9VTlNVUFBPUlRFRF9FTkNSWVBUSU9OLFxuXHRFUlJfVU5TVVBQT1JURURfQ09NUFJFU1NJT04sXG5cdEVSUl9JTlZBTElEX1NJR05BVFVSRSxcblx0RVJSX0lOVkFMSURfUEFTU1dPUkQsXG5cdEVSUl9TUExJVF9aSVBfRklMRVxufTtcblxuY2xhc3MgWmlwRW50cnkge1xuXG5cdGNvbnN0cnVjdG9yKHJlYWRlciwgY29uZmlnLCBvcHRpb25zKSB7XG5cdFx0T2JqZWN0LmFzc2lnbih0aGlzLCB7XG5cdFx0XHRyZWFkZXIsXG5cdFx0XHRjb25maWcsXG5cdFx0XHRvcHRpb25zXG5cdFx0fSk7XG5cdH1cblxuXHRhc3luYyBnZXREYXRhKHdyaXRlciwgZmlsZUVudHJ5LCBvcHRpb25zID0ge30pIHtcblx0XHRjb25zdCB6aXBFbnRyeSA9IHRoaXM7XG5cdFx0Y29uc3Qge1xuXHRcdFx0cmVhZGVyLFxuXHRcdFx0b2Zmc2V0LFxuXHRcdFx0ZGlza051bWJlclN0YXJ0LFxuXHRcdFx0ZXh0cmFGaWVsZEFFUyxcblx0XHRcdGNvbXByZXNzaW9uTWV0aG9kLFxuXHRcdFx0Y29uZmlnLFxuXHRcdFx0Yml0RmxhZyxcblx0XHRcdHNpZ25hdHVyZSxcblx0XHRcdHJhd0xhc3RNb2REYXRlLFxuXHRcdFx0dW5jb21wcmVzc2VkU2l6ZSxcblx0XHRcdGNvbXByZXNzZWRTaXplXG5cdFx0fSA9IHppcEVudHJ5O1xuXHRcdGNvbnN0IGxvY2FsRGlyZWN0b3J5ID0gZmlsZUVudHJ5LmxvY2FsRGlyZWN0b3J5ID0ge307XG5cdFx0Y29uc3QgZGF0YUFycmF5ID0gYXdhaXQgcmVhZFVpbnQ4QXJyYXkocmVhZGVyLCBvZmZzZXQsIDMwLCBkaXNrTnVtYmVyU3RhcnQpO1xuXHRcdGNvbnN0IGRhdGFWaWV3ID0gZ2V0RGF0YVZpZXcoZGF0YUFycmF5KTtcblx0XHRsZXQgcGFzc3dvcmQgPSBnZXRPcHRpb25WYWx1ZSh6aXBFbnRyeSwgb3B0aW9ucywgXCJwYXNzd29yZFwiKTtcblx0XHRwYXNzd29yZCA9IHBhc3N3b3JkICYmIHBhc3N3b3JkLmxlbmd0aCAmJiBwYXNzd29yZDtcblx0XHRpZiAoZXh0cmFGaWVsZEFFUykge1xuXHRcdFx0aWYgKGV4dHJhRmllbGRBRVMub3JpZ2luYWxDb21wcmVzc2lvbk1ldGhvZCAhPSBDT01QUkVTU0lPTl9NRVRIT0RfQUVTKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfVU5TVVBQT1JURURfQ09NUFJFU1NJT04pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoY29tcHJlc3Npb25NZXRob2QgIT0gQ09NUFJFU1NJT05fTUVUSE9EX1NUT1JFICYmIGNvbXByZXNzaW9uTWV0aG9kICE9IENPTVBSRVNTSU9OX01FVEhPRF9ERUZMQVRFKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX1VOU1VQUE9SVEVEX0NPTVBSRVNTSU9OKTtcblx0XHR9XG5cdFx0aWYgKGdldFVpbnQzMihkYXRhVmlldywgMCkgIT0gTE9DQUxfRklMRV9IRUFERVJfU0lHTkFUVVJFKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0xPQ0FMX0ZJTEVfSEVBREVSX05PVF9GT1VORCk7XG5cdFx0fVxuXHRcdHJlYWRDb21tb25IZWFkZXIobG9jYWxEaXJlY3RvcnksIGRhdGFWaWV3LCA0KTtcblx0XHRsb2NhbERpcmVjdG9yeS5yYXdFeHRyYUZpZWxkID0gbG9jYWxEaXJlY3RvcnkuZXh0cmFGaWVsZExlbmd0aCA/XG5cdFx0XHRhd2FpdCByZWFkVWludDhBcnJheShyZWFkZXIsIG9mZnNldCArIDMwICsgbG9jYWxEaXJlY3RvcnkuZmlsZW5hbWVMZW5ndGgsIGxvY2FsRGlyZWN0b3J5LmV4dHJhRmllbGRMZW5ndGgsIGRpc2tOdW1iZXJTdGFydCkgOlxuXHRcdFx0bmV3IFVpbnQ4QXJyYXkoKTtcblx0XHRhd2FpdCByZWFkQ29tbW9uRm9vdGVyKHppcEVudHJ5LCBsb2NhbERpcmVjdG9yeSwgZGF0YVZpZXcsIDQsIHRydWUpO1xuXHRcdE9iamVjdC5hc3NpZ24oZmlsZUVudHJ5LCB7XG5cdFx0XHRsYXN0QWNjZXNzRGF0ZTogbG9jYWxEaXJlY3RvcnkubGFzdEFjY2Vzc0RhdGUsXG5cdFx0XHRjcmVhdGlvbkRhdGU6IGxvY2FsRGlyZWN0b3J5LmNyZWF0aW9uRGF0ZVxuXHRcdH0pO1xuXHRcdGNvbnN0IGVuY3J5cHRlZCA9IHppcEVudHJ5LmVuY3J5cHRlZCAmJiBsb2NhbERpcmVjdG9yeS5lbmNyeXB0ZWQ7XG5cdFx0Y29uc3QgemlwQ3J5cHRvID0gZW5jcnlwdGVkICYmICFleHRyYUZpZWxkQUVTO1xuXHRcdGlmIChlbmNyeXB0ZWQpIHtcblx0XHRcdGlmICghemlwQ3J5cHRvICYmIGV4dHJhRmllbGRBRVMuc3RyZW5ndGggPT09IFVOREVGSU5FRF9WQUxVRSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX1VOU1VQUE9SVEVEX0VOQ1JZUFRJT04pO1xuXHRcdFx0fSBlbHNlIGlmICghcGFzc3dvcmQpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9FTkNSWVBURUQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRjb25zdCBkYXRhT2Zmc2V0ID0gb2Zmc2V0ICsgMzAgKyBsb2NhbERpcmVjdG9yeS5maWxlbmFtZUxlbmd0aCArIGxvY2FsRGlyZWN0b3J5LmV4dHJhRmllbGRMZW5ndGg7XG5cdFx0Y29uc3Qgc2l6ZSA9IGNvbXByZXNzZWRTaXplO1xuXHRcdGNvbnN0IHJlYWRhYmxlID0gcmVhZGVyLnJlYWRhYmxlO1xuXHRcdE9iamVjdC5hc3NpZ24ocmVhZGFibGUsIHtcblx0XHRcdGRpc2tOdW1iZXJTdGFydCxcblx0XHRcdG9mZnNldDogZGF0YU9mZnNldCxcblx0XHRcdHNpemVcblx0XHR9KTtcblx0XHRjb25zdCBzaWduYWwgPSBnZXRPcHRpb25WYWx1ZSh6aXBFbnRyeSwgb3B0aW9ucywgXCJzaWduYWxcIik7XG5cdFx0Y29uc3QgY2hlY2tQYXNzd29yZE9ubHkgPSBnZXRPcHRpb25WYWx1ZSh6aXBFbnRyeSwgb3B0aW9ucywgXCJjaGVja1Bhc3N3b3JkT25seVwiKTtcblx0XHRpZiAoY2hlY2tQYXNzd29yZE9ubHkpIHtcblx0XHRcdHdyaXRlciA9IG5ldyBXcml0YWJsZVN0cmVhbSgpO1xuXHRcdH1cblx0XHR3cml0ZXIgPSBpbml0V3JpdGVyKHdyaXRlcik7XG5cdFx0YXdhaXQgaW5pdFN0cmVhbSh3cml0ZXIsIHVuY29tcHJlc3NlZFNpemUpO1xuXHRcdGNvbnN0IHsgd3JpdGFibGUgfSA9IHdyaXRlcjtcblx0XHRjb25zdCB7IG9uc3RhcnQsIG9ucHJvZ3Jlc3MsIG9uZW5kIH0gPSBvcHRpb25zO1xuXHRcdGNvbnN0IHdvcmtlck9wdGlvbnMgPSB7XG5cdFx0XHRvcHRpb25zOiB7XG5cdFx0XHRcdGNvZGVjVHlwZTogQ09ERUNfSU5GTEFURSxcblx0XHRcdFx0cGFzc3dvcmQsXG5cdFx0XHRcdHppcENyeXB0byxcblx0XHRcdFx0ZW5jcnlwdGlvblN0cmVuZ3RoOiBleHRyYUZpZWxkQUVTICYmIGV4dHJhRmllbGRBRVMuc3RyZW5ndGgsXG5cdFx0XHRcdHNpZ25lZDogZ2V0T3B0aW9uVmFsdWUoemlwRW50cnksIG9wdGlvbnMsIFwiY2hlY2tTaWduYXR1cmVcIiksXG5cdFx0XHRcdHBhc3N3b3JkVmVyaWZpY2F0aW9uOiB6aXBDcnlwdG8gJiYgKGJpdEZsYWcuZGF0YURlc2NyaXB0b3IgPyAoKHJhd0xhc3RNb2REYXRlID4+PiA4KSAmIDB4RkYpIDogKChzaWduYXR1cmUgPj4+IDI0KSAmIDB4RkYpKSxcblx0XHRcdFx0c2lnbmF0dXJlLFxuXHRcdFx0XHRjb21wcmVzc2VkOiBjb21wcmVzc2lvbk1ldGhvZCAhPSAwLFxuXHRcdFx0XHRlbmNyeXB0ZWQsXG5cdFx0XHRcdHVzZVdlYldvcmtlcnM6IGdldE9wdGlvblZhbHVlKHppcEVudHJ5LCBvcHRpb25zLCBcInVzZVdlYldvcmtlcnNcIiksXG5cdFx0XHRcdHVzZUNvbXByZXNzaW9uU3RyZWFtOiBnZXRPcHRpb25WYWx1ZSh6aXBFbnRyeSwgb3B0aW9ucywgXCJ1c2VDb21wcmVzc2lvblN0cmVhbVwiKSxcblx0XHRcdFx0dHJhbnNmZXJTdHJlYW1zOiBnZXRPcHRpb25WYWx1ZSh6aXBFbnRyeSwgb3B0aW9ucywgXCJ0cmFuc2ZlclN0cmVhbXNcIiksXG5cdFx0XHRcdGNoZWNrUGFzc3dvcmRPbmx5XG5cdFx0XHR9LFxuXHRcdFx0Y29uZmlnLFxuXHRcdFx0c3RyZWFtT3B0aW9uczogeyBzaWduYWwsIHNpemUsIG9uc3RhcnQsIG9ucHJvZ3Jlc3MsIG9uZW5kIH1cblx0XHR9O1xuXHRcdGxldCBvdXRwdXRTaXplID0gMDtcblx0XHR0cnkge1xuXHRcdFx0KHsgb3V0cHV0U2l6ZSB9ID0gKGF3YWl0IHJ1bldvcmtlcih7IHJlYWRhYmxlLCB3cml0YWJsZSB9LCB3b3JrZXJPcHRpb25zKSkpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRpZiAoIWNoZWNrUGFzc3dvcmRPbmx5IHx8IGVycm9yLm1lc3NhZ2UgIT0gRVJSX0FCT1JUX0NIRUNLX1BBU1NXT1JEKSB7XG5cdFx0XHRcdHRocm93IGVycm9yO1xuXHRcdFx0fVxuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRjb25zdCBwcmV2ZW50Q2xvc2UgPSBnZXRPcHRpb25WYWx1ZSh6aXBFbnRyeSwgb3B0aW9ucywgXCJwcmV2ZW50Q2xvc2VcIik7XG5cdFx0XHR3cml0YWJsZS5zaXplICs9IG91dHB1dFNpemU7XG5cdFx0XHRpZiAoIXByZXZlbnRDbG9zZSAmJiAhd3JpdGFibGUubG9ja2VkKSB7XG5cdFx0XHRcdGF3YWl0IHdyaXRhYmxlLmdldFdyaXRlcigpLmNsb3NlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjaGVja1Bhc3N3b3JkT25seSA/IHVuZGVmaW5lZCA6IHdyaXRlci5nZXREYXRhID8gd3JpdGVyLmdldERhdGEoKSA6IHdyaXRhYmxlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlYWRDb21tb25IZWFkZXIoZGlyZWN0b3J5LCBkYXRhVmlldywgb2Zmc2V0KSB7XG5cdGNvbnN0IHJhd0JpdEZsYWcgPSBkaXJlY3RvcnkucmF3Qml0RmxhZyA9IGdldFVpbnQxNihkYXRhVmlldywgb2Zmc2V0ICsgMik7XG5cdGNvbnN0IGVuY3J5cHRlZCA9IChyYXdCaXRGbGFnICYgQklURkxBR19FTkNSWVBURUQpID09IEJJVEZMQUdfRU5DUllQVEVEO1xuXHRjb25zdCByYXdMYXN0TW9kRGF0ZSA9IGdldFVpbnQzMihkYXRhVmlldywgb2Zmc2V0ICsgNik7XG5cdE9iamVjdC5hc3NpZ24oZGlyZWN0b3J5LCB7XG5cdFx0ZW5jcnlwdGVkLFxuXHRcdHZlcnNpb246IGdldFVpbnQxNihkYXRhVmlldywgb2Zmc2V0KSxcblx0XHRiaXRGbGFnOiB7XG5cdFx0XHRsZXZlbDogKHJhd0JpdEZsYWcgJiBCSVRGTEFHX0xFVkVMKSA+PiAxLFxuXHRcdFx0ZGF0YURlc2NyaXB0b3I6IChyYXdCaXRGbGFnICYgQklURkxBR19EQVRBX0RFU0NSSVBUT1IpID09IEJJVEZMQUdfREFUQV9ERVNDUklQVE9SLFxuXHRcdFx0bGFuZ3VhZ2VFbmNvZGluZ0ZsYWc6IChyYXdCaXRGbGFnICYgQklURkxBR19MQU5HX0VOQ09ESU5HX0ZMQUcpID09IEJJVEZMQUdfTEFOR19FTkNPRElOR19GTEFHXG5cdFx0fSxcblx0XHRyYXdMYXN0TW9kRGF0ZSxcblx0XHRsYXN0TW9kRGF0ZTogZ2V0RGF0ZShyYXdMYXN0TW9kRGF0ZSksXG5cdFx0ZmlsZW5hbWVMZW5ndGg6IGdldFVpbnQxNihkYXRhVmlldywgb2Zmc2V0ICsgMjIpLFxuXHRcdGV4dHJhRmllbGRMZW5ndGg6IGdldFVpbnQxNihkYXRhVmlldywgb2Zmc2V0ICsgMjQpXG5cdH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZWFkQ29tbW9uRm9vdGVyKGZpbGVFbnRyeSwgZGlyZWN0b3J5LCBkYXRhVmlldywgb2Zmc2V0LCBsb2NhbERpcmVjdG9yeSkge1xuXHRjb25zdCB7IHJhd0V4dHJhRmllbGQgfSA9IGRpcmVjdG9yeTtcblx0Y29uc3QgZXh0cmFGaWVsZCA9IGRpcmVjdG9yeS5leHRyYUZpZWxkID0gbmV3IE1hcCgpO1xuXHRjb25zdCByYXdFeHRyYUZpZWxkVmlldyA9IGdldERhdGFWaWV3KG5ldyBVaW50OEFycmF5KHJhd0V4dHJhRmllbGQpKTtcblx0bGV0IG9mZnNldEV4dHJhRmllbGQgPSAwO1xuXHR0cnkge1xuXHRcdHdoaWxlIChvZmZzZXRFeHRyYUZpZWxkIDwgcmF3RXh0cmFGaWVsZC5sZW5ndGgpIHtcblx0XHRcdGNvbnN0IHR5cGUgPSBnZXRVaW50MTYocmF3RXh0cmFGaWVsZFZpZXcsIG9mZnNldEV4dHJhRmllbGQpO1xuXHRcdFx0Y29uc3Qgc2l6ZSA9IGdldFVpbnQxNihyYXdFeHRyYUZpZWxkVmlldywgb2Zmc2V0RXh0cmFGaWVsZCArIDIpO1xuXHRcdFx0ZXh0cmFGaWVsZC5zZXQodHlwZSwge1xuXHRcdFx0XHR0eXBlLFxuXHRcdFx0XHRkYXRhOiByYXdFeHRyYUZpZWxkLnNsaWNlKG9mZnNldEV4dHJhRmllbGQgKyA0LCBvZmZzZXRFeHRyYUZpZWxkICsgNCArIHNpemUpXG5cdFx0XHR9KTtcblx0XHRcdG9mZnNldEV4dHJhRmllbGQgKz0gNCArIHNpemU7XG5cdFx0fVxuXHR9IGNhdGNoIChfZXJyb3IpIHtcblx0XHQvLyBpZ25vcmVkXG5cdH1cblx0Y29uc3QgY29tcHJlc3Npb25NZXRob2QgPSBnZXRVaW50MTYoZGF0YVZpZXcsIG9mZnNldCArIDQpO1xuXHRPYmplY3QuYXNzaWduKGRpcmVjdG9yeSwge1xuXHRcdHNpZ25hdHVyZTogZ2V0VWludDMyKGRhdGFWaWV3LCBvZmZzZXQgKyAxMCksXG5cdFx0dW5jb21wcmVzc2VkU2l6ZTogZ2V0VWludDMyKGRhdGFWaWV3LCBvZmZzZXQgKyAxOCksXG5cdFx0Y29tcHJlc3NlZFNpemU6IGdldFVpbnQzMihkYXRhVmlldywgb2Zmc2V0ICsgMTQpXG5cdH0pO1xuXHRjb25zdCBleHRyYUZpZWxkWmlwNjQgPSBleHRyYUZpZWxkLmdldChFWFRSQUZJRUxEX1RZUEVfWklQNjQpO1xuXHRpZiAoZXh0cmFGaWVsZFppcDY0KSB7XG5cdFx0cmVhZEV4dHJhRmllbGRaaXA2NChleHRyYUZpZWxkWmlwNjQsIGRpcmVjdG9yeSk7XG5cdFx0ZGlyZWN0b3J5LmV4dHJhRmllbGRaaXA2NCA9IGV4dHJhRmllbGRaaXA2NDtcblx0fVxuXHRjb25zdCBleHRyYUZpZWxkVW5pY29kZVBhdGggPSBleHRyYUZpZWxkLmdldChFWFRSQUZJRUxEX1RZUEVfVU5JQ09ERV9QQVRIKTtcblx0aWYgKGV4dHJhRmllbGRVbmljb2RlUGF0aCkge1xuXHRcdGF3YWl0IHJlYWRFeHRyYUZpZWxkVW5pY29kZShleHRyYUZpZWxkVW5pY29kZVBhdGgsIFBST1BFUlRZX05BTUVfRklMRU5BTUUsIFBST1BFUlRZX05BTUVfUkFXX0ZJTEVOQU1FLCBkaXJlY3RvcnksIGZpbGVFbnRyeSk7XG5cdFx0ZGlyZWN0b3J5LmV4dHJhRmllbGRVbmljb2RlUGF0aCA9IGV4dHJhRmllbGRVbmljb2RlUGF0aDtcblx0fVxuXHRjb25zdCBleHRyYUZpZWxkVW5pY29kZUNvbW1lbnQgPSBleHRyYUZpZWxkLmdldChFWFRSQUZJRUxEX1RZUEVfVU5JQ09ERV9DT01NRU5UKTtcblx0aWYgKGV4dHJhRmllbGRVbmljb2RlQ29tbWVudCkge1xuXHRcdGF3YWl0IHJlYWRFeHRyYUZpZWxkVW5pY29kZShleHRyYUZpZWxkVW5pY29kZUNvbW1lbnQsIFBST1BFUlRZX05BTUVfQ09NTUVOVCwgUFJPUEVSVFlfTkFNRV9SQVdfQ09NTUVOVCwgZGlyZWN0b3J5LCBmaWxlRW50cnkpO1xuXHRcdGRpcmVjdG9yeS5leHRyYUZpZWxkVW5pY29kZUNvbW1lbnQgPSBleHRyYUZpZWxkVW5pY29kZUNvbW1lbnQ7XG5cdH1cblx0Y29uc3QgZXh0cmFGaWVsZEFFUyA9IGV4dHJhRmllbGQuZ2V0KEVYVFJBRklFTERfVFlQRV9BRVMpO1xuXHRpZiAoZXh0cmFGaWVsZEFFUykge1xuXHRcdHJlYWRFeHRyYUZpZWxkQUVTKGV4dHJhRmllbGRBRVMsIGRpcmVjdG9yeSwgY29tcHJlc3Npb25NZXRob2QpO1xuXHRcdGRpcmVjdG9yeS5leHRyYUZpZWxkQUVTID0gZXh0cmFGaWVsZEFFUztcblx0fSBlbHNlIHtcblx0XHRkaXJlY3RvcnkuY29tcHJlc3Npb25NZXRob2QgPSBjb21wcmVzc2lvbk1ldGhvZDtcblx0fVxuXHRjb25zdCBleHRyYUZpZWxkTlRGUyA9IGV4dHJhRmllbGQuZ2V0KEVYVFJBRklFTERfVFlQRV9OVEZTKTtcblx0aWYgKGV4dHJhRmllbGROVEZTKSB7XG5cdFx0cmVhZEV4dHJhRmllbGROVEZTKGV4dHJhRmllbGROVEZTLCBkaXJlY3RvcnkpO1xuXHRcdGRpcmVjdG9yeS5leHRyYUZpZWxkTlRGUyA9IGV4dHJhRmllbGROVEZTO1xuXHR9XG5cdGNvbnN0IGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcCA9IGV4dHJhRmllbGQuZ2V0KEVYVFJBRklFTERfVFlQRV9FWFRFTkRFRF9USU1FU1RBTVApO1xuXHRpZiAoZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wKSB7XG5cdFx0cmVhZEV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcChleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXAsIGRpcmVjdG9yeSwgbG9jYWxEaXJlY3RvcnkpO1xuXHRcdGRpcmVjdG9yeS5leHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXAgPSBleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXA7XG5cdH1cblx0Y29uc3QgZXh0cmFGaWVsZFVTRFogPSBleHRyYUZpZWxkLmdldChFWFRSQUZJRUxEX1RZUEVfVVNEWik7XG5cdGlmIChleHRyYUZpZWxkVVNEWikge1xuXHRcdGRpcmVjdG9yeS5leHRyYUZpZWxkVVNEWiA9IGV4dHJhRmllbGRVU0RaO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlYWRFeHRyYUZpZWxkWmlwNjQoZXh0cmFGaWVsZFppcDY0LCBkaXJlY3RvcnkpIHtcblx0ZGlyZWN0b3J5LnppcDY0ID0gdHJ1ZTtcblx0Y29uc3QgZXh0cmFGaWVsZFZpZXcgPSBnZXREYXRhVmlldyhleHRyYUZpZWxkWmlwNjQuZGF0YSk7XG5cdGNvbnN0IG1pc3NpbmdQcm9wZXJ0aWVzID0gWklQNjRfUFJPUEVSVElFUy5maWx0ZXIoKFtwcm9wZXJ0eU5hbWUsIG1heF0pID0+IGRpcmVjdG9yeVtwcm9wZXJ0eU5hbWVdID09IG1heCk7XG5cdGZvciAobGV0IGluZGV4TWlzc2luZ1Byb3BlcnR5ID0gMCwgb2Zmc2V0ID0gMDsgaW5kZXhNaXNzaW5nUHJvcGVydHkgPCBtaXNzaW5nUHJvcGVydGllcy5sZW5ndGg7IGluZGV4TWlzc2luZ1Byb3BlcnR5KyspIHtcblx0XHRjb25zdCBbcHJvcGVydHlOYW1lLCBtYXhdID0gbWlzc2luZ1Byb3BlcnRpZXNbaW5kZXhNaXNzaW5nUHJvcGVydHldO1xuXHRcdGlmIChkaXJlY3RvcnlbcHJvcGVydHlOYW1lXSA9PSBtYXgpIHtcblx0XHRcdGNvbnN0IGV4dHJhY3Rpb24gPSBaSVA2NF9FWFRSQUNUSU9OW21heF07XG5cdFx0XHRkaXJlY3RvcnlbcHJvcGVydHlOYW1lXSA9IGV4dHJhRmllbGRaaXA2NFtwcm9wZXJ0eU5hbWVdID0gZXh0cmFjdGlvbi5nZXRWYWx1ZShleHRyYUZpZWxkVmlldywgb2Zmc2V0KTtcblx0XHRcdG9mZnNldCArPSBleHRyYWN0aW9uLmJ5dGVzO1xuXHRcdH0gZWxzZSBpZiAoZXh0cmFGaWVsZFppcDY0W3Byb3BlcnR5TmFtZV0pIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfRVhUUkFGSUVMRF9aSVA2NF9OT1RfRk9VTkQpO1xuXHRcdH1cblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiByZWFkRXh0cmFGaWVsZFVuaWNvZGUoZXh0cmFGaWVsZFVuaWNvZGUsIHByb3BlcnR5TmFtZSwgcmF3UHJvcGVydHlOYW1lLCBkaXJlY3RvcnksIGZpbGVFbnRyeSkge1xuXHRjb25zdCBleHRyYUZpZWxkVmlldyA9IGdldERhdGFWaWV3KGV4dHJhRmllbGRVbmljb2RlLmRhdGEpO1xuXHRjb25zdCBjcmMzMiA9IG5ldyBDcmMzMigpO1xuXHRjcmMzMi5hcHBlbmQoZmlsZUVudHJ5W3Jhd1Byb3BlcnR5TmFtZV0pO1xuXHRjb25zdCBkYXRhVmlld1NpZ25hdHVyZSA9IGdldERhdGFWaWV3KG5ldyBVaW50OEFycmF5KDQpKTtcblx0ZGF0YVZpZXdTaWduYXR1cmUuc2V0VWludDMyKDAsIGNyYzMyLmdldCgpLCB0cnVlKTtcblx0Y29uc3Qgc2lnbmF0dXJlID0gZ2V0VWludDMyKGV4dHJhRmllbGRWaWV3LCAxKTtcblx0T2JqZWN0LmFzc2lnbihleHRyYUZpZWxkVW5pY29kZSwge1xuXHRcdHZlcnNpb246IGdldFVpbnQ4KGV4dHJhRmllbGRWaWV3LCAwKSxcblx0XHRbcHJvcGVydHlOYW1lXTogZGVjb2RlVGV4dChleHRyYUZpZWxkVW5pY29kZS5kYXRhLnN1YmFycmF5KDUpKSxcblx0XHR2YWxpZDogIWZpbGVFbnRyeS5iaXRGbGFnLmxhbmd1YWdlRW5jb2RpbmdGbGFnICYmIHNpZ25hdHVyZSA9PSBnZXRVaW50MzIoZGF0YVZpZXdTaWduYXR1cmUsIDApXG5cdH0pO1xuXHRpZiAoZXh0cmFGaWVsZFVuaWNvZGUudmFsaWQpIHtcblx0XHRkaXJlY3RvcnlbcHJvcGVydHlOYW1lXSA9IGV4dHJhRmllbGRVbmljb2RlW3Byb3BlcnR5TmFtZV07XG5cdFx0ZGlyZWN0b3J5W3Byb3BlcnR5TmFtZSArIFwiVVRGOFwiXSA9IHRydWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVhZEV4dHJhRmllbGRBRVMoZXh0cmFGaWVsZEFFUywgZGlyZWN0b3J5LCBjb21wcmVzc2lvbk1ldGhvZCkge1xuXHRjb25zdCBleHRyYUZpZWxkVmlldyA9IGdldERhdGFWaWV3KGV4dHJhRmllbGRBRVMuZGF0YSk7XG5cdGNvbnN0IHN0cmVuZ3RoID0gZ2V0VWludDgoZXh0cmFGaWVsZFZpZXcsIDQpO1xuXHRPYmplY3QuYXNzaWduKGV4dHJhRmllbGRBRVMsIHtcblx0XHR2ZW5kb3JWZXJzaW9uOiBnZXRVaW50OChleHRyYUZpZWxkVmlldywgMCksXG5cdFx0dmVuZG9ySWQ6IGdldFVpbnQ4KGV4dHJhRmllbGRWaWV3LCAyKSxcblx0XHRzdHJlbmd0aCxcblx0XHRvcmlnaW5hbENvbXByZXNzaW9uTWV0aG9kOiBjb21wcmVzc2lvbk1ldGhvZCxcblx0XHRjb21wcmVzc2lvbk1ldGhvZDogZ2V0VWludDE2KGV4dHJhRmllbGRWaWV3LCA1KVxuXHR9KTtcblx0ZGlyZWN0b3J5LmNvbXByZXNzaW9uTWV0aG9kID0gZXh0cmFGaWVsZEFFUy5jb21wcmVzc2lvbk1ldGhvZDtcbn1cblxuZnVuY3Rpb24gcmVhZEV4dHJhRmllbGROVEZTKGV4dHJhRmllbGROVEZTLCBkaXJlY3RvcnkpIHtcblx0Y29uc3QgZXh0cmFGaWVsZFZpZXcgPSBnZXREYXRhVmlldyhleHRyYUZpZWxkTlRGUy5kYXRhKTtcblx0bGV0IG9mZnNldEV4dHJhRmllbGQgPSA0O1xuXHRsZXQgdGFnMURhdGE7XG5cdHRyeSB7XG5cdFx0d2hpbGUgKG9mZnNldEV4dHJhRmllbGQgPCBleHRyYUZpZWxkTlRGUy5kYXRhLmxlbmd0aCAmJiAhdGFnMURhdGEpIHtcblx0XHRcdGNvbnN0IHRhZ1ZhbHVlID0gZ2V0VWludDE2KGV4dHJhRmllbGRWaWV3LCBvZmZzZXRFeHRyYUZpZWxkKTtcblx0XHRcdGNvbnN0IGF0dHJpYnV0ZVNpemUgPSBnZXRVaW50MTYoZXh0cmFGaWVsZFZpZXcsIG9mZnNldEV4dHJhRmllbGQgKyAyKTtcblx0XHRcdGlmICh0YWdWYWx1ZSA9PSBFWFRSQUZJRUxEX1RZUEVfTlRGU19UQUcxKSB7XG5cdFx0XHRcdHRhZzFEYXRhID0gZXh0cmFGaWVsZE5URlMuZGF0YS5zbGljZShvZmZzZXRFeHRyYUZpZWxkICsgNCwgb2Zmc2V0RXh0cmFGaWVsZCArIDQgKyBhdHRyaWJ1dGVTaXplKTtcblx0XHRcdH1cblx0XHRcdG9mZnNldEV4dHJhRmllbGQgKz0gNCArIGF0dHJpYnV0ZVNpemU7XG5cdFx0fVxuXHR9IGNhdGNoIChfZXJyb3IpIHtcblx0XHQvLyBpZ25vcmVkXG5cdH1cblx0dHJ5IHtcblx0XHRpZiAodGFnMURhdGEgJiYgdGFnMURhdGEubGVuZ3RoID09IDI0KSB7XG5cdFx0XHRjb25zdCB0YWcxVmlldyA9IGdldERhdGFWaWV3KHRhZzFEYXRhKTtcblx0XHRcdGNvbnN0IHJhd0xhc3RNb2REYXRlID0gdGFnMVZpZXcuZ2V0QmlnVWludDY0KDAsIHRydWUpO1xuXHRcdFx0Y29uc3QgcmF3TGFzdEFjY2Vzc0RhdGUgPSB0YWcxVmlldy5nZXRCaWdVaW50NjQoOCwgdHJ1ZSk7XG5cdFx0XHRjb25zdCByYXdDcmVhdGlvbkRhdGUgPSB0YWcxVmlldy5nZXRCaWdVaW50NjQoMTYsIHRydWUpO1xuXHRcdFx0T2JqZWN0LmFzc2lnbihleHRyYUZpZWxkTlRGUywge1xuXHRcdFx0XHRyYXdMYXN0TW9kRGF0ZSxcblx0XHRcdFx0cmF3TGFzdEFjY2Vzc0RhdGUsXG5cdFx0XHRcdHJhd0NyZWF0aW9uRGF0ZVxuXHRcdFx0fSk7XG5cdFx0XHRjb25zdCBsYXN0TW9kRGF0ZSA9IGdldERhdGVOVEZTKHJhd0xhc3RNb2REYXRlKTtcblx0XHRcdGNvbnN0IGxhc3RBY2Nlc3NEYXRlID0gZ2V0RGF0ZU5URlMocmF3TGFzdEFjY2Vzc0RhdGUpO1xuXHRcdFx0Y29uc3QgY3JlYXRpb25EYXRlID0gZ2V0RGF0ZU5URlMocmF3Q3JlYXRpb25EYXRlKTtcblx0XHRcdGNvbnN0IGV4dHJhRmllbGREYXRhID0geyBsYXN0TW9kRGF0ZSwgbGFzdEFjY2Vzc0RhdGUsIGNyZWF0aW9uRGF0ZSB9O1xuXHRcdFx0T2JqZWN0LmFzc2lnbihleHRyYUZpZWxkTlRGUywgZXh0cmFGaWVsZERhdGEpO1xuXHRcdFx0T2JqZWN0LmFzc2lnbihkaXJlY3RvcnksIGV4dHJhRmllbGREYXRhKTtcblx0XHR9XG5cdH0gY2F0Y2ggKF9lcnJvcikge1xuXHRcdC8vIGlnbm9yZWRcblx0fVxufVxuXG5mdW5jdGlvbiByZWFkRXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wKGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcCwgZGlyZWN0b3J5LCBsb2NhbERpcmVjdG9yeSkge1xuXHRjb25zdCBleHRyYUZpZWxkVmlldyA9IGdldERhdGFWaWV3KGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcC5kYXRhKTtcblx0Y29uc3QgZmxhZ3MgPSBnZXRVaW50OChleHRyYUZpZWxkVmlldywgMCk7XG5cdGNvbnN0IHRpbWVQcm9wZXJ0aWVzID0gW107XG5cdGNvbnN0IHRpbWVSYXdQcm9wZXJ0aWVzID0gW107XG5cdGlmIChsb2NhbERpcmVjdG9yeSkge1xuXHRcdGlmICgoZmxhZ3MgJiAweDEpID09IDB4MSkge1xuXHRcdFx0dGltZVByb3BlcnRpZXMucHVzaChQUk9QRVJUWV9OQU1FX0xBU1RfTU9ESUZJQ0FUSU9OX0RBVEUpO1xuXHRcdFx0dGltZVJhd1Byb3BlcnRpZXMucHVzaChQUk9QRVJUWV9OQU1FX1JBV19MQVNUX01PRElGSUNBVElPTl9EQVRFKTtcblx0XHR9XG5cdFx0aWYgKChmbGFncyAmIDB4MikgPT0gMHgyKSB7XG5cdFx0XHR0aW1lUHJvcGVydGllcy5wdXNoKFBST1BFUlRZX05BTUVfTEFTVF9BQ0NFU1NfREFURSk7XG5cdFx0XHR0aW1lUmF3UHJvcGVydGllcy5wdXNoKFBST1BFUlRZX05BTUVfUkFXX0xBU1RfQUNDRVNTX0RBVEUpO1xuXHRcdH1cblx0XHRpZiAoKGZsYWdzICYgMHg0KSA9PSAweDQpIHtcblx0XHRcdHRpbWVQcm9wZXJ0aWVzLnB1c2goUFJPUEVSVFlfTkFNRV9DUkVBVElPTl9EQVRFKTtcblx0XHRcdHRpbWVSYXdQcm9wZXJ0aWVzLnB1c2goUFJPUEVSVFlfTkFNRV9SQVdfQ1JFQVRJT05fREFURSk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcC5kYXRhLmxlbmd0aCA+PSA1KSB7XG5cdFx0dGltZVByb3BlcnRpZXMucHVzaChQUk9QRVJUWV9OQU1FX0xBU1RfTU9ESUZJQ0FUSU9OX0RBVEUpO1xuXHRcdHRpbWVSYXdQcm9wZXJ0aWVzLnB1c2goUFJPUEVSVFlfTkFNRV9SQVdfTEFTVF9NT0RJRklDQVRJT05fREFURSk7XG5cdH1cblx0bGV0IG9mZnNldCA9IDE7XG5cdHRpbWVQcm9wZXJ0aWVzLmZvckVhY2goKHByb3BlcnR5TmFtZSwgaW5kZXhQcm9wZXJ0eSkgPT4ge1xuXHRcdGlmIChleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXAuZGF0YS5sZW5ndGggPj0gb2Zmc2V0ICsgNCkge1xuXHRcdFx0Y29uc3QgdGltZSA9IGdldFVpbnQzMihleHRyYUZpZWxkVmlldywgb2Zmc2V0KTtcblx0XHRcdGRpcmVjdG9yeVtwcm9wZXJ0eU5hbWVdID0gZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wW3Byb3BlcnR5TmFtZV0gPSBuZXcgRGF0ZSh0aW1lICogMTAwMCk7XG5cdFx0XHRjb25zdCByYXdQcm9wZXJ0eU5hbWUgPSB0aW1lUmF3UHJvcGVydGllc1tpbmRleFByb3BlcnR5XTtcblx0XHRcdGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcFtyYXdQcm9wZXJ0eU5hbWVdID0gdGltZTtcblx0XHR9XG5cdFx0b2Zmc2V0ICs9IDQ7XG5cdH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZWVrU2lnbmF0dXJlKHJlYWRlciwgc2lnbmF0dXJlLCBzdGFydE9mZnNldCwgbWluaW11bUJ5dGVzLCBtYXhpbXVtTGVuZ3RoKSB7XG5cdGNvbnN0IHNpZ25hdHVyZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG5cdGNvbnN0IHNpZ25hdHVyZVZpZXcgPSBnZXREYXRhVmlldyhzaWduYXR1cmVBcnJheSk7XG5cdHNldFVpbnQzMihzaWduYXR1cmVWaWV3LCAwLCBzaWduYXR1cmUpO1xuXHRjb25zdCBtYXhpbXVtQnl0ZXMgPSBtaW5pbXVtQnl0ZXMgKyBtYXhpbXVtTGVuZ3RoO1xuXHRyZXR1cm4gKGF3YWl0IHNlZWsobWluaW11bUJ5dGVzKSkgfHwgYXdhaXQgc2VlayhNYXRoLm1pbihtYXhpbXVtQnl0ZXMsIHN0YXJ0T2Zmc2V0KSk7XG5cblx0YXN5bmMgZnVuY3Rpb24gc2VlayhsZW5ndGgpIHtcblx0XHRjb25zdCBvZmZzZXQgPSBzdGFydE9mZnNldCAtIGxlbmd0aDtcblx0XHRjb25zdCBieXRlcyA9IGF3YWl0IHJlYWRVaW50OEFycmF5KHJlYWRlciwgb2Zmc2V0LCBsZW5ndGgpO1xuXHRcdGZvciAobGV0IGluZGV4Qnl0ZSA9IGJ5dGVzLmxlbmd0aCAtIG1pbmltdW1CeXRlczsgaW5kZXhCeXRlID49IDA7IGluZGV4Qnl0ZS0tKSB7XG5cdFx0XHRpZiAoYnl0ZXNbaW5kZXhCeXRlXSA9PSBzaWduYXR1cmVBcnJheVswXSAmJiBieXRlc1tpbmRleEJ5dGUgKyAxXSA9PSBzaWduYXR1cmVBcnJheVsxXSAmJlxuXHRcdFx0XHRieXRlc1tpbmRleEJ5dGUgKyAyXSA9PSBzaWduYXR1cmVBcnJheVsyXSAmJiBieXRlc1tpbmRleEJ5dGUgKyAzXSA9PSBzaWduYXR1cmVBcnJheVszXSkge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG9mZnNldDogb2Zmc2V0ICsgaW5kZXhCeXRlLFxuXHRcdFx0XHRcdGJ1ZmZlcjogYnl0ZXMuc2xpY2UoaW5kZXhCeXRlLCBpbmRleEJ5dGUgKyBtaW5pbXVtQnl0ZXMpLmJ1ZmZlclxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBnZXRPcHRpb25WYWx1ZSh6aXBSZWFkZXIsIG9wdGlvbnMsIG5hbWUpIHtcblx0cmV0dXJuIG9wdGlvbnNbbmFtZV0gPT09IFVOREVGSU5FRF9WQUxVRSA/IHppcFJlYWRlci5vcHRpb25zW25hbWVdIDogb3B0aW9uc1tuYW1lXTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0ZSh0aW1lUmF3KSB7XG5cdGNvbnN0IGRhdGUgPSAodGltZVJhdyAmIDB4ZmZmZjAwMDApID4+IDE2LCB0aW1lID0gdGltZVJhdyAmIDB4MDAwMGZmZmY7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKDE5ODAgKyAoKGRhdGUgJiAweEZFMDApID4+IDkpLCAoKGRhdGUgJiAweDAxRTApID4+IDUpIC0gMSwgZGF0ZSAmIDB4MDAxRiwgKHRpbWUgJiAweEY4MDApID4+IDExLCAodGltZSAmIDB4MDdFMCkgPj4gNSwgKHRpbWUgJiAweDAwMUYpICogMiwgMCk7XG5cdH0gY2F0Y2ggKF9lcnJvcikge1xuXHRcdC8vIGlnbm9yZWRcblx0fVxufVxuXG5mdW5jdGlvbiBnZXREYXRlTlRGUyh0aW1lUmF3KSB7XG5cdHJldHVybiBuZXcgRGF0ZSgoTnVtYmVyKCh0aW1lUmF3IC8gQmlnSW50KDEwMDAwKSkgLSBCaWdJbnQoMTE2NDQ0NzM2MDAwMDApKSkpO1xufVxuXG5mdW5jdGlvbiBnZXRVaW50OCh2aWV3LCBvZmZzZXQpIHtcblx0cmV0dXJuIHZpZXcuZ2V0VWludDgob2Zmc2V0KTtcbn1cblxuZnVuY3Rpb24gZ2V0VWludDE2KHZpZXcsIG9mZnNldCkge1xuXHRyZXR1cm4gdmlldy5nZXRVaW50MTYob2Zmc2V0LCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0VWludDMyKHZpZXcsIG9mZnNldCkge1xuXHRyZXR1cm4gdmlldy5nZXRVaW50MzIob2Zmc2V0LCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0QmlnVWludDY0KHZpZXcsIG9mZnNldCkge1xuXHRyZXR1cm4gTnVtYmVyKHZpZXcuZ2V0QmlnVWludDY0KG9mZnNldCwgdHJ1ZSkpO1xufVxuXG5mdW5jdGlvbiBzZXRVaW50MzIodmlldywgb2Zmc2V0LCB2YWx1ZSkge1xuXHR2aWV3LnNldFVpbnQzMihvZmZzZXQsIHZhbHVlLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YVZpZXcoYXJyYXkpIHtcblx0cmV0dXJuIG5ldyBEYXRhVmlldyhhcnJheS5idWZmZXIpO1xufSIsIi8qXG4gQ29weXJpZ2h0IChjKSAyMDIyIEdpbGRhcyBMb3JtZWF1LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiBcbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuIDMuIFRoZSBuYW1lcyBvZiB0aGUgYXV0aG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEICcnQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXG4gSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKQ1JBRlQsXG4gSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsXG4gT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuaW1wb3J0IHsgY29uZmlndXJlIH0gZnJvbSBcIi4vY29yZS9jb25maWd1cmF0aW9uLmpzXCI7XG5pbXBvcnQgeyBjb25maWd1cmVXZWJXb3JrZXIgfSBmcm9tIFwiLi96LXdvcmtlci1pbmxpbmUuanNcIjtcbmltcG9ydCB7IGdldE1pbWVUeXBlIH0gZnJvbSBcIi4vY29yZS91dGlsL2RlZmF1bHQtbWltZS10eXBlLmpzXCI7XG5pbXBvcnQgeyBpbml0U2hpbUFzeW5jQ29kZWMgfSBmcm9tIFwiLi9jb3JlL3V0aWwvc3RyZWFtLWNvZGVjLXNoaW0uanNcIjtcbmltcG9ydCB7IHRlcm1pbmF0ZVdvcmtlcnMgfSBmcm9tIFwiLi9jb3JlL2NvZGVjLXBvb2wuanNcIjtcblxubGV0IGJhc2VVUkw7XG50cnkge1xuXHRiYXNlVVJMID0gaW1wb3J0Lm1ldGEudXJsO1xufSBjYXRjaCAoX2Vycm9yKSB7XG5cdC8vIGlnbm9yZWRcbn1cbmNvbmZpZ3VyZSh7IGJhc2VVUkwgfSk7XG5jb25maWd1cmVXZWJXb3JrZXIoY29uZmlndXJlKTtcblxuZXhwb3J0ICogZnJvbSBcIi4vY29yZS9pby5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29yZS96aXAtcmVhZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb3JlL3ppcC13cml0ZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvcmUvemlwLWZzLWNvcmUuanNcIjtcbmV4cG9ydCB7XG5cdGNvbmZpZ3VyZSxcblx0Z2V0TWltZVR5cGUsXG5cdGluaXRTaGltQXN5bmNDb2RlYyxcblx0dGVybWluYXRlV29ya2Vyc1xufTsiLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbi8qIGdsb2JhbCBCaWdJbnQgKi9cbi8vIGRlbm8tbGludC1pZ25vcmUtZmlsZSBuby10aGlzLWFsaWFzXG5cbmltcG9ydCB7XG5cdE1BWF8zMl9CSVRTLFxuXHRNQVhfMTZfQklUUyxcblx0Q09NUFJFU1NJT05fTUVUSE9EX0RFRkxBVEUsXG5cdENPTVBSRVNTSU9OX01FVEhPRF9TVE9SRSxcblx0Q09NUFJFU1NJT05fTUVUSE9EX0FFUyxcblx0U1BMSVRfWklQX0ZJTEVfU0lHTkFUVVJFLFxuXHRMT0NBTF9GSUxFX0hFQURFUl9TSUdOQVRVUkUsXG5cdERBVEFfREVTQ1JJUFRPUl9SRUNPUkRfU0lHTkFUVVJFLFxuXHRDRU5UUkFMX0ZJTEVfSEVBREVSX1NJR05BVFVSRSxcblx0RU5EX09GX0NFTlRSQUxfRElSX1NJR05BVFVSRSxcblx0WklQNjRfRU5EX09GX0NFTlRSQUxfRElSX0xPQ0FUT1JfU0lHTkFUVVJFLFxuXHRaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfU0lHTkFUVVJFLFxuXHRFWFRSQUZJRUxEX1RZUEVfQUVTLFxuXHRFWFRSQUZJRUxEX1RZUEVfWklQNjQsXG5cdEVYVFJBRklFTERfVFlQRV9FWFRFTkRFRF9USU1FU1RBTVAsXG5cdEVYVFJBRklFTERfVFlQRV9OVEZTLFxuXHRFWFRSQUZJRUxEX1RZUEVfTlRGU19UQUcxLFxuXHRFWFRSQUZJRUxEX1RZUEVfVVNEWixcblx0RU5EX09GX0NFTlRSQUxfRElSX0xFTkdUSCxcblx0WklQNjRfRU5EX09GX0NFTlRSQUxfRElSX0xFTkdUSCxcblx0WklQNjRfRU5EX09GX0NFTlRSQUxfRElSX0xPQ0FUT1JfTEVOR1RILFxuXHRaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfVE9UQUxfTEVOR1RILFxuXHRCSVRGTEFHX0VOQ1JZUFRFRCxcblx0QklURkxBR19EQVRBX0RFU0NSSVBUT1IsXG5cdEJJVEZMQUdfTEFOR19FTkNPRElOR19GTEFHLFxuXHRGSUxFX0FUVFJfTVNET1NfRElSX01BU0ssXG5cdFZFUlNJT05fREVGTEFURSxcblx0VkVSU0lPTl9aSVA2NCxcblx0VkVSU0lPTl9BRVMsXG5cdERJUkVDVE9SWV9TSUdOQVRVUkUsXG5cdE1JTl9EQVRFLFxuXHRNQVhfREFURSxcblx0VU5ERUZJTkVEX1ZBTFVFXG59IGZyb20gXCIuL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHtcblx0Z2V0Q29uZmlndXJhdGlvbixcblx0Z2V0Q2h1bmtTaXplXG59IGZyb20gXCIuL2NvbmZpZ3VyYXRpb24uanNcIjtcbmltcG9ydCB7XG5cdENPREVDX0RFRkxBVEUsXG5cdHJ1bldvcmtlclxufSBmcm9tIFwiLi9jb2RlYy1wb29sLmpzXCI7XG5pbXBvcnQge1xuXHRpbml0U3RyZWFtLFxuXHRpbml0UmVhZGVyLFxuXHRpbml0V3JpdGVyLFxuXHRCbG9iV3JpdGVyLFxuXHRTcGxpdERhdGFXcml0ZXJcbn0gZnJvbSBcIi4vaW8uanNcIjtcbmltcG9ydCB7IGVuY29kZVRleHQgfSBmcm9tIFwiLi91dGlsL2VuY29kZS10ZXh0LmpzXCI7XG5pbXBvcnQge1xuXHRQUk9QRVJUWV9OQU1FX0xBU1RfTU9ESUZJQ0FUSU9OX0RBVEUsXG5cdFBST1BFUlRZX05BTUVfTEFTVF9BQ0NFU1NfREFURSxcblx0UFJPUEVSVFlfTkFNRV9DUkVBVElPTl9EQVRFLFxuXHRQUk9QRVJUWV9OQU1FX0lOVEVSTkFMX0ZJTEVfQVRUUklCVVRFLFxuXHRQUk9QRVJUWV9OQU1FX0VYVEVSTkFMX0ZJTEVfQVRUUklCVVRFLFxuXHRQUk9QRVJUWV9OQU1FX01TX0RPU19DT01QQVRJQkxFLFxuXHRQUk9QRVJUWV9OQU1FX1pJUDY0LFxuXHRFbnRyeVxufSBmcm9tIFwiLi96aXAtZW50cnkuanNcIjtcblxuY29uc3QgRVJSX0RVUExJQ0FURURfTkFNRSA9IFwiRmlsZSBhbHJlYWR5IGV4aXN0c1wiO1xuY29uc3QgRVJSX0lOVkFMSURfQ09NTUVOVCA9IFwiWmlwIGZpbGUgY29tbWVudCBleGNlZWRzIDY0S0JcIjtcbmNvbnN0IEVSUl9JTlZBTElEX0VOVFJZX0NPTU1FTlQgPSBcIkZpbGUgZW50cnkgY29tbWVudCBleGNlZWRzIDY0S0JcIjtcbmNvbnN0IEVSUl9JTlZBTElEX0VOVFJZX05BTUUgPSBcIkZpbGUgZW50cnkgbmFtZSBleGNlZWRzIDY0S0JcIjtcbmNvbnN0IEVSUl9JTlZBTElEX1ZFUlNJT04gPSBcIlZlcnNpb24gZXhjZWVkcyA2NTUzNVwiO1xuY29uc3QgRVJSX0lOVkFMSURfRU5DUllQVElPTl9TVFJFTkdUSCA9IFwiVGhlIHN0cmVuZ3RoIG11c3QgZXF1YWwgMSwgMiwgb3IgM1wiO1xuY29uc3QgRVJSX0lOVkFMSURfRVhUUkFGSUVMRF9UWVBFID0gXCJFeHRyYSBmaWVsZCB0eXBlIGV4Y2VlZHMgNjU1MzVcIjtcbmNvbnN0IEVSUl9JTlZBTElEX0VYVFJBRklFTERfREFUQSA9IFwiRXh0cmEgZmllbGQgZGF0YSBleGNlZWRzIDY0S0JcIjtcbmNvbnN0IEVSUl9VTlNVUFBPUlRFRF9GT1JNQVQgPSBcIlppcDY0IGlzIG5vdCBzdXBwb3J0ZWQgKG1ha2Ugc3VyZSAna2VlcE9yZGVyJyBpcyBzZXQgdG8gJ3RydWUnKVwiO1xuXG5jb25zdCBFWFRSQUZJRUxEX0RBVEFfQUVTID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDcsIDB4MDAsIDB4MDIsIDB4MDAsIDB4NDEsIDB4NDUsIDB4MDMsIDB4MDAsIDB4MDBdKTtcblxubGV0IHdvcmtlcnMgPSAwO1xuY29uc3QgcGVuZGluZ0VudHJpZXMgPSBbXTtcblxuY2xhc3MgWmlwV3JpdGVyIHtcblxuXHRjb25zdHJ1Y3Rvcih3cml0ZXIsIG9wdGlvbnMgPSB7fSkge1xuXHRcdHdyaXRlciA9IGluaXRXcml0ZXIod3JpdGVyKTtcblx0XHRPYmplY3QuYXNzaWduKHRoaXMsIHtcblx0XHRcdHdyaXRlcixcblx0XHRcdGFkZFNwbGl0WmlwU2lnbmF0dXJlOiB3cml0ZXIgaW5zdGFuY2VvZiBTcGxpdERhdGFXcml0ZXIsXG5cdFx0XHRvcHRpb25zLFxuXHRcdFx0Y29uZmlnOiBnZXRDb25maWd1cmF0aW9uKCksXG5cdFx0XHRmaWxlczogbmV3IE1hcCgpLFxuXHRcdFx0ZmlsZW5hbWVzOiBuZXcgU2V0KCksXG5cdFx0XHRvZmZzZXQ6IHdyaXRlci53cml0YWJsZS5zaXplLFxuXHRcdFx0cGVuZGluZ0VudHJpZXNTaXplOiAwLFxuXHRcdFx0cGVuZGluZ0FkZEZpbGVDYWxsczogbmV3IFNldCgpLFxuXHRcdFx0YnVmZmVyZWRXcml0ZXM6IDBcblx0XHR9KTtcblx0fVxuXG5cdGFzeW5jIGFkZChuYW1lID0gXCJcIiwgcmVhZGVyLCBvcHRpb25zID0ge30pIHtcblx0XHRjb25zdCB6aXBXcml0ZXIgPSB0aGlzO1xuXHRcdGNvbnN0IHtcblx0XHRcdHBlbmRpbmdBZGRGaWxlQ2FsbHMsXG5cdFx0XHRjb25maWdcblx0XHR9ID0gemlwV3JpdGVyO1xuXHRcdGlmICh3b3JrZXJzIDwgY29uZmlnLm1heFdvcmtlcnMpIHtcblx0XHRcdHdvcmtlcnMrKztcblx0XHR9IGVsc2Uge1xuXHRcdFx0YXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBwZW5kaW5nRW50cmllcy5wdXNoKHJlc29sdmUpKTtcblx0XHR9XG5cdFx0bGV0IHByb21pc2VBZGRGaWxlO1xuXHRcdHRyeSB7XG5cdFx0XHRuYW1lID0gbmFtZS50cmltKCk7XG5cdFx0XHRpZiAoemlwV3JpdGVyLmZpbGVuYW1lcy5oYXMobmFtZSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9EVVBMSUNBVEVEX05BTUUpO1xuXHRcdFx0fVxuXHRcdFx0emlwV3JpdGVyLmZpbGVuYW1lcy5hZGQobmFtZSk7XG5cdFx0XHRwcm9taXNlQWRkRmlsZSA9IGFkZEZpbGUoemlwV3JpdGVyLCBuYW1lLCByZWFkZXIsIG9wdGlvbnMpO1xuXHRcdFx0cGVuZGluZ0FkZEZpbGVDYWxscy5hZGQocHJvbWlzZUFkZEZpbGUpO1xuXHRcdFx0cmV0dXJuIGF3YWl0IHByb21pc2VBZGRGaWxlO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR6aXBXcml0ZXIuZmlsZW5hbWVzLmRlbGV0ZShuYW1lKTtcblx0XHRcdHRocm93IGVycm9yO1xuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRwZW5kaW5nQWRkRmlsZUNhbGxzLmRlbGV0ZShwcm9taXNlQWRkRmlsZSk7XG5cdFx0XHRjb25zdCBwZW5kaW5nRW50cnkgPSBwZW5kaW5nRW50cmllcy5zaGlmdCgpO1xuXHRcdFx0aWYgKHBlbmRpbmdFbnRyeSkge1xuXHRcdFx0XHRwZW5kaW5nRW50cnkoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdvcmtlcnMtLTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRhc3luYyBjbG9zZShjb21tZW50ID0gbmV3IFVpbnQ4QXJyYXkoKSwgb3B0aW9ucyA9IHt9KSB7XG5cdFx0Y29uc3QgemlwV3JpdGVyID0gdGhpcztcblx0XHRjb25zdCB7IHBlbmRpbmdBZGRGaWxlQ2FsbHMsIHdyaXRlciB9ID0gdGhpcztcblx0XHRjb25zdCB7IHdyaXRhYmxlIH0gPSB3cml0ZXI7XG5cdFx0d2hpbGUgKHBlbmRpbmdBZGRGaWxlQ2FsbHMuc2l6ZSkge1xuXHRcdFx0YXdhaXQgUHJvbWlzZS5hbGwoQXJyYXkuZnJvbShwZW5kaW5nQWRkRmlsZUNhbGxzKSk7XG5cdFx0fVxuXHRcdGF3YWl0IGNsb3NlRmlsZSh0aGlzLCBjb21tZW50LCBvcHRpb25zKTtcblx0XHRjb25zdCBwcmV2ZW50Q2xvc2UgPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFwicHJldmVudENsb3NlXCIpO1xuXHRcdGlmICghcHJldmVudENsb3NlKSB7XG5cdFx0XHRhd2FpdCB3cml0YWJsZS5nZXRXcml0ZXIoKS5jbG9zZSgpO1xuXHRcdH1cblx0XHRyZXR1cm4gd3JpdGVyLmdldERhdGEgPyB3cml0ZXIuZ2V0RGF0YSgpIDogd3JpdGFibGU7XG5cdH1cbn1cblxuZXhwb3J0IHtcblx0WmlwV3JpdGVyLFxuXHRFUlJfRFVQTElDQVRFRF9OQU1FLFxuXHRFUlJfSU5WQUxJRF9DT01NRU5ULFxuXHRFUlJfSU5WQUxJRF9FTlRSWV9OQU1FLFxuXHRFUlJfSU5WQUxJRF9FTlRSWV9DT01NRU5ULFxuXHRFUlJfSU5WQUxJRF9WRVJTSU9OLFxuXHRFUlJfSU5WQUxJRF9FWFRSQUZJRUxEX1RZUEUsXG5cdEVSUl9JTlZBTElEX0VYVFJBRklFTERfREFUQSxcblx0RVJSX0lOVkFMSURfRU5DUllQVElPTl9TVFJFTkdUSCxcblx0RVJSX1VOU1VQUE9SVEVEX0ZPUk1BVFxufTtcblxuYXN5bmMgZnVuY3Rpb24gYWRkRmlsZSh6aXBXcml0ZXIsIG5hbWUsIHJlYWRlciwgb3B0aW9ucykge1xuXHRuYW1lID0gbmFtZS50cmltKCk7XG5cdGlmIChvcHRpb25zLmRpcmVjdG9yeSAmJiAoIW5hbWUuZW5kc1dpdGgoRElSRUNUT1JZX1NJR05BVFVSRSkpKSB7XG5cdFx0bmFtZSArPSBESVJFQ1RPUllfU0lHTkFUVVJFO1xuXHR9IGVsc2Uge1xuXHRcdG9wdGlvbnMuZGlyZWN0b3J5ID0gbmFtZS5lbmRzV2l0aChESVJFQ1RPUllfU0lHTkFUVVJFKTtcblx0fVxuXHRjb25zdCByYXdGaWxlbmFtZSA9IGVuY29kZVRleHQobmFtZSk7XG5cdGlmIChnZXRMZW5ndGgocmF3RmlsZW5hbWUpID4gTUFYXzE2X0JJVFMpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0lOVkFMSURfRU5UUllfTkFNRSk7XG5cdH1cblx0Y29uc3QgY29tbWVudCA9IG9wdGlvbnMuY29tbWVudCB8fCBcIlwiO1xuXHRjb25zdCByYXdDb21tZW50ID0gZW5jb2RlVGV4dChjb21tZW50KTtcblx0aWYgKGdldExlbmd0aChyYXdDb21tZW50KSA+IE1BWF8xNl9CSVRTKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9JTlZBTElEX0VOVFJZX0NPTU1FTlQpO1xuXHR9XG5cdGNvbnN0IHZlcnNpb24gPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFwidmVyc2lvblwiLCBWRVJTSU9OX0RFRkxBVEUpO1xuXHRpZiAodmVyc2lvbiA+IE1BWF8xNl9CSVRTKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9JTlZBTElEX1ZFUlNJT04pO1xuXHR9XG5cdGNvbnN0IHZlcnNpb25NYWRlQnkgPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFwidmVyc2lvbk1hZGVCeVwiLCAyMCk7XG5cdGlmICh2ZXJzaW9uTWFkZUJ5ID4gTUFYXzE2X0JJVFMpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0lOVkFMSURfVkVSU0lPTik7XG5cdH1cblx0Y29uc3QgbGFzdE1vZERhdGUgPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFBST1BFUlRZX05BTUVfTEFTVF9NT0RJRklDQVRJT05fREFURSwgbmV3IERhdGUoKSk7XG5cdGNvbnN0IGxhc3RBY2Nlc3NEYXRlID0gZ2V0T3B0aW9uVmFsdWUoemlwV3JpdGVyLCBvcHRpb25zLCBQUk9QRVJUWV9OQU1FX0xBU1RfQUNDRVNTX0RBVEUpO1xuXHRjb25zdCBjcmVhdGlvbkRhdGUgPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFBST1BFUlRZX05BTUVfQ1JFQVRJT05fREFURSk7XG5cdGNvbnN0IG1zRG9zQ29tcGF0aWJsZSA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgUFJPUEVSVFlfTkFNRV9NU19ET1NfQ09NUEFUSUJMRSwgdHJ1ZSk7XG5cdGNvbnN0IGludGVybmFsRmlsZUF0dHJpYnV0ZSA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgUFJPUEVSVFlfTkFNRV9JTlRFUk5BTF9GSUxFX0FUVFJJQlVURSwgMCk7XG5cdGNvbnN0IGV4dGVybmFsRmlsZUF0dHJpYnV0ZSA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgUFJPUEVSVFlfTkFNRV9FWFRFUk5BTF9GSUxFX0FUVFJJQlVURSwgMCk7XG5cdGNvbnN0IHBhc3N3b3JkID0gZ2V0T3B0aW9uVmFsdWUoemlwV3JpdGVyLCBvcHRpb25zLCBcInBhc3N3b3JkXCIpO1xuXHRjb25zdCBlbmNyeXB0aW9uU3RyZW5ndGggPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFwiZW5jcnlwdGlvblN0cmVuZ3RoXCIsIDMpO1xuXHRjb25zdCB6aXBDcnlwdG8gPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFwiemlwQ3J5cHRvXCIpO1xuXHRjb25zdCBleHRlbmRlZFRpbWVzdGFtcCA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgXCJleHRlbmRlZFRpbWVzdGFtcFwiLCB0cnVlKTtcblx0Y29uc3Qga2VlcE9yZGVyID0gZ2V0T3B0aW9uVmFsdWUoemlwV3JpdGVyLCBvcHRpb25zLCBcImtlZXBPcmRlclwiLCB0cnVlKTtcblx0Y29uc3QgbGV2ZWwgPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFwibGV2ZWxcIik7XG5cdGNvbnN0IHVzZVdlYldvcmtlcnMgPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFwidXNlV2ViV29ya2Vyc1wiKTtcblx0Y29uc3QgYnVmZmVyZWRXcml0ZSA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgXCJidWZmZXJlZFdyaXRlXCIpO1xuXHRjb25zdCBkYXRhRGVzY3JpcHRvclNpZ25hdHVyZSA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgXCJkYXRhRGVzY3JpcHRvclNpZ25hdHVyZVwiLCBmYWxzZSk7XG5cdGNvbnN0IHNpZ25hbCA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgXCJzaWduYWxcIik7XG5cdGNvbnN0IHVzZUNvbXByZXNzaW9uU3RyZWFtID0gZ2V0T3B0aW9uVmFsdWUoemlwV3JpdGVyLCBvcHRpb25zLCBcInVzZUNvbXByZXNzaW9uU3RyZWFtXCIpO1xuXHRsZXQgZGF0YURlc2NyaXB0b3IgPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFwiZGF0YURlc2NyaXB0b3JcIiwgdHJ1ZSk7XG5cdGxldCB6aXA2NCA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgUFJPUEVSVFlfTkFNRV9aSVA2NCk7XG5cdGlmIChwYXNzd29yZCAhPT0gVU5ERUZJTkVEX1ZBTFVFICYmIGVuY3J5cHRpb25TdHJlbmd0aCAhPT0gVU5ERUZJTkVEX1ZBTFVFICYmIChlbmNyeXB0aW9uU3RyZW5ndGggPCAxIHx8IGVuY3J5cHRpb25TdHJlbmd0aCA+IDMpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9JTlZBTElEX0VOQ1JZUFRJT05fU1RSRU5HVEgpO1xuXHR9XG5cdGxldCByYXdFeHRyYUZpZWxkID0gbmV3IFVpbnQ4QXJyYXkoKTtcblx0Y29uc3QgeyBleHRyYUZpZWxkIH0gPSBvcHRpb25zO1xuXHRpZiAoZXh0cmFGaWVsZCkge1xuXHRcdGxldCBleHRyYUZpZWxkU2l6ZSA9IDA7XG5cdFx0bGV0IG9mZnNldCA9IDA7XG5cdFx0ZXh0cmFGaWVsZC5mb3JFYWNoKGRhdGEgPT4gZXh0cmFGaWVsZFNpemUgKz0gNCArIGdldExlbmd0aChkYXRhKSk7XG5cdFx0cmF3RXh0cmFGaWVsZCA9IG5ldyBVaW50OEFycmF5KGV4dHJhRmllbGRTaXplKTtcblx0XHRleHRyYUZpZWxkLmZvckVhY2goKGRhdGEsIHR5cGUpID0+IHtcblx0XHRcdGlmICh0eXBlID4gTUFYXzE2X0JJVFMpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9JTlZBTElEX0VYVFJBRklFTERfVFlQRSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZ2V0TGVuZ3RoKGRhdGEpID4gTUFYXzE2X0JJVFMpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9JTlZBTElEX0VYVFJBRklFTERfREFUQSk7XG5cdFx0XHR9XG5cdFx0XHRhcnJheVNldChyYXdFeHRyYUZpZWxkLCBuZXcgVWludDE2QXJyYXkoW3R5cGVdKSwgb2Zmc2V0KTtcblx0XHRcdGFycmF5U2V0KHJhd0V4dHJhRmllbGQsIG5ldyBVaW50MTZBcnJheShbZ2V0TGVuZ3RoKGRhdGEpXSksIG9mZnNldCArIDIpO1xuXHRcdFx0YXJyYXlTZXQocmF3RXh0cmFGaWVsZCwgZGF0YSwgb2Zmc2V0ICsgNCk7XG5cdFx0XHRvZmZzZXQgKz0gNCArIGdldExlbmd0aChkYXRhKTtcblx0XHR9KTtcblx0fVxuXHRsZXQgbWF4aW11bUNvbXByZXNzZWRTaXplID0gMDtcblx0bGV0IG1heGltdW1FbnRyeVNpemUgPSAwO1xuXHRsZXQgdW5jb21wcmVzc2VkU2l6ZSA9IDA7XG5cdGNvbnN0IHppcDY0RW5hYmxlZCA9IHppcDY0ID09PSB0cnVlO1xuXHRpZiAocmVhZGVyKSB7XG5cdFx0cmVhZGVyID0gaW5pdFJlYWRlcihyZWFkZXIpO1xuXHRcdGF3YWl0IGluaXRTdHJlYW0ocmVhZGVyKTtcblx0XHRpZiAocmVhZGVyLnNpemUgPT09IFVOREVGSU5FRF9WQUxVRSkge1xuXHRcdFx0ZGF0YURlc2NyaXB0b3IgPSB0cnVlO1xuXHRcdFx0aWYgKHppcDY0IHx8IHppcDY0ID09PSBVTkRFRklORURfVkFMVUUpIHtcblx0XHRcdFx0emlwNjQgPSB0cnVlO1xuXHRcdFx0XHR1bmNvbXByZXNzZWRTaXplID0gbWF4aW11bUNvbXByZXNzZWRTaXplID0gTUFYXzMyX0JJVFM7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHVuY29tcHJlc3NlZFNpemUgPSByZWFkZXIuc2l6ZTtcblx0XHRcdG1heGltdW1Db21wcmVzc2VkU2l6ZSA9IGdldE1heGltdW1Db21wcmVzc2VkU2l6ZSh1bmNvbXByZXNzZWRTaXplKTtcblx0XHR9XG5cdH1cblx0Y29uc3QgeyBkaXNrT2Zmc2V0LCBkaXNrTnVtYmVyLCBtYXhTaXplIH0gPSB6aXBXcml0ZXIud3JpdGVyO1xuXHRjb25zdCB6aXA2NFVuY29tcHJlc3NlZFNpemUgPSB6aXA2NEVuYWJsZWQgfHwgdW5jb21wcmVzc2VkU2l6ZSA+PSBNQVhfMzJfQklUUztcblx0Y29uc3QgemlwNjRDb21wcmVzc2VkU2l6ZSA9IHppcDY0RW5hYmxlZCB8fCBtYXhpbXVtQ29tcHJlc3NlZFNpemUgPj0gTUFYXzMyX0JJVFM7XG5cdGNvbnN0IHppcDY0T2Zmc2V0ID0gemlwNjRFbmFibGVkIHx8IHppcFdyaXRlci5vZmZzZXQgKyB6aXBXcml0ZXIucGVuZGluZ0VudHJpZXNTaXplIC0gZGlza09mZnNldCA+PSBNQVhfMzJfQklUUztcblx0Y29uc3Qgc3VwcG9ydFppcDY0U3BsaXRGaWxlID0gZ2V0T3B0aW9uVmFsdWUoemlwV3JpdGVyLCBvcHRpb25zLCBcInN1cHBvcnRaaXA2NFNwbGl0RmlsZVwiLCB0cnVlKTtcblx0Y29uc3QgemlwNjREaXNrTnVtYmVyU3RhcnQgPSAoc3VwcG9ydFppcDY0U3BsaXRGaWxlICYmIHppcDY0RW5hYmxlZCkgfHwgZGlza051bWJlciArIE1hdGguY2VpbCh6aXBXcml0ZXIucGVuZGluZ0VudHJpZXNTaXplIC8gbWF4U2l6ZSkgPj0gTUFYXzE2X0JJVFM7XG5cdGlmICh6aXA2NE9mZnNldCB8fCB6aXA2NFVuY29tcHJlc3NlZFNpemUgfHwgemlwNjRDb21wcmVzc2VkU2l6ZSB8fCB6aXA2NERpc2tOdW1iZXJTdGFydCkge1xuXHRcdGlmICh6aXA2NCA9PT0gZmFsc2UgfHwgIWtlZXBPcmRlcikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9VTlNVUFBPUlRFRF9GT1JNQVQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR6aXA2NCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdHppcDY0ID0gemlwNjQgfHwgZmFsc2U7XG5cdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7XG5cdFx0cmF3RmlsZW5hbWUsXG5cdFx0cmF3Q29tbWVudCxcblx0XHR2ZXJzaW9uLFxuXHRcdHZlcnNpb25NYWRlQnksXG5cdFx0bGFzdE1vZERhdGUsXG5cdFx0bGFzdEFjY2Vzc0RhdGUsXG5cdFx0Y3JlYXRpb25EYXRlLFxuXHRcdHJhd0V4dHJhRmllbGQsXG5cdFx0emlwNjQsXG5cdFx0emlwNjRVbmNvbXByZXNzZWRTaXplLFxuXHRcdHppcDY0Q29tcHJlc3NlZFNpemUsXG5cdFx0emlwNjRPZmZzZXQsXG5cdFx0emlwNjREaXNrTnVtYmVyU3RhcnQsXG5cdFx0cGFzc3dvcmQsXG5cdFx0bGV2ZWwsXG5cdFx0dXNlV2ViV29ya2Vycyxcblx0XHRlbmNyeXB0aW9uU3RyZW5ndGgsXG5cdFx0ZXh0ZW5kZWRUaW1lc3RhbXAsXG5cdFx0emlwQ3J5cHRvLFxuXHRcdGJ1ZmZlcmVkV3JpdGUsXG5cdFx0a2VlcE9yZGVyLFxuXHRcdGRhdGFEZXNjcmlwdG9yLFxuXHRcdGRhdGFEZXNjcmlwdG9yU2lnbmF0dXJlLFxuXHRcdHNpZ25hbCxcblx0XHRtc0Rvc0NvbXBhdGlibGUsXG5cdFx0aW50ZXJuYWxGaWxlQXR0cmlidXRlLFxuXHRcdGV4dGVybmFsRmlsZUF0dHJpYnV0ZSxcblx0XHR1c2VDb21wcmVzc2lvblN0cmVhbVxuXHR9KTtcblx0Y29uc3QgaGVhZGVySW5mbyA9IGdldEhlYWRlckluZm8ob3B0aW9ucyk7XG5cdGNvbnN0IGRhdGFEZXNjcmlwdG9ySW5mbyA9IGdldERhdGFEZXNjcmlwdG9ySW5mbyhvcHRpb25zKTtcblx0Y29uc3QgbWV0YWRhdGFTaXplID0gZ2V0TGVuZ3RoKGhlYWRlckluZm8ubG9jYWxIZWFkZXJBcnJheSwgZGF0YURlc2NyaXB0b3JJbmZvLmRhdGFEZXNjcmlwdG9yQXJyYXkpO1xuXHRtYXhpbXVtRW50cnlTaXplID0gbWV0YWRhdGFTaXplICsgbWF4aW11bUNvbXByZXNzZWRTaXplO1xuXHRpZiAoemlwV3JpdGVyLm9wdGlvbnMudXNkeikge1xuXHRcdG1heGltdW1FbnRyeVNpemUgKz0gbWF4aW11bUVudHJ5U2l6ZSArIDY0O1xuXHR9XG5cdHppcFdyaXRlci5wZW5kaW5nRW50cmllc1NpemUgKz0gbWF4aW11bUVudHJ5U2l6ZTtcblx0bGV0IGZpbGVFbnRyeTtcblx0dHJ5IHtcblx0XHRmaWxlRW50cnkgPSBhd2FpdCBnZXRGaWxlRW50cnkoemlwV3JpdGVyLCBuYW1lLCByZWFkZXIsIHsgaGVhZGVySW5mbywgZGF0YURlc2NyaXB0b3JJbmZvLCBtZXRhZGF0YVNpemUgfSwgb3B0aW9ucyk7XG5cdH0gZmluYWxseSB7XG5cdFx0emlwV3JpdGVyLnBlbmRpbmdFbnRyaWVzU2l6ZSAtPSBtYXhpbXVtRW50cnlTaXplO1xuXHR9XG5cdE9iamVjdC5hc3NpZ24oZmlsZUVudHJ5LCB7IG5hbWUsIGNvbW1lbnQsIGV4dHJhRmllbGQgfSk7XG5cdHJldHVybiBuZXcgRW50cnkoZmlsZUVudHJ5KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0RmlsZUVudHJ5KHppcFdyaXRlciwgbmFtZSwgcmVhZGVyLCBlbnRyeUluZm8sIG9wdGlvbnMpIHtcblx0Y29uc3Qge1xuXHRcdGZpbGVzLFxuXHRcdHdyaXRlclxuXHR9ID0gemlwV3JpdGVyO1xuXHRjb25zdCB7XG5cdFx0a2VlcE9yZGVyLFxuXHRcdGRhdGFEZXNjcmlwdG9yLFxuXHRcdHNpZ25hbFxuXHR9ID0gb3B0aW9ucztcblx0Y29uc3Qge1xuXHRcdGhlYWRlckluZm9cblx0fSA9IGVudHJ5SW5mbztcblx0Y29uc3QgeyB1c2R6IH0gPSB6aXBXcml0ZXIub3B0aW9ucztcblx0Y29uc3QgcHJldmlvdXNGaWxlRW50cnkgPSBBcnJheS5mcm9tKGZpbGVzLnZhbHVlcygpKS5wb3AoKTtcblx0bGV0IGZpbGVFbnRyeSA9IHt9O1xuXHRsZXQgYnVmZmVyZWRXcml0ZTtcblx0bGV0IHJlbGVhc2VMb2NrV3JpdGVyO1xuXHRsZXQgcmVsZWFzZUxvY2tDdXJyZW50RmlsZUVudHJ5O1xuXHRsZXQgd3JpdGluZ0J1ZmZlcmVkRW50cnlEYXRhO1xuXHRsZXQgd3JpdGluZ0VudHJ5RGF0YTtcblx0bGV0IGZpbGVXcml0ZXI7XG5cdGZpbGVzLnNldChuYW1lLCBmaWxlRW50cnkpO1xuXHR0cnkge1xuXHRcdGxldCBsb2NrUHJldmlvdXNGaWxlRW50cnk7XG5cdFx0aWYgKGtlZXBPcmRlcikge1xuXHRcdFx0bG9ja1ByZXZpb3VzRmlsZUVudHJ5ID0gcHJldmlvdXNGaWxlRW50cnkgJiYgcHJldmlvdXNGaWxlRW50cnkubG9jaztcblx0XHRcdHJlcXVlc3RMb2NrQ3VycmVudEZpbGVFbnRyeSgpO1xuXHRcdH1cblx0XHRpZiAoKG9wdGlvbnMuYnVmZmVyZWRXcml0ZSB8fCB6aXBXcml0ZXIud3JpdGVyTG9ja2VkIHx8ICh6aXBXcml0ZXIuYnVmZmVyZWRXcml0ZXMgJiYga2VlcE9yZGVyKSB8fCAhZGF0YURlc2NyaXB0b3IpICYmICF1c2R6KSB7XG5cdFx0XHRmaWxlV3JpdGVyID0gbmV3IEJsb2JXcml0ZXIoKTtcblx0XHRcdGZpbGVXcml0ZXIud3JpdGFibGUuc2l6ZSA9IDA7XG5cdFx0XHRidWZmZXJlZFdyaXRlID0gdHJ1ZTtcblx0XHRcdHppcFdyaXRlci5idWZmZXJlZFdyaXRlcysrO1xuXHRcdFx0YXdhaXQgaW5pdFN0cmVhbSh3cml0ZXIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmaWxlV3JpdGVyID0gd3JpdGVyO1xuXHRcdFx0YXdhaXQgcmVxdWVzdExvY2tXcml0ZXIoKTtcblx0XHR9XG5cdFx0YXdhaXQgaW5pdFN0cmVhbShmaWxlV3JpdGVyKTtcblx0XHRjb25zdCB7IHdyaXRhYmxlIH0gPSB3cml0ZXI7XG5cdFx0bGV0IHsgZGlza09mZnNldCB9ID0gd3JpdGVyO1xuXHRcdGlmICh6aXBXcml0ZXIuYWRkU3BsaXRaaXBTaWduYXR1cmUpIHtcblx0XHRcdGRlbGV0ZSB6aXBXcml0ZXIuYWRkU3BsaXRaaXBTaWduYXR1cmU7XG5cdFx0XHRjb25zdCBzaWduYXR1cmVBcnJheSA9IG5ldyBVaW50OEFycmF5KDQpO1xuXHRcdFx0Y29uc3Qgc2lnbmF0dXJlQXJyYXlWaWV3ID0gZ2V0RGF0YVZpZXcoc2lnbmF0dXJlQXJyYXkpO1xuXHRcdFx0c2V0VWludDMyKHNpZ25hdHVyZUFycmF5VmlldywgMCwgU1BMSVRfWklQX0ZJTEVfU0lHTkFUVVJFKTtcblx0XHRcdGF3YWl0IHdyaXRlRGF0YSh3cml0YWJsZSwgc2lnbmF0dXJlQXJyYXkpO1xuXHRcdFx0emlwV3JpdGVyLm9mZnNldCArPSA0O1xuXHRcdH1cblx0XHRpZiAodXNkeikge1xuXHRcdFx0YXBwZW5kRXh0cmFGaWVsZFVTRFooZW50cnlJbmZvLCB6aXBXcml0ZXIub2Zmc2V0IC0gZGlza09mZnNldCk7XG5cdFx0fVxuXHRcdGlmICghYnVmZmVyZWRXcml0ZSkge1xuXHRcdFx0YXdhaXQgbG9ja1ByZXZpb3VzRmlsZUVudHJ5O1xuXHRcdFx0YXdhaXQgc2tpcERpc2tJZk5lZWRlZCh3cml0YWJsZSk7XG5cdFx0fVxuXHRcdGNvbnN0IHsgZGlza051bWJlciB9ID0gd3JpdGVyO1xuXHRcdHdyaXRpbmdFbnRyeURhdGEgPSB0cnVlO1xuXHRcdGZpbGVFbnRyeS5kaXNrTnVtYmVyU3RhcnQgPSBkaXNrTnVtYmVyO1xuXHRcdGZpbGVFbnRyeSA9IGF3YWl0IGNyZWF0ZUZpbGVFbnRyeShyZWFkZXIsIGZpbGVXcml0ZXIsIGZpbGVFbnRyeSwgZW50cnlJbmZvLCB6aXBXcml0ZXIuY29uZmlnLCBvcHRpb25zKTtcblx0XHR3cml0aW5nRW50cnlEYXRhID0gZmFsc2U7XG5cdFx0ZmlsZXMuc2V0KG5hbWUsIGZpbGVFbnRyeSk7XG5cdFx0ZmlsZUVudHJ5LmZpbGVuYW1lID0gbmFtZTtcblx0XHRpZiAoYnVmZmVyZWRXcml0ZSkge1xuXHRcdFx0YXdhaXQgZmlsZVdyaXRlci53cml0YWJsZS5nZXRXcml0ZXIoKS5jbG9zZSgpO1xuXHRcdFx0bGV0IGJsb2IgPSBhd2FpdCBmaWxlV3JpdGVyLmdldERhdGEoKTtcblx0XHRcdGF3YWl0IGxvY2tQcmV2aW91c0ZpbGVFbnRyeTtcblx0XHRcdGF3YWl0IHJlcXVlc3RMb2NrV3JpdGVyKCk7XG5cdFx0XHR3cml0aW5nQnVmZmVyZWRFbnRyeURhdGEgPSB0cnVlO1xuXHRcdFx0aWYgKCFkYXRhRGVzY3JpcHRvcikge1xuXHRcdFx0XHRibG9iID0gYXdhaXQgd3JpdGVFeHRyYUhlYWRlckluZm8oZmlsZUVudHJ5LCBibG9iLCB3cml0YWJsZSwgb3B0aW9ucyk7XG5cdFx0XHR9XG5cdFx0XHRhd2FpdCBza2lwRGlza0lmTmVlZGVkKHdyaXRhYmxlKTtcblx0XHRcdGZpbGVFbnRyeS5kaXNrTnVtYmVyU3RhcnQgPSB3cml0ZXIuZGlza051bWJlcjtcblx0XHRcdGRpc2tPZmZzZXQgPSB3cml0ZXIuZGlza09mZnNldDtcblx0XHRcdGF3YWl0IGJsb2Iuc3RyZWFtKCkucGlwZVRvKHdyaXRhYmxlLCB7IHByZXZlbnRDbG9zZTogdHJ1ZSwgcHJldmVudEFib3J0OiB0cnVlLCBzaWduYWwgfSk7XG5cdFx0XHR3cml0YWJsZS5zaXplICs9IGJsb2Iuc2l6ZTtcblx0XHRcdHdyaXRpbmdCdWZmZXJlZEVudHJ5RGF0YSA9IGZhbHNlO1xuXHRcdH1cblx0XHRmaWxlRW50cnkub2Zmc2V0ID0gemlwV3JpdGVyLm9mZnNldCAtIGRpc2tPZmZzZXQ7XG5cdFx0aWYgKGZpbGVFbnRyeS56aXA2NCkge1xuXHRcdFx0c2V0WmlwNjRFeHRyYUluZm8oZmlsZUVudHJ5LCBvcHRpb25zKTtcblx0XHR9IGVsc2UgaWYgKGZpbGVFbnRyeS5vZmZzZXQgPj0gTUFYXzMyX0JJVFMpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfVU5TVVBQT1JURURfRk9STUFUKTtcblx0XHR9XG5cdFx0emlwV3JpdGVyLm9mZnNldCArPSBmaWxlRW50cnkubGVuZ3RoO1xuXHRcdHJldHVybiBmaWxlRW50cnk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKChidWZmZXJlZFdyaXRlICYmIHdyaXRpbmdCdWZmZXJlZEVudHJ5RGF0YSkgfHwgKCFidWZmZXJlZFdyaXRlICYmIHdyaXRpbmdFbnRyeURhdGEpKSB7XG5cdFx0XHR6aXBXcml0ZXIuaGFzQ29ycnVwdGVkRW50cmllcyA9IHRydWU7XG5cdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRlcnJvci5jb3JydXB0ZWRFbnRyeSA9IHRydWU7XG5cdFx0XHRcdH0gY2F0Y2ggKF9lcnJvcikge1xuXHRcdFx0XHRcdC8vIGlnbm9yZWRcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGJ1ZmZlcmVkV3JpdGUpIHtcblx0XHRcdFx0emlwV3JpdGVyLm9mZnNldCArPSBmaWxlV3JpdGVyLndyaXRhYmxlLnNpemU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR6aXBXcml0ZXIub2Zmc2V0ID0gZmlsZVdyaXRlci53cml0YWJsZS5zaXplO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRmaWxlcy5kZWxldGUobmFtZSk7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZmluYWxseSB7XG5cdFx0aWYgKGJ1ZmZlcmVkV3JpdGUpIHtcblx0XHRcdHppcFdyaXRlci5idWZmZXJlZFdyaXRlcy0tO1xuXHRcdH1cblx0XHRpZiAocmVsZWFzZUxvY2tDdXJyZW50RmlsZUVudHJ5KSB7XG5cdFx0XHRyZWxlYXNlTG9ja0N1cnJlbnRGaWxlRW50cnkoKTtcblx0XHR9XG5cdFx0aWYgKHJlbGVhc2VMb2NrV3JpdGVyKSB7XG5cdFx0XHRyZWxlYXNlTG9ja1dyaXRlcigpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHJlcXVlc3RMb2NrQ3VycmVudEZpbGVFbnRyeSgpIHtcblx0XHRmaWxlRW50cnkubG9jayA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVsZWFzZUxvY2tDdXJyZW50RmlsZUVudHJ5ID0gcmVzb2x2ZSk7XG5cdH1cblxuXHRhc3luYyBmdW5jdGlvbiByZXF1ZXN0TG9ja1dyaXRlcigpIHtcblx0XHR6aXBXcml0ZXIud3JpdGVyTG9ja2VkID0gdHJ1ZTtcblx0XHRjb25zdCB7IGxvY2tXcml0ZXIgfSA9IHppcFdyaXRlcjtcblx0XHR6aXBXcml0ZXIubG9ja1dyaXRlciA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVsZWFzZUxvY2tXcml0ZXIgPSAoKSA9PiB7XG5cdFx0XHR6aXBXcml0ZXIud3JpdGVyTG9ja2VkID0gZmFsc2U7XG5cdFx0XHRyZXNvbHZlKCk7XG5cdFx0fSk7XG5cdFx0YXdhaXQgbG9ja1dyaXRlcjtcblx0fVxuXG5cdGFzeW5jIGZ1bmN0aW9uIHNraXBEaXNrSWZOZWVkZWQod3JpdGFibGUpIHtcblx0XHRpZiAoaGVhZGVySW5mby5sb2NhbEhlYWRlckFycmF5Lmxlbmd0aCA+IHdyaXRlci5hdmFpbGFibGVTaXplKSB7XG5cdFx0XHR3cml0ZXIuYXZhaWxhYmxlU2l6ZSA9IDA7XG5cdFx0XHRhd2FpdCB3cml0ZURhdGEod3JpdGFibGUsIG5ldyBVaW50OEFycmF5KCkpO1xuXHRcdH1cblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVGaWxlRW50cnkocmVhZGVyLCB3cml0ZXIsIHsgZGlza051bWJlclN0YXJ0LCBsb2NrIH0sIGVudHJ5SW5mbywgY29uZmlnLCBvcHRpb25zKSB7XG5cdGNvbnN0IHtcblx0XHRoZWFkZXJJbmZvLFxuXHRcdGRhdGFEZXNjcmlwdG9ySW5mbyxcblx0XHRtZXRhZGF0YVNpemVcblx0fSA9IGVudHJ5SW5mbztcblx0Y29uc3Qge1xuXHRcdGxvY2FsSGVhZGVyQXJyYXksXG5cdFx0aGVhZGVyQXJyYXksXG5cdFx0bGFzdE1vZERhdGUsXG5cdFx0cmF3TGFzdE1vZERhdGUsXG5cdFx0ZW5jcnlwdGVkLFxuXHRcdGNvbXByZXNzZWQsXG5cdFx0dmVyc2lvbixcblx0XHRjb21wcmVzc2lvbk1ldGhvZCxcblx0XHRyYXdFeHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXAsXG5cdFx0ZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wRmxhZyxcblx0XHRyYXdFeHRyYUZpZWxkTlRGUyxcblx0XHRyYXdFeHRyYUZpZWxkQUVTXG5cdH0gPSBoZWFkZXJJbmZvO1xuXHRjb25zdCB7IGRhdGFEZXNjcmlwdG9yQXJyYXkgfSA9IGRhdGFEZXNjcmlwdG9ySW5mbztcblx0Y29uc3Qge1xuXHRcdHJhd0ZpbGVuYW1lLFxuXHRcdGxhc3RBY2Nlc3NEYXRlLFxuXHRcdGNyZWF0aW9uRGF0ZSxcblx0XHRwYXNzd29yZCxcblx0XHRsZXZlbCxcblx0XHR6aXA2NCxcblx0XHR6aXA2NFVuY29tcHJlc3NlZFNpemUsXG5cdFx0emlwNjRDb21wcmVzc2VkU2l6ZSxcblx0XHR6aXA2NE9mZnNldCxcblx0XHR6aXA2NERpc2tOdW1iZXJTdGFydCxcblx0XHR6aXBDcnlwdG8sXG5cdFx0ZGF0YURlc2NyaXB0b3IsXG5cdFx0ZGlyZWN0b3J5LFxuXHRcdHZlcnNpb25NYWRlQnksXG5cdFx0cmF3Q29tbWVudCxcblx0XHRyYXdFeHRyYUZpZWxkLFxuXHRcdHVzZVdlYldvcmtlcnMsXG5cdFx0b25zdGFydCxcblx0XHRvbnByb2dyZXNzLFxuXHRcdG9uZW5kLFxuXHRcdHNpZ25hbCxcblx0XHRlbmNyeXB0aW9uU3RyZW5ndGgsXG5cdFx0ZXh0ZW5kZWRUaW1lc3RhbXAsXG5cdFx0bXNEb3NDb21wYXRpYmxlLFxuXHRcdGludGVybmFsRmlsZUF0dHJpYnV0ZSxcblx0XHRleHRlcm5hbEZpbGVBdHRyaWJ1dGUsXG5cdFx0dXNlQ29tcHJlc3Npb25TdHJlYW1cblx0fSA9IG9wdGlvbnM7XG5cdGNvbnN0IGZpbGVFbnRyeSA9IHtcblx0XHRsb2NrLFxuXHRcdHZlcnNpb25NYWRlQnksXG5cdFx0emlwNjQsXG5cdFx0ZGlyZWN0b3J5OiBCb29sZWFuKGRpcmVjdG9yeSksXG5cdFx0ZmlsZW5hbWVVVEY4OiB0cnVlLFxuXHRcdHJhd0ZpbGVuYW1lLFxuXHRcdGNvbW1lbnRVVEY4OiB0cnVlLFxuXHRcdHJhd0NvbW1lbnQsXG5cdFx0cmF3RXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wLFxuXHRcdHJhd0V4dHJhRmllbGROVEZTLFxuXHRcdHJhd0V4dHJhRmllbGRBRVMsXG5cdFx0cmF3RXh0cmFGaWVsZCxcblx0XHRleHRlbmRlZFRpbWVzdGFtcCxcblx0XHRtc0Rvc0NvbXBhdGlibGUsXG5cdFx0aW50ZXJuYWxGaWxlQXR0cmlidXRlLFxuXHRcdGV4dGVybmFsRmlsZUF0dHJpYnV0ZSxcblx0XHRkaXNrTnVtYmVyU3RhcnRcblx0fTtcblx0bGV0IGNvbXByZXNzZWRTaXplID0gMDtcblx0bGV0IHVuY29tcHJlc3NlZFNpemUgPSAwO1xuXHRsZXQgc2lnbmF0dXJlO1xuXHRjb25zdCB7IHdyaXRhYmxlIH0gPSB3cml0ZXI7XG5cdGlmIChyZWFkZXIpIHtcblx0XHRyZWFkZXIuY2h1bmtTaXplID0gZ2V0Q2h1bmtTaXplKGNvbmZpZyk7XG5cdFx0YXdhaXQgd3JpdGVEYXRhKHdyaXRhYmxlLCBsb2NhbEhlYWRlckFycmF5KTtcblx0XHRjb25zdCByZWFkYWJsZSA9IHJlYWRlci5yZWFkYWJsZTtcblx0XHRjb25zdCBzaXplID0gcmVhZGFibGUuc2l6ZSA9IHJlYWRlci5zaXplO1xuXHRcdGNvbnN0IHdvcmtlck9wdGlvbnMgPSB7XG5cdFx0XHRvcHRpb25zOiB7XG5cdFx0XHRcdGNvZGVjVHlwZTogQ09ERUNfREVGTEFURSxcblx0XHRcdFx0bGV2ZWwsXG5cdFx0XHRcdHBhc3N3b3JkLFxuXHRcdFx0XHRlbmNyeXB0aW9uU3RyZW5ndGgsXG5cdFx0XHRcdHppcENyeXB0bzogZW5jcnlwdGVkICYmIHppcENyeXB0byxcblx0XHRcdFx0cGFzc3dvcmRWZXJpZmljYXRpb246IGVuY3J5cHRlZCAmJiB6aXBDcnlwdG8gJiYgKHJhd0xhc3RNb2REYXRlID4+IDgpICYgMHhGRixcblx0XHRcdFx0c2lnbmVkOiB0cnVlLFxuXHRcdFx0XHRjb21wcmVzc2VkLFxuXHRcdFx0XHRlbmNyeXB0ZWQsXG5cdFx0XHRcdHVzZVdlYldvcmtlcnMsXG5cdFx0XHRcdHVzZUNvbXByZXNzaW9uU3RyZWFtLFxuXHRcdFx0XHR0cmFuc2ZlclN0cmVhbXM6IGZhbHNlXG5cdFx0XHR9LFxuXHRcdFx0Y29uZmlnLFxuXHRcdFx0c3RyZWFtT3B0aW9uczogeyBzaWduYWwsIHNpemUsIG9uc3RhcnQsIG9ucHJvZ3Jlc3MsIG9uZW5kIH1cblx0XHR9O1xuXHRcdGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJ1bldvcmtlcih7IHJlYWRhYmxlLCB3cml0YWJsZSB9LCB3b3JrZXJPcHRpb25zKTtcblx0XHR3cml0YWJsZS5zaXplICs9IHJlc3VsdC5zaXplO1xuXHRcdHNpZ25hdHVyZSA9IHJlc3VsdC5zaWduYXR1cmU7XG5cdFx0dW5jb21wcmVzc2VkU2l6ZSA9IHJlYWRlci5zaXplID0gcmVhZGFibGUuc2l6ZTtcblx0XHRjb21wcmVzc2VkU2l6ZSA9IHJlc3VsdC5zaXplO1xuXHR9IGVsc2Uge1xuXHRcdGF3YWl0IHdyaXRlRGF0YSh3cml0YWJsZSwgbG9jYWxIZWFkZXJBcnJheSk7XG5cdH1cblx0bGV0IHJhd0V4dHJhRmllbGRaaXA2NDtcblx0aWYgKHppcDY0KSB7XG5cdFx0bGV0IHJhd0V4dHJhRmllbGRaaXA2NExlbmd0aCA9IDQ7XG5cdFx0aWYgKHppcDY0VW5jb21wcmVzc2VkU2l6ZSkge1xuXHRcdFx0cmF3RXh0cmFGaWVsZFppcDY0TGVuZ3RoICs9IDg7XG5cdFx0fVxuXHRcdGlmICh6aXA2NENvbXByZXNzZWRTaXplKSB7XG5cdFx0XHRyYXdFeHRyYUZpZWxkWmlwNjRMZW5ndGggKz0gODtcblx0XHR9XG5cdFx0aWYgKHppcDY0T2Zmc2V0KSB7XG5cdFx0XHRyYXdFeHRyYUZpZWxkWmlwNjRMZW5ndGggKz0gODtcblx0XHR9XG5cdFx0aWYgKHppcDY0RGlza051bWJlclN0YXJ0KSB7XG5cdFx0XHRyYXdFeHRyYUZpZWxkWmlwNjRMZW5ndGggKz0gNDtcblx0XHR9XG5cdFx0cmF3RXh0cmFGaWVsZFppcDY0ID0gbmV3IFVpbnQ4QXJyYXkocmF3RXh0cmFGaWVsZFppcDY0TGVuZ3RoKTtcblx0fSBlbHNlIHtcblx0XHRyYXdFeHRyYUZpZWxkWmlwNjQgPSBuZXcgVWludDhBcnJheSgpO1xuXHR9XG5cdHNldEVudHJ5SW5mbyh7XG5cdFx0c2lnbmF0dXJlLFxuXHRcdHJhd0V4dHJhRmllbGRaaXA2NCxcblx0XHRjb21wcmVzc2VkU2l6ZSxcblx0XHR1bmNvbXByZXNzZWRTaXplLFxuXHRcdGhlYWRlckluZm8sXG5cdFx0ZGF0YURlc2NyaXB0b3JJbmZvXG5cdH0sIG9wdGlvbnMpO1xuXHRpZiAoZGF0YURlc2NyaXB0b3IpIHtcblx0XHRhd2FpdCB3cml0ZURhdGEod3JpdGFibGUsIGRhdGFEZXNjcmlwdG9yQXJyYXkpO1xuXHR9XG5cdE9iamVjdC5hc3NpZ24oZmlsZUVudHJ5LCB7XG5cdFx0dW5jb21wcmVzc2VkU2l6ZSxcblx0XHRjb21wcmVzc2VkU2l6ZSxcblx0XHRsYXN0TW9kRGF0ZSxcblx0XHRyYXdMYXN0TW9kRGF0ZSxcblx0XHRjcmVhdGlvbkRhdGUsXG5cdFx0bGFzdEFjY2Vzc0RhdGUsXG5cdFx0ZW5jcnlwdGVkLFxuXHRcdGxlbmd0aDogbWV0YWRhdGFTaXplICsgY29tcHJlc3NlZFNpemUsXG5cdFx0Y29tcHJlc3Npb25NZXRob2QsXG5cdFx0dmVyc2lvbixcblx0XHRoZWFkZXJBcnJheSxcblx0XHRzaWduYXR1cmUsXG5cdFx0cmF3RXh0cmFGaWVsZFppcDY0LFxuXHRcdGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcEZsYWcsXG5cdFx0emlwNjRVbmNvbXByZXNzZWRTaXplLFxuXHRcdHppcDY0Q29tcHJlc3NlZFNpemUsXG5cdFx0emlwNjRPZmZzZXQsXG5cdFx0emlwNjREaXNrTnVtYmVyU3RhcnRcblx0fSk7XG5cdHJldHVybiBmaWxlRW50cnk7XG59XG5cbmZ1bmN0aW9uIGdldEhlYWRlckluZm8ob3B0aW9ucykge1xuXHRjb25zdCB7XG5cdFx0cmF3RmlsZW5hbWUsXG5cdFx0bGFzdE1vZERhdGUsXG5cdFx0bGFzdEFjY2Vzc0RhdGUsXG5cdFx0Y3JlYXRpb25EYXRlLFxuXHRcdHBhc3N3b3JkLFxuXHRcdGxldmVsLFxuXHRcdHppcDY0LFxuXHRcdHppcENyeXB0byxcblx0XHRkYXRhRGVzY3JpcHRvcixcblx0XHRkaXJlY3RvcnksXG5cdFx0cmF3RXh0cmFGaWVsZCxcblx0XHRlbmNyeXB0aW9uU3RyZW5ndGgsXG5cdFx0ZXh0ZW5kZWRUaW1lc3RhbXBcblx0fSA9IG9wdGlvbnM7XG5cdGNvbnN0IGNvbXByZXNzZWQgPSBsZXZlbCAhPT0gMCAmJiAhZGlyZWN0b3J5O1xuXHRjb25zdCBlbmNyeXB0ZWQgPSBCb29sZWFuKHBhc3N3b3JkICYmIGdldExlbmd0aChwYXNzd29yZCkpO1xuXHRsZXQgdmVyc2lvbiA9IG9wdGlvbnMudmVyc2lvbjtcblx0bGV0IHJhd0V4dHJhRmllbGRBRVM7XG5cdGlmIChlbmNyeXB0ZWQgJiYgIXppcENyeXB0bykge1xuXHRcdHJhd0V4dHJhRmllbGRBRVMgPSBuZXcgVWludDhBcnJheShnZXRMZW5ndGgoRVhUUkFGSUVMRF9EQVRBX0FFUykgKyAyKTtcblx0XHRjb25zdCBleHRyYUZpZWxkQUVTVmlldyA9IGdldERhdGFWaWV3KHJhd0V4dHJhRmllbGRBRVMpO1xuXHRcdHNldFVpbnQxNihleHRyYUZpZWxkQUVTVmlldywgMCwgRVhUUkFGSUVMRF9UWVBFX0FFUyk7XG5cdFx0YXJyYXlTZXQocmF3RXh0cmFGaWVsZEFFUywgRVhUUkFGSUVMRF9EQVRBX0FFUywgMik7XG5cdFx0c2V0VWludDgoZXh0cmFGaWVsZEFFU1ZpZXcsIDgsIGVuY3J5cHRpb25TdHJlbmd0aCk7XG5cdH0gZWxzZSB7XG5cdFx0cmF3RXh0cmFGaWVsZEFFUyA9IG5ldyBVaW50OEFycmF5KCk7XG5cdH1cblx0bGV0IHJhd0V4dHJhRmllbGROVEZTO1xuXHRsZXQgcmF3RXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wO1xuXHRsZXQgZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wRmxhZztcblx0aWYgKGV4dGVuZGVkVGltZXN0YW1wKSB7XG5cdFx0cmF3RXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wID0gbmV3IFVpbnQ4QXJyYXkoOSArIChsYXN0QWNjZXNzRGF0ZSA/IDQgOiAwKSArIChjcmVhdGlvbkRhdGUgPyA0IDogMCkpO1xuXHRcdGNvbnN0IGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcFZpZXcgPSBnZXREYXRhVmlldyhyYXdFeHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXApO1xuXHRcdHNldFVpbnQxNihleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXBWaWV3LCAwLCBFWFRSQUZJRUxEX1RZUEVfRVhURU5ERURfVElNRVNUQU1QKTtcblx0XHRzZXRVaW50MTYoZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wVmlldywgMiwgZ2V0TGVuZ3RoKHJhd0V4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcCkgLSA0KTtcblx0XHRleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXBGbGFnID0gMHgxICsgKGxhc3RBY2Nlc3NEYXRlID8gMHgyIDogMCkgKyAoY3JlYXRpb25EYXRlID8gMHg0IDogMCk7XG5cdFx0c2V0VWludDgoZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wVmlldywgNCwgZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wRmxhZyk7XG5cdFx0bGV0IG9mZnNldCA9IDU7XG5cdFx0c2V0VWludDMyKGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcFZpZXcsIG9mZnNldCwgTWF0aC5mbG9vcihsYXN0TW9kRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKSk7XG5cdFx0b2Zmc2V0ICs9IDQ7XG5cdFx0aWYgKGxhc3RBY2Nlc3NEYXRlKSB7XG5cdFx0XHRzZXRVaW50MzIoZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wVmlldywgb2Zmc2V0LCBNYXRoLmZsb29yKGxhc3RBY2Nlc3NEYXRlLmdldFRpbWUoKSAvIDEwMDApKTtcblx0XHRcdG9mZnNldCArPSA0O1xuXHRcdH1cblx0XHRpZiAoY3JlYXRpb25EYXRlKSB7XG5cdFx0XHRzZXRVaW50MzIoZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wVmlldywgb2Zmc2V0LCBNYXRoLmZsb29yKGNyZWF0aW9uRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKSk7XG5cdFx0fVxuXHRcdHRyeSB7XG5cdFx0XHRyYXdFeHRyYUZpZWxkTlRGUyA9IG5ldyBVaW50OEFycmF5KDM2KTtcblx0XHRcdGNvbnN0IGV4dHJhRmllbGROVEZTVmlldyA9IGdldERhdGFWaWV3KHJhd0V4dHJhRmllbGROVEZTKTtcblx0XHRcdGNvbnN0IGxhc3RNb2RUaW1lTlRGUyA9IGdldFRpbWVOVEZTKGxhc3RNb2REYXRlKTtcblx0XHRcdHNldFVpbnQxNihleHRyYUZpZWxkTlRGU1ZpZXcsIDAsIEVYVFJBRklFTERfVFlQRV9OVEZTKTtcblx0XHRcdHNldFVpbnQxNihleHRyYUZpZWxkTlRGU1ZpZXcsIDIsIDMyKTtcblx0XHRcdHNldFVpbnQxNihleHRyYUZpZWxkTlRGU1ZpZXcsIDgsIEVYVFJBRklFTERfVFlQRV9OVEZTX1RBRzEpO1xuXHRcdFx0c2V0VWludDE2KGV4dHJhRmllbGROVEZTVmlldywgMTAsIDI0KTtcblx0XHRcdHNldEJpZ1VpbnQ2NChleHRyYUZpZWxkTlRGU1ZpZXcsIDEyLCBsYXN0TW9kVGltZU5URlMpO1xuXHRcdFx0c2V0QmlnVWludDY0KGV4dHJhRmllbGROVEZTVmlldywgMjAsIGdldFRpbWVOVEZTKGxhc3RBY2Nlc3NEYXRlKSB8fCBsYXN0TW9kVGltZU5URlMpO1xuXHRcdFx0c2V0QmlnVWludDY0KGV4dHJhRmllbGROVEZTVmlldywgMjgsIGdldFRpbWVOVEZTKGNyZWF0aW9uRGF0ZSkgfHwgbGFzdE1vZFRpbWVOVEZTKTtcblx0XHR9IGNhdGNoIChfZXJyb3IpIHtcblx0XHRcdHJhd0V4dHJhRmllbGROVEZTID0gbmV3IFVpbnQ4QXJyYXkoKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmF3RXh0cmFGaWVsZE5URlMgPSByYXdFeHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXAgPSBuZXcgVWludDhBcnJheSgpO1xuXHR9XG5cdGxldCBiaXRGbGFnID0gQklURkxBR19MQU5HX0VOQ09ESU5HX0ZMQUc7XG5cdGlmIChkYXRhRGVzY3JpcHRvcikge1xuXHRcdGJpdEZsYWcgPSBiaXRGbGFnIHwgQklURkxBR19EQVRBX0RFU0NSSVBUT1I7XG5cdH1cblx0bGV0IGNvbXByZXNzaW9uTWV0aG9kID0gQ09NUFJFU1NJT05fTUVUSE9EX1NUT1JFO1xuXHRpZiAoY29tcHJlc3NlZCkge1xuXHRcdGNvbXByZXNzaW9uTWV0aG9kID0gQ09NUFJFU1NJT05fTUVUSE9EX0RFRkxBVEU7XG5cdH1cblx0aWYgKHppcDY0KSB7XG5cdFx0dmVyc2lvbiA9IHZlcnNpb24gPiBWRVJTSU9OX1pJUDY0ID8gdmVyc2lvbiA6IFZFUlNJT05fWklQNjQ7XG5cdH1cblx0aWYgKGVuY3J5cHRlZCkge1xuXHRcdGJpdEZsYWcgPSBiaXRGbGFnIHwgQklURkxBR19FTkNSWVBURUQ7XG5cdFx0aWYgKCF6aXBDcnlwdG8pIHtcblx0XHRcdHZlcnNpb24gPSB2ZXJzaW9uID4gVkVSU0lPTl9BRVMgPyB2ZXJzaW9uIDogVkVSU0lPTl9BRVM7XG5cdFx0XHRjb21wcmVzc2lvbk1ldGhvZCA9IENPTVBSRVNTSU9OX01FVEhPRF9BRVM7XG5cdFx0XHRpZiAoY29tcHJlc3NlZCkge1xuXHRcdFx0XHRyYXdFeHRyYUZpZWxkQUVTWzldID0gQ09NUFJFU1NJT05fTUVUSE9EX0RFRkxBVEU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGNvbnN0IGhlYWRlckFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoMjYpO1xuXHRjb25zdCBoZWFkZXJWaWV3ID0gZ2V0RGF0YVZpZXcoaGVhZGVyQXJyYXkpO1xuXHRzZXRVaW50MTYoaGVhZGVyVmlldywgMCwgdmVyc2lvbik7XG5cdHNldFVpbnQxNihoZWFkZXJWaWV3LCAyLCBiaXRGbGFnKTtcblx0c2V0VWludDE2KGhlYWRlclZpZXcsIDQsIGNvbXByZXNzaW9uTWV0aG9kKTtcblx0Y29uc3QgZGF0ZUFycmF5ID0gbmV3IFVpbnQzMkFycmF5KDEpO1xuXHRjb25zdCBkYXRlVmlldyA9IGdldERhdGFWaWV3KGRhdGVBcnJheSk7XG5cdGxldCBsYXN0TW9kRGF0ZU1zRG9zO1xuXHRpZiAobGFzdE1vZERhdGUgPCBNSU5fREFURSkge1xuXHRcdGxhc3RNb2REYXRlTXNEb3MgPSBNSU5fREFURTtcblx0fSBlbHNlIGlmIChsYXN0TW9kRGF0ZSA+IE1BWF9EQVRFKSB7XG5cdFx0bGFzdE1vZERhdGVNc0RvcyA9IE1BWF9EQVRFO1xuXHR9IGVsc2Uge1xuXHRcdGxhc3RNb2REYXRlTXNEb3MgPSBsYXN0TW9kRGF0ZTtcblx0fVxuXHRzZXRVaW50MTYoZGF0ZVZpZXcsIDAsICgoKGxhc3RNb2REYXRlTXNEb3MuZ2V0SG91cnMoKSA8PCA2KSB8IGxhc3RNb2REYXRlTXNEb3MuZ2V0TWludXRlcygpKSA8PCA1KSB8IGxhc3RNb2REYXRlTXNEb3MuZ2V0U2Vjb25kcygpIC8gMik7XG5cdHNldFVpbnQxNihkYXRlVmlldywgMiwgKCgoKGxhc3RNb2REYXRlTXNEb3MuZ2V0RnVsbFllYXIoKSAtIDE5ODApIDw8IDQpIHwgKGxhc3RNb2REYXRlTXNEb3MuZ2V0TW9udGgoKSArIDEpKSA8PCA1KSB8IGxhc3RNb2REYXRlTXNEb3MuZ2V0RGF0ZSgpKTtcblx0Y29uc3QgcmF3TGFzdE1vZERhdGUgPSBkYXRlQXJyYXlbMF07XG5cdHNldFVpbnQzMihoZWFkZXJWaWV3LCA2LCByYXdMYXN0TW9kRGF0ZSk7XG5cdHNldFVpbnQxNihoZWFkZXJWaWV3LCAyMiwgZ2V0TGVuZ3RoKHJhd0ZpbGVuYW1lKSk7XG5cdGNvbnN0IGV4dHJhRmllbGRMZW5ndGggPSBnZXRMZW5ndGgocmF3RXh0cmFGaWVsZEFFUywgcmF3RXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wLCByYXdFeHRyYUZpZWxkTlRGUywgcmF3RXh0cmFGaWVsZCk7XG5cdHNldFVpbnQxNihoZWFkZXJWaWV3LCAyNCwgZXh0cmFGaWVsZExlbmd0aCk7XG5cdGNvbnN0IGxvY2FsSGVhZGVyQXJyYXkgPSBuZXcgVWludDhBcnJheSgzMCArIGdldExlbmd0aChyYXdGaWxlbmFtZSkgKyBleHRyYUZpZWxkTGVuZ3RoKTtcblx0Y29uc3QgbG9jYWxIZWFkZXJWaWV3ID0gZ2V0RGF0YVZpZXcobG9jYWxIZWFkZXJBcnJheSk7XG5cdHNldFVpbnQzMihsb2NhbEhlYWRlclZpZXcsIDAsIExPQ0FMX0ZJTEVfSEVBREVSX1NJR05BVFVSRSk7XG5cdGFycmF5U2V0KGxvY2FsSGVhZGVyQXJyYXksIGhlYWRlckFycmF5LCA0KTtcblx0YXJyYXlTZXQobG9jYWxIZWFkZXJBcnJheSwgcmF3RmlsZW5hbWUsIDMwKTtcblx0YXJyYXlTZXQobG9jYWxIZWFkZXJBcnJheSwgcmF3RXh0cmFGaWVsZEFFUywgMzAgKyBnZXRMZW5ndGgocmF3RmlsZW5hbWUpKTtcblx0YXJyYXlTZXQobG9jYWxIZWFkZXJBcnJheSwgcmF3RXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wLCAzMCArIGdldExlbmd0aChyYXdGaWxlbmFtZSwgcmF3RXh0cmFGaWVsZEFFUykpO1xuXHRhcnJheVNldChsb2NhbEhlYWRlckFycmF5LCByYXdFeHRyYUZpZWxkTlRGUywgMzAgKyBnZXRMZW5ndGgocmF3RmlsZW5hbWUsIHJhd0V4dHJhRmllbGRBRVMsIHJhd0V4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcCkpO1xuXHRhcnJheVNldChsb2NhbEhlYWRlckFycmF5LCByYXdFeHRyYUZpZWxkLCAzMCArIGdldExlbmd0aChyYXdGaWxlbmFtZSwgcmF3RXh0cmFGaWVsZEFFUywgcmF3RXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wLCByYXdFeHRyYUZpZWxkTlRGUykpO1xuXHRyZXR1cm4ge1xuXHRcdGxvY2FsSGVhZGVyQXJyYXksXG5cdFx0aGVhZGVyQXJyYXksXG5cdFx0aGVhZGVyVmlldyxcblx0XHRsYXN0TW9kRGF0ZSxcblx0XHRyYXdMYXN0TW9kRGF0ZSxcblx0XHRlbmNyeXB0ZWQsXG5cdFx0Y29tcHJlc3NlZCxcblx0XHR2ZXJzaW9uLFxuXHRcdGNvbXByZXNzaW9uTWV0aG9kLFxuXHRcdGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcEZsYWcsXG5cdFx0cmF3RXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wLFxuXHRcdHJhd0V4dHJhRmllbGROVEZTLFxuXHRcdHJhd0V4dHJhRmllbGRBRVMsXG5cdFx0ZXh0cmFGaWVsZExlbmd0aFxuXHR9O1xufVxuXG5mdW5jdGlvbiBhcHBlbmRFeHRyYUZpZWxkVVNEWihlbnRyeUluZm8sIHppcFdyaXRlck9mZnNldCkge1xuXHRjb25zdCB7IGhlYWRlckluZm8gfSA9IGVudHJ5SW5mbztcblx0bGV0IHsgbG9jYWxIZWFkZXJBcnJheSwgZXh0cmFGaWVsZExlbmd0aCB9ID0gaGVhZGVySW5mbztcblx0bGV0IGxvY2FsSGVhZGVyQXJyYXlWaWV3ID0gZ2V0RGF0YVZpZXcobG9jYWxIZWFkZXJBcnJheSk7XG5cdGxldCBleHRyYUJ5dGVzTGVuZ3RoID0gNjQgLSAoKHppcFdyaXRlck9mZnNldCArIGxvY2FsSGVhZGVyQXJyYXkubGVuZ3RoKSAlIDY0KTtcblx0aWYgKGV4dHJhQnl0ZXNMZW5ndGggPCA0KSB7XG5cdFx0ZXh0cmFCeXRlc0xlbmd0aCArPSA2NDtcblx0fVxuXHRjb25zdCByYXdFeHRyYUZpZWxkVVNEWiA9IG5ldyBVaW50OEFycmF5KGV4dHJhQnl0ZXNMZW5ndGgpO1xuXHRjb25zdCBleHRyYUZpZWxkVVNEWlZpZXcgPSBnZXREYXRhVmlldyhyYXdFeHRyYUZpZWxkVVNEWik7XG5cdHNldFVpbnQxNihleHRyYUZpZWxkVVNEWlZpZXcsIDAsIEVYVFJBRklFTERfVFlQRV9VU0RaKTtcblx0c2V0VWludDE2KGV4dHJhRmllbGRVU0RaVmlldywgMiwgZXh0cmFCeXRlc0xlbmd0aCAtIDIpO1xuXHRjb25zdCBwcmV2aW91c0xvY2FsSGVhZGVyQXJyYXkgPSBsb2NhbEhlYWRlckFycmF5O1xuXHRoZWFkZXJJbmZvLmxvY2FsSGVhZGVyQXJyYXkgPSBsb2NhbEhlYWRlckFycmF5ID0gbmV3IFVpbnQ4QXJyYXkocHJldmlvdXNMb2NhbEhlYWRlckFycmF5Lmxlbmd0aCArIGV4dHJhQnl0ZXNMZW5ndGgpO1xuXHRhcnJheVNldChsb2NhbEhlYWRlckFycmF5LCBwcmV2aW91c0xvY2FsSGVhZGVyQXJyYXkpO1xuXHRhcnJheVNldChsb2NhbEhlYWRlckFycmF5LCByYXdFeHRyYUZpZWxkVVNEWiwgcHJldmlvdXNMb2NhbEhlYWRlckFycmF5Lmxlbmd0aCk7XG5cdGxvY2FsSGVhZGVyQXJyYXlWaWV3ID0gZ2V0RGF0YVZpZXcobG9jYWxIZWFkZXJBcnJheSk7XG5cdHNldFVpbnQxNihsb2NhbEhlYWRlckFycmF5VmlldywgMjgsIGV4dHJhRmllbGRMZW5ndGggKyBleHRyYUJ5dGVzTGVuZ3RoKTtcblx0ZW50cnlJbmZvLm1ldGFkYXRhU2l6ZSArPSBleHRyYUJ5dGVzTGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhRGVzY3JpcHRvckluZm8ob3B0aW9ucykge1xuXHRjb25zdCB7XG5cdFx0emlwNjQsXG5cdFx0ZGF0YURlc2NyaXB0b3IsXG5cdFx0ZGF0YURlc2NyaXB0b3JTaWduYXR1cmVcblx0fSA9IG9wdGlvbnM7XG5cdGxldCBkYXRhRGVzY3JpcHRvckFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoKTtcblx0bGV0IGRhdGFEZXNjcmlwdG9yVmlldywgZGF0YURlc2NyaXB0b3JPZmZzZXQgPSAwO1xuXHRpZiAoZGF0YURlc2NyaXB0b3IpIHtcblx0XHRkYXRhRGVzY3JpcHRvckFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoemlwNjQgPyAoZGF0YURlc2NyaXB0b3JTaWduYXR1cmUgPyAyNCA6IDIwKSA6IChkYXRhRGVzY3JpcHRvclNpZ25hdHVyZSA/IDE2IDogMTIpKTtcblx0XHRkYXRhRGVzY3JpcHRvclZpZXcgPSBnZXREYXRhVmlldyhkYXRhRGVzY3JpcHRvckFycmF5KTtcblx0XHRpZiAoZGF0YURlc2NyaXB0b3JTaWduYXR1cmUpIHtcblx0XHRcdGRhdGFEZXNjcmlwdG9yT2Zmc2V0ID0gNDtcblx0XHRcdHNldFVpbnQzMihkYXRhRGVzY3JpcHRvclZpZXcsIDAsIERBVEFfREVTQ1JJUFRPUl9SRUNPUkRfU0lHTkFUVVJFKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHtcblx0XHRkYXRhRGVzY3JpcHRvckFycmF5LFxuXHRcdGRhdGFEZXNjcmlwdG9yVmlldyxcblx0XHRkYXRhRGVzY3JpcHRvck9mZnNldFxuXHR9O1xufVxuXG5mdW5jdGlvbiBzZXRFbnRyeUluZm8oZW50cnlJbmZvLCBvcHRpb25zKSB7XG5cdGNvbnN0IHtcblx0XHRzaWduYXR1cmUsXG5cdFx0cmF3RXh0cmFGaWVsZFppcDY0LFxuXHRcdGNvbXByZXNzZWRTaXplLFxuXHRcdHVuY29tcHJlc3NlZFNpemUsXG5cdFx0aGVhZGVySW5mbyxcblx0XHRkYXRhRGVzY3JpcHRvckluZm9cblx0fSA9IGVudHJ5SW5mbztcblx0Y29uc3Qge1xuXHRcdGhlYWRlclZpZXcsXG5cdFx0ZW5jcnlwdGVkXG5cdH0gPSBoZWFkZXJJbmZvO1xuXHRjb25zdCB7XG5cdFx0ZGF0YURlc2NyaXB0b3JWaWV3LFxuXHRcdGRhdGFEZXNjcmlwdG9yT2Zmc2V0XG5cdH0gPSBkYXRhRGVzY3JpcHRvckluZm87XG5cdGNvbnN0IHtcblx0XHR6aXA2NCxcblx0XHR6aXA2NFVuY29tcHJlc3NlZFNpemUsXG5cdFx0emlwNjRDb21wcmVzc2VkU2l6ZSxcblx0XHR6aXBDcnlwdG8sXG5cdFx0ZGF0YURlc2NyaXB0b3Jcblx0fSA9IG9wdGlvbnM7XG5cdGlmICgoIWVuY3J5cHRlZCB8fCB6aXBDcnlwdG8pICYmIHNpZ25hdHVyZSAhPT0gVU5ERUZJTkVEX1ZBTFVFKSB7XG5cdFx0c2V0VWludDMyKGhlYWRlclZpZXcsIDEwLCBzaWduYXR1cmUpO1xuXHRcdGlmIChkYXRhRGVzY3JpcHRvcikge1xuXHRcdFx0c2V0VWludDMyKGRhdGFEZXNjcmlwdG9yVmlldywgZGF0YURlc2NyaXB0b3JPZmZzZXQsIHNpZ25hdHVyZSk7XG5cdFx0fVxuXHR9XG5cdGlmICh6aXA2NCkge1xuXHRcdGNvbnN0IHJhd0V4dHJhRmllbGRaaXA2NFZpZXcgPSBnZXREYXRhVmlldyhyYXdFeHRyYUZpZWxkWmlwNjQpO1xuXHRcdHNldFVpbnQxNihyYXdFeHRyYUZpZWxkWmlwNjRWaWV3LCAwLCBFWFRSQUZJRUxEX1RZUEVfWklQNjQpO1xuXHRcdHNldFVpbnQxNihyYXdFeHRyYUZpZWxkWmlwNjRWaWV3LCAyLCByYXdFeHRyYUZpZWxkWmlwNjQubGVuZ3RoIC0gNCk7XG5cdFx0bGV0IHJhd0V4dHJhRmllbGRaaXA2NE9mZnNldCA9IDQ7XG5cdFx0aWYgKHppcDY0VW5jb21wcmVzc2VkU2l6ZSkge1xuXHRcdFx0c2V0VWludDMyKGhlYWRlclZpZXcsIDE4LCBNQVhfMzJfQklUUyk7XG5cdFx0XHRzZXRCaWdVaW50NjQocmF3RXh0cmFGaWVsZFppcDY0VmlldywgcmF3RXh0cmFGaWVsZFppcDY0T2Zmc2V0LCBCaWdJbnQodW5jb21wcmVzc2VkU2l6ZSkpO1xuXHRcdFx0cmF3RXh0cmFGaWVsZFppcDY0T2Zmc2V0ICs9IDg7XG5cdFx0fVxuXHRcdGlmICh6aXA2NENvbXByZXNzZWRTaXplKSB7XG5cdFx0XHRzZXRVaW50MzIoaGVhZGVyVmlldywgMTQsIE1BWF8zMl9CSVRTKTtcblx0XHRcdHNldEJpZ1VpbnQ2NChyYXdFeHRyYUZpZWxkWmlwNjRWaWV3LCByYXdFeHRyYUZpZWxkWmlwNjRPZmZzZXQsIEJpZ0ludChjb21wcmVzc2VkU2l6ZSkpO1xuXHRcdH1cblx0XHRpZiAoZGF0YURlc2NyaXB0b3IpIHtcblx0XHRcdHNldEJpZ1VpbnQ2NChkYXRhRGVzY3JpcHRvclZpZXcsIGRhdGFEZXNjcmlwdG9yT2Zmc2V0ICsgNCwgQmlnSW50KGNvbXByZXNzZWRTaXplKSk7XG5cdFx0XHRzZXRCaWdVaW50NjQoZGF0YURlc2NyaXB0b3JWaWV3LCBkYXRhRGVzY3JpcHRvck9mZnNldCArIDEyLCBCaWdJbnQodW5jb21wcmVzc2VkU2l6ZSkpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRzZXRVaW50MzIoaGVhZGVyVmlldywgMTQsIGNvbXByZXNzZWRTaXplKTtcblx0XHRzZXRVaW50MzIoaGVhZGVyVmlldywgMTgsIHVuY29tcHJlc3NlZFNpemUpO1xuXHRcdGlmIChkYXRhRGVzY3JpcHRvcikge1xuXHRcdFx0c2V0VWludDMyKGRhdGFEZXNjcmlwdG9yVmlldywgZGF0YURlc2NyaXB0b3JPZmZzZXQgKyA0LCBjb21wcmVzc2VkU2l6ZSk7XG5cdFx0XHRzZXRVaW50MzIoZGF0YURlc2NyaXB0b3JWaWV3LCBkYXRhRGVzY3JpcHRvck9mZnNldCArIDgsIHVuY29tcHJlc3NlZFNpemUpO1xuXHRcdH1cblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiB3cml0ZUV4dHJhSGVhZGVySW5mbyhmaWxlRW50cnksIGVudHJ5RGF0YSwgd3JpdGFibGUsIHsgemlwQ3J5cHRvIH0pIHtcblx0bGV0IGFycmF5QnVmZmVyO1xuXHRhcnJheUJ1ZmZlciA9IGF3YWl0IGVudHJ5RGF0YS5zbGljZSgwLCAyNikuYXJyYXlCdWZmZXIoKTtcblx0aWYgKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGggIT0gMjYpIHtcblx0XHRhcnJheUJ1ZmZlciA9IGFycmF5QnVmZmVyLnNsaWNlKDAsIDI2KTtcblx0fVxuXHRjb25zdCBhcnJheUJ1ZmZlclZpZXcgPSBuZXcgRGF0YVZpZXcoYXJyYXlCdWZmZXIpO1xuXHRpZiAoIWZpbGVFbnRyeS5lbmNyeXB0ZWQgfHwgemlwQ3J5cHRvKSB7XG5cdFx0c2V0VWludDMyKGFycmF5QnVmZmVyVmlldywgMTQsIGZpbGVFbnRyeS5zaWduYXR1cmUpO1xuXHR9XG5cdGlmIChmaWxlRW50cnkuemlwNjQpIHtcblx0XHRzZXRVaW50MzIoYXJyYXlCdWZmZXJWaWV3LCAxOCwgTUFYXzMyX0JJVFMpO1xuXHRcdHNldFVpbnQzMihhcnJheUJ1ZmZlclZpZXcsIDIyLCBNQVhfMzJfQklUUyk7XG5cdH0gZWxzZSB7XG5cdFx0c2V0VWludDMyKGFycmF5QnVmZmVyVmlldywgMTgsIGZpbGVFbnRyeS5jb21wcmVzc2VkU2l6ZSk7XG5cdFx0c2V0VWludDMyKGFycmF5QnVmZmVyVmlldywgMjIsIGZpbGVFbnRyeS51bmNvbXByZXNzZWRTaXplKTtcblx0fVxuXHRhd2FpdCB3cml0ZURhdGEod3JpdGFibGUsIG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG5cdHJldHVybiBlbnRyeURhdGEuc2xpY2UoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIHNldFppcDY0RXh0cmFJbmZvKGZpbGVFbnRyeSwgb3B0aW9ucykge1xuXHRjb25zdCB7IHJhd0V4dHJhRmllbGRaaXA2NCwgb2Zmc2V0LCBkaXNrTnVtYmVyU3RhcnQgfSA9IGZpbGVFbnRyeTtcblx0Y29uc3QgeyB6aXA2NFVuY29tcHJlc3NlZFNpemUsIHppcDY0Q29tcHJlc3NlZFNpemUsIHppcDY0T2Zmc2V0LCB6aXA2NERpc2tOdW1iZXJTdGFydCB9ID0gb3B0aW9ucztcblx0Y29uc3QgcmF3RXh0cmFGaWVsZFppcDY0VmlldyA9IGdldERhdGFWaWV3KHJhd0V4dHJhRmllbGRaaXA2NCk7XG5cdGxldCByYXdFeHRyYUZpZWxkWmlwNjRPZmZzZXQgPSA0O1xuXHRpZiAoemlwNjRVbmNvbXByZXNzZWRTaXplKSB7XG5cdFx0cmF3RXh0cmFGaWVsZFppcDY0T2Zmc2V0ICs9IDg7XG5cdH1cblx0aWYgKHppcDY0Q29tcHJlc3NlZFNpemUpIHtcblx0XHRyYXdFeHRyYUZpZWxkWmlwNjRPZmZzZXQgKz0gODtcblx0fVxuXHRpZiAoemlwNjRPZmZzZXQpIHtcblx0XHRzZXRCaWdVaW50NjQocmF3RXh0cmFGaWVsZFppcDY0VmlldywgcmF3RXh0cmFGaWVsZFppcDY0T2Zmc2V0LCBCaWdJbnQob2Zmc2V0KSk7XG5cdFx0cmF3RXh0cmFGaWVsZFppcDY0T2Zmc2V0ICs9IDg7XG5cdH1cblx0aWYgKHppcDY0RGlza051bWJlclN0YXJ0KSB7XG5cdFx0c2V0VWludDMyKHJhd0V4dHJhRmllbGRaaXA2NFZpZXcsIHJhd0V4dHJhRmllbGRaaXA2NE9mZnNldCwgZGlza051bWJlclN0YXJ0KTtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBjbG9zZUZpbGUoemlwV3JpdGVyLCBjb21tZW50LCBvcHRpb25zKSB7XG5cdGNvbnN0IHsgZmlsZXMsIHdyaXRlciB9ID0gemlwV3JpdGVyO1xuXHRjb25zdCB7IGRpc2tPZmZzZXQsIHdyaXRhYmxlIH0gPSB3cml0ZXI7XG5cdGxldCB7IGRpc2tOdW1iZXIgfSA9IHdyaXRlcjtcblx0bGV0IG9mZnNldCA9IDA7XG5cdGxldCBkaXJlY3RvcnlEYXRhTGVuZ3RoID0gMDtcblx0bGV0IGRpcmVjdG9yeU9mZnNldCA9IHppcFdyaXRlci5vZmZzZXQgLSBkaXNrT2Zmc2V0O1xuXHRsZXQgZmlsZXNMZW5ndGggPSBmaWxlcy5zaXplO1xuXHRmb3IgKGNvbnN0IFssIGZpbGVFbnRyeV0gb2YgZmlsZXMpIHtcblx0XHRjb25zdCB7XG5cdFx0XHRyYXdGaWxlbmFtZSxcblx0XHRcdHJhd0V4dHJhRmllbGRaaXA2NCxcblx0XHRcdHJhd0V4dHJhRmllbGRBRVMsXG5cdFx0XHRyYXdDb21tZW50LFxuXHRcdFx0cmF3RXh0cmFGaWVsZE5URlMsXG5cdFx0XHRyYXdFeHRyYUZpZWxkLFxuXHRcdFx0ZXh0ZW5kZWRUaW1lc3RhbXAsXG5cdFx0XHRleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXBGbGFnLFxuXHRcdFx0bGFzdE1vZERhdGVcblx0XHR9ID0gZmlsZUVudHJ5O1xuXHRcdGxldCByYXdFeHRyYUZpZWxkVGltZXN0YW1wO1xuXHRcdGlmIChleHRlbmRlZFRpbWVzdGFtcCkge1xuXHRcdFx0cmF3RXh0cmFGaWVsZFRpbWVzdGFtcCA9IG5ldyBVaW50OEFycmF5KDkpO1xuXHRcdFx0Y29uc3QgZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wVmlldyA9IGdldERhdGFWaWV3KHJhd0V4dHJhRmllbGRUaW1lc3RhbXApO1xuXHRcdFx0c2V0VWludDE2KGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcFZpZXcsIDAsIEVYVFJBRklFTERfVFlQRV9FWFRFTkRFRF9USU1FU1RBTVApO1xuXHRcdFx0c2V0VWludDE2KGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcFZpZXcsIDIsIDUpO1xuXHRcdFx0c2V0VWludDgoZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wVmlldywgNCwgZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wRmxhZyk7XG5cdFx0XHRzZXRVaW50MzIoZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wVmlldywgNSwgTWF0aC5mbG9vcihsYXN0TW9kRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJhd0V4dHJhRmllbGRUaW1lc3RhbXAgPSBuZXcgVWludDhBcnJheSgpO1xuXHRcdH1cblx0XHRmaWxlRW50cnkucmF3RXh0cmFGaWVsZENERXh0ZW5kZWRUaW1lc3RhbXAgPSByYXdFeHRyYUZpZWxkVGltZXN0YW1wO1xuXHRcdGRpcmVjdG9yeURhdGFMZW5ndGggKz0gNDYgK1xuXHRcdFx0Z2V0TGVuZ3RoKFxuXHRcdFx0XHRyYXdGaWxlbmFtZSxcblx0XHRcdFx0cmF3Q29tbWVudCxcblx0XHRcdFx0cmF3RXh0cmFGaWVsZFppcDY0LFxuXHRcdFx0XHRyYXdFeHRyYUZpZWxkQUVTLFxuXHRcdFx0XHRyYXdFeHRyYUZpZWxkTlRGUyxcblx0XHRcdFx0cmF3RXh0cmFGaWVsZFRpbWVzdGFtcCxcblx0XHRcdFx0cmF3RXh0cmFGaWVsZCk7XG5cdH1cblx0Y29uc3QgZGlyZWN0b3J5QXJyYXkgPSBuZXcgVWludDhBcnJheShkaXJlY3RvcnlEYXRhTGVuZ3RoKTtcblx0Y29uc3QgZGlyZWN0b3J5VmlldyA9IGdldERhdGFWaWV3KGRpcmVjdG9yeUFycmF5KTtcblx0YXdhaXQgaW5pdFN0cmVhbSh3cml0ZXIpO1xuXHRsZXQgZGlyZWN0b3J5RGlza09mZnNldCA9IDA7XG5cdGZvciAoY29uc3QgW2luZGV4RmlsZUVudHJ5LCBmaWxlRW50cnldIG9mIEFycmF5LmZyb20oZmlsZXMudmFsdWVzKCkpLmVudHJpZXMoKSkge1xuXHRcdGNvbnN0IHtcblx0XHRcdG9mZnNldDogZmlsZUVudHJ5T2Zmc2V0LFxuXHRcdFx0cmF3RmlsZW5hbWUsXG5cdFx0XHRyYXdFeHRyYUZpZWxkWmlwNjQsXG5cdFx0XHRyYXdFeHRyYUZpZWxkQUVTLFxuXHRcdFx0cmF3RXh0cmFGaWVsZENERXh0ZW5kZWRUaW1lc3RhbXAsXG5cdFx0XHRyYXdFeHRyYUZpZWxkTlRGUyxcblx0XHRcdHJhd0V4dHJhRmllbGQsXG5cdFx0XHRyYXdDb21tZW50LFxuXHRcdFx0dmVyc2lvbk1hZGVCeSxcblx0XHRcdGhlYWRlckFycmF5LFxuXHRcdFx0ZGlyZWN0b3J5LFxuXHRcdFx0emlwNjQsXG5cdFx0XHR6aXA2NFVuY29tcHJlc3NlZFNpemUsXG5cdFx0XHR6aXA2NENvbXByZXNzZWRTaXplLFxuXHRcdFx0emlwNjREaXNrTnVtYmVyU3RhcnQsXG5cdFx0XHR6aXA2NE9mZnNldCxcblx0XHRcdG1zRG9zQ29tcGF0aWJsZSxcblx0XHRcdGludGVybmFsRmlsZUF0dHJpYnV0ZSxcblx0XHRcdGV4dGVybmFsRmlsZUF0dHJpYnV0ZSxcblx0XHRcdGRpc2tOdW1iZXJTdGFydCxcblx0XHRcdHVuY29tcHJlc3NlZFNpemUsXG5cdFx0XHRjb21wcmVzc2VkU2l6ZVxuXHRcdH0gPSBmaWxlRW50cnk7XG5cdFx0Y29uc3QgZXh0cmFGaWVsZExlbmd0aCA9IGdldExlbmd0aChyYXdFeHRyYUZpZWxkWmlwNjQsIHJhd0V4dHJhRmllbGRBRVMsIHJhd0V4dHJhRmllbGRDREV4dGVuZGVkVGltZXN0YW1wLCByYXdFeHRyYUZpZWxkTlRGUywgcmF3RXh0cmFGaWVsZCk7XG5cdFx0c2V0VWludDMyKGRpcmVjdG9yeVZpZXcsIG9mZnNldCwgQ0VOVFJBTF9GSUxFX0hFQURFUl9TSUdOQVRVUkUpO1xuXHRcdHNldFVpbnQxNihkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyA0LCB2ZXJzaW9uTWFkZUJ5KTtcblx0XHRjb25zdCBoZWFkZXJWaWV3ID0gZ2V0RGF0YVZpZXcoaGVhZGVyQXJyYXkpO1xuXHRcdGlmICghemlwNjRVbmNvbXByZXNzZWRTaXplKSB7XG5cdFx0XHRzZXRVaW50MzIoaGVhZGVyVmlldywgMTgsIHVuY29tcHJlc3NlZFNpemUpO1xuXHRcdH1cblx0XHRpZiAoIXppcDY0Q29tcHJlc3NlZFNpemUpIHtcblx0XHRcdHNldFVpbnQzMihoZWFkZXJWaWV3LCAxNCwgY29tcHJlc3NlZFNpemUpO1xuXHRcdH1cblx0XHRhcnJheVNldChkaXJlY3RvcnlBcnJheSwgaGVhZGVyQXJyYXksIG9mZnNldCArIDYpO1xuXHRcdHNldFVpbnQxNihkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyAzMCwgZXh0cmFGaWVsZExlbmd0aCk7XG5cdFx0c2V0VWludDE2KGRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDMyLCBnZXRMZW5ndGgocmF3Q29tbWVudCkpO1xuXHRcdHNldFVpbnQxNihkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyAzNCwgemlwNjQgJiYgemlwNjREaXNrTnVtYmVyU3RhcnQgPyBNQVhfMTZfQklUUyA6IGRpc2tOdW1iZXJTdGFydCk7XG5cdFx0c2V0VWludDE2KGRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDM2LCBpbnRlcm5hbEZpbGVBdHRyaWJ1dGUpO1xuXHRcdGlmIChleHRlcm5hbEZpbGVBdHRyaWJ1dGUpIHtcblx0XHRcdHNldFVpbnQzMihkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyAzOCwgZXh0ZXJuYWxGaWxlQXR0cmlidXRlKTtcblx0XHR9IGVsc2UgaWYgKGRpcmVjdG9yeSAmJiBtc0Rvc0NvbXBhdGlibGUpIHtcblx0XHRcdHNldFVpbnQ4KGRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDM4LCBGSUxFX0FUVFJfTVNET1NfRElSX01BU0spO1xuXHRcdH1cblx0XHRzZXRVaW50MzIoZGlyZWN0b3J5Vmlldywgb2Zmc2V0ICsgNDIsIHppcDY0ICYmIHppcDY0T2Zmc2V0ID8gTUFYXzMyX0JJVFMgOiBmaWxlRW50cnlPZmZzZXQpO1xuXHRcdGFycmF5U2V0KGRpcmVjdG9yeUFycmF5LCByYXdGaWxlbmFtZSwgb2Zmc2V0ICsgNDYpO1xuXHRcdGFycmF5U2V0KGRpcmVjdG9yeUFycmF5LCByYXdFeHRyYUZpZWxkWmlwNjQsIG9mZnNldCArIDQ2ICsgZ2V0TGVuZ3RoKHJhd0ZpbGVuYW1lKSk7XG5cdFx0YXJyYXlTZXQoZGlyZWN0b3J5QXJyYXksIHJhd0V4dHJhRmllbGRBRVMsIG9mZnNldCArIDQ2ICsgZ2V0TGVuZ3RoKHJhd0ZpbGVuYW1lLCByYXdFeHRyYUZpZWxkWmlwNjQpKTtcblx0XHRhcnJheVNldChkaXJlY3RvcnlBcnJheSwgcmF3RXh0cmFGaWVsZENERXh0ZW5kZWRUaW1lc3RhbXAsIG9mZnNldCArIDQ2ICsgZ2V0TGVuZ3RoKHJhd0ZpbGVuYW1lLCByYXdFeHRyYUZpZWxkWmlwNjQsIHJhd0V4dHJhRmllbGRBRVMpKTtcblx0XHRhcnJheVNldChkaXJlY3RvcnlBcnJheSwgcmF3RXh0cmFGaWVsZE5URlMsIG9mZnNldCArIDQ2ICsgZ2V0TGVuZ3RoKHJhd0ZpbGVuYW1lLCByYXdFeHRyYUZpZWxkWmlwNjQsIHJhd0V4dHJhRmllbGRBRVMsIHJhd0V4dHJhRmllbGRDREV4dGVuZGVkVGltZXN0YW1wKSk7XG5cdFx0YXJyYXlTZXQoZGlyZWN0b3J5QXJyYXksIHJhd0V4dHJhRmllbGQsIG9mZnNldCArIDQ2ICsgZ2V0TGVuZ3RoKHJhd0ZpbGVuYW1lLCByYXdFeHRyYUZpZWxkWmlwNjQsIHJhd0V4dHJhRmllbGRBRVMsIHJhd0V4dHJhRmllbGRDREV4dGVuZGVkVGltZXN0YW1wLCByYXdFeHRyYUZpZWxkTlRGUykpO1xuXHRcdGFycmF5U2V0KGRpcmVjdG9yeUFycmF5LCByYXdDb21tZW50LCBvZmZzZXQgKyA0NiArIGdldExlbmd0aChyYXdGaWxlbmFtZSkgKyBleHRyYUZpZWxkTGVuZ3RoKTtcblx0XHRjb25zdCBkaXJlY3RvcnlFbnRyeUxlbmd0aCA9IDQ2ICsgZ2V0TGVuZ3RoKHJhd0ZpbGVuYW1lLCByYXdDb21tZW50KSArIGV4dHJhRmllbGRMZW5ndGg7XG5cdFx0aWYgKG9mZnNldCAtIGRpcmVjdG9yeURpc2tPZmZzZXQgPiB3cml0ZXIuYXZhaWxhYmxlU2l6ZSkge1xuXHRcdFx0d3JpdGVyLmF2YWlsYWJsZVNpemUgPSAwO1xuXHRcdFx0YXdhaXQgd3JpdGVEYXRhKHdyaXRhYmxlLCBkaXJlY3RvcnlBcnJheS5zbGljZShkaXJlY3RvcnlEaXNrT2Zmc2V0LCBvZmZzZXQpKTtcblx0XHRcdGRpcmVjdG9yeURpc2tPZmZzZXQgPSBvZmZzZXQ7XG5cdFx0fVxuXHRcdG9mZnNldCArPSBkaXJlY3RvcnlFbnRyeUxlbmd0aDtcblx0XHRpZiAob3B0aW9ucy5vbnByb2dyZXNzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRhd2FpdCBvcHRpb25zLm9ucHJvZ3Jlc3MoaW5kZXhGaWxlRW50cnkgKyAxLCBmaWxlcy5zaXplLCBuZXcgRW50cnkoZmlsZUVudHJ5KSk7XG5cdFx0XHR9IGNhdGNoIChfZXJyb3IpIHtcblx0XHRcdFx0Ly8gaWdub3JlZFxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRhd2FpdCB3cml0ZURhdGEod3JpdGFibGUsIGRpcmVjdG9yeURpc2tPZmZzZXQgPyBkaXJlY3RvcnlBcnJheS5zbGljZShkaXJlY3RvcnlEaXNrT2Zmc2V0KSA6IGRpcmVjdG9yeUFycmF5KTtcblx0bGV0IGxhc3REaXNrTnVtYmVyID0gd3JpdGVyLmRpc2tOdW1iZXI7XG5cdGNvbnN0IHsgYXZhaWxhYmxlU2l6ZSB9ID0gd3JpdGVyO1xuXHRpZiAoYXZhaWxhYmxlU2l6ZSA8IEVORF9PRl9DRU5UUkFMX0RJUl9MRU5HVEgpIHtcblx0XHRsYXN0RGlza051bWJlcisrO1xuXHR9XG5cdGxldCB6aXA2NCA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgXCJ6aXA2NFwiKTtcblx0aWYgKGRpcmVjdG9yeU9mZnNldCA+PSBNQVhfMzJfQklUUyB8fCBkaXJlY3RvcnlEYXRhTGVuZ3RoID49IE1BWF8zMl9CSVRTIHx8IGZpbGVzTGVuZ3RoID49IE1BWF8xNl9CSVRTIHx8IGxhc3REaXNrTnVtYmVyID49IE1BWF8xNl9CSVRTKSB7XG5cdFx0aWYgKHppcDY0ID09PSBmYWxzZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9VTlNVUFBPUlRFRF9GT1JNQVQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR6aXA2NCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdGNvbnN0IGVuZE9mZGlyZWN0b3J5QXJyYXkgPSBuZXcgVWludDhBcnJheSh6aXA2NCA/IFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9UT1RBTF9MRU5HVEggOiBFTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RIKTtcblx0Y29uc3QgZW5kT2ZkaXJlY3RvcnlWaWV3ID0gZ2V0RGF0YVZpZXcoZW5kT2ZkaXJlY3RvcnlBcnJheSk7XG5cdG9mZnNldCA9IDA7XG5cdGlmICh6aXA2NCkge1xuXHRcdHNldFVpbnQzMihlbmRPZmRpcmVjdG9yeVZpZXcsIDAsIFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9TSUdOQVRVUkUpO1xuXHRcdHNldEJpZ1VpbnQ2NChlbmRPZmRpcmVjdG9yeVZpZXcsIDQsIEJpZ0ludCg0NCkpO1xuXHRcdHNldFVpbnQxNihlbmRPZmRpcmVjdG9yeVZpZXcsIDEyLCA0NSk7XG5cdFx0c2V0VWludDE2KGVuZE9mZGlyZWN0b3J5VmlldywgMTQsIDQ1KTtcblx0XHRzZXRVaW50MzIoZW5kT2ZkaXJlY3RvcnlWaWV3LCAxNiwgbGFzdERpc2tOdW1iZXIpO1xuXHRcdHNldFVpbnQzMihlbmRPZmRpcmVjdG9yeVZpZXcsIDIwLCBkaXNrTnVtYmVyKTtcblx0XHRzZXRCaWdVaW50NjQoZW5kT2ZkaXJlY3RvcnlWaWV3LCAyNCwgQmlnSW50KGZpbGVzTGVuZ3RoKSk7XG5cdFx0c2V0QmlnVWludDY0KGVuZE9mZGlyZWN0b3J5VmlldywgMzIsIEJpZ0ludChmaWxlc0xlbmd0aCkpO1xuXHRcdHNldEJpZ1VpbnQ2NChlbmRPZmRpcmVjdG9yeVZpZXcsIDQwLCBCaWdJbnQoZGlyZWN0b3J5RGF0YUxlbmd0aCkpO1xuXHRcdHNldEJpZ1VpbnQ2NChlbmRPZmRpcmVjdG9yeVZpZXcsIDQ4LCBCaWdJbnQoZGlyZWN0b3J5T2Zmc2V0KSk7XG5cdFx0c2V0VWludDMyKGVuZE9mZGlyZWN0b3J5VmlldywgNTYsIFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9MT0NBVE9SX1NJR05BVFVSRSk7XG5cdFx0c2V0QmlnVWludDY0KGVuZE9mZGlyZWN0b3J5VmlldywgNjQsIEJpZ0ludChkaXJlY3RvcnlPZmZzZXQpICsgQmlnSW50KGRpcmVjdG9yeURhdGFMZW5ndGgpKTtcblx0XHRzZXRVaW50MzIoZW5kT2ZkaXJlY3RvcnlWaWV3LCA3MiwgbGFzdERpc2tOdW1iZXIgKyAxKTtcblx0XHRjb25zdCBzdXBwb3J0WmlwNjRTcGxpdEZpbGUgPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFwic3VwcG9ydFppcDY0U3BsaXRGaWxlXCIsIHRydWUpO1xuXHRcdGlmIChzdXBwb3J0WmlwNjRTcGxpdEZpbGUpIHtcblx0XHRcdGxhc3REaXNrTnVtYmVyID0gTUFYXzE2X0JJVFM7XG5cdFx0XHRkaXNrTnVtYmVyID0gTUFYXzE2X0JJVFM7XG5cdFx0fVxuXHRcdGZpbGVzTGVuZ3RoID0gTUFYXzE2X0JJVFM7XG5cdFx0ZGlyZWN0b3J5T2Zmc2V0ID0gTUFYXzMyX0JJVFM7XG5cdFx0ZGlyZWN0b3J5RGF0YUxlbmd0aCA9IE1BWF8zMl9CSVRTO1xuXHRcdG9mZnNldCArPSBaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RIICsgWklQNjRfRU5EX09GX0NFTlRSQUxfRElSX0xPQ0FUT1JfTEVOR1RIO1xuXHR9XG5cdHNldFVpbnQzMihlbmRPZmRpcmVjdG9yeVZpZXcsIG9mZnNldCwgRU5EX09GX0NFTlRSQUxfRElSX1NJR05BVFVSRSk7XG5cdHNldFVpbnQxNihlbmRPZmRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDQsIGxhc3REaXNrTnVtYmVyKTtcblx0c2V0VWludDE2KGVuZE9mZGlyZWN0b3J5Vmlldywgb2Zmc2V0ICsgNiwgZGlza051bWJlcik7XG5cdHNldFVpbnQxNihlbmRPZmRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDgsIGZpbGVzTGVuZ3RoKTtcblx0c2V0VWludDE2KGVuZE9mZGlyZWN0b3J5Vmlldywgb2Zmc2V0ICsgMTAsIGZpbGVzTGVuZ3RoKTtcblx0c2V0VWludDMyKGVuZE9mZGlyZWN0b3J5Vmlldywgb2Zmc2V0ICsgMTIsIGRpcmVjdG9yeURhdGFMZW5ndGgpO1xuXHRzZXRVaW50MzIoZW5kT2ZkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyAxNiwgZGlyZWN0b3J5T2Zmc2V0KTtcblx0Y29uc3QgY29tbWVudExlbmd0aCA9IGdldExlbmd0aChjb21tZW50KTtcblx0aWYgKGNvbW1lbnRMZW5ndGgpIHtcblx0XHRpZiAoY29tbWVudExlbmd0aCA8PSBNQVhfMTZfQklUUykge1xuXHRcdFx0c2V0VWludDE2KGVuZE9mZGlyZWN0b3J5Vmlldywgb2Zmc2V0ICsgMjAsIGNvbW1lbnRMZW5ndGgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0lOVkFMSURfQ09NTUVOVCk7XG5cdFx0fVxuXHR9XG5cdGF3YWl0IHdyaXRlRGF0YSh3cml0YWJsZSwgZW5kT2ZkaXJlY3RvcnlBcnJheSk7XG5cdGlmIChjb21tZW50TGVuZ3RoKSB7XG5cdFx0YXdhaXQgd3JpdGVEYXRhKHdyaXRhYmxlLCBjb21tZW50KTtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiB3cml0ZURhdGEod3JpdGFibGUsIGFycmF5KSB7XG5cdGNvbnN0IHN0cmVhbVdyaXRlciA9IHdyaXRhYmxlLmdldFdyaXRlcigpO1xuXHRhd2FpdCBzdHJlYW1Xcml0ZXIucmVhZHk7XG5cdHdyaXRhYmxlLnNpemUgKz0gZ2V0TGVuZ3RoKGFycmF5KTtcblx0YXdhaXQgc3RyZWFtV3JpdGVyLndyaXRlKGFycmF5KTtcblx0c3RyZWFtV3JpdGVyLnJlbGVhc2VMb2NrKCk7XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVOVEZTKGRhdGUpIHtcblx0aWYgKGRhdGUpIHtcblx0XHRyZXR1cm4gKChCaWdJbnQoZGF0ZS5nZXRUaW1lKCkpICsgQmlnSW50KDExNjQ0NDczNjAwMDAwKSkgKiBCaWdJbnQoMTAwMDApKTtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIG5hbWUsIGRlZmF1bHRWYWx1ZSkge1xuXHRjb25zdCByZXN1bHQgPSBvcHRpb25zW25hbWVdID09PSBVTkRFRklORURfVkFMVUUgPyB6aXBXcml0ZXIub3B0aW9uc1tuYW1lXSA6IG9wdGlvbnNbbmFtZV07XG5cdHJldHVybiByZXN1bHQgPT09IFVOREVGSU5FRF9WQUxVRSA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZ2V0TWF4aW11bUNvbXByZXNzZWRTaXplKHVuY29tcHJlc3NlZFNpemUpIHtcblx0cmV0dXJuIHVuY29tcHJlc3NlZFNpemUgKyAoNSAqIChNYXRoLmZsb29yKHVuY29tcHJlc3NlZFNpemUgLyAxNjM4MykgKyAxKSk7XG59XG5cbmZ1bmN0aW9uIHNldFVpbnQ4KHZpZXcsIG9mZnNldCwgdmFsdWUpIHtcblx0dmlldy5zZXRVaW50OChvZmZzZXQsIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gc2V0VWludDE2KHZpZXcsIG9mZnNldCwgdmFsdWUpIHtcblx0dmlldy5zZXRVaW50MTYob2Zmc2V0LCB2YWx1ZSwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIHNldFVpbnQzMih2aWV3LCBvZmZzZXQsIHZhbHVlKSB7XG5cdHZpZXcuc2V0VWludDMyKG9mZnNldCwgdmFsdWUsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBzZXRCaWdVaW50NjQodmlldywgb2Zmc2V0LCB2YWx1ZSkge1xuXHR2aWV3LnNldEJpZ1VpbnQ2NChvZmZzZXQsIHZhbHVlLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gYXJyYXlTZXQoYXJyYXksIHR5cGVkQXJyYXksIG9mZnNldCkge1xuXHRhcnJheS5zZXQodHlwZWRBcnJheSwgb2Zmc2V0KTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YVZpZXcoYXJyYXkpIHtcblx0cmV0dXJuIG5ldyBEYXRhVmlldyhhcnJheS5idWZmZXIpO1xufVxuXG5mdW5jdGlvbiBnZXRMZW5ndGgoLi4uYXJyYXlMaWtlcykge1xuXHRsZXQgcmVzdWx0ID0gMDtcblx0YXJyYXlMaWtlcy5mb3JFYWNoKGFycmF5TGlrZSA9PiBhcnJheUxpa2UgJiYgKHJlc3VsdCArPSBhcnJheUxpa2UubGVuZ3RoKSk7XG5cdHJldHVybiByZXN1bHQ7XG59IiwiZnVuY3Rpb24gZShlKXtjb25zdCB0PSgpPT5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFsnY29uc3R7QXJyYXk6ZSxPYmplY3Q6dCxOdW1iZXI6bixNYXRoOnIsRXJyb3I6cyxVaW50OEFycmF5OmksVWludDE2QXJyYXk6byxVaW50MzJBcnJheTpjLEludDMyQXJyYXk6ZixNYXA6YSxEYXRhVmlldzpsLFByb21pc2U6dSxUZXh0RW5jb2Rlcjp3LGNyeXB0bzpoLHBvc3RNZXNzYWdlOmQsVHJhbnNmb3JtU3RyZWFtOnAsUmVhZGFibGVTdHJlYW06eSxXcml0YWJsZVN0cmVhbTptLENvbXByZXNzaW9uU3RyZWFtOmIsRGVjb21wcmVzc2lvblN0cmVhbTpnfT1zZWxmO2NsYXNzIGt7Y29uc3RydWN0b3IoZSl7cmV0dXJuIGNsYXNzIGV4dGVuZHMgcHtjb25zdHJ1Y3Rvcih0LG4pe2NvbnN0IHI9bmV3IGUobik7c3VwZXIoe3RyYW5zZm9ybShlLHQpe3QuZW5xdWV1ZShyLmFwcGVuZChlKSl9LGZsdXNoKGUpe2NvbnN0IHQ9ci5mbHVzaCgpO3QmJmUuZW5xdWV1ZSh0KX19KX19fX1jb25zdCB2PVtdO2ZvcihsZXQgZT0wOzI1Nj5lO2UrKyl7bGV0IHQ9ZTtmb3IobGV0IGU9MDs4PmU7ZSsrKTEmdD90PXQ+Pj4xXjM5ODgyOTIzODQ6dD4+Pj0xO3ZbZV09dH1jbGFzcyBTe2NvbnN0cnVjdG9yKGUpe3RoaXMudD1lfHwtMX1hcHBlbmQoZSl7bGV0IHQ9MHx0aGlzLnQ7Zm9yKGxldCBuPTAscj0wfGUubGVuZ3RoO3I+bjtuKyspdD10Pj4+OF52WzI1NSYodF5lW25dKV07dGhpcy50PXR9Z2V0KCl7cmV0dXJufnRoaXMudH19Y2xhc3MgeiBleHRlbmRzIHB7Y29uc3RydWN0b3IoKXtsZXQgZTtjb25zdCB0PW5ldyBTO3N1cGVyKHt0cmFuc2Zvcm0oZSxuKXt0LmFwcGVuZChlKSxuLmVucXVldWUoZSl9LGZsdXNoKCl7Y29uc3Qgbj1uZXcgaSg0KTtuZXcgbChuLmJ1ZmZlcikuc2V0VWludDMyKDAsdC5nZXQoKSksZS52YWx1ZT1ufX0pLGU9dGhpc319Y29uc3QgQz17Y29uY2F0KGUsdCl7aWYoMD09PWUubGVuZ3RofHwwPT09dC5sZW5ndGgpcmV0dXJuIGUuY29uY2F0KHQpO2NvbnN0IG49ZVtlLmxlbmd0aC0xXSxyPUMuaShuKTtyZXR1cm4gMzI9PT1yP2UuY29uY2F0KHQpOkMubyh0LHIsMHxuLGUuc2xpY2UoMCxlLmxlbmd0aC0xKSl9LGwoZSl7Y29uc3QgdD1lLmxlbmd0aDtpZigwPT09dClyZXR1cm4gMDtjb25zdCBuPWVbdC0xXTtyZXR1cm4gMzIqKHQtMSkrQy5pKG4pfSx1KGUsdCl7aWYoMzIqZS5sZW5ndGg8dClyZXR1cm4gZTtjb25zdCBuPShlPWUuc2xpY2UoMCxyLmNlaWwodC8zMikpKS5sZW5ndGg7cmV0dXJuIHQmPTMxLG4+MCYmdCYmKGVbbi0xXT1DLmgodCxlW24tMV0mMjE0NzQ4MzY0OD4+dC0xLDEpKSxlfSxoOihlLHQsbik9PjMyPT09ZT90OihuPzB8dDp0PDwzMi1lKSsxMDk5NTExNjI3Nzc2KmUsaTplPT5yLnJvdW5kKGUvMTA5OTUxMTYyNzc3Nil8fDMyLG8oZSx0LG4scil7Zm9yKHZvaWQgMD09PXImJihyPVtdKTt0Pj0zMjt0LT0zMilyLnB1c2gobiksbj0wO2lmKDA9PT10KXJldHVybiByLmNvbmNhdChlKTtmb3IobGV0IHM9MDtzPGUubGVuZ3RoO3MrKylyLnB1c2gobnxlW3NdPj4+dCksbj1lW3NdPDwzMi10O2NvbnN0IHM9ZS5sZW5ndGg/ZVtlLmxlbmd0aC0xXTowLGk9Qy5pKHMpO3JldHVybiByLnB1c2goQy5oKHQraSYzMSx0K2k+MzI/bjpyLnBvcCgpLDEpKSxyfX0seD17cDp7bShlKXtjb25zdCB0PUMubChlKS84LG49bmV3IGkodCk7bGV0IHI7Zm9yKGxldCBzPTA7dD5zO3MrKykwPT0oMyZzKSYmKHI9ZVtzLzRdKSxuW3NdPXI+Pj4yNCxyPDw9ODtyZXR1cm4gbn0sZyhlKXtjb25zdCB0PVtdO2xldCBuLHI9MDtmb3Iobj0wO248ZS5sZW5ndGg7bisrKXI9cjw8OHxlW25dLDM9PSgzJm4pJiYodC5wdXNoKHIpLHI9MCk7cmV0dXJuIDMmbiYmdC5wdXNoKEMuaCg4KigzJm4pLHIpKSx0fX19LF89Y2xhc3N7Y29uc3RydWN0b3IoZSl7Y29uc3QgdD10aGlzO3QuYmxvY2tTaXplPTUxMix0Lms9WzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OCwzMjg1Mzc3NTIwXSx0LnY9WzE1MTg1MDAyNDksMTg1OTc3NTM5MywyNDAwOTU5NzA4LDMzOTU0Njk3ODJdLGU/KHQuUz1lLlMuc2xpY2UoMCksdC5DPWUuQy5zbGljZSgwKSx0Ll89ZS5fKTp0LnJlc2V0KCl9cmVzZXQoKXtjb25zdCBlPXRoaXM7cmV0dXJuIGUuUz1lLmsuc2xpY2UoMCksZS5DPVtdLGUuXz0wLGV9dXBkYXRlKGUpe2NvbnN0IHQ9dGhpcztcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9eC5BLmcoZSkpO2NvbnN0IG49dC5DPUMuY29uY2F0KHQuQyxlKSxyPXQuXyxpPXQuXz1yK0MubChlKTtpZihpPjkwMDcxOTkyNTQ3NDA5OTEpdGhyb3cgbmV3IHMoXCJDYW5ub3QgaGFzaCBtb3JlIHRoYW4gMl41MyAtIDEgYml0c1wiKTtjb25zdCBvPW5ldyBjKG4pO2xldCBmPTA7Zm9yKGxldCBlPXQuYmxvY2tTaXplK3ItKHQuYmxvY2tTaXplK3ImdC5ibG9ja1NpemUtMSk7aT49ZTtlKz10LmJsb2NrU2l6ZSl0Lkkoby5zdWJhcnJheSgxNipmLDE2KihmKzEpKSksZis9MTtyZXR1cm4gbi5zcGxpY2UoMCwxNipmKSx0fUQoKXtjb25zdCBlPXRoaXM7bGV0IHQ9ZS5DO2NvbnN0IG49ZS5TO3Q9Qy5jb25jYXQodCxbQy5oKDEsMSldKTtmb3IobGV0IGU9dC5sZW5ndGgrMjsxNSZlO2UrKyl0LnB1c2goMCk7Zm9yKHQucHVzaChyLmZsb29yKGUuXy80Mjk0OTY3Mjk2KSksdC5wdXNoKDB8ZS5fKTt0Lmxlbmd0aDspZS5JKHQuc3BsaWNlKDAsMTYpKTtyZXR1cm4gZS5yZXNldCgpLG59VihlLHQsbixyKXtyZXR1cm4gZT4xOT9lPjM5P2U+NTk/ZT43OT92b2lkIDA6dF5uXnI6dCZufHQmcnxuJnI6dF5uXnI6dCZufH50JnJ9UChlLHQpe3JldHVybiB0PDxlfHQ+Pj4zMi1lfUkodCl7Y29uc3Qgbj10aGlzLHM9bi5TLGk9ZSg4MCk7Zm9yKGxldCBlPTA7MTY+ZTtlKyspaVtlXT10W2VdO2xldCBvPXNbMF0sYz1zWzFdLGY9c1syXSxhPXNbM10sbD1zWzRdO2ZvcihsZXQgZT0wOzc5Pj1lO2UrKyl7MTY+ZXx8KGlbZV09bi5QKDEsaVtlLTNdXmlbZS04XV5pW2UtMTRdXmlbZS0xNl0pKTtjb25zdCB0PW4uUCg1LG8pK24uVihlLGMsZixhKStsK2lbZV0rbi52W3IuZmxvb3IoZS8yMCldfDA7bD1hLGE9ZixmPW4uUCgzMCxjKSxjPW8sbz10fXNbMF09c1swXStvfDAsc1sxXT1zWzFdK2N8MCxzWzJdPXNbMl0rZnwwLHNbM109c1szXSthfDAsc1s0XT1zWzRdK2x8MH19LEE9e2dldFJhbmRvbVZhbHVlcyhlKXtjb25zdCB0PW5ldyBjKGUuYnVmZmVyKSxuPWU9PntsZXQgdD05ODc2NTQzMjE7Y29uc3Qgbj00Mjk0OTY3Mjk1O3JldHVybigpPT4odD0zNjk2OSooNjU1MzUmdCkrKHQ+PjE2KSZuLCgoKHQ8PDE2KSsoZT0xOGUzKig2NTUzNSZlKSsoZT4+MTYpJm4pJm4pLzQyOTQ5NjcyOTYrLjUpKihyLnJhbmRvbSgpPi41PzE6LTEpKX07Zm9yKGxldCBzLGk9MDtpPGUubGVuZ3RoO2krPTQpe2NvbnN0IGU9big0Mjk0OTY3Mjk2KihzfHxyLnJhbmRvbSgpKSk7cz05ODc2NTQwNzEqZSgpLHRbaS80XT00Mjk0OTY3Mjk2KmUoKXwwfXJldHVybiBlfX0sST17aW1wb3J0S2V5OmU9Pm5ldyBJLlIoeC5wLmcoZSkpLEIoZSx0LG4scil7aWYobj1ufHwxZTQsMD5yfHwwPm4pdGhyb3cgbmV3IHMoXCJpbnZhbGlkIHBhcmFtcyB0byBwYmtkZjJcIik7Y29uc3QgaT0xKyhyPj41KTw8MjtsZXQgbyxjLGYsYSx1O2NvbnN0IHc9bmV3IEFycmF5QnVmZmVyKGkpLGg9bmV3IGwodyk7bGV0IGQ9MDtjb25zdCBwPUM7Zm9yKHQ9eC5wLmcodCksdT0xOyhpfHwxKT5kO3UrKyl7Zm9yKG89Yz1lLmVuY3J5cHQocC5jb25jYXQodCxbdV0pKSxmPTE7bj5mO2YrKylmb3IoYz1lLmVuY3J5cHQoYyksYT0wO2E8Yy5sZW5ndGg7YSsrKW9bYV1ePWNbYV07Zm9yKGY9MDsoaXx8MSk+ZCYmZjxvLmxlbmd0aDtmKyspaC5zZXRJbnQzMihkLG9bZl0pLGQrPTR9cmV0dXJuIHcuc2xpY2UoMCxyLzgpfSxSOmNsYXNze2NvbnN0cnVjdG9yKGUpe2NvbnN0IHQ9dGhpcyxuPXQuTT1fLHI9W1tdLFtdXTt0LlU9W25ldyBuLG5ldyBuXTtjb25zdCBzPXQuVVswXS5ibG9ja1NpemUvMzI7ZS5sZW5ndGg+cyYmKGU9KG5ldyBuKS51cGRhdGUoZSkuRCgpKTtmb3IobGV0IHQ9MDtzPnQ7dCsrKXJbMF1bdF09OTA5NTIyNDg2XmVbdF0sclsxXVt0XT0xNTQ5NTU2ODI4XmVbdF07dC5VWzBdLnVwZGF0ZShyWzBdKSx0LlVbMV0udXBkYXRlKHJbMV0pLHQuSz1uZXcgbih0LlVbMF0pfXJlc2V0KCl7Y29uc3QgZT10aGlzO2UuSz1uZXcgZS5NKGUuVVswXSksZS5OPSExfXVwZGF0ZShlKXt0aGlzLk49ITAsdGhpcy5LLnVwZGF0ZShlKX1kaWdlc3QoKXtjb25zdCBlPXRoaXMsdD1lLksuRCgpLG49bmV3IGUuTShlLlVbMV0pLnVwZGF0ZSh0KS5EKCk7cmV0dXJuIGUucmVzZXQoKSxufWVuY3J5cHQoZSl7aWYodGhpcy5OKXRocm93IG5ldyBzKFwiZW5jcnlwdCBvbiBhbHJlYWR5IHVwZGF0ZWQgaG1hYyBjYWxsZWQhXCIpO3JldHVybiB0aGlzLnVwZGF0ZShlKSx0aGlzLmRpZ2VzdChlKX19fSxEPXZvaWQgMCE9PWgmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGguZ2V0UmFuZG9tVmFsdWVzLFY9XCJJbnZhbGlkIHBhc3N3b3JkXCIsUD1cIkludmFsaWQgc2lnbmF0dXJlXCIsUj1cInppcGpzLWFib3J0LWNoZWNrLXBhc3N3b3JkXCI7ZnVuY3Rpb24gQihlKXtyZXR1cm4gRD9oLmdldFJhbmRvbVZhbHVlcyhlKTpBLmdldFJhbmRvbVZhbHVlcyhlKX1jb25zdCBFPTE2LE09e25hbWU6XCJQQktERjJcIn0sVT10LmFzc2lnbih7aGFzaDp7bmFtZTpcIkhNQUNcIn19LE0pLEs9dC5hc3NpZ24oe2l0ZXJhdGlvbnM6MWUzLGhhc2g6e25hbWU6XCJTSEEtMVwifX0sTSksTj1bXCJkZXJpdmVCaXRzXCJdLE89WzgsMTIsMTZdLFQ9WzE2LDI0LDMyXSxXPTEwLGo9WzAsMCwwLDBdLEg9XCJ1bmRlZmluZWRcIixMPVwiZnVuY3Rpb25cIixGPXR5cGVvZiBoIT1ILHE9RiYmaC5zdWJ0bGUsRz1GJiZ0eXBlb2YgcSE9SCxKPXgucCxRPWNsYXNze2NvbnN0cnVjdG9yKGUpe2NvbnN0IHQ9dGhpczt0Lk89W1tbXSxbXSxbXSxbXSxbXV0sW1tdLFtdLFtdLFtdLFtdXV0sdC5PWzBdWzBdWzBdfHx0LlQoKTtjb25zdCBuPXQuT1swXVs0XSxyPXQuT1sxXSxpPWUubGVuZ3RoO2xldCBvLGMsZixhPTE7aWYoNCE9PWkmJjYhPT1pJiY4IT09aSl0aHJvdyBuZXcgcyhcImludmFsaWQgYWVzIGtleSBzaXplXCIpO2Zvcih0LnY9W2M9ZS5zbGljZSgwKSxmPVtdXSxvPWk7NCppKzI4Pm87bysrKXtsZXQgZT1jW28tMV07KG8laT09MHx8OD09PWkmJm8laT09NCkmJihlPW5bZT4+PjI0XTw8MjRebltlPj4xNiYyNTVdPDwxNl5uW2U+PjgmMjU1XTw8OF5uWzI1NSZlXSxvJWk9PTAmJihlPWU8PDheZT4+PjI0XmE8PDI0LGE9YTw8MV4yODMqKGE+PjcpKSksY1tvXT1jW28taV1eZX1mb3IobGV0IGU9MDtvO2UrKyxvLS0pe2NvbnN0IHQ9Y1szJmU/bzpvLTRdO2ZbZV09ND49b3x8ND5lP3Q6clswXVtuW3Q+Pj4yNF1dXnJbMV1bblt0Pj4xNiYyNTVdXV5yWzJdW25bdD4+OCYyNTVdXV5yWzNdW25bMjU1JnRdXX19ZW5jcnlwdChlKXtyZXR1cm4gdGhpcy5XKGUsMCl9ZGVjcnlwdChlKXtyZXR1cm4gdGhpcy5XKGUsMSl9VCgpe2NvbnN0IGU9dGhpcy5PWzBdLHQ9dGhpcy5PWzFdLG49ZVs0XSxyPXRbNF0scz1bXSxpPVtdO2xldCBvLGMsZixhO2ZvcihsZXQgZT0wOzI1Nj5lO2UrKylpWyhzW2VdPWU8PDFeMjgzKihlPj43KSleZV09ZTtmb3IobGV0IGw9bz0wOyFuW2xdO2xePWN8fDEsbz1pW29dfHwxKXtsZXQgaT1vXm88PDFebzw8Ml5vPDwzXm88PDQ7aT1pPj44XjI1NSZpXjk5LG5bbF09aSxyW2ldPWwsYT1zW2Y9c1tjPXNbbF1dXTtsZXQgdT0xNjg0MzAwOSphXjY1NTM3KmZeMjU3KmNeMTY4NDMwMDgqbCx3PTI1NypzW2ldXjE2ODQzMDA4Kmk7Zm9yKGxldCBuPTA7ND5uO24rKyllW25dW2xdPXc9dzw8MjRedz4+PjgsdFtuXVtpXT11PXU8PDI0XnU+Pj44fWZvcihsZXQgbj0wOzU+bjtuKyspZVtuXT1lW25dLnNsaWNlKDApLHRbbl09dFtuXS5zbGljZSgwKX1XKGUsdCl7aWYoNCE9PWUubGVuZ3RoKXRocm93IG5ldyBzKFwiaW52YWxpZCBhZXMgYmxvY2sgc2l6ZVwiKTtjb25zdCBuPXRoaXMudlt0XSxyPW4ubGVuZ3RoLzQtMixpPVswLDAsMCwwXSxvPXRoaXMuT1t0XSxjPW9bMF0sZj1vWzFdLGE9b1syXSxsPW9bM10sdT1vWzRdO2xldCB3LGgsZCxwPWVbMF1eblswXSx5PWVbdD8zOjFdXm5bMV0sbT1lWzJdXm5bMl0sYj1lW3Q/MTozXV5uWzNdLGc9NDtmb3IobGV0IGU9MDtyPmU7ZSsrKXc9Y1twPj4+MjRdXmZbeT4+MTYmMjU1XV5hW20+PjgmMjU1XV5sWzI1NSZiXV5uW2ddLGg9Y1t5Pj4+MjRdXmZbbT4+MTYmMjU1XV5hW2I+PjgmMjU1XV5sWzI1NSZwXV5uW2crMV0sZD1jW20+Pj4yNF1eZltiPj4xNiYyNTVdXmFbcD4+OCYyNTVdXmxbMjU1JnldXm5bZysyXSxiPWNbYj4+PjI0XV5mW3A+PjE2JjI1NV1eYVt5Pj44JjI1NV1ebFsyNTUmbV1ebltnKzNdLGcrPTQscD13LHk9aCxtPWQ7Zm9yKGxldCBlPTA7ND5lO2UrKylpW3Q/MyYtZTplXT11W3A+Pj4yNF08PDI0XnVbeT4+MTYmMjU1XTw8MTZedVttPj44JjI1NV08PDhedVsyNTUmYl1ebltnKytdLHc9cCxwPXkseT1tLG09YixiPXc7cmV0dXJuIGl9fSxYPWNsYXNze2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5qPWUsdGhpcy5IPXQsdGhpcy5MPXR9cmVzZXQoKXt0aGlzLkw9dGhpcy5IfXVwZGF0ZShlKXtyZXR1cm4gdGhpcy5GKHRoaXMuaixlLHRoaXMuTCl9cShlKXtpZigyNTU9PShlPj4yNCYyNTUpKXtsZXQgdD1lPj4xNiYyNTUsbj1lPj44JjI1NSxyPTI1NSZlOzI1NT09PXQ/KHQ9MCwyNTU9PT1uPyhuPTAsMjU1PT09cj9yPTA6KytyKTorK24pOisrdCxlPTAsZSs9dDw8MTYsZSs9bjw8OCxlKz1yfWVsc2UgZSs9MTw8MjQ7cmV0dXJuIGV9RyhlKXswPT09KGVbMF09dGhpcy5xKGVbMF0pKSYmKGVbMV09dGhpcy5xKGVbMV0pKX1GKGUsdCxuKXtsZXQgcjtpZighKHI9dC5sZW5ndGgpKXJldHVybltdO2NvbnN0IHM9Qy5sKHQpO2ZvcihsZXQgcz0wO3I+cztzKz00KXt0aGlzLkcobik7Y29uc3Qgcj1lLmVuY3J5cHQobik7dFtzXV49clswXSx0W3MrMV1ePXJbMV0sdFtzKzJdXj1yWzJdLHRbcyszXV49clszXX1yZXR1cm4gQy51KHQscyl9fSxZPUkuUjtsZXQgWj1GJiZHJiZ0eXBlb2YgcS5pbXBvcnRLZXk9PUwsJD1GJiZHJiZ0eXBlb2YgcS5kZXJpdmVCaXRzPT1MO2NsYXNzIGVlIGV4dGVuZHMgcHtjb25zdHJ1Y3Rvcih7cGFzc3dvcmQ6ZSxzaWduZWQ6bixlbmNyeXB0aW9uU3RyZW5ndGg6cixjaGVja1Bhc3N3b3JkT25seTpvfSl7c3VwZXIoe3N0YXJ0KCl7dC5hc3NpZ24odGhpcyx7cmVhZHk6bmV3IHUoKGU9PnRoaXMuSj1lKSkscGFzc3dvcmQ6ZSxzaWduZWQ6bixYOnItMSxwZW5kaW5nOm5ldyBpfSl9LGFzeW5jIHRyYW5zZm9ybShlLHQpe2NvbnN0IG49dGhpcyx7cGFzc3dvcmQ6cixYOmMsSjpmLHJlYWR5OmF9PW47cj8oYXdhaXQoYXN5bmMoZSx0LG4scik9Pntjb25zdCBpPWF3YWl0IHJlKGUsdCxuLGllKHIsMCxPW3RdKSksbz1pZShyLE9bdF0pO2lmKGlbMF0hPW9bMF18fGlbMV0hPW9bMV0pdGhyb3cgbmV3IHMoVil9KShuLGMscixpZShlLDAsT1tjXSsyKSksZT1pZShlLE9bY10rMiksbz90LmVycm9yKG5ldyBzKFIpKTpmKCkpOmF3YWl0IGE7Y29uc3QgbD1uZXcgaShlLmxlbmd0aC1XLShlLmxlbmd0aC1XKSVFKTt0LmVucXVldWUobmUobixlLGwsMCxXLCEwKSl9LGFzeW5jIGZsdXNoKGUpe2NvbnN0e3NpZ25lZDp0LFk6bixaOnIscGVuZGluZzpvLHJlYWR5OmN9PXRoaXM7aWYociYmbil7YXdhaXQgYztjb25zdCBmPWllKG8sMCxvLmxlbmd0aC1XKSxhPWllKG8sby5sZW5ndGgtVyk7bGV0IGw9bmV3IGk7aWYoZi5sZW5ndGgpe2NvbnN0IGU9Y2UoSixmKTtyLnVwZGF0ZShlKTtjb25zdCB0PW4udXBkYXRlKGUpO2w9b2UoSix0KX1pZih0KXtjb25zdCBlPWllKG9lKEosci5kaWdlc3QoKSksMCxXKTtmb3IobGV0IHQ9MDtXPnQ7dCsrKWlmKGVbdF0hPWFbdF0pdGhyb3cgbmV3IHMoUCl9ZS5lbnF1ZXVlKGwpfX19KX19Y2xhc3MgdGUgZXh0ZW5kcyBwe2NvbnN0cnVjdG9yKHtwYXNzd29yZDplLGVuY3J5cHRpb25TdHJlbmd0aDpufSl7bGV0IHI7c3VwZXIoe3N0YXJ0KCl7dC5hc3NpZ24odGhpcyx7cmVhZHk6bmV3IHUoKGU9PnRoaXMuSj1lKSkscGFzc3dvcmQ6ZSxYOm4tMSxwZW5kaW5nOm5ldyBpfSl9LGFzeW5jIHRyYW5zZm9ybShlLHQpe2NvbnN0IG49dGhpcyx7cGFzc3dvcmQ6cixYOnMsSjpvLHJlYWR5OmN9PW47bGV0IGY9bmV3IGk7cj8oZj1hd2FpdChhc3luYyhlLHQsbik9Pntjb25zdCByPUIobmV3IGkoT1t0XSkpO3JldHVybiBzZShyLGF3YWl0IHJlKGUsdCxuLHIpKX0pKG4scyxyKSxvKCkpOmF3YWl0IGM7Y29uc3QgYT1uZXcgaShmLmxlbmd0aCtlLmxlbmd0aC1lLmxlbmd0aCVFKTthLnNldChmLDApLHQuZW5xdWV1ZShuZShuLGUsYSxmLmxlbmd0aCwwKSl9LGFzeW5jIGZsdXNoKGUpe2NvbnN0e1k6dCxaOm4scGVuZGluZzpzLHJlYWR5Om99PXRoaXM7aWYobiYmdCl7YXdhaXQgbztsZXQgYz1uZXcgaTtpZihzLmxlbmd0aCl7Y29uc3QgZT10LnVwZGF0ZShjZShKLHMpKTtuLnVwZGF0ZShlKSxjPW9lKEosZSl9ci5zaWduYXR1cmU9b2UoSixuLmRpZ2VzdCgpKS5zbGljZSgwLFcpLGUuZW5xdWV1ZShzZShjLHIuc2lnbmF0dXJlKSl9fX0pLHI9dGhpc319ZnVuY3Rpb24gbmUoZSx0LG4scixzLG8pe2NvbnN0e1k6YyxaOmYscGVuZGluZzphfT1lLGw9dC5sZW5ndGgtcztsZXQgdTtmb3IoYS5sZW5ndGgmJih0PXNlKGEsdCksbj0oKGUsdCk9PntpZih0JiZ0PmUubGVuZ3RoKXtjb25zdCBuPWU7KGU9bmV3IGkodCkpLnNldChuLDApfXJldHVybiBlfSkobixsLWwlRSkpLHU9MDtsLUU+PXU7dSs9RSl7Y29uc3QgZT1jZShKLGllKHQsdSx1K0UpKTtvJiZmLnVwZGF0ZShlKTtjb25zdCBzPWMudXBkYXRlKGUpO298fGYudXBkYXRlKHMpLG4uc2V0KG9lKEoscyksdStyKX1yZXR1cm4gZS5wZW5kaW5nPWllKHQsdSksbn1hc3luYyBmdW5jdGlvbiByZShuLHIscyxvKXtuLnBhc3N3b3JkPW51bGw7Y29uc3QgYz0oZT0+e2lmKHZvaWQgMD09PXcpe2NvbnN0IHQ9bmV3IGkoKGU9dW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGUpKSkubGVuZ3RoKTtmb3IobGV0IG49MDtuPHQubGVuZ3RoO24rKyl0W25dPWUuY2hhckNvZGVBdChuKTtyZXR1cm4gdH1yZXR1cm4obmV3IHcpLmVuY29kZShlKX0pKHMpLGY9YXdhaXQoYXN5bmMoZSx0LG4scixzKT0+e2lmKCFaKXJldHVybiBJLmltcG9ydEtleSh0KTt0cnl7cmV0dXJuIGF3YWl0IHEuaW1wb3J0S2V5KFwicmF3XCIsdCxuLCExLHMpfWNhdGNoKGUpe3JldHVybiBaPSExLEkuaW1wb3J0S2V5KHQpfX0pKDAsYyxVLDAsTiksYT1hd2FpdChhc3luYyhlLHQsbik9PntpZighJClyZXR1cm4gSS5CKHQsZS5zYWx0LEsuaXRlcmF0aW9ucyxuKTt0cnl7cmV0dXJuIGF3YWl0IHEuZGVyaXZlQml0cyhlLHQsbil9Y2F0Y2gocil7cmV0dXJuICQ9ITEsSS5CKHQsZS5zYWx0LEsuaXRlcmF0aW9ucyxuKX19KSh0LmFzc2lnbih7c2FsdDpvfSxLKSxmLDgqKDIqVFtyXSsyKSksbD1uZXcgaShhKSx1PWNlKEosaWUobCwwLFRbcl0pKSxoPWNlKEosaWUobCxUW3JdLDIqVFtyXSkpLGQ9aWUobCwyKlRbcl0pO3JldHVybiB0LmFzc2lnbihuLHtrZXlzOntrZXk6dSwkOmgscGFzc3dvcmRWZXJpZmljYXRpb246ZH0sWTpuZXcgWChuZXcgUSh1KSxlLmZyb20oaikpLFo6bmV3IFkoaCl9KSxkfWZ1bmN0aW9uIHNlKGUsdCl7bGV0IG49ZTtyZXR1cm4gZS5sZW5ndGgrdC5sZW5ndGgmJihuPW5ldyBpKGUubGVuZ3RoK3QubGVuZ3RoKSxuLnNldChlLDApLG4uc2V0KHQsZS5sZW5ndGgpKSxufWZ1bmN0aW9uIGllKGUsdCxuKXtyZXR1cm4gZS5zdWJhcnJheSh0LG4pfWZ1bmN0aW9uIG9lKGUsdCl7cmV0dXJuIGUubSh0KX1mdW5jdGlvbiBjZShlLHQpe3JldHVybiBlLmcodCl9Y2xhc3MgZmUgZXh0ZW5kcyBwe2NvbnN0cnVjdG9yKHtwYXNzd29yZDplLHBhc3N3b3JkVmVyaWZpY2F0aW9uOm4sY2hlY2tQYXNzd29yZE9ubHk6cn0pe3N1cGVyKHtzdGFydCgpe3QuYXNzaWduKHRoaXMse3Bhc3N3b3JkOmUscGFzc3dvcmRWZXJpZmljYXRpb246bn0pLHdlKHRoaXMsZSl9LHRyYW5zZm9ybShlLHQpe2NvbnN0IG49dGhpcztpZihuLnBhc3N3b3JkKXtjb25zdCB0PWxlKG4sZS5zdWJhcnJheSgwLDEyKSk7aWYobi5wYXNzd29yZD1udWxsLHRbMTFdIT1uLnBhc3N3b3JkVmVyaWZpY2F0aW9uKXRocm93IG5ldyBzKFYpO2U9ZS5zdWJhcnJheSgxMil9cj90LmVycm9yKG5ldyBzKFIpKTp0LmVucXVldWUobGUobixlKSl9fSl9fWNsYXNzIGFlIGV4dGVuZHMgcHtjb25zdHJ1Y3Rvcih7cGFzc3dvcmQ6ZSxwYXNzd29yZFZlcmlmaWNhdGlvbjpufSl7c3VwZXIoe3N0YXJ0KCl7dC5hc3NpZ24odGhpcyx7cGFzc3dvcmQ6ZSxwYXNzd29yZFZlcmlmaWNhdGlvbjpufSksd2UodGhpcyxlKX0sdHJhbnNmb3JtKGUsdCl7Y29uc3Qgbj10aGlzO2xldCByLHM7aWYobi5wYXNzd29yZCl7bi5wYXNzd29yZD1udWxsO2NvbnN0IHQ9QihuZXcgaSgxMikpO3RbMTFdPW4ucGFzc3dvcmRWZXJpZmljYXRpb24scj1uZXcgaShlLmxlbmd0aCt0Lmxlbmd0aCksci5zZXQodWUobix0KSwwKSxzPTEyfWVsc2Ugcj1uZXcgaShlLmxlbmd0aCkscz0wO3Iuc2V0KHVlKG4sZSkscyksdC5lbnF1ZXVlKHIpfX0pfX1mdW5jdGlvbiBsZShlLHQpe2NvbnN0IG49bmV3IGkodC5sZW5ndGgpO2ZvcihsZXQgcj0wO3I8dC5sZW5ndGg7cisrKW5bcl09ZGUoZSledFtyXSxoZShlLG5bcl0pO3JldHVybiBufWZ1bmN0aW9uIHVlKGUsdCl7Y29uc3Qgbj1uZXcgaSh0Lmxlbmd0aCk7Zm9yKGxldCByPTA7cjx0Lmxlbmd0aDtyKyspbltyXT1kZShlKV50W3JdLGhlKGUsdFtyXSk7cmV0dXJuIG59ZnVuY3Rpb24gd2UoZSxuKXtjb25zdCByPVszMDU0MTk4OTYsNTkxNzUxMDQ5LDg3ODA4MjE5Ml07dC5hc3NpZ24oZSx7a2V5czpyLGVlOm5ldyBTKHJbMF0pLHRlOm5ldyBTKHJbMl0pfSk7Zm9yKGxldCB0PTA7dDxuLmxlbmd0aDt0KyspaGUoZSxuLmNoYXJDb2RlQXQodCkpfWZ1bmN0aW9uIGhlKGUsdCl7bGV0W24scyxpXT1lLmtleXM7ZS5lZS5hcHBlbmQoW3RdKSxuPX5lLmVlLmdldCgpLHM9eWUoci5pbXVsKHllKHMrcGUobikpLDEzNDc3NTgxMykrMSksZS50ZS5hcHBlbmQoW3M+Pj4yNF0pLGk9fmUudGUuZ2V0KCksZS5rZXlzPVtuLHMsaV19ZnVuY3Rpb24gZGUoZSl7Y29uc3QgdD0yfGUua2V5c1syXTtyZXR1cm4gcGUoci5pbXVsKHQsMV50KT4+PjgpfWZ1bmN0aW9uIHBlKGUpe3JldHVybiAyNTUmZX1mdW5jdGlvbiB5ZShlKXtyZXR1cm4gNDI5NDk2NzI5NSZlfWNvbnN0IG1lPVwiZGVmbGF0ZS1yYXdcIjtjbGFzcyBiZSBleHRlbmRzIHB7Y29uc3RydWN0b3IoZSx7Y2h1bmtTaXplOnQsQ29tcHJlc3Npb25TdHJlYW06bixDb21wcmVzc2lvblN0cmVhbU5hdGl2ZTpyfSl7c3VwZXIoe30pO2NvbnN0e2NvbXByZXNzZWQ6cyxlbmNyeXB0ZWQ6aSx1c2VDb21wcmVzc2lvblN0cmVhbTpvLHppcENyeXB0bzpjLHNpZ25lZDpmLGxldmVsOmF9PWUsdT10aGlzO2xldCB3LGgsZD1rZShzdXBlci5yZWFkYWJsZSk7aSYmIWN8fCFmfHwodz1uZXcgeixkPXplKGQsdykpLHMmJihkPVNlKGQsbyx7bGV2ZWw6YSxjaHVua1NpemU6dH0scixuKSksaSYmKGM/ZD16ZShkLG5ldyBhZShlKSk6KGg9bmV3IHRlKGUpLGQ9emUoZCxoKSkpLHZlKHUsZCwoKCk9PntsZXQgZTtpJiYhYyYmKGU9aC5zaWduYXR1cmUpLGkmJiFjfHwhZnx8KGU9bmV3IGwody52YWx1ZS5idWZmZXIpLmdldFVpbnQzMigwKSksdS5zaWduYXR1cmU9ZX0pKX19Y2xhc3MgZ2UgZXh0ZW5kcyBwe2NvbnN0cnVjdG9yKGUse2NodW5rU2l6ZTp0LERlY29tcHJlc3Npb25TdHJlYW06bixEZWNvbXByZXNzaW9uU3RyZWFtTmF0aXZlOnJ9KXtzdXBlcih7fSk7Y29uc3R7emlwQ3J5cHRvOmksZW5jcnlwdGVkOm8sc2lnbmVkOmMsc2lnbmF0dXJlOmYsY29tcHJlc3NlZDphLHVzZUNvbXByZXNzaW9uU3RyZWFtOnV9PWU7bGV0IHcsaCxkPWtlKHN1cGVyLnJlYWRhYmxlKTtvJiYoaT9kPXplKGQsbmV3IGZlKGUpKTooaD1uZXcgZWUoZSksZD16ZShkLGgpKSksYSYmKGQ9U2UoZCx1LHtjaHVua1NpemU6dH0scixuKSksbyYmIWl8fCFjfHwodz1uZXcgeixkPXplKGQsdykpLHZlKHRoaXMsZCwoKCk9PntpZigoIW98fGkpJiZjKXtjb25zdCBlPW5ldyBsKHcudmFsdWUuYnVmZmVyKTtpZihmIT1lLmdldFVpbnQzMigwLCExKSl0aHJvdyBuZXcgcyhQKX19KSl9fWZ1bmN0aW9uIGtlKGUpe3JldHVybiB6ZShlLG5ldyBwKHt0cmFuc2Zvcm0oZSx0KXtlJiZlLmxlbmd0aCYmdC5lbnF1ZXVlKGUpfX0pKX1mdW5jdGlvbiB2ZShlLG4scil7bj16ZShuLG5ldyBwKHtmbHVzaDpyfSkpLHQuZGVmaW5lUHJvcGVydHkoZSxcInJlYWRhYmxlXCIse2dldDooKT0+bn0pfWZ1bmN0aW9uIFNlKGUsdCxuLHIscyl7dHJ5e2U9emUoZSxuZXcodCYmcj9yOnMpKG1lLG4pKX1jYXRjaChyKXtpZighdCl0aHJvdyByO2U9emUoZSxuZXcgcyhtZSxuKSl9cmV0dXJuIGV9ZnVuY3Rpb24gemUoZSx0KXtyZXR1cm4gZS5waXBlVGhyb3VnaCh0KX1jb25zdCBDZT1cImRhdGFcIjtjbGFzcyB4ZSBleHRlbmRzIHB7Y29uc3RydWN0b3IoZSxuKXtzdXBlcih7fSk7Y29uc3Qgcj10aGlzLHtjb2RlY1R5cGU6c309ZTtsZXQgaTtzLnN0YXJ0c1dpdGgoXCJkZWZsYXRlXCIpP2k9YmU6cy5zdGFydHNXaXRoKFwiaW5mbGF0ZVwiKSYmKGk9Z2UpO2xldCBvPTA7Y29uc3QgYz1uZXcgaShlLG4pLGY9c3VwZXIucmVhZGFibGUsYT1uZXcgcCh7dHJhbnNmb3JtKGUsdCl7ZSYmZS5sZW5ndGgmJihvKz1lLmxlbmd0aCx0LmVucXVldWUoZSkpfSxmbHVzaCgpe2NvbnN0e3NpZ25hdHVyZTplfT1jO3QuYXNzaWduKHIse3NpZ25hdHVyZTplLHNpemU6b30pfX0pO3QuZGVmaW5lUHJvcGVydHkocixcInJlYWRhYmxlXCIse2dldDooKT0+Zi5waXBlVGhyb3VnaChjKS5waXBlVGhyb3VnaChhKX0pfX1jb25zdCBfZT1uZXcgYSxBZT1uZXcgYTtsZXQgSWU9MDthc3luYyBmdW5jdGlvbiBEZShlKXt0cnl7Y29uc3R7b3B0aW9uczp0LHNjcmlwdHM6cixjb25maWc6c309ZTtyJiZyLmxlbmd0aCYmaW1wb3J0U2NyaXB0cy5hcHBseSh2b2lkIDAsciksc2VsZi5pbml0Q29kZWMmJnNlbGYuaW5pdENvZGVjKCkscy5Db21wcmVzc2lvblN0cmVhbU5hdGl2ZT1zZWxmLkNvbXByZXNzaW9uU3RyZWFtLHMuRGVjb21wcmVzc2lvblN0cmVhbU5hdGl2ZT1zZWxmLkRlY29tcHJlc3Npb25TdHJlYW0sc2VsZi5EZWZsYXRlJiYocy5Db21wcmVzc2lvblN0cmVhbT1uZXcgayhzZWxmLkRlZmxhdGUpKSxzZWxmLkluZmxhdGUmJihzLkRlY29tcHJlc3Npb25TdHJlYW09bmV3IGsoc2VsZi5JbmZsYXRlKSk7Y29uc3QgaT17aGlnaFdhdGVyTWFyazoxLHNpemU6KCk9PnMuY2h1bmtTaXplfSxvPWUucmVhZGFibGV8fG5ldyB5KHthc3luYyBwdWxsKGUpe2NvbnN0IHQ9bmV3IHUoKGU9Pl9lLnNldChJZSxlKSkpO1ZlKHt0eXBlOlwicHVsbFwiLG1lc3NhZ2VJZDpJZX0pLEllPShJZSsxKSVuLk1BWF9TQUZFX0lOVEVHRVI7Y29uc3R7dmFsdWU6cixkb25lOnN9PWF3YWl0IHQ7ZS5lbnF1ZXVlKHIpLHMmJmUuY2xvc2UoKX19LGkpLGM9ZS53cml0YWJsZXx8bmV3IG0oe2FzeW5jIHdyaXRlKGUpe2xldCB0O2NvbnN0IHI9bmV3IHUoKGU9PnQ9ZSkpO0FlLnNldChJZSx0KSxWZSh7dHlwZTpDZSx2YWx1ZTplLG1lc3NhZ2VJZDpJZX0pLEllPShJZSsxKSVuLk1BWF9TQUZFX0lOVEVHRVIsYXdhaXQgcn19LGkpLGY9bmV3IHhlKHQscyk7YXdhaXQgby5waXBlVGhyb3VnaChmKS5waXBlVG8oYyx7cHJldmVudENsb3NlOiEwLHByZXZlbnRBYm9ydDohMH0pO3RyeXthd2FpdCBjLmdldFdyaXRlcigpLmNsb3NlKCl9Y2F0Y2goZSl7fWNvbnN0e3NpZ25hdHVyZTphLHNpemU6bH09ZjtWZSh7dHlwZTpcImNsb3NlXCIscmVzdWx0OntzaWduYXR1cmU6YSxzaXplOmx9fSl9Y2F0Y2goZSl7UGUoZSl9fWZ1bmN0aW9uIFZlKGUpe2xldHt2YWx1ZTp0fT1lO2lmKHQpaWYodC5sZW5ndGgpdHJ5e3Q9bmV3IGkodCksZS52YWx1ZT10LmJ1ZmZlcixkKGUsW2UudmFsdWVdKX1jYXRjaCh0KXtkKGUpfWVsc2UgZChlKTtlbHNlIGQoZSl9ZnVuY3Rpb24gUGUoZT1uZXcgcyhcIlVua25vd24gZXJyb3JcIikpe2NvbnN0e21lc3NhZ2U6dCxzdGFjazpuLGNvZGU6cixuYW1lOml9PWU7ZCh7ZXJyb3I6e21lc3NhZ2U6dCxzdGFjazpuLGNvZGU6cixuYW1lOml9fSl9YWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwoKHtkYXRhOmV9KT0+e2NvbnN0e3R5cGU6dCxtZXNzYWdlSWQ6bix2YWx1ZTpyLGRvbmU6c309ZTt0cnl7aWYoXCJzdGFydFwiPT10JiZEZShlKSx0PT1DZSl7Y29uc3QgZT1fZS5nZXQobik7X2UuZGVsZXRlKG4pLGUoe3ZhbHVlOm5ldyBpKHIpLGRvbmU6c30pfWlmKFwiYWNrXCI9PXQpe2NvbnN0IGU9QWUuZ2V0KG4pO0FlLmRlbGV0ZShuKSxlKCl9fWNhdGNoKGUpe1BlKGUpfX0pKTtjb25zdCBSZT0tMjtmdW5jdGlvbiBCZSh0KXtyZXR1cm4gRWUodC5tYXAoKChbdCxuXSk9Pm5ldyBlKHQpLmZpbGwobiwwLHQpKSkpfWZ1bmN0aW9uIEVlKHQpe3JldHVybiB0LnJlZHVjZSgoKHQsbik9PnQuY29uY2F0KGUuaXNBcnJheShuKT9FZShuKTpuKSksW10pfWNvbnN0IE1lPVswLDEsMiwzXS5jb25jYXQoLi4uQmUoW1syLDRdLFsyLDVdLFs0LDZdLFs0LDddLFs4LDhdLFs4LDldLFsxNiwxMF0sWzE2LDExXSxbMzIsMTJdLFszMiwxM10sWzY0LDE0XSxbNjQsMTVdLFsyLDBdLFsxLDE2XSxbMSwxN10sWzIsMThdLFsyLDE5XSxbNCwyMF0sWzQsMjFdLFs4LDIyXSxbOCwyM10sWzE2LDI0XSxbMTYsMjVdLFszMiwyNl0sWzMyLDI3XSxbNjQsMjhdLFs2NCwyOV1dKSk7ZnVuY3Rpb24gVWUoKXtjb25zdCBlPXRoaXM7ZnVuY3Rpb24gdChlLHQpe2xldCBuPTA7ZG97bnw9MSZlLGU+Pj49MSxuPDw9MX13aGlsZSgtLXQ+MCk7cmV0dXJuIG4+Pj4xfWUubmU9bj0+e2NvbnN0IHM9ZS5yZSxpPWUuaWUuc2Usbz1lLmllLm9lO2xldCBjLGYsYSxsPS0xO2ZvcihuLmNlPTAsbi5mZT01NzMsYz0wO28+YztjKyspMCE9PXNbMipjXT8obi5hZVsrK24uY2VdPWw9YyxuLmxlW2NdPTApOnNbMipjKzFdPTA7Zm9yKDsyPm4uY2U7KWE9bi5hZVsrK24uY2VdPTI+bD8rK2w6MCxzWzIqYV09MSxuLmxlW2FdPTAsbi51ZS0tLGkmJihuLndlLT1pWzIqYSsxXSk7Zm9yKGUuaGU9bCxjPXIuZmxvb3Iobi5jZS8yKTtjPj0xO2MtLSluLmRlKHMsYyk7YT1vO2Rve2M9bi5hZVsxXSxuLmFlWzFdPW4uYWVbbi5jZS0tXSxuLmRlKHMsMSksZj1uLmFlWzFdLG4uYWVbLS1uLmZlXT1jLG4uYWVbLS1uLmZlXT1mLHNbMiphXT1zWzIqY10rc1syKmZdLG4ubGVbYV09ci5tYXgobi5sZVtjXSxuLmxlW2ZdKSsxLHNbMipjKzFdPXNbMipmKzFdPWEsbi5hZVsxXT1hKyssbi5kZShzLDEpfXdoaWxlKG4uY2U+PTIpO24uYWVbLS1uLmZlXT1uLmFlWzFdLCh0PT57Y29uc3Qgbj1lLnJlLHI9ZS5pZS5zZSxzPWUuaWUucGUsaT1lLmllLnllLG89ZS5pZS5tZTtsZXQgYyxmLGEsbCx1LHcsaD0wO2ZvcihsPTA7MTU+PWw7bCsrKXQuYmVbbF09MDtmb3IoblsyKnQuYWVbdC5mZV0rMV09MCxjPXQuZmUrMTs1NzM+YztjKyspZj10LmFlW2NdLGw9blsyKm5bMipmKzFdKzFdKzEsbD5vJiYobD1vLGgrKyksblsyKmYrMV09bCxmPmUuaGV8fCh0LmJlW2xdKyssdT0wLGk+Znx8KHU9c1tmLWldKSx3PW5bMipmXSx0LnVlKz13KihsK3UpLHImJih0LndlKz13KihyWzIqZisxXSt1KSkpO2lmKDAhPT1oKXtkb3tmb3IobD1vLTE7MD09PXQuYmVbbF07KWwtLTt0LmJlW2xdLS0sdC5iZVtsKzFdKz0yLHQuYmVbb10tLSxoLT0yfXdoaWxlKGg+MCk7Zm9yKGw9bzswIT09bDtsLS0pZm9yKGY9dC5iZVtsXTswIT09ZjspYT10LmFlWy0tY10sYT5lLmhlfHwoblsyKmErMV0hPWwmJih0LnVlKz0obC1uWzIqYSsxXSkqblsyKmFdLG5bMiphKzFdPWwpLGYtLSl9fSkobiksKChlLG4scik9Pntjb25zdCBzPVtdO2xldCBpLG8sYyxmPTA7Zm9yKGk9MTsxNT49aTtpKyspc1tpXT1mPWYrcltpLTFdPDwxO2ZvcihvPTA7bj49bztvKyspYz1lWzIqbysxXSwwIT09YyYmKGVbMipvXT10KHNbY10rKyxjKSl9KShzLGUuaGUsbi5iZSl9fWZ1bmN0aW9uIEtlKGUsdCxuLHIscyl7Y29uc3QgaT10aGlzO2kuc2U9ZSxpLnBlPXQsaS55ZT1uLGkub2U9cixpLm1lPXN9VWUuZ2U9WzAsMSwyLDMsNCw1LDYsN10uY29uY2F0KC4uLkJlKFtbMiw4XSxbMiw5XSxbMiwxMF0sWzIsMTFdLFs0LDEyXSxbNCwxM10sWzQsMTRdLFs0LDE1XSxbOCwxNl0sWzgsMTddLFs4LDE4XSxbOCwxOV0sWzE2LDIwXSxbMTYsMjFdLFsxNiwyMl0sWzE2LDIzXSxbMzIsMjRdLFszMiwyNV0sWzMyLDI2XSxbMzEsMjddLFsxLDI4XV0pKSxVZS5rZT1bMCwxLDIsMyw0LDUsNiw3LDgsMTAsMTIsMTQsMTYsMjAsMjQsMjgsMzIsNDAsNDgsNTYsNjQsODAsOTYsMTEyLDEyOCwxNjAsMTkyLDIyNCwwXSxVZS52ZT1bMCwxLDIsMyw0LDYsOCwxMiwxNiwyNCwzMiw0OCw2NCw5NiwxMjgsMTkyLDI1NiwzODQsNTEyLDc2OCwxMDI0LDE1MzYsMjA0OCwzMDcyLDQwOTYsNjE0NCw4MTkyLDEyMjg4LDE2Mzg0LDI0NTc2XSxVZS5TZT1lPT4yNTY+ZT9NZVtlXTpNZVsyNTYrKGU+Pj43KV0sVWUuemU9WzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMF0sVWUuQ2U9WzAsMCwwLDAsMSwxLDIsMiwzLDMsNCw0LDUsNSw2LDYsNyw3LDgsOCw5LDksMTAsMTAsMTEsMTEsMTIsMTIsMTMsMTNdLFVlLnhlPVswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDIsMyw3XSxVZS5fZT1bMTYsMTcsMTgsMCw4LDcsOSw2LDEwLDUsMTEsNCwxMiwzLDEzLDIsMTQsMSwxNV07Y29uc3QgTmU9QmUoW1sxNDQsOF0sWzExMiw5XSxbMjQsN10sWzgsOF1dKTtLZS5BZT1FZShbMTIsMTQwLDc2LDIwNCw0NCwxNzIsMTA4LDIzNiwyOCwxNTYsOTIsMjIwLDYwLDE4OCwxMjQsMjUyLDIsMTMwLDY2LDE5NCwzNCwxNjIsOTgsMjI2LDE4LDE0Niw4MiwyMTAsNTAsMTc4LDExNCwyNDIsMTAsMTM4LDc0LDIwMiw0MiwxNzAsMTA2LDIzNCwyNiwxNTQsOTAsMjE4LDU4LDE4NiwxMjIsMjUwLDYsMTM0LDcwLDE5OCwzOCwxNjYsMTAyLDIzMCwyMiwxNTAsODYsMjE0LDU0LDE4MiwxMTgsMjQ2LDE0LDE0Miw3OCwyMDYsNDYsMTc0LDExMCwyMzgsMzAsMTU4LDk0LDIyMiw2MiwxOTAsMTI2LDI1NCwxLDEyOSw2NSwxOTMsMzMsMTYxLDk3LDIyNSwxNywxNDUsODEsMjA5LDQ5LDE3NywxMTMsMjQxLDksMTM3LDczLDIwMSw0MSwxNjksMTA1LDIzMywyNSwxNTMsODksMjE3LDU3LDE4NSwxMjEsMjQ5LDUsMTMzLDY5LDE5NywzNywxNjUsMTAxLDIyOSwyMSwxNDksODUsMjEzLDUzLDE4MSwxMTcsMjQ1LDEzLDE0MSw3NywyMDUsNDUsMTczLDEwOSwyMzcsMjksMTU3LDkzLDIyMSw2MSwxODksMTI1LDI1MywxOSwyNzUsMTQ3LDQwMyw4MywzMzksMjExLDQ2Nyw1MSwzMDcsMTc5LDQzNSwxMTUsMzcxLDI0Myw0OTksMTEsMjY3LDEzOSwzOTUsNzUsMzMxLDIwMyw0NTksNDMsMjk5LDE3MSw0MjcsMTA3LDM2MywyMzUsNDkxLDI3LDI4MywxNTUsNDExLDkxLDM0NywyMTksNDc1LDU5LDMxNSwxODcsNDQzLDEyMywzNzksMjUxLDUwNyw3LDI2MywxMzUsMzkxLDcxLDMyNywxOTksNDU1LDM5LDI5NSwxNjcsNDIzLDEwMywzNTksMjMxLDQ4NywyMywyNzksMTUxLDQwNyw4NywzNDMsMjE1LDQ3MSw1NSwzMTEsMTgzLDQzOSwxMTksMzc1LDI0Nyw1MDMsMTUsMjcxLDE0MywzOTksNzksMzM1LDIwNyw0NjMsNDcsMzAzLDE3NSw0MzEsMTExLDM2NywyMzksNDk1LDMxLDI4NywxNTksNDE1LDk1LDM1MSwyMjMsNDc5LDYzLDMxOSwxOTEsNDQ3LDEyNywzODMsMjU1LDUxMSwwLDY0LDMyLDk2LDE2LDgwLDQ4LDExMiw4LDcyLDQwLDEwNCwyNCw4OCw1NiwxMjAsNCw2OCwzNiwxMDAsMjAsODQsNTIsMTE2LDMsMTMxLDY3LDE5NSwzNSwxNjMsOTksMjI3XS5tYXAoKChlLHQpPT5bZSxOZVt0XV0pKSk7Y29uc3QgT2U9QmUoW1szMCw1XV0pO2Z1bmN0aW9uIFRlKGUsdCxuLHIscyl7Y29uc3QgaT10aGlzO2kuSWU9ZSxpLkRlPXQsaS5WZT1uLGkuUGU9cixpLlJlPXN9S2UuQmU9RWUoWzAsMTYsOCwyNCw0LDIwLDEyLDI4LDIsMTgsMTAsMjYsNiwyMiwxNCwzMCwxLDE3LDksMjUsNSwyMSwxMywyOSwzLDE5LDExLDI3LDcsMjNdLm1hcCgoKGUsdCk9PltlLE9lW3RdXSkpKSxLZS5FZT1uZXcgS2UoS2UuQWUsVWUuemUsMjU3LDI4NiwxNSksS2UuTWU9bmV3IEtlKEtlLkJlLFVlLkNlLDAsMzAsMTUpLEtlLlVlPW5ldyBLZShudWxsLFVlLnhlLDAsMTksNyk7Y29uc3QgV2U9W25ldyBUZSgwLDAsMCwwLDApLG5ldyBUZSg0LDQsOCw0LDEpLG5ldyBUZSg0LDUsMTYsOCwxKSxuZXcgVGUoNCw2LDMyLDMyLDEpLG5ldyBUZSg0LDQsMTYsMTYsMiksbmV3IFRlKDgsMTYsMzIsMzIsMiksbmV3IFRlKDgsMTYsMTI4LDEyOCwyKSxuZXcgVGUoOCwzMiwxMjgsMjU2LDIpLG5ldyBUZSgzMiwxMjgsMjU4LDEwMjQsMiksbmV3IFRlKDMyLDI1OCwyNTgsNDA5NiwyKV0samU9W1wibmVlZCBkaWN0aW9uYXJ5XCIsXCJzdHJlYW0gZW5kXCIsXCJcIixcIlwiLFwic3RyZWFtIGVycm9yXCIsXCJkYXRhIGVycm9yXCIsXCJcIixcImJ1ZmZlciBlcnJvclwiLFwiXCIsXCJcIl0sSGU9MTEzLExlPTY2NixGZT0yNjI7ZnVuY3Rpb24gcWUoZSx0LG4scil7Y29uc3Qgcz1lWzIqdF0saT1lWzIqbl07cmV0dXJuIGk+c3x8cz09aSYmclt0XTw9cltuXX1mdW5jdGlvbiBHZSgpe2NvbnN0IGU9dGhpcztsZXQgdCxuLHMsYyxmLGEsbCx1LHcsaCxkLHAseSxtLGIsZyxrLHYsUyx6LEMseCxfLEEsSSxELFYsUCxSLEIsRSxNLFU7Y29uc3QgSz1uZXcgVWUsTj1uZXcgVWUsTz1uZXcgVWU7bGV0IFQsVyxqLEgsTCxGO2Z1bmN0aW9uIHEoKXtsZXQgdDtmb3IodD0wOzI4Nj50O3QrKylFWzIqdF09MDtmb3IodD0wOzMwPnQ7dCsrKU1bMip0XT0wO2Zvcih0PTA7MTk+dDt0KyspVVsyKnRdPTA7RVs1MTJdPTEsZS51ZT1lLndlPTAsVz1qPTB9ZnVuY3Rpb24gRyhlLHQpe2xldCBuLHI9LTEscz1lWzFdLGk9MCxvPTcsYz00OzA9PT1zJiYobz0xMzgsYz0zKSxlWzIqKHQrMSkrMV09NjU1MzU7Zm9yKGxldCBmPTA7dD49ZjtmKyspbj1zLHM9ZVsyKihmKzEpKzFdLCsraTxvJiZuPT1zfHwoYz5pP1VbMipuXSs9aTowIT09bj8obiE9ciYmVVsyKm5dKyssVVszMl0rKyk6aT4xMD9VWzM2XSsrOlVbMzRdKyssaT0wLHI9biwwPT09cz8obz0xMzgsYz0zKTpuPT1zPyhvPTYsYz0zKToobz03LGM9NCkpfWZ1bmN0aW9uIEoodCl7ZS5LZVtlLnBlbmRpbmcrK109dH1mdW5jdGlvbiBRKGUpe0ooMjU1JmUpLEooZT4+PjgmMjU1KX1mdW5jdGlvbiBYKGUsdCl7bGV0IG47Y29uc3Qgcj10O0Y+MTYtcj8obj1lLEx8PW48PEYmNjU1MzUsUShMKSxMPW4+Pj4xNi1GLEYrPXItMTYpOihMfD1lPDxGJjY1NTM1LEYrPXIpfWZ1bmN0aW9uIFkoZSx0KXtjb25zdCBuPTIqZTtYKDY1NTM1JnRbbl0sNjU1MzUmdFtuKzFdKX1mdW5jdGlvbiBaKGUsdCl7bGV0IG4scixzPS0xLGk9ZVsxXSxvPTAsYz03LGY9NDtmb3IoMD09PWkmJihjPTEzOCxmPTMpLG49MDt0Pj1uO24rKylpZihyPWksaT1lWzIqKG4rMSkrMV0sKytvPj1jfHxyIT1pKXtpZihmPm8pZG97WShyLFUpfXdoaWxlKDAhPS0tbyk7ZWxzZSAwIT09cj8ociE9cyYmKFkocixVKSxvLS0pLFkoMTYsVSksWChvLTMsMikpOm8+MTA/KFkoMTgsVSksWChvLTExLDcpKTooWSgxNyxVKSxYKG8tMywzKSk7bz0wLHM9ciwwPT09aT8oYz0xMzgsZj0zKTpyPT1pPyhjPTYsZj0zKTooYz03LGY9NCl9fWZ1bmN0aW9uICQoKXsxNj09Rj8oUShMKSxMPTAsRj0wKTo4PkZ8fChKKDI1NSZMKSxMPj4+PTgsRi09OCl9ZnVuY3Rpb24gZWUodCxuKXtsZXQgcyxpLG87aWYoZS5OZVtXXT10LGUuT2VbV109MjU1Jm4sVysrLDA9PT10P0VbMipuXSsrOihqKyssdC0tLEVbMiooVWUuZ2Vbbl0rMjU2KzEpXSsrLE1bMipVZS5TZSh0KV0rKyksMD09KDgxOTEmVykmJlY+Mil7Zm9yKHM9OCpXLGk9Qy1rLG89MDszMD5vO28rKylzKz1NWzIqb10qKDUrVWUuQ2Vbb10pO2lmKHM+Pj49MyxqPHIuZmxvb3IoVy8yKSYmczxyLmZsb29yKGkvMikpcmV0dXJuITB9cmV0dXJuIFc9PVQtMX1mdW5jdGlvbiB0ZSh0LG4pe2xldCByLHMsaSxvLGM9MDtpZigwIT09Vylkb3tyPWUuTmVbY10scz1lLk9lW2NdLGMrKywwPT09cj9ZKHMsdCk6KGk9VWUuZ2Vbc10sWShpKzI1NisxLHQpLG89VWUuemVbaV0sMCE9PW8mJihzLT1VZS5rZVtpXSxYKHMsbykpLHItLSxpPVVlLlNlKHIpLFkoaSxuKSxvPVVlLkNlW2ldLDAhPT1vJiYoci09VWUudmVbaV0sWChyLG8pKSl9d2hpbGUoVz5jKTtZKDI1Nix0KSxIPXRbNTEzXX1mdW5jdGlvbiBuZSgpe0Y+OD9RKEwpOkY+MCYmSigyNTUmTCksTD0wLEY9MH1mdW5jdGlvbiByZSh0LG4scil7WCgwKyhyPzE6MCksMyksKCh0LG4pPT57bmUoKSxIPTgsUShuKSxRKH5uKSxlLktlLnNldCh1LnN1YmFycmF5KHQsdCtuKSxlLnBlbmRpbmcpLGUucGVuZGluZys9bn0pKHQsbil9ZnVuY3Rpb24gc2Uobil7KCh0LG4scik9PntsZXQgcyxpLG89MDtWPjA/KEsubmUoZSksTi5uZShlKSxvPSgoKT0+e2xldCB0O2ZvcihHKEUsSy5oZSksRyhNLE4uaGUpLE8ubmUoZSksdD0xODt0Pj0zJiYwPT09VVsyKlVlLl9lW3RdKzFdO3QtLSk7cmV0dXJuIGUudWUrPTE0KzMqKHQrMSksdH0pKCkscz1lLnVlKzMrNz4+PjMsaT1lLndlKzMrNz4+PjMsaT5zfHwocz1pKSk6cz1pPW4rNSxuKzQ+c3x8LTE9PXQ/aT09cz8oWCgyKyhyPzE6MCksMyksdGUoS2UuQWUsS2UuQmUpKTooWCg0KyhyPzE6MCksMyksKChlLHQsbik9PntsZXQgcjtmb3IoWChlLTI1Nyw1KSxYKHQtMSw1KSxYKG4tNCw0KSxyPTA7bj5yO3IrKylYKFVbMipVZS5fZVtyXSsxXSwzKTtaKEUsZS0xKSxaKE0sdC0xKX0pKEsuaGUrMSxOLmhlKzEsbysxKSx0ZShFLE0pKTpyZSh0LG4scikscSgpLHImJm5lKCl9KSgwPms/LTE6ayxDLWssbiksaz1DLHQuVGUoKX1mdW5jdGlvbiBpZSgpe2xldCBlLG4scixzO2Rve2lmKHM9dy1fLUMsMD09PXMmJjA9PT1DJiYwPT09XylzPWY7ZWxzZSBpZigtMT09cylzLS07ZWxzZSBpZihDPj1mK2YtRmUpe3Uuc2V0KHUuc3ViYXJyYXkoZixmK2YpLDApLHgtPWYsQy09ZixrLT1mLGU9eSxyPWU7ZG97bj02NTUzNSZkWy0tcl0sZFtyXT1mPm4/MDpuLWZ9d2hpbGUoMCE9LS1lKTtlPWYscj1lO2Rve249NjU1MzUmaFstLXJdLGhbcl09Zj5uPzA6bi1mfXdoaWxlKDAhPS0tZSk7cys9Zn1pZigwPT09dC5XZSlyZXR1cm47ZT10LmplKHUsQytfLHMpLF8rPWUsMz5ffHwocD0yNTUmdVtDXSxwPShwPDxnXjI1NSZ1W0MrMV0pJmIpfXdoaWxlKEZlPl8mJjAhPT10LldlKX1mdW5jdGlvbiBvZShlKXtsZXQgdCxuLHI9SSxzPUMsaT1BO2NvbnN0IG89Qz5mLUZlP0MtKGYtRmUpOjA7bGV0IGM9Qjtjb25zdCBhPWwsdz1DKzI1ODtsZXQgZD11W3MraS0xXSxwPXVbcytpXTtSPkF8fChyPj49MiksYz5fJiYoYz1fKTtkb3tpZih0PWUsdVt0K2ldPT1wJiZ1W3QraS0xXT09ZCYmdVt0XT09dVtzXSYmdVsrK3RdPT11W3MrMV0pe3MrPTIsdCsrO2Rve313aGlsZSh1Wysrc109PXVbKyt0XSYmdVsrK3NdPT11WysrdF0mJnVbKytzXT09dVsrK3RdJiZ1Wysrc109PXVbKyt0XSYmdVsrK3NdPT11WysrdF0mJnVbKytzXT09dVsrK3RdJiZ1Wysrc109PXVbKyt0XSYmdVsrK3NdPT11WysrdF0mJnc+cyk7aWYobj0yNTgtKHctcykscz13LTI1OCxuPmkpe2lmKHg9ZSxpPW4sbj49YylicmVhaztkPXVbcytpLTFdLHA9dVtzK2ldfX19d2hpbGUoKGU9NjU1MzUmaFtlJmFdKT5vJiYwIT0tLXIpO3JldHVybiBpPl8/XzppfWUubGU9W10sZS5iZT1bXSxlLmFlPVtdLEU9W10sTT1bXSxVPVtdLGUuZGU9KHQsbik9Pntjb25zdCByPWUuYWUscz1yW25dO2xldCBpPW48PDE7Zm9yKDtpPD1lLmNlJiYoaTxlLmNlJiZxZSh0LHJbaSsxXSxyW2ldLGUubGUpJiZpKyssIXFlKHQscyxyW2ldLGUubGUpKTspcltuXT1yW2ldLG49aSxpPDw9MTtyW25dPXN9LGUuSGU9KHQsUyx4LFcsaixHKT0+KFd8fChXPTgpLGp8fChqPTgpLEd8fChHPTApLHQuTGU9bnVsbCwtMT09UyYmKFM9NiksMT5qfHxqPjl8fDghPVd8fDk+eHx8eD4xNXx8MD5TfHxTPjl8fDA+R3x8Rz4yP1JlOih0LkZlPWUsYT14LGY9MTw8YSxsPWYtMSxtPWorNyx5PTE8PG0sYj15LTEsZz1yLmZsb29yKChtKzMtMSkvMyksdT1uZXcgaSgyKmYpLGg9W10sZD1bXSxUPTE8PGorNixlLktlPW5ldyBpKDQqVCkscz00KlQsZS5OZT1uZXcgbyhUKSxlLk9lPW5ldyBpKFQpLFY9UyxQPUcsKHQ9Pih0LnFlPXQuR2U9MCx0LkxlPW51bGwsZS5wZW5kaW5nPTAsZS5KZT0wLG49SGUsYz0wLEsucmU9RSxLLmllPUtlLkVlLE4ucmU9TSxOLmllPUtlLk1lLE8ucmU9VSxPLmllPUtlLlVlLEw9MCxGPTAsSD04LHEoKSwoKCk9Pnt3PTIqZixkW3ktMV09MDtmb3IobGV0IGU9MDt5LTE+ZTtlKyspZFtlXT0wO0Q9V2VbVl0uRGUsUj1XZVtWXS5JZSxCPVdlW1ZdLlZlLEk9V2VbVl0uUGUsQz0wLGs9MCxfPTAsdj1BPTIsej0wLHA9MH0pKCksMCkpKHQpKSksZS5RZT0oKT0+NDIhPW4mJm4hPUhlJiZuIT1MZT9SZTooZS5PZT1udWxsLGUuTmU9bnVsbCxlLktlPW51bGwsZD1udWxsLGg9bnVsbCx1PW51bGwsZS5GZT1udWxsLG49PUhlPy0zOjApLGUuWGU9KGUsdCxuKT0+e2xldCByPTA7cmV0dXJuLTE9PXQmJih0PTYpLDA+dHx8dD45fHwwPm58fG4+Mj9SZTooV2VbVl0uUmUhPVdlW3RdLlJlJiYwIT09ZS5xZSYmKHI9ZS5ZZSgxKSksViE9dCYmKFY9dCxEPVdlW1ZdLkRlLFI9V2VbVl0uSWUsQj1XZVtWXS5WZSxJPVdlW1ZdLlBlKSxQPW4scil9LGUuWmU9KGUsdCxyKT0+e2xldCBzLGk9cixvPTA7aWYoIXR8fDQyIT1uKXJldHVybiBSZTtpZigzPmkpcmV0dXJuIDA7Zm9yKGk+Zi1GZSYmKGk9Zi1GZSxvPXItaSksdS5zZXQodC5zdWJhcnJheShvLG8raSksMCksQz1pLGs9aSxwPTI1NSZ1WzBdLHA9KHA8PGdeMjU1JnVbMV0pJmIscz0wO2ktMz49cztzKyspcD0ocDw8Z14yNTUmdVtzKzJdKSZiLGhbcyZsXT1kW3BdLGRbcF09cztyZXR1cm4gMH0sZS5ZZT0ocixpKT0+e2xldCBvLHcsbSxJLFI7aWYoaT40fHwwPmkpcmV0dXJuIFJlO2lmKCFyLiRlfHwhci5ldCYmMCE9PXIuV2V8fG49PUxlJiY0IT1pKXJldHVybiByLkxlPWplWzRdLFJlO2lmKDA9PT1yLnR0KXJldHVybiByLkxlPWplWzddLC01O3ZhciBCO2lmKHQ9cixJPWMsYz1pLDQyPT1uJiYodz04KyhhLTg8PDQpPDw4LG09KFYtMSYyNTUpPj4xLG0+MyYmKG09Myksd3w9bTw8NiwwIT09QyYmKHd8PTMyKSx3Kz0zMS13JTMxLG49SGUsSigoQj13KT4+OCYyNTUpLEooMjU1JkIpKSwwIT09ZS5wZW5kaW5nKXtpZih0LlRlKCksMD09PXQudHQpcmV0dXJuIGM9LTEsMH1lbHNlIGlmKDA9PT10LldlJiZJPj1pJiY0IT1pKXJldHVybiB0LkxlPWplWzddLC01O2lmKG49PUxlJiYwIT09dC5XZSlyZXR1cm4gci5MZT1qZVs3XSwtNTtpZigwIT09dC5XZXx8MCE9PV98fDAhPWkmJm4hPUxlKXtzd2l0Y2goUj0tMSxXZVtWXS5SZSl7Y2FzZSAwOlI9KGU9PntsZXQgbixyPTY1NTM1O2ZvcihyPnMtNSYmKHI9cy01KTs7KXtpZigxPj1fKXtpZihpZSgpLDA9PT1fJiYwPT1lKXJldHVybiAwO2lmKDA9PT1fKWJyZWFrfWlmKEMrPV8sXz0wLG49aytyLCgwPT09Q3x8Qz49bikmJihfPUMtbixDPW4sc2UoITEpLDA9PT10LnR0KSlyZXR1cm4gMDtpZihDLWs+PWYtRmUmJihzZSghMSksMD09PXQudHQpKXJldHVybiAwfXJldHVybiBzZSg0PT1lKSwwPT09dC50dD80PT1lPzI6MDo0PT1lPzM6MX0pKGkpO2JyZWFrO2Nhc2UgMTpSPShlPT57bGV0IG4scj0wO2Zvcig7Oyl7aWYoRmU+Xyl7aWYoaWUoKSxGZT5fJiYwPT1lKXJldHVybiAwO2lmKDA9PT1fKWJyZWFrfWlmKDM+X3x8KHA9KHA8PGdeMjU1JnVbQysyXSkmYixyPTY1NTM1JmRbcF0saFtDJmxdPWRbcF0sZFtwXT1DKSwwPT09cnx8KEMtciY2NTUzNSk+Zi1GZXx8MiE9UCYmKHY9b2UocikpLDM+diluPWVlKDAsMjU1JnVbQ10pLF8tLSxDKys7ZWxzZSBpZihuPWVlKEMteCx2LTMpLF8tPXYsdj5EfHwzPl8pQys9dix2PTAscD0yNTUmdVtDXSxwPShwPDxnXjI1NSZ1W0MrMV0pJmI7ZWxzZXt2LS07ZG97QysrLHA9KHA8PGdeMjU1JnVbQysyXSkmYixyPTY1NTM1JmRbcF0saFtDJmxdPWRbcF0sZFtwXT1DfXdoaWxlKDAhPS0tdik7QysrfWlmKG4mJihzZSghMSksMD09PXQudHQpKXJldHVybiAwfXJldHVybiBzZSg0PT1lKSwwPT09dC50dD80PT1lPzI6MDo0PT1lPzM6MX0pKGkpO2JyZWFrO2Nhc2UgMjpSPShlPT57bGV0IG4scixzPTA7Zm9yKDs7KXtpZihGZT5fKXtpZihpZSgpLEZlPl8mJjA9PWUpcmV0dXJuIDA7aWYoMD09PV8pYnJlYWt9aWYoMz5ffHwocD0ocDw8Z14yNTUmdVtDKzJdKSZiLHM9NjU1MzUmZFtwXSxoW0MmbF09ZFtwXSxkW3BdPUMpLEE9dixTPXgsdj0yLDAhPT1zJiZEPkEmJmYtRmU+PShDLXMmNjU1MzUpJiYoMiE9UCYmKHY9b2UocykpLDU+PXYmJigxPT1QfHwzPT12JiZDLXg+NDA5NikmJih2PTIpKSwzPkF8fHY+QSlpZigwIT09eil7aWYobj1lZSgwLDI1NSZ1W0MtMV0pLG4mJnNlKCExKSxDKyssXy0tLDA9PT10LnR0KXJldHVybiAwfWVsc2Ugej0xLEMrKyxfLS07ZWxzZXtyPUMrXy0zLG49ZWUoQy0xLVMsQS0zKSxfLT1BLTEsQS09Mjtkb3srK0M+cnx8KHA9KHA8PGdeMjU1JnVbQysyXSkmYixzPTY1NTM1JmRbcF0saFtDJmxdPWRbcF0sZFtwXT1DKX13aGlsZSgwIT0tLUEpO2lmKHo9MCx2PTIsQysrLG4mJihzZSghMSksMD09PXQudHQpKXJldHVybiAwfX1yZXR1cm4gMCE9PXomJihuPWVlKDAsMjU1JnVbQy0xXSksej0wKSxzZSg0PT1lKSwwPT09dC50dD80PT1lPzI6MDo0PT1lPzM6MX0pKGkpfWlmKDIhPVImJjMhPVJ8fChuPUxlKSwwPT1SfHwyPT1SKXJldHVybiAwPT09dC50dCYmKGM9LTEpLDA7aWYoMT09Uil7aWYoMT09aSlYKDIsMyksWSgyNTYsS2UuQWUpLCQoKSw5PjErSCsxMC1GJiYoWCgyLDMpLFkoMjU2LEtlLkFlKSwkKCkpLEg9NztlbHNlIGlmKHJlKDAsMCwhMSksMz09aSlmb3Iobz0wO3k+bztvKyspZFtvXT0wO2lmKHQuVGUoKSwwPT09dC50dClyZXR1cm4gYz0tMSwwfX1yZXR1cm4gNCE9aT8wOjF9fWZ1bmN0aW9uIEplKCl7Y29uc3QgZT10aGlzO2UubnQ9MCxlLnJ0PTAsZS5XZT0wLGUucWU9MCxlLnR0PTAsZS5HZT0wfWZ1bmN0aW9uIFFlKGUpe2NvbnN0IHQ9bmV3IEplLG49KG89ZSYmZS5jaHVua1NpemU/ZS5jaHVua1NpemU6NjU1MzYpKzUqKHIuZmxvb3Ioby8xNjM4MykrMSk7dmFyIG87Y29uc3QgYz1uZXcgaShuKTtsZXQgZj1lP2UubGV2ZWw6LTE7dm9pZCAwPT09ZiYmKGY9LTEpLHQuSGUoZiksdC4kZT1jLHRoaXMuYXBwZW5kPShlLHIpPT57bGV0IG8sZixhPTAsbD0wLHU9MDtjb25zdCB3PVtdO2lmKGUubGVuZ3RoKXt0Lm50PTAsdC5ldD1lLHQuV2U9ZS5sZW5ndGg7ZG97aWYodC5ydD0wLHQudHQ9bixvPXQuWWUoMCksMCE9byl0aHJvdyBuZXcgcyhcImRlZmxhdGluZzogXCIrdC5MZSk7dC5ydCYmKHQucnQ9PW4/dy5wdXNoKG5ldyBpKGMpKTp3LnB1c2goYy5zdWJhcnJheSgwLHQucnQpKSksdSs9dC5ydCxyJiZ0Lm50PjAmJnQubnQhPWEmJihyKHQubnQpLGE9dC5udCl9d2hpbGUodC5XZT4wfHwwPT09dC50dCk7cmV0dXJuIHcubGVuZ3RoPjE/KGY9bmV3IGkodSksdy5mb3JFYWNoKChlPT57Zi5zZXQoZSxsKSxsKz1lLmxlbmd0aH0pKSk6Zj13WzBdP25ldyBpKHdbMF0pOm5ldyBpLGZ9fSx0aGlzLmZsdXNoPSgpPT57bGV0IGUscixvPTAsZj0wO2NvbnN0IGE9W107ZG97aWYodC5ydD0wLHQudHQ9bixlPXQuWWUoNCksMSE9ZSYmMCE9ZSl0aHJvdyBuZXcgcyhcImRlZmxhdGluZzogXCIrdC5MZSk7bi10LnR0PjAmJmEucHVzaChjLnNsaWNlKDAsdC5ydCkpLGYrPXQucnR9d2hpbGUodC5XZT4wfHwwPT09dC50dCk7cmV0dXJuIHQuUWUoKSxyPW5ldyBpKGYpLGEuZm9yRWFjaCgoZT0+e3Iuc2V0KGUsbyksbys9ZS5sZW5ndGh9KSkscn19SmUucHJvdG90eXBlPXtIZShlLHQpe2NvbnN0IG49dGhpcztyZXR1cm4gbi5GZT1uZXcgR2UsdHx8KHQ9MTUpLG4uRmUuSGUobixlLHQpfSxZZShlKXtjb25zdCB0PXRoaXM7cmV0dXJuIHQuRmU/dC5GZS5ZZSh0LGUpOlJlfSxRZSgpe2NvbnN0IGU9dGhpcztpZighZS5GZSlyZXR1cm4gUmU7Y29uc3QgdD1lLkZlLlFlKCk7cmV0dXJuIGUuRmU9bnVsbCx0fSxYZShlLHQpe2NvbnN0IG49dGhpcztyZXR1cm4gbi5GZT9uLkZlLlhlKG4sZSx0KTpSZX0sWmUoZSx0KXtjb25zdCBuPXRoaXM7cmV0dXJuIG4uRmU/bi5GZS5aZShuLGUsdCk6UmV9LGplKGUsdCxuKXtjb25zdCByPXRoaXM7bGV0IHM9ci5XZTtyZXR1cm4gcz5uJiYocz1uKSwwPT09cz8wOihyLldlLT1zLGUuc2V0KHIuZXQuc3ViYXJyYXkoci5udCxyLm50K3MpLHQpLHIubnQrPXMsci5xZSs9cyxzKX0sVGUoKXtjb25zdCBlPXRoaXM7bGV0IHQ9ZS5GZS5wZW5kaW5nO3Q+ZS50dCYmKHQ9ZS50dCksMCE9PXQmJihlLiRlLnNldChlLkZlLktlLnN1YmFycmF5KGUuRmUuSmUsZS5GZS5KZSt0KSxlLnJ0KSxlLnJ0Kz10LGUuRmUuSmUrPXQsZS5HZSs9dCxlLnR0LT10LGUuRmUucGVuZGluZy09dCwwPT09ZS5GZS5wZW5kaW5nJiYoZS5GZS5KZT0wKSl9fTtjb25zdCBYZT0tMixZZT0tMyxaZT0tNSwkZT1bMCwxLDMsNywxNSwzMSw2MywxMjcsMjU1LDUxMSwxMDIzLDIwNDcsNDA5NSw4MTkxLDE2MzgzLDMyNzY3LDY1NTM1XSxldD1bOTYsNywyNTYsMCw4LDgwLDAsOCwxNiw4NCw4LDExNSw4Miw3LDMxLDAsOCwxMTIsMCw4LDQ4LDAsOSwxOTIsODAsNywxMCwwLDgsOTYsMCw4LDMyLDAsOSwxNjAsMCw4LDAsMCw4LDEyOCwwLDgsNjQsMCw5LDIyNCw4MCw3LDYsMCw4LDg4LDAsOCwyNCwwLDksMTQ0LDgzLDcsNTksMCw4LDEyMCwwLDgsNTYsMCw5LDIwOCw4MSw3LDE3LDAsOCwxMDQsMCw4LDQwLDAsOSwxNzYsMCw4LDgsMCw4LDEzNiwwLDgsNzIsMCw5LDI0MCw4MCw3LDQsMCw4LDg0LDAsOCwyMCw4NSw4LDIyNyw4Myw3LDQzLDAsOCwxMTYsMCw4LDUyLDAsOSwyMDAsODEsNywxMywwLDgsMTAwLDAsOCwzNiwwLDksMTY4LDAsOCw0LDAsOCwxMzIsMCw4LDY4LDAsOSwyMzIsODAsNyw4LDAsOCw5MiwwLDgsMjgsMCw5LDE1Miw4NCw3LDgzLDAsOCwxMjQsMCw4LDYwLDAsOSwyMTYsODIsNywyMywwLDgsMTA4LDAsOCw0NCwwLDksMTg0LDAsOCwxMiwwLDgsMTQwLDAsOCw3NiwwLDksMjQ4LDgwLDcsMywwLDgsODIsMCw4LDE4LDg1LDgsMTYzLDgzLDcsMzUsMCw4LDExNCwwLDgsNTAsMCw5LDE5Niw4MSw3LDExLDAsOCw5OCwwLDgsMzQsMCw5LDE2NCwwLDgsMiwwLDgsMTMwLDAsOCw2NiwwLDksMjI4LDgwLDcsNywwLDgsOTAsMCw4LDI2LDAsOSwxNDgsODQsNyw2NywwLDgsMTIyLDAsOCw1OCwwLDksMjEyLDgyLDcsMTksMCw4LDEwNiwwLDgsNDIsMCw5LDE4MCwwLDgsMTAsMCw4LDEzOCwwLDgsNzQsMCw5LDI0NCw4MCw3LDUsMCw4LDg2LDAsOCwyMiwxOTIsOCwwLDgzLDcsNTEsMCw4LDExOCwwLDgsNTQsMCw5LDIwNCw4MSw3LDE1LDAsOCwxMDIsMCw4LDM4LDAsOSwxNzIsMCw4LDYsMCw4LDEzNCwwLDgsNzAsMCw5LDIzNiw4MCw3LDksMCw4LDk0LDAsOCwzMCwwLDksMTU2LDg0LDcsOTksMCw4LDEyNiwwLDgsNjIsMCw5LDIyMCw4Miw3LDI3LDAsOCwxMTAsMCw4LDQ2LDAsOSwxODgsMCw4LDE0LDAsOCwxNDIsMCw4LDc4LDAsOSwyNTIsOTYsNywyNTYsMCw4LDgxLDAsOCwxNyw4NSw4LDEzMSw4Miw3LDMxLDAsOCwxMTMsMCw4LDQ5LDAsOSwxOTQsODAsNywxMCwwLDgsOTcsMCw4LDMzLDAsOSwxNjIsMCw4LDEsMCw4LDEyOSwwLDgsNjUsMCw5LDIyNiw4MCw3LDYsMCw4LDg5LDAsOCwyNSwwLDksMTQ2LDgzLDcsNTksMCw4LDEyMSwwLDgsNTcsMCw5LDIxMCw4MSw3LDE3LDAsOCwxMDUsMCw4LDQxLDAsOSwxNzgsMCw4LDksMCw4LDEzNywwLDgsNzMsMCw5LDI0Miw4MCw3LDQsMCw4LDg1LDAsOCwyMSw4MCw4LDI1OCw4Myw3LDQzLDAsOCwxMTcsMCw4LDUzLDAsOSwyMDIsODEsNywxMywwLDgsMTAxLDAsOCwzNywwLDksMTcwLDAsOCw1LDAsOCwxMzMsMCw4LDY5LDAsOSwyMzQsODAsNyw4LDAsOCw5MywwLDgsMjksMCw5LDE1NCw4NCw3LDgzLDAsOCwxMjUsMCw4LDYxLDAsOSwyMTgsODIsNywyMywwLDgsMTA5LDAsOCw0NSwwLDksMTg2LDAsOCwxMywwLDgsMTQxLDAsOCw3NywwLDksMjUwLDgwLDcsMywwLDgsODMsMCw4LDE5LDg1LDgsMTk1LDgzLDcsMzUsMCw4LDExNSwwLDgsNTEsMCw5LDE5OCw4MSw3LDExLDAsOCw5OSwwLDgsMzUsMCw5LDE2NiwwLDgsMywwLDgsMTMxLDAsOCw2NywwLDksMjMwLDgwLDcsNywwLDgsOTEsMCw4LDI3LDAsOSwxNTAsODQsNyw2NywwLDgsMTIzLDAsOCw1OSwwLDksMjE0LDgyLDcsMTksMCw4LDEwNywwLDgsNDMsMCw5LDE4MiwwLDgsMTEsMCw4LDEzOSwwLDgsNzUsMCw5LDI0Niw4MCw3LDUsMCw4LDg3LDAsOCwyMywxOTIsOCwwLDgzLDcsNTEsMCw4LDExOSwwLDgsNTUsMCw5LDIwNiw4MSw3LDE1LDAsOCwxMDMsMCw4LDM5LDAsOSwxNzQsMCw4LDcsMCw4LDEzNSwwLDgsNzEsMCw5LDIzOCw4MCw3LDksMCw4LDk1LDAsOCwzMSwwLDksMTU4LDg0LDcsOTksMCw4LDEyNywwLDgsNjMsMCw5LDIyMiw4Miw3LDI3LDAsOCwxMTEsMCw4LDQ3LDAsOSwxOTAsMCw4LDE1LDAsOCwxNDMsMCw4LDc5LDAsOSwyNTQsOTYsNywyNTYsMCw4LDgwLDAsOCwxNiw4NCw4LDExNSw4Miw3LDMxLDAsOCwxMTIsMCw4LDQ4LDAsOSwxOTMsODAsNywxMCwwLDgsOTYsMCw4LDMyLDAsOSwxNjEsMCw4LDAsMCw4LDEyOCwwLDgsNjQsMCw5LDIyNSw4MCw3LDYsMCw4LDg4LDAsOCwyNCwwLDksMTQ1LDgzLDcsNTksMCw4LDEyMCwwLDgsNTYsMCw5LDIwOSw4MSw3LDE3LDAsOCwxMDQsMCw4LDQwLDAsOSwxNzcsMCw4LDgsMCw4LDEzNiwwLDgsNzIsMCw5LDI0MSw4MCw3LDQsMCw4LDg0LDAsOCwyMCw4NSw4LDIyNyw4Myw3LDQzLDAsOCwxMTYsMCw4LDUyLDAsOSwyMDEsODEsNywxMywwLDgsMTAwLDAsOCwzNiwwLDksMTY5LDAsOCw0LDAsOCwxMzIsMCw4LDY4LDAsOSwyMzMsODAsNyw4LDAsOCw5MiwwLDgsMjgsMCw5LDE1Myw4NCw3LDgzLDAsOCwxMjQsMCw4LDYwLDAsOSwyMTcsODIsNywyMywwLDgsMTA4LDAsOCw0NCwwLDksMTg1LDAsOCwxMiwwLDgsMTQwLDAsOCw3NiwwLDksMjQ5LDgwLDcsMywwLDgsODIsMCw4LDE4LDg1LDgsMTYzLDgzLDcsMzUsMCw4LDExNCwwLDgsNTAsMCw5LDE5Nyw4MSw3LDExLDAsOCw5OCwwLDgsMzQsMCw5LDE2NSwwLDgsMiwwLDgsMTMwLDAsOCw2NiwwLDksMjI5LDgwLDcsNywwLDgsOTAsMCw4LDI2LDAsOSwxNDksODQsNyw2NywwLDgsMTIyLDAsOCw1OCwwLDksMjEzLDgyLDcsMTksMCw4LDEwNiwwLDgsNDIsMCw5LDE4MSwwLDgsMTAsMCw4LDEzOCwwLDgsNzQsMCw5LDI0NSw4MCw3LDUsMCw4LDg2LDAsOCwyMiwxOTIsOCwwLDgzLDcsNTEsMCw4LDExOCwwLDgsNTQsMCw5LDIwNSw4MSw3LDE1LDAsOCwxMDIsMCw4LDM4LDAsOSwxNzMsMCw4LDYsMCw4LDEzNCwwLDgsNzAsMCw5LDIzNyw4MCw3LDksMCw4LDk0LDAsOCwzMCwwLDksMTU3LDg0LDcsOTksMCw4LDEyNiwwLDgsNjIsMCw5LDIyMSw4Miw3LDI3LDAsOCwxMTAsMCw4LDQ2LDAsOSwxODksMCw4LDE0LDAsOCwxNDIsMCw4LDc4LDAsOSwyNTMsOTYsNywyNTYsMCw4LDgxLDAsOCwxNyw4NSw4LDEzMSw4Miw3LDMxLDAsOCwxMTMsMCw4LDQ5LDAsOSwxOTUsODAsNywxMCwwLDgsOTcsMCw4LDMzLDAsOSwxNjMsMCw4LDEsMCw4LDEyOSwwLDgsNjUsMCw5LDIyNyw4MCw3LDYsMCw4LDg5LDAsOCwyNSwwLDksMTQ3LDgzLDcsNTksMCw4LDEyMSwwLDgsNTcsMCw5LDIxMSw4MSw3LDE3LDAsOCwxMDUsMCw4LDQxLDAsOSwxNzksMCw4LDksMCw4LDEzNywwLDgsNzMsMCw5LDI0Myw4MCw3LDQsMCw4LDg1LDAsOCwyMSw4MCw4LDI1OCw4Myw3LDQzLDAsOCwxMTcsMCw4LDUzLDAsOSwyMDMsODEsNywxMywwLDgsMTAxLDAsOCwzNywwLDksMTcxLDAsOCw1LDAsOCwxMzMsMCw4LDY5LDAsOSwyMzUsODAsNyw4LDAsOCw5MywwLDgsMjksMCw5LDE1NSw4NCw3LDgzLDAsOCwxMjUsMCw4LDYxLDAsOSwyMTksODIsNywyMywwLDgsMTA5LDAsOCw0NSwwLDksMTg3LDAsOCwxMywwLDgsMTQxLDAsOCw3NywwLDksMjUxLDgwLDcsMywwLDgsODMsMCw4LDE5LDg1LDgsMTk1LDgzLDcsMzUsMCw4LDExNSwwLDgsNTEsMCw5LDE5OSw4MSw3LDExLDAsOCw5OSwwLDgsMzUsMCw5LDE2NywwLDgsMywwLDgsMTMxLDAsOCw2NywwLDksMjMxLDgwLDcsNywwLDgsOTEsMCw4LDI3LDAsOSwxNTEsODQsNyw2NywwLDgsMTIzLDAsOCw1OSwwLDksMjE1LDgyLDcsMTksMCw4LDEwNywwLDgsNDMsMCw5LDE4MywwLDgsMTEsMCw4LDEzOSwwLDgsNzUsMCw5LDI0Nyw4MCw3LDUsMCw4LDg3LDAsOCwyMywxOTIsOCwwLDgzLDcsNTEsMCw4LDExOSwwLDgsNTUsMCw5LDIwNyw4MSw3LDE1LDAsOCwxMDMsMCw4LDM5LDAsOSwxNzUsMCw4LDcsMCw4LDEzNSwwLDgsNzEsMCw5LDIzOSw4MCw3LDksMCw4LDk1LDAsOCwzMSwwLDksMTU5LDg0LDcsOTksMCw4LDEyNywwLDgsNjMsMCw5LDIyMyw4Miw3LDI3LDAsOCwxMTEsMCw4LDQ3LDAsOSwxOTEsMCw4LDE1LDAsOCwxNDMsMCw4LDc5LDAsOSwyNTVdLHR0PVs4MCw1LDEsODcsNSwyNTcsODMsNSwxNyw5MSw1LDQwOTcsODEsNSw1LDg5LDUsMTAyNSw4NSw1LDY1LDkzLDUsMTYzODUsODAsNSwzLDg4LDUsNTEzLDg0LDUsMzMsOTIsNSw4MTkzLDgyLDUsOSw5MCw1LDIwNDksODYsNSwxMjksMTkyLDUsMjQ1NzcsODAsNSwyLDg3LDUsMzg1LDgzLDUsMjUsOTEsNSw2MTQ1LDgxLDUsNyw4OSw1LDE1MzcsODUsNSw5Nyw5Myw1LDI0NTc3LDgwLDUsNCw4OCw1LDc2OSw4NCw1LDQ5LDkyLDUsMTIyODksODIsNSwxMyw5MCw1LDMwNzMsODYsNSwxOTMsMTkyLDUsMjQ1NzddLG50PVszLDQsNSw2LDcsOCw5LDEwLDExLDEzLDE1LDE3LDE5LDIzLDI3LDMxLDM1LDQzLDUxLDU5LDY3LDgzLDk5LDExNSwxMzEsMTYzLDE5NSwyMjcsMjU4LDAsMF0scnQ9WzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMCwxMTIsMTEyXSxzdD1bMSwyLDMsNCw1LDcsOSwxMywxNywyNSwzMyw0OSw2NSw5NywxMjksMTkzLDI1NywzODUsNTEzLDc2OSwxMDI1LDE1MzcsMjA0OSwzMDczLDQwOTcsNjE0NSw4MTkzLDEyMjg5LDE2Mzg1LDI0NTc3XSxpdD1bMCwwLDAsMCwxLDEsMiwyLDMsMyw0LDQsNSw1LDYsNiw3LDcsOCw4LDksOSwxMCwxMCwxMSwxMSwxMiwxMiwxMywxM107ZnVuY3Rpb24gb3QoKXtsZXQgZSx0LG4scixzLGk7ZnVuY3Rpb24gbyhlLHQsbyxjLGYsYSxsLHUsdyxoLGQpe2xldCBwLHksbSxiLGcsayx2LFMseixDLHgsXyxBLEksRDtDPTAsZz1vO2Rve25bZVt0K0NdXSsrLEMrKyxnLS19d2hpbGUoMCE9PWcpO2lmKG5bMF09PW8pcmV0dXJuIGxbMF09LTEsdVswXT0wLDA7Zm9yKFM9dVswXSxrPTE7MTU+PWsmJjA9PT1uW2tdO2srKyk7Zm9yKHY9ayxrPlMmJihTPWspLGc9MTU7MCE9PWcmJjA9PT1uW2ddO2ctLSk7Zm9yKG09ZyxTPmcmJihTPWcpLHVbMF09UyxJPTE8PGs7Zz5rO2srKyxJPDw9MSlpZigwPihJLT1uW2tdKSlyZXR1cm4gWWU7aWYoMD4oSS09bltnXSkpcmV0dXJuIFllO2ZvcihuW2ddKz1JLGlbMV09az0wLEM9MSxBPTI7MCE9LS1nOylpW0FdPWsrPW5bQ10sQSsrLEMrKztnPTAsQz0wO2RvezAhPT0oaz1lW3QrQ10pJiYoZFtpW2tdKytdPWcpLEMrK313aGlsZSgrK2c8byk7Zm9yKG89aVttXSxpWzBdPWc9MCxDPTAsYj0tMSxfPS1TLHNbMF09MCx4PTAsRD0wO20+PXY7disrKWZvcihwPW5bdl07MCE9cC0tOyl7Zm9yKDt2Pl8rUzspe2lmKGIrKyxfKz1TLEQ9bS1fLEQ9RD5TP1M6RCwoeT0xPDwoaz12LV8pKT5wKzEmJih5LT1wKzEsQT12LEQ+aykpZm9yKDsrK2s8RCYmKHk8PD0xKT5uWysrQV07KXktPW5bQV07aWYoRD0xPDxrLGhbMF0rRD4xNDQwKXJldHVybiBZZTtzW2JdPXg9aFswXSxoWzBdKz1ELDAhPT1iPyhpW2JdPWcsclswXT1rLHJbMV09UyxrPWc+Pj5fLVMsclsyXT14LXNbYi0xXS1rLHcuc2V0KHIsMyooc1tiLTFdK2spKSk6bFswXT14fWZvcihyWzFdPXYtXyxvPkM/ZFtDXTxjPyhyWzBdPTI1Nj5kW0NdPzA6OTYsclsyXT1kW0MrK10pOihyWzBdPWFbZFtDXS1jXSsxNis2NCxyWzJdPWZbZFtDKytdLWNdKTpyWzBdPTE5Mix5PTE8PHYtXyxrPWc+Pj5fO0Q+aztrKz15KXcuc2V0KHIsMyooeCtrKSk7Zm9yKGs9MTw8di0xOzAhPShnJmspO2s+Pj49MSlnXj1rO2ZvcihnXj1rLHo9KDE8PF8pLTE7KGcmeikhPWlbYl07KWItLSxfLT1TLHo9KDE8PF8pLTF9cmV0dXJuIDAhPT1JJiYxIT1tP1plOjB9ZnVuY3Rpb24gYyhvKXtsZXQgYztmb3IoZXx8KGU9W10sdD1bXSxuPW5ldyBmKDE2KSxyPVtdLHM9bmV3IGYoMTUpLGk9bmV3IGYoMTYpKSx0Lmxlbmd0aDxvJiYodD1bXSksYz0wO28+YztjKyspdFtjXT0wO2ZvcihjPTA7MTY+YztjKyspbltjXT0wO2ZvcihjPTA7Mz5jO2MrKylyW2NdPTA7cy5zZXQobi5zdWJhcnJheSgwLDE1KSwwKSxpLnNldChuLnN1YmFycmF5KDAsMTYpLDApfXRoaXMuc3Q9KG4scixzLGksZik9PntsZXQgYTtyZXR1cm4gYygxOSksZVswXT0wLGE9byhuLDAsMTksMTksbnVsbCxudWxsLHMscixpLGUsdCksYT09WWU/Zi5MZT1cIm92ZXJzdWJzY3JpYmVkIGR5bmFtaWMgYml0IGxlbmd0aHMgdHJlZVwiOmEhPVplJiYwIT09clswXXx8KGYuTGU9XCJpbmNvbXBsZXRlIGR5bmFtaWMgYml0IGxlbmd0aHMgdHJlZVwiLGE9WWUpLGF9LHRoaXMuaXQ9KG4scixzLGksZixhLGwsdSx3KT0+e2xldCBoO3JldHVybiBjKDI4OCksZVswXT0wLGg9byhzLDAsbiwyNTcsbnQscnQsYSxpLHUsZSx0KSwwIT1ofHwwPT09aVswXT8oaD09WWU/dy5MZT1cIm92ZXJzdWJzY3JpYmVkIGxpdGVyYWwvbGVuZ3RoIHRyZWVcIjotNCE9aCYmKHcuTGU9XCJpbmNvbXBsZXRlIGxpdGVyYWwvbGVuZ3RoIHRyZWVcIixoPVllKSxoKTooYygyODgpLGg9byhzLG4sciwwLHN0LGl0LGwsZix1LGUsdCksMCE9aHx8MD09PWZbMF0mJm4+MjU3PyhoPT1ZZT93LkxlPVwib3ZlcnN1YnNjcmliZWQgZGlzdGFuY2UgdHJlZVwiOmg9PVplPyh3LkxlPVwiaW5jb21wbGV0ZSBkaXN0YW5jZSB0cmVlXCIsaD1ZZSk6LTQhPWgmJih3LkxlPVwiZW1wdHkgZGlzdGFuY2UgdHJlZSB3aXRoIGxlbmd0aHNcIixoPVllKSxoKTowKX19ZnVuY3Rpb24gY3QoKXtjb25zdCBlPXRoaXM7bGV0IHQsbixyLHMsaT0wLG89MCxjPTAsZj0wLGE9MCxsPTAsdT0wLHc9MCxoPTAsZD0wO2Z1bmN0aW9uIHAoZSx0LG4scixzLGksbyxjKXtsZXQgZixhLGwsdSx3LGgsZCxwLHksbSxiLGcsayx2LFMsejtkPWMubnQscD1jLldlLHc9by5vdCxoPW8uY3QseT1vLndyaXRlLG09eTxvLnJlYWQ/by5yZWFkLXktMTpvLmVuZC15LGI9JGVbZV0sZz0kZVt0XTtkb3tmb3IoOzIwPmg7KXAtLSx3fD0oMjU1JmMuZnQoZCsrKSk8PGgsaCs9ODtpZihmPXcmYixhPW4sbD1yLHo9MyoobCtmKSwwIT09KHU9YVt6XSkpZm9yKDs7KXtpZih3Pj49YVt6KzFdLGgtPWFbeisxXSwwIT0oMTYmdSkpe2Zvcih1Jj0xNSxrPWFbeisyXSsodyYkZVt1XSksdz4+PXUsaC09dTsxNT5oOylwLS0sd3w9KDI1NSZjLmZ0KGQrKykpPDxoLGgrPTg7Zm9yKGY9dyZnLGE9cyxsPWksej0zKihsK2YpLHU9YVt6XTs7KXtpZih3Pj49YVt6KzFdLGgtPWFbeisxXSwwIT0oMTYmdSkpe2Zvcih1Jj0xNTt1Pmg7KXAtLSx3fD0oMjU1JmMuZnQoZCsrKSk8PGgsaCs9ODtpZih2PWFbeisyXSsodyYkZVt1XSksdz4+PXUsaC09dSxtLT1rLHY+eSl7Uz15LXY7ZG97Uys9by5lbmR9d2hpbGUoMD5TKTtpZih1PW8uZW5kLVMsaz51KXtpZihrLT11LHktUz4wJiZ1PnktUylkb3tvLmx0W3krK109by5sdFtTKytdfXdoaWxlKDAhPS0tdSk7ZWxzZSBvLmx0LnNldChvLmx0LnN1YmFycmF5KFMsUyt1KSx5KSx5Kz11LFMrPXUsdT0wO1M9MH19ZWxzZSBTPXktdix5LVM+MCYmMj55LVM/KG8ubHRbeSsrXT1vLmx0W1MrK10sby5sdFt5KytdPW8ubHRbUysrXSxrLT0yKTooby5sdC5zZXQoby5sdC5zdWJhcnJheShTLFMrMikseSkseSs9MixTKz0yLGstPTIpO2lmKHktUz4wJiZrPnktUylkb3tvLmx0W3krK109by5sdFtTKytdfXdoaWxlKDAhPS0tayk7ZWxzZSBvLmx0LnNldChvLmx0LnN1YmFycmF5KFMsUytrKSx5KSx5Kz1rLFMrPWssaz0wO2JyZWFrfWlmKDAhPSg2NCZ1KSlyZXR1cm4gYy5MZT1cImludmFsaWQgZGlzdGFuY2UgY29kZVwiLGs9Yy5XZS1wLGs9az5oPj4zP2g+PjM6ayxwKz1rLGQtPWssaC09azw8MyxvLm90PXcsby5jdD1oLGMuV2U9cCxjLnFlKz1kLWMubnQsYy5udD1kLG8ud3JpdGU9eSxZZTtmKz1hW3orMl0sZis9dyYkZVt1XSx6PTMqKGwrZiksdT1hW3pdfWJyZWFrfWlmKDAhPSg2NCZ1KSlyZXR1cm4gMCE9KDMyJnUpPyhrPWMuV2UtcCxrPWs+aD4+Mz9oPj4zOmsscCs9ayxkLT1rLGgtPWs8PDMsby5vdD13LG8uY3Q9aCxjLldlPXAsYy5xZSs9ZC1jLm50LGMubnQ9ZCxvLndyaXRlPXksMSk6KGMuTGU9XCJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGVcIixrPWMuV2UtcCxrPWs+aD4+Mz9oPj4zOmsscCs9ayxkLT1rLGgtPWs8PDMsby5vdD13LG8uY3Q9aCxjLldlPXAsYy5xZSs9ZC1jLm50LGMubnQ9ZCxvLndyaXRlPXksWWUpO2lmKGYrPWFbeisyXSxmKz13JiRlW3VdLHo9MyoobCtmKSwwPT09KHU9YVt6XSkpe3c+Pj1hW3orMV0saC09YVt6KzFdLG8ubHRbeSsrXT1hW3orMl0sbS0tO2JyZWFrfX1lbHNlIHc+Pj1hW3orMV0saC09YVt6KzFdLG8ubHRbeSsrXT1hW3orMl0sbS0tfXdoaWxlKG0+PTI1OCYmcD49MTApO3JldHVybiBrPWMuV2UtcCxrPWs+aD4+Mz9oPj4zOmsscCs9ayxkLT1rLGgtPWs8PDMsby5vdD13LG8uY3Q9aCxjLldlPXAsYy5xZSs9ZC1jLm50LGMubnQ9ZCxvLndyaXRlPXksMH1lLmluaXQ9KGUsaSxvLGMsZixhKT0+e3Q9MCx1PWUsdz1pLHI9byxoPWMscz1mLGQ9YSxuPW51bGx9LGUudXQ9KGUseSxtKT0+e2xldCBiLGcsayx2LFMseixDLHg9MCxfPTAsQT0wO2ZvcihBPXkubnQsdj15LldlLHg9ZS5vdCxfPWUuY3QsUz1lLndyaXRlLHo9UzxlLnJlYWQ/ZS5yZWFkLVMtMTplLmVuZC1TOzspc3dpdGNoKHQpe2Nhc2UgMDppZih6Pj0yNTgmJnY+PTEwJiYoZS5vdD14LGUuY3Q9Xyx5LldlPXYseS5xZSs9QS15Lm50LHkubnQ9QSxlLndyaXRlPVMsbT1wKHUsdyxyLGgscyxkLGUseSksQT15Lm50LHY9eS5XZSx4PWUub3QsXz1lLmN0LFM9ZS53cml0ZSx6PVM8ZS5yZWFkP2UucmVhZC1TLTE6ZS5lbmQtUywwIT1tKSl7dD0xPT1tPzc6OTticmVha31jPXUsbj1yLG89aCx0PTE7Y2FzZSAxOmZvcihiPWM7Yj5fOyl7aWYoMD09PXYpcmV0dXJuIGUub3Q9eCxlLmN0PV8seS5XZT12LHkucWUrPUEteS5udCx5Lm50PUEsZS53cml0ZT1TLGUud3QoeSxtKTttPTAsdi0tLHh8PSgyNTUmeS5mdChBKyspKTw8XyxfKz04fWlmKGc9MyoobysoeCYkZVtiXSkpLHg+Pj49bltnKzFdLF8tPW5bZysxXSxrPW5bZ10sMD09PWspe2Y9bltnKzJdLHQ9NjticmVha31pZigwIT0oMTYmaykpe2E9MTUmayxpPW5bZysyXSx0PTI7YnJlYWt9aWYoMD09KDY0JmspKXtjPWssbz1nLzMrbltnKzJdO2JyZWFrfWlmKDAhPSgzMiZrKSl7dD03O2JyZWFrfXJldHVybiB0PTkseS5MZT1cImludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZVwiLG09WWUsZS5vdD14LGUuY3Q9Xyx5LldlPXYseS5xZSs9QS15Lm50LHkubnQ9QSxlLndyaXRlPVMsZS53dCh5LG0pO2Nhc2UgMjpmb3IoYj1hO2I+Xzspe2lmKDA9PT12KXJldHVybiBlLm90PXgsZS5jdD1fLHkuV2U9dix5LnFlKz1BLXkubnQseS5udD1BLGUud3JpdGU9UyxlLnd0KHksbSk7bT0wLHYtLSx4fD0oMjU1JnkuZnQoQSsrKSk8PF8sXys9OH1pKz14JiRlW2JdLHg+Pj1iLF8tPWIsYz13LG49cyxvPWQsdD0zO2Nhc2UgMzpmb3IoYj1jO2I+Xzspe2lmKDA9PT12KXJldHVybiBlLm90PXgsZS5jdD1fLHkuV2U9dix5LnFlKz1BLXkubnQseS5udD1BLGUud3JpdGU9UyxlLnd0KHksbSk7bT0wLHYtLSx4fD0oMjU1JnkuZnQoQSsrKSk8PF8sXys9OH1pZihnPTMqKG8rKHgmJGVbYl0pKSx4Pj49bltnKzFdLF8tPW5bZysxXSxrPW5bZ10sMCE9KDE2JmspKXthPTE1JmssbD1uW2crMl0sdD00O2JyZWFrfWlmKDA9PSg2NCZrKSl7Yz1rLG89Zy8zK25bZysyXTticmVha31yZXR1cm4gdD05LHkuTGU9XCJpbnZhbGlkIGRpc3RhbmNlIGNvZGVcIixtPVllLGUub3Q9eCxlLmN0PV8seS5XZT12LHkucWUrPUEteS5udCx5Lm50PUEsZS53cml0ZT1TLGUud3QoeSxtKTtjYXNlIDQ6Zm9yKGI9YTtiPl87KXtpZigwPT09dilyZXR1cm4gZS5vdD14LGUuY3Q9Xyx5LldlPXYseS5xZSs9QS15Lm50LHkubnQ9QSxlLndyaXRlPVMsZS53dCh5LG0pO209MCx2LS0seHw9KDI1NSZ5LmZ0KEErKykpPDxfLF8rPTh9bCs9eCYkZVtiXSx4Pj49YixfLT1iLHQ9NTtjYXNlIDU6Zm9yKEM9Uy1sOzA+QzspQys9ZS5lbmQ7Zm9yKDswIT09aTspe2lmKDA9PT16JiYoUz09ZS5lbmQmJjAhPT1lLnJlYWQmJihTPTAsej1TPGUucmVhZD9lLnJlYWQtUy0xOmUuZW5kLVMpLDA9PT16JiYoZS53cml0ZT1TLG09ZS53dCh5LG0pLFM9ZS53cml0ZSx6PVM8ZS5yZWFkP2UucmVhZC1TLTE6ZS5lbmQtUyxTPT1lLmVuZCYmMCE9PWUucmVhZCYmKFM9MCx6PVM8ZS5yZWFkP2UucmVhZC1TLTE6ZS5lbmQtUyksMD09PXopKSlyZXR1cm4gZS5vdD14LGUuY3Q9Xyx5LldlPXYseS5xZSs9QS15Lm50LHkubnQ9QSxlLndyaXRlPVMsZS53dCh5LG0pO2UubHRbUysrXT1lLmx0W0MrK10sei0tLEM9PWUuZW5kJiYoQz0wKSxpLS19dD0wO2JyZWFrO2Nhc2UgNjppZigwPT09eiYmKFM9PWUuZW5kJiYwIT09ZS5yZWFkJiYoUz0wLHo9UzxlLnJlYWQ/ZS5yZWFkLVMtMTplLmVuZC1TKSwwPT09eiYmKGUud3JpdGU9UyxtPWUud3QoeSxtKSxTPWUud3JpdGUsej1TPGUucmVhZD9lLnJlYWQtUy0xOmUuZW5kLVMsUz09ZS5lbmQmJjAhPT1lLnJlYWQmJihTPTAsej1TPGUucmVhZD9lLnJlYWQtUy0xOmUuZW5kLVMpLDA9PT16KSkpcmV0dXJuIGUub3Q9eCxlLmN0PV8seS5XZT12LHkucWUrPUEteS5udCx5Lm50PUEsZS53cml0ZT1TLGUud3QoeSxtKTttPTAsZS5sdFtTKytdPWYsei0tLHQ9MDticmVhaztjYXNlIDc6aWYoXz43JiYoXy09OCx2KyssQS0tKSxlLndyaXRlPVMsbT1lLnd0KHksbSksUz1lLndyaXRlLHo9UzxlLnJlYWQ/ZS5yZWFkLVMtMTplLmVuZC1TLGUucmVhZCE9ZS53cml0ZSlyZXR1cm4gZS5vdD14LGUuY3Q9Xyx5LldlPXYseS5xZSs9QS15Lm50LHkubnQ9QSxlLndyaXRlPVMsZS53dCh5LG0pO3Q9ODtjYXNlIDg6cmV0dXJuIG09MSxlLm90PXgsZS5jdD1fLHkuV2U9dix5LnFlKz1BLXkubnQseS5udD1BLGUud3JpdGU9UyxlLnd0KHksbSk7Y2FzZSA5OnJldHVybiBtPVllLGUub3Q9eCxlLmN0PV8seS5XZT12LHkucWUrPUEteS5udCx5Lm50PUEsZS53cml0ZT1TLGUud3QoeSxtKTtkZWZhdWx0OnJldHVybiBtPVhlLGUub3Q9eCxlLmN0PV8seS5XZT12LHkucWUrPUEteS5udCx5Lm50PUEsZS53cml0ZT1TLGUud3QoeSxtKX19LGUuaHQ9KCk9Pnt9fW90LmR0PShlLHQsbixyKT0+KGVbMF09OSx0WzBdPTUsblswXT1ldCxyWzBdPXR0LDApO2NvbnN0IGZ0PVsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XTtmdW5jdGlvbiBhdChlLHQpe2NvbnN0IG49dGhpcztsZXQgcixzPTAsbz0wLGM9MCxhPTA7Y29uc3QgbD1bMF0sdT1bMF0sdz1uZXcgY3Q7bGV0IGg9MCxkPW5ldyBmKDQzMjApO2NvbnN0IHA9bmV3IG90O24uY3Q9MCxuLm90PTAsbi5sdD1uZXcgaSh0KSxuLmVuZD10LG4ucmVhZD0wLG4ud3JpdGU9MCxuLnJlc2V0PShlLHQpPT57dCYmKHRbMF09MCksNj09cyYmdy5odChlKSxzPTAsbi5jdD0wLG4ub3Q9MCxuLnJlYWQ9bi53cml0ZT0wfSxuLnJlc2V0KGUsbnVsbCksbi53dD0oZSx0KT0+e2xldCByLHMsaTtyZXR1cm4gcz1lLnJ0LGk9bi5yZWFkLHI9KGk+bi53cml0ZT9uLmVuZDpuLndyaXRlKS1pLHI+ZS50dCYmKHI9ZS50dCksMCE9PXImJnQ9PVplJiYodD0wKSxlLnR0LT1yLGUuR2UrPXIsZS4kZS5zZXQobi5sdC5zdWJhcnJheShpLGkrcikscykscys9cixpKz1yLGk9PW4uZW5kJiYoaT0wLG4ud3JpdGU9PW4uZW5kJiYobi53cml0ZT0wKSxyPW4ud3JpdGUtaSxyPmUudHQmJihyPWUudHQpLDAhPT1yJiZ0PT1aZSYmKHQ9MCksZS50dC09cixlLkdlKz1yLGUuJGUuc2V0KG4ubHQuc3ViYXJyYXkoaSxpK3IpLHMpLHMrPXIsaSs9ciksZS5ydD1zLG4ucmVhZD1pLHR9LG4udXQ9KGUsdCk9PntsZXQgaSxmLHksbSxiLGcsayx2O2ZvcihtPWUubnQsYj1lLldlLGY9bi5vdCx5PW4uY3QsZz1uLndyaXRlLGs9ZzxuLnJlYWQ/bi5yZWFkLWctMTpuLmVuZC1nOzspe2xldCBTLHosQyx4LF8sQSxJLEQ7c3dpdGNoKHMpe2Nhc2UgMDpmb3IoOzM+eTspe2lmKDA9PT1iKXJldHVybiBuLm90PWYsbi5jdD15LGUuV2U9YixlLnFlKz1tLWUubnQsZS5udD1tLG4ud3JpdGU9ZyxuLnd0KGUsdCk7dD0wLGItLSxmfD0oMjU1JmUuZnQobSsrKSk8PHkseSs9OH1zd2l0Y2goaT03JmYsaD0xJmksaT4+PjEpe2Nhc2UgMDpmPj4+PTMseS09MyxpPTcmeSxmPj4+PWkseS09aSxzPTE7YnJlYWs7Y2FzZSAxOlM9W10sej1bXSxDPVtbXV0seD1bW11dLG90LmR0KFMseixDLHgpLHcuaW5pdChTWzBdLHpbMF0sQ1swXSwwLHhbMF0sMCksZj4+Pj0zLHktPTMscz02O2JyZWFrO2Nhc2UgMjpmPj4+PTMseS09MyxzPTM7YnJlYWs7Y2FzZSAzOnJldHVybiBmPj4+PTMseS09MyxzPTksZS5MZT1cImludmFsaWQgYmxvY2sgdHlwZVwiLHQ9WWUsbi5vdD1mLG4uY3Q9eSxlLldlPWIsZS5xZSs9bS1lLm50LGUubnQ9bSxuLndyaXRlPWcsbi53dChlLHQpfWJyZWFrO2Nhc2UgMTpmb3IoOzMyPnk7KXtpZigwPT09YilyZXR1cm4gbi5vdD1mLG4uY3Q9eSxlLldlPWIsZS5xZSs9bS1lLm50LGUubnQ9bSxuLndyaXRlPWcsbi53dChlLHQpO3Q9MCxiLS0sZnw9KDI1NSZlLmZ0KG0rKykpPDx5LHkrPTh9aWYoKH5mPj4+MTYmNjU1MzUpIT0oNjU1MzUmZikpcmV0dXJuIHM9OSxlLkxlPVwiaW52YWxpZCBzdG9yZWQgYmxvY2sgbGVuZ3Roc1wiLHQ9WWUsbi5vdD1mLG4uY3Q9eSxlLldlPWIsZS5xZSs9bS1lLm50LGUubnQ9bSxuLndyaXRlPWcsbi53dChlLHQpO289NjU1MzUmZixmPXk9MCxzPTAhPT1vPzI6MCE9PWg/NzowO2JyZWFrO2Nhc2UgMjppZigwPT09YilyZXR1cm4gbi5vdD1mLG4uY3Q9eSxlLldlPWIsZS5xZSs9bS1lLm50LGUubnQ9bSxuLndyaXRlPWcsbi53dChlLHQpO2lmKDA9PT1rJiYoZz09bi5lbmQmJjAhPT1uLnJlYWQmJihnPTAsaz1nPG4ucmVhZD9uLnJlYWQtZy0xOm4uZW5kLWcpLDA9PT1rJiYobi53cml0ZT1nLHQ9bi53dChlLHQpLGc9bi53cml0ZSxrPWc8bi5yZWFkP24ucmVhZC1nLTE6bi5lbmQtZyxnPT1uLmVuZCYmMCE9PW4ucmVhZCYmKGc9MCxrPWc8bi5yZWFkP24ucmVhZC1nLTE6bi5lbmQtZyksMD09PWspKSlyZXR1cm4gbi5vdD1mLG4uY3Q9eSxlLldlPWIsZS5xZSs9bS1lLm50LGUubnQ9bSxuLndyaXRlPWcsbi53dChlLHQpO2lmKHQ9MCxpPW8saT5iJiYoaT1iKSxpPmsmJihpPWspLG4ubHQuc2V0KGUuamUobSxpKSxnKSxtKz1pLGItPWksZys9aSxrLT1pLDAhPShvLT1pKSlicmVhaztzPTAhPT1oPzc6MDticmVhaztjYXNlIDM6Zm9yKDsxND55Oyl7aWYoMD09PWIpcmV0dXJuIG4ub3Q9ZixuLmN0PXksZS5XZT1iLGUucWUrPW0tZS5udCxlLm50PW0sbi53cml0ZT1nLG4ud3QoZSx0KTt0PTAsYi0tLGZ8PSgyNTUmZS5mdChtKyspKTw8eSx5Kz04fWlmKGM9aT0xNjM4MyZmLCgzMSZpKT4yOXx8KGk+PjUmMzEpPjI5KXJldHVybiBzPTksZS5MZT1cInRvbyBtYW55IGxlbmd0aCBvciBkaXN0YW5jZSBzeW1ib2xzXCIsdD1ZZSxuLm90PWYsbi5jdD15LGUuV2U9YixlLnFlKz1tLWUubnQsZS5udD1tLG4ud3JpdGU9ZyxuLnd0KGUsdCk7aWYoaT0yNTgrKDMxJmkpKyhpPj41JjMxKSwhcnx8ci5sZW5ndGg8aSlyPVtdO2Vsc2UgZm9yKHY9MDtpPnY7disrKXJbdl09MDtmPj4+PTE0LHktPTE0LGE9MCxzPTQ7Y2FzZSA0OmZvcig7NCsoYz4+PjEwKT5hOyl7Zm9yKDszPnk7KXtpZigwPT09YilyZXR1cm4gbi5vdD1mLG4uY3Q9eSxlLldlPWIsZS5xZSs9bS1lLm50LGUubnQ9bSxuLndyaXRlPWcsbi53dChlLHQpO3Q9MCxiLS0sZnw9KDI1NSZlLmZ0KG0rKykpPDx5LHkrPTh9cltmdFthKytdXT03JmYsZj4+Pj0zLHktPTN9Zm9yKDsxOT5hOylyW2Z0W2ErK11dPTA7aWYobFswXT03LGk9cC5zdChyLGwsdSxkLGUpLDAhPWkpcmV0dXJuKHQ9aSk9PVllJiYocj1udWxsLHM9OSksbi5vdD1mLG4uY3Q9eSxlLldlPWIsZS5xZSs9bS1lLm50LGUubnQ9bSxuLndyaXRlPWcsbi53dChlLHQpO2E9MCxzPTU7Y2FzZSA1OmZvcig7aT1jLDI1OCsoMzEmaSkrKGk+PjUmMzEpPmE7KXtsZXQgbyx3O2ZvcihpPWxbMF07aT55Oyl7aWYoMD09PWIpcmV0dXJuIG4ub3Q9ZixuLmN0PXksZS5XZT1iLGUucWUrPW0tZS5udCxlLm50PW0sbi53cml0ZT1nLG4ud3QoZSx0KTt0PTAsYi0tLGZ8PSgyNTUmZS5mdChtKyspKTw8eSx5Kz04fWlmKGk9ZFszKih1WzBdKyhmJiRlW2ldKSkrMV0sdz1kWzMqKHVbMF0rKGYmJGVbaV0pKSsyXSwxNj53KWY+Pj49aSx5LT1pLHJbYSsrXT13O2Vsc2V7Zm9yKHY9MTg9PXc/Nzp3LTE0LG89MTg9PXc/MTE6MztpK3Y+eTspe2lmKDA9PT1iKXJldHVybiBuLm90PWYsbi5jdD15LGUuV2U9YixlLnFlKz1tLWUubnQsZS5udD1tLG4ud3JpdGU9ZyxuLnd0KGUsdCk7dD0wLGItLSxmfD0oMjU1JmUuZnQobSsrKSk8PHkseSs9OH1pZihmPj4+PWkseS09aSxvKz1mJiRlW3ZdLGY+Pj49dix5LT12LHY9YSxpPWMsditvPjI1OCsoMzEmaSkrKGk+PjUmMzEpfHwxNj09dyYmMT52KXJldHVybiByPW51bGwscz05LGUuTGU9XCJpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0XCIsdD1ZZSxuLm90PWYsbi5jdD15LGUuV2U9YixlLnFlKz1tLWUubnQsZS5udD1tLG4ud3JpdGU9ZyxuLnd0KGUsdCk7dz0xNj09dz9yW3YtMV06MDtkb3tyW3YrK109d313aGlsZSgwIT0tLW8pO2E9dn19aWYodVswXT0tMSxfPVtdLEE9W10sST1bXSxEPVtdLF9bMF09OSxBWzBdPTYsaT1jLGk9cC5pdCgyNTcrKDMxJmkpLDErKGk+PjUmMzEpLHIsXyxBLEksRCxkLGUpLDAhPWkpcmV0dXJuIGk9PVllJiYocj1udWxsLHM9OSksdD1pLG4ub3Q9ZixuLmN0PXksZS5XZT1iLGUucWUrPW0tZS5udCxlLm50PW0sbi53cml0ZT1nLG4ud3QoZSx0KTt3LmluaXQoX1swXSxBWzBdLGQsSVswXSxkLERbMF0pLHM9NjtjYXNlIDY6aWYobi5vdD1mLG4uY3Q9eSxlLldlPWIsZS5xZSs9bS1lLm50LGUubnQ9bSxuLndyaXRlPWcsMSE9KHQ9dy51dChuLGUsdCkpKXJldHVybiBuLnd0KGUsdCk7aWYodD0wLHcuaHQoZSksbT1lLm50LGI9ZS5XZSxmPW4ub3QseT1uLmN0LGc9bi53cml0ZSxrPWc8bi5yZWFkP24ucmVhZC1nLTE6bi5lbmQtZywwPT09aCl7cz0wO2JyZWFrfXM9NztjYXNlIDc6aWYobi53cml0ZT1nLHQ9bi53dChlLHQpLGc9bi53cml0ZSxrPWc8bi5yZWFkP24ucmVhZC1nLTE6bi5lbmQtZyxuLnJlYWQhPW4ud3JpdGUpcmV0dXJuIG4ub3Q9ZixuLmN0PXksZS5XZT1iLGUucWUrPW0tZS5udCxlLm50PW0sbi53cml0ZT1nLG4ud3QoZSx0KTtzPTg7Y2FzZSA4OnJldHVybiB0PTEsbi5vdD1mLG4uY3Q9eSxlLldlPWIsZS5xZSs9bS1lLm50LGUubnQ9bSxuLndyaXRlPWcsbi53dChlLHQpO2Nhc2UgOTpyZXR1cm4gdD1ZZSxuLm90PWYsbi5jdD15LGUuV2U9YixlLnFlKz1tLWUubnQsZS5udD1tLG4ud3JpdGU9ZyxuLnd0KGUsdCk7ZGVmYXVsdDpyZXR1cm4gdD1YZSxuLm90PWYsbi5jdD15LGUuV2U9YixlLnFlKz1tLWUubnQsZS5udD1tLG4ud3JpdGU9ZyxuLnd0KGUsdCl9fX0sbi5odD1lPT57bi5yZXNldChlLG51bGwpLG4ubHQ9bnVsbCxkPW51bGx9LG4ueXQ9KGUsdCxyKT0+e24ubHQuc2V0KGUuc3ViYXJyYXkodCx0K3IpLDApLG4ucmVhZD1uLndyaXRlPXJ9LG4uYnQ9KCk9PjE9PXM/MTowfWNvbnN0IGx0PTEzLHV0PVswLDAsMjU1LDI1NV07ZnVuY3Rpb24gd3QoKXtjb25zdCBlPXRoaXM7ZnVuY3Rpb24gdChlKXtyZXR1cm4gZSYmZS5ndD8oZS5xZT1lLkdlPTAsZS5MZT1udWxsLGUuZ3QubW9kZT03LGUuZ3Qua3QucmVzZXQoZSxudWxsKSwwKTpYZX1lLm1vZGU9MCxlLm1ldGhvZD0wLGUudnQ9WzBdLGUuU3Q9MCxlLm1hcmtlcj0wLGUuenQ9MCxlLkN0PXQ9PihlLmt0JiZlLmt0Lmh0KHQpLGUua3Q9bnVsbCwwKSxlLnh0PShuLHIpPT4obi5MZT1udWxsLGUua3Q9bnVsbCw4PnJ8fHI+MTU/KGUuQ3QobiksWGUpOihlLnp0PXIsbi5ndC5rdD1uZXcgYXQobiwxPDxyKSx0KG4pLDApKSxlLl90PShlLHQpPT57bGV0IG4scjtpZighZXx8IWUuZ3R8fCFlLmV0KXJldHVybiBYZTtjb25zdCBzPWUuZ3Q7Zm9yKHQ9ND09dD9aZTowLG49WmU7Oylzd2l0Y2gocy5tb2RlKXtjYXNlIDA6aWYoMD09PWUuV2UpcmV0dXJuIG47aWYobj10LGUuV2UtLSxlLnFlKyssOCE9KDE1JihzLm1ldGhvZD1lLmZ0KGUubnQrKykpKSl7cy5tb2RlPWx0LGUuTGU9XCJ1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZFwiLHMubWFya2VyPTU7YnJlYWt9aWYoOCsocy5tZXRob2Q+PjQpPnMuenQpe3MubW9kZT1sdCxlLkxlPVwiaW52YWxpZCB3aW4gc2l6ZVwiLHMubWFya2VyPTU7YnJlYWt9cy5tb2RlPTE7Y2FzZSAxOmlmKDA9PT1lLldlKXJldHVybiBuO2lmKG49dCxlLldlLS0sZS5xZSsrLHI9MjU1JmUuZnQoZS5udCsrKSwoKHMubWV0aG9kPDw4KStyKSUzMSE9MCl7cy5tb2RlPWx0LGUuTGU9XCJpbmNvcnJlY3QgaGVhZGVyIGNoZWNrXCIscy5tYXJrZXI9NTticmVha31pZigwPT0oMzImcikpe3MubW9kZT03O2JyZWFrfXMubW9kZT0yO2Nhc2UgMjppZigwPT09ZS5XZSlyZXR1cm4gbjtuPXQsZS5XZS0tLGUucWUrKyxzLlN0PSgyNTUmZS5mdChlLm50KyspKTw8MjQmNDI3ODE5MDA4MCxzLm1vZGU9MztjYXNlIDM6aWYoMD09PWUuV2UpcmV0dXJuIG47bj10LGUuV2UtLSxlLnFlKysscy5TdCs9KDI1NSZlLmZ0KGUubnQrKykpPDwxNiYxNjcxMTY4MCxzLm1vZGU9NDtjYXNlIDQ6aWYoMD09PWUuV2UpcmV0dXJuIG47bj10LGUuV2UtLSxlLnFlKysscy5TdCs9KDI1NSZlLmZ0KGUubnQrKykpPDw4JjY1MjgwLHMubW9kZT01O2Nhc2UgNTpyZXR1cm4gMD09PWUuV2U/bjoobj10LGUuV2UtLSxlLnFlKysscy5TdCs9MjU1JmUuZnQoZS5udCsrKSxzLm1vZGU9NiwyKTtjYXNlIDY6cmV0dXJuIHMubW9kZT1sdCxlLkxlPVwibmVlZCBkaWN0aW9uYXJ5XCIscy5tYXJrZXI9MCxYZTtjYXNlIDc6aWYobj1zLmt0LnV0KGUsbiksbj09WWUpe3MubW9kZT1sdCxzLm1hcmtlcj0wO2JyZWFrfWlmKDA9PW4mJihuPXQpLDEhPW4pcmV0dXJuIG47bj10LHMua3QucmVzZXQoZSxzLnZ0KSxzLm1vZGU9MTI7Y2FzZSAxMjpyZXR1cm4gZS5XZT0wLDE7Y2FzZSBsdDpyZXR1cm4gWWU7ZGVmYXVsdDpyZXR1cm4gWGV9fSxlLkF0PShlLHQsbik9PntsZXQgcj0wLHM9bjtpZighZXx8IWUuZ3R8fDYhPWUuZ3QubW9kZSlyZXR1cm4gWGU7Y29uc3QgaT1lLmd0O3JldHVybiBzPDE8PGkuenR8fChzPSgxPDxpLnp0KS0xLHI9bi1zKSxpLmt0Lnl0KHQscixzKSxpLm1vZGU9NywwfSxlLkl0PWU9PntsZXQgbixyLHMsaSxvO2lmKCFlfHwhZS5ndClyZXR1cm4gWGU7Y29uc3QgYz1lLmd0O2lmKGMubW9kZSE9bHQmJihjLm1vZGU9bHQsYy5tYXJrZXI9MCksMD09PShuPWUuV2UpKXJldHVybiBaZTtmb3Iocj1lLm50LHM9Yy5tYXJrZXI7MCE9PW4mJjQ+czspZS5mdChyKT09dXRbc10/cysrOnM9MCE9PWUuZnQocik/MDo0LXMscisrLG4tLTtyZXR1cm4gZS5xZSs9ci1lLm50LGUubnQ9cixlLldlPW4sYy5tYXJrZXI9cyw0IT1zP1llOihpPWUucWUsbz1lLkdlLHQoZSksZS5xZT1pLGUuR2U9byxjLm1vZGU9NywwKX0sZS5EdD1lPT5lJiZlLmd0JiZlLmd0Lmt0P2UuZ3Qua3QuYnQoKTpYZX1mdW5jdGlvbiBodCgpe31mdW5jdGlvbiBkdChlKXtjb25zdCB0PW5ldyBodCxuPWUmJmUuY2h1bmtTaXplP3IuZmxvb3IoMiplLmNodW5rU2l6ZSk6MTMxMDcyLG89bmV3IGkobik7bGV0IGM9ITE7dC54dCgpLHQuJGU9byx0aGlzLmFwcGVuZD0oZSxyKT0+e2NvbnN0IGY9W107bGV0IGEsbCx1PTAsdz0wLGg9MDtpZigwIT09ZS5sZW5ndGgpe3QubnQ9MCx0LmV0PWUsdC5XZT1lLmxlbmd0aDtkb3tpZih0LnJ0PTAsdC50dD1uLDAhPT10LldlfHxjfHwodC5udD0wLGM9ITApLGE9dC5fdCgwKSxjJiZhPT09WmUpe2lmKDAhPT10LldlKXRocm93IG5ldyBzKFwiaW5mbGF0aW5nOiBiYWQgaW5wdXRcIil9ZWxzZSBpZigwIT09YSYmMSE9PWEpdGhyb3cgbmV3IHMoXCJpbmZsYXRpbmc6IFwiK3QuTGUpO2lmKChjfHwxPT09YSkmJnQuV2U9PT1lLmxlbmd0aCl0aHJvdyBuZXcgcyhcImluZmxhdGluZzogYmFkIGlucHV0XCIpO3QucnQmJih0LnJ0PT09bj9mLnB1c2gobmV3IGkobykpOmYucHVzaChvLnN1YmFycmF5KDAsdC5ydCkpKSxoKz10LnJ0LHImJnQubnQ+MCYmdC5udCE9dSYmKHIodC5udCksdT10Lm50KX13aGlsZSh0LldlPjB8fDA9PT10LnR0KTtyZXR1cm4gZi5sZW5ndGg+MT8obD1uZXcgaShoKSxmLmZvckVhY2goKGU9PntsLnNldChlLHcpLHcrPWUubGVuZ3RofSkpKTpsPWZbMF0/bmV3IGkoZlswXSk6bmV3IGksbH19LHRoaXMuZmx1c2g9KCk9Pnt0LkN0KCl9fWh0LnByb3RvdHlwZT17eHQoZSl7Y29uc3QgdD10aGlzO3JldHVybiB0Lmd0PW5ldyB3dCxlfHwoZT0xNSksdC5ndC54dCh0LGUpfSxfdChlKXtjb25zdCB0PXRoaXM7cmV0dXJuIHQuZ3Q/dC5ndC5fdCh0LGUpOlhlfSxDdCgpe2NvbnN0IGU9dGhpcztpZighZS5ndClyZXR1cm4gWGU7Y29uc3QgdD1lLmd0LkN0KGUpO3JldHVybiBlLmd0PW51bGwsdH0sSXQoKXtjb25zdCBlPXRoaXM7cmV0dXJuIGUuZ3Q/ZS5ndC5JdChlKTpYZX0sQXQoZSx0KXtjb25zdCBuPXRoaXM7cmV0dXJuIG4uZ3Q/bi5ndC5BdChuLGUsdCk6WGV9LGZ0KGUpe3JldHVybiB0aGlzLmV0W2VdfSxqZShlLHQpe3JldHVybiB0aGlzLmV0LnN1YmFycmF5KGUsZSt0KX19LHNlbGYuaW5pdENvZGVjPSgpPT57c2VsZi5EZWZsYXRlPVFlLHNlbGYuSW5mbGF0ZT1kdH07XFxuJ10se3R5cGU6XCJ0ZXh0L2phdmFzY3JpcHRcIn0pKTtlKHt3b3JrZXJTY3JpcHRzOntpbmZsYXRlOlt0XSxkZWZsYXRlOlt0XX19KX1leHBvcnR7ZSBhcyBjb25maWd1cmVXZWJXb3JrZXJ9O1xuIiwiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCIuL2luZGV4LmQudHNcIiAvPlxuXG4vKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbmltcG9ydCB7IERlZmxhdGUgfSBmcm9tIFwiLi9saWIvY29yZS9zdHJlYW1zL2NvZGVjcy9kZWZsYXRlLmpzXCI7XG5pbXBvcnQgeyBJbmZsYXRlIH0gZnJvbSBcIi4vbGliL2NvcmUvc3RyZWFtcy9jb2RlY3MvaW5mbGF0ZS5qc1wiO1xuaW1wb3J0IHsgY29uZmlndXJlIH0gZnJvbSBcIi4vbGliL2NvcmUvY29uZmlndXJhdGlvbi5qc1wiO1xuaW1wb3J0IHsgZ2V0TWltZVR5cGUgfSBmcm9tIFwiLi9saWIvY29yZS91dGlsL21pbWUtdHlwZS5qc1wiO1xuaW1wb3J0IHsgdGVybWluYXRlV29ya2VycyB9IGZyb20gXCIuL2xpYi9jb3JlL2NvZGVjLXBvb2wuanNcIjtcblxuY29uZmlndXJlKHsgRGVmbGF0ZSwgSW5mbGF0ZSB9KTtcblxuZXhwb3J0IHtcblx0ZnMsXG5cdGNvbmZpZ3VyZSxcblx0aW5pdFNoaW1Bc3luY0NvZGVjLFxuXHRaaXBSZWFkZXIsXG5cdFppcFdyaXRlcixcblx0UmVhZGVyLFxuXHRXcml0ZXIsXG5cdFRleHRSZWFkZXIsXG5cdFRleHRXcml0ZXIsXG5cdERhdGE2NFVSSVJlYWRlcixcblx0RGF0YTY0VVJJV3JpdGVyLFxuXHRCbG9iUmVhZGVyLFxuXHRCbG9iV3JpdGVyLFxuXHRIdHRwUmVhZGVyLFxuXHRIdHRwUmFuZ2VSZWFkZXIsXG5cdFVpbnQ4QXJyYXlXcml0ZXIsXG5cdFVpbnQ4QXJyYXlSZWFkZXIsXG5cdFNwbGl0WmlwUmVhZGVyLFxuXHRTcGxpdFppcFdyaXRlcixcblx0U3BsaXREYXRhUmVhZGVyLFxuXHRTcGxpdERhdGFXcml0ZXIsXG5cdEVSUl9IVFRQX1JBTkdFLFxuXHRFUlJfQkFEX0ZPUk1BVCxcblx0RVJSX0VPQ0RSX05PVF9GT1VORCxcblx0RVJSX0VPQ0RSX1pJUDY0X05PVF9GT1VORCxcblx0RVJSX0VPQ0RSX0xPQ0FUT1JfWklQNjRfTk9UX0ZPVU5ELFxuXHRFUlJfQ0VOVFJBTF9ESVJFQ1RPUllfTk9UX0ZPVU5ELFxuXHRFUlJfTE9DQUxfRklMRV9IRUFERVJfTk9UX0ZPVU5ELFxuXHRFUlJfRVhUUkFGSUVMRF9aSVA2NF9OT1RfRk9VTkQsXG5cdEVSUl9FTkNSWVBURUQsXG5cdEVSUl9VTlNVUFBPUlRFRF9FTkNSWVBUSU9OLFxuXHRFUlJfVU5TVVBQT1JURURfQ09NUFJFU1NJT04sXG5cdEVSUl9JTlZBTElEX1NJR05BVFVSRSxcblx0RVJSX0lOVkFMSURfUEFTU1dPUkQsXG5cdEVSUl9EVVBMSUNBVEVEX05BTUUsXG5cdEVSUl9JTlZBTElEX0NPTU1FTlQsXG5cdEVSUl9JTlZBTElEX0VOVFJZX05BTUUsXG5cdEVSUl9JTlZBTElEX0VOVFJZX0NPTU1FTlQsXG5cdEVSUl9JTlZBTElEX1ZFUlNJT04sXG5cdEVSUl9JTlZBTElEX0VYVFJBRklFTERfVFlQRSxcblx0RVJSX0lOVkFMSURfRVhUUkFGSUVMRF9EQVRBLFxuXHRFUlJfSU5WQUxJRF9FTkNSWVBUSU9OX1NUUkVOR1RILFxuXHRFUlJfVU5TVVBQT1JURURfRk9STUFULFxuXHRFUlJfU1BMSVRfWklQX0ZJTEUsXG5cdEVSUl9JVEVSQVRPUl9DT01QTEVURURfVE9PX1NPT05cbn0gZnJvbSBcIi4vbGliL3ppcC1mcy5qc1wiO1xuZXhwb3J0IHsgZ2V0TWltZVR5cGUsIHRlcm1pbmF0ZVdvcmtlcnMgfTsiLCJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcblxuaW1wb3J0IHtcbiAgICBCbG9iUmVhZGVyLFxuICAgIFRleHRSZWFkZXIsXG4gICAgWmlwUmVhZGVyLFxuICAgIFRleHRXcml0ZXIsXG4gICAgRW50cnksXG4gICAgQmxvYldyaXRlcixcbn0gZnJvbSBcIkB6aXAuanMvemlwLmpzXCI7XG5pbXBvcnQgeyBzb25ncyB9IGZyb20gXCIuLi9lbnRpdGllcy9zb25nXCI7XG5pbXBvcnQgc29uZ0NvbnRyb2xsZXIgZnJvbSBcIi4uL2NvbnRyb2xsZXJzL3NvbmdDb250cm9sbGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNvbmdMb2FkZXIoKSB7XG4gICAgY29uc3QgW2lzT3Zlciwgc2V0SXNPdmVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbZmlsZXMsIHNldEZpbGVzXSA9IHVzZVN0YXRlPEZpbGVbXT4oW10pO1xuICAgIGNvbnN0IFtmaWxlSW5wdXQsIHNldEZpbGVJbnB1dF0gPSB1c2VTdGF0ZTxhbnk+KCk7XG5cbiAgICBjb25zdCBsb2FkU29uZ3MgPSBhc3luYyAoX2ZpbGVzOiBBcnJheTxFbnRyeT4pID0+IHtcbiAgICAgICAgX2ZpbGVzLm1hcChhc3luYyBmaWxlID0+IHtcbiAgICAgICAgICAgIGlmIChmaWxlLmZpbGVuYW1lLmVuZHNXaXRoKFwiLm1wM1wiKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdyaXRlciA9IG5ldyBCbG9iV3JpdGVyKClcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZmlsZS5nZXREYXRhKHdyaXRlcilcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGZpbGUuZmlsZW5hbWUucmVwbGFjZShcIi5tcDNcIiwgXCJcIilcblxuICAgICAgICAgICAgICAgIGF3YWl0IHNvbmdDb250cm9sbGVyLmNyZWF0ZUZpbGUoaWQsIGRhdGEpXG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsZS5maWxlbmFtZS5lbmRzV2l0aChcIi5qc29uXCIpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgd3JpdGVyID0gbmV3IFRleHRXcml0ZXIoKVxuICAgICAgICAgICAgICAgIGNvbnN0IHNvbmcgPSBKU09OLnBhcnNlKGF3YWl0IGZpbGUuZ2V0RGF0YSh3cml0ZXIpKVxuICAgICAgICAgICAgICAgIGF3YWl0IHNvbmdDb250cm9sbGVyLmNyZWF0ZShzb25nKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVuc3VwcG9ydGVkIGZvcm1hdCBmb3JcIiwgZmlsZS5maWxlbmFtZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBzb25ncy52YWx1ZSA9IGF3YWl0IHNvbmdDb250cm9sbGVyLmdldEFsbCgpXG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlRmlsZXNMb2FkaW5nID0gKGZpbGVzOiBBcnJheTxGaWxlPikgPT4ge1xuICAgICAgICBmaWxlcy5mb3JFYWNoKChmaWxlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG4gICAgICAgICAgICByZWFkZXIub25sb2FkZW5kID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHppcCA9IG5ldyBaaXBSZWFkZXIobmV3IEJsb2JSZWFkZXIoZmlsZSkpXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZXMgPSBhd2FpdCB6aXAuZ2V0RW50cmllcygpXG4gICAgICAgICAgICAgICAgYXdhaXQgbG9hZFNvbmdzKGZpbGVzKVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVGhlcmUgd2FzIGFuIGlzc3VlIHJlYWRpbmcgdGhlIGZpbGUuJyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcbiAgICAgICAgICAgIHJldHVybiByZWFkZXI7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgZXZlbnQgaGFuZGxlcnNcbiAgICBjb25zdCBoYW5kbGVEcmFnT3ZlciA9IChldmVudDogYW55KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNldElzT3Zlcih0cnVlKTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlRHJhZ0xlYXZlID0gKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc2V0SXNPdmVyKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlRHJvcCA9IChldmVudDogYW55KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNldElzT3ZlcihmYWxzZSk7XG5cbiAgICAgICAgLy8gRmV0Y2ggdGhlIGZpbGVzXG4gICAgICAgIGNvbnN0IF9maWxlcyA9IEFycmF5LmZyb20oZXZlbnQuZGF0YVRyYW5zZmVyLmZpbGVzKSBhcyBBcnJheTxGaWxlPlxuICAgICAgICBzZXRGaWxlcyhfZmlsZXMpO1xuXG4gICAgICAgIC8vIFVzZSBGaWxlUmVhZGVyIHRvIHJlYWQgZmlsZSBjb250ZW50XG4gICAgICAgIGhhbmRsZUZpbGVzTG9hZGluZyhfZmlsZXMpXG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZUNsaWNrID0gKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgZmlsZUlucHV0LmNsaWNrKClcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVGaWxlQ2hhbmdlID0gKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXZlbnQpXG4gICAgICAgIGhhbmRsZUZpbGVzTG9hZGluZyhBcnJheS5mcm9tKGV2ZW50LnRhcmdldC5maWxlcykpXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWxhdGl2ZSBwLTggdy1zY3JlZW4gaC1zY3JlZW5cIj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBvbkRyYWdPdmVyPXtoYW5kbGVEcmFnT3Zlcn1cbiAgICAgICAgICAgICAgICBvbkRyYWdMZWF2ZT17aGFuZGxlRHJhZ0xlYXZlfVxuICAgICAgICAgICAgICAgIG9uRHJvcD17aGFuZGxlRHJvcH1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVDbGlja31cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4IHctZnVsbCBoLWZ1bGwgYmctZ3JheS04MDAgcm91bmRlZC1tZCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIERyYWcgYW5kIGRyb3Agc29tZSBmaWxlcyBoZXJlXG4gICAgICAgICAgICAgICAgb3IgY2xpY2sgdG8gdXBsb2FkIGZpbGVzXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxpbnB1dCByZWY9e2ZpbGVJbnB1dCA9PiBzZXRGaWxlSW5wdXQoZmlsZUlucHV0KX0gb25DaGFuZ2U9e2hhbmRsZUZpbGVDaGFuZ2V9IHR5cGU9XCJmaWxlXCIgY2xhc3NOYW1lPVwiaGlkZGVuXCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vd2hlZWwuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3doZWVsLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCJcbmltcG9ydCB7IGVmZmVjdCwgc2lnbmFsIH0gZnJvbSBcIkBwcmVhY3Qvc2lnbmFsc1wiXG5pbXBvcnQgcGxheWVyLCB7IHVzZVBsYXllclN0YXRlIH0gZnJvbSBcIi4uL2xpYnMvcGxheWVyXCJcblxuaW1wb3J0IFwiLi93aGVlbC5zY3NzXCJcbmltcG9ydCB7IFNvbmcgfSBmcm9tIFwiLi4vZW50aXRpZXMvc29uZ1wiXG5pbXBvcnQgc29uZ0NvbnRyb2xsZXIgZnJvbSBcIi4uL2NvbnRyb2xsZXJzL3NvbmdDb250cm9sbGVyXCJcblxuY29uc3QgY2hvc2VuID0gc2lnbmFsKDApXG5jb25zdCBzaG93aW5nID0gc2lnbmFsKGZhbHNlKVxuY29uc3QgeCA9IHNpZ25hbCgwKVxuY29uc3QgeSA9IHNpZ25hbCgwKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBXaGVlbCgpIHtcbiAgICBjb25zdCBzdGF0ZSA9IHVzZVBsYXllclN0YXRlKCk7XG5cbiAgICBjb25zdCBtaW4gPSAxNVxuICAgIGNvbnN0IG9mZnNldFkgPSA5NlxuXG4gICAgY29uc3Qgbk1lYXN1cmUgPSA4XG5cbiAgICBjb25zdCBzb25nTWVhc3VyZVRpbWUgPSAoc29uZzogU29uZykgPT4ge1xuICAgICAgICByZXR1cm4gc29uZy5kdXJhdGlvbiAvIDYwXG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlUGxheSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHN0YXRlLmN1cnJlbnRUcmFja0luZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUucGxheWluZykge1xuICAgICAgICAgICAgICAgIHBsYXllci5wYXVzZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXIucGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRklYTUUgUGxheSBmaXJzdCB0cmFjayB0byBsaXN0ZW5cbiAgICAgICAgICAgIHBsYXllci5wbGF5VHJhY2soMClcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBvbk1vdXNlRG93biA9ICh7IGNsaWVudFgsIGNsaWVudFkgfTogYW55KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwib25Nb3VzZURvd25cIilcbiAgICAgICAgc2hvd2luZy52YWx1ZSA9IHRydWVcbiAgICAgICAgeC52YWx1ZSA9IGNsaWVudFhcbiAgICAgICAgeS52YWx1ZSA9IGNsaWVudFkgKyBvZmZzZXRZXG4gICAgfVxuXG4gICAgY29uc3Qgb25Nb3VzZVVwID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIm9uTW91c2VVcFwiKVxuICAgICAgICBzaG93aW5nLnZhbHVlID0gZmFsc2VcblxuICAgICAgICBzd2l0Y2ggKGNob3Nlbi52YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIC8vIFBhdXNlXG4gICAgICAgICAgICAgICAgaGFuZGxlUGxheSgpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAvLyBGb3J3YXJkXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmN1cnJlbnRUcmFjayAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNlZWsocGxheWVyLmdldEN1cnJlbnRUaW1lKCkgKyBzb25nTWVhc3VyZVRpbWUoc3RhdGUuY3VycmVudFRyYWNrLnNvbmcpICogbk1lYXN1cmUpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAvLyBOZXh0XG4gICAgICAgICAgICAgICAgcGxheWVyLm5leHQoKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgLy8gU2F2ZVxuICAgICAgICAgICAgICAgIGF3YWl0IHNvbmdDb250cm9sbGVyLmZsYWdEb3dubG9hZChzdGF0ZS5jdXJyZW50VHJhY2suc29uZy5pZCwgcGxheWVyKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgLy8gUmVzZXRcbiAgICAgICAgICAgICAgICBhbGVydChcIlJlc2V0XCIpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAvLyBEZWxldGVcbiAgICAgICAgICAgICAgICBhd2FpdCBzb25nQ29udHJvbGxlci5mbGFnRGVsZXRlKHN0YXRlLmN1cnJlbnRUcmFjay5zb25nLmlkLCBwbGF5ZXIpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAvLyBQcmV2aW91c1xuICAgICAgICAgICAgICAgIHBsYXllci5wcmV2KClcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIC8vIEJhY2t3YXJkXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmN1cnJlbnRUcmFjayAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNlZWsocGxheWVyLmdldEN1cnJlbnRUaW1lKCkgLSBzb25nTWVhc3VyZVRpbWUoc3RhdGUuY3VycmVudFRyYWNrLnNvbmcpICogbk1lYXN1cmUpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIGNob3Nlbi52YWx1ZSA9IHVuZGVmaW5lZFxuICAgICAgICB0aGlzLndoZWVsLnNldEF0dHJpYnV0ZShcImRhdGEtY2hvc2VuXCIsIHVuZGVmaW5lZClcbiAgICB9XG5cbiAgICBjb25zdCBvbk1vdXNlTW92ZSA9ICh7IGNsaWVudFgsIGNsaWVudFkgfTogYW55KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwib25Nb3VzZU1vdmVcIilcbiAgICAgICAgaWYgKCFzaG93aW5nLnZhbHVlKSByZXR1cm5cblxuICAgICAgICBsZXQgZHggPSBjbGllbnRYIC0geC52YWx1ZVxuICAgICAgICBsZXQgZHkgPSBjbGllbnRZIC0geS52YWx1ZSArIG9mZnNldFlcbiAgICAgICAgbGV0IG1hZyA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSlcbiAgICAgICAgbGV0IGluZGV4ID0gdW5kZWZpbmVkXG5cbiAgICAgICAgaWYgKG1hZyA+PSBtaW4pIHtcbiAgICAgICAgICAgIGxldCBkZWcgPSBNYXRoLmF0YW4yKGR5LCBkeCkgKyAwLjYyNSAqIE1hdGguUElcbiAgICAgICAgICAgIHdoaWxlIChkZWcgPCAwKSBkZWcgKz0gTWF0aC5QSSAqIDJcbiAgICAgICAgICAgIGluZGV4ID0gTWF0aC5mbG9vcihkZWcgLyBNYXRoLlBJICogNCkgKyAxXG4gICAgICAgIH1cblxuICAgICAgICBjaG9zZW4udmFsdWUgPSBpbmRleFxuICAgICAgICB0aGlzLndoZWVsLnNldEF0dHJpYnV0ZShcImRhdGEtY2hvc2VuXCIsIGluZGV4KVxuICAgIH1cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2ByZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW4gaC1zY3JlZW4gdy1zY3JlZW5gfVxuICAgICAgICBvbkNvbnRleHRNZW51PXsoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICB9fVxuICAgICAgICBvbk1vdXNlRG93bj17b25Nb3VzZURvd259XG4gICAgICAgIG9uTW91c2VNb3ZlPXtvbk1vdXNlTW92ZX1cbiAgICAgICAgb25Nb3VzZVVwPXtvbk1vdXNlVXB9XG4gICAgICAgIG9uVG91Y2hTdGFydD17ZSA9PiBvbk1vdXNlRG93bihlLnRvdWNoZXNbMF0pfVxuICAgICAgICBvblRvdWNoTW92ZT17ZSA9PiBvbk1vdXNlTW92ZShlLnRvdWNoZXNbMF0pfVxuICAgICAgICBvblRvdWNoRW5kPXtlID0+IG9uTW91c2VVcCgpfVxuXG4gICAgPlxuICAgICAgICB7c2hvd2luZyAmJiA8ZGl2XG4gICAgICAgICAgICByZWY9e3doZWVsID0+IHRoaXMud2hlZWwgPSB3aGVlbH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YHdoZWVsJHtzaG93aW5nLnZhbHVlID8gJyBvbicgOiAnJ31gfVxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBcIi0teFwiOiBgJHt4LnZhbHVlfXB4YCxcbiAgICAgICAgICAgICAgICBcIi0teVwiOiBgJHt5LnZhbHVlfXB4YFxuICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFyY1wiIHN0eWxlPXt7IFwiLS1jb2xvclwiOiBcIiMzYjA3NjRcIiwgXCItLWNvbG9yLWJvcmRlclwiOiBcIiMzYjA3NjRcIiB9fT57c3RhdGUucGxheWluZyA/IDxpIGNsYXNzTmFtZT1cImZhcyBmYS1wYXVzZVwiPjwvaT4gOiA8aSBjbGFzc05hbWU9XCJmYXMgZmEtcGxheVwiPjwvaT59PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFyY1wiIHN0eWxlPXt7IFwiLS1jb2xvclwiOiBcIiMyZTEwNjVcIiwgXCItLWNvbG9yLWJvcmRlclwiOiBcIiMyZTEwNjVcIiB9fT48aSBjbGFzc05hbWU9XCJmYXMgZmEtYW5nbGVzLXJpZ2h0XCI+PC9pPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhcmNcIiBzdHlsZT17eyBcIi0tY29sb3JcIjogXCIjMWUxYjRiXCIsIFwiLS1jb2xvci1ib3JkZXJcIjogXCIjMWUxYjRiXCIgfX0+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLWFuZ2xlLXJpZ2h0XCI+PC9pPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhcmNcIiBzdHlsZT17eyBcIi0tY29sb3JcIjogXCIjMTdhMzRhXCIsIFwiLS1jb2xvci1ib3JkZXJcIjogXCIjMTdhMzRhXCIgfX0+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLXNhdmVcIj48L2k+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFyY1wiIHN0eWxlPXt7IFwiLS1jb2xvclwiOiBcIiMyNTYzZWJcIiwgXCItLWNvbG9yLWJvcmRlclwiOiBcIiMyNTYzZWJcIiB9fT48aSBjbGFzc05hbWU9XCJmYXMgZmEtcm90YXRlLWxlZnRcIj48L2k+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFyY1wiIHN0eWxlPXt7IFwiLS1jb2xvclwiOiBcIiNkYzI2MjVcIiwgXCItLWNvbG9yLWJvcmRlclwiOiBcIiNkYzI2MjVcIiB9fT48aSBjbGFzc05hbWU9XCJmYXMgZmEtdHJhc2gtYWx0XCI+PC9pPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhcmNcIiBzdHlsZT17eyBcIi0tY29sb3JcIjogXCIjMWUxYjRiXCIsIFwiLS1jb2xvci1ib3JkZXJcIjogXCIjMWUxYjRiXCIgfX0+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLWFuZ2xlLWxlZnRcIj48L2k+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFyY1wiIHN0eWxlPXt7IFwiLS1jb2xvclwiOiBcIiMyZTEwNjVcIiwgXCItLWNvbG9yLWJvcmRlclwiOiBcIiMyZTEwNjVcIiB9fT48aSBjbGFzc05hbWU9XCJmYXMgZmEtYW5nbGVzLWxlZnRcIj48L2k+PC9kaXY+XG4gICAgICAgIDwvZGl2Pn1cbiAgICA8L2RpdiA+XG59IiwiaW1wb3J0IFBsYXlsaXN0IGZyb20gXCIuLi9jb21wb25lbnRzL1BsYXlsaXN0XCJcbmltcG9ydCB7IHNvbmdzIH0gZnJvbSBcIi4uL2VudGl0aWVzL3NvbmdcIlxuaW1wb3J0IFNvbmdMb2FkZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvU29uZ0xvYWRlclwiXG5pbXBvcnQgV2hlZWwgZnJvbSBcIi4uL2NvbXBvbmVudHMvV2hlZWxcIlxuaW1wb3J0IHNvbmdDb250cm9sbGVyIGZyb20gXCIuLi9jb250cm9sbGVycy9zb25nQ29udHJvbGxlclwiXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRGFzaGJvYWQoKSB7XG4gICAgLy8gXG4gICAgLy8gRklYTUUgTW92ZSB0aGlzXG4gICAgY29uc3QgaW5pdFNvbmdzID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAoIXNvbmdDb250cm9sbGVyLmRiKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGluaXRTb25ncywgMTAwMClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvbmdzLnZhbHVlID0gYXdhaXQgc29uZ0NvbnRyb2xsZXIuZ2V0QWxsKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGluaXRTb25ncygpXG4gICAgfSwgW3NvbmdzXSlcbiAgICAvLyBGSVhNRSBFTkRcblxuXG4gICAgaWYgKHNvbmdzLnZhbHVlLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIDxTb25nTG9hZGVyIC8+XG5cblxuICAgIHJldHVybiA8PlxuICAgICAgICA8UGxheWxpc3QgLz5cbiAgICAgICAgPFdoZWVsIC8+XG4gICAgPC8+XG59IiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7IFN3aXRjaCwgUm91dGUgfSBmcm9tIFwid291dGVyLXByZWFjdFwiO1xuaW1wb3J0IHsgRGFzaGJvYXJkIH0gZnJvbSAnLi92aWV3cyc7XG5pbXBvcnQgc29uZ0NvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVycy9zb25nQ29udHJvbGxlcic7XG5cbi8vIGNvbnN0IHJlZ2lzdGVyU2VydmljZVdvcmtlciA9IGFzeW5jICgpID0+IHtcbi8vICAgICBpZiAoXCJzZXJ2aWNlV29ya2VyXCIgaW4gbmF2aWdhdG9yKSB7XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKFwiVHJ5IHRvIHJlZ2lzdGVyIHNlcnZpY2Ugd29ya2VyXCIpXG4vLyAgICAgICAgIHRyeSB7XG4vLyAgICAgICAgICAgICBjb25zdCByZWdpc3RyYXRpb24gPSBhd2FpdCBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcihcIi9qcy9zdy5qc1wiLCB7XG4vLyAgICAgICAgICAgICAgICAgc2NvcGU6IFwiL2pzL1wiLFxuLy8gICAgICAgICAgICAgfSk7XG4vLyAgICAgICAgICAgICBpZiAocmVnaXN0cmF0aW9uLmluc3RhbGxpbmcpIHtcbi8vICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkluc3RhbGxhdGlvbiBkdSBzZXJ2aWNlIHdvcmtlciBlbiBjb3Vyc1wiKTtcbi8vICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVnaXN0cmF0aW9uLndhaXRpbmcpIHtcbi8vICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNlcnZpY2Ugd29ya2VyIGluc3RhbGzDqVwiKTtcbi8vICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVnaXN0cmF0aW9uLmFjdGl2ZSkge1xuLy8gICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2VydmljZSB3b3JrZXIgYWN0aWZcIik7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4vLyAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBMJ2VucmVnaXN0cmVtZW50IGEgw6ljaG91w6kgOiAke2Vycm9yfWApO1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gfTtcblxuZnVuY3Rpb24gQXBwKCkge1xuICAgIHJldHVybiA8U3dpdGNoPlxuICAgICAgICA8Um91dGUgcGF0aD1cIlwiIGNvbXBvbmVudD17RGFzaGJvYXJkfSAvPlxuICAgICAgICA8Um91dGU+XG4gICAgICAgICAgICA0MDQ6IG5vdGhpbmcgZm91bmQhXG4gICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgPGNvZGU+e1wiPFJvdXRlIC8+XCJ9PC9jb2RlPlxuICAgICAgICA8L1JvdXRlPlxuICAgIDwvU3dpdGNoPlxufVxuXG5yZW5kZXIoPEFwcCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpKTtcblxuLy8gcmVnaXN0ZXJTZXJ2aWNlV29ya2VyKCk7Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsInMiLCJBcnJheSIsImlzQXJyYXkiLCJ2IiwibCIsInUiLCJwIiwieSIsInQiLCJyIiwiZiIsImFyZ3VtZW50cyIsImNoaWxkcmVuIiwiZGVmYXVsdFByb3BzIiwidHlwZSIsInByb3BzIiwicmVmIiwiX19rIiwiX18iLCJfX2IiLCJfX2UiLCJfX2QiLCJfX2MiLCJjb25zdHJ1Y3RvciIsIl9fdiIsIl9faSIsIl9fdSIsInZub2RlIiwiZyIsImIiLCJjb250ZXh0IiwibSIsInciLCJ4IiwiX19yIiwiZGVib3VuY2VSZW5kZXJpbmciLCJjIiwic29ydCIsInNoaWZ0IiwiX19QIiwiTCIsIl9fbiIsIm93bmVyU1ZHRWxlbWVudCIsIk0iLCJDIiwiaCIsIl8iLCJQIiwieiIsIlMiLCJuZXh0U2libGluZyIsIlN0cmluZyIsIkgiLCJOIiwiaW5zZXJ0QmVmb3JlIiwiSSIsInNldFByb3BlcnR5IiwidGVzdCIsIlQiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJzbGljZSIsIkRhdGUiLCJub3ciLCJhZGRFdmVudExpc3RlbmVyIiwiRCIsIkEiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQXR0cmlidXRlIiwiZXZlbnQiLCIkIiwiY29udGV4dFR5cGUiLCJ2YWx1ZSIsIl9fRSIsInJlbmRlciIsIk8iLCJzdWIiLCJzdGF0ZSIsIl9faCIsIl9zYiIsIl9fcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImZvckVhY2giLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZ2V0Q2hpbGRDb250ZXh0IiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJpbmRleE9mIiwiaiIsImRpZmZlZCIsInNvbWUiLCJsb2NhbE5hbWUiLCJub2RlVHlwZSIsImNyZWF0ZUVsZW1lbnROUyIsImlzIiwiY2hpbGROb2RlcyIsIm5hbWUiLCJfX2h0bWwiLCJpbm5lckhUTUwiLCJjdXJyZW50IiwidW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiRSIsIkYiLCJDb25zdW1lciIsIlByb3ZpZGVyIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwic2V0U3RhdGUiLCJjb21wb25lbnREaWRDYXRjaCIsImZvcmNlVXBkYXRlIiwiUHJvbWlzZSIsInRoZW4iLCJiaW5kIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJfX3NvdXJjZSIsIl9fc2VsZiIsIl9fSCIsIl9fViIsIl9fTiIsImZpbHRlciIsImV2ZXJ5IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJUaW1lb3V0IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjYW5Vc2VET00iLCJmbiIsImFyZ3MiLCJyZWxhdGl2ZVBhdGgiLCJwYXRoIiwibG9jYXRpb24iLCJwYXRobmFtZSIsImV2ZW50UHVzaFN0YXRlIiwiZXZlbnRSZXBsYWNlU3RhdGUiLCJldmVudHMiLCJzdWJzY3JpYmVUb0xvY2F0aW9uVXBkYXRlcyIsImNhbGxiYWNrIiwiY3VycmVudFBhdGhuYW1lIiwidXNlUGF0aG5hbWUiLCJzc3JQYXRoIiwic3Vic2NyaWJlIiwiZ2V0U25hcHNob3QiLCJnZXRTU1JTbmFwc2hvdCIsIl9pbnN0YW5jZSIsIl92YWx1ZSIsIl9nZXRTbmFwc2hvdCIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwiaGlzdG9yeSIsIm9yaWdpbmFsIiwiRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZXNjYXBlUngiLCJzdHIiLCJyeEZvclNlZ21lbnQiLCJyZXBlYXQiLCJvcHRpb25hbCIsInByZWZpeCIsImNhcHR1cmUiLCJwYXRoVG9SZWdleHAiLCJwYXR0ZXJuIiwiZ3JvdXBSeCIsIm1hdGNoIiwibGFzdEluZGV4Iiwia2V5cyIsImV4ZWMiLCJzZWdtZW50IiwibW9kIiwicHJldiIsInN1YnN0cmluZyIsInJlZ2V4cCIsIlJlZ0V4cCIsImRlZmF1bHRSb3V0ZXIiLCJob29rIiwib3B0cyIsInRvIiwibmF2T3B0cyIsImFic29sdXRlUGF0aCIsIm1hdGNoZXIiLCJtYWtlUmVnZXhwRm4iLCJjYWNoZSIsImdldFJlZ2V4cCIsIm91dCIsInBhcmFtcyIsInJlZHVjZSIsIlJvdXRlckN0eCIsInVzZVJvdXRlciIsInVzZUxvY2F0aW9uRnJvbVJvdXRlciIsInJvdXRlciIsIlBhcmFtc0N0eCIsIlJvdXRlIiwiY29tcG9uZW50IiwidXNlUm91dGVNYXRjaCIsInVzZVJvdXRlIiwibWF0Y2hlcyIsIlBhcmFtc1dyYXBwZXIiLCJmbGF0dGVuQ2hpbGRyZW4iLCJTd2l0Y2giLCJvcmlnaW5hbExvY2F0aW9uIiwiY3JlYXRlUHViU3ViIiwidG9waWNzIiwiZGVzdHJveWVkIiwiZ2V0VG9waWMiLCJ0b3BpYyIsImxpc3RlbmVycyIsInB1Ymxpc2giLCJsaXN0ZW5lciIsImRlc3Ryb3kiLCJwdWJzdWIiLCJhdWRpbyIsImN1cnJlbnRUaW1lIiwiZHVyYXRpb24iLCJwbGF5aW5nIiwidm9sdW1lIiwibmV3Q3VycmVudFRpbWUiLCJNYXRoIiwicm91bmQiLCJzZWVrIiwic2Vjb25kcyIsImdldEVsZW1lbnQiLCJnZXRTdGF0ZSIsImdldEN1cnJlbnRUaW1lIiwicGxheSIsInBhdXNlIiwic2V0VXJsIiwidXJsIiwib25DaGFuZ2VDdXJyZW50VGltZSIsIm9uRW5kZWQiLCJjcmVhdGVBdWRpbyIsInRyYWNrcyIsImN1cnJlbnRUcmFja0luZGV4IiwiY3VycmVudFRyYWNrIiwiY2hhbmdlVHJhY2siLCJ0cmFjayIsIm5leHQiLCJuZXdJbmRleCIsInNldFF1ZXVlIiwicGxheVRyYWNrIiwidHJhY2tJbmRleCIsInVwZGF0ZVNvbmdTdGF0dXMiLCJzdGF0dXMiLCJmaW5kSW5kZXgiLCJzb25nIiwiY3JlYXRlUGxheWVyIiwidXNlUGxheWVyU3RhdGUiLCJjb2xvciIsImNsYXNzTmFtZSIsIm9uQ2xpY2siLCJTeW1ib2wiLCJmb3IiLCJVIiwidXNlU2lnbmFsIiwiX18kZiIsIl9fJHUiLCJwZWVrIiwiYnJhbmQiLCJ2YWx1ZU9mIiwidG9KU09OIiwic2V0IiwiZGlzcGxheU5hbWUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29uZmlndXJhYmxlIiwiX19ucCIsImluc3RhbmNlT2ZBbnkiLCJvYmplY3QiLCJjb25zdHJ1Y3RvcnMiLCJpZGJQcm94eWFibGVUeXBlcyIsImN1cnNvckFkdmFuY2VNZXRob2RzIiwiY3Vyc29yUmVxdWVzdE1hcCIsIldlYWtNYXAiLCJ0cmFuc2FjdGlvbkRvbmVNYXAiLCJ0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAiLCJ0cmFuc2Zvcm1DYWNoZSIsInJldmVyc2VUcmFuc2Zvcm1DYWNoZSIsImlkYlByb3h5VHJhcHMiLCJyZWNlaXZlciIsIklEQlRyYW5zYWN0aW9uIiwib2JqZWN0U3RvcmVOYW1lcyIsIm9iamVjdFN0b3JlIiwiaGFzIiwidHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSIsImZ1bmMiLCJJREJEYXRhYmFzZSIsInRyYW5zYWN0aW9uIiwiSURCQ3Vyc29yIiwiYWR2YW5jZSIsImNvbnRpbnVlIiwiY29udGludWVQcmltYXJ5S2V5IiwiaW5jbHVkZXMiLCJ1bndyYXAiLCJzdG9yZU5hbWVzIiwidHgiLCJkb25lIiwicmVqZWN0IiwidW5saXN0ZW4iLCJjb21wbGV0ZSIsImVycm9yIiwiRE9NRXhjZXB0aW9uIiwiY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uIiwiSURCT2JqZWN0U3RvcmUiLCJJREJJbmRleCIsIlByb3h5IiwiSURCUmVxdWVzdCIsInJlcXVlc3QiLCJwcm9taXNlIiwic3VjY2VzcyIsImNhdGNoIiwicHJvbWlzaWZ5UmVxdWVzdCIsIm5ld1ZhbHVlIiwicmVhZE1ldGhvZHMiLCJ3cml0ZU1ldGhvZHMiLCJjYWNoZWRNZXRob2RzIiwiTWFwIiwiZ2V0TWV0aG9kIiwidGFyZ2V0RnVuY05hbWUiLCJ1c2VJbmRleCIsImlzV3JpdGUiLCJtZXRob2QiLCJhc3luYyIsInN0b3JlTmFtZSIsInN0b3JlIiwiYWxsIiwib2xkVHJhcHMiLCJzb25ncyIsInNvbmdEQiIsInZlcnNpb24iLCJibG9ja2VkIiwidXBncmFkZSIsImJsb2NraW5nIiwidGVybWluYXRlZCIsImluZGV4ZWREQiIsIm9wZW4iLCJvcGVuUHJvbWlzZSIsIm9sZFZlcnNpb24iLCJuZXdWZXJzaW9uIiwiZGIiLCJvcGVuREIiLCJjb25zb2xlIiwibG9nIiwic29uZ1N0b3JlIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJrZXlQYXRoIiwiY3JlYXRlSW5kZXgiLCJzbGVlcCIsIm1heCIsInJhbmRvbSIsInNvbmdDb250cm9sbGVyIiwiaW5pdCIsImNyZWF0ZSIsImdldFN0YXR1cyIsImNyZWF0ZVN0YXR1cyIsInB1dCIsImNyZWF0ZUZpbGUiLCJzb25nSUQiLCJmaWxlIiwiZ2V0RmlsZSIsInJlbmFtZSIsInRpdGxlIiwiZmxhZ0Rvd25sb2FkIiwicGxheWVyIiwiZ2V0QWxsIiwiZmxhZ0RlbGV0ZSIsImRlbGV0ZSIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsIk1BWF9CSVRTIiwiSEVBUF9TSVpFIiwiWl9TVFJFQU1fRVJST1IiLCJleHRyYWN0QXJyYXkiLCJhcnJheSIsImZsYXRBcnJheSIsImZpbGwiLCJfZGlzdF9jb2RlIiwiVHJlZSIsInRoYXQiLCJiaV9yZXZlcnNlIiwiY29kZSIsImxlbiIsInJlcyIsImJ1aWxkX3RyZWUiLCJ0cmVlIiwiZHluX3RyZWUiLCJzdHJlZSIsInN0YXRfZGVzYyIsInN0YXRpY190cmVlIiwiZWxlbXMiLCJub2RlIiwibWF4X2NvZGUiLCJoZWFwX2xlbiIsImhlYXBfbWF4IiwiaGVhcCIsImRlcHRoIiwib3B0X2xlbiIsInN0YXRpY19sZW4iLCJmbG9vciIsInBxZG93bmhlYXAiLCJleHRyYSIsImV4dHJhX2JpdHMiLCJleHRyYV9iYXNlIiwibWF4X2xlbmd0aCIsImJpdHMiLCJ4Yml0cyIsIm92ZXJmbG93IiwiYmxfY291bnQiLCJnZW5fYml0bGVuIiwibmV4dF9jb2RlIiwiZ2VuX2NvZGVzIiwiU3RhdGljVHJlZSIsIl9sZW5ndGhfY29kZSIsImJhc2VfbGVuZ3RoIiwiYmFzZV9kaXN0IiwiZF9jb2RlIiwiZGlzdCIsImV4dHJhX2xiaXRzIiwiZXh0cmFfZGJpdHMiLCJleHRyYV9ibGJpdHMiLCJibF9vcmRlciIsInN0YXRpY19sdHJlZTJfc2Vjb25kX3BhcnQiLCJzdGF0aWNfbHRyZWUiLCJzdGF0aWNfZHRyZWVfc2Vjb25kX3BhcnQiLCJDb25maWciLCJnb29kX2xlbmd0aCIsIm1heF9sYXp5IiwibmljZV9sZW5ndGgiLCJtYXhfY2hhaW4iLCJzdGF0aWNfZHRyZWUiLCJzdGF0aWNfbF9kZXNjIiwiTElURVJBTFMiLCJzdGF0aWNfZF9kZXNjIiwic3RhdGljX2JsX2Rlc2MiLCJjb25maWdfdGFibGUiLCJ6X2Vycm1zZyIsIkJVU1lfU1RBVEUiLCJGSU5JU0hfU1RBVEUiLCJNSU5fTE9PS0FIRUFEIiwic21hbGxlciIsInRuMiIsInRtMiIsIkRlZmxhdGUiLCJzdHJtIiwicGVuZGluZ19idWZfc2l6ZSIsImxhc3RfZmx1c2giLCJ3X3NpemUiLCJ3X2JpdHMiLCJ3X21hc2siLCJ3aW4iLCJ3aW5kb3dfc2l6ZSIsImluc19oIiwiaGFzaF9zaXplIiwiaGFzaF9iaXRzIiwiaGFzaF9tYXNrIiwiaGFzaF9zaGlmdCIsImJsb2NrX3N0YXJ0IiwibWF0Y2hfbGVuZ3RoIiwicHJldl9tYXRjaCIsIm1hdGNoX2F2YWlsYWJsZSIsInN0cnN0YXJ0IiwibWF0Y2hfc3RhcnQiLCJsb29rYWhlYWQiLCJwcmV2X2xlbmd0aCIsIm1heF9jaGFpbl9sZW5ndGgiLCJtYXhfbGF6eV9tYXRjaCIsImxldmVsIiwic3RyYXRlZ3kiLCJnb29kX21hdGNoIiwibmljZV9tYXRjaCIsImR5bl9sdHJlZSIsImR5bl9kdHJlZSIsImJsX3RyZWUiLCJsX2Rlc2MiLCJkX2Rlc2MiLCJibF9kZXNjIiwibGl0X2J1ZnNpemUiLCJsYXN0X2xpdCIsImxhc3RfZW9iX2xlbiIsImJpX2J1ZiIsImJpX3ZhbGlkIiwiaW5pdF9ibG9jayIsIkVORF9CTE9DSyIsInNjYW5fdHJlZSIsImN1cmxlbiIsInByZXZsZW4iLCJuZXh0bGVuIiwibWF4X2NvdW50IiwibWluX2NvdW50IiwiUkVQXzNfNiIsIlJFUFpfM18xMCIsIlJFUFpfMTFfMTM4IiwicHV0X2J5dGUiLCJwZW5kaW5nX2J1ZiIsInBlbmRpbmciLCJwdXRfc2hvcnQiLCJzZW5kX2JpdHMiLCJ2YWwiLCJzZW5kX2NvZGUiLCJjMiIsInNlbmRfdHJlZSIsImJpX2ZsdXNoIiwiX3RyX3RhbGx5IiwibGMiLCJvdXRfbGVuZ3RoIiwiaW5fbGVuZ3RoIiwiZGNvZGUiLCJkaXN0X2J1ZiIsImxjX2J1ZiIsImNvbXByZXNzX2Jsb2NrIiwibHRyZWUiLCJkdHJlZSIsImx4IiwiYmlfd2luZHVwIiwiX3RyX3N0b3JlZF9ibG9jayIsImJ1ZiIsInN0b3JlZF9sZW4iLCJlb2YiLCJoZWFkZXIiLCJzdWJhcnJheSIsImNvcHlfYmxvY2siLCJmbHVzaF9ibG9ja19vbmx5Iiwib3B0X2xlbmIiLCJzdGF0aWNfbGVuYiIsIm1heF9ibGluZGV4IiwiQkxfQ09ERVMiLCJidWlsZF9ibF90cmVlIiwibGNvZGVzIiwiZGNvZGVzIiwiYmxjb2RlcyIsInJhbmsiLCJzZW5kX2FsbF90cmVlcyIsIl90cl9mbHVzaF9ibG9jayIsImZsdXNoX3BlbmRpbmciLCJmaWxsX3dpbmRvdyIsIm1vcmUiLCJhdmFpbF9pbiIsInJlYWRfYnVmIiwibG9uZ2VzdF9tYXRjaCIsImN1cl9tYXRjaCIsImNoYWluX2xlbmd0aCIsInNjYW4iLCJiZXN0X2xlbiIsImxpbWl0IiwiX25pY2VfbWF0Y2giLCJ3bWFzayIsInN0cmVuZCIsInNjYW5fZW5kMSIsInNjYW5fZW5kIiwiZGVmbGF0ZUluaXQiLCJfbGV2ZWwiLCJfbWV0aG9kIiwibWVtTGV2ZWwiLCJfc3RyYXRlZ3kiLCJtc2ciLCJkc3RhdGUiLCJVaW50OEFycmF5IiwiVWludDE2QXJyYXkiLCJ0b3RhbF9pbiIsInRvdGFsX291dCIsInBlbmRpbmdfb3V0IiwiTUlOX01BVENIIiwibG1faW5pdCIsImRlZmxhdGVSZXNldCIsImRlZmxhdGVFbmQiLCJkZWZsYXRlUGFyYW1zIiwiZXJyIiwiZGVmbGF0ZSIsImRlZmxhdGVTZXREaWN0aW9uYXJ5IiwiX3N0cm0iLCJkaWN0aW9uYXJ5IiwiZGljdExlbmd0aCIsImZsdXNoIiwibGV2ZWxfZmxhZ3MiLCJvbGRfZmx1c2giLCJic3RhdGUiLCJuZXh0X291dCIsIm5leHRfaW4iLCJaX05FRURfRElDVCIsImF2YWlsX291dCIsInB1dFNob3J0TVNCIiwibWF4X3N0YXJ0IiwibWF4X2Jsb2NrX3NpemUiLCJkZWZsYXRlX3N0b3JlZCIsImJmbHVzaCIsImhhc2hfaGVhZCIsImRlZmxhdGVfZmFzdCIsIm1heF9pbnNlcnQiLCJkZWZsYXRlX3Nsb3ciLCJTVEFUSUNfVFJFRVMiLCJaU3RyZWFtIiwibmV4dF9pbl9pbmRleCIsIm5leHRfb3V0X2luZGV4IiwicmV0Iiwic3RhcnQiLCJzaXplIiwiWl9NRU1fRVJST1IiLCJpbmZsYXRlX21hc2siLCJNQU5ZIiwiZml4ZWRfdGwiLCJmaXhlZF90ZCIsImNwbGVucyIsImNwbGV4dCIsImNwZGlzdCIsImNwZGV4dCIsIkJNQVgiLCJJbmZUcmVlIiwiaG4iLCJodWZ0X2J1aWxkIiwiYmluZGV4IiwiaHAiLCJtYXNrIiwicSIsInhwIiwiaW5pdFdvcmtBcmVhIiwidnNpemUiLCJJbnQzMkFycmF5IiwiaW5mbGF0ZV90cmVlc19iaXRzIiwiYmIiLCJ0YiIsImluZmxhdGVfdHJlZXNfZHluYW1pYyIsIm5sIiwibmQiLCJibCIsImJkIiwidGwiLCJ0ZCIsImluZmxhdGVfdHJlZXNfZml4ZWQiLCJTVEFSVCIsIkxFTiIsIkxFTkVYVCIsIkRJU1QiLCJESVNURVhUIiwiQ09QWSIsIkxJVCIsIldBU0giLCJFTkQiLCJCQURDT0RFIiwiSW5mQ29kZXMiLCJtb2RlIiwidHJlZV9pbmRleCIsIm5lZWQiLCJsaXQiLCJsYml0cyIsImRiaXRzIiwibHRyZWVfaW5kZXgiLCJkdHJlZV9pbmRleCIsImluZmxhdGVfZmFzdCIsInRsX2luZGV4IiwidGRfaW5kZXgiLCJ0cCIsInRwX2luZGV4IiwibWwiLCJtZCIsInRwX2luZGV4X3RfMyIsImJpdGIiLCJiaXRrIiwid3JpdGUiLCJyZWFkIiwiZW5kIiwicmVhZF9ieXRlIiwicHJvYyIsInRpbmRleCIsImluZmxhdGVfZmx1c2giLCJmcmVlIiwiYm9yZGVyIiwiVFlQRSIsIkxFTlMiLCJUQUJMRSIsIkJUUkVFIiwiRFRSRUUiLCJDT0RFUyIsIkRSWSIsIkRPTkVMT0NLUyIsIkJBREJMT0NLUyIsIkluZkJsb2NrcyIsImJsZW5zIiwibGVmdCIsInRhYmxlIiwiY29kZXMiLCJsYXN0IiwiaHVmdHMiLCJpbmZ0cmVlIiwicmVzZXQiLCJibF8iLCJiZF8iLCJ0bF8iLCJ0ZF8iLCJzZXRfZGljdGlvbmFyeSIsInN5bmNfcG9pbnQiLCJCQUQiLCJtYXJrIiwiSW5mbGF0ZSIsImluZmxhdGVSZXNldCIsImlzdGF0ZSIsImJsb2NrcyIsIndhcyIsIm1hcmtlciIsIndiaXRzIiwiaW5mbGF0ZUVuZCIsImluZmxhdGVJbml0IiwiaW5mbGF0ZSIsImluZmxhdGVTZXREaWN0aW9uYXJ5IiwiaW5mbGF0ZVN5bmMiLCJpbmZsYXRlU3luY1BvaW50IiwiTUFYXzMyX0JJVFMiLCJNQVhfMTZfQklUUyIsIkNFTlRSQUxfRklMRV9IRUFERVJfU0lHTkFUVVJFIiwiWklQNjRfRU5EX09GX0NFTlRSQUxfRElSX1NJR05BVFVSRSIsIkVORF9PRl9DRU5UUkFMX0RJUl9MRU5HVEgiLCJVTkRFRklORURfVkFMVUUiLCJVTkRFRklORURfVFlQRSIsIkZVTkNUSU9OX1RZUEUiLCJTdHJlYW1BZGFwdGVyIiwiQ29kZWMiLCJUcmFuc2Zvcm1TdHJlYW0iLCJfZm9ybWF0IiwiY29kZWMiLCJzdXBlciIsInRyYW5zZm9ybSIsImNodW5rIiwiY29udHJvbGxlciIsImVucXVldWUiLCJhcHBlbmQiLCJtYXhXb3JrZXJzIiwibmF2aWdhdG9yIiwiaGFyZHdhcmVDb25jdXJyZW5jeSIsIl9lcnJvciIsIkRFRkFVTFRfQ09ORklHVVJBVElPTiIsImNodW5rU2l6ZSIsInRlcm1pbmF0ZVdvcmtlclRpbWVvdXQiLCJ1c2VXZWJXb3JrZXJzIiwidXNlQ29tcHJlc3Npb25TdHJlYW0iLCJ3b3JrZXJTY3JpcHRzIiwiQ29tcHJlc3Npb25TdHJlYW1OYXRpdmUiLCJDb21wcmVzc2lvblN0cmVhbSIsIkRlY29tcHJlc3Npb25TdHJlYW1OYXRpdmUiLCJEZWNvbXByZXNzaW9uU3RyZWFtIiwiY29uZmlnIiwiYXNzaWduIiwiY29uZmlndXJlIiwiY29uZmlndXJhdGlvbiIsImJhc2VVUkwiLCJzZXRJZkRlZmluZWQiLCJwcm9wZXJ0eU5hbWUiLCJwcm9wZXJ0eVZhbHVlIiwibWltZVR5cGVzIiwic3VidHlwZSIsImluZGV4TWltZVR5cGUiLCJDcmMzMiIsImNyYyIsIm9mZnNldCIsIkNyYzMyU3RyZWFtIiwic3RyZWFtIiwiY3JjMzIiLCJEYXRhVmlldyIsImJ1ZmZlciIsInNldFVpbnQzMiIsImJpdEFycmF5IiwiYTEiLCJhMiIsImdldFBhcnRpYWwiLCJfc2hpZnRSaWdodCIsImJpdExlbmd0aCIsImNsYW1wIiwiY2VpbCIsInBhcnRpYWwiLCJfZW5kIiwiY2FycnkiLCJsYXN0MiIsInNoaWZ0MiIsInBvcCIsImJ5dGVzIiwiZnJvbUJpdHMiLCJhcnIiLCJieXRlTGVuZ3RoIiwidG1wIiwidG9CaXRzIiwiaGFzaCIsInNoYTEiLCJibG9ja1NpemUiLCJfaW5pdCIsIl9rZXkiLCJfaCIsIl9idWZmZXIiLCJfbGVuZ3RoIiwidXRmOFN0cmluZyIsIm9sIiwiVWludDMyQXJyYXkiLCJfYmxvY2siLCJmaW5hbGl6ZSIsIl9mIiwiX1MiLCJ3b3JkcyIsImNpcGhlciIsImFlcyIsIl90YWJsZXMiLCJfcHJlY29tcHV0ZSIsInNib3giLCJkZWNUYWJsZSIsImtleUxlbiIsImVuY0tleSIsImRlY0tleSIsInJjb24iLCJlbmNyeXB0IiwiX2NyeXB0IiwiZGVjcnlwdCIsImVuY1RhYmxlIiwic2JveEludiIsInRoIiwieEludiIsIngyIiwieDQiLCJ4OCIsInREZWMiLCJ0RW5jIiwiaW5wdXQiLCJkaXIiLCJuSW5uZXJSb3VuZHMiLCJ0MCIsInQxIiwidDIiLCJ0MyIsImIyIiwia0luZGV4IiwiZ2V0UmFuZG9tVmFsdWVzIiwidHlwZWRBcnJheSIsIm1fdyIsIm1feiIsInJjYWNoZSIsIl9yIiwicHJmIiwiaXYiLCJfcHJmIiwiX2luaXRJdiIsIl9pdiIsImNhbGN1bGF0ZSIsImluY1dvcmQiLCJ3b3JkIiwiYjEiLCJiMyIsImluY0NvdW50ZXIiLCJjb3VudGVyIiwibWlzYyIsImltcG9ydEtleSIsInBhc3N3b3JkIiwiaG1hY1NoYTEiLCJwYmtkZjIiLCJzYWx0IiwidWkiLCJhcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwib3V0TGVuZ3RoIiwic2V0SW50MzIiLCJobWFjIiwiSGFzaCIsIl9oYXNoIiwiZXhLZXkiLCJfYmFzZUhhc2giLCJicyIsIl9yZXN1bHRIYXNoIiwiX3VwZGF0ZWQiLCJkaWdlc3QiLCJHRVRfUkFORE9NX1ZBTFVFU19TVVBQT1JURUQiLCJjcnlwdG8iLCJFUlJfSU5WQUxJRF9QQVNTV09SRCIsIkVSUl9JTlZBTElEX1NJR05BVFVSRSIsIkVSUl9BQk9SVF9DSEVDS19QQVNTV09SRCIsIkJMT0NLX0xFTkdUSCIsIlBCS0RGMl9BTEdPUklUSE0iLCJCQVNFX0tFWV9BTEdPUklUSE0iLCJERVJJVkVEX0JJVFNfQUxHT1JJVEhNIiwiaXRlcmF0aW9ucyIsIkRFUklWRURfQklUU19VU0FHRSIsIlNBTFRfTEVOR1RIIiwiS0VZX0xFTkdUSCIsIlNJR05BVFVSRV9MRU5HVEgiLCJDT1VOVEVSX0RFRkFVTFRfVkFMVUUiLCJDUllQVE9fQVBJX1NVUFBPUlRFRCIsInN1YnRsZSIsIlNVQlRMRV9BUElfU1VQUE9SVEVEIiwiY29kZWNCeXRlcyIsIkFlcyIsIkN0ckdsYWRtYW4iLCJIbWFjU2hhMSIsIklNUE9SVF9LRVlfU1VQUE9SVEVEIiwiREVSSVZFX0JJVFNfU1VQUE9SVEVEIiwiZGVyaXZlQml0cyIsIkFFU0RlY3J5cHRpb25TdHJlYW0iLCJzaWduZWQiLCJlbmNyeXB0aW9uU3RyZW5ndGgiLCJjaGVja1Bhc3N3b3JkT25seSIsInJlYWR5IiwicmVzb2x2ZVJlYWR5Iiwic3RyZW5ndGgiLCJhZXNDcnlwdG8iLCJwcmVhbWJsZSIsInBhc3N3b3JkVmVyaWZpY2F0aW9uS2V5IiwiY3JlYXRlS2V5cyIsInBhc3N3b3JkVmVyaWZpY2F0aW9uIiwiY3JlYXRlRGVjcnlwdGlvbktleXMiLCJvdXRwdXQiLCJjdHIiLCJjaHVua1RvRGVjcnlwdCIsIm9yaWdpbmFsU2lnbmF0dXJlIiwiZGVjcnlwdGVkQ2h1bmtBcnJheSIsImVuY3J5cHRlZENodW5rIiwiZGVjcnlwdGVkQ2h1bmsiLCJzaWduYXR1cmUiLCJpbmRleFNpZ25hdHVyZSIsIkFFU0VuY3J5cHRpb25TdHJlYW0iLCJjcmVhdGVFbmNyeXB0aW9uS2V5cyIsImVuY3J5cHRlZENodW5rQXJyYXkiLCJwYWRkaW5nU3RhcnQiLCJwYWRkaW5nRW5kIiwidmVyaWZ5U2lnbmF0dXJlIiwiaW5wdXRMZW5ndGgiLCJpbnB1dEFycmF5IiwiZXhwYW5kIiwiaW5wdXRDaHVuayIsIm91dHB1dENodW5rIiwiZW5jb2RlZFBhc3N3b3JkIiwiVGV4dEVuY29kZXIiLCJjaGFyQ29kZUF0IiwiZW5jb2RlIiwiZW5jb2RlVGV4dCIsImJhc2VLZXkiLCJmb3JtYXQiLCJhbGdvcml0aG0iLCJleHRyYWN0YWJsZSIsImtleVVzYWdlcyIsImRlcml2ZWRCaXRzIiwiY29tcG9zaXRlS2V5IiwiYXV0aGVudGljYXRpb24iLCJmcm9tIiwibGVmdEFycmF5IiwicmlnaHRBcnJheSIsImJlZ2luIiwiWmlwQ3J5cHRvRGVjcnlwdGlvblN0cmVhbSIsInppcENyeXB0byIsImRlY3J5cHRlZEhlYWRlciIsIkhFQURFUl9MRU5HVEgiLCJaaXBDcnlwdG9FbmNyeXB0aW9uU3RyZWFtIiwiZ2V0Qnl0ZSIsInVwZGF0ZUtleXMiLCJjcmNLZXkwIiwiY3JjS2V5MiIsImJ5dGUiLCJrZXkwIiwia2V5MSIsImtleTIiLCJnZXRJbnQzMiIsImltdWwiLCJnZXRJbnQ4IiwidGVtcCIsIm51bWJlciIsIkNPTVBSRVNTSU9OX0ZPUk1BVCIsIkRlZmxhdGVTdHJlYW0iLCJjb21wcmVzc2VkIiwiZW5jcnlwdGVkIiwiY3JjMzJTdHJlYW0iLCJlbmNyeXB0aW9uU3RyZWFtIiwicmVhZGFibGUiLCJmaWx0ZXJFbXB0eUNodW5rcyIsInBpcGVUaHJvdWdoIiwicGlwZVRocm91Z2hDb21tcHJlc3Npb25TdHJlYW0iLCJzZXRSZWFkYWJsZSIsImdldFVpbnQzMiIsIkluZmxhdGVTdHJlYW0iLCJkZWNyeXB0aW9uU3RyZWFtIiwiZGF0YVZpZXdTaWduYXR1cmUiLCJDb2RlY1N0cmVhbU5hdGl2ZSIsIkNvZGVjU3RyZWFtIiwidHJhbnNmb3JtU3RyZWFtIiwiTUVTU0FHRV9FVkVOVF9UWVBFIiwiTUVTU0FHRV9QVUxMIiwiTUVTU0FHRV9EQVRBIiwiTUVTU0FHRV9BQ0tfREFUQSIsIk1FU1NBR0VfQ0xPU0UiLCJDT0RFQ19JTkZMQVRFIiwiY29kZWNUeXBlIiwiU3RyZWFtIiwic3RhcnRzV2l0aCIsIldFQl9XT1JLRVJTX1NVUFBPUlRFRCIsIldvcmtlciIsIkNvZGVjV29ya2VyIiwid29ya2VyRGF0YSIsIndyaXRhYmxlIiwic3RyZWFtT3B0aW9ucyIsInRyYW5zZmVyU3RyZWFtcyIsInNjcmlwdHMiLCJvblRhc2tGaW5pc2hlZCIsInNpZ25hbCIsImJ1c3kiLCJQcm9ncmVzc1dhdGNoZXJTdHJlYW0iLCJ0ZXJtaW5hdGUiLCJ3b3JrZXIiLCJpbnRlcmZhY2UiLCJjcmVhdGVXZWJXb3JrZXJJbnRlcmZhY2UiLCJjcmVhdGVXb3JrZXJJbnRlcmZhY2UiLCJyZWFkYWJsZVNvdXJjZSIsIm9uc3RhcnQiLCJvbnByb2dyZXNzIiwib25lbmQiLCJjaHVua09mZnNldCIsImNhbGxIYW5kbGVyIiwiaGlnaFdhdGVyTWFyayIsImhhbmRsZXIiLCJwYXJhbWV0ZXJzIiwicnVuIiwiY29kZWNTdHJlYW0iLCJwaXBlVG8iLCJwcmV2ZW50Q2xvc2UiLCJwcmV2ZW50QWJvcnQiLCJydW5Xb3JrZXIiLCJnZXRXZWJXb3JrZXIiLCJyZXNvbHZlUmVzdWx0IiwicmVqZWN0UmVzdWx0IiwicmVhZGVyIiwid3JpdGVyIiwiY2xvc2VkIiwid3JpdGFibGVTb3VyY2UiLCJnZXRXcml0ZXIiLCJyZXNvbHZlU3RyZWFtQ2xvc2VkIiwiV3JpdGFibGVTdHJlYW0iLCJjbG9zZSIsInJlbGVhc2VMb2NrIiwiYWJvcnQiLCJyZWFzb24iLCJ3YXRjaENsb3NlZFN0cmVhbSIsInNlbmRNZXNzYWdlIiwiZ2V0UmVhZGVyIiwicmVzdWx0VmFsdWUiLCJydW5XZWJXb3JrZXIiLCJjbGFzc2ljV29ya2Vyc1N1cHBvcnRlZCIsInRyYW5zZmVyU3RyZWFtc1N1cHBvcnRlZCIsIndvcmtlck9wdGlvbnMiLCJzY3JpcHRVcmwiLCJtZXNzYWdlSWQiLCJtZXNzYWdlIiwic3RhY2siLCJyZXNwb25zZUVycm9yIiwib25NZXNzYWdlIiwidHJhbnNmZXJhYmxlcyIsInBvc3RNZXNzYWdlIiwicG9vbCIsInBlbmRpbmdSZXF1ZXN0cyIsImluZGV4V29ya2VyIiwiY2xlYXJUZXJtaW5hdGVUaW1lb3V0IiwidGVybWluYXRlVGltZW91dCIsIkRFRkFVTFRfQ0hVTktfU0laRSIsIlBST1BFUlRZX05BTUVfV1JJVEFCTEUiLCJpbml0aWFsaXplZCIsIlJlYWRlciIsIlJlYWRhYmxlU3RyZWFtIiwicHVsbCIsImRpc2tOdW1iZXJTdGFydCIsInJlYWRVaW50OEFycmF5IiwibWluIiwiQmxvYlJlYWRlciIsImJsb2IiLCJvZmZzZXRFbmQiLCJCbG9iV3JpdGVyIiwiY29udGVudFR5cGUiLCJoZWFkZXJzIiwiUmVzcG9uc2UiLCJnZXREYXRhIiwiVGV4dFdyaXRlciIsImVuY29kaW5nIiwidXRmOCIsInRleHQiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwib25lcnJvciIsInJlYWRBc1RleHQiLCJTcGxpdERhdGFSZWFkZXIiLCJyZWFkZXJzIiwibGFzdERpc2tOdW1iZXIiLCJsYXN0RGlza09mZnNldCIsImRpc2tSZWFkZXIiLCJpbmRleERpc2tSZWFkZXIiLCJkaXNrTnVtYmVyIiwiY3VycmVudERpc2tOdW1iZXIiLCJjdXJyZW50UmVhZGVyT2Zmc2V0IiwiY3VycmVudFJlYWRlciIsImN1cnJlbnRSZWFkZXJTaXplIiwiY2h1bmtMZW5ndGgiLCJTcGxpdERhdGFXcml0ZXIiLCJ3cml0ZXJHZW5lcmF0b3IiLCJtYXhTaXplIiwiemlwV3JpdGVyIiwiZGlza1NvdXJjZVdyaXRlciIsImRpc2tXcml0YWJsZSIsImRpc2tXcml0ZXIiLCJkaXNrT2Zmc2V0IiwiYXZhaWxhYmxlU2l6ZSIsIndyaXRlQ2h1bmsiLCJjbG9zZURpc2siLCJpbml0U3RyZWFtIiwiaW5pdFNpemUiLCJpbml0UmVhZGVyIiwiQ1A0MzciLCJzcGxpdCIsIlZBTElEX0NQNDM3IiwiZGVjb2RlVGV4dCIsInRyaW0iLCJzdHJpbmdWYWx1ZSIsImluZGV4Q2hhcmFjdGVyIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJkZWNvZGVDUDQzNyIsIlBST1BFUlRZX05BTUVfRklMRU5BTUUiLCJQUk9QRVJUWV9OQU1FX1JBV19GSUxFTkFNRSIsIlBST1BFUlRZX05BTUVfQ09NTUVOVCIsIlBST1BFUlRZX05BTUVfUkFXX0NPTU1FTlQiLCJQUk9QRVJUWV9OQU1FX1VOQ09NUFBSRVNTRURfU0laRSIsIlBST1BFUlRZX05BTUVfQ09NUFBSRVNTRURfU0laRSIsIlBST1BFUlRZX05BTUVfT0ZGU0VUIiwiUFJPUEVSVFlfTkFNRV9ESVNLX05VTUJFUl9TVEFSVCIsIlBST1BFUlRZX05BTUVfTEFTVF9NT0RJRklDQVRJT05fREFURSIsIlBST1BFUlRZX05BTUVfUkFXX0xBU1RfTU9ESUZJQ0FUSU9OX0RBVEUiLCJQUk9QRVJUWV9OQU1FX0xBU1RfQUNDRVNTX0RBVEUiLCJQUk9QRVJUWV9OQU1FX0NSRUFUSU9OX0RBVEUiLCJQUk9QRVJUWV9OQU1FUyIsIkVudHJ5IiwiRVJSX0JBRF9GT1JNQVQiLCJFUlJfVU5TVVBQT1JURURfQ09NUFJFU1NJT04iLCJFUlJfU1BMSVRfWklQX0ZJTEUiLCJDSEFSU0VUX1VURjgiLCJDSEFSU0VUX0NQNDM3IiwiWklQNjRfUFJPUEVSVElFUyIsIlpJUDY0X0VYVFJBQ1RJT04iLCJnZXRWYWx1ZSIsImdldEJpZ1VpbnQ2NCIsIlppcFJlYWRlciIsImdldEVudHJpZXNHZW5lcmF0b3IiLCJ6aXBSZWFkZXIiLCJnZXRDaHVua1NpemUiLCJlbmRPZkRpcmVjdG9yeUluZm8iLCJzdGFydE9mZnNldCIsIm1pbmltdW1CeXRlcyIsIm1heGltdW1MZW5ndGgiLCJzaWduYXR1cmVBcnJheSIsImdldERhdGFWaWV3IiwiaW5kZXhCeXRlIiwic2Vla1NpZ25hdHVyZSIsImVuZE9mRGlyZWN0b3J5VmlldyIsImRpcmVjdG9yeURhdGFMZW5ndGgiLCJkaXJlY3RvcnlEYXRhT2Zmc2V0IiwiY29tbWVudE9mZnNldCIsImNvbW1lbnRMZW5ndGgiLCJnZXRVaW50MTYiLCJhcHBlbmRlZERhdGFPZmZzZXQiLCJleHBlY3RlZExhc3REaXNrTnVtYmVyIiwiZmlsZXNMZW5ndGgiLCJwcmVwZW5kZWREYXRhTGVuZ3RoIiwiZW5kT2ZEaXJlY3RvcnlMb2NhdG9yVmlldyIsImVuZE9mRGlyZWN0b3J5QXJyYXkiLCJleHBlY3RlZERpcmVjdG9yeURhdGFPZmZzZXQiLCJvcmlnaW5hbERpcmVjdG9yeURhdGFPZmZzZXQiLCJkaXJlY3RvcnlBcnJheSIsImRpcmVjdG9yeVZpZXciLCJleHBlY3RlZERpcmVjdG9yeURhdGFMZW5ndGgiLCJmaWxlbmFtZUVuY29kaW5nIiwiZ2V0T3B0aW9uVmFsdWUiLCJjb21tZW50RW5jb2RpbmciLCJpbmRleEZpbGUiLCJmaWxlRW50cnkiLCJaaXBFbnRyeSIsInJlYWRDb21tb25IZWFkZXIiLCJsYW5ndWFnZUVuY29kaW5nRmxhZyIsIkJvb2xlYW4iLCJiaXRGbGFnIiwiZmlsZW5hbWVPZmZzZXQiLCJleHRyYUZpZWxkT2Zmc2V0IiwiZmlsZW5hbWVMZW5ndGgiLCJleHRyYUZpZWxkTGVuZ3RoIiwidmVyc2lvbk1hZGVCeSIsIm1zRG9zQ29tcGF0aWJsZSIsInJhd0ZpbGVuYW1lIiwiZW5kT2Zmc2V0IiwicmF3Q29tbWVudCIsImZpbGVuYW1lVVRGOCIsImNvbW1lbnRVVEY4IiwiZGlyZWN0b3J5IiwiZ2V0VWludDgiLCJvZmZzZXRGaWxlRW50cnkiLCJjb21wcmVzc2VkU2l6ZSIsInVuY29tcHJlc3NlZFNpemUiLCJpbnRlcm5hbEZpbGVBdHRyaWJ1dGUiLCJleHRlcm5hbEZpbGVBdHRyaWJ1dGUiLCJyYXdFeHRyYUZpZWxkIiwiZmlsZW5hbWUiLCJjb21tZW50IiwiZW5kc1dpdGgiLCJyZWFkQ29tbW9uRm9vdGVyIiwiZW50cnkiLCJleHRyYWN0UHJlcGVuZGVkRGF0YSIsImV4dHJhY3RBcHBlbmRlZERhdGEiLCJwcmVwZW5kZWREYXRhIiwiYXBwZW5kZWREYXRhIiwiZ2V0RW50cmllcyIsImVudHJpZXMiLCJ6aXBFbnRyeSIsImV4dHJhRmllbGRBRVMiLCJjb21wcmVzc2lvbk1ldGhvZCIsInJhd0xhc3RNb2REYXRlIiwibG9jYWxEaXJlY3RvcnkiLCJkYXRhVmlldyIsIm9yaWdpbmFsQ29tcHJlc3Npb25NZXRob2QiLCJsYXN0QWNjZXNzRGF0ZSIsImNyZWF0aW9uRGF0ZSIsImRhdGFPZmZzZXQiLCJJbmZpbml0eSIsImluaXRXcml0ZXIiLCJkYXRhRGVzY3JpcHRvciIsIm91dHB1dFNpemUiLCJzdHJlYW1Db3B5IiwiZmluZCIsIk51bWJlciIsImlzRmluaXRlIiwibG9ja2VkIiwicmF3Qml0RmxhZyIsImxhc3RNb2REYXRlIiwiZ2V0RGF0ZSIsImV4dHJhRmllbGQiLCJyYXdFeHRyYUZpZWxkVmlldyIsIm9mZnNldEV4dHJhRmllbGQiLCJleHRyYUZpZWxkWmlwNjQiLCJ6aXA2NCIsImV4dHJhRmllbGRWaWV3IiwibWlzc2luZ1Byb3BlcnRpZXMiLCJpbmRleE1pc3NpbmdQcm9wZXJ0eSIsImV4dHJhY3Rpb24iLCJyZWFkRXh0cmFGaWVsZFppcDY0IiwiZXh0cmFGaWVsZFVuaWNvZGVQYXRoIiwicmVhZEV4dHJhRmllbGRVbmljb2RlIiwiZXh0cmFGaWVsZFVuaWNvZGVDb21tZW50IiwidmVuZG9yVmVyc2lvbiIsInZlbmRvcklkIiwicmVhZEV4dHJhRmllbGRBRVMiLCJleHRyYUZpZWxkTlRGUyIsInRhZzFEYXRhIiwidGFnVmFsdWUiLCJhdHRyaWJ1dGVTaXplIiwidGFnMVZpZXciLCJyYXdMYXN0QWNjZXNzRGF0ZSIsInJhd0NyZWF0aW9uRGF0ZSIsImdldERhdGVOVEZTIiwiZXh0cmFGaWVsZERhdGEiLCJyZWFkRXh0cmFGaWVsZE5URlMiLCJleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXAiLCJmbGFncyIsInRpbWVQcm9wZXJ0aWVzIiwidGltZVJhd1Byb3BlcnRpZXMiLCJpbmRleFByb3BlcnR5IiwidGltZSIsInJhd1Byb3BlcnR5TmFtZSIsInJlYWRFeHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXAiLCJleHRyYUZpZWxkVVNEWiIsImV4dHJhRmllbGRVbmljb2RlIiwidmFsaWQiLCJ0aW1lUmF3IiwiZGF0ZSIsIkJpZ0ludCIsInZpZXciLCJCbG9iIiwiYnVmc2l6ZSIsImJ1ZmZlckluZGV4IiwiYnVmZmVyU2l6ZSIsImJ1ZmZlcnMiLCJub21vcmVpbnB1dCIsIlNvbmdMb2FkZXIiLCJzZXRJc092ZXIiLCJzZXRGaWxlcyIsImZpbGVJbnB1dCIsInNldEZpbGVJbnB1dCIsImhhbmRsZUZpbGVzTG9hZGluZyIsImZpbGVzIiwib25sb2FkZW5kIiwiX2ZpbGVzIiwicGFyc2UiLCJyZWFkQXNEYXRhVVJMIiwib25EcmFnT3ZlciIsInByZXZlbnREZWZhdWx0Iiwib25EcmFnTGVhdmUiLCJvbkRyb3AiLCJkYXRhVHJhbnNmZXIiLCJjbGljayIsIm9uQ2hhbmdlIiwibG9jYWxzIiwiY2hvc2VuIiwic2hvd2luZyIsIldoZWVsIiwic29uZ01lYXN1cmVUaW1lIiwib25Nb3VzZURvd24iLCJjbGllbnRYIiwiY2xpZW50WSIsIm9uTW91c2VVcCIsImFsZXJ0Iiwid2hlZWwiLCJvbk1vdXNlTW92ZSIsImR4IiwiZHkiLCJzcXJ0IiwiZGVnIiwiYXRhbjIiLCJQSSIsIm9uQ29udGV4dE1lbnUiLCJzdG9wUHJvcGFnYXRpb24iLCJvblRvdWNoU3RhcnQiLCJ0b3VjaGVzIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoRW5kIiwiRGFzaGJvYWQiLCJpbml0U29uZ3MiLCJnZXRFbGVtZW50QnlJZCJdLCJzb3VyY2VSb290IjoiIn0=