(()=>{"use strict";var e={142:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,'*{box-sizing:border-box}html{user-select:none;overflow:hidden}html body{background-color:#222;width:100vw;height:100vh;overflow:hidden;position:relative;padding:0;margin:0}.wheel{--x: 0px;--y: 0px;position:absolute;top:var(--y);left:var(--x);width:396px;height:396px;transform:translate(-50%, -100%);transform-origin:0% 0%}.wheel.on .arc{opacity:.8;transform:scale(1) rotate(var(--rotation)) !important;transition-timing-function:cubic-bezier(0, 0.5, 0.5, 1.5)}.wheel .arc{position:absolute;top:0;right:0;width:50%;height:50%;transform-origin:0% 100%;background-image:radial-gradient(circle at 0% 100%, transparent, transparent 29.5%, var(--color-border) 30%, var(--color-border) 30.5%, var(--color) 31%, var(--color) 50%, var(--color-border) 50.25%, var(--color-border) 51.5%, transparent 51.75%, transparent);-webkit-clip-path:polygon(0 0, 0 99%, 99% 0);clip-path:polygon(0 0, 0 99%, 99% 0);opacity:0;transform:scale(0) rotate(var(--rotation))}.wheel .arc i{position:absolute;top:40%;left:15%;font-size:2rem;transform:rotate(calc(var(--rotation) * -1));color:rgba(255,255,255,.8);transition:color .3s}.wheel[data-chosen="1"] .arc:nth-child(1){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="1"] .arc:nth-child(1) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(1){--rotation: -22.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}.wheel[data-chosen="2"] .arc:nth-child(2){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="2"] .arc:nth-child(2) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(2){--rotation: 22.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}.wheel[data-chosen="3"] .arc:nth-child(3){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="3"] .arc:nth-child(3) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(3){--rotation: 67.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}.wheel[data-chosen="4"] .arc:nth-child(4){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="4"] .arc:nth-child(4) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(4){--rotation: 112.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}.wheel[data-chosen="5"] .arc:nth-child(5){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="5"] .arc:nth-child(5) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(5){--rotation: 157.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}.wheel[data-chosen="6"] .arc:nth-child(6){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="6"] .arc:nth-child(6) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(6){--rotation: 202.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}.wheel[data-chosen="7"] .arc:nth-child(7){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="7"] .arc:nth-child(7) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(7){--rotation: 247.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}.wheel[data-chosen="8"] .arc:nth-child(8){opacity:1;transform:scale(1.1) rotate(var(--rotation)) !important;filter:brightness(150%)}.wheel[data-chosen="8"] .arc:nth-child(8) i{color:rgba(0,0,0,.5)}.wheel .arc:nth-child(8){--rotation: 292.5deg;--color: hsl(180deg, 36%, 36%);--color-border: hsl(180deg, 36%, 36%)}',"",{version:3,sources:["webpack://./src/components/wheel.scss"],names:[],mappings:"AAAA,EACI,qBAAA,CAGJ,KACI,gBAAA,CACA,eAAA,CAEA,UACI,qBAAA,CACA,WAAA,CACA,YAAA,CACA,eAAA,CACA,iBAAA,CACA,SAAA,CACA,QAAA,CAIR,OACI,QAAA,CACA,QAAA,CACA,iBAAA,CACA,YAAA,CACA,aAAA,CACA,WAAA,CACA,YAAA,CACA,gCAAA,CACA,sBAAA,CAGI,eACI,UAAA,CACA,qDAAA,CACA,yDAAA,CAIR,YACI,iBAAA,CACA,KAAA,CACA,OAAA,CACA,SAAA,CACA,UAAA,CACA,wBAAA,CACA,mQAAA,CAIA,4CAAA,CACA,oCAAA,CACA,SAAA,CACA,0CAAA,CAEA,cACI,iBAAA,CACA,OAAA,CACA,QAAA,CACA,cAAA,CACA,4CAAA,CACA,0BAAA,CACA,oBAAA,CAOI,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,oBAAA,CAGA,8BAAA,CACA,qCAAA,CAlBA,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,mBAAA,CAGA,8BAAA,CACA,qCAAA,CAlBA,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,mBAAA,CAGA,8BAAA,CACA,qCAAA,CAlBA,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,oBAAA,CAGA,8BAAA,CACA,qCAAA,CAlBA,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,oBAAA,CAGA,8BAAA,CACA,qCAAA,CAlBA,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,oBAAA,CAGA,8BAAA,CACA,qCAAA,CAlBA,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,oBAAA,CAGA,8BAAA,CACA,qCAAA,CAlBA,0CACI,SAAA,CACA,uDAAA,CACA,uBAAA,CAEA,4CACI,oBAAA,CAOZ,yBACI,oBAAA,CAGA,8BAAA,CACA,qCAAA",sourcesContent:["* {\n    box-sizing: border-box;\n}\n\nhtml {\n    user-select: none;\n    overflow: hidden;\n\n    body {\n        background-color: #222;\n        width: 100vw;\n        height: 100vh;\n        overflow: hidden;\n        position: relative;\n        padding: 0;\n        margin: 0;\n    }\n}\n\n.wheel {\n    --x: 0px;\n    --y: 0px;\n    position: absolute;\n    top: var(--y);\n    left: var(--x);\n    width: 396px;\n    height: 396px;\n    transform: translate(-50%, -100%);\n    transform-origin: 0% 0%;\n\n    &.on {\n        .arc {\n            opacity: 0.8;\n            transform: scale(1) rotate(var(--rotation)) !important;\n            transition-timing-function: cubic-bezier(0, 0.5, 0.5, 1.5);\n        }\n    }\n\n    .arc {\n        position: absolute;\n        top: 0;\n        right: 0;\n        width: 50%;\n        height: 50%;\n        transform-origin: 0% 100%;\n        background-image: radial-gradient(circle at 0% 100%, transparent, transparent 29.5%, var(--color-border) 30%, var(--color-border) 30.5%, var(--color) 31%, var(--color) 50%, var(--color-border) 50.25%, var(--color-border) 51.5%, transparent 51.75%, transparent);\n        // transition-property: transform, opacity;\n        // transition-duration: 0.3s;\n        // transition-timing-function: cubic-bezier(0.4, -0.4, 0.7, -0.3);\n        -webkit-clip-path: polygon(0 0, 0 99%, 99% 0);\n        clip-path: polygon(0 0, 0 99%, 99% 0);\n        opacity: 0;\n        transform: scale(0) rotate(var(--rotation));\n\n        i {\n            position: absolute;\n            top: 40%;\n            left: 15%;\n            font-size: 2rem;\n            transform: rotate(calc(var(--rotation) * -1));\n            color: rgba(255, 255, 255, 0.8);\n            transition: color 0.3s;\n        }\n    }\n\n    @for $i from 1 through 8 {\n        &[data-chosen='#{$i}'] {\n            .arc {\n                &:nth-child(#{$i}) {\n                    opacity: 1;\n                    transform: scale(1.1) rotate(var(--rotation)) !important;\n                    filter: brightness(150%);\n\n                    i {\n                        color: rgba(0, 0, 0, 0.5);\n                    }\n                }\n            }\n        }\n\n        .arc {\n            &:nth-child(#{$i}) {\n                --rotation: #{-22.5 + ($i - 1) * 45}deg;\n                // --color: hsl(calc(#{($i - 1) * 45}deg + 0deg), 36%, 36%);\n                // --color-border: hsl(calc(#{($i - 1) * 45}deg + 90deg), 36%, 60%);\n                --color: hsl(180deg, 36%, 36%);\n                --color-border: hsl(180deg, 36%, 36%);\n                // transition-delay: #{($i % 2) * 0.015}s;\n            }\n        }\n    }\n}"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&a[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},a=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],u=o[l]||0,d="".concat(l," ").concat(u);o[l]=u+1;var f=n(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=i(p,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=n(o[a]);t[s].references--}for(var c=r(e,i),l=0;l<o.length;l++){var u=n(o[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e,t,r,i,o,a,s,c,l,u={},d=[],f=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,p=Array.isArray;function h(e,t){for(var n in t)e[n]=t[n];return e}function m(e){var t=e.parentNode;t&&t.removeChild(e)}function v(t,n,r){var i,o,a,s={};for(a in n)"key"==a?i=n[a]:"ref"==a?o=n[a]:s[a]=n[a];if(arguments.length>2&&(s.children=arguments.length>3?e.call(arguments,2):r),"function"==typeof t&&null!=t.defaultProps)for(a in t.defaultProps)void 0===s[a]&&(s[a]=t.defaultProps[a]);return _(t,s,i,o,null)}function _(e,n,i,o,a){var s={type:e,props:n,key:i,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:null==a?++r:a,__i:-1,__u:0};return null==a&&null!=t.vnode&&t.vnode(s),s}function g(e){return e.children}function w(e,t){this.props=e,this.context=t}function b(e,t){if(null==t)return e.__?b(e.__,e.__i+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?b(e):null}function x(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return x(e)}}function y(e){(!e.__d&&(e.__d=!0)&&o.push(e)&&!k.__r++||a!==t.debounceRendering)&&((a=t.debounceRendering)||s)(k)}function k(){var e,n,r,i,a,s,l,u,d;for(o.sort(c);e=o.shift();)e.__d&&(n=o.length,i=void 0,s=(a=(r=e).__v).__e,u=[],d=[],(l=r.__P)&&((i=h({},a)).__v=a.__v+1,t.vnode&&t.vnode(i),j(l,i,a,r.__n,void 0!==l.ownerSVGElement,32&a.__u?[s]:null,u,null==s?b(a):s,!!(32&a.__u),d),i.__.__k[i.__i]=i,I(u,i,d),i.__e!=s&&x(i)),o.length>n&&o.sort(c));k.__r=0}function A(e,t,n,r,i,o,a,s,c,l,f){var p,h,m,v,_,g=r&&r.__k||d,w=t.length;for(n.__d=c,C(n,t,g),c=n.__d,p=0;p<w;p++)null!=(m=n.__k[p])&&"boolean"!=typeof m&&"function"!=typeof m&&(h=-1===m.__i?u:g[m.__i]||u,m.__i=p,j(e,m,h,i,o,a,s,c,l,f),v=m.__e,m.ref&&h.ref!=m.ref&&(h.ref&&q(h.ref,null,m),f.push(m.ref,m.__c||v,m)),null==_&&null!=v&&(_=v),65536&m.__u||h.__k===m.__k?c=S(m,c,e):"function"==typeof m.type&&void 0!==m.__d?c=m.__d:v&&(c=v.nextSibling),m.__d=void 0,m.__u&=-196609);n.__d=c,n.__e=_}function C(e,t,n){var r,i,o,a,s,c=t.length,l=n.length,u=l,d=0;for(e.__k=[],r=0;r<c;r++)null!=(i=e.__k[r]=null==(i=t[r])||"boolean"==typeof i||"function"==typeof i?null:"string"==typeof i||"number"==typeof i||"bigint"==typeof i||i.constructor==String?_(null,i,null,null,i):p(i)?_(g,{children:i},null,null,null):i.__b>0?_(i.type,i.props,i.key,i.ref?i.ref:null,i.__v):i)?(i.__=e,i.__b=e.__b+1,s=z(i,n,a=r+d,u),i.__i=s,o=null,-1!==s&&(u--,(o=n[s])&&(o.__u|=131072)),null==o||null===o.__v?(-1==s&&d--,"function"!=typeof i.type&&(i.__u|=65536)):s!==a&&(s===a+1?d++:s>a?u>c-a?d+=s-a:d--:d=s<a&&s==a-1?s-a:0,s!==r+d&&(i.__u|=65536))):(o=n[r])&&null==o.key&&o.__e&&(o.__e==e.__d&&(e.__d=b(o)),F(o,o,!1),n[r]=null,u--);if(u)for(r=0;r<l;r++)null!=(o=n[r])&&0==(131072&o.__u)&&(o.__e==e.__d&&(e.__d=b(o)),F(o,o))}function S(e,t,n){var r,i;if("function"==typeof e.type){for(r=e.__k,i=0;r&&i<r.length;i++)r[i]&&(r[i].__=e,t=S(r[i],t,n));return t}return e.__e!=t&&(n.insertBefore(e.__e,t||null),t=e.__e),t&&t.nextSibling}function z(e,t,n,r){var i=e.key,o=e.type,a=n-1,s=n+1,c=t[n];if(null===c||c&&i==c.key&&o===c.type)return n;if(r>(null!=c&&0==(131072&c.__u)?1:0))for(;a>=0||s<t.length;){if(a>=0){if((c=t[a])&&0==(131072&c.__u)&&i==c.key&&o===c.type)return a;a--}if(s<t.length){if((c=t[s])&&0==(131072&c.__u)&&i==c.key&&o===c.type)return s;s++}}return-1}function E(e,t,n){"-"===t[0]?e.setProperty(t,null==n?"":n):e[t]=null==n?"":"number"!=typeof n||f.test(t)?n:n+"px"}function W(e,t,n,r,i){var o;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||E(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||E(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])o=t!==(t=t.replace(/(PointerCapture)$|Capture$/,"$1")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+o]=n,n?r?n.u=r.u:(n.u=Date.now(),e.addEventListener(t,o?D:U,o)):e.removeEventListener(t,o?D:U,o);else{if(i)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==t&&"height"!==t&&"href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&"rowSpan"!==t&&"colSpan"!==t&&"role"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null==n||!1===n&&"-"!==t[4]?e.removeAttribute(t):e.setAttribute(t,n))}}function U(e){var n=this.l[e.type+!1];if(e.t){if(e.t<=n.u)return}else e.t=Date.now();return n(t.event?t.event(e):e)}function D(e){return this.l[e.type+!0](t.event?t.event(e):e)}function j(e,n,r,i,o,a,s,c,l,u){var d,f,m,v,_,b,x,y,k,C,S,z,E,W,U,D=n.type;if(void 0!==n.constructor)return null;128&r.__u&&(l=!!(32&r.__u),a=[c=n.__e=r.__e]),(d=t.__b)&&d(n);e:if("function"==typeof D)try{if(y=n.props,k=(d=D.contextType)&&i[d.__c],C=d?k?k.props.value:d.__:i,r.__c?x=(f=n.__c=r.__c).__=f.__E:("prototype"in D&&D.prototype.render?n.__c=f=new D(y,C):(n.__c=f=new w(y,C),f.constructor=D,f.render=L),k&&k.sub(f),f.props=y,f.state||(f.state={}),f.context=C,f.__n=i,m=f.__d=!0,f.__h=[],f._sb=[]),null==f.__s&&(f.__s=f.state),null!=D.getDerivedStateFromProps&&(f.__s==f.state&&(f.__s=h({},f.__s)),h(f.__s,D.getDerivedStateFromProps(y,f.__s))),v=f.props,_=f.state,f.__v=n,m)null==D.getDerivedStateFromProps&&null!=f.componentWillMount&&f.componentWillMount(),null!=f.componentDidMount&&f.__h.push(f.componentDidMount);else{if(null==D.getDerivedStateFromProps&&y!==v&&null!=f.componentWillReceiveProps&&f.componentWillReceiveProps(y,C),!f.__e&&(null!=f.shouldComponentUpdate&&!1===f.shouldComponentUpdate(y,f.__s,C)||n.__v===r.__v)){for(n.__v!==r.__v&&(f.props=y,f.state=f.__s,f.__d=!1),n.__e=r.__e,n.__k=r.__k,n.__k.forEach((function(e){e&&(e.__=n)})),S=0;S<f._sb.length;S++)f.__h.push(f._sb[S]);f._sb=[],f.__h.length&&s.push(f);break e}null!=f.componentWillUpdate&&f.componentWillUpdate(y,f.__s,C),null!=f.componentDidUpdate&&f.__h.push((function(){f.componentDidUpdate(v,_,b)}))}if(f.context=C,f.props=y,f.__P=e,f.__e=!1,z=t.__r,E=0,"prototype"in D&&D.prototype.render){for(f.state=f.__s,f.__d=!1,z&&z(n),d=f.render(f.props,f.state,f.context),W=0;W<f._sb.length;W++)f.__h.push(f._sb[W]);f._sb=[]}else do{f.__d=!1,z&&z(n),d=f.render(f.props,f.state,f.context),f.state=f.__s}while(f.__d&&++E<25);f.state=f.__s,null!=f.getChildContext&&(i=h(h({},i),f.getChildContext())),m||null==f.getSnapshotBeforeUpdate||(b=f.getSnapshotBeforeUpdate(v,_)),A(e,p(U=null!=d&&d.type===g&&null==d.key?d.props.children:d)?U:[U],n,r,i,o,a,s,c,l,u),f.base=n.__e,n.__u&=-161,f.__h.length&&s.push(f),x&&(f.__E=f.__=null)}catch(e){n.__v=null,l||null!=a?(n.__e=c,n.__u|=l?160:32,a[a.indexOf(c)]=null):(n.__e=r.__e,n.__k=r.__k),t.__e(e,n,r)}else null==a&&n.__v===r.__v?(n.__k=r.__k,n.__e=r.__e):n.__e=T(r.__e,n,r,i,o,a,s,l,u);(d=t.diffed)&&d(n)}function I(e,n,r){n.__d=void 0;for(var i=0;i<r.length;i++)q(r[i],r[++i],r[++i]);t.__c&&t.__c(n,e),e.some((function(n){try{e=n.__h,n.__h=[],e.some((function(e){e.call(n)}))}catch(e){t.__e(e,n.__v)}}))}function T(t,n,r,i,o,a,s,c,l){var d,f,h,v,_,g,w,x=r.props,y=n.props,k=n.type;if("svg"===k&&(o=!0),null!=a)for(d=0;d<a.length;d++)if((_=a[d])&&"setAttribute"in _==!!k&&(k?_.localName===k:3===_.nodeType)){t=_,a[d]=null;break}if(null==t){if(null===k)return document.createTextNode(y);t=o?document.createElementNS("http://www.w3.org/2000/svg",k):document.createElement(k,y.is&&y),a=null,c=!1}if(null===k)x===y||c&&t.data===y||(t.data=y);else{if(a=a&&e.call(t.childNodes),x=r.props||u,!c&&null!=a)for(x={},d=0;d<t.attributes.length;d++)x[(_=t.attributes[d]).name]=_.value;for(d in x)_=x[d],"children"==d||("dangerouslySetInnerHTML"==d?h=_:"key"===d||d in y||W(t,d,null,_,o));for(d in y)_=y[d],"children"==d?v=_:"dangerouslySetInnerHTML"==d?f=_:"value"==d?g=_:"checked"==d?w=_:"key"===d||c&&"function"!=typeof _||x[d]===_||W(t,d,_,x[d],o);if(f)c||h&&(f.__html===h.__html||f.__html===t.innerHTML)||(t.innerHTML=f.__html),n.__k=[];else if(h&&(t.innerHTML=""),A(t,p(v)?v:[v],n,r,i,o&&"foreignObject"!==k,a,s,a?a[0]:r.__k&&b(r,0),c,l),null!=a)for(d=a.length;d--;)null!=a[d]&&m(a[d]);c||(d="value",void 0!==g&&(g!==t[d]||"progress"===k&&!g||"option"===k&&g!==x[d])&&W(t,d,g,x[d],!1),d="checked",void 0!==w&&w!==t[d]&&W(t,d,w,x[d],!1))}return t}function q(e,n,r){try{"function"==typeof e?e(n):e.current=n}catch(e){t.__e(e,r)}}function F(e,n,r){var i,o;if(t.unmount&&t.unmount(e),(i=e.ref)&&(i.current&&i.current!==e.__e||q(i,null,n)),null!=(i=e.__c)){if(i.componentWillUnmount)try{i.componentWillUnmount()}catch(e){t.__e(e,n)}i.base=i.__P=null,e.__c=void 0}if(i=e.__k)for(o=0;o<i.length;o++)i[o]&&F(i[o],n,r||"function"!=typeof e.type);r||null==e.__e||m(e.__e),e.__=e.__e=e.__d=void 0}function L(e,t,n){return this.constructor(e,n)}function B(t,n,r){var i,o,a,s,c=h({},t.props);for(a in t.type&&t.type.defaultProps&&(s=t.type.defaultProps),n)"key"==a?i=n[a]:"ref"==a?o=n[a]:c[a]=void 0===n[a]&&void 0!==s?s[a]:n[a];return arguments.length>2&&(c.children=arguments.length>3?e.call(arguments,2):r),_(t.type,c,i||t.key,o||t.ref,null)}function O(e,t){var n={__c:t="__cC"+l++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var n,r;return this.getChildContext||(n=[],(r={})[t]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&n.some((function(e){e.__e=!0,y(e)}))},this.sub=function(e){n.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){n.splice(n.indexOf(e),1),t&&t.call(e)}}),e.children}};return n.Provider.__=n.Consumer.contextType=n}e=d.slice,t={__e:function(e,t,n,r){for(var i,o,a;t=t.__;)if((i=t.__c)&&!i.__)try{if((o=i.constructor)&&null!=o.getDerivedStateFromError&&(i.setState(o.getDerivedStateFromError(e)),a=i.__d),null!=i.componentDidCatch&&(i.componentDidCatch(e,r||{}),a=i.__d),a)return i.__E=i}catch(t){e=t}throw e}},r=0,i=function(e){return null!=e&&null==e.constructor},w.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=h({},this.state),"function"==typeof e&&(e=e(h({},n),this.props)),e&&h(n,e),null!=e&&this.__v&&(t&&this._sb.push(t),y(this))},w.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),y(this))},w.prototype.render=g,o=[],s="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,c=function(e,t){return e.__v.__b-t.__v.__b},k.__r=0,l=0;var M=0;function P(e,n,r,i,o,a){var s,c,l={};for(c in n)"ref"==c?s=n[c]:l[c]=n[c];var u={type:e,props:l,key:r,ref:s,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:--M,__i:-1,__u:0,__source:o,__self:a};if("function"==typeof e&&(s=e.defaultProps))for(c in s)void 0===l[c]&&(l[c]=s[c]);return t.vnode&&t.vnode(u),u}Array.isArray;var N,R,V,H,K=0,$=[],Y=[],G=t.__b,Z=t.__r,X=t.diffed,J=t.__c,Q=t.unmount;function ee(e,n){t.__h&&t.__h(R,e,K||n),K=0;var r=R.__H||(R.__H={__:[],__h:[]});return e>=r.__.length&&r.__.push({__V:Y}),r.__[e]}function te(e){return K=1,function(e,t,n){var r=ee(N++,2);if(r.t=e,!r.__c&&(r.__=[fe(void 0,t),function(e){var t=r.__N?r.__N[0]:r.__[0],n=r.t(t,e);t!==n&&(r.__N=[n,r.__[1]],r.__c.setState({}))}],r.__c=R,!R.u)){var i=function(e,t,n){if(!r.__c.__H)return!0;var i=r.__c.__H.__.filter((function(e){return e.__c}));if(i.every((function(e){return!e.__N})))return!o||o.call(this,e,t,n);var a=!1;return i.forEach((function(e){if(e.__N){var t=e.__[0];e.__=e.__N,e.__N=void 0,t!==e.__[0]&&(a=!0)}})),!(!a&&r.__c.props===e)&&(!o||o.call(this,e,t,n))};R.u=!0;var o=R.shouldComponentUpdate,a=R.componentWillUpdate;R.componentWillUpdate=function(e,t,n){if(this.__e){var r=o;o=void 0,i(e,t,n),o=r}a&&a.call(this,e,t,n)},R.shouldComponentUpdate=i}return r.__N||r.__}(fe,e)}function ne(e,n){var r=ee(N++,3);!t.__s&&de(r.__H,n)&&(r.__=e,r.i=n,R.__H.__h.push(r))}function re(e,n){var r=ee(N++,4);!t.__s&&de(r.__H,n)&&(r.__=e,r.i=n,R.__h.push(r))}function ie(e){return K=5,oe((function(){return{current:e}}),[])}function oe(e,t){var n=ee(N++,7);return de(n.__H,t)?(n.__V=e(),n.i=t,n.__h=e,n.__V):n.__}function ae(){for(var e;e=$.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(le),e.__H.__h.forEach(ue),e.__H.__h=[]}catch(n){e.__H.__h=[],t.__e(n,e.__v)}}t.__b=function(e){R=null,G&&G(e)},t.__r=function(e){Z&&Z(e),N=0;var t=(R=e.__c).__H;t&&(V===R?(t.__h=[],R.__h=[],t.__.forEach((function(e){e.__N&&(e.__=e.__N),e.__V=Y,e.__N=e.i=void 0}))):(t.__h.forEach(le),t.__h.forEach(ue),t.__h=[],N=0)),V=R},t.diffed=function(e){X&&X(e);var n=e.__c;n&&n.__H&&(n.__H.__h.length&&(1!==$.push(n)&&H===t.requestAnimationFrame||((H=t.requestAnimationFrame)||ce)(ae)),n.__H.__.forEach((function(e){e.i&&(e.__H=e.i),e.__V!==Y&&(e.__=e.__V),e.i=void 0,e.__V=Y}))),V=R=null},t.__c=function(e,n){n.some((function(e){try{e.__h.forEach(le),e.__h=e.__h.filter((function(e){return!e.__||ue(e)}))}catch(r){n.some((function(e){e.__h&&(e.__h=[])})),n=[],t.__e(r,e.__v)}})),J&&J(e,n)},t.unmount=function(e){Q&&Q(e);var n,r=e.__c;r&&r.__H&&(r.__H.__.forEach((function(e){try{le(e)}catch(e){n=e}})),r.__H=void 0,n&&t.__e(n,r.__v))};var se="function"==typeof requestAnimationFrame;function ce(e){var t,n=function(){clearTimeout(r),se&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);se&&(t=requestAnimationFrame(n))}function le(e){var t=R,n=e.__c;"function"==typeof n&&(e.__c=void 0,n()),R=t}function ue(e){var t=R;e.__c=e.__(),R=t}function de(e,t){return!e||e.length!==t.length||t.some((function(t,n){return t!==e[n]}))}function fe(e,t){return"function"==typeof t?t(e):t}const pe=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement);function he(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}const me=e=>{const t=ie([e,(...e)=>t[0](...e)]).current;return re((()=>{t[0]=e})),t[1]},ve=(e="",t=location.pathname)=>t.toLowerCase().indexOf(e.toLowerCase())?"~"+t:t.slice(e.length)||"/",_e="pushState",ge="replaceState",we=["popstate",_e,ge,"hashchange"],be=e=>{for(const t of we)addEventListener(t,e);return()=>{for(const t of we)removeEventListener(t,e)}},xe=()=>location.pathname,ye=({ssrPath:e}={})=>function(e,t,n){n&&!pe&&(t=n);const r=t(),[{_instance:i},o]=te({_instance:{_value:r,_getSnapshot:t}});return re((()=>{i._value=r,i._getSnapshot=t,he(i._value,t())||o({_instance:i})}),[e,r,t]),ne((()=>(he(i._value,i._getSnapshot())||o({_instance:i}),e((()=>{he(i._value,i._getSnapshot())||o({_instance:i})})))),[e]),r}(be,xe,e?()=>e:xe);if("undefined"!=typeof history)for(const e of[_e,ge]){const t=history[e];history[e]=function(){const n=t.apply(this,arguments),r=new Event(e);return r.arguments=arguments,dispatchEvent(r),n}}const ke=e=>e.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),Ae=(e,t,n)=>{let r=e?"((?:[^\\/]+?)(?:\\/(?:[^\\/]+?))*)":"([^\\/]+?)";return t&&n&&(r="(?:\\/"+r+")"),r+(t?"?":"")},Ce=e=>{const t=/:([A-Za-z0-9_]+)([?+*]?)/g;let n=null,r=0,i=[],o="";for(;null!==(n=t.exec(e));){const[a,s,c]=n,l="+"===c||"*"===c,u="?"===c||"*"===c,d=u&&"/"===e[n.index-1]?1:0,f=e.substring(r,n.index-d);i.push({name:s}),r=t.lastIndex,o+=ke(f)+Ae(l,u,d)}return o+=ke(e.substring(r)),{keys:i,regexp:new RegExp("^"+o+"(?:\\/)?$","i")}},Se={hook:(e={})=>[ve(e.base,ye(e)),me(((t,n)=>((e,{replace:t=!1}={})=>history[t?ge:_e](null,"",e))(((e,t="")=>"~"===e[0]?e.slice(1):t+e)(t,e.base),n)))],matcher:function(e=Ce){let t={};return(n,r)=>{const{regexp:i,keys:o}=(n=>t[n]||(t[n]=e(n)))(n||""),a=i.exec(r);if(!a)return[!1,null];const s=o.reduce(((e,t,n)=>(e[t.name]=a[n+1],e)),{});return[!0,s]}}(),base:""},ze=O(Se),Ee=()=>function(e){var t=R.context[e.__c],n=ee(N++,9);return n.c=e,t?(null==n.__&&(n.__=!0,t.sub(R)),t.props.value):e.__}(ze),We=e=>e.hook(e),Ue=O({params:{}}),De=({path:e,match:t,component:n,children:r})=>{const i=(e=>{const t=Ee(),[n]=We(t);return t.matcher(e,n)})(e),[o,a]=t||i;return o?((e,t)=>v(Ue.Provider,{value:{params:e},children:t}))(a,n?v(n,{params:a}):"function"==typeof r?r(a):r):null},je=e=>Array.isArray(e)?[].concat(...e.map((e=>e&&e.type===g?je(e.props.children):je(e)))):[e],Ie=({children:e,location:t})=>{const n=Ee(),r=n.matcher,[o]=We(n);for(const n of je(e)){let e=0;if(i(n)&&(e=n.props.path?r(n.props.path,t||o):[!0,{}])[0])return B(n,{match:e})}return null};function Te(){throw new Error("Cycle detected")}var qe=Symbol.for("preact-signals");function Fe(){if(Me>1)Me--;else{for(var e,t=!1;void 0!==Oe;){var n=Oe;for(Oe=void 0,Pe++;void 0!==n;){var r=n.o;if(n.o=void 0,n.f&=-3,!(8&n.f)&&Ke(n))try{n.c()}catch(n){t||(e=n,t=!0)}n=r}}if(Pe=0,Me--,t)throw e}}var Le,Be=void 0,Oe=void 0,Me=0,Pe=0,Ne=0;function Re(e){if(void 0!==Be){var t=e.n;if(void 0===t||t.t!==Be)return t={i:0,S:e,p:Be.s,n:void 0,t:Be,e:void 0,x:void 0,r:t},void 0!==Be.s&&(Be.s.n=t),Be.s=t,e.n=t,32&Be.f&&e.S(t),t;if(-1===t.i)return t.i=0,void 0!==t.n&&(t.n.p=t.p,void 0!==t.p&&(t.p.n=t.n),t.p=Be.s,t.n=void 0,Be.s.n=t,Be.s=t),t}}function Ve(e){this.v=e,this.i=0,this.n=void 0,this.t=void 0}function He(e){return new Ve(e)}function Ke(e){for(var t=e.s;void 0!==t;t=t.n)if(t.S.i!==t.i||!t.S.h()||t.S.i!==t.i)return!0;return!1}function $e(e){for(var t=e.s;void 0!==t;t=t.n){var n=t.S.n;if(void 0!==n&&(t.r=n),t.S.n=t,t.i=-1,void 0===t.n){e.s=t;break}}}function Ye(e){for(var t=e.s,n=void 0;void 0!==t;){var r=t.p;-1===t.i?(t.S.U(t),void 0!==r&&(r.n=t.n),void 0!==t.n&&(t.n.p=r)):n=t,t.S.n=t.r,void 0!==t.r&&(t.r=void 0),t=r}e.s=n}function Ge(e){Ve.call(this,void 0),this.x=e,this.s=void 0,this.g=Ne-1,this.f=4}function Ze(e){var t=e.u;if(e.u=void 0,"function"==typeof t){Me++;var n=Be;Be=void 0;try{t()}catch(t){throw e.f&=-2,e.f|=8,Xe(e),t}finally{Be=n,Fe()}}}function Xe(e){for(var t=e.s;void 0!==t;t=t.n)t.S.U(t);e.x=void 0,e.s=void 0,Ze(e)}function Je(e){if(Be!==this)throw new Error("Out-of-order effect");Ye(this),Be=e,this.f&=-2,8&this.f&&Xe(this),Fe()}function Qe(e){this.x=e,this.u=void 0,this.s=void 0,this.o=void 0,this.f=32}function et(e){var t=new Qe(e);try{t.c()}catch(e){throw t.d(),e}return t.d.bind(t)}function tt(e,n){t[e]=n.bind(null,t[e]||function(){})}function nt(e){Le&&Le(),Le=e&&e.S()}function rt(e){var t=this,n=e.data,r=function(e){return oe((function(){return He(e)}),[])}(n);r.value=n;var o=oe((function(){for(var e=t.__v;e=e.__;)if(e.__c){e.__c.__$f|=4;break}return t.__$u.c=function(){var e;i(o.peek())||3!==(null==(e=t.base)?void 0:e.nodeType)?(t.__$f|=1,t.setState({})):t.base.data=o.peek()},new Ge((function(){var e=r.value.value;return 0===e?0:!0===e?"":e||""}))}),[]);return o.value}function it(e,t,n,r){var i=t in e&&void 0===e.ownerSVGElement,o=He(n);return{o:function(e,t){o.value=e,r=t},d:et((function(){var n=o.value.value;r[t]!==n&&(r[t]=n,i?e[t]=n:n?e.setAttribute(t,n):e.removeAttribute(t))}))}}Ve.prototype.brand=qe,Ve.prototype.h=function(){return!0},Ve.prototype.S=function(e){this.t!==e&&void 0===e.e&&(e.x=this.t,void 0!==this.t&&(this.t.e=e),this.t=e)},Ve.prototype.U=function(e){if(void 0!==this.t){var t=e.e,n=e.x;void 0!==t&&(t.x=n,e.e=void 0),void 0!==n&&(n.e=t,e.x=void 0),e===this.t&&(this.t=n)}},Ve.prototype.subscribe=function(e){var t=this;return et((function(){var n=t.value,r=32&this.f;this.f&=-33;try{e(n)}finally{this.f|=r}}))},Ve.prototype.valueOf=function(){return this.value},Ve.prototype.toString=function(){return this.value+""},Ve.prototype.toJSON=function(){return this.value},Ve.prototype.peek=function(){return this.v},Object.defineProperty(Ve.prototype,"value",{get:function(){var e=Re(this);return void 0!==e&&(e.i=this.i),this.v},set:function(e){if(Be instanceof Ge&&function(){throw new Error("Computed cannot have side-effects")}(),e!==this.v){Pe>100&&Te(),this.v=e,this.i++,Ne++,Me++;try{for(var t=this.t;void 0!==t;t=t.x)t.t.N()}finally{Fe()}}}}),(Ge.prototype=new Ve).h=function(){if(this.f&=-3,1&this.f)return!1;if(32==(36&this.f))return!0;if(this.f&=-5,this.g===Ne)return!0;if(this.g=Ne,this.f|=1,this.i>0&&!Ke(this))return this.f&=-2,!0;var e=Be;try{$e(this),Be=this;var t=this.x();(16&this.f||this.v!==t||0===this.i)&&(this.v=t,this.f&=-17,this.i++)}catch(e){this.v=e,this.f|=16,this.i++}return Be=e,Ye(this),this.f&=-2,!0},Ge.prototype.S=function(e){if(void 0===this.t){this.f|=36;for(var t=this.s;void 0!==t;t=t.n)t.S.S(t)}Ve.prototype.S.call(this,e)},Ge.prototype.U=function(e){if(void 0!==this.t&&(Ve.prototype.U.call(this,e),void 0===this.t)){this.f&=-33;for(var t=this.s;void 0!==t;t=t.n)t.S.U(t)}},Ge.prototype.N=function(){if(!(2&this.f)){this.f|=6;for(var e=this.t;void 0!==e;e=e.x)e.t.N()}},Ge.prototype.peek=function(){if(this.h()||Te(),16&this.f)throw this.v;return this.v},Object.defineProperty(Ge.prototype,"value",{get:function(){1&this.f&&Te();var e=Re(this);if(this.h(),void 0!==e&&(e.i=this.i),16&this.f)throw this.v;return this.v}}),Qe.prototype.c=function(){var e=this.S();try{if(8&this.f)return;if(void 0===this.x)return;var t=this.x();"function"==typeof t&&(this.u=t)}finally{e()}},Qe.prototype.S=function(){1&this.f&&Te(),this.f|=1,this.f&=-9,Ze(this),$e(this),Me++;var e=Be;return Be=this,Je.bind(this,e)},Qe.prototype.N=function(){2&this.f||(this.f|=2,this.o=Oe,Oe=this)},Qe.prototype.d=function(){this.f|=8,1&this.f||Xe(this)},rt.displayName="_st",Object.defineProperties(Ve.prototype,{constructor:{configurable:!0,value:void 0},type:{configurable:!0,value:rt},props:{configurable:!0,get:function(){return{data:this}}},__b:{configurable:!0,value:1}}),tt("__b",(function(e,t){if("string"==typeof t.type){var n,r=t.props;for(var i in r)if("children"!==i){var o=r[i];o instanceof Ve&&(n||(t.__np=n={}),n[i]=o,r[i]=o.peek())}}e(t)})),tt("__r",(function(e,t){nt();var n,r=t.__c;r&&(r.__$f&=-2,void 0===(n=r.__$u)&&(r.__$u=n=function(e){var t;return et((function(){t=this})),t.c=function(){r.__$f|=1,r.setState({})},t}())),nt(n),e(t)})),tt("__e",(function(e,t,n,r){nt(),e(t,n,r)})),tt("diffed",(function(e,t){var n;if(nt(),"string"==typeof t.type&&(n=t.__e)){var r=t.__np,i=t.props;if(r){var o=n.U;if(o)for(var a in o){var s=o[a];void 0===s||a in r||(s.d(),o[a]=void 0)}else n.U=o={};for(var c in r){var l=o[c],u=r[c];void 0===l?(l=it(n,c,u,i),o[c]=l):l.o(u,i)}}}e(t)})),tt("unmount",(function(e,t){if("string"==typeof t.type){var n=t.__e;if(n){var r=n.U;if(r)for(var i in n.U=void 0,r){var o=r[i];o&&o.d()}}}else{var a=t.__c;if(a){var s=a.__$u;s&&(a.__$u=void 0,s.d())}}e(t)})),tt("__h",(function(e,t,n,r){(r<3||9===r)&&(t.__$f|=2),e(t,n,r)})),w.prototype.shouldComponentUpdate=function(e,t){var n=this.__$u;if(!(n&&void 0!==n.s||4&this.__$f))return!0;if(3&this.__$f)return!0;for(var r in t)return!0;for(var i in e)if("__source"!==i&&e[i]!==this.props[i])return!0;for(var o in this.props)if(!(o in e))return!0;return!1};var ot=function(){var e={},t=!1,n=function(t){return e[t]||(e[t]=[]),e[t]};return{subscribe:function(e,t){var r=n(e);return r.push(t),function(){var e=r.indexOf(t);r.splice(e,1)}},publish:function(e,r){n(e).slice().forEach((function(e){t||e(r)}))},destroy:function(){e={},t=!0}}},at=function(){return at=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},at.apply(this,arguments)},st=function(){return st=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},st.apply(this,arguments)};const ct=function(){var e=ot(),t=function(){var e=ot(),t=document.createElement("video"),n=0,r={duration:0,playing:!1,volume:0},i=function(t){r=at(at({},r),t),e.publish("change",r)};return t.addEventListener("durationchange",(function(){return i({duration:t.duration})})),t.addEventListener("playing",(function(){return i({playing:!0})})),t.addEventListener("pause",(function(){return i({playing:!1})})),t.addEventListener("timeupdate",(function(){var r=Math.round(t.currentTime);n!==r&&(n=r,e.publish("change-current-time",n))})),t.addEventListener("volumechange",(function(){return i({volume:t.volume})})),i({volume:t.volume}),{seek:function(r){t.currentTime=r,n=r,e.publish("change-current-time",n)},getElement:function(){return t},getState:function(){return r},getCurrentTime:function(){return n},play:function(){t.play()},pause:function(){t.pause()},volume:function(e){t.volume=e},setUrl:function(e){t.setAttribute("src",e),i({playing:!1})},subscribe:function(t){return e.subscribe("change",t)},onChangeCurrentTime:function(t){return e.subscribe("change-current-time",t)},onEnded:function(e){return t.addEventListener("ended",e),function(){return t.removeEventListener("ended",e)}}}}(),n=st(st({},t.getState()),{tracks:[],currentTrackIndex:null,currentTrack:null}),r=function(t){n=st(st({},n),t),e.publish("change",n)};t.subscribe(r);var i=function(){var e=n.currentTrack;e&&(t.setUrl(e.url),t.play())},o=function(){if(null!==n.currentTrackIndex){var e=n.tracks.length-1,t=n.currentTrackIndex+1;t<=e&&(r({currentTrackIndex:t,currentTrack:n.tracks[t]}),i())}};return t.onEnded(o),{play:t.play,pause:t.pause,seek:t.seek,volume:t.volume,getCurrentTime:t.getCurrentTime,getElement:t.getElement,onChangeCurrentTime:t.onChangeCurrentTime,getState:function(){return n},setQueue:function(e){r({tracks:e})},playTrack:function(e){r({currentTrackIndex:e,currentTrack:n.tracks[e]}),i()},next:o,prev:function(){if(null!==n.currentTrackIndex){var e=n.currentTrackIndex-1;e>=0&&(r({currentTrack:n.tracks[e],currentTrackIndex:e}),i())}},subscribe:function(t){return e.subscribe("change",t)},updateSongStatus:function(e,t){var i=n.tracks.findIndex((function(t){return t.song.id===e})),o=function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}([],n.tracks,!0);o[i].status=t,r({tracks:o})}}}();var lt=function(){var e=te(ct.getState()),t=e[0],n=e[1];return ne((function(){return ct.subscribe(n)}),[]),t},ut=n(379),dt=n.n(ut),ft=n(795),pt=n.n(ft),ht=n(569),mt=n.n(ht),vt=n(565),_t=n.n(vt),gt=n(216),wt=n.n(gt),bt=n(589),xt=n.n(bt),yt=n(142),kt={};kt.styleTagTransform=xt(),kt.setAttributes=_t(),kt.insert=mt().bind(null,"head"),kt.domAPI=pt(),kt.insertStyleElement=wt(),dt()(yt.Z,kt),yt.Z&&yt.Z.locals&&yt.Z.locals;const At=(e,t)=>t.some((t=>e instanceof t));let Ct,St;const zt=new WeakMap,Et=new WeakMap,Wt=new WeakMap,Ut=new WeakMap,Dt=new WeakMap;let jt={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return Et.get(e);if("objectStoreNames"===t)return e.objectStoreNames||Wt.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return Tt(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function It(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(St||(St=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(qt(this),e),Tt(zt.get(this))}:function(...e){return Tt(t.apply(qt(this),e))}:function(e,...n){const r=t.call(qt(this),e,...n);return Wt.set(r,e.sort?e.sort():[e]),Tt(r)}:(e instanceof IDBTransaction&&function(e){if(Et.has(e))return;const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",o),e.removeEventListener("abort",o)},i=()=>{t(),r()},o=()=>{n(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",i),e.addEventListener("error",o),e.addEventListener("abort",o)}));Et.set(e,t)}(e),At(e,Ct||(Ct=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,jt):e);var t}function Tt(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("success",i),e.removeEventListener("error",o)},i=()=>{t(Tt(e.result)),r()},o=()=>{n(e.error),r()};e.addEventListener("success",i),e.addEventListener("error",o)}));return t.then((t=>{t instanceof IDBCursor&&zt.set(t,e)})).catch((()=>{})),Dt.set(t,e),t}(e);if(Ut.has(e))return Ut.get(e);const t=It(e);return t!==e&&(Ut.set(e,t),Dt.set(t,e)),t}const qt=e=>Dt.get(e),Ft=["get","getKey","getAll","getAllKeys","count"],Lt=["put","add","delete","clear"],Bt=new Map;function Ot(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(Bt.get(t))return Bt.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,i=Lt.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!i&&!Ft.includes(n))return;const o=async function(e,...t){const o=this.transaction(e,i?"readwrite":"readonly");let a=o.store;return r&&(a=a.index(t.shift())),(await Promise.all([a[n](...t),i&&o.done]))[0]};return Bt.set(t,o),o}var Mt;Mt=jt,jt={...Mt,get:(e,t,n)=>Ot(e,t)||Mt.get(e,t,n),has:(e,t)=>!!Ot(e,t)||Mt.has(e,t)};var Pt=He(new Array),Nt=function(e,t,{blocked:n,upgrade:r,blocking:i,terminated:o}={}){const a=indexedDB.open(e,t),s=Tt(a);return r&&a.addEventListener("upgradeneeded",(e=>{r(Tt(a.result),e.oldVersion,e.newVersion,Tt(a.transaction),e)})),n&&a.addEventListener("blocked",(e=>n(e.oldVersion,e.newVersion,e))),s.then((e=>{o&&e.addEventListener("close",(()=>o())),i&&e.addEventListener("versionchange",(e=>i(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),s}("song-db",1,{upgrade:function(e){console.log("UPGRADE DB");var t=e.createObjectStore("songs",{keyPath:"id"});e.createObjectStore("songFile",{keyPath:"songID"}),e.createObjectStore("songStatus",{keyPath:"songID"}),t.createIndex("by-key","key")}}),Rt=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},Vt=function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}};function Ht(e,t){return void 0===t&&(t=null),Rt(this,void 0,void 0,(function(){return Vt(this,(function(n){return null!==t&&(e+=Math.random()*(t-e)),[2,new Promise((function(t){return setTimeout(t,1e3*e)}))]}))}))}var Kt=new(function(){function e(){this.init()}return e.prototype.init=function(){return Rt(this,void 0,void 0,(function(){var e;return Vt(this,(function(t){switch(t.label){case 0:return e=this,[4,Nt];case 1:return e.db=t.sent(),[2]}}))}))},e.prototype.create=function(e){return Rt(this,void 0,void 0,(function(){return Vt(this,(function(t){switch(t.label){case 0:return console.log("Create song",e),[4,this.getStatus(e.id)];case 1:return t.sent()?[3,3]:[4,Kt.createStatus(e.id,e.status)];case 2:t.sent(),t.label=3;case 3:return[4,this.db.put("songs",e)];case 4:return[2,t.sent()]}}))}))},e.prototype.createFile=function(e,t){return Rt(this,void 0,void 0,(function(){return Vt(this,(function(n){switch(n.label){case 0:return[4,this.db.put("songFile",{songID:e,file:t})];case 1:return[2,n.sent()]}}))}))},e.prototype.createStatus=function(e,t){return Rt(this,void 0,void 0,(function(){return Vt(this,(function(n){switch(n.label){case 0:return[4,this.db.put("songStatus",{songID:e,status:t})];case 1:return[2,n.sent()]}}))}))},e.prototype.get=function(e){return Rt(this,void 0,void 0,(function(){return Vt(this,(function(t){switch(t.label){case 0:return[4,this.db.get("songs",e)];case 1:return[2,t.sent()]}}))}))},e.prototype.getFile=function(e){return Rt(this,void 0,void 0,(function(){return Vt(this,(function(t){switch(t.label){case 0:return[4,this.db.get("songFile",e)];case 1:return[2,t.sent()]}}))}))},e.prototype.getStatus=function(e){return Rt(this,void 0,void 0,(function(){return Vt(this,(function(t){switch(t.label){case 0:return[4,this.db.get("songStatus",e)];case 1:return[2,t.sent()]}}))}))},e.prototype.rename=function(e,t){return Rt(this,void 0,void 0,(function(){var n,r;return Vt(this,(function(i){switch(i.label){case 0:return[4,this.get(e)];case 1:return(n=i.sent()).title=t,r=this.get,[4,this.db.put("songs",n)];case 2:return[4,r.apply(this,[i.sent()])];case 3:return[2,i.sent()]}}))}))},e.prototype.flagDownload=function(e,t){return Rt(this,void 0,void 0,(function(){var n;return Vt(this,(function(r){switch(r.label){case 0:return[4,this.db.get("songStatus",e)];case 1:return(n=r.sent()).status="to_download",[4,this.db.put("songStatus",n)];case 2:return r.sent(),t.updateSongStatus(e,"to_download"),[2]}}))}))},e.prototype.getAll=function(){return Rt(this,void 0,void 0,(function(){var e=this;return Vt(this,(function(t){switch(t.label){case 0:return this.db?[3,1]:[2,new Promise((function(t,n){return Rt(e,void 0,void 0,(function(){return Vt(this,(function(e){switch(e.label){case 0:return[4,Ht(1)];case 1:return e.sent(),t(this.getAll()),[2]}}))}))}))];case 1:return[4,this.db.getAll("songs")];case 2:return[2,t.sent()]}}))}))},e.prototype.flagDelete=function(e,t){return Rt(this,void 0,void 0,(function(){var n;return Vt(this,(function(r){switch(r.label){case 0:return[4,this.db.get("songStatus",e)];case 1:return(n=r.sent()).status="to_delete",[4,this.db.put("songStatus",n)];case 2:return r.sent(),t.updateSongStatus(e,"to_delete"),[2]}}))}))},e.prototype.delete=function(e){return Rt(this,void 0,void 0,(function(){return Vt(this,(function(t){switch(t.label){case 0:return[4,this.db.delete("songs",e)];case 1:return[2,t.sent()]}}))}))},e}());const $t=Kt;var Yt=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},Gt=function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}},Zt=He(0),Xt=He(!1),Jt=He(0),Qt=He(0);function en(){var e=this,t=lt(),n=function(e){return e.duration/60},r=function(e){var t=e.clientX,n=e.clientY;console.log("onMouseDown"),Xt.value=!0,Jt.value=t,Qt.value=n+96},i=function(){return Yt(e,void 0,void 0,(function(){return Gt(this,(function(e){switch(e.label){case 0:switch(console.log("onMouseUp"),Xt.value=!1,Zt.value){case 1:return[3,1];case 2:return[3,2];case 3:return[3,3];case 4:return[3,4];case 5:return[3,6];case 6:return[3,7];case 7:return[3,9];case 8:return[3,10]}return[3,11];case 1:return null!==t.currentTrackIndex?t.playing?ct.pause():ct.play():ct.playTrack(0),[3,11];case 2:return null!==t.currentTrack&&ct.seek(ct.getCurrentTime()+8*n(t.currentTrack.song)),[3,11];case 3:return ct.next(),[3,11];case 4:return[4,$t.flagDownload(t.currentTrack.song.id,ct)];case 5:case 8:return e.sent(),[3,11];case 6:return alert("Reset"),[3,11];case 7:return[4,$t.flagDelete(t.currentTrack.song.id,ct)];case 9:return ct.prev(),[3,11];case 10:return null!==t.currentTrack&&ct.seek(ct.getCurrentTime()-8*n(t.currentTrack.song)),[3,11];case 11:return Zt.value=0,this.wheel.setAttribute("data-chosen",0),[2]}}))}))},o=function(t){var n=t.clientX,r=t.clientY;if(console.log("onMouseMove"),Xt.value){var i=n-Jt.value,o=r-Qt.value+96,a=void 0;if(Math.sqrt(i*i+o*o)>=15){for(var s=Math.atan2(o,i)+.625*Math.PI;s<0;)s+=2*Math.PI;a=Math.floor(s/Math.PI*4)+1}Zt.value=a,e.wheel.setAttribute("data-chosen",a)}};return P("div",{className:"relative overflow-hidden h-screen w-screen",onContextMenu:function(e){e.preventDefault(),e.stopPropagation()},onMouseDown:r,onMouseMove:o,onMouseUp:i,onTouchStart:function(e){return r(e.touches[0])},onTouchMove:function(e){return o(e.touches[0])},onTouchEnd:function(e){return i()},children:Xt&&P("div",{ref:function(t){return e.wheel=t},className:"wheel".concat(Xt.value?" on":""),style:{"--x":"".concat(Jt.value,"px"),"--y":"".concat(Qt.value,"px")},children:[P("div",{className:"arc",style:{"--color":"#3b0764","--color-border":"#3b0764"},children:t.playing?P("i",{className:"fas fa-pause"}):P("i",{className:"fas fa-play"})}),P("div",{className:"arc",style:{"--color":"#2e1065","--color-border":"#2e1065"},children:P("i",{className:"fas fa-angles-right"})}),P("div",{className:"arc",style:{"--color":"#1e1b4b","--color-border":"#1e1b4b"},children:P("i",{className:"fas fa-angle-right"})}),P("div",{className:"arc",style:{"--color":"#17a34a","--color-border":"#17a34a"},children:P("i",{className:"fas fa-save"})}),P("div",{className:"arc",style:{"--color":"#2563eb","--color-border":"#2563eb"},children:P("i",{className:"fas fa-rotate-left"})}),P("div",{className:"arc",style:{"--color":"#dc2625","--color-border":"#dc2625"},children:P("i",{className:"fas fa-trash-alt"})}),P("div",{className:"arc",style:{"--color":"#1e1b4b","--color-border":"#1e1b4b"},children:P("i",{className:"fas fa-angle-left"})}),P("div",{className:"arc",style:{"--color":"#2e1065","--color-border":"#2e1065"},children:P("i",{className:"fas fa-angles-left"})})]})})}function tn(){return P("div",{className:"relative",children:P(en,{})})}var nn=function(e){var t,n=Math.floor(e/60),r=Math.floor(e%60);return"".concat(n,":").concat(1===(t=r.toString()).length?"0".concat(t):t)};const rn=function(){var e=lt(),t=function(){var e=te(ct.getCurrentTime()),t=e[0],n=e[1];return ne((function(){return ct.onChangeCurrentTime(n)}),[]),t}();return P("div",{children:[nn(t),P("div",{min:0,max:1,step:.01,value:t/e.duration,onChange:function(e){return console.log(e)}}),nn(e.duration)]})},on=function(){var e=ie(null);return ne((function(){var t=e.current,n=ct.getElement();return n.remove(),n.classList.remove("visuallyhidden"),t.append(n),function(){t.removeChild(n),n.classList.add("visuallyhidden"),document.body.append(n)}}),[]),P("div",{ref:e})},an=function(){var e=lt(),t=e.currentTrack,n=e.playing,r=te(!1),i=r[0],o=r[1];return t?P("div",{children:[P(rn,{}),P("div",{children:[P("div",{children:P("strong",{children:t.song.title})}),/.mp4$/.test(t.url)&&P("div",{onClick:function(){return o(!i)},children:"Hey"}),P("div",{onClick:function(){n?ct.pause():ct.play()},children:P("div",n?{children:"Pause"}:{children:"Play"})})]}),i&&P("div",{children:P(on,{})})]}):null},sn=function(e){var t=e.index,n=lt(),r="bg-indigo-600";switch(n.tracks[t].status){case"to_delete":r="bg-red-600";break;case"to_download":r="bg-green-600"}return P("div",{className:"w-16 h-16 ".concat(r," rounded-md"),onClick:function(){n.currentTrackIndex===t?n.playing?ct.pause():ct.play():ct.playTrack(t)}})};var cn=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},ln=function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}};const un=function(){var e=lt();return ne((function(){cn(void 0,void 0,void 0,(function(){var e;return ln(this,(function(t){switch(t.label){case 0:return[4,Promise.all(Pt.value.map((function(e){return cn(void 0,void 0,void 0,(function(){var t,n,r;return ln(this,(function(i){switch(i.label){case 0:return[4,$t.getFile(e.id)];case 1:return t=i.sent(),[4,$t.getStatus(e.id)];case 2:return n=i.sent(),console.log(n.status),r=URL.createObjectURL(t.file),[2,{song:e,url:r,status:n.status?n.status:e.status}]}}))}))})))];case 1:return e=t.sent(),ct.setQueue(e),[2]}}))}))}),[Pt.value]),P("div",{className:"w-full relative h-24 overflow-x-auto bg-gray-900",children:P("div",{className:"absolute top-4 gap-4 start-0 flex",children:e.tracks.map((function(e,t){return P(sn,{index:t},e.url)}))})})},dn=15,fn=573,pn=-2;function hn(e){return mn(e.map((([e,t])=>new Array(e).fill(t,0,e))))}function mn(e){return e.reduce(((e,t)=>e.concat(Array.isArray(t)?mn(t):t)),[])}const vn=[0,1,2,3].concat(...hn([[2,4],[2,5],[4,6],[4,7],[8,8],[8,9],[16,10],[16,11],[32,12],[32,13],[64,14],[64,15],[2,0],[1,16],[1,17],[2,18],[2,19],[4,20],[4,21],[8,22],[8,23],[16,24],[16,25],[32,26],[32,27],[64,28],[64,29]]));function _n(){const e=this;function t(e,t){let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}e.build_tree=function(n){const r=e.dyn_tree,i=e.stat_desc.static_tree,o=e.stat_desc.elems;let a,s,c,l=-1;for(n.heap_len=0,n.heap_max=fn,a=0;a<o;a++)0!==r[2*a]?(n.heap[++n.heap_len]=l=a,n.depth[a]=0):r[2*a+1]=0;for(;n.heap_len<2;)c=n.heap[++n.heap_len]=l<2?++l:0,r[2*c]=1,n.depth[c]=0,n.opt_len--,i&&(n.static_len-=i[2*c+1]);for(e.max_code=l,a=Math.floor(n.heap_len/2);a>=1;a--)n.pqdownheap(r,a);c=o;do{a=n.heap[1],n.heap[1]=n.heap[n.heap_len--],n.pqdownheap(r,1),s=n.heap[1],n.heap[--n.heap_max]=a,n.heap[--n.heap_max]=s,r[2*c]=r[2*a]+r[2*s],n.depth[c]=Math.max(n.depth[a],n.depth[s])+1,r[2*a+1]=r[2*s+1]=c,n.heap[1]=c++,n.pqdownheap(r,1)}while(n.heap_len>=2);n.heap[--n.heap_max]=n.heap[1],function(t){const n=e.dyn_tree,r=e.stat_desc.static_tree,i=e.stat_desc.extra_bits,o=e.stat_desc.extra_base,a=e.stat_desc.max_length;let s,c,l,u,d,f,p=0;for(u=0;u<=dn;u++)t.bl_count[u]=0;for(n[2*t.heap[t.heap_max]+1]=0,s=t.heap_max+1;s<fn;s++)c=t.heap[s],u=n[2*n[2*c+1]+1]+1,u>a&&(u=a,p++),n[2*c+1]=u,c>e.max_code||(t.bl_count[u]++,d=0,c>=o&&(d=i[c-o]),f=n[2*c],t.opt_len+=f*(u+d),r&&(t.static_len+=f*(r[2*c+1]+d)));if(0!==p){do{for(u=a-1;0===t.bl_count[u];)u--;t.bl_count[u]--,t.bl_count[u+1]+=2,t.bl_count[a]--,p-=2}while(p>0);for(u=a;0!==u;u--)for(c=t.bl_count[u];0!==c;)l=t.heap[--s],l>e.max_code||(n[2*l+1]!=u&&(t.opt_len+=(u-n[2*l+1])*n[2*l],n[2*l+1]=u),c--)}}(n),function(e,n,r){const i=[];let o,a,s,c=0;for(o=1;o<=dn;o++)i[o]=c=c+r[o-1]<<1;for(a=0;a<=n;a++)s=e[2*a+1],0!==s&&(e[2*a]=t(i[s]++,s))}(r,e.max_code,n.bl_count)}}function gn(e,t,n,r,i){const o=this;o.static_tree=e,o.extra_bits=t,o.extra_base=n,o.elems=r,o.max_length=i}_n._length_code=[0,1,2,3,4,5,6,7].concat(...hn([[2,8],[2,9],[2,10],[2,11],[4,12],[4,13],[4,14],[4,15],[8,16],[8,17],[8,18],[8,19],[16,20],[16,21],[16,22],[16,23],[32,24],[32,25],[32,26],[31,27],[1,28]])),_n.base_length=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],_n.base_dist=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],_n.d_code=function(e){return e<256?vn[e]:vn[256+(e>>>7)]},_n.extra_lbits=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],_n.extra_dbits=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],_n.extra_blbits=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],_n.bl_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];const wn=hn([[144,8],[112,9],[24,7],[8,8]]);gn.static_ltree=mn([12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,19,275,147,403,83,339,211,467,51,307,179,435,115,371,243,499,11,267,139,395,75,331,203,459,43,299,171,427,107,363,235,491,27,283,155,411,91,347,219,475,59,315,187,443,123,379,251,507,7,263,135,391,71,327,199,455,39,295,167,423,103,359,231,487,23,279,151,407,87,343,215,471,55,311,183,439,119,375,247,503,15,271,143,399,79,335,207,463,47,303,175,431,111,367,239,495,31,287,159,415,95,351,223,479,63,319,191,447,127,383,255,511,0,64,32,96,16,80,48,112,8,72,40,104,24,88,56,120,4,68,36,100,20,84,52,116,3,131,67,195,35,163,99,227].map(((e,t)=>[e,wn[t]])));const bn=hn([[30,5]]);function xn(e,t,n,r,i){const o=this;o.good_length=e,o.max_lazy=t,o.nice_length=n,o.max_chain=r,o.func=i}gn.static_dtree=mn([0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,30,1,17,9,25,5,21,13,29,3,19,11,27,7,23].map(((e,t)=>[e,bn[t]]))),gn.static_l_desc=new gn(gn.static_ltree,_n.extra_lbits,257,286,dn),gn.static_d_desc=new gn(gn.static_dtree,_n.extra_dbits,0,30,dn),gn.static_bl_desc=new gn(null,_n.extra_blbits,0,19,7);const yn=[new xn(0,0,0,0,0),new xn(4,4,8,4,1),new xn(4,5,16,8,1),new xn(4,6,32,32,1),new xn(4,4,16,16,2),new xn(8,16,32,32,2),new xn(8,16,128,128,2),new xn(8,32,128,256,2),new xn(32,128,258,1024,2),new xn(32,258,258,4096,2)],kn=["need dictionary","stream end","","","stream error","data error","","buffer error","",""],An=113,Cn=666,Sn=262;function zn(e,t,n,r){const i=e[2*t],o=e[2*n];return i<o||i==o&&r[t]<=r[n]}function En(){const e=this;let t,n,r,i,o,a,s,c,l,u,d,f,p,h,m,v,_,g,w,b,x,y,k,A,C,S,z,E,W,U,D,j,I;const T=new _n,q=new _n,F=new _n;let L,B,O,M,P,N;function R(){let t;for(t=0;t<286;t++)D[2*t]=0;for(t=0;t<30;t++)j[2*t]=0;for(t=0;t<19;t++)I[2*t]=0;D[512]=1,e.opt_len=e.static_len=0,B=O=0}function V(e,t){let n,r=-1,i=e[1],o=0,a=7,s=4;0===i&&(a=138,s=3),e[2*(t+1)+1]=65535;for(let c=0;c<=t;c++)n=i,i=e[2*(c+1)+1],++o<a&&n==i||(o<s?I[2*n]+=o:0!==n?(n!=r&&I[2*n]++,I[32]++):o<=10?I[34]++:I[36]++,o=0,r=n,0===i?(a=138,s=3):n==i?(a=6,s=3):(a=7,s=4))}function H(t){e.pending_buf[e.pending++]=t}function K(e){H(255&e),H(e>>>8&255)}function $(e,t){let n;const r=t;N>16-r?(n=e,P|=n<<N&65535,K(P),P=n>>>16-N,N+=r-16):(P|=e<<N&65535,N+=r)}function Y(e,t){const n=2*e;$(65535&t[n],65535&t[n+1])}function G(e,t){let n,r,i=-1,o=e[1],a=0,s=7,c=4;for(0===o&&(s=138,c=3),n=0;n<=t;n++)if(r=o,o=e[2*(n+1)+1],!(++a<s&&r==o)){if(a<c)do{Y(r,I)}while(0!=--a);else 0!==r?(r!=i&&(Y(r,I),a--),Y(16,I),$(a-3,2)):a<=10?(Y(17,I),$(a-3,3)):(Y(18,I),$(a-11,7));a=0,i=r,0===o?(s=138,c=3):r==o?(s=6,c=3):(s=7,c=4)}}function Z(){16==N?(K(P),P=0,N=0):N>=8&&(H(255&P),P>>>=8,N-=8)}function X(t,n){let r,i,o;if(e.dist_buf[B]=t,e.lc_buf[B]=255&n,B++,0===t?D[2*n]++:(O++,t--,D[2*(_n._length_code[n]+256+1)]++,j[2*_n.d_code(t)]++),0==(8191&B)&&z>2){for(r=8*B,i=x-_,o=0;o<30;o++)r+=j[2*o]*(5+_n.extra_dbits[o]);if(r>>>=3,O<Math.floor(B/2)&&r<Math.floor(i/2))return!0}return B==L-1}function J(t,n){let r,i,o,a,s=0;if(0!==B)do{r=e.dist_buf[s],i=e.lc_buf[s],s++,0===r?Y(i,t):(o=_n._length_code[i],Y(o+256+1,t),a=_n.extra_lbits[o],0!==a&&(i-=_n.base_length[o],$(i,a)),r--,o=_n.d_code(r),Y(o,n),a=_n.extra_dbits[o],0!==a&&(r-=_n.base_dist[o],$(r,a)))}while(s<B);Y(256,t),M=t[513]}function Q(){N>8?K(P):N>0&&H(255&P),P=0,N=0}function ee(t,n,r){$(0+(r?1:0),3),function(t,n,r){Q(),M=8,K(n),K(~n),e.pending_buf.set(c.subarray(t,t+n),e.pending),e.pending+=n}(t,n)}function te(n){(function(t,n,r){let i,o,a=0;z>0?(T.build_tree(e),q.build_tree(e),a=function(){let t;for(V(D,T.max_code),V(j,q.max_code),F.build_tree(e),t=18;t>=3&&0===I[2*_n.bl_order[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(),i=e.opt_len+3+7>>>3,o=e.static_len+3+7>>>3,o<=i&&(i=o)):i=o=n+5,n+4<=i&&-1!=t?ee(t,n,r):o==i?($(2+(r?1:0),3),J(gn.static_ltree,gn.static_dtree)):($(4+(r?1:0),3),function(e,t,n){let r;for($(e-257,5),$(t-1,5),$(n-4,4),r=0;r<n;r++)$(I[2*_n.bl_order[r]+1],3);G(D,e-1),G(j,t-1)}(T.max_code+1,q.max_code+1,a+1),J(D,j)),R(),r&&Q()})(_>=0?_:-1,x-_,n),_=x,t.flush_pending()}function ne(){let e,n,r,i;do{if(i=l-k-x,0===i&&0===x&&0===k)i=o;else if(-1==i)i--;else if(x>=o+o-Sn){c.set(c.subarray(o,o+o),0),y-=o,x-=o,_-=o,e=p,r=e;do{n=65535&d[--r],d[r]=n>=o?n-o:0}while(0!=--e);e=o,r=e;do{n=65535&u[--r],u[r]=n>=o?n-o:0}while(0!=--e);i+=o}if(0===t.avail_in)return;e=t.read_buf(c,x+k,i),k+=e,k>=3&&(f=255&c[x],f=(f<<v^255&c[x+1])&m)}while(k<Sn&&0!==t.avail_in)}function re(e){let t,n,r=C,i=x,a=A;const l=x>o-Sn?x-(o-Sn):0;let d=U;const f=s,p=x+258;let h=c[i+a-1],m=c[i+a];A>=W&&(r>>=2),d>k&&(d=k);do{if(t=e,c[t+a]==m&&c[t+a-1]==h&&c[t]==c[i]&&c[++t]==c[i+1]){i+=2,t++;do{}while(c[++i]==c[++t]&&c[++i]==c[++t]&&c[++i]==c[++t]&&c[++i]==c[++t]&&c[++i]==c[++t]&&c[++i]==c[++t]&&c[++i]==c[++t]&&c[++i]==c[++t]&&i<p);if(n=258-(p-i),i=p-258,n>a){if(y=e,a=n,n>=d)break;h=c[i+a-1],m=c[i+a]}}}while((e=65535&u[e&f])>l&&0!=--r);return a<=k?a:k}e.depth=[],e.bl_count=[],e.heap=[],D=[],j=[],I=[],e.pqdownheap=function(t,n){const r=e.heap,i=r[n];let o=n<<1;for(;o<=e.heap_len&&(o<e.heap_len&&zn(t,r[o+1],r[o],e.depth)&&o++,!zn(t,i,r[o],e.depth));)r[n]=r[o],n=o,o<<=1;r[n]=i},e.deflateInit=function(t,w,y,B,O,V){return B||(B=8),O||(O=8),V||(V=0),t.msg=null,-1==w&&(w=6),O<1||O>9||8!=B||y<9||y>15||w<0||w>9||V<0||V>2?pn:(t.dstate=e,a=y,o=1<<a,s=o-1,h=O+7,p=1<<h,m=p-1,v=Math.floor((h+3-1)/3),c=new Uint8Array(2*o),u=[],d=[],L=1<<O+6,e.pending_buf=new Uint8Array(4*L),r=4*L,e.dist_buf=new Uint16Array(L),e.lc_buf=new Uint8Array(L),z=w,E=V,function(t){return t.total_in=t.total_out=0,t.msg=null,e.pending=0,e.pending_out=0,n=An,i=0,T.dyn_tree=D,T.stat_desc=gn.static_l_desc,q.dyn_tree=j,q.stat_desc=gn.static_d_desc,F.dyn_tree=I,F.stat_desc=gn.static_bl_desc,P=0,N=0,M=8,R(),function(){l=2*o,d[p-1]=0;for(let e=0;e<p-1;e++)d[e]=0;S=yn[z].max_lazy,W=yn[z].good_length,U=yn[z].nice_length,C=yn[z].max_chain,x=0,_=0,k=0,g=A=2,b=0,f=0}(),0}(t))},e.deflateEnd=function(){return 42!=n&&n!=An&&n!=Cn?pn:(e.lc_buf=null,e.dist_buf=null,e.pending_buf=null,d=null,u=null,c=null,e.dstate=null,n==An?-3:0)},e.deflateParams=function(e,t,n){let r=0;return-1==t&&(t=6),t<0||t>9||n<0||n>2?pn:(yn[z].func!=yn[t].func&&0!==e.total_in&&(r=e.deflate(1)),z!=t&&(z=t,S=yn[z].max_lazy,W=yn[z].good_length,U=yn[z].nice_length,C=yn[z].max_chain),E=n,r)},e.deflateSetDictionary=function(e,t,r){let i,a=r,l=0;if(!t||42!=n)return pn;if(a<3)return 0;for(a>o-Sn&&(a=o-Sn,l=r-a),c.set(t.subarray(l,l+a),0),x=a,_=a,f=255&c[0],f=(f<<v^255&c[1])&m,i=0;i<=a-3;i++)f=(f<<v^255&c[i+2])&m,u[i&s]=d[f],d[f]=i;return 0},e.deflate=function(l,h){let C,W,U,D,j;if(h>4||h<0)return pn;if(!l.next_out||!l.next_in&&0!==l.avail_in||n==Cn&&4!=h)return l.msg=kn[4],pn;if(0===l.avail_out)return l.msg=kn[7],-5;if(t=l,D=i,i=h,42==n&&(W=8+(a-8<<4)<<8,U=(z-1&255)>>1,U>3&&(U=3),W|=U<<6,0!==x&&(W|=32),W+=31-W%31,n=An,function(e){H(e>>8&255),H(255&e)}(W)),0!==e.pending){if(t.flush_pending(),0===t.avail_out)return i=-1,0}else if(0===t.avail_in&&h<=D&&4!=h)return t.msg=kn[7],-5;if(n==Cn&&0!==t.avail_in)return l.msg=kn[7],-5;if(0!==t.avail_in||0!==k||0!=h&&n!=Cn){switch(j=-1,yn[z].func){case 0:j=function(e){let n,i=65535;for(i>r-5&&(i=r-5);;){if(k<=1){if(ne(),0===k&&0==e)return 0;if(0===k)break}if(x+=k,k=0,n=_+i,(0===x||x>=n)&&(k=x-n,x=n,te(!1),0===t.avail_out))return 0;if(x-_>=o-Sn&&(te(!1),0===t.avail_out))return 0}return te(4==e),0===t.avail_out?4==e?2:0:4==e?3:1}(h);break;case 1:j=function(e){let n,r=0;for(;;){if(k<Sn){if(ne(),k<Sn&&0==e)return 0;if(0===k)break}if(k>=3&&(f=(f<<v^255&c[x+2])&m,r=65535&d[f],u[x&s]=d[f],d[f]=x),0!==r&&(x-r&65535)<=o-Sn&&2!=E&&(g=re(r)),g>=3)if(n=X(x-y,g-3),k-=g,g<=S&&k>=3){g--;do{x++,f=(f<<v^255&c[x+2])&m,r=65535&d[f],u[x&s]=d[f],d[f]=x}while(0!=--g);x++}else x+=g,g=0,f=255&c[x],f=(f<<v^255&c[x+1])&m;else n=X(0,255&c[x]),k--,x++;if(n&&(te(!1),0===t.avail_out))return 0}return te(4==e),0===t.avail_out?4==e?2:0:4==e?3:1}(h);break;case 2:j=function(e){let n,r,i=0;for(;;){if(k<Sn){if(ne(),k<Sn&&0==e)return 0;if(0===k)break}if(k>=3&&(f=(f<<v^255&c[x+2])&m,i=65535&d[f],u[x&s]=d[f],d[f]=x),A=g,w=y,g=2,0!==i&&A<S&&(x-i&65535)<=o-Sn&&(2!=E&&(g=re(i)),g<=5&&(1==E||3==g&&x-y>4096)&&(g=2)),A>=3&&g<=A){r=x+k-3,n=X(x-1-w,A-3),k-=A-1,A-=2;do{++x<=r&&(f=(f<<v^255&c[x+2])&m,i=65535&d[f],u[x&s]=d[f],d[f]=x)}while(0!=--A);if(b=0,g=2,x++,n&&(te(!1),0===t.avail_out))return 0}else if(0!==b){if(n=X(0,255&c[x-1]),n&&te(!1),x++,k--,0===t.avail_out)return 0}else b=1,x++,k--}return 0!==b&&(n=X(0,255&c[x-1]),b=0),te(4==e),0===t.avail_out?4==e?2:0:4==e?3:1}(h)}if(2!=j&&3!=j||(n=Cn),0==j||2==j)return 0===t.avail_out&&(i=-1),0;if(1==j){if(1==h)$(2,3),Y(256,gn.static_ltree),Z(),1+M+10-N<9&&($(2,3),Y(256,gn.static_ltree),Z()),M=7;else if(ee(0,0,!1),3==h)for(C=0;C<p;C++)d[C]=0;if(t.flush_pending(),0===t.avail_out)return i=-1,0}}return 4!=h?0:1}}function Wn(){const e=this;e.next_in_index=0,e.next_out_index=0,e.avail_in=0,e.total_in=0,e.avail_out=0,e.total_out=0}Wn.prototype={deflateInit(e,t){const n=this;return n.dstate=new En,t||(t=dn),n.dstate.deflateInit(n,e,t)},deflate(e){const t=this;return t.dstate?t.dstate.deflate(t,e):pn},deflateEnd(){const e=this;if(!e.dstate)return pn;const t=e.dstate.deflateEnd();return e.dstate=null,t},deflateParams(e,t){const n=this;return n.dstate?n.dstate.deflateParams(n,e,t):pn},deflateSetDictionary(e,t){const n=this;return n.dstate?n.dstate.deflateSetDictionary(n,e,t):pn},read_buf(e,t,n){const r=this;let i=r.avail_in;return i>n&&(i=n),0===i?0:(r.avail_in-=i,e.set(r.next_in.subarray(r.next_in_index,r.next_in_index+i),t),r.next_in_index+=i,r.total_in+=i,i)},flush_pending(){const e=this;let t=e.dstate.pending;t>e.avail_out&&(t=e.avail_out),0!==t&&(e.next_out.set(e.dstate.pending_buf.subarray(e.dstate.pending_out,e.dstate.pending_out+t),e.next_out_index),e.next_out_index+=t,e.dstate.pending_out+=t,e.total_out+=t,e.avail_out-=t,e.dstate.pending-=t,0===e.dstate.pending&&(e.dstate.pending_out=0))}};const Un=0,Dn=1,jn=-2,In=-3,Tn=-4,qn=-5,Fn=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],Ln=1440,Bn=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],On=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],Mn=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],Pn=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],Nn=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],Rn=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],Vn=15;function Hn(){let e,t,n,r,i,o;function a(e,t,a,s,c,l,u,d,f,p,h){let m,v,_,g,w,b,x,y,k,A,C,S,z,E,W;A=0,w=a;do{n[e[t+A]]++,A++,w--}while(0!==w);if(n[0]==a)return u[0]=-1,d[0]=0,Un;for(y=d[0],b=1;b<=Vn&&0===n[b];b++);for(x=b,y<b&&(y=b),w=Vn;0!==w&&0===n[w];w--);for(_=w,y>w&&(y=w),d[0]=y,E=1<<b;b<w;b++,E<<=1)if((E-=n[b])<0)return In;if((E-=n[w])<0)return In;for(n[w]+=E,o[1]=b=0,A=1,z=2;0!=--w;)o[z]=b+=n[A],z++,A++;w=0,A=0;do{0!==(b=e[t+A])&&(h[o[b]++]=w),A++}while(++w<a);for(a=o[_],o[0]=w=0,A=0,g=-1,S=-y,i[0]=0,C=0,W=0;x<=_;x++)for(m=n[x];0!=m--;){for(;x>S+y;){if(g++,S+=y,W=_-S,W=W>y?y:W,(v=1<<(b=x-S))>m+1&&(v-=m+1,z=x,b<W))for(;++b<W&&!((v<<=1)<=n[++z]);)v-=n[z];if(W=1<<b,p[0]+W>Ln)return In;i[g]=C=p[0],p[0]+=W,0!==g?(o[g]=w,r[0]=b,r[1]=y,b=w>>>S-y,r[2]=C-i[g-1]-b,f.set(r,3*(i[g-1]+b))):u[0]=C}for(r[1]=x-S,A>=a?r[0]=192:h[A]<s?(r[0]=h[A]<256?0:96,r[2]=h[A++]):(r[0]=l[h[A]-s]+16+64,r[2]=c[h[A++]-s]),v=1<<x-S,b=w>>>S;b<W;b+=v)f.set(r,3*(C+b));for(b=1<<x-1;0!=(w&b);b>>>=1)w^=b;for(w^=b,k=(1<<S)-1;(w&k)!=o[g];)g--,S-=y,k=(1<<S)-1}return 0!==E&&1!=_?qn:Un}function s(a){let s;for(e||(e=[],t=[],n=new Int32Array(Vn+1),r=[],i=new Int32Array(Vn),o=new Int32Array(Vn+1)),t.length<a&&(t=[]),s=0;s<a;s++)t[s]=0;for(s=0;s<Vn+1;s++)n[s]=0;for(s=0;s<3;s++)r[s]=0;i.set(n.subarray(0,Vn),0),o.set(n.subarray(0,Vn+1),0)}this.inflate_trees_bits=function(n,r,i,o,c){let l;return s(19),e[0]=0,l=a(n,0,19,19,null,null,i,r,o,e,t),l==In?c.msg="oversubscribed dynamic bit lengths tree":l!=qn&&0!==r[0]||(c.msg="incomplete dynamic bit lengths tree",l=In),l},this.inflate_trees_dynamic=function(n,r,i,o,c,l,u,d,f){let p;return s(288),e[0]=0,p=a(i,0,n,257,Mn,Pn,l,o,d,e,t),p!=Un||0===o[0]?(p==In?f.msg="oversubscribed literal/length tree":p!=Tn&&(f.msg="incomplete literal/length tree",p=In),p):(s(288),p=a(i,n,r,0,Nn,Rn,u,c,d,e,t),p!=Un||0===c[0]&&n>257?(p==In?f.msg="oversubscribed distance tree":p==qn?(f.msg="incomplete distance tree",p=In):p!=Tn&&(f.msg="empty distance tree with lengths",p=In),p):Un)}}Hn.inflate_trees_fixed=function(e,t,n,r){return e[0]=9,t[0]=5,n[0]=Bn,r[0]=On,Un};const Kn=0,$n=1,Yn=2,Gn=3,Zn=4,Xn=5,Jn=6,Qn=7,er=8,tr=9;function nr(){const e=this;let t,n,r,i,o=0,a=0,s=0,c=0,l=0,u=0,d=0,f=0,p=0,h=0;function m(e,t,n,r,i,o,a,s){let c,l,u,d,f,p,h,m,v,_,g,w,b,x,y,k;h=s.next_in_index,m=s.avail_in,f=a.bitb,p=a.bitk,v=a.write,_=v<a.read?a.read-v-1:a.end-v,g=Fn[e],w=Fn[t];do{for(;p<20;)m--,f|=(255&s.read_byte(h++))<<p,p+=8;if(c=f&g,l=n,u=r,k=3*(u+c),0!==(d=l[k]))for(;;){if(f>>=l[k+1],p-=l[k+1],0!=(16&d)){for(d&=15,b=l[k+2]+(f&Fn[d]),f>>=d,p-=d;p<15;)m--,f|=(255&s.read_byte(h++))<<p,p+=8;for(c=f&w,l=i,u=o,k=3*(u+c),d=l[k];;){if(f>>=l[k+1],p-=l[k+1],0!=(16&d)){for(d&=15;p<d;)m--,f|=(255&s.read_byte(h++))<<p,p+=8;if(x=l[k+2]+(f&Fn[d]),f>>=d,p-=d,_-=b,v>=x)y=v-x,v-y>0&&2>v-y?(a.win[v++]=a.win[y++],a.win[v++]=a.win[y++],b-=2):(a.win.set(a.win.subarray(y,y+2),v),v+=2,y+=2,b-=2);else{y=v-x;do{y+=a.end}while(y<0);if(d=a.end-y,b>d){if(b-=d,v-y>0&&d>v-y)do{a.win[v++]=a.win[y++]}while(0!=--d);else a.win.set(a.win.subarray(y,y+d),v),v+=d,y+=d,d=0;y=0}}if(v-y>0&&b>v-y)do{a.win[v++]=a.win[y++]}while(0!=--b);else a.win.set(a.win.subarray(y,y+b),v),v+=b,y+=b,b=0;break}if(0!=(64&d))return s.msg="invalid distance code",b=s.avail_in-m,b=p>>3<b?p>>3:b,m+=b,h-=b,p-=b<<3,a.bitb=f,a.bitk=p,s.avail_in=m,s.total_in+=h-s.next_in_index,s.next_in_index=h,a.write=v,In;c+=l[k+2],c+=f&Fn[d],k=3*(u+c),d=l[k]}break}if(0!=(64&d))return 0!=(32&d)?(b=s.avail_in-m,b=p>>3<b?p>>3:b,m+=b,h-=b,p-=b<<3,a.bitb=f,a.bitk=p,s.avail_in=m,s.total_in+=h-s.next_in_index,s.next_in_index=h,a.write=v,Dn):(s.msg="invalid literal/length code",b=s.avail_in-m,b=p>>3<b?p>>3:b,m+=b,h-=b,p-=b<<3,a.bitb=f,a.bitk=p,s.avail_in=m,s.total_in+=h-s.next_in_index,s.next_in_index=h,a.write=v,In);if(c+=l[k+2],c+=f&Fn[d],k=3*(u+c),0===(d=l[k])){f>>=l[k+1],p-=l[k+1],a.win[v++]=l[k+2],_--;break}}else f>>=l[k+1],p-=l[k+1],a.win[v++]=l[k+2],_--}while(_>=258&&m>=10);return b=s.avail_in-m,b=p>>3<b?p>>3:b,m+=b,h-=b,p-=b<<3,a.bitb=f,a.bitk=p,s.avail_in=m,s.total_in+=h-s.next_in_index,s.next_in_index=h,a.write=v,Un}e.init=function(e,o,a,s,c,l){t=Kn,d=e,f=o,r=a,p=s,i=c,h=l,n=null},e.proc=function(e,v,_){let g,w,b,x,y,k,A,C=0,S=0,z=0;for(z=v.next_in_index,x=v.avail_in,C=e.bitb,S=e.bitk,y=e.write,k=y<e.read?e.read-y-1:e.end-y;;)switch(t){case Kn:if(k>=258&&x>=10&&(e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,_=m(d,f,r,p,i,h,e,v),z=v.next_in_index,x=v.avail_in,C=e.bitb,S=e.bitk,y=e.write,k=y<e.read?e.read-y-1:e.end-y,_!=Un)){t=_==Dn?Qn:tr;break}s=d,n=r,a=p,t=$n;case $n:for(g=s;S<g;){if(0===x)return e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);_=Un,x--,C|=(255&v.read_byte(z++))<<S,S+=8}if(w=3*(a+(C&Fn[g])),C>>>=n[w+1],S-=n[w+1],b=n[w],0===b){c=n[w+2],t=Jn;break}if(0!=(16&b)){l=15&b,o=n[w+2],t=Yn;break}if(0==(64&b)){s=b,a=w/3+n[w+2];break}if(0!=(32&b)){t=Qn;break}return t=tr,v.msg="invalid literal/length code",_=In,e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);case Yn:for(g=l;S<g;){if(0===x)return e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);_=Un,x--,C|=(255&v.read_byte(z++))<<S,S+=8}o+=C&Fn[g],C>>=g,S-=g,s=f,n=i,a=h,t=Gn;case Gn:for(g=s;S<g;){if(0===x)return e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);_=Un,x--,C|=(255&v.read_byte(z++))<<S,S+=8}if(w=3*(a+(C&Fn[g])),C>>=n[w+1],S-=n[w+1],b=n[w],0!=(16&b)){l=15&b,u=n[w+2],t=Zn;break}if(0==(64&b)){s=b,a=w/3+n[w+2];break}return t=tr,v.msg="invalid distance code",_=In,e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);case Zn:for(g=l;S<g;){if(0===x)return e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);_=Un,x--,C|=(255&v.read_byte(z++))<<S,S+=8}u+=C&Fn[g],C>>=g,S-=g,t=Xn;case Xn:for(A=y-u;A<0;)A+=e.end;for(;0!==o;){if(0===k&&(y==e.end&&0!==e.read&&(y=0,k=y<e.read?e.read-y-1:e.end-y),0===k&&(e.write=y,_=e.inflate_flush(v,_),y=e.write,k=y<e.read?e.read-y-1:e.end-y,y==e.end&&0!==e.read&&(y=0,k=y<e.read?e.read-y-1:e.end-y),0===k)))return e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);e.win[y++]=e.win[A++],k--,A==e.end&&(A=0),o--}t=Kn;break;case Jn:if(0===k&&(y==e.end&&0!==e.read&&(y=0,k=y<e.read?e.read-y-1:e.end-y),0===k&&(e.write=y,_=e.inflate_flush(v,_),y=e.write,k=y<e.read?e.read-y-1:e.end-y,y==e.end&&0!==e.read&&(y=0,k=y<e.read?e.read-y-1:e.end-y),0===k)))return e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);_=Un,e.win[y++]=c,k--,t=Kn;break;case Qn:if(S>7&&(S-=8,x++,z--),e.write=y,_=e.inflate_flush(v,_),y=e.write,k=y<e.read?e.read-y-1:e.end-y,e.read!=e.write)return e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);t=er;case er:return _=Dn,e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);case tr:return _=In,e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_);default:return _=jn,e.bitb=C,e.bitk=S,v.avail_in=x,v.total_in+=z-v.next_in_index,v.next_in_index=z,e.write=y,e.inflate_flush(v,_)}},e.free=function(){}}const rr=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],ir=0,or=1,ar=2,sr=3,cr=4,lr=5,ur=6,dr=7,fr=8,pr=9;function hr(e,t){const n=this;let r,i=ir,o=0,a=0,s=0;const c=[0],l=[0],u=new nr;let d=0,f=new Int32Array(3*Ln);const p=new Hn;n.bitk=0,n.bitb=0,n.win=new Uint8Array(t),n.end=t,n.read=0,n.write=0,n.reset=function(e,t){t&&(t[0]=0),i==ur&&u.free(e),i=ir,n.bitk=0,n.bitb=0,n.read=n.write=0},n.reset(e,null),n.inflate_flush=function(e,t){let r,i,o;return i=e.next_out_index,o=n.read,r=(o<=n.write?n.write:n.end)-o,r>e.avail_out&&(r=e.avail_out),0!==r&&t==qn&&(t=Un),e.avail_out-=r,e.total_out+=r,e.next_out.set(n.win.subarray(o,o+r),i),i+=r,o+=r,o==n.end&&(o=0,n.write==n.end&&(n.write=0),r=n.write-o,r>e.avail_out&&(r=e.avail_out),0!==r&&t==qn&&(t=Un),e.avail_out-=r,e.total_out+=r,e.next_out.set(n.win.subarray(o,o+r),i),i+=r,o+=r),e.next_out_index=i,n.read=o,t},n.proc=function(e,t){let h,m,v,_,g,w,b,x;for(_=e.next_in_index,g=e.avail_in,m=n.bitb,v=n.bitk,w=n.write,b=w<n.read?n.read-w-1:n.end-w;;){let y,k,A,C,S,z,E,W;switch(i){case ir:for(;v<3;){if(0===g)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);t=Un,g--,m|=(255&e.read_byte(_++))<<v,v+=8}switch(h=7&m,d=1&h,h>>>1){case 0:m>>>=3,v-=3,h=7&v,m>>>=h,v-=h,i=or;break;case 1:y=[],k=[],A=[[]],C=[[]],Hn.inflate_trees_fixed(y,k,A,C),u.init(y[0],k[0],A[0],0,C[0],0),m>>>=3,v-=3,i=ur;break;case 2:m>>>=3,v-=3,i=sr;break;case 3:return m>>>=3,v-=3,i=pr,e.msg="invalid block type",t=In,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t)}break;case or:for(;v<32;){if(0===g)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);t=Un,g--,m|=(255&e.read_byte(_++))<<v,v+=8}if((~m>>>16&65535)!=(65535&m))return i=pr,e.msg="invalid stored block lengths",t=In,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);o=65535&m,m=v=0,i=0!==o?ar:0!==d?dr:ir;break;case ar:if(0===g)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);if(0===b&&(w==n.end&&0!==n.read&&(w=0,b=w<n.read?n.read-w-1:n.end-w),0===b&&(n.write=w,t=n.inflate_flush(e,t),w=n.write,b=w<n.read?n.read-w-1:n.end-w,w==n.end&&0!==n.read&&(w=0,b=w<n.read?n.read-w-1:n.end-w),0===b)))return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);if(t=Un,h=o,h>g&&(h=g),h>b&&(h=b),n.win.set(e.read_buf(_,h),w),_+=h,g-=h,w+=h,b-=h,0!=(o-=h))break;i=0!==d?dr:ir;break;case sr:for(;v<14;){if(0===g)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);t=Un,g--,m|=(255&e.read_byte(_++))<<v,v+=8}if(a=h=16383&m,(31&h)>29||(h>>5&31)>29)return i=pr,e.msg="too many length or distance symbols",t=In,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);if(h=258+(31&h)+(h>>5&31),!r||r.length<h)r=[];else for(x=0;x<h;x++)r[x]=0;m>>>=14,v-=14,s=0,i=cr;case cr:for(;s<4+(a>>>10);){for(;v<3;){if(0===g)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);t=Un,g--,m|=(255&e.read_byte(_++))<<v,v+=8}r[rr[s++]]=7&m,m>>>=3,v-=3}for(;s<19;)r[rr[s++]]=0;if(c[0]=7,h=p.inflate_trees_bits(r,c,l,f,e),h!=Un)return(t=h)==In&&(r=null,i=pr),n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);s=0,i=lr;case lr:for(;h=a,!(s>=258+(31&h)+(h>>5&31));){let o,u;for(h=c[0];v<h;){if(0===g)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);t=Un,g--,m|=(255&e.read_byte(_++))<<v,v+=8}if(h=f[3*(l[0]+(m&Fn[h]))+1],u=f[3*(l[0]+(m&Fn[h]))+2],u<16)m>>>=h,v-=h,r[s++]=u;else{for(x=18==u?7:u-14,o=18==u?11:3;v<h+x;){if(0===g)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);t=Un,g--,m|=(255&e.read_byte(_++))<<v,v+=8}if(m>>>=h,v-=h,o+=m&Fn[x],m>>>=x,v-=x,x=s,h=a,x+o>258+(31&h)+(h>>5&31)||16==u&&x<1)return r=null,i=pr,e.msg="invalid bit length repeat",t=In,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);u=16==u?r[x-1]:0;do{r[x++]=u}while(0!=--o);s=x}}if(l[0]=-1,S=[],z=[],E=[],W=[],S[0]=9,z[0]=6,h=a,h=p.inflate_trees_dynamic(257+(31&h),1+(h>>5&31),r,S,z,E,W,f,e),h!=Un)return h==In&&(r=null,i=pr),t=h,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);u.init(S[0],z[0],f,E[0],f,W[0]),i=ur;case ur:if(n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,(t=u.proc(n,e,t))!=Dn)return n.inflate_flush(e,t);if(t=Un,u.free(e),_=e.next_in_index,g=e.avail_in,m=n.bitb,v=n.bitk,w=n.write,b=w<n.read?n.read-w-1:n.end-w,0===d){i=ir;break}i=dr;case dr:if(n.write=w,t=n.inflate_flush(e,t),w=n.write,b=w<n.read?n.read-w-1:n.end-w,n.read!=n.write)return n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);i=fr;case fr:return t=Dn,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);case pr:return t=In,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t);default:return t=jn,n.bitb=m,n.bitk=v,e.avail_in=g,e.total_in+=_-e.next_in_index,e.next_in_index=_,n.write=w,n.inflate_flush(e,t)}}},n.free=function(e){n.reset(e,null),n.win=null,f=null},n.set_dictionary=function(e,t,r){n.win.set(e.subarray(t,t+r),0),n.read=n.write=r},n.sync_point=function(){return i==or?1:0}}const mr=13,vr=[0,0,255,255];function _r(){const e=this;function t(e){return e&&e.istate?(e.total_in=e.total_out=0,e.msg=null,e.istate.mode=7,e.istate.blocks.reset(e,null),Un):jn}e.mode=0,e.method=0,e.was=[0],e.need=0,e.marker=0,e.wbits=0,e.inflateEnd=function(t){return e.blocks&&e.blocks.free(t),e.blocks=null,Un},e.inflateInit=function(n,r){return n.msg=null,e.blocks=null,r<8||r>15?(e.inflateEnd(n),jn):(e.wbits=r,n.istate.blocks=new hr(n,1<<r),t(n),Un)},e.inflate=function(e,t){let n,r;if(!e||!e.istate||!e.next_in)return jn;const i=e.istate;for(t=4==t?qn:Un,n=qn;;)switch(i.mode){case 0:if(0===e.avail_in)return n;if(n=t,e.avail_in--,e.total_in++,8!=(15&(i.method=e.read_byte(e.next_in_index++)))){i.mode=mr,e.msg="unknown compression method",i.marker=5;break}if(8+(i.method>>4)>i.wbits){i.mode=mr,e.msg="invalid win size",i.marker=5;break}i.mode=1;case 1:if(0===e.avail_in)return n;if(n=t,e.avail_in--,e.total_in++,r=255&e.read_byte(e.next_in_index++),((i.method<<8)+r)%31!=0){i.mode=mr,e.msg="incorrect header check",i.marker=5;break}if(0==(32&r)){i.mode=7;break}i.mode=2;case 2:if(0===e.avail_in)return n;n=t,e.avail_in--,e.total_in++,i.need=(255&e.read_byte(e.next_in_index++))<<24&4278190080,i.mode=3;case 3:if(0===e.avail_in)return n;n=t,e.avail_in--,e.total_in++,i.need+=(255&e.read_byte(e.next_in_index++))<<16&16711680,i.mode=4;case 4:if(0===e.avail_in)return n;n=t,e.avail_in--,e.total_in++,i.need+=(255&e.read_byte(e.next_in_index++))<<8&65280,i.mode=5;case 5:return 0===e.avail_in?n:(n=t,e.avail_in--,e.total_in++,i.need+=255&e.read_byte(e.next_in_index++),i.mode=6,2);case 6:return i.mode=mr,e.msg="need dictionary",i.marker=0,jn;case 7:if(n=i.blocks.proc(e,n),n==In){i.mode=mr,i.marker=0;break}if(n==Un&&(n=t),n!=Dn)return n;n=t,i.blocks.reset(e,i.was),i.mode=12;case 12:return e.avail_in=0,Dn;case mr:return In;default:return jn}},e.inflateSetDictionary=function(e,t,n){let r=0,i=n;if(!e||!e.istate||6!=e.istate.mode)return jn;const o=e.istate;return i>=1<<o.wbits&&(i=(1<<o.wbits)-1,r=n-i),o.blocks.set_dictionary(t,r,i),o.mode=7,Un},e.inflateSync=function(e){let n,r,i,o,a;if(!e||!e.istate)return jn;const s=e.istate;if(s.mode!=mr&&(s.mode=mr,s.marker=0),0===(n=e.avail_in))return qn;for(r=e.next_in_index,i=s.marker;0!==n&&i<4;)e.read_byte(r)==vr[i]?i++:i=0!==e.read_byte(r)?0:4-i,r++,n--;return e.total_in+=r-e.next_in_index,e.next_in_index=r,e.avail_in=n,s.marker=i,4!=i?In:(o=e.total_in,a=e.total_out,t(e),e.total_in=o,e.total_out=a,s.mode=7,Un)},e.inflateSyncPoint=function(e){return e&&e.istate&&e.istate.blocks?e.istate.blocks.sync_point():jn}}function gr(){}gr.prototype={inflateInit(e){const t=this;return t.istate=new _r,e||(e=15),t.istate.inflateInit(t,e)},inflate(e){const t=this;return t.istate?t.istate.inflate(t,e):jn},inflateEnd(){const e=this;if(!e.istate)return jn;const t=e.istate.inflateEnd(e);return e.istate=null,t},inflateSync(){const e=this;return e.istate?e.istate.inflateSync(e):jn},inflateSetDictionary(e,t){const n=this;return n.istate?n.istate.inflateSetDictionary(n,e,t):jn},read_byte(e){return this.next_in[e]},read_buf(e,t){return this.next_in.subarray(e,e+t)}};const wr=4294967295,br=65535,xr=33639248,yr=101075792,kr=22,Ar=(new Date(2107,11,31),void new Date(1980,0,1)),Cr="undefined",Sr="function";class zr{constructor(e){return class extends TransformStream{constructor(t,n){const r=new e(n);super({transform(e,t){t.enqueue(r.append(e))},flush(e){const t=r.flush();t&&e.enqueue(t)}})}}}}let Er=2;try{typeof navigator!=Cr&&navigator.hardwareConcurrency&&(Er=navigator.hardwareConcurrency)}catch(e){}const Wr={chunkSize:524288,maxWorkers:Er,terminateWorkerTimeout:5e3,useWebWorkers:!0,useCompressionStream:!0,workerScripts:Ar,CompressionStreamNative:typeof CompressionStream!=Cr&&CompressionStream,DecompressionStreamNative:typeof DecompressionStream!=Cr&&DecompressionStream},Ur=Object.assign({},Wr);function Dr(e){const{baseURL:t,chunkSize:n,maxWorkers:r,terminateWorkerTimeout:i,useCompressionStream:o,useWebWorkers:a,Deflate:s,Inflate:c,CompressionStream:l,DecompressionStream:u,workerScripts:d}=e;if(jr("baseURL",t),jr("chunkSize",n),jr("maxWorkers",r),jr("terminateWorkerTimeout",i),jr("useCompressionStream",o),jr("useWebWorkers",a),s&&(Ur.CompressionStream=new zr(s)),c&&(Ur.DecompressionStream=new zr(c)),jr("CompressionStream",l),jr("DecompressionStream",u),d!==Ar){const{deflate:e,inflate:t}=d;if((e||t)&&(Ur.workerScripts||(Ur.workerScripts={})),e){if(!Array.isArray(e))throw new Error("workerScripts.deflate must be an array");Ur.workerScripts.deflate=e}if(t){if(!Array.isArray(t))throw new Error("workerScripts.inflate must be an array");Ur.workerScripts.inflate=t}}}function jr(e,t){t!==Ar&&(Ur[e]=t)}const Ir={application:{"andrew-inset":"ez",annodex:"anx","atom+xml":"atom","atomcat+xml":"atomcat","atomserv+xml":"atomsrv",bbolin:"lin","cu-seeme":"cu","davmount+xml":"davmount",dsptype:"tsp",ecmascript:["es","ecma"],futuresplash:"spl",hta:"hta","java-archive":"jar","java-serialized-object":"ser","java-vm":"class",m3g:"m3g","mac-binhex40":"hqx",mathematica:["nb","ma","mb"],msaccess:"mdb",msword:["doc","dot","wiz"],mxf:"mxf",oda:"oda",ogg:"ogx",pdf:"pdf","pgp-keys":"key","pgp-signature":["asc","sig"],"pics-rules":"prf",postscript:["ps","ai","eps","epsi","epsf","eps2","eps3"],rar:"rar","rdf+xml":"rdf","rss+xml":"rss",rtf:"rtf","xhtml+xml":["xhtml","xht"],xml:["xml","xsl","xsd","xpdl"],"xspf+xml":"xspf",zip:"zip","vnd.android.package-archive":"apk","vnd.cinderella":"cdy","vnd.google-earth.kml+xml":"kml","vnd.google-earth.kmz":"kmz","vnd.mozilla.xul+xml":"xul","vnd.ms-excel":["xls","xlb","xlt","xlm","xla","xlc","xlw"],"vnd.ms-pki.seccat":"cat","vnd.ms-pki.stl":"stl","vnd.ms-powerpoint":["ppt","pps","pot","ppa","pwz"],"vnd.oasis.opendocument.chart":"odc","vnd.oasis.opendocument.database":"odb","vnd.oasis.opendocument.formula":"odf","vnd.oasis.opendocument.graphics":"odg","vnd.oasis.opendocument.graphics-template":"otg","vnd.oasis.opendocument.image":"odi","vnd.oasis.opendocument.presentation":"odp","vnd.oasis.opendocument.presentation-template":"otp","vnd.oasis.opendocument.spreadsheet":"ods","vnd.oasis.opendocument.spreadsheet-template":"ots","vnd.oasis.opendocument.text":"odt","vnd.oasis.opendocument.text-master":["odm","otm"],"vnd.oasis.opendocument.text-template":"ott","vnd.oasis.opendocument.text-web":"oth","vnd.openxmlformats-officedocument.spreadsheetml.sheet":"xlsx","vnd.openxmlformats-officedocument.spreadsheetml.template":"xltx","vnd.openxmlformats-officedocument.presentationml.presentation":"pptx","vnd.openxmlformats-officedocument.presentationml.slideshow":"ppsx","vnd.openxmlformats-officedocument.presentationml.template":"potx","vnd.openxmlformats-officedocument.wordprocessingml.document":"docx","vnd.openxmlformats-officedocument.wordprocessingml.template":"dotx","vnd.smaf":"mmf","vnd.stardivision.calc":"sdc","vnd.stardivision.chart":"sds","vnd.stardivision.draw":"sda","vnd.stardivision.impress":"sdd","vnd.stardivision.math":["sdf","smf"],"vnd.stardivision.writer":["sdw","vor"],"vnd.stardivision.writer-global":"sgl","vnd.sun.xml.calc":"sxc","vnd.sun.xml.calc.template":"stc","vnd.sun.xml.draw":"sxd","vnd.sun.xml.draw.template":"std","vnd.sun.xml.impress":"sxi","vnd.sun.xml.impress.template":"sti","vnd.sun.xml.math":"sxm","vnd.sun.xml.writer":"sxw","vnd.sun.xml.writer.global":"sxg","vnd.sun.xml.writer.template":"stw","vnd.symbian.install":["sis","sisx"],"vnd.visio":["vsd","vst","vss","vsw","vsdx","vssx","vstx","vssm","vstm"],"vnd.wap.wbxml":"wbxml","vnd.wap.wmlc":"wmlc","vnd.wap.wmlscriptc":"wmlsc","vnd.wordperfect":"wpd","vnd.wordperfect5.1":"wp5","x-123":"wk","x-7z-compressed":"7z","x-abiword":"abw","x-apple-diskimage":"dmg","x-bcpio":"bcpio","x-bittorrent":"torrent","x-cbr":["cbr","cba","cbt","cb7"],"x-cbz":"cbz","x-cdf":["cdf","cda"],"x-cdlink":"vcd","x-chess-pgn":"pgn","x-cpio":"cpio","x-csh":"csh","x-director":["dir","dxr","cst","cct","cxt","w3d","fgd","swa"],"x-dms":"dms","x-doom":"wad","x-dvi":"dvi","x-httpd-eruby":"rhtml","x-font":"pcf.Z","x-freemind":"mm","x-gnumeric":"gnumeric","x-go-sgf":"sgf","x-graphing-calculator":"gcf","x-gtar":["gtar","taz"],"x-hdf":"hdf","x-httpd-php":["phtml","pht","php"],"x-httpd-php-source":"phps","x-httpd-php3":"php3","x-httpd-php3-preprocessed":"php3p","x-httpd-php4":"php4","x-httpd-php5":"php5","x-ica":"ica","x-info":"info","x-internet-signup":["ins","isp"],"x-iphone":"iii","x-iso9660-image":"iso","x-java-jnlp-file":"jnlp","x-jmol":"jmz","x-killustrator":"kil","x-latex":"latex","x-lyx":"lyx","x-lzx":"lzx","x-maker":["frm","fb","fbdoc"],"x-ms-wmd":"wmd","x-msdos-program":["com","exe","bat","dll"],"x-netcdf":["nc"],"x-ns-proxy-autoconfig":["pac","dat"],"x-nwc":"nwc","x-object":"o","x-oz-application":"oza","x-pkcs7-certreqresp":"p7r","x-python-code":["pyc","pyo"],"x-qgis":["qgs","shp","shx"],"x-quicktimeplayer":"qtl","x-redhat-package-manager":["rpm","rpa"],"x-ruby":"rb","x-sh":"sh","x-shar":"shar","x-shockwave-flash":["swf","swfl"],"x-silverlight":"scr","x-stuffit":"sit","x-sv4cpio":"sv4cpio","x-sv4crc":"sv4crc","x-tar":"tar","x-tex-gf":"gf","x-tex-pk":"pk","x-texinfo":["texinfo","texi"],"x-trash":["~","%","bak","old","sik"],"x-ustar":"ustar","x-wais-source":"src","x-wingz":"wz","x-x509-ca-cert":["crt","der","cer"],"x-xcf":"xcf","x-xfig":"fig","x-xpinstall":"xpi",applixware:"aw","atomsvc+xml":"atomsvc","ccxml+xml":"ccxml","cdmi-capability":"cdmia","cdmi-container":"cdmic","cdmi-domain":"cdmid","cdmi-object":"cdmio","cdmi-queue":"cdmiq","docbook+xml":"dbk","dssc+der":"dssc","dssc+xml":"xdssc","emma+xml":"emma","epub+zip":"epub",exi:"exi","font-tdpfr":"pfr","gml+xml":"gml","gpx+xml":"gpx",gxf:"gxf",hyperstudio:"stk","inkml+xml":["ink","inkml"],ipfix:"ipfix","jsonml+json":"jsonml","lost+xml":"lostxml","mads+xml":"mads",marc:"mrc","marcxml+xml":"mrcx","mathml+xml":["mathml","mml"],mbox:"mbox","mediaservercontrol+xml":"mscml","metalink+xml":"metalink","metalink4+xml":"meta4","mets+xml":"mets","mods+xml":"mods",mp21:["m21","mp21"],mp4:"mp4s","oebps-package+xml":"opf","omdoc+xml":"omdoc",onenote:["onetoc","onetoc2","onetmp","onepkg"],oxps:"oxps","patch-ops-error+xml":"xer","pgp-encrypted":"pgp",pkcs10:"p10","pkcs7-mime":["p7m","p7c"],"pkcs7-signature":"p7s",pkcs8:"p8","pkix-attr-cert":"ac","pkix-crl":"crl","pkix-pkipath":"pkipath",pkixcmp:"pki","pls+xml":"pls","prs.cww":"cww","pskc+xml":"pskcxml","reginfo+xml":"rif","relax-ng-compact-syntax":"rnc","resource-lists+xml":"rl","resource-lists-diff+xml":"rld","rls-services+xml":"rs","rpki-ghostbusters":"gbr","rpki-manifest":"mft","rpki-roa":"roa","rsd+xml":"rsd","sbml+xml":"sbml","scvp-cv-request":"scq","scvp-cv-response":"scs","scvp-vp-request":"spq","scvp-vp-response":"spp",sdp:"sdp","set-payment-initiation":"setpay","set-registration-initiation":"setreg","shf+xml":"shf","sparql-query":"rq","sparql-results+xml":"srx",srgs:"gram","srgs+xml":"grxml","sru+xml":"sru","ssdl+xml":"ssdl","ssml+xml":"ssml","tei+xml":["tei","teicorpus"],"thraud+xml":"tfi","timestamped-data":"tsd","vnd.3gpp.pic-bw-large":"plb","vnd.3gpp.pic-bw-small":"psb","vnd.3gpp.pic-bw-var":"pvb","vnd.3gpp2.tcap":"tcap","vnd.3m.post-it-notes":"pwn","vnd.accpac.simply.aso":"aso","vnd.accpac.simply.imp":"imp","vnd.acucobol":"acu","vnd.acucorp":["atc","acutc"],"vnd.adobe.air-application-installer-package+zip":"air","vnd.adobe.formscentral.fcdt":"fcdt","vnd.adobe.fxp":["fxp","fxpl"],"vnd.adobe.xdp+xml":"xdp","vnd.adobe.xfdf":"xfdf","vnd.ahead.space":"ahead","vnd.airzip.filesecure.azf":"azf","vnd.airzip.filesecure.azs":"azs","vnd.amazon.ebook":"azw","vnd.americandynamics.acc":"acc","vnd.amiga.ami":"ami","vnd.anser-web-certificate-issue-initiation":"cii","vnd.anser-web-funds-transfer-initiation":"fti","vnd.antix.game-component":"atx","vnd.apple.installer+xml":"mpkg","vnd.apple.mpegurl":"m3u8","vnd.aristanetworks.swi":"swi","vnd.astraea-software.iota":"iota","vnd.audiograph":"aep","vnd.blueice.multipass":"mpm","vnd.bmi":"bmi","vnd.businessobjects":"rep","vnd.chemdraw+xml":"cdxml","vnd.chipnuts.karaoke-mmd":"mmd","vnd.claymore":"cla","vnd.cloanto.rp9":"rp9","vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"vnd.cluetrust.cartomobile-config":"c11amc","vnd.cluetrust.cartomobile-config-pkg":"c11amz","vnd.commonspace":"csp","vnd.contact.cmsg":"cdbcmsg","vnd.cosmocaller":"cmc","vnd.crick.clicker":"clkx","vnd.crick.clicker.keyboard":"clkk","vnd.crick.clicker.palette":"clkp","vnd.crick.clicker.template":"clkt","vnd.crick.clicker.wordbank":"clkw","vnd.criticaltools.wbs+xml":"wbs","vnd.ctc-posml":"pml","vnd.cups-ppd":"ppd","vnd.curl.car":"car","vnd.curl.pcurl":"pcurl","vnd.dart":"dart","vnd.data-vision.rdz":"rdz","vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"vnd.dece.ttml+xml":["uvt","uvvt"],"vnd.dece.unspecified":["uvx","uvvx"],"vnd.dece.zip":["uvz","uvvz"],"vnd.denovo.fcselayout-link":"fe_launch","vnd.dna":"dna","vnd.dolby.mlp":"mlp","vnd.dpgraph":"dpg","vnd.dreamfactory":"dfac","vnd.ds-keypoint":"kpxx","vnd.dvb.ait":"ait","vnd.dvb.service":"svc","vnd.dynageo":"geo","vnd.ecowin.chart":"mag","vnd.enliven":"nml","vnd.epson.esf":"esf","vnd.epson.msf":"msf","vnd.epson.quickanime":"qam","vnd.epson.salt":"slt","vnd.epson.ssf":"ssf","vnd.eszigno3+xml":["es3","et3"],"vnd.ezpix-album":"ez2","vnd.ezpix-package":"ez3","vnd.fdf":"fdf","vnd.fdsn.mseed":"mseed","vnd.fdsn.seed":["seed","dataless"],"vnd.flographit":"gph","vnd.fluxtime.clip":"ftc","vnd.framemaker":["fm","frame","maker","book"],"vnd.frogans.fnc":"fnc","vnd.frogans.ltf":"ltf","vnd.fsc.weblaunch":"fsc","vnd.fujitsu.oasys":"oas","vnd.fujitsu.oasys2":"oa2","vnd.fujitsu.oasys3":"oa3","vnd.fujitsu.oasysgp":"fg5","vnd.fujitsu.oasysprs":"bh2","vnd.fujixerox.ddd":"ddd","vnd.fujixerox.docuworks":"xdw","vnd.fujixerox.docuworks.binder":"xbd","vnd.fuzzysheet":"fzs","vnd.genomatix.tuxedo":"txd","vnd.geogebra.file":"ggb","vnd.geogebra.tool":"ggt","vnd.geometry-explorer":["gex","gre"],"vnd.geonext":"gxt","vnd.geoplan":"g2w","vnd.geospace":"g3w","vnd.gmx":"gmx","vnd.grafeq":["gqf","gqs"],"vnd.groove-account":"gac","vnd.groove-help":"ghf","vnd.groove-identity-message":"gim","vnd.groove-injector":"grv","vnd.groove-tool-message":"gtm","vnd.groove-tool-template":"tpl","vnd.groove-vcard":"vcg","vnd.hal+xml":"hal","vnd.handheld-entertainment+xml":"zmm","vnd.hbci":"hbci","vnd.hhe.lesson-player":"les","vnd.hp-hpgl":"hpgl","vnd.hp-hpid":"hpid","vnd.hp-hps":"hps","vnd.hp-jlyt":"jlt","vnd.hp-pcl":"pcl","vnd.hp-pclxl":"pclxl","vnd.hydrostatix.sof-data":"sfd-hdstx","vnd.ibm.minipay":"mpy","vnd.ibm.modcap":["afp","listafp","list3820"],"vnd.ibm.rights-management":"irm","vnd.ibm.secure-container":"sc","vnd.iccprofile":["icc","icm"],"vnd.igloader":"igl","vnd.immervision-ivp":"ivp","vnd.immervision-ivu":"ivu","vnd.insors.igm":"igm","vnd.intercon.formnet":["xpw","xpx"],"vnd.intergeo":"i2g","vnd.intu.qbo":"qbo","vnd.intu.qfx":"qfx","vnd.ipunplugged.rcprofile":"rcprofile","vnd.irepository.package+xml":"irp","vnd.is-xpr":"xpr","vnd.isac.fcs":"fcs","vnd.jam":"jam","vnd.jcp.javame.midlet-rms":"rms","vnd.jisp":"jisp","vnd.joost.joda-archive":"joda","vnd.kahootz":["ktz","ktr"],"vnd.kde.karbon":"karbon","vnd.kde.kchart":"chrt","vnd.kde.kformula":"kfo","vnd.kde.kivio":"flw","vnd.kde.kontour":"kon","vnd.kde.kpresenter":["kpr","kpt"],"vnd.kde.kspread":"ksp","vnd.kde.kword":["kwd","kwt"],"vnd.kenameaapp":"htke","vnd.kidspiration":"kia","vnd.kinar":["kne","knp"],"vnd.koan":["skp","skd","skt","skm"],"vnd.kodak-descriptor":"sse","vnd.las.las+xml":"lasxml","vnd.llamagraphics.life-balance.desktop":"lbd","vnd.llamagraphics.life-balance.exchange+xml":"lbe","vnd.lotus-1-2-3":"123","vnd.lotus-approach":"apr","vnd.lotus-freelance":"pre","vnd.lotus-notes":"nsf","vnd.lotus-organizer":"org","vnd.lotus-screencam":"scm","vnd.lotus-wordpro":"lwp","vnd.macports.portpkg":"portpkg","vnd.mcd":"mcd","vnd.medcalcdata":"mc1","vnd.mediastation.cdkey":"cdkey","vnd.mfer":"mwf","vnd.mfmp":"mfm","vnd.micrografx.flo":"flo","vnd.micrografx.igx":"igx","vnd.mif":"mif","vnd.mobius.daf":"daf","vnd.mobius.dis":"dis","vnd.mobius.mbk":"mbk","vnd.mobius.mqy":"mqy","vnd.mobius.msl":"msl","vnd.mobius.plc":"plc","vnd.mobius.txf":"txf","vnd.mophun.application":"mpn","vnd.mophun.certificate":"mpc","vnd.ms-artgalry":"cil","vnd.ms-cab-compressed":"cab","vnd.ms-excel.addin.macroenabled.12":"xlam","vnd.ms-excel.sheet.binary.macroenabled.12":"xlsb","vnd.ms-excel.sheet.macroenabled.12":"xlsm","vnd.ms-excel.template.macroenabled.12":"xltm","vnd.ms-fontobject":"eot","vnd.ms-htmlhelp":"chm","vnd.ms-ims":"ims","vnd.ms-lrm":"lrm","vnd.ms-officetheme":"thmx","vnd.ms-powerpoint.addin.macroenabled.12":"ppam","vnd.ms-powerpoint.presentation.macroenabled.12":"pptm","vnd.ms-powerpoint.slide.macroenabled.12":"sldm","vnd.ms-powerpoint.slideshow.macroenabled.12":"ppsm","vnd.ms-powerpoint.template.macroenabled.12":"potm","vnd.ms-project":["mpp","mpt"],"vnd.ms-word.document.macroenabled.12":"docm","vnd.ms-word.template.macroenabled.12":"dotm","vnd.ms-works":["wps","wks","wcm","wdb"],"vnd.ms-wpl":"wpl","vnd.ms-xpsdocument":"xps","vnd.mseq":"mseq","vnd.musician":"mus","vnd.muvee.style":"msty","vnd.mynfc":"taglet","vnd.neurolanguage.nlu":"nlu","vnd.nitf":["ntf","nitf"],"vnd.noblenet-directory":"nnd","vnd.noblenet-sealer":"nns","vnd.noblenet-web":"nnw","vnd.nokia.n-gage.data":"ngdat","vnd.nokia.n-gage.symbian.install":"n-gage","vnd.nokia.radio-preset":"rpst","vnd.nokia.radio-presets":"rpss","vnd.novadigm.edm":"edm","vnd.novadigm.edx":"edx","vnd.novadigm.ext":"ext","vnd.oasis.opendocument.chart-template":"otc","vnd.oasis.opendocument.formula-template":"odft","vnd.oasis.opendocument.image-template":"oti","vnd.olpc-sugar":"xo","vnd.oma.dd2+xml":"dd2","vnd.openofficeorg.extension":"oxt","vnd.openxmlformats-officedocument.presentationml.slide":"sldx","vnd.osgeo.mapguide.package":"mgp","vnd.osgi.dp":"dp","vnd.osgi.subsystem":"esa","vnd.palm":["pdb","pqa","oprc"],"vnd.pawaafile":"paw","vnd.pg.format":"str","vnd.pg.osasli":"ei6","vnd.picsel":"efif","vnd.pmi.widget":"wg","vnd.pocketlearn":"plf","vnd.powerbuilder6":"pbd","vnd.previewsystems.box":"box","vnd.proteus.magazine":"mgz","vnd.publishare-delta-tree":"qps","vnd.pvi.ptid1":"ptid","vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"vnd.realvnc.bed":"bed","vnd.recordare.musicxml":"mxl","vnd.recordare.musicxml+xml":"musicxml","vnd.rig.cryptonote":"cryptonote","vnd.rn-realmedia":"rm","vnd.rn-realmedia-vbr":"rmvb","vnd.route66.link66+xml":"link66","vnd.sailingtracker.track":"st","vnd.seemail":"see","vnd.sema":"sema","vnd.semd":"semd","vnd.semf":"semf","vnd.shana.informed.formdata":"ifm","vnd.shana.informed.formtemplate":"itp","vnd.shana.informed.interchange":"iif","vnd.shana.informed.package":"ipk","vnd.simtech-mindmapper":["twd","twds"],"vnd.smart.teacher":"teacher","vnd.solent.sdkm+xml":["sdkm","sdkd"],"vnd.spotfire.dxp":"dxp","vnd.spotfire.sfs":"sfs","vnd.stepmania.package":"smzip","vnd.stepmania.stepchart":"sm","vnd.sus-calendar":["sus","susp"],"vnd.svd":"svd","vnd.syncml+xml":"xsm","vnd.syncml.dm+wbxml":"bdm","vnd.syncml.dm+xml":"xdm","vnd.tao.intent-module-archive":"tao","vnd.tcpdump.pcap":["pcap","cap","dmp"],"vnd.tmobile-livetv":"tmo","vnd.trid.tpt":"tpt","vnd.triscape.mxs":"mxs","vnd.trueapp":"tra","vnd.ufdl":["ufd","ufdl"],"vnd.uiq.theme":"utz","vnd.umajin":"umj","vnd.unity":"unityweb","vnd.uoml+xml":"uoml","vnd.vcx":"vcx","vnd.visionary":"vis","vnd.vsf":"vsf","vnd.webturbo":"wtb","vnd.wolfram.player":"nbp","vnd.wqd":"wqd","vnd.wt.stf":"stf","vnd.xara":"xar","vnd.xfdl":"xfdl","vnd.yamaha.hv-dic":"hvd","vnd.yamaha.hv-script":"hvs","vnd.yamaha.hv-voice":"hvp","vnd.yamaha.openscoreformat":"osf","vnd.yamaha.openscoreformat.osfpvg+xml":"osfpvg","vnd.yamaha.smaf-audio":"saf","vnd.yamaha.smaf-phrase":"spf","vnd.yellowriver-custom-menu":"cmp","vnd.zul":["zir","zirz"],"vnd.zzazz.deck+xml":"zaz","voicexml+xml":"vxml",widget:"wgt",winhlp:"hlp","wsdl+xml":"wsdl","wspolicy+xml":"wspolicy","x-ace-compressed":"ace","x-authorware-bin":["aab","x32","u32","vox"],"x-authorware-map":"aam","x-authorware-seg":"aas","x-blorb":["blb","blorb"],"x-bzip":"bz","x-bzip2":["bz2","boz"],"x-cfs-compressed":"cfs","x-chat":"chat","x-conference":"nsc","x-dgc-compressed":"dgc","x-dtbncx+xml":"ncx","x-dtbook+xml":"dtb","x-dtbresource+xml":"res","x-eva":"eva","x-font-bdf":"bdf","x-font-ghostscript":"gsf","x-font-linux-psf":"psf","x-font-pcf":"pcf","x-font-snf":"snf","x-font-ttf":["ttf","ttc"],"x-font-type1":["pfa","pfb","pfm","afm"],"x-freearc":"arc","x-gca-compressed":"gca","x-glulx":"ulx","x-gramps-xml":"gramps","x-install-instructions":"install","x-lzh-compressed":["lzh","lha"],"x-mie":"mie","x-mobipocket-ebook":["prc","mobi"],"x-ms-application":"application","x-ms-shortcut":"lnk","x-ms-xbap":"xbap","x-msbinder":"obd","x-mscardfile":"crd","x-msclip":"clp","application/x-ms-installer":"msi","x-msmediaview":["mvb","m13","m14"],"x-msmetafile":["wmf","wmz","emf","emz"],"x-msmoney":"mny","x-mspublisher":"pub","x-msschedule":"scd","x-msterminal":"trm","x-mswrite":"wri","x-nzb":"nzb","x-pkcs12":["p12","pfx"],"x-pkcs7-certificates":["p7b","spc"],"x-research-info-systems":"ris","x-silverlight-app":"xap","x-sql":"sql","x-stuffitx":"sitx","x-subrip":"srt","x-t3vm-image":"t3","x-tex-tfm":"tfm","x-tgif":"obj","x-xliff+xml":"xlf","x-xz":"xz","x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"xaml+xml":"xaml","xcap-diff+xml":"xdf","xenc+xml":"xenc","xml-dtd":"dtd","xop+xml":"xop","xproc+xml":"xpl","xslt+xml":"xslt","xv+xml":["mxml","xhvml","xvml","xvm"],yang:"yang","yin+xml":"yin",envoy:"evy",fractals:"fif","internet-property-stream":"acx",olescript:"axs","vnd.ms-outlook":"msg","vnd.ms-pkicertstore":"sst","x-compress":"z","x-perfmon":["pma","pmc","pmr","pmw"],"ynd.ms-pkipko":"pko",gzip:["gz","tgz"],"smil+xml":["smi","smil"],"vnd.debian.binary-package":["deb","udeb"],"vnd.hzn-3d-crossword":"x3d","vnd.sqlite3":["db","sqlite","sqlite3","db-wal","sqlite-wal","db-shm","sqlite-shm"],"vnd.wap.sic":"sic","vnd.wap.slc":"slc","x-krita":["kra","krz"],"x-perl":["pm","pl"],yaml:["yaml","yml"]},audio:{amr:"amr","amr-wb":"awb",annodex:"axa",basic:["au","snd"],flac:"flac",midi:["mid","midi","kar","rmi"],mpeg:["mpga","mpega","mp3","m4a","mp2a","m2a","m3a"],mpegurl:"m3u",ogg:["oga","ogg","spx"],"prs.sid":"sid","x-aiff":"aifc","x-gsm":"gsm","x-ms-wma":"wma","x-ms-wax":"wax","x-pn-realaudio":"ram","x-realaudio":"ra","x-sd2":"sd2",adpcm:"adp",mp4:"mp4a",s3m:"s3m",silk:"sil","vnd.dece.audio":["uva","uvva"],"vnd.digital-winds":"eol","vnd.dra":"dra","vnd.dts":"dts","vnd.dts.hd":"dtshd","vnd.lucent.voice":"lvp","vnd.ms-playready.media.pya":"pya","vnd.nuera.ecelp4800":"ecelp4800","vnd.nuera.ecelp7470":"ecelp7470","vnd.nuera.ecelp9600":"ecelp9600","vnd.rip":"rip",webm:"weba","x-caf":"caf","x-matroska":"mka","x-pn-realaudio-plugin":"rmp",xm:"xm",aac:"aac",aiff:["aiff","aif","aff"],opus:"opus",wav:"wav"},chemical:{"x-alchemy":"alc","x-cache":["cac","cache"],"x-cache-csf":"csf","x-cactvs-binary":["cbin","cascii","ctab"],"x-cdx":"cdx","x-chem3d":"c3d","x-cif":"cif","x-cmdf":"cmdf","x-cml":"cml","x-compass":"cpa","x-crossfire":"bsd","x-csml":["csml","csm"],"x-ctx":"ctx","x-cxf":["cxf","cef"],"x-embl-dl-nucleotide":["emb","embl"],"x-gamess-input":["inp","gam","gamin"],"x-gaussian-checkpoint":["fch","fchk"],"x-gaussian-cube":"cub","x-gaussian-input":["gau","gjc","gjf"],"x-gaussian-log":"gal","x-gcg8-sequence":"gcg","x-genbank":"gen","x-hin":"hin","x-isostar":["istr","ist"],"x-jcamp-dx":["jdx","dx"],"x-kinemage":"kin","x-macmolecule":"mcm","x-macromodel-input":"mmod","x-mdl-molfile":"mol","x-mdl-rdfile":"rd","x-mdl-rxnfile":"rxn","x-mdl-sdfile":"sd","x-mdl-tgf":"tgf","x-mmcif":"mcif","x-mol2":"mol2","x-molconn-Z":"b","x-mopac-graph":"gpt","x-mopac-input":["mop","mopcrt","zmt"],"x-mopac-out":"moo","x-ncbi-asn1":"asn","x-ncbi-asn1-ascii":["prt","ent"],"x-ncbi-asn1-binary":"val","x-rosdal":"ros","x-swissprot":"sw","x-vamas-iso14976":"vms","x-vmd":"vmd","x-xtel":"xtel","x-xyz":"xyz"},font:{otf:"otf",woff:"woff",woff2:"woff2"},image:{gif:"gif",ief:"ief",jpeg:["jpeg","jpg","jpe","jfif","jfif-tbnl","jif"],pcx:"pcx",png:"png","svg+xml":["svg","svgz"],tiff:["tiff","tif"],"vnd.djvu":["djvu","djv"],"vnd.wap.wbmp":"wbmp","x-canon-cr2":"cr2","x-canon-crw":"crw","x-cmu-raster":"ras","x-coreldraw":"cdr","x-coreldrawpattern":"pat","x-coreldrawtemplate":"cdt","x-corelphotopaint":"cpt","x-epson-erf":"erf","x-icon":"ico","x-jg":"art","x-jng":"jng","x-nikon-nef":"nef","x-olympus-orf":"orf","x-portable-anymap":"pnm","x-portable-bitmap":"pbm","x-portable-graymap":"pgm","x-portable-pixmap":"ppm","x-rgb":"rgb","x-xbitmap":"xbm","x-xpixmap":"xpm","x-xwindowdump":"xwd",bmp:"bmp",cgm:"cgm",g3fax:"g3",ktx:"ktx","prs.btif":"btif",sgi:"sgi","vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"vnd.dwg":"dwg","vnd.dxf":"dxf","vnd.fastbidsheet":"fbs","vnd.fpx":"fpx","vnd.fst":"fst","vnd.fujixerox.edmics-mmr":"mmr","vnd.fujixerox.edmics-rlc":"rlc","vnd.ms-modi":"mdi","vnd.ms-photo":"wdp","vnd.net-fpx":"npx","vnd.xiff":"xif",webp:"webp","x-3ds":"3ds","x-cmx":"cmx","x-freehand":["fh","fhc","fh4","fh5","fh7"],"x-pict":["pic","pct"],"x-tga":"tga","cis-cod":"cod",avif:"avifs",heic:["heif","heic"],pjpeg:["pjpg"],"vnd.adobe.photoshop":"psd","x-adobe-dng":"dng","x-fuji-raf":"raf","x-icns":"icns","x-kodak-dcr":"dcr","x-kodak-k25":"k25","x-kodak-kdc":"kdc","x-minolta-mrw":"mrw","x-panasonic-raw":["raw","rw2","rwl"],"x-pentax-pef":["pef","ptx"],"x-sigma-x3f":"x3f","x-sony-arw":"arw","x-sony-sr2":"sr2","x-sony-srf":"srf"},message:{rfc822:["eml","mime","mht","mhtml","nws"]},model:{iges:["igs","iges"],mesh:["msh","mesh","silo"],vrml:["wrl","vrml"],"x3d+vrml":["x3dv","x3dvz"],"x3d+xml":"x3dz","x3d+binary":["x3db","x3dbz"],"vnd.collada+xml":"dae","vnd.dwf":"dwf","vnd.gdl":"gdl","vnd.gtw":"gtw","vnd.mts":"mts","vnd.usdz+zip":"usdz","vnd.vtu":"vtu"},text:{"cache-manifest":["manifest","appcache"],calendar:["ics","icz","ifb"],css:"css",csv:"csv",h323:"323",html:["html","htm","shtml","stm"],iuls:"uls",plain:["txt","text","brf","conf","def","list","log","in","bas","diff","ksh"],richtext:"rtx",scriptlet:["sct","wsc"],texmacs:"tm","tab-separated-values":"tsv","vnd.sun.j2me.app-descriptor":"jad","vnd.wap.wml":"wml","vnd.wap.wmlscript":"wmls","x-bibtex":"bib","x-boo":"boo","x-c++hdr":["h++","hpp","hxx","hh"],"x-c++src":["c++","cpp","cxx","cc"],"x-component":"htc","x-dsrc":"d","x-diff":"patch","x-haskell":"hs","x-java":"java","x-literate-haskell":"lhs","x-moc":"moc","x-pascal":["p","pas","pp","inc"],"x-pcs-gcd":"gcd","x-python":"py","x-scala":"scala","x-setext":"etx","x-tcl":["tcl","tk"],"x-tex":["tex","ltx","sty","cls"],"x-vcalendar":"vcs","x-vcard":"vcf",n3:"n3","prs.lines.tag":"dsc",sgml:["sgml","sgm"],troff:["t","tr","roff","man","me","ms"],turtle:"ttl","uri-list":["uri","uris","urls"],vcard:"vcard","vnd.curl":"curl","vnd.curl.dcurl":"dcurl","vnd.curl.scurl":"scurl","vnd.curl.mcurl":"mcurl","vnd.dvb.subtitle":"sub","vnd.fly":"fly","vnd.fmi.flexstor":"flx","vnd.graphviz":"gv","vnd.in3d.3dml":"3dml","vnd.in3d.spot":"spot","x-asm":["s","asm"],"x-c":["c","h","dic"],"x-fortran":["f","for","f77","f90"],"x-opml":"opml","x-nfo":"nfo","x-sfv":"sfv","x-uuencode":"uu",webviewhtml:"htt",javascript:"js",json:"json",markdown:["md","markdown","mdown","markdn"],"vnd.wap.si":"si","vnd.wap.sl":"sl"},video:{avif:"avif","3gpp":"3gp",annodex:"axv",dl:"dl",dv:["dif","dv"],fli:"fli",gl:"gl",mpeg:["mpeg","mpg","mpe","m1v","m2v","mp2","mpa","mpv2"],mp4:["mp4","mp4v","mpg4"],quicktime:["qt","mov"],ogg:"ogv","vnd.mpegurl":["mxu","m4u"],"x-flv":"flv","x-la-asf":["lsf","lsx"],"x-mng":"mng","x-ms-asf":["asf","asx","asr"],"x-ms-wm":"wm","x-ms-wmv":"wmv","x-ms-wmx":"wmx","x-ms-wvx":"wvx","x-msvideo":"avi","x-sgi-movie":"movie","x-matroska":["mpv","mkv","mk3d","mks"],"3gpp2":"3g2",h261:"h261",h263:"h263",h264:"h264",jpeg:"jpgv",jpm:["jpm","jpgm"],mj2:["mj2","mjp2"],"vnd.dece.hd":["uvh","uvvh"],"vnd.dece.mobile":["uvm","uvvm"],"vnd.dece.pd":["uvp","uvvp"],"vnd.dece.sd":["uvs","uvvs"],"vnd.dece.video":["uvv","uvvv"],"vnd.dvb.file":"dvb","vnd.fvt":"fvt","vnd.ms-playready.media.pyv":"pyv","vnd.uvvu.mp4":["uvu","uvvu"],"vnd.vivo":"viv",webm:"webm","x-f4v":"f4v","x-m4v":"m4v","x-ms-vob":"vob","x-smv":"smv",mp2t:"ts"},"x-conference":{"x-cooltalk":"ice"},"x-world":{"x-vrml":["vrm","flr","wrz","xaf","xof"]}};(()=>{const e={};for(const t of Object.keys(Ir))for(const n of Object.keys(Ir[t])){const r=Ir[t][n];if("string"==typeof r)e[r]=t+"/"+n;else for(let i=0;i<r.length;i++)e[r[i]]=t+"/"+n}})();const Tr=[];for(let e=0;e<256;e++){let t=e;for(let e=0;e<8;e++)1&t?t=t>>>1^3988292384:t>>>=1;Tr[e]=t}class qr{constructor(e){this.crc=e||-1}append(e){let t=0|this.crc;for(let n=0,r=0|e.length;n<r;n++)t=t>>>8^Tr[255&(t^e[n])];this.crc=t}get(){return~this.crc}}class Fr extends TransformStream{constructor(){let e;const t=new qr;super({transform(e,n){t.append(e),n.enqueue(e)},flush(){const n=new Uint8Array(4);new DataView(n.buffer).setUint32(0,t.get()),e.value=n}}),e=this}}const Lr={concat(e,t){if(0===e.length||0===t.length)return e.concat(t);const n=e[e.length-1],r=Lr.getPartial(n);return 32===r?e.concat(t):Lr._shiftRight(t,r,0|n,e.slice(0,e.length-1))},bitLength(e){const t=e.length;if(0===t)return 0;const n=e[t-1];return 32*(t-1)+Lr.getPartial(n)},clamp(e,t){if(32*e.length<t)return e;const n=(e=e.slice(0,Math.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=Lr.partial(t,e[n-1]&2147483648>>t-1,1)),e},partial:(e,t,n)=>32===e?t:(n?0|t:t<<32-e)+1099511627776*e,getPartial:e=>Math.round(e/1099511627776)||32,_shiftRight(e,t,n,r){for(void 0===r&&(r=[]);t>=32;t-=32)r.push(n),n=0;if(0===t)return r.concat(e);for(let i=0;i<e.length;i++)r.push(n|e[i]>>>t),n=e[i]<<32-t;const i=e.length?e[e.length-1]:0,o=Lr.getPartial(i);return r.push(Lr.partial(t+o&31,t+o>32?n:r.pop(),1)),r}},Br={bytes:{fromBits(e){const t=Lr.bitLength(e)/8,n=new Uint8Array(t);let r;for(let i=0;i<t;i++)0==(3&i)&&(r=e[i/4]),n[i]=r>>>24,r<<=8;return n},toBits(e){const t=[];let n,r=0;for(n=0;n<e.length;n++)r=r<<8|e[n],3==(3&n)&&(t.push(r),r=0);return 3&n&&t.push(Lr.partial(8*(3&n),r)),t}}},Or=class{constructor(e){const t=this;t.blockSize=512,t._init=[1732584193,4023233417,2562383102,271733878,3285377520],t._key=[1518500249,1859775393,2400959708,3395469782],e?(t._h=e._h.slice(0),t._buffer=e._buffer.slice(0),t._length=e._length):t.reset()}reset(){const e=this;return e._h=e._init.slice(0),e._buffer=[],e._length=0,e}update(e){const t=this;"string"==typeof e&&(e=Br.utf8String.toBits(e));const n=t._buffer=Lr.concat(t._buffer,e),r=t._length,i=t._length=r+Lr.bitLength(e);if(i>9007199254740991)throw new Error("Cannot hash more than 2^53 - 1 bits");const o=new Uint32Array(n);let a=0;for(let e=t.blockSize+r-(t.blockSize+r&t.blockSize-1);e<=i;e+=t.blockSize)t._block(o.subarray(16*a,16*(a+1))),a+=1;return n.splice(0,16*a),t}finalize(){const e=this;let t=e._buffer;const n=e._h;t=Lr.concat(t,[Lr.partial(1,1)]);for(let e=t.length+2;15&e;e++)t.push(0);for(t.push(Math.floor(e._length/4294967296)),t.push(0|e._length);t.length;)e._block(t.splice(0,16));return e.reset(),n}_f(e,t,n,r){return e<=19?t&n|~t&r:e<=39?t^n^r:e<=59?t&n|t&r|n&r:e<=79?t^n^r:void 0}_S(e,t){return t<<e|t>>>32-e}_block(e){const t=this,n=t._h,r=Array(80);for(let t=0;t<16;t++)r[t]=e[t];let i=n[0],o=n[1],a=n[2],s=n[3],c=n[4];for(let e=0;e<=79;e++){e>=16&&(r[e]=t._S(1,r[e-3]^r[e-8]^r[e-14]^r[e-16]));const n=t._S(5,i)+t._f(e,o,a,s)+c+r[e]+t._key[Math.floor(e/20)]|0;c=s,s=a,a=t._S(30,o),o=i,i=n}n[0]=n[0]+i|0,n[1]=n[1]+o|0,n[2]=n[2]+a|0,n[3]=n[3]+s|0,n[4]=n[4]+c|0}},Mr=class{constructor(e){const t=this;t._tables=[[[],[],[],[],[]],[[],[],[],[],[]]],t._tables[0][0][0]||t._precompute();const n=t._tables[0][4],r=t._tables[1],i=e.length;let o,a,s,c=1;if(4!==i&&6!==i&&8!==i)throw new Error("invalid aes key size");for(t._key=[a=e.slice(0),s=[]],o=i;o<4*i+28;o++){let e=a[o-1];(o%i==0||8===i&&o%i==4)&&(e=n[e>>>24]<<24^n[e>>16&255]<<16^n[e>>8&255]<<8^n[255&e],o%i==0&&(e=e<<8^e>>>24^c<<24,c=c<<1^283*(c>>7))),a[o]=a[o-i]^e}for(let e=0;o;e++,o--){const t=a[3&e?o:o-4];s[e]=o<=4||e<4?t:r[0][n[t>>>24]]^r[1][n[t>>16&255]]^r[2][n[t>>8&255]]^r[3][n[255&t]]}}encrypt(e){return this._crypt(e,0)}decrypt(e){return this._crypt(e,1)}_precompute(){const e=this._tables[0],t=this._tables[1],n=e[4],r=t[4],i=[],o=[];let a,s,c,l;for(let e=0;e<256;e++)o[(i[e]=e<<1^283*(e>>7))^e]=e;for(let u=a=0;!n[u];u^=s||1,a=o[a]||1){let o=a^a<<1^a<<2^a<<3^a<<4;o=o>>8^255&o^99,n[u]=o,r[o]=u,l=i[c=i[s=i[u]]];let d=16843009*l^65537*c^257*s^16843008*u,f=257*i[o]^16843008*o;for(let n=0;n<4;n++)e[n][u]=f=f<<24^f>>>8,t[n][o]=d=d<<24^d>>>8}for(let n=0;n<5;n++)e[n]=e[n].slice(0),t[n]=t[n].slice(0)}_crypt(e,t){if(4!==e.length)throw new Error("invalid aes block size");const n=this._key[t],r=n.length/4-2,i=[0,0,0,0],o=this._tables[t],a=o[0],s=o[1],c=o[2],l=o[3],u=o[4];let d,f,p,h=e[0]^n[0],m=e[t?3:1]^n[1],v=e[2]^n[2],_=e[t?1:3]^n[3],g=4;for(let e=0;e<r;e++)d=a[h>>>24]^s[m>>16&255]^c[v>>8&255]^l[255&_]^n[g],f=a[m>>>24]^s[v>>16&255]^c[_>>8&255]^l[255&h]^n[g+1],p=a[v>>>24]^s[_>>16&255]^c[h>>8&255]^l[255&m]^n[g+2],_=a[_>>>24]^s[h>>16&255]^c[m>>8&255]^l[255&v]^n[g+3],g+=4,h=d,m=f,v=p;for(let e=0;e<4;e++)i[t?3&-e:e]=u[h>>>24]<<24^u[m>>16&255]<<16^u[v>>8&255]<<8^u[255&_]^n[g++],d=h,h=m,m=v,v=_,_=d;return i}},Pr={getRandomValues(e){const t=new Uint32Array(e.buffer),n=e=>{let t=987654321;const n=4294967295;return function(){return t=36969*(65535&t)+(t>>16)&n,(((t<<16)+(e=18e3*(65535&e)+(e>>16)&n)&n)/4294967296+.5)*(Math.random()>.5?1:-1)}};for(let r,i=0;i<e.length;i+=4){const e=n(4294967296*(r||Math.random()));r=987654071*e(),t[i/4]=4294967296*e()|0}return e}},Nr=class{constructor(e,t){this._prf=e,this._initIv=t,this._iv=t}reset(){this._iv=this._initIv}update(e){return this.calculate(this._prf,e,this._iv)}incWord(e){if(255==(e>>24&255)){let t=e>>16&255,n=e>>8&255,r=255&e;255===t?(t=0,255===n?(n=0,255===r?r=0:++r):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=r}else e+=1<<24;return e}incCounter(e){0===(e[0]=this.incWord(e[0]))&&(e[1]=this.incWord(e[1]))}calculate(e,t,n){let r;if(!(r=t.length))return[];const i=Lr.bitLength(t);for(let i=0;i<r;i+=4){this.incCounter(n);const r=e.encrypt(n);t[i]^=r[0],t[i+1]^=r[1],t[i+2]^=r[2],t[i+3]^=r[3]}return Lr.clamp(t,i)}},Rr={importKey:e=>new Rr.hmacSha1(Br.bytes.toBits(e)),pbkdf2(e,t,n,r){if(n=n||1e4,r<0||n<0)throw new Error("invalid params to pbkdf2");const i=1+(r>>5)<<2;let o,a,s,c,l;const u=new ArrayBuffer(i),d=new DataView(u);let f=0;const p=Lr;for(t=Br.bytes.toBits(t),l=1;f<(i||1);l++){for(o=a=e.encrypt(p.concat(t,[l])),s=1;s<n;s++)for(a=e.encrypt(a),c=0;c<a.length;c++)o[c]^=a[c];for(s=0;f<(i||1)&&s<o.length;s++)d.setInt32(f,o[s]),f+=4}return u.slice(0,r/8)},hmacSha1:class{constructor(e){const t=this,n=t._hash=Or,r=[[],[]];t._baseHash=[new n,new n];const i=t._baseHash[0].blockSize/32;e.length>i&&(e=(new n).update(e).finalize());for(let t=0;t<i;t++)r[0][t]=909522486^e[t],r[1][t]=1549556828^e[t];t._baseHash[0].update(r[0]),t._baseHash[1].update(r[1]),t._resultHash=new n(t._baseHash[0])}reset(){const e=this;e._resultHash=new e._hash(e._baseHash[0]),e._updated=!1}update(e){this._updated=!0,this._resultHash.update(e)}digest(){const e=this,t=e._resultHash.finalize(),n=new e._hash(e._baseHash[1]).update(t).finalize();return e.reset(),n}encrypt(e){if(this._updated)throw new Error("encrypt on already updated hmac called!");return this.update(e),this.digest(e)}}},Vr="undefined"!=typeof crypto&&"function"==typeof crypto.getRandomValues,Hr="Invalid password",Kr="Invalid signature",$r="zipjs-abort-check-password";function Yr(e){return Vr?crypto.getRandomValues(e):Pr.getRandomValues(e)}const Gr=16,Zr={name:"PBKDF2"},Xr=Object.assign({hash:{name:"HMAC"}},Zr),Jr=Object.assign({iterations:1e3,hash:{name:"SHA-1"}},Zr),Qr=["deriveBits"],ei=[8,12,16],ti=[16,24,32],ni=10,ri=[0,0,0,0],ii="undefined",oi="function",ai=typeof crypto!=ii,si=ai&&crypto.subtle,ci=ai&&typeof si!=ii,li=Br.bytes,ui=Mr,di=Nr,fi=Rr.hmacSha1;let pi=ai&&ci&&typeof si.importKey==oi,hi=ai&&ci&&typeof si.deriveBits==oi;class mi extends TransformStream{constructor({password:e,signed:t,encryptionStrength:n,checkPasswordOnly:r}){super({start(){Object.assign(this,{ready:new Promise((e=>this.resolveReady=e)),password:e,signed:t,strength:n-1,pending:new Uint8Array})},async transform(e,t){const n=this,{password:i,strength:o,resolveReady:a,ready:s}=n;i?(await async function(e,t,n,r){const i=await gi(e,t,n,bi(r,0,ei[t])),o=bi(r,ei[t]);if(i[0]!=o[0]||i[1]!=o[1])throw new Error(Hr)}(n,o,i,bi(e,0,ei[o]+2)),e=bi(e,ei[o]+2),r?t.error(new Error($r)):a()):await s;const c=new Uint8Array(e.length-ni-(e.length-ni)%Gr);t.enqueue(_i(n,e,c,0,ni,!0))},async flush(e){const{signed:t,ctr:n,hmac:r,pending:i,ready:o}=this;if(r&&n){await o;const a=bi(i,0,i.length-ni),s=bi(i,i.length-ni);let c=new Uint8Array;if(a.length){const e=yi(li,a);r.update(e);const t=n.update(e);c=xi(li,t)}if(t){const e=bi(xi(li,r.digest()),0,ni);for(let t=0;t<ni;t++)if(e[t]!=s[t])throw new Error(Kr)}e.enqueue(c)}}})}}class vi extends TransformStream{constructor({password:e,encryptionStrength:t}){let n;super({start(){Object.assign(this,{ready:new Promise((e=>this.resolveReady=e)),password:e,strength:t-1,pending:new Uint8Array})},async transform(e,t){const n=this,{password:r,strength:i,resolveReady:o,ready:a}=n;let s=new Uint8Array;r?(s=await async function(e,t,n){const r=Yr(new Uint8Array(ei[t]));return wi(r,await gi(e,t,n,r))}(n,i,r),o()):await a;const c=new Uint8Array(s.length+e.length-e.length%Gr);c.set(s,0),t.enqueue(_i(n,e,c,s.length,0))},async flush(e){const{ctr:t,hmac:r,pending:i,ready:o}=this;if(r&&t){await o;let a=new Uint8Array;if(i.length){const e=t.update(yi(li,i));r.update(e),a=xi(li,e)}n.signature=xi(li,r.digest()).slice(0,ni),e.enqueue(wi(a,n.signature))}}}),n=this}}function _i(e,t,n,r,i,o){const{ctr:a,hmac:s,pending:c}=e,l=t.length-i;let u;for(c.length&&(t=wi(c,t),n=function(e,t){if(t&&t>e.length){const n=e;(e=new Uint8Array(t)).set(n,0)}return e}(n,l-l%Gr)),u=0;u<=l-Gr;u+=Gr){const e=yi(li,bi(t,u,u+Gr));o&&s.update(e);const i=a.update(e);o||s.update(i),n.set(xi(li,i),u+r)}return e.pending=bi(t,u),n}async function gi(e,t,n,r){e.password=null;const i=function(e){if("undefined"==typeof TextEncoder){e=unescape(encodeURIComponent(e));const t=new Uint8Array(e.length);for(let n=0;n<t.length;n++)t[n]=e.charCodeAt(n);return t}return(new TextEncoder).encode(e)}(n),o=await async function(e,t,n,r,i){if(!pi)return Rr.importKey(t);try{return await si.importKey(e,t,n,!1,i)}catch(e){return pi=!1,Rr.importKey(t)}}("raw",i,Xr,0,Qr),a=await async function(e,t,n){if(!hi)return Rr.pbkdf2(t,e.salt,Jr.iterations,n);try{return await si.deriveBits(e,t,n)}catch(r){return hi=!1,Rr.pbkdf2(t,e.salt,Jr.iterations,n)}}(Object.assign({salt:r},Jr),o,8*(2*ti[t]+2)),s=new Uint8Array(a),c=yi(li,bi(s,0,ti[t])),l=yi(li,bi(s,ti[t],2*ti[t])),u=bi(s,2*ti[t]);return Object.assign(e,{keys:{key:c,authentication:l,passwordVerification:u},ctr:new di(new ui(c),Array.from(ri)),hmac:new fi(l)}),u}function wi(e,t){let n=e;return e.length+t.length&&(n=new Uint8Array(e.length+t.length),n.set(e,0),n.set(t,e.length)),n}function bi(e,t,n){return e.subarray(t,n)}function xi(e,t){return e.fromBits(t)}function yi(e,t){return e.toBits(t)}class ki extends TransformStream{constructor({password:e,passwordVerification:t,checkPasswordOnly:n}){super({start(){Object.assign(this,{password:e,passwordVerification:t}),zi(this,e)},transform(e,t){const r=this;if(r.password){const t=Ci(r,e.subarray(0,12));if(r.password=null,t[11]!=r.passwordVerification)throw new Error(Hr);e=e.subarray(12)}n?t.error(new Error($r)):t.enqueue(Ci(r,e))}})}}class Ai extends TransformStream{constructor({password:e,passwordVerification:t}){super({start(){Object.assign(this,{password:e,passwordVerification:t}),zi(this,e)},transform(e,t){const n=this;let r,i;if(n.password){n.password=null;const t=Yr(new Uint8Array(12));t[11]=n.passwordVerification,r=new Uint8Array(e.length+t.length),r.set(Si(n,t),0),i=12}else r=new Uint8Array(e.length),i=0;r.set(Si(n,e),i),t.enqueue(r)}})}}function Ci(e,t){const n=new Uint8Array(t.length);for(let r=0;r<t.length;r++)n[r]=Wi(e)^t[r],Ei(e,n[r]);return n}function Si(e,t){const n=new Uint8Array(t.length);for(let r=0;r<t.length;r++)n[r]=Wi(e)^t[r],Ei(e,t[r]);return n}function zi(e,t){const n=[305419896,591751049,878082192];Object.assign(e,{keys:n,crcKey0:new qr(n[0]),crcKey2:new qr(n[2])});for(let n=0;n<t.length;n++)Ei(e,t.charCodeAt(n))}function Ei(e,t){let[n,r,i]=e.keys;e.crcKey0.append([t]),n=~e.crcKey0.get(),r=Di(Math.imul(Di(r+Ui(n)),134775813)+1),e.crcKey2.append([r>>>24]),i=~e.crcKey2.get(),e.keys=[n,r,i]}function Wi(e){const t=2|e.keys[2];return Ui(Math.imul(t,1^t)>>>8)}function Ui(e){return 255&e}function Di(e){return 4294967295&e}const ji="deflate-raw";class Ii extends TransformStream{constructor(e,{chunkSize:t,CompressionStream:n,CompressionStreamNative:r}){super({});const{compressed:i,encrypted:o,useCompressionStream:a,zipCrypto:s,signed:c,level:l}=e,u=this;let d,f,p=qi(super.readable);o&&!s||!c||(d=new Fr,p=Bi(p,d)),i&&(p=Li(p,a,{level:l,chunkSize:t},r,n)),o&&(s?p=Bi(p,new Ai(e)):(f=new vi(e),p=Bi(p,f))),Fi(u,p,(()=>{let e;o&&!s&&(e=f.signature),o&&!s||!c||(e=new DataView(d.value.buffer).getUint32(0)),u.signature=e}))}}class Ti extends TransformStream{constructor(e,{chunkSize:t,DecompressionStream:n,DecompressionStreamNative:r}){super({});const{zipCrypto:i,encrypted:o,signed:a,signature:s,compressed:c,useCompressionStream:l}=e;let u,d,f=qi(super.readable);o&&(i?f=Bi(f,new ki(e)):(d=new mi(e),f=Bi(f,d))),c&&(f=Li(f,l,{chunkSize:t},r,n)),o&&!i||!a||(u=new Fr,f=Bi(f,u)),Fi(this,f,(()=>{if((!o||i)&&a){const e=new DataView(u.value.buffer);if(s!=e.getUint32(0,!1))throw new Error(Kr)}}))}}function qi(e){return Bi(e,new TransformStream({transform(e,t){e&&e.length&&t.enqueue(e)}}))}function Fi(e,t,n){t=Bi(t,new TransformStream({flush:n})),Object.defineProperty(e,"readable",{get:()=>t})}function Li(e,t,n,r,i){try{e=Bi(e,new(t&&r?r:i)(ji,n))}catch(r){if(!t)throw r;e=Bi(e,new i(ji,n))}return e}function Bi(e,t){return e.pipeThrough(t)}const Oi="message",Mi="pull",Pi="data",Ni="ack",Ri="close",Vi="inflate";class Hi extends TransformStream{constructor(e,t){super({});const n=this,{codecType:r}=e;let i;r.startsWith("deflate")?i=Ii:r.startsWith(Vi)&&(i=Ti);let o=0;const a=new i(e,t),s=super.readable,c=new TransformStream({transform(e,t){e&&e.length&&(o+=e.length,t.enqueue(e))},flush(){const{signature:e}=a;Object.assign(n,{signature:e,size:o})}});Object.defineProperty(n,"readable",{get:()=>s.pipeThrough(a).pipeThrough(c)})}}const Ki=typeof Worker!=Cr;class $i{constructor(e,{readable:t,writable:n},{options:r,config:i,streamOptions:o,useWebWorkers:a,transferStreams:s,scripts:c},l){const{signal:u}=o;return Object.assign(e,{busy:!0,readable:t.pipeThrough(new Yi(t,o,i),{signal:u}),writable:n,options:Object.assign({},r),scripts:c,transferStreams:s,terminate(){const{worker:t,busy:n}=e;t&&!n&&(t.terminate(),e.interface=null)},onTaskFinished(){e.busy=!1,l(e)}}),(a&&Ki?Xi:Zi)(e,i)}}class Yi extends TransformStream{constructor(e,{onstart:t,onprogress:n,size:r,onend:i},{chunkSize:o}){let a=0;super({start(){t&&Gi(t,r)},async transform(e,t){a+=e.length,n&&await Gi(n,a,r),t.enqueue(e)},flush(){e.size=a,i&&Gi(i,a)}},{highWaterMark:1,size:()=>o})}}async function Gi(e,...t){try{await e(...t)}catch(e){}}function Zi(e,t){return{run:()=>async function({options:e,readable:t,writable:n,onTaskFinished:r},i){const o=new Hi(e,i);try{await t.pipeThrough(o).pipeTo(n,{preventClose:!0,preventAbort:!0});const{signature:e,size:r}=o;return{signature:e,size:r}}finally{r()}}(e,t)}}function Xi(e,{baseURL:t,chunkSize:n}){return e.interface||Object.assign(e,{worker:eo(e.scripts[0],t,e),interface:{run:()=>async function(e,t){let n,r;const i=new Promise(((e,t)=>{n=e,r=t}));Object.assign(e,{reader:null,writer:null,resolveResult:n,rejectResult:r,result:i});const{readable:o,options:a,scripts:s}=e,{writable:c,closed:l}=function(e){const t=e.getWriter();let n;const r=new Promise((e=>n=e));return{writable:new WritableStream({async write(e){await t.ready,await t.write(e)},close(){t.releaseLock(),n()},abort:e=>t.abort(e)}),closed:r}}(e.writable);to({type:"start",scripts:s.slice(1),options:a,config:t,readable:o,writable:c},e)||Object.assign(e,{reader:o.getReader(),writer:c.getWriter()});const u=await i;try{await c.getWriter().close()}catch(e){}return await l,u}(e,{chunkSize:n})}}),e.interface}let Ji=!0,Qi=!0;function eo(e,t,n){const r={type:"module"};let i,o;typeof e==Sr&&(e=e());try{i=new URL(e,t)}catch(t){i=e}if(Ji)try{o=new Worker(i)}catch(e){Ji=!1,o=new Worker(i,r)}else o=new Worker(i,r);return o.addEventListener(Oi,(e=>async function({data:e},t){const{type:n,value:r,messageId:i,result:o,error:a}=e,{reader:s,writer:c,resolveResult:l,rejectResult:u,onTaskFinished:d}=t;try{if(a){const{message:e,stack:t,code:n,name:r}=a,i=new Error(e);Object.assign(i,{stack:t,code:n,name:r}),f(i)}else{if(n==Mi){const{value:e,done:n}=await s.read();to({type:Pi,value:e,done:n,messageId:i},t)}n==Pi&&(await c.ready,await c.write(new Uint8Array(r)),to({type:Ni,messageId:i},t)),n==Ri&&f(null,o)}}catch(a){f(a)}function f(e,t){e?u(e):l(t),c&&c.releaseLock(),d()}}(e,n))),o}function to(e,{worker:t,writer:n,onTaskFinished:r,transferStreams:i}){try{let{value:n,readable:r,writable:o}=e;const a=[];if(n&&(n.byteLength<n.buffer.byteLength?e.value=n.buffer.slice(0,n.byteLength):e.value=n.buffer,a.push(e.value)),i&&Qi?(r&&a.push(r),o&&a.push(o)):e.readable=e.writable=null,a.length)try{return t.postMessage(e,a),!0}catch(n){Qi=!1,e.readable=e.writable=null,t.postMessage(e)}else t.postMessage(e)}catch(e){throw n&&n.releaseLock(),r(),e}}let no=[];const ro=[];let io=0;function oo(e){const{terminateTimeout:t}=e;t&&(clearTimeout(t),e.terminateTimeout=null)}const ao=65536,so="writable";class co{constructor(){this.size=0}init(){this.initialized=!0}}class lo extends co{get readable(){const e=this,{chunkSize:t=ao}=e,n=new ReadableStream({start(){this.chunkOffset=0},async pull(r){const{offset:i=0,size:o,diskNumberStart:a}=n,{chunkOffset:s}=this;r.enqueue(await go(e,i+s,Math.min(t,o-s),a)),s+t>o?r.close():this.chunkOffset+=t}});return n}}class uo extends lo{constructor(e){super(),Object.assign(this,{blob:e,size:e.size})}async readUint8Array(e,t){const n=this,r=e+t,i=e||r<n.size?n.blob.slice(e,r):n.blob;let o=await i.arrayBuffer();return o.byteLength>t&&(o=o.slice(e,r)),new Uint8Array(o)}}class fo extends co{constructor(e){super();const t=new TransformStream,n=[];e&&n.push(["Content-Type",e]),Object.defineProperty(this,so,{get:()=>t.writable}),this.blob=new Response(t.readable,{headers:n}).blob()}getData(){return this.blob}}class po extends fo{constructor(e){super(e),Object.assign(this,{encoding:e,utf8:!e||"utf-8"==e.toLowerCase()})}async getData(){const{encoding:e,utf8:t}=this,n=await super.getData();if(n.text&&t)return n.text();{const t=new FileReader;return new Promise(((r,i)=>{Object.assign(t,{onload:({target:e})=>r(e.result),onerror:()=>i(t.error)}),t.readAsText(n,e)}))}}}class ho extends lo{constructor(e){super(),this.readers=e}async init(){const e=this,{readers:t}=e;e.lastDiskNumber=0,e.lastDiskOffset=0,await Promise.all(t.map((async(n,r)=>{await n.init(),r!=t.length-1&&(e.lastDiskOffset+=n.size),e.size+=n.size}))),super.init()}async readUint8Array(e,t,n=0){const r=this,{readers:i}=this;let o,a=n;-1==a&&(a=i.length-1);let s=e;for(;s>=i[a].size;)s-=i[a].size,a++;const c=i[a],l=c.size;if(s+t<=l)o=await go(c,s,t);else{const i=l-s;o=new Uint8Array(t),o.set(await go(c,s,i)),o.set(await r.readUint8Array(e+i,t-i,n),i)}return r.lastDiskNumber=Math.max(a,r.lastDiskNumber),o}}class mo extends co{constructor(e,t=4294967295){super();const n=this;let r,i,o;Object.assign(n,{diskNumber:0,diskOffset:0,size:0,maxSize:t,availableSize:t});const a=new WritableStream({async write(t){const{availableSize:a}=n;if(o)t.length>=a?(await s(t.slice(0,a)),await c(),n.diskOffset+=r.size,n.diskNumber++,o=null,await this.write(t.slice(a))):await s(t);else{const{value:a,done:s}=await e.next();if(s&&!a)throw new Error("Writer iterator completed too soon");r=a,r.size=0,r.maxSize&&(n.maxSize=r.maxSize),n.availableSize=n.maxSize,await vo(r),i=a.writable,o=i.getWriter(),await this.write(t)}},async close(){await o.ready,await c()}});async function s(e){const t=e.length;t&&(await o.ready,await o.write(e),r.size+=t,n.size+=t,n.availableSize-=t)}async function c(){i.size=r.size,await o.close()}Object.defineProperty(n,so,{get:()=>a})}}async function vo(e,t){e.init&&!e.initialized&&await e.init(t)}function _o(e){return Array.isArray(e)&&(e=new ho(e)),e instanceof ReadableStream&&(e={readable:e}),e}function go(e,t,n,r){return e.readUint8Array(t,n,r)}const wo="\0☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ".split(""),bo=256==wo.length;function xo(e,t){return t&&"cp437"==t.trim().toLowerCase()?function(e){if(bo){let t="";for(let n=0;n<e.length;n++)t+=wo[e[n]];return t}return(new TextDecoder).decode(e)}(e):new TextDecoder(t).decode(e)}const yo="filename",ko="rawFilename",Ao="comment",Co="rawComment",So="uncompressedSize",zo="compressedSize",Eo="offset",Wo="diskNumberStart",Uo="lastModDate",Do="rawLastModDate",jo="lastAccessDate",Io="creationDate",To=[yo,ko,zo,So,Uo,Do,Ao,Co,jo,Io,Eo,Wo,Wo,"internalFileAttribute","externalFileAttribute","msDosCompatible","zip64","directory","bitFlag","encrypted","signature","filenameUTF8","commentUTF8","compressionMethod","version","versionMadeBy","extraField","rawExtraField","extraFieldZip64","extraFieldUnicodePath","extraFieldUnicodeComment","extraFieldAES","extraFieldNTFS","extraFieldExtendedTimestamp"];class qo{constructor(e){To.forEach((t=>this[t]=e[t]))}}const Fo="File format is not recognized",Lo="Compression method not supported",Bo="Split zip file",Oo="utf-8",Mo="cp437",Po=[[So,wr],[zo,wr],[Eo,wr],[Wo,br]],No={[br]:{getValue:Qo,bytes:4},[wr]:{getValue:ea,bytes:8}};class Ro{constructor(e,t={}){Object.assign(this,{reader:_o(e),options:t,config:Ur})}async*getEntriesGenerator(e={}){const t=this;let{reader:n}=t;const{config:r}=t;if(await vo(n),n.size!==Ar&&n.readUint8Array||(n=new uo(await new Response(n.readable).blob()),await vo(n)),n.size<kr)throw new Error(Fo);n.chunkSize=function(e){return Math.max(e.chunkSize,64)}(r);const i=await async function(e,t,n,r,i){const o=new Uint8Array(4);ta(o).setUint32(0,101010256,!0);return await a(22)||await a(Math.min(1048582,n));async function a(t){const r=n-t,i=await go(e,r,t);for(let e=i.length-22;e>=0;e--)if(i[e]==o[0]&&i[e+1]==o[1]&&i[e+2]==o[2]&&i[e+3]==o[3])return{offset:r+e,buffer:i.slice(e,e+22).buffer}}}(n,0,n.size);if(!i)throw 134695760==Qo(ta(await go(n,0,4)))?new Error(Bo):new Error("End of central directory not found");const o=ta(i);let a=Qo(o,12),s=Qo(o,16);const c=i.offset,l=Jo(o,20),u=c+kr+l;let d=Jo(o,4);const f=n.lastDiskNumber||0;let p=Jo(o,6),h=Jo(o,8),m=0,v=0;if(s==wr||a==wr||h==br||p==br){const e=ta(await go(n,i.offset-20,20));if(117853008!=Qo(e,0))throw new Error("End of Zip64 central directory not found");s=ea(e,8);let t=await go(n,s,56,-1),r=ta(t);const o=i.offset-20-56;if(Qo(r,0)!=yr&&s!=o){const e=s;s=o,m=s-e,t=await go(n,s,56,-1),r=ta(t)}if(Qo(r,0)!=yr)throw new Error("End of Zip64 central directory locator not found");d==br&&(d=Qo(r,16)),p==br&&(p=Qo(r,20)),h==br&&(h=ea(r,32)),a==wr&&(a=ea(r,40)),s-=a}if(s>=n.size&&(m=n.size-s-a-kr,s=n.size-a-kr),f!=d)throw new Error(Bo);if(s<0)throw new Error(Fo);let _=0,g=await go(n,s,a,p),w=ta(g);if(a){const e=i.offset-a;if(Qo(w,_)!=xr&&s!=e){const t=s;s=e,m+=s-t,g=await go(n,s,a,p),w=ta(g)}}const b=i.offset-s-(n.lastDiskOffset||0);if(a!=b&&b>=0&&(a=b,g=await go(n,s,a,p),w=ta(g)),s<0||s>=n.size)throw new Error(Fo);const x=Yo(t,e,"filenameEncoding"),y=Yo(t,e,"commentEncoding");for(let i=0;i<h;i++){const o=new Vo(n,r,t.options);if(Qo(w,_)!=xr)throw new Error("Central directory header not found");Ho(o,w,_+6);const a=Boolean(o.bitFlag.languageEncodingFlag),s=_+46,c=s+o.filenameLength,l=c+o.extraFieldLength,u=Jo(w,_+4),d=0==(0&u),f=g.subarray(s,c),p=Jo(w,_+32),b=l+p,k=g.subarray(l,b),A=a,C=a,S=d&&16==(16&Xo(w,_+38)),z=Qo(w,_+42)+m;Object.assign(o,{versionMadeBy:u,msDosCompatible:d,compressedSize:0,uncompressedSize:0,commentLength:p,directory:S,offset:z,diskNumberStart:Jo(w,_+34),internalFileAttribute:Jo(w,_+36),externalFileAttribute:Qo(w,_+38),rawFilename:f,filenameUTF8:A,commentUTF8:C,rawExtraField:g.subarray(c,l)});const[E,W]=await Promise.all([xo(f,A?Oo:x||Mo),xo(k,C?Oo:y||Mo)]);Object.assign(o,{rawComment:k,filename:E,comment:W,directory:S||E.endsWith("/")}),v=Math.max(z,v),await Ko(o,o,w,_+6);const U=new qo(o);U.getData=(e,t)=>o.getData(e,U,t),_=b;const{onprogress:D}=e;if(D)try{await D(i+1,h,new qo(o))}catch(e){}yield U}const k=Yo(t,e,"extractPrependedData"),A=Yo(t,e,"extractAppendedData");return k&&(t.prependedData=v>0?await go(n,0,v):new Uint8Array),t.comment=l?await go(n,c+kr,l):new Uint8Array,A&&(t.appendedData=u<n.size?await go(n,u,n.size-u):new Uint8Array),!0}async getEntries(e={}){const t=[];for await(const n of this.getEntriesGenerator(e))t.push(n);return t}async close(){}}class Vo{constructor(e,t,n){Object.assign(this,{reader:e,config:t,options:n})}async getData(e,t,n={}){const r=this,{reader:i,offset:o,diskNumberStart:a,extraFieldAES:s,compressionMethod:c,config:l,bitFlag:u,signature:d,rawLastModDate:f,uncompressedSize:p,compressedSize:h}=r,m=t.localDirectory={},v=ta(await go(i,o,30,a));let _=Yo(r,n,"password");if(_=_&&_.length&&_,s&&99!=s.originalCompressionMethod)throw new Error(Lo);if(0!=c&&8!=c)throw new Error(Lo);if(67324752!=Qo(v,0))throw new Error("Local file header not found");Ho(m,v,4),m.rawExtraField=m.extraFieldLength?await go(i,o+30+m.filenameLength,m.extraFieldLength,a):new Uint8Array,await Ko(r,m,v,4,!0),Object.assign(t,{lastAccessDate:m.lastAccessDate,creationDate:m.creationDate});const g=r.encrypted&&m.encrypted,w=g&&!s;if(g){if(!w&&s.strength===Ar)throw new Error("Encryption method not supported");if(!_)throw new Error("File contains encrypted entry")}const b=o+30+m.filenameLength+m.extraFieldLength,x=h,y=i.readable;Object.assign(y,{diskNumberStart:a,offset:b,size:x});const k=Yo(r,n,"signal"),A=Yo(r,n,"checkPasswordOnly");A&&(e=new WritableStream),e=function(e){e.writable===Ar&&typeof e.next==Sr&&(e=new mo(e)),e instanceof WritableStream&&(e={writable:e});const{writable:t}=e;return t.size===Ar&&(t.size=0),e instanceof mo||Object.assign(e,{diskNumber:0,diskOffset:0,availableSize:1/0,maxSize:1/0}),e}(e),await vo(e,p);const{writable:C}=e,{onstart:S,onprogress:z,onend:E}=n,W={options:{codecType:Vi,password:_,zipCrypto:w,encryptionStrength:s&&s.strength,signed:Yo(r,n,"checkSignature"),passwordVerification:w&&(u.dataDescriptor?f>>>8&255:d>>>24&255),signature:d,compressed:0!=c,encrypted:g,useWebWorkers:Yo(r,n,"useWebWorkers"),useCompressionStream:Yo(r,n,"useCompressionStream"),transferStreams:Yo(r,n,"transferStreams"),checkPasswordOnly:A},config:l,streamOptions:{signal:k,size:x,onstart:S,onprogress:z,onend:E}};let U=0;try{({outputSize:U}=await async function(e,t){const{options:n,config:r}=t,{transferStreams:i,useWebWorkers:o,useCompressionStream:a,codecType:s,compressed:c,signed:l,encrypted:u}=n,{workerScripts:d,maxWorkers:f,terminateWorkerTimeout:p}=r;t.transferStreams=i||i===Ar;const h=!(c||l||u||t.transferStreams);let m;t.useWebWorkers=!h&&(o||o===Ar&&r.useWebWorkers),t.scripts=t.useWebWorkers&&d?d[s]:[],n.useCompressionStream=a||a===Ar&&r.useCompressionStream;const v=no.find((e=>!e.busy));if(v)oo(v),m=new $i(v,e,t,_);else if(no.length<f){const n={indexWorker:io};io++,no.push(n),m=new $i(n,e,t,_)}else m=await new Promise((n=>ro.push({resolve:n,stream:e,workerOptions:t})));return m.run();function _(e){if(ro.length){const[{resolve:t,stream:n,workerOptions:r}]=ro.splice(0,1);t(new $i(e,n,r,_))}else e.worker?(oo(e),Number.isFinite(p)&&p>=0&&(e.terminateTimeout=setTimeout((()=>{no=no.filter((t=>t!=e)),e.terminate()}),p))):no=no.filter((t=>t!=e))}}({readable:y,writable:C},W))}catch(e){if(!A||e.message!=$r)throw e}finally{const e=Yo(r,n,"preventClose");C.size+=U,e||C.locked||await C.getWriter().close()}return A?void 0:e.getData?e.getData():C}}function Ho(e,t,n){const r=e.rawBitFlag=Jo(t,n+2),i=1==(1&r),o=Qo(t,n+6);Object.assign(e,{encrypted:i,version:Jo(t,n),bitFlag:{level:(6&r)>>1,dataDescriptor:8==(8&r),languageEncodingFlag:2048==(2048&r)},rawLastModDate:o,lastModDate:Go(o),filenameLength:Jo(t,n+22),extraFieldLength:Jo(t,n+24)})}async function Ko(e,t,n,r,i){const{rawExtraField:o}=t,a=t.extraField=new Map,s=ta(new Uint8Array(o));let c=0;try{for(;c<o.length;){const e=Jo(s,c),t=Jo(s,c+2);a.set(e,{type:e,data:o.slice(c+4,c+4+t)}),c+=4+t}}catch(e){}const l=Jo(n,r+4);Object.assign(t,{signature:Qo(n,r+10),uncompressedSize:Qo(n,r+18),compressedSize:Qo(n,r+14)});const u=a.get(1);u&&(function(e,t){t.zip64=!0;const n=ta(e.data),r=Po.filter((([e,n])=>t[e]==n));for(let i=0,o=0;i<r.length;i++){const[a,s]=r[i];if(t[a]==s){const r=No[s];t[a]=e[a]=r.getValue(n,o),o+=r.bytes}else if(e[a])throw new Error("Zip64 extra field not found")}}(u,t),t.extraFieldZip64=u);const d=a.get(28789);d&&(await $o(d,yo,ko,t,e),t.extraFieldUnicodePath=d);const f=a.get(25461);f&&(await $o(f,Ao,Co,t,e),t.extraFieldUnicodeComment=f);const p=a.get(39169);p?(function(e,t,n){const r=ta(e.data),i=Xo(r,4);Object.assign(e,{vendorVersion:Xo(r,0),vendorId:Xo(r,2),strength:i,originalCompressionMethod:n,compressionMethod:Jo(r,5)}),t.compressionMethod=e.compressionMethod}(p,t,l),t.extraFieldAES=p):t.compressionMethod=l;const h=a.get(10);h&&(function(e,t){const n=ta(e.data);let r,i=4;try{for(;i<e.data.length&&!r;){const t=Jo(n,i),o=Jo(n,i+2);1==t&&(r=e.data.slice(i+4,i+4+o)),i+=4+o}}catch(e){}try{if(r&&24==r.length){const n=ta(r),i=n.getBigUint64(0,!0),o=n.getBigUint64(8,!0),a=n.getBigUint64(16,!0);Object.assign(e,{rawLastModDate:i,rawLastAccessDate:o,rawCreationDate:a});const s=Zo(i),c={lastModDate:s,lastAccessDate:Zo(o),creationDate:Zo(a)};Object.assign(e,c),Object.assign(t,c)}}catch(e){}}(h,t),t.extraFieldNTFS=h);const m=a.get(21589);m&&(function(e,t,n){const r=ta(e.data),i=Xo(r,0),o=[],a=[];n?(1==(1&i)&&(o.push(Uo),a.push(Do)),2==(2&i)&&(o.push(jo),a.push("rawLastAccessDate")),4==(4&i)&&(o.push(Io),a.push("rawCreationDate"))):e.data.length>=5&&(o.push(Uo),a.push(Do));let s=1;o.forEach(((n,i)=>{if(e.data.length>=s+4){const o=Qo(r,s);t[n]=e[n]=new Date(1e3*o);const c=a[i];e[c]=o}s+=4}))}(m,t,i),t.extraFieldExtendedTimestamp=m);const v=a.get(6534);v&&(t.extraFieldUSDZ=v)}async function $o(e,t,n,r,i){const o=ta(e.data),a=new qr;a.append(i[n]);const s=ta(new Uint8Array(4));s.setUint32(0,a.get(),!0);const c=Qo(o,1);Object.assign(e,{version:Xo(o,0),[t]:xo(e.data.subarray(5)),valid:!i.bitFlag.languageEncodingFlag&&c==Qo(s,0)}),e.valid&&(r[t]=e[t],r[t+"UTF8"]=!0)}function Yo(e,t,n){return t[n]===Ar?e.options[n]:t[n]}function Go(e){const t=(4294901760&e)>>16,n=65535&e;try{return new Date(1980+((65024&t)>>9),((480&t)>>5)-1,31&t,(63488&n)>>11,(2016&n)>>5,2*(31&n),0)}catch(e){}}function Zo(e){return new Date(Number(e/BigInt(1e4)-BigInt(116444736e5)))}function Xo(e,t){return e.getUint8(t)}function Jo(e,t){return e.getUint16(t,!0)}function Qo(e,t){return e.getUint32(t,!0)}function ea(e,t){return Number(e.getBigUint64(t,!0))}function ta(e){return new DataView(e.buffer)}let na;new Uint8Array([7,0,2,0,65,69,3,0,0]);try{na="file:///home/runner/work/bsc-audio-reviewer/bsc-audio-reviewer/node_modules/@zip.js/zip.js/lib/zip-fs.js"}catch(e){}Dr({baseURL:na}),function(e){const t=()=>URL.createObjectURL(new Blob(['const{Array:e,Object:t,Number:n,Math:r,Error:s,Uint8Array:i,Uint16Array:o,Uint32Array:c,Int32Array:f,Map:a,DataView:l,Promise:u,TextEncoder:w,crypto:h,postMessage:d,TransformStream:p,ReadableStream:y,WritableStream:m,CompressionStream:b,DecompressionStream:g}=self;class k{constructor(e){return class extends p{constructor(t,n){const r=new e(n);super({transform(e,t){t.enqueue(r.append(e))},flush(e){const t=r.flush();t&&e.enqueue(t)}})}}}}const v=[];for(let e=0;256>e;e++){let t=e;for(let e=0;8>e;e++)1&t?t=t>>>1^3988292384:t>>>=1;v[e]=t}class S{constructor(e){this.t=e||-1}append(e){let t=0|this.t;for(let n=0,r=0|e.length;r>n;n++)t=t>>>8^v[255&(t^e[n])];this.t=t}get(){return~this.t}}class z extends p{constructor(){let e;const t=new S;super({transform(e,n){t.append(e),n.enqueue(e)},flush(){const n=new i(4);new l(n.buffer).setUint32(0,t.get()),e.value=n}}),e=this}}const C={concat(e,t){if(0===e.length||0===t.length)return e.concat(t);const n=e[e.length-1],r=C.i(n);return 32===r?e.concat(t):C.o(t,r,0|n,e.slice(0,e.length-1))},l(e){const t=e.length;if(0===t)return 0;const n=e[t-1];return 32*(t-1)+C.i(n)},u(e,t){if(32*e.length<t)return e;const n=(e=e.slice(0,r.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=C.h(t,e[n-1]&2147483648>>t-1,1)),e},h:(e,t,n)=>32===e?t:(n?0|t:t<<32-e)+1099511627776*e,i:e=>r.round(e/1099511627776)||32,o(e,t,n,r){for(void 0===r&&(r=[]);t>=32;t-=32)r.push(n),n=0;if(0===t)return r.concat(e);for(let s=0;s<e.length;s++)r.push(n|e[s]>>>t),n=e[s]<<32-t;const s=e.length?e[e.length-1]:0,i=C.i(s);return r.push(C.h(t+i&31,t+i>32?n:r.pop(),1)),r}},x={p:{m(e){const t=C.l(e)/8,n=new i(t);let r;for(let s=0;t>s;s++)0==(3&s)&&(r=e[s/4]),n[s]=r>>>24,r<<=8;return n},g(e){const t=[];let n,r=0;for(n=0;n<e.length;n++)r=r<<8|e[n],3==(3&n)&&(t.push(r),r=0);return 3&n&&t.push(C.h(8*(3&n),r)),t}}},_=class{constructor(e){const t=this;t.blockSize=512,t.k=[1732584193,4023233417,2562383102,271733878,3285377520],t.v=[1518500249,1859775393,2400959708,3395469782],e?(t.S=e.S.slice(0),t.C=e.C.slice(0),t._=e._):t.reset()}reset(){const e=this;return e.S=e.k.slice(0),e.C=[],e._=0,e}update(e){const t=this;"string"==typeof e&&(e=x.A.g(e));const n=t.C=C.concat(t.C,e),r=t._,i=t._=r+C.l(e);if(i>9007199254740991)throw new s("Cannot hash more than 2^53 - 1 bits");const o=new c(n);let f=0;for(let e=t.blockSize+r-(t.blockSize+r&t.blockSize-1);i>=e;e+=t.blockSize)t.I(o.subarray(16*f,16*(f+1))),f+=1;return n.splice(0,16*f),t}D(){const e=this;let t=e.C;const n=e.S;t=C.concat(t,[C.h(1,1)]);for(let e=t.length+2;15&e;e++)t.push(0);for(t.push(r.floor(e._/4294967296)),t.push(0|e._);t.length;)e.I(t.splice(0,16));return e.reset(),n}V(e,t,n,r){return e>19?e>39?e>59?e>79?void 0:t^n^r:t&n|t&r|n&r:t^n^r:t&n|~t&r}P(e,t){return t<<e|t>>>32-e}I(t){const n=this,s=n.S,i=e(80);for(let e=0;16>e;e++)i[e]=t[e];let o=s[0],c=s[1],f=s[2],a=s[3],l=s[4];for(let e=0;79>=e;e++){16>e||(i[e]=n.P(1,i[e-3]^i[e-8]^i[e-14]^i[e-16]));const t=n.P(5,o)+n.V(e,c,f,a)+l+i[e]+n.v[r.floor(e/20)]|0;l=a,a=f,f=n.P(30,c),c=o,o=t}s[0]=s[0]+o|0,s[1]=s[1]+c|0,s[2]=s[2]+f|0,s[3]=s[3]+a|0,s[4]=s[4]+l|0}},A={getRandomValues(e){const t=new c(e.buffer),n=e=>{let t=987654321;const n=4294967295;return()=>(t=36969*(65535&t)+(t>>16)&n,(((t<<16)+(e=18e3*(65535&e)+(e>>16)&n)&n)/4294967296+.5)*(r.random()>.5?1:-1))};for(let s,i=0;i<e.length;i+=4){const e=n(4294967296*(s||r.random()));s=987654071*e(),t[i/4]=4294967296*e()|0}return e}},I={importKey:e=>new I.R(x.p.g(e)),B(e,t,n,r){if(n=n||1e4,0>r||0>n)throw new s("invalid params to pbkdf2");const i=1+(r>>5)<<2;let o,c,f,a,u;const w=new ArrayBuffer(i),h=new l(w);let d=0;const p=C;for(t=x.p.g(t),u=1;(i||1)>d;u++){for(o=c=e.encrypt(p.concat(t,[u])),f=1;n>f;f++)for(c=e.encrypt(c),a=0;a<c.length;a++)o[a]^=c[a];for(f=0;(i||1)>d&&f<o.length;f++)h.setInt32(d,o[f]),d+=4}return w.slice(0,r/8)},R:class{constructor(e){const t=this,n=t.M=_,r=[[],[]];t.U=[new n,new n];const s=t.U[0].blockSize/32;e.length>s&&(e=(new n).update(e).D());for(let t=0;s>t;t++)r[0][t]=909522486^e[t],r[1][t]=1549556828^e[t];t.U[0].update(r[0]),t.U[1].update(r[1]),t.K=new n(t.U[0])}reset(){const e=this;e.K=new e.M(e.U[0]),e.N=!1}update(e){this.N=!0,this.K.update(e)}digest(){const e=this,t=e.K.D(),n=new e.M(e.U[1]).update(t).D();return e.reset(),n}encrypt(e){if(this.N)throw new s("encrypt on already updated hmac called!");return this.update(e),this.digest(e)}}},D=void 0!==h&&"function"==typeof h.getRandomValues,V="Invalid password",P="Invalid signature",R="zipjs-abort-check-password";function B(e){return D?h.getRandomValues(e):A.getRandomValues(e)}const E=16,M={name:"PBKDF2"},U=t.assign({hash:{name:"HMAC"}},M),K=t.assign({iterations:1e3,hash:{name:"SHA-1"}},M),N=["deriveBits"],O=[8,12,16],T=[16,24,32],W=10,j=[0,0,0,0],H="undefined",L="function",F=typeof h!=H,q=F&&h.subtle,G=F&&typeof q!=H,J=x.p,Q=class{constructor(e){const t=this;t.O=[[[],[],[],[],[]],[[],[],[],[],[]]],t.O[0][0][0]||t.T();const n=t.O[0][4],r=t.O[1],i=e.length;let o,c,f,a=1;if(4!==i&&6!==i&&8!==i)throw new s("invalid aes key size");for(t.v=[c=e.slice(0),f=[]],o=i;4*i+28>o;o++){let e=c[o-1];(o%i==0||8===i&&o%i==4)&&(e=n[e>>>24]<<24^n[e>>16&255]<<16^n[e>>8&255]<<8^n[255&e],o%i==0&&(e=e<<8^e>>>24^a<<24,a=a<<1^283*(a>>7))),c[o]=c[o-i]^e}for(let e=0;o;e++,o--){const t=c[3&e?o:o-4];f[e]=4>=o||4>e?t:r[0][n[t>>>24]]^r[1][n[t>>16&255]]^r[2][n[t>>8&255]]^r[3][n[255&t]]}}encrypt(e){return this.W(e,0)}decrypt(e){return this.W(e,1)}T(){const e=this.O[0],t=this.O[1],n=e[4],r=t[4],s=[],i=[];let o,c,f,a;for(let e=0;256>e;e++)i[(s[e]=e<<1^283*(e>>7))^e]=e;for(let l=o=0;!n[l];l^=c||1,o=i[o]||1){let i=o^o<<1^o<<2^o<<3^o<<4;i=i>>8^255&i^99,n[l]=i,r[i]=l,a=s[f=s[c=s[l]]];let u=16843009*a^65537*f^257*c^16843008*l,w=257*s[i]^16843008*i;for(let n=0;4>n;n++)e[n][l]=w=w<<24^w>>>8,t[n][i]=u=u<<24^u>>>8}for(let n=0;5>n;n++)e[n]=e[n].slice(0),t[n]=t[n].slice(0)}W(e,t){if(4!==e.length)throw new s("invalid aes block size");const n=this.v[t],r=n.length/4-2,i=[0,0,0,0],o=this.O[t],c=o[0],f=o[1],a=o[2],l=o[3],u=o[4];let w,h,d,p=e[0]^n[0],y=e[t?3:1]^n[1],m=e[2]^n[2],b=e[t?1:3]^n[3],g=4;for(let e=0;r>e;e++)w=c[p>>>24]^f[y>>16&255]^a[m>>8&255]^l[255&b]^n[g],h=c[y>>>24]^f[m>>16&255]^a[b>>8&255]^l[255&p]^n[g+1],d=c[m>>>24]^f[b>>16&255]^a[p>>8&255]^l[255&y]^n[g+2],b=c[b>>>24]^f[p>>16&255]^a[y>>8&255]^l[255&m]^n[g+3],g+=4,p=w,y=h,m=d;for(let e=0;4>e;e++)i[t?3&-e:e]=u[p>>>24]<<24^u[y>>16&255]<<16^u[m>>8&255]<<8^u[255&b]^n[g++],w=p,p=y,y=m,m=b,b=w;return i}},X=class{constructor(e,t){this.j=e,this.H=t,this.L=t}reset(){this.L=this.H}update(e){return this.F(this.j,e,this.L)}q(e){if(255==(e>>24&255)){let t=e>>16&255,n=e>>8&255,r=255&e;255===t?(t=0,255===n?(n=0,255===r?r=0:++r):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=r}else e+=1<<24;return e}G(e){0===(e[0]=this.q(e[0]))&&(e[1]=this.q(e[1]))}F(e,t,n){let r;if(!(r=t.length))return[];const s=C.l(t);for(let s=0;r>s;s+=4){this.G(n);const r=e.encrypt(n);t[s]^=r[0],t[s+1]^=r[1],t[s+2]^=r[2],t[s+3]^=r[3]}return C.u(t,s)}},Y=I.R;let Z=F&&G&&typeof q.importKey==L,$=F&&G&&typeof q.deriveBits==L;class ee extends p{constructor({password:e,signed:n,encryptionStrength:r,checkPasswordOnly:o}){super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:e,signed:n,X:r-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:c,J:f,ready:a}=n;r?(await(async(e,t,n,r)=>{const i=await re(e,t,n,ie(r,0,O[t])),o=ie(r,O[t]);if(i[0]!=o[0]||i[1]!=o[1])throw new s(V)})(n,c,r,ie(e,0,O[c]+2)),e=ie(e,O[c]+2),o?t.error(new s(R)):f()):await a;const l=new i(e.length-W-(e.length-W)%E);t.enqueue(ne(n,e,l,0,W,!0))},async flush(e){const{signed:t,Y:n,Z:r,pending:o,ready:c}=this;if(r&&n){await c;const f=ie(o,0,o.length-W),a=ie(o,o.length-W);let l=new i;if(f.length){const e=ce(J,f);r.update(e);const t=n.update(e);l=oe(J,t)}if(t){const e=ie(oe(J,r.digest()),0,W);for(let t=0;W>t;t++)if(e[t]!=a[t])throw new s(P)}e.enqueue(l)}}})}}class te extends p{constructor({password:e,encryptionStrength:n}){let r;super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:e,X:n-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:s,J:o,ready:c}=n;let f=new i;r?(f=await(async(e,t,n)=>{const r=B(new i(O[t]));return se(r,await re(e,t,n,r))})(n,s,r),o()):await c;const a=new i(f.length+e.length-e.length%E);a.set(f,0),t.enqueue(ne(n,e,a,f.length,0))},async flush(e){const{Y:t,Z:n,pending:s,ready:o}=this;if(n&&t){await o;let c=new i;if(s.length){const e=t.update(ce(J,s));n.update(e),c=oe(J,e)}r.signature=oe(J,n.digest()).slice(0,W),e.enqueue(se(c,r.signature))}}}),r=this}}function ne(e,t,n,r,s,o){const{Y:c,Z:f,pending:a}=e,l=t.length-s;let u;for(a.length&&(t=se(a,t),n=((e,t)=>{if(t&&t>e.length){const n=e;(e=new i(t)).set(n,0)}return e})(n,l-l%E)),u=0;l-E>=u;u+=E){const e=ce(J,ie(t,u,u+E));o&&f.update(e);const s=c.update(e);o||f.update(s),n.set(oe(J,s),u+r)}return e.pending=ie(t,u),n}async function re(n,r,s,o){n.password=null;const c=(e=>{if(void 0===w){const t=new i((e=unescape(encodeURIComponent(e))).length);for(let n=0;n<t.length;n++)t[n]=e.charCodeAt(n);return t}return(new w).encode(e)})(s),f=await(async(e,t,n,r,s)=>{if(!Z)return I.importKey(t);try{return await q.importKey("raw",t,n,!1,s)}catch(e){return Z=!1,I.importKey(t)}})(0,c,U,0,N),a=await(async(e,t,n)=>{if(!$)return I.B(t,e.salt,K.iterations,n);try{return await q.deriveBits(e,t,n)}catch(r){return $=!1,I.B(t,e.salt,K.iterations,n)}})(t.assign({salt:o},K),f,8*(2*T[r]+2)),l=new i(a),u=ce(J,ie(l,0,T[r])),h=ce(J,ie(l,T[r],2*T[r])),d=ie(l,2*T[r]);return t.assign(n,{keys:{key:u,$:h,passwordVerification:d},Y:new X(new Q(u),e.from(j)),Z:new Y(h)}),d}function se(e,t){let n=e;return e.length+t.length&&(n=new i(e.length+t.length),n.set(e,0),n.set(t,e.length)),n}function ie(e,t,n){return e.subarray(t,n)}function oe(e,t){return e.m(t)}function ce(e,t){return e.g(t)}class fe extends p{constructor({password:e,passwordVerification:n,checkPasswordOnly:r}){super({start(){t.assign(this,{password:e,passwordVerification:n}),we(this,e)},transform(e,t){const n=this;if(n.password){const t=le(n,e.subarray(0,12));if(n.password=null,t[11]!=n.passwordVerification)throw new s(V);e=e.subarray(12)}r?t.error(new s(R)):t.enqueue(le(n,e))}})}}class ae extends p{constructor({password:e,passwordVerification:n}){super({start(){t.assign(this,{password:e,passwordVerification:n}),we(this,e)},transform(e,t){const n=this;let r,s;if(n.password){n.password=null;const t=B(new i(12));t[11]=n.passwordVerification,r=new i(e.length+t.length),r.set(ue(n,t),0),s=12}else r=new i(e.length),s=0;r.set(ue(n,e),s),t.enqueue(r)}})}}function le(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=de(e)^t[r],he(e,n[r]);return n}function ue(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=de(e)^t[r],he(e,t[r]);return n}function we(e,n){const r=[305419896,591751049,878082192];t.assign(e,{keys:r,ee:new S(r[0]),te:new S(r[2])});for(let t=0;t<n.length;t++)he(e,n.charCodeAt(t))}function he(e,t){let[n,s,i]=e.keys;e.ee.append([t]),n=~e.ee.get(),s=ye(r.imul(ye(s+pe(n)),134775813)+1),e.te.append([s>>>24]),i=~e.te.get(),e.keys=[n,s,i]}function de(e){const t=2|e.keys[2];return pe(r.imul(t,1^t)>>>8)}function pe(e){return 255&e}function ye(e){return 4294967295&e}const me="deflate-raw";class be extends p{constructor(e,{chunkSize:t,CompressionStream:n,CompressionStreamNative:r}){super({});const{compressed:s,encrypted:i,useCompressionStream:o,zipCrypto:c,signed:f,level:a}=e,u=this;let w,h,d=ke(super.readable);i&&!c||!f||(w=new z,d=ze(d,w)),s&&(d=Se(d,o,{level:a,chunkSize:t},r,n)),i&&(c?d=ze(d,new ae(e)):(h=new te(e),d=ze(d,h))),ve(u,d,(()=>{let e;i&&!c&&(e=h.signature),i&&!c||!f||(e=new l(w.value.buffer).getUint32(0)),u.signature=e}))}}class ge extends p{constructor(e,{chunkSize:t,DecompressionStream:n,DecompressionStreamNative:r}){super({});const{zipCrypto:i,encrypted:o,signed:c,signature:f,compressed:a,useCompressionStream:u}=e;let w,h,d=ke(super.readable);o&&(i?d=ze(d,new fe(e)):(h=new ee(e),d=ze(d,h))),a&&(d=Se(d,u,{chunkSize:t},r,n)),o&&!i||!c||(w=new z,d=ze(d,w)),ve(this,d,(()=>{if((!o||i)&&c){const e=new l(w.value.buffer);if(f!=e.getUint32(0,!1))throw new s(P)}}))}}function ke(e){return ze(e,new p({transform(e,t){e&&e.length&&t.enqueue(e)}}))}function ve(e,n,r){n=ze(n,new p({flush:r})),t.defineProperty(e,"readable",{get:()=>n})}function Se(e,t,n,r,s){try{e=ze(e,new(t&&r?r:s)(me,n))}catch(r){if(!t)throw r;e=ze(e,new s(me,n))}return e}function ze(e,t){return e.pipeThrough(t)}const Ce="data";class xe extends p{constructor(e,n){super({});const r=this,{codecType:s}=e;let i;s.startsWith("deflate")?i=be:s.startsWith("inflate")&&(i=ge);let o=0;const c=new i(e,n),f=super.readable,a=new p({transform(e,t){e&&e.length&&(o+=e.length,t.enqueue(e))},flush(){const{signature:e}=c;t.assign(r,{signature:e,size:o})}});t.defineProperty(r,"readable",{get:()=>f.pipeThrough(c).pipeThrough(a)})}}const _e=new a,Ae=new a;let Ie=0;async function De(e){try{const{options:t,scripts:r,config:s}=e;r&&r.length&&importScripts.apply(void 0,r),self.initCodec&&self.initCodec(),s.CompressionStreamNative=self.CompressionStream,s.DecompressionStreamNative=self.DecompressionStream,self.Deflate&&(s.CompressionStream=new k(self.Deflate)),self.Inflate&&(s.DecompressionStream=new k(self.Inflate));const i={highWaterMark:1,size:()=>s.chunkSize},o=e.readable||new y({async pull(e){const t=new u((e=>_e.set(Ie,e)));Ve({type:"pull",messageId:Ie}),Ie=(Ie+1)%n.MAX_SAFE_INTEGER;const{value:r,done:s}=await t;e.enqueue(r),s&&e.close()}},i),c=e.writable||new m({async write(e){let t;const r=new u((e=>t=e));Ae.set(Ie,t),Ve({type:Ce,value:e,messageId:Ie}),Ie=(Ie+1)%n.MAX_SAFE_INTEGER,await r}},i),f=new xe(t,s);await o.pipeThrough(f).pipeTo(c,{preventClose:!0,preventAbort:!0});try{await c.getWriter().close()}catch(e){}const{signature:a,size:l}=f;Ve({type:"close",result:{signature:a,size:l}})}catch(e){Pe(e)}}function Ve(e){let{value:t}=e;if(t)if(t.length)try{t=new i(t),e.value=t.buffer,d(e,[e.value])}catch(t){d(e)}else d(e);else d(e)}function Pe(e=new s("Unknown error")){const{message:t,stack:n,code:r,name:i}=e;d({error:{message:t,stack:n,code:r,name:i}})}addEventListener("message",(({data:e})=>{const{type:t,messageId:n,value:r,done:s}=e;try{if("start"==t&&De(e),t==Ce){const e=_e.get(n);_e.delete(n),e({value:new i(r),done:s})}if("ack"==t){const e=Ae.get(n);Ae.delete(n),e()}}catch(e){Pe(e)}}));const Re=-2;function Be(t){return Ee(t.map((([t,n])=>new e(t).fill(n,0,t))))}function Ee(t){return t.reduce(((t,n)=>t.concat(e.isArray(n)?Ee(n):n)),[])}const Me=[0,1,2,3].concat(...Be([[2,4],[2,5],[4,6],[4,7],[8,8],[8,9],[16,10],[16,11],[32,12],[32,13],[64,14],[64,15],[2,0],[1,16],[1,17],[2,18],[2,19],[4,20],[4,21],[8,22],[8,23],[16,24],[16,25],[32,26],[32,27],[64,28],[64,29]]));function Ue(){const e=this;function t(e,t){let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}e.ne=n=>{const s=e.re,i=e.ie.se,o=e.ie.oe;let c,f,a,l=-1;for(n.ce=0,n.fe=573,c=0;o>c;c++)0!==s[2*c]?(n.ae[++n.ce]=l=c,n.le[c]=0):s[2*c+1]=0;for(;2>n.ce;)a=n.ae[++n.ce]=2>l?++l:0,s[2*a]=1,n.le[a]=0,n.ue--,i&&(n.we-=i[2*a+1]);for(e.he=l,c=r.floor(n.ce/2);c>=1;c--)n.de(s,c);a=o;do{c=n.ae[1],n.ae[1]=n.ae[n.ce--],n.de(s,1),f=n.ae[1],n.ae[--n.fe]=c,n.ae[--n.fe]=f,s[2*a]=s[2*c]+s[2*f],n.le[a]=r.max(n.le[c],n.le[f])+1,s[2*c+1]=s[2*f+1]=a,n.ae[1]=a++,n.de(s,1)}while(n.ce>=2);n.ae[--n.fe]=n.ae[1],(t=>{const n=e.re,r=e.ie.se,s=e.ie.pe,i=e.ie.ye,o=e.ie.me;let c,f,a,l,u,w,h=0;for(l=0;15>=l;l++)t.be[l]=0;for(n[2*t.ae[t.fe]+1]=0,c=t.fe+1;573>c;c++)f=t.ae[c],l=n[2*n[2*f+1]+1]+1,l>o&&(l=o,h++),n[2*f+1]=l,f>e.he||(t.be[l]++,u=0,i>f||(u=s[f-i]),w=n[2*f],t.ue+=w*(l+u),r&&(t.we+=w*(r[2*f+1]+u)));if(0!==h){do{for(l=o-1;0===t.be[l];)l--;t.be[l]--,t.be[l+1]+=2,t.be[o]--,h-=2}while(h>0);for(l=o;0!==l;l--)for(f=t.be[l];0!==f;)a=t.ae[--c],a>e.he||(n[2*a+1]!=l&&(t.ue+=(l-n[2*a+1])*n[2*a],n[2*a+1]=l),f--)}})(n),((e,n,r)=>{const s=[];let i,o,c,f=0;for(i=1;15>=i;i++)s[i]=f=f+r[i-1]<<1;for(o=0;n>=o;o++)c=e[2*o+1],0!==c&&(e[2*o]=t(s[c]++,c))})(s,e.he,n.be)}}function Ke(e,t,n,r,s){const i=this;i.se=e,i.pe=t,i.ye=n,i.oe=r,i.me=s}Ue.ge=[0,1,2,3,4,5,6,7].concat(...Be([[2,8],[2,9],[2,10],[2,11],[4,12],[4,13],[4,14],[4,15],[8,16],[8,17],[8,18],[8,19],[16,20],[16,21],[16,22],[16,23],[32,24],[32,25],[32,26],[31,27],[1,28]])),Ue.ke=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],Ue.ve=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],Ue.Se=e=>256>e?Me[e]:Me[256+(e>>>7)],Ue.ze=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],Ue.Ce=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],Ue.xe=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],Ue._e=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];const Ne=Be([[144,8],[112,9],[24,7],[8,8]]);Ke.Ae=Ee([12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,19,275,147,403,83,339,211,467,51,307,179,435,115,371,243,499,11,267,139,395,75,331,203,459,43,299,171,427,107,363,235,491,27,283,155,411,91,347,219,475,59,315,187,443,123,379,251,507,7,263,135,391,71,327,199,455,39,295,167,423,103,359,231,487,23,279,151,407,87,343,215,471,55,311,183,439,119,375,247,503,15,271,143,399,79,335,207,463,47,303,175,431,111,367,239,495,31,287,159,415,95,351,223,479,63,319,191,447,127,383,255,511,0,64,32,96,16,80,48,112,8,72,40,104,24,88,56,120,4,68,36,100,20,84,52,116,3,131,67,195,35,163,99,227].map(((e,t)=>[e,Ne[t]])));const Oe=Be([[30,5]]);function Te(e,t,n,r,s){const i=this;i.Ie=e,i.De=t,i.Ve=n,i.Pe=r,i.Re=s}Ke.Be=Ee([0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,30,1,17,9,25,5,21,13,29,3,19,11,27,7,23].map(((e,t)=>[e,Oe[t]]))),Ke.Ee=new Ke(Ke.Ae,Ue.ze,257,286,15),Ke.Me=new Ke(Ke.Be,Ue.Ce,0,30,15),Ke.Ue=new Ke(null,Ue.xe,0,19,7);const We=[new Te(0,0,0,0,0),new Te(4,4,8,4,1),new Te(4,5,16,8,1),new Te(4,6,32,32,1),new Te(4,4,16,16,2),new Te(8,16,32,32,2),new Te(8,16,128,128,2),new Te(8,32,128,256,2),new Te(32,128,258,1024,2),new Te(32,258,258,4096,2)],je=["need dictionary","stream end","","","stream error","data error","","buffer error","",""],He=113,Le=666,Fe=262;function qe(e,t,n,r){const s=e[2*t],i=e[2*n];return i>s||s==i&&r[t]<=r[n]}function Ge(){const e=this;let t,n,s,c,f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z,C,x,_,A,I,D,V,P,R,B,E,M,U;const K=new Ue,N=new Ue,O=new Ue;let T,W,j,H,L,F;function q(){let t;for(t=0;286>t;t++)E[2*t]=0;for(t=0;30>t;t++)M[2*t]=0;for(t=0;19>t;t++)U[2*t]=0;E[512]=1,e.ue=e.we=0,W=j=0}function G(e,t){let n,r=-1,s=e[1],i=0,o=7,c=4;0===s&&(o=138,c=3),e[2*(t+1)+1]=65535;for(let f=0;t>=f;f++)n=s,s=e[2*(f+1)+1],++i<o&&n==s||(c>i?U[2*n]+=i:0!==n?(n!=r&&U[2*n]++,U[32]++):i>10?U[36]++:U[34]++,i=0,r=n,0===s?(o=138,c=3):n==s?(o=6,c=3):(o=7,c=4))}function J(t){e.Ke[e.pending++]=t}function Q(e){J(255&e),J(e>>>8&255)}function X(e,t){let n;const r=t;F>16-r?(n=e,L|=n<<F&65535,Q(L),L=n>>>16-F,F+=r-16):(L|=e<<F&65535,F+=r)}function Y(e,t){const n=2*e;X(65535&t[n],65535&t[n+1])}function Z(e,t){let n,r,s=-1,i=e[1],o=0,c=7,f=4;for(0===i&&(c=138,f=3),n=0;t>=n;n++)if(r=i,i=e[2*(n+1)+1],++o>=c||r!=i){if(f>o)do{Y(r,U)}while(0!=--o);else 0!==r?(r!=s&&(Y(r,U),o--),Y(16,U),X(o-3,2)):o>10?(Y(18,U),X(o-11,7)):(Y(17,U),X(o-3,3));o=0,s=r,0===i?(c=138,f=3):r==i?(c=6,f=3):(c=7,f=4)}}function $(){16==F?(Q(L),L=0,F=0):8>F||(J(255&L),L>>>=8,F-=8)}function ee(t,n){let s,i,o;if(e.Ne[W]=t,e.Oe[W]=255&n,W++,0===t?E[2*n]++:(j++,t--,E[2*(Ue.ge[n]+256+1)]++,M[2*Ue.Se(t)]++),0==(8191&W)&&V>2){for(s=8*W,i=C-k,o=0;30>o;o++)s+=M[2*o]*(5+Ue.Ce[o]);if(s>>>=3,j<r.floor(W/2)&&s<r.floor(i/2))return!0}return W==T-1}function te(t,n){let r,s,i,o,c=0;if(0!==W)do{r=e.Ne[c],s=e.Oe[c],c++,0===r?Y(s,t):(i=Ue.ge[s],Y(i+256+1,t),o=Ue.ze[i],0!==o&&(s-=Ue.ke[i],X(s,o)),r--,i=Ue.Se(r),Y(i,n),o=Ue.Ce[i],0!==o&&(r-=Ue.ve[i],X(r,o)))}while(W>c);Y(256,t),H=t[513]}function ne(){F>8?Q(L):F>0&&J(255&L),L=0,F=0}function re(t,n,r){X(0+(r?1:0),3),((t,n)=>{ne(),H=8,Q(n),Q(~n),e.Ke.set(u.subarray(t,t+n),e.pending),e.pending+=n})(t,n)}function se(n){((t,n,r)=>{let s,i,o=0;V>0?(K.ne(e),N.ne(e),o=(()=>{let t;for(G(E,K.he),G(M,N.he),O.ne(e),t=18;t>=3&&0===U[2*Ue._e[t]+1];t--);return e.ue+=14+3*(t+1),t})(),s=e.ue+3+7>>>3,i=e.we+3+7>>>3,i>s||(s=i)):s=i=n+5,n+4>s||-1==t?i==s?(X(2+(r?1:0),3),te(Ke.Ae,Ke.Be)):(X(4+(r?1:0),3),((e,t,n)=>{let r;for(X(e-257,5),X(t-1,5),X(n-4,4),r=0;n>r;r++)X(U[2*Ue._e[r]+1],3);Z(E,e-1),Z(M,t-1)})(K.he+1,N.he+1,o+1),te(E,M)):re(t,n,r),q(),r&&ne()})(0>k?-1:k,C-k,n),k=C,t.Te()}function ie(){let e,n,r,s;do{if(s=w-_-C,0===s&&0===C&&0===_)s=f;else if(-1==s)s--;else if(C>=f+f-Fe){u.set(u.subarray(f,f+f),0),x-=f,C-=f,k-=f,e=y,r=e;do{n=65535&d[--r],d[r]=f>n?0:n-f}while(0!=--e);e=f,r=e;do{n=65535&h[--r],h[r]=f>n?0:n-f}while(0!=--e);s+=f}if(0===t.We)return;e=t.je(u,C+_,s),_+=e,3>_||(p=255&u[C],p=(p<<g^255&u[C+1])&b)}while(Fe>_&&0!==t.We)}function oe(e){let t,n,r=I,s=C,i=A;const o=C>f-Fe?C-(f-Fe):0;let c=B;const a=l,w=C+258;let d=u[s+i-1],p=u[s+i];R>A||(r>>=2),c>_&&(c=_);do{if(t=e,u[t+i]==p&&u[t+i-1]==d&&u[t]==u[s]&&u[++t]==u[s+1]){s+=2,t++;do{}while(u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&w>s);if(n=258-(w-s),s=w-258,n>i){if(x=e,i=n,n>=c)break;d=u[s+i-1],p=u[s+i]}}}while((e=65535&h[e&a])>o&&0!=--r);return i>_?_:i}e.le=[],e.be=[],e.ae=[],E=[],M=[],U=[],e.de=(t,n)=>{const r=e.ae,s=r[n];let i=n<<1;for(;i<=e.ce&&(i<e.ce&&qe(t,r[i+1],r[i],e.le)&&i++,!qe(t,s,r[i],e.le));)r[n]=r[i],n=i,i<<=1;r[n]=s},e.He=(t,S,x,W,j,G)=>(W||(W=8),j||(j=8),G||(G=0),t.Le=null,-1==S&&(S=6),1>j||j>9||8!=W||9>x||x>15||0>S||S>9||0>G||G>2?Re:(t.Fe=e,a=x,f=1<<a,l=f-1,m=j+7,y=1<<m,b=y-1,g=r.floor((m+3-1)/3),u=new i(2*f),h=[],d=[],T=1<<j+6,e.Ke=new i(4*T),s=4*T,e.Ne=new o(T),e.Oe=new i(T),V=S,P=G,(t=>(t.qe=t.Ge=0,t.Le=null,e.pending=0,e.Je=0,n=He,c=0,K.re=E,K.ie=Ke.Ee,N.re=M,N.ie=Ke.Me,O.re=U,O.ie=Ke.Ue,L=0,F=0,H=8,q(),(()=>{w=2*f,d[y-1]=0;for(let e=0;y-1>e;e++)d[e]=0;D=We[V].De,R=We[V].Ie,B=We[V].Ve,I=We[V].Pe,C=0,k=0,_=0,v=A=2,z=0,p=0})(),0))(t))),e.Qe=()=>42!=n&&n!=He&&n!=Le?Re:(e.Oe=null,e.Ne=null,e.Ke=null,d=null,h=null,u=null,e.Fe=null,n==He?-3:0),e.Xe=(e,t,n)=>{let r=0;return-1==t&&(t=6),0>t||t>9||0>n||n>2?Re:(We[V].Re!=We[t].Re&&0!==e.qe&&(r=e.Ye(1)),V!=t&&(V=t,D=We[V].De,R=We[V].Ie,B=We[V].Ve,I=We[V].Pe),P=n,r)},e.Ze=(e,t,r)=>{let s,i=r,o=0;if(!t||42!=n)return Re;if(3>i)return 0;for(i>f-Fe&&(i=f-Fe,o=r-i),u.set(t.subarray(o,o+i),0),C=i,k=i,p=255&u[0],p=(p<<g^255&u[1])&b,s=0;i-3>=s;s++)p=(p<<g^255&u[s+2])&b,h[s&l]=d[p],d[p]=s;return 0},e.Ye=(r,i)=>{let o,w,m,I,R;if(i>4||0>i)return Re;if(!r.$e||!r.et&&0!==r.We||n==Le&&4!=i)return r.Le=je[4],Re;if(0===r.tt)return r.Le=je[7],-5;var B;if(t=r,I=c,c=i,42==n&&(w=8+(a-8<<4)<<8,m=(V-1&255)>>1,m>3&&(m=3),w|=m<<6,0!==C&&(w|=32),w+=31-w%31,n=He,J((B=w)>>8&255),J(255&B)),0!==e.pending){if(t.Te(),0===t.tt)return c=-1,0}else if(0===t.We&&I>=i&&4!=i)return t.Le=je[7],-5;if(n==Le&&0!==t.We)return r.Le=je[7],-5;if(0!==t.We||0!==_||0!=i&&n!=Le){switch(R=-1,We[V].Re){case 0:R=(e=>{let n,r=65535;for(r>s-5&&(r=s-5);;){if(1>=_){if(ie(),0===_&&0==e)return 0;if(0===_)break}if(C+=_,_=0,n=k+r,(0===C||C>=n)&&(_=C-n,C=n,se(!1),0===t.tt))return 0;if(C-k>=f-Fe&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 1:R=(e=>{let n,r=0;for(;;){if(Fe>_){if(ie(),Fe>_&&0==e)return 0;if(0===_)break}if(3>_||(p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C),0===r||(C-r&65535)>f-Fe||2!=P&&(v=oe(r)),3>v)n=ee(0,255&u[C]),_--,C++;else if(n=ee(C-x,v-3),_-=v,v>D||3>_)C+=v,v=0,p=255&u[C],p=(p<<g^255&u[C+1])&b;else{v--;do{C++,p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C}while(0!=--v);C++}if(n&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 2:R=(e=>{let n,r,s=0;for(;;){if(Fe>_){if(ie(),Fe>_&&0==e)return 0;if(0===_)break}if(3>_||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C),A=v,S=x,v=2,0!==s&&D>A&&f-Fe>=(C-s&65535)&&(2!=P&&(v=oe(s)),5>=v&&(1==P||3==v&&C-x>4096)&&(v=2)),3>A||v>A)if(0!==z){if(n=ee(0,255&u[C-1]),n&&se(!1),C++,_--,0===t.tt)return 0}else z=1,C++,_--;else{r=C+_-3,n=ee(C-1-S,A-3),_-=A-1,A-=2;do{++C>r||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C)}while(0!=--A);if(z=0,v=2,C++,n&&(se(!1),0===t.tt))return 0}}return 0!==z&&(n=ee(0,255&u[C-1]),z=0),se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i)}if(2!=R&&3!=R||(n=Le),0==R||2==R)return 0===t.tt&&(c=-1),0;if(1==R){if(1==i)X(2,3),Y(256,Ke.Ae),$(),9>1+H+10-F&&(X(2,3),Y(256,Ke.Ae),$()),H=7;else if(re(0,0,!1),3==i)for(o=0;y>o;o++)d[o]=0;if(t.Te(),0===t.tt)return c=-1,0}}return 4!=i?0:1}}function Je(){const e=this;e.nt=0,e.rt=0,e.We=0,e.qe=0,e.tt=0,e.Ge=0}function Qe(e){const t=new Je,n=(o=e&&e.chunkSize?e.chunkSize:65536)+5*(r.floor(o/16383)+1);var o;const c=new i(n);let f=e?e.level:-1;void 0===f&&(f=-1),t.He(f),t.$e=c,this.append=(e,r)=>{let o,f,a=0,l=0,u=0;const w=[];if(e.length){t.nt=0,t.et=e,t.We=e.length;do{if(t.rt=0,t.tt=n,o=t.Ye(0),0!=o)throw new s("deflating: "+t.Le);t.rt&&(t.rt==n?w.push(new i(c)):w.push(c.subarray(0,t.rt))),u+=t.rt,r&&t.nt>0&&t.nt!=a&&(r(t.nt),a=t.nt)}while(t.We>0||0===t.tt);return w.length>1?(f=new i(u),w.forEach((e=>{f.set(e,l),l+=e.length}))):f=w[0]?new i(w[0]):new i,f}},this.flush=()=>{let e,r,o=0,f=0;const a=[];do{if(t.rt=0,t.tt=n,e=t.Ye(4),1!=e&&0!=e)throw new s("deflating: "+t.Le);n-t.tt>0&&a.push(c.slice(0,t.rt)),f+=t.rt}while(t.We>0||0===t.tt);return t.Qe(),r=new i(f),a.forEach((e=>{r.set(e,o),o+=e.length})),r}}Je.prototype={He(e,t){const n=this;return n.Fe=new Ge,t||(t=15),n.Fe.He(n,e,t)},Ye(e){const t=this;return t.Fe?t.Fe.Ye(t,e):Re},Qe(){const e=this;if(!e.Fe)return Re;const t=e.Fe.Qe();return e.Fe=null,t},Xe(e,t){const n=this;return n.Fe?n.Fe.Xe(n,e,t):Re},Ze(e,t){const n=this;return n.Fe?n.Fe.Ze(n,e,t):Re},je(e,t,n){const r=this;let s=r.We;return s>n&&(s=n),0===s?0:(r.We-=s,e.set(r.et.subarray(r.nt,r.nt+s),t),r.nt+=s,r.qe+=s,s)},Te(){const e=this;let t=e.Fe.pending;t>e.tt&&(t=e.tt),0!==t&&(e.$e.set(e.Fe.Ke.subarray(e.Fe.Je,e.Fe.Je+t),e.rt),e.rt+=t,e.Fe.Je+=t,e.Ge+=t,e.tt-=t,e.Fe.pending-=t,0===e.Fe.pending&&(e.Fe.Je=0))}};const Xe=-2,Ye=-3,Ze=-5,$e=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],et=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],tt=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],nt=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],rt=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],st=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],it=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];function ot(){let e,t,n,r,s,i;function o(e,t,o,c,f,a,l,u,w,h,d){let p,y,m,b,g,k,v,S,z,C,x,_,A,I,D;C=0,g=o;do{n[e[t+C]]++,C++,g--}while(0!==g);if(n[0]==o)return l[0]=-1,u[0]=0,0;for(S=u[0],k=1;15>=k&&0===n[k];k++);for(v=k,k>S&&(S=k),g=15;0!==g&&0===n[g];g--);for(m=g,S>g&&(S=g),u[0]=S,I=1<<k;g>k;k++,I<<=1)if(0>(I-=n[k]))return Ye;if(0>(I-=n[g]))return Ye;for(n[g]+=I,i[1]=k=0,C=1,A=2;0!=--g;)i[A]=k+=n[C],A++,C++;g=0,C=0;do{0!==(k=e[t+C])&&(d[i[k]++]=g),C++}while(++g<o);for(o=i[m],i[0]=g=0,C=0,b=-1,_=-S,s[0]=0,x=0,D=0;m>=v;v++)for(p=n[v];0!=p--;){for(;v>_+S;){if(b++,_+=S,D=m-_,D=D>S?S:D,(y=1<<(k=v-_))>p+1&&(y-=p+1,A=v,D>k))for(;++k<D&&(y<<=1)>n[++A];)y-=n[A];if(D=1<<k,h[0]+D>1440)return Ye;s[b]=x=h[0],h[0]+=D,0!==b?(i[b]=g,r[0]=k,r[1]=S,k=g>>>_-S,r[2]=x-s[b-1]-k,w.set(r,3*(s[b-1]+k))):l[0]=x}for(r[1]=v-_,o>C?d[C]<c?(r[0]=256>d[C]?0:96,r[2]=d[C++]):(r[0]=a[d[C]-c]+16+64,r[2]=f[d[C++]-c]):r[0]=192,y=1<<v-_,k=g>>>_;D>k;k+=y)w.set(r,3*(x+k));for(k=1<<v-1;0!=(g&k);k>>>=1)g^=k;for(g^=k,z=(1<<_)-1;(g&z)!=i[b];)b--,_-=S,z=(1<<_)-1}return 0!==I&&1!=m?Ze:0}function c(o){let c;for(e||(e=[],t=[],n=new f(16),r=[],s=new f(15),i=new f(16)),t.length<o&&(t=[]),c=0;o>c;c++)t[c]=0;for(c=0;16>c;c++)n[c]=0;for(c=0;3>c;c++)r[c]=0;s.set(n.subarray(0,15),0),i.set(n.subarray(0,16),0)}this.st=(n,r,s,i,f)=>{let a;return c(19),e[0]=0,a=o(n,0,19,19,null,null,s,r,i,e,t),a==Ye?f.Le="oversubscribed dynamic bit lengths tree":a!=Ze&&0!==r[0]||(f.Le="incomplete dynamic bit lengths tree",a=Ye),a},this.it=(n,r,s,i,f,a,l,u,w)=>{let h;return c(288),e[0]=0,h=o(s,0,n,257,nt,rt,a,i,u,e,t),0!=h||0===i[0]?(h==Ye?w.Le="oversubscribed literal/length tree":-4!=h&&(w.Le="incomplete literal/length tree",h=Ye),h):(c(288),h=o(s,n,r,0,st,it,l,f,u,e,t),0!=h||0===f[0]&&n>257?(h==Ye?w.Le="oversubscribed distance tree":h==Ze?(w.Le="incomplete distance tree",h=Ye):-4!=h&&(w.Le="empty distance tree with lengths",h=Ye),h):0)}}function ct(){const e=this;let t,n,r,s,i=0,o=0,c=0,f=0,a=0,l=0,u=0,w=0,h=0,d=0;function p(e,t,n,r,s,i,o,c){let f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z;d=c.nt,p=c.We,w=o.ot,h=o.ct,y=o.write,m=y<o.read?o.read-y-1:o.end-y,b=$e[e],g=$e[t];do{for(;20>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(f=w&b,a=n,l=r,z=3*(l+f),0!==(u=a[z]))for(;;){if(w>>=a[z+1],h-=a[z+1],0!=(16&u)){for(u&=15,k=a[z+2]+(w&$e[u]),w>>=u,h-=u;15>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;for(f=w&g,a=s,l=i,z=3*(l+f),u=a[z];;){if(w>>=a[z+1],h-=a[z+1],0!=(16&u)){for(u&=15;u>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(v=a[z+2]+(w&$e[u]),w>>=u,h-=u,m-=k,v>y){S=y-v;do{S+=o.end}while(0>S);if(u=o.end-S,k>u){if(k-=u,y-S>0&&u>y-S)do{o.lt[y++]=o.lt[S++]}while(0!=--u);else o.lt.set(o.lt.subarray(S,S+u),y),y+=u,S+=u,u=0;S=0}}else S=y-v,y-S>0&&2>y-S?(o.lt[y++]=o.lt[S++],o.lt[y++]=o.lt[S++],k-=2):(o.lt.set(o.lt.subarray(S,S+2),y),y+=2,S+=2,k-=2);if(y-S>0&&k>y-S)do{o.lt[y++]=o.lt[S++]}while(0!=--k);else o.lt.set(o.lt.subarray(S,S+k),y),y+=k,S+=k,k=0;break}if(0!=(64&u))return c.Le="invalid distance code",k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,Ye;f+=a[z+2],f+=w&$e[u],z=3*(l+f),u=a[z]}break}if(0!=(64&u))return 0!=(32&u)?(k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,1):(c.Le="invalid literal/length code",k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,Ye);if(f+=a[z+2],f+=w&$e[u],z=3*(l+f),0===(u=a[z])){w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--;break}}else w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--}while(m>=258&&p>=10);return k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,0}e.init=(e,i,o,c,f,a)=>{t=0,u=e,w=i,r=o,h=c,s=f,d=a,n=null},e.ut=(e,y,m)=>{let b,g,k,v,S,z,C,x=0,_=0,A=0;for(A=y.nt,v=y.We,x=e.ot,_=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S;;)switch(t){case 0:if(z>=258&&v>=10&&(e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,m=p(u,w,r,h,s,d,e,y),A=y.nt,v=y.We,x=e.ot,_=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S,0!=m)){t=1==m?7:9;break}c=u,n=r,o=h,t=1;case 1:for(b=c;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}if(g=3*(o+(x&$e[b])),x>>>=n[g+1],_-=n[g+1],k=n[g],0===k){f=n[g+2],t=6;break}if(0!=(16&k)){a=15&k,i=n[g+2],t=2;break}if(0==(64&k)){c=k,o=g/3+n[g+2];break}if(0!=(32&k)){t=7;break}return t=9,y.Le="invalid literal/length code",m=Ye,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 2:for(b=a;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}i+=x&$e[b],x>>=b,_-=b,c=w,n=s,o=d,t=3;case 3:for(b=c;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}if(g=3*(o+(x&$e[b])),x>>=n[g+1],_-=n[g+1],k=n[g],0!=(16&k)){a=15&k,l=n[g+2],t=4;break}if(0==(64&k)){c=k,o=g/3+n[g+2];break}return t=9,y.Le="invalid distance code",m=Ye,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 4:for(b=a;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}l+=x&$e[b],x>>=b,_-=b,t=5;case 5:for(C=S-l;0>C;)C+=e.end;for(;0!==i;){if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);e.lt[S++]=e.lt[C++],z--,C==e.end&&(C=0),i--}t=0;break;case 6:if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,e.lt[S++]=f,z--,t=0;break;case 7:if(_>7&&(_-=8,v++,A--),e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,e.read!=e.write)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);t=8;case 8:return m=1,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 9:return m=Ye,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);default:return m=Xe,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m)}},e.ht=()=>{}}ot.dt=(e,t,n,r)=>(e[0]=9,t[0]=5,n[0]=et,r[0]=tt,0);const ft=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];function at(e,t){const n=this;let r,s=0,o=0,c=0,a=0;const l=[0],u=[0],w=new ct;let h=0,d=new f(4320);const p=new ot;n.ct=0,n.ot=0,n.lt=new i(t),n.end=t,n.read=0,n.write=0,n.reset=(e,t)=>{t&&(t[0]=0),6==s&&w.ht(e),s=0,n.ct=0,n.ot=0,n.read=n.write=0},n.reset(e,null),n.wt=(e,t)=>{let r,s,i;return s=e.rt,i=n.read,r=(i>n.write?n.end:n.write)-i,r>e.tt&&(r=e.tt),0!==r&&t==Ze&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r,i==n.end&&(i=0,n.write==n.end&&(n.write=0),r=n.write-i,r>e.tt&&(r=e.tt),0!==r&&t==Ze&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r),e.rt=s,n.read=i,t},n.ut=(e,t)=>{let i,f,y,m,b,g,k,v;for(m=e.nt,b=e.We,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g;;){let S,z,C,x,_,A,I,D;switch(s){case 0:for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}switch(i=7&f,h=1&i,i>>>1){case 0:f>>>=3,y-=3,i=7&y,f>>>=i,y-=i,s=1;break;case 1:S=[],z=[],C=[[]],x=[[]],ot.dt(S,z,C,x),w.init(S[0],z[0],C[0],0,x[0],0),f>>>=3,y-=3,s=6;break;case 2:f>>>=3,y-=3,s=3;break;case 3:return f>>>=3,y-=3,s=9,e.Le="invalid block type",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}break;case 1:for(;32>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if((~f>>>16&65535)!=(65535&f))return s=9,e.Le="invalid stored block lengths",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);o=65535&f,f=y=0,s=0!==o?2:0!==h?7:0;break;case 2:if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(0===k&&(g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k&&(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k)))return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(t=0,i=o,i>b&&(i=b),i>k&&(i=k),n.lt.set(e.je(m,i),g),m+=i,b-=i,g+=i,k-=i,0!=(o-=i))break;s=0!==h?7:0;break;case 3:for(;14>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(c=i=16383&f,(31&i)>29||(i>>5&31)>29)return s=9,e.Le="too many length or distance symbols",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(i=258+(31&i)+(i>>5&31),!r||r.length<i)r=[];else for(v=0;i>v;v++)r[v]=0;f>>>=14,y-=14,a=0,s=4;case 4:for(;4+(c>>>10)>a;){for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}r[ft[a++]]=7&f,f>>>=3,y-=3}for(;19>a;)r[ft[a++]]=0;if(l[0]=7,i=p.st(r,l,u,d,e),0!=i)return(t=i)==Ye&&(r=null,s=9),n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);a=0,s=5;case 5:for(;i=c,258+(31&i)+(i>>5&31)>a;){let o,w;for(i=l[0];i>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(i=d[3*(u[0]+(f&$e[i]))+1],w=d[3*(u[0]+(f&$e[i]))+2],16>w)f>>>=i,y-=i,r[a++]=w;else{for(v=18==w?7:w-14,o=18==w?11:3;i+v>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(f>>>=i,y-=i,o+=f&$e[v],f>>>=v,y-=v,v=a,i=c,v+o>258+(31&i)+(i>>5&31)||16==w&&1>v)return r=null,s=9,e.Le="invalid bit length repeat",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w=16==w?r[v-1]:0;do{r[v++]=w}while(0!=--o);a=v}}if(u[0]=-1,_=[],A=[],I=[],D=[],_[0]=9,A[0]=6,i=c,i=p.it(257+(31&i),1+(i>>5&31),r,_,A,I,D,d,e),0!=i)return i==Ye&&(r=null,s=9),t=i,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w.init(_[0],A[0],d,I[0],d,D[0]),s=6;case 6:if(n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,1!=(t=w.ut(n,e,t)))return n.wt(e,t);if(t=0,w.ht(e),m=e.nt,b=e.We,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g,0===h){s=0;break}s=7;case 7:if(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,n.read!=n.write)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);s=8;case 8:return t=1,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);case 9:return t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);default:return t=Xe,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}}},n.ht=e=>{n.reset(e,null),n.lt=null,d=null},n.yt=(e,t,r)=>{n.lt.set(e.subarray(t,t+r),0),n.read=n.write=r},n.bt=()=>1==s?1:0}const lt=13,ut=[0,0,255,255];function wt(){const e=this;function t(e){return e&&e.gt?(e.qe=e.Ge=0,e.Le=null,e.gt.mode=7,e.gt.kt.reset(e,null),0):Xe}e.mode=0,e.method=0,e.vt=[0],e.St=0,e.marker=0,e.zt=0,e.Ct=t=>(e.kt&&e.kt.ht(t),e.kt=null,0),e.xt=(n,r)=>(n.Le=null,e.kt=null,8>r||r>15?(e.Ct(n),Xe):(e.zt=r,n.gt.kt=new at(n,1<<r),t(n),0)),e._t=(e,t)=>{let n,r;if(!e||!e.gt||!e.et)return Xe;const s=e.gt;for(t=4==t?Ze:0,n=Ze;;)switch(s.mode){case 0:if(0===e.We)return n;if(n=t,e.We--,e.qe++,8!=(15&(s.method=e.ft(e.nt++)))){s.mode=lt,e.Le="unknown compression method",s.marker=5;break}if(8+(s.method>>4)>s.zt){s.mode=lt,e.Le="invalid win size",s.marker=5;break}s.mode=1;case 1:if(0===e.We)return n;if(n=t,e.We--,e.qe++,r=255&e.ft(e.nt++),((s.method<<8)+r)%31!=0){s.mode=lt,e.Le="incorrect header check",s.marker=5;break}if(0==(32&r)){s.mode=7;break}s.mode=2;case 2:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St=(255&e.ft(e.nt++))<<24&4278190080,s.mode=3;case 3:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St+=(255&e.ft(e.nt++))<<16&16711680,s.mode=4;case 4:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St+=(255&e.ft(e.nt++))<<8&65280,s.mode=5;case 5:return 0===e.We?n:(n=t,e.We--,e.qe++,s.St+=255&e.ft(e.nt++),s.mode=6,2);case 6:return s.mode=lt,e.Le="need dictionary",s.marker=0,Xe;case 7:if(n=s.kt.ut(e,n),n==Ye){s.mode=lt,s.marker=0;break}if(0==n&&(n=t),1!=n)return n;n=t,s.kt.reset(e,s.vt),s.mode=12;case 12:return e.We=0,1;case lt:return Ye;default:return Xe}},e.At=(e,t,n)=>{let r=0,s=n;if(!e||!e.gt||6!=e.gt.mode)return Xe;const i=e.gt;return s<1<<i.zt||(s=(1<<i.zt)-1,r=n-s),i.kt.yt(t,r,s),i.mode=7,0},e.It=e=>{let n,r,s,i,o;if(!e||!e.gt)return Xe;const c=e.gt;if(c.mode!=lt&&(c.mode=lt,c.marker=0),0===(n=e.We))return Ze;for(r=e.nt,s=c.marker;0!==n&&4>s;)e.ft(r)==ut[s]?s++:s=0!==e.ft(r)?0:4-s,r++,n--;return e.qe+=r-e.nt,e.nt=r,e.We=n,c.marker=s,4!=s?Ye:(i=e.qe,o=e.Ge,t(e),e.qe=i,e.Ge=o,c.mode=7,0)},e.Dt=e=>e&&e.gt&&e.gt.kt?e.gt.kt.bt():Xe}function ht(){}function dt(e){const t=new ht,n=e&&e.chunkSize?r.floor(2*e.chunkSize):131072,o=new i(n);let c=!1;t.xt(),t.$e=o,this.append=(e,r)=>{const f=[];let a,l,u=0,w=0,h=0;if(0!==e.length){t.nt=0,t.et=e,t.We=e.length;do{if(t.rt=0,t.tt=n,0!==t.We||c||(t.nt=0,c=!0),a=t._t(0),c&&a===Ze){if(0!==t.We)throw new s("inflating: bad input")}else if(0!==a&&1!==a)throw new s("inflating: "+t.Le);if((c||1===a)&&t.We===e.length)throw new s("inflating: bad input");t.rt&&(t.rt===n?f.push(new i(o)):f.push(o.subarray(0,t.rt))),h+=t.rt,r&&t.nt>0&&t.nt!=u&&(r(t.nt),u=t.nt)}while(t.We>0||0===t.tt);return f.length>1?(l=new i(h),f.forEach((e=>{l.set(e,w),w+=e.length}))):l=f[0]?new i(f[0]):new i,l}},this.flush=()=>{t.Ct()}}ht.prototype={xt(e){const t=this;return t.gt=new wt,e||(e=15),t.gt.xt(t,e)},_t(e){const t=this;return t.gt?t.gt._t(t,e):Xe},Ct(){const e=this;if(!e.gt)return Xe;const t=e.gt.Ct(e);return e.gt=null,t},It(){const e=this;return e.gt?e.gt.It(e):Xe},At(e,t){const n=this;return n.gt?n.gt.At(n,e,t):Xe},ft(e){return this.et[e]},je(e,t){return this.et.subarray(e,e+t)}},self.initCodec=()=>{self.Deflate=Qe,self.Inflate=dt};\n'],{type:"text/javascript"}));e({workerScripts:{inflate:[t],deflate:[t]}})}(Dr),Dr({Deflate:function(e){const t=new Wn,n=(r=e&&e.chunkSize?e.chunkSize:65536)+5*(Math.floor(r/16383)+1);var r;const i=new Uint8Array(n);let o=e?e.level:-1;void 0===o&&(o=-1),t.deflateInit(o),t.next_out=i,this.append=function(e,r){let o,a,s=0,c=0,l=0;const u=[];if(e.length){t.next_in_index=0,t.next_in=e,t.avail_in=e.length;do{if(t.next_out_index=0,t.avail_out=n,o=t.deflate(0),0!=o)throw new Error("deflating: "+t.msg);t.next_out_index&&(t.next_out_index==n?u.push(new Uint8Array(i)):u.push(i.subarray(0,t.next_out_index))),l+=t.next_out_index,r&&t.next_in_index>0&&t.next_in_index!=s&&(r(t.next_in_index),s=t.next_in_index)}while(t.avail_in>0||0===t.avail_out);return u.length>1?(a=new Uint8Array(l),u.forEach((function(e){a.set(e,c),c+=e.length}))):a=u[0]?new Uint8Array(u[0]):new Uint8Array,a}},this.flush=function(){let e,r,o=0,a=0;const s=[];do{if(t.next_out_index=0,t.avail_out=n,e=t.deflate(4),1!=e&&0!=e)throw new Error("deflating: "+t.msg);n-t.avail_out>0&&s.push(i.slice(0,t.next_out_index)),a+=t.next_out_index}while(t.avail_in>0||0===t.avail_out);return t.deflateEnd(),r=new Uint8Array(a),s.forEach((function(e){r.set(e,o),o+=e.length})),r}},Inflate:function(e){const t=new gr,n=e&&e.chunkSize?Math.floor(2*e.chunkSize):131072,r=new Uint8Array(n);let i=!1;t.inflateInit(),t.next_out=r,this.append=function(e,o){const a=[];let s,c,l=0,u=0,d=0;if(0!==e.length){t.next_in_index=0,t.next_in=e,t.avail_in=e.length;do{if(t.next_out_index=0,t.avail_out=n,0!==t.avail_in||i||(t.next_in_index=0,i=!0),s=t.inflate(0),i&&s===qn){if(0!==t.avail_in)throw new Error("inflating: bad input")}else if(s!==Un&&s!==Dn)throw new Error("inflating: "+t.msg);if((i||s===Dn)&&t.avail_in===e.length)throw new Error("inflating: bad input");t.next_out_index&&(t.next_out_index===n?a.push(new Uint8Array(r)):a.push(r.subarray(0,t.next_out_index))),d+=t.next_out_index,o&&t.next_in_index>0&&t.next_in_index!=l&&(o(t.next_in_index),l=t.next_in_index)}while(t.avail_in>0||0===t.avail_out);return a.length>1?(c=new Uint8Array(d),a.forEach((function(e){c.set(e,u),u+=e.length}))):c=a[0]?new Uint8Array(a[0]):new Uint8Array,c}},this.flush=function(){t.inflateEnd()}}});var ra=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},ia=function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}};function oa(){var e=this,t=te(!1),n=t[0],r=t[1],i=te([]),o=(i[0],i[1]),a=function(t){return ra(e,void 0,void 0,(function(){var e,n=this;return ia(this,(function(r){switch(r.label){case 0:return t.map((function(e){return ra(n,void 0,void 0,(function(){var t,n,r,i,o,a;return ia(this,(function(s){switch(s.label){case 0:return e.filename.endsWith(".mp3")?(r=new fo,[4,e.getData(r)]):[3,3];case 1:return t=s.sent(),n=e.filename.replace(".mp3",""),[4,$t.createFile(n,t)];case 2:return s.sent(),[3,7];case 3:return e.filename.endsWith(".json")?(r=new po,a=(o=JSON).parse,[4,e.getData(r)]):[3,6];case 4:return i=a.apply(o,[s.sent()]),[4,$t.create(i)];case 5:return s.sent(),[3,7];case 6:console.log("Unsupported format for",e.filename),s.label=7;case 7:return[2]}}))}))})),e=Pt,[4,$t.getAll()];case 1:return e.value=r.sent(),[2]}}))}))};return P("div",{onDragOver:function(e){e.preventDefault(),r(!0)},onDragLeave:function(e){e.preventDefault(),r(!1)},onDrop:function(t){t.preventDefault(),r(!1);var n=Array.from(t.dataTransfer.files);o(n),n.forEach((function(t){var n=new FileReader;return n.onloadend=function(){return ra(e,void 0,void 0,(function(){var e;return ia(this,(function(n){switch(n.label){case 0:return[4,new Ro(new uo(t)).getEntries()];case 1:return e=n.sent(),[4,a(e)];case 2:return n.sent(),[2]}}))}))},n.onerror=function(){console.error("There was an issue reading the file.")},n.readAsDataURL(t),n}))},style:{display:"flex",justifyContent:"center",alignItems:"center",height:"50px",width:"300px",border:"1px dotted",backgroundColor:n?"lightgray":"white"},children:"Drag and drop some files here"})}function aa(){var e=this,t=function(){return function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))}(e,void 0,void 0,(function(){var e;return function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}}(this,(function(n){switch(n.label){case 0:return $t.db?[3,1]:(setTimeout(t,1e3),[3,3]);case 1:return e=Pt,[4,$t.getAll()];case 2:e.value=n.sent(),n.label=3;case 3:return[2]}}))}))};return ne((function(){t()}),[Pt]),P(g,{children:[P(oa,{}),P(un,{}),P(an,{}),P(tn,{})]})}(function(n,r,i){var o,a,s,c;t.__&&t.__(n,r),a=(o="function"==typeof i)?null:i&&i.__k||r.__k,s=[],c=[],j(r,n=(!o&&i||r).__k=v(g,null,[n]),a||u,u,void 0!==r.ownerSVGElement,!o&&i?[i]:a?null:r.firstChild?e.call(r.childNodes):null,s,!o&&i?i:a?a.__e:r.firstChild,o,c),I(s,n,c)})(P((function(){return console.log("Hello app"),P(Ie,{children:[P(De,{path:"",component:aa}),P(De,{children:["404: nothing found!",P("br",{}),P("br",{}),P("code",{children:"<Route />"})]})]})}),{}),document.getElementById("root")),function(e,t,n,r){new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))}(void 0,void 0,void 0,(function(){var e,t;return function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}}(this,(function(n){switch(n.label){case 0:if(!("serviceWorker"in navigator))return[3,4];console.log("Try to register service worker"),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,navigator.serviceWorker.register("/js/sw.js",{scope:"/"})];case 2:return(e=n.sent()).installing?console.log("Installation du service worker en cours"):e.waiting?console.log("Service worker installé"):e.active&&console.log("Service worker actif"),[3,4];case 3:return t=n.sent(),console.error("L'enregistrement a échoué : ".concat(t)),[3,4];case 4:return[2]}}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SSxJQUFLLEdBQ3ZKLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssR0FBSSxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLEdBQUksSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLEVBQUcsSUFBSyxHQUFJLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssR0FDL0ksSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxHQUFJLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssR0FBSSxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssRUFBRyxJQUFLLEdBQUksSUFBSyxHQUFJLElBQUssR0FBSSxJQUFLLEdBQUksSUFBSyxHQUM5SSxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssRUFBRyxJQUFLLEdBQUksSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxHQUFJLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxFQUFHLElBQUssR0FBSSxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLEdBQzlJLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssR0FBSSxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLEdBQUksSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLElBQzVJLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssSUFBSyxJQUM1SSxHQUFJLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssRUFBRyxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxJQUFLLElB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QUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsRUFDeEosRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQ2hKLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUNoSixFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FDOUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLElBQUssR0FBSSxFQUM5SSxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFDOUksR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUMvSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQUssRUFDL0ksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQ2pKLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FDL0ksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQzdJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUMvSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFDN0ksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ2hKLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUMvSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFDL0ksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQy9JLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUM5SSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQzlJLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUMvSSxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFDaEosSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ2pKLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUNqSixJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFDaEosSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQ2pKLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUNqSixJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFDL0ksSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUNqSixFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUNqSixJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFDakosR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQ2pKLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUNqSixJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFDakosSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQ2hKLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksRUFBRyxFQUNoSixJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFDaEosSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsS0FDckdDLEdBQVcsQ0FBQyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsS0FBTSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsS0FBTSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsTUFBTyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQ3BKLEtBQU0sR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEtBQU0sR0FBSSxFQUFHLElBQUssSUFBSyxFQUFHLE1BQU8sR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEtBQU0sR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEtBQU0sR0FBSSxFQUFHLEdBQUksR0FBSSxFQUM1SSxNQUFPLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxNQUFPLEdB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LEdBQUdDLEdBQUduQixFQUFFLG1CQUFtQjdGLEdBQUcsS0FBS0EsR0FBR0EsRUFBRXdILEtBQUtULEVBQUVTLElBQUlQLEVBQUUsR0FBR3JELEVBQUUsR0FBR21GLEVBQUVoQyxFQUFFSCxJQUFJZixHQUFHN0YsR0FBRytHLEdBQUdTLElBQUlWLEVBQUVxQixFQUFFLEtBQUssQ0FBQ3ZCLElBQUlJLEdBQUcsRUFBRSxPQUFFLElBQVNELEVBQUVrQyxpQkFBaUJwRCxHQUFHN0YsRUFBRSxDQUFDQSxHQUFHZ0gsRUFBRSxLQUFLRCxFQUFFaEMsV0FBVyxFQUFFc0IsS0FBS1UsRUFBRTJGLFlBQVksS0FBS3pGLEdBQUdwQixHQUFHN0YsRUFBRUEsRUFBRWdILEVBQUVBLEVBQUVXLElBQUlaLEVBQUVoQyxXQUFXYyxFQUFFakMsR0FBR3NGLEVBQUVqQyxFQUFFTCxFQUFFaEQsRUFBRSxFdURxQ2w2UixDQUFPLEdBYlAsV0FFSSxPQURBNlgsUUFBUUMsSUFBSSxhQUNMLEVBQUMzSSxHQUFNLFdBQ1YsRUFBQ1AsR0FBSyxDQUFDNUQsS0FBSyxHQUFHNkQsVUFBVyxLQUMxQixFQUFDRCxHQUFLLGlDQUVGLFdBQ0EsV0FDQSxtQkFBTyxtQkFHbkIsR0FFVyxJQUFLbFAsU0FBU3UyQyxlQUFlLFMsNFJBakNWLGtDLHVuQ0FDdEIsa0JBQW1CeGpCLFdBQW5CLFlBQ0E1YSxRQUFRQyxJQUFJLGtDLGlCQUVhLE8sc0JBQUEsR0FBTTJhLFVBQVV5akIsY0FBY0MsU0FBUyxZQUFhLENBQ3JFQyxNQUFPLE8sY0FETEMsRUFBZSxVQUdKQyxXQUNieitCLFFBQVFDLElBQUksMkNBQ0x1K0IsRUFBYUUsUUFDcEIxK0IsUUFBUUMsSUFBSSwyQkFDTHUrQixFQUFhRyxRQUNwQjMrQixRQUFRQyxJQUFJLHdCLCtCQUdoQkQsUUFBUXpDLE1BQU0sc0NBQStCLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL3NyYy9jb21wb25lbnRzL3doZWVsLnNjc3MiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvcHJlYWN0L2Rpc3QvcHJlYWN0Lm1vZHVsZS5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9wcmVhY3QvanN4LXJ1bnRpbWUvZGlzdC9qc3hSdW50aW1lLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9wcmVhY3QvaG9va3MvZGlzdC9ob29rcy5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvd291dGVyLXByZWFjdC9yZWFjdC1kZXBzLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL3dvdXRlci1wcmVhY3QvcGF0aHMuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvd291dGVyLXByZWFjdC91c2UtbG9jYXRpb24uanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvd291dGVyLXByZWFjdC9tYXRjaGVyLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL3dvdXRlci1wcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHByZWFjdC9zaWduYWxzLWNvcmUvZGlzdC9zaWduYWxzLWNvcmUubW9kdWxlLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0BwcmVhY3Qvc2lnbmFscy9kaXN0L3NpZ25hbHMubW9kdWxlLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vc3JjL2xpYnMvcHVic3ViLnRzeCIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL3NyYy9saWJzL3BsYXllci9wbGF5ZXIudHN4Iiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vc3JjL2xpYnMvcGxheWVyL2F1ZGlvLnRzeCIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL3NyYy9saWJzL3BsYXllci9ob29rcy50c3giLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9zcmMvY29tcG9uZW50cy93aGVlbC5zY3NzPzAxMGYiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL3dyYXAtaWRiLXZhbHVlLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL2lkYi9idWlsZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL3NyYy9lbnRpdGllcy9zb25nLnRzeCIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL3NyYy9jb250cm9sbGVycy9zb25nQ29udHJvbGxlci50c3giLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9zcmMvY29tcG9uZW50cy9XaGVlbC50c3giLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9zcmMvY29tcG9uZW50cy9NdXNpY1BsYXllci50c3giLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9zcmMvY29tcG9uZW50cy9QbGF5ZXIvUHJvZ3Jlc3MvdXRpbHMudHN4Iiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vc3JjL2NvbXBvbmVudHMvUGxheWVyL1Byb2dyZXNzL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL3NyYy9jb21wb25lbnRzL1BsYXllci9WaWRlby9pbmRleC50c3giLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9zcmMvY29tcG9uZW50cy9QbGF5ZXIvaW5kZXgudHN4Iiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vc3JjL2NvbXBvbmVudHMvUGxheWxpc3QvVHJhY2svaW5kZXgudHN4Iiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vc3JjL2NvbXBvbmVudHMvUGxheWxpc3QvaW5kZXgudHN4Iiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL3N0cmVhbXMvY29kZWNzL2RlZmxhdGUuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvbGliL2NvcmUvc3RyZWFtcy9jb2RlY3MvaW5mbGF0ZS5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvY29yZS9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvbGliL2NvcmUvc3RyZWFtcy9zdHJlYW0tYWRhcHRlci5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvY29yZS9jb25maWd1cmF0aW9uLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL3V0aWwvbWltZS10eXBlLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL3N0cmVhbXMvY29kZWNzL2NyYzMyLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL3N0cmVhbXMvY3JjMzItc3RyZWFtLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL3N0cmVhbXMvY29kZWNzL3NqY2wuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvbGliL2NvcmUvc3RyZWFtcy9jb21tb24tY3J5cHRvLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL3N0cmVhbXMvYWVzLWNyeXB0by1zdHJlYW0uanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvbGliL2NvcmUvdXRpbC9lbmNvZGUtdGV4dC5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvY29yZS9zdHJlYW1zL3ppcC1jcnlwdG8tc3RyZWFtLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL3N0cmVhbXMvemlwLWVudHJ5LXN0cmVhbS5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvY29yZS9zdHJlYW1zL2NvZGVjLXN0cmVhbS5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvY29yZS9jb2RlYy13b3JrZXIuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvbGliL2NvcmUvY29kZWMtcG9vbC5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvY29yZS9pby5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvY29yZS91dGlsL2NwNDM3LWRlY29kZS5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvY29yZS91dGlsL2RlY29kZS10ZXh0LmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi9jb3JlL3ppcC1lbnRyeS5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvY29yZS96aXAtcmVhZGVyLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2xpYi96aXAtZnMuanMiLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHppcC5qcy96aXAuanMvbGliL2NvcmUvemlwLXdyaXRlci5qcyIsIndlYnBhY2s6Ly9hdWRpby1yZXZpZXdlci8uL25vZGVfbW9kdWxlcy9AemlwLmpzL3ppcC5qcy9saWIvei13b3JrZXItaW5saW5lLmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vbm9kZV9tb2R1bGVzL0B6aXAuanMvemlwLmpzL2luZGV4LmpzIiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vc3JjL2NvbXBvbmVudHMvU29uZ0xvYWRlci50c3giLCJ3ZWJwYWNrOi8vYXVkaW8tcmV2aWV3ZXIvLi9zcmMvdmlld3MvRGFzaGJvYWQudHN4Iiwid2VicGFjazovL2F1ZGlvLXJldmlld2VyLy4vc3JjL2FwcC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCp7Ym94LXNpemluZzpib3JkZXItYm94fWh0bWx7dXNlci1zZWxlY3Q6bm9uZTtvdmVyZmxvdzpoaWRkZW59aHRtbCBib2R5e2JhY2tncm91bmQtY29sb3I6IzIyMjt3aWR0aDoxMDB2dztoZWlnaHQ6MTAwdmg7b3ZlcmZsb3c6aGlkZGVuO3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmc6MDttYXJnaW46MH0ud2hlZWx7LS14OiAwcHg7LS15OiAwcHg7cG9zaXRpb246YWJzb2x1dGU7dG9wOnZhcigtLXkpO2xlZnQ6dmFyKC0teCk7d2lkdGg6Mzk2cHg7aGVpZ2h0OjM5NnB4O3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgLTEwMCUpO3RyYW5zZm9ybS1vcmlnaW46MCUgMCV9LndoZWVsLm9uIC5hcmN7b3BhY2l0eTouODt0cmFuc2Zvcm06c2NhbGUoMSkgcm90YXRlKHZhcigtLXJvdGF0aW9uKSkgIWltcG9ydGFudDt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMCwgMC41LCAwLjUsIDEuNSl9LndoZWVsIC5hcmN7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cmlnaHQ6MDt3aWR0aDo1MCU7aGVpZ2h0OjUwJTt0cmFuc2Zvcm0tb3JpZ2luOjAlIDEwMCU7YmFja2dyb3VuZC1pbWFnZTpyYWRpYWwtZ3JhZGllbnQoY2lyY2xlIGF0IDAlIDEwMCUsIHRyYW5zcGFyZW50LCB0cmFuc3BhcmVudCAyOS41JSwgdmFyKC0tY29sb3ItYm9yZGVyKSAzMCUsIHZhcigtLWNvbG9yLWJvcmRlcikgMzAuNSUsIHZhcigtLWNvbG9yKSAzMSUsIHZhcigtLWNvbG9yKSA1MCUsIHZhcigtLWNvbG9yLWJvcmRlcikgNTAuMjUlLCB2YXIoLS1jb2xvci1ib3JkZXIpIDUxLjUlLCB0cmFuc3BhcmVudCA1MS43NSUsIHRyYW5zcGFyZW50KTstd2Via2l0LWNsaXAtcGF0aDpwb2x5Z29uKDAgMCwgMCA5OSUsIDk5JSAwKTtjbGlwLXBhdGg6cG9seWdvbigwIDAsIDAgOTklLCA5OSUgMCk7b3BhY2l0eTowO3RyYW5zZm9ybTpzY2FsZSgwKSByb3RhdGUodmFyKC0tcm90YXRpb24pKX0ud2hlZWwgLmFyYyBpe3Bvc2l0aW9uOmFic29sdXRlO3RvcDo0MCU7bGVmdDoxNSU7Zm9udC1zaXplOjJyZW07dHJhbnNmb3JtOnJvdGF0ZShjYWxjKHZhcigtLXJvdGF0aW9uKSAqIC0xKSk7Y29sb3I6cmdiYSgyNTUsMjU1LDI1NSwuOCk7dHJhbnNpdGlvbjpjb2xvciAuM3N9LndoZWVsW2RhdGEtY2hvc2VuPVwiMVwiXSAuYXJjOm50aC1jaGlsZCgxKXtvcGFjaXR5OjE7dHJhbnNmb3JtOnNjYWxlKDEuMSkgcm90YXRlKHZhcigtLXJvdGF0aW9uKSkgIWltcG9ydGFudDtmaWx0ZXI6YnJpZ2h0bmVzcygxNTAlKX0ud2hlZWxbZGF0YS1jaG9zZW49XCIxXCJdIC5hcmM6bnRoLWNoaWxkKDEpIGl7Y29sb3I6cmdiYSgwLDAsMCwuNSl9LndoZWVsIC5hcmM6bnRoLWNoaWxkKDEpey0tcm90YXRpb246IC0yMi41ZGVnOy0tY29sb3I6IGhzbCgxODBkZWcsIDM2JSwgMzYlKTstLWNvbG9yLWJvcmRlcjogaHNsKDE4MGRlZywgMzYlLCAzNiUpfS53aGVlbFtkYXRhLWNob3Nlbj1cIjJcIl0gLmFyYzpudGgtY2hpbGQoMil7b3BhY2l0eToxO3RyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSh2YXIoLS1yb3RhdGlvbikpICFpbXBvcnRhbnQ7ZmlsdGVyOmJyaWdodG5lc3MoMTUwJSl9LndoZWVsW2RhdGEtY2hvc2VuPVwiMlwiXSAuYXJjOm50aC1jaGlsZCgyKSBpe2NvbG9yOnJnYmEoMCwwLDAsLjUpfS53aGVlbCAuYXJjOm50aC1jaGlsZCgyKXstLXJvdGF0aW9uOiAyMi41ZGVnOy0tY29sb3I6IGhzbCgxODBkZWcsIDM2JSwgMzYlKTstLWNvbG9yLWJvcmRlcjogaHNsKDE4MGRlZywgMzYlLCAzNiUpfS53aGVlbFtkYXRhLWNob3Nlbj1cIjNcIl0gLmFyYzpudGgtY2hpbGQoMyl7b3BhY2l0eToxO3RyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSh2YXIoLS1yb3RhdGlvbikpICFpbXBvcnRhbnQ7ZmlsdGVyOmJyaWdodG5lc3MoMTUwJSl9LndoZWVsW2RhdGEtY2hvc2VuPVwiM1wiXSAuYXJjOm50aC1jaGlsZCgzKSBpe2NvbG9yOnJnYmEoMCwwLDAsLjUpfS53aGVlbCAuYXJjOm50aC1jaGlsZCgzKXstLXJvdGF0aW9uOiA2Ny41ZGVnOy0tY29sb3I6IGhzbCgxODBkZWcsIDM2JSwgMzYlKTstLWNvbG9yLWJvcmRlcjogaHNsKDE4MGRlZywgMzYlLCAzNiUpfS53aGVlbFtkYXRhLWNob3Nlbj1cIjRcIl0gLmFyYzpudGgtY2hpbGQoNCl7b3BhY2l0eToxO3RyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSh2YXIoLS1yb3RhdGlvbikpICFpbXBvcnRhbnQ7ZmlsdGVyOmJyaWdodG5lc3MoMTUwJSl9LndoZWVsW2RhdGEtY2hvc2VuPVwiNFwiXSAuYXJjOm50aC1jaGlsZCg0KSBpe2NvbG9yOnJnYmEoMCwwLDAsLjUpfS53aGVlbCAuYXJjOm50aC1jaGlsZCg0KXstLXJvdGF0aW9uOiAxMTIuNWRlZzstLWNvbG9yOiBoc2woMTgwZGVnLCAzNiUsIDM2JSk7LS1jb2xvci1ib3JkZXI6IGhzbCgxODBkZWcsIDM2JSwgMzYlKX0ud2hlZWxbZGF0YS1jaG9zZW49XCI1XCJdIC5hcmM6bnRoLWNoaWxkKDUpe29wYWNpdHk6MTt0cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUodmFyKC0tcm90YXRpb24pKSAhaW1wb3J0YW50O2ZpbHRlcjpicmlnaHRuZXNzKDE1MCUpfS53aGVlbFtkYXRhLWNob3Nlbj1cIjVcIl0gLmFyYzpudGgtY2hpbGQoNSkgaXtjb2xvcjpyZ2JhKDAsMCwwLC41KX0ud2hlZWwgLmFyYzpudGgtY2hpbGQoNSl7LS1yb3RhdGlvbjogMTU3LjVkZWc7LS1jb2xvcjogaHNsKDE4MGRlZywgMzYlLCAzNiUpOy0tY29sb3ItYm9yZGVyOiBoc2woMTgwZGVnLCAzNiUsIDM2JSl9LndoZWVsW2RhdGEtY2hvc2VuPVwiNlwiXSAuYXJjOm50aC1jaGlsZCg2KXtvcGFjaXR5OjE7dHJhbnNmb3JtOnNjYWxlKDEuMSkgcm90YXRlKHZhcigtLXJvdGF0aW9uKSkgIWltcG9ydGFudDtmaWx0ZXI6YnJpZ2h0bmVzcygxNTAlKX0ud2hlZWxbZGF0YS1jaG9zZW49XCI2XCJdIC5hcmM6bnRoLWNoaWxkKDYpIGl7Y29sb3I6cmdiYSgwLDAsMCwuNSl9LndoZWVsIC5hcmM6bnRoLWNoaWxkKDYpey0tcm90YXRpb246IDIwMi41ZGVnOy0tY29sb3I6IGhzbCgxODBkZWcsIDM2JSwgMzYlKTstLWNvbG9yLWJvcmRlcjogaHNsKDE4MGRlZywgMzYlLCAzNiUpfS53aGVlbFtkYXRhLWNob3Nlbj1cIjdcIl0gLmFyYzpudGgtY2hpbGQoNyl7b3BhY2l0eToxO3RyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSh2YXIoLS1yb3RhdGlvbikpICFpbXBvcnRhbnQ7ZmlsdGVyOmJyaWdodG5lc3MoMTUwJSl9LndoZWVsW2RhdGEtY2hvc2VuPVwiN1wiXSAuYXJjOm50aC1jaGlsZCg3KSBpe2NvbG9yOnJnYmEoMCwwLDAsLjUpfS53aGVlbCAuYXJjOm50aC1jaGlsZCg3KXstLXJvdGF0aW9uOiAyNDcuNWRlZzstLWNvbG9yOiBoc2woMTgwZGVnLCAzNiUsIDM2JSk7LS1jb2xvci1ib3JkZXI6IGhzbCgxODBkZWcsIDM2JSwgMzYlKX0ud2hlZWxbZGF0YS1jaG9zZW49XCI4XCJdIC5hcmM6bnRoLWNoaWxkKDgpe29wYWNpdHk6MTt0cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUodmFyKC0tcm90YXRpb24pKSAhaW1wb3J0YW50O2ZpbHRlcjpicmlnaHRuZXNzKDE1MCUpfS53aGVlbFtkYXRhLWNob3Nlbj1cIjhcIl0gLmFyYzpudGgtY2hpbGQoOCkgaXtjb2xvcjpyZ2JhKDAsMCwwLC41KX0ud2hlZWwgLmFyYzpudGgtY2hpbGQoOCl7LS1yb3RhdGlvbjogMjkyLjVkZWc7LS1jb2xvcjogaHNsKDE4MGRlZywgMzYlLCAzNiUpOy0tY29sb3ItYm9yZGVyOiBoc2woMTgwZGVnLCAzNiUsIDM2JSl9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy93aGVlbC5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLEVBQ0kscUJBQUEsQ0FHSixLQUNJLGdCQUFBLENBQ0EsZUFBQSxDQUVBLFVBQ0kscUJBQUEsQ0FDQSxXQUFBLENBQ0EsWUFBQSxDQUNBLGVBQUEsQ0FDQSxpQkFBQSxDQUNBLFNBQUEsQ0FDQSxRQUFBLENBSVIsT0FDSSxRQUFBLENBQ0EsUUFBQSxDQUNBLGlCQUFBLENBQ0EsWUFBQSxDQUNBLGFBQUEsQ0FDQSxXQUFBLENBQ0EsWUFBQSxDQUNBLGdDQUFBLENBQ0Esc0JBQUEsQ0FHSSxlQUNJLFVBQUEsQ0FDQSxxREFBQSxDQUNBLHlEQUFBLENBSVIsWUFDSSxpQkFBQSxDQUNBLEtBQUEsQ0FDQSxPQUFBLENBQ0EsU0FBQSxDQUNBLFVBQUEsQ0FDQSx3QkFBQSxDQUNBLG1RQUFBLENBSUEsNENBQUEsQ0FDQSxvQ0FBQSxDQUNBLFNBQUEsQ0FDQSwwQ0FBQSxDQUVBLGNBQ0ksaUJBQUEsQ0FDQSxPQUFBLENBQ0EsUUFBQSxDQUNBLGNBQUEsQ0FDQSw0Q0FBQSxDQUNBLDBCQUFBLENBQ0Esb0JBQUEsQ0FPSSwwQ0FDSSxTQUFBLENBQ0EsdURBQUEsQ0FDQSx1QkFBQSxDQUVBLDRDQUNJLG9CQUFBLENBT1oseUJBQ0ksb0JBQUEsQ0FHQSw4QkFBQSxDQUNBLHFDQUFBLENBbEJBLDBDQUNJLFNBQUEsQ0FDQSx1REFBQSxDQUNBLHVCQUFBLENBRUEsNENBQ0ksb0JBQUEsQ0FPWix5QkFDSSxtQkFBQSxDQUdBLDhCQUFBLENBQ0EscUNBQUEsQ0FsQkEsMENBQ0ksU0FBQSxDQUNBLHVEQUFBLENBQ0EsdUJBQUEsQ0FFQSw0Q0FDSSxvQkFBQSxDQU9aLHlCQUNJLG1CQUFBLENBR0EsOEJBQUEsQ0FDQSxxQ0FBQSxDQWxCQSwwQ0FDSSxTQUFBLENBQ0EsdURBQUEsQ0FDQSx1QkFBQSxDQUVBLDRDQUNJLG9CQUFBLENBT1oseUJBQ0ksb0JBQUEsQ0FHQSw4QkFBQSxDQUNBLHFDQUFBLENBbEJBLDBDQUNJLFNBQUEsQ0FDQSx1REFBQSxDQUNBLHVCQUFBLENBRUEsNENBQ0ksb0JBQUEsQ0FPWix5QkFDSSxvQkFBQSxDQUdBLDhCQUFBLENBQ0EscUNBQUEsQ0FsQkEsMENBQ0ksU0FBQSxDQUNBLHVEQUFBLENBQ0EsdUJBQUEsQ0FFQSw0Q0FDSSxvQkFBQSxDQU9aLHlCQUNJLG9CQUFBLENBR0EsOEJBQUEsQ0FDQSxxQ0FBQSxDQWxCQSwwQ0FDSSxTQUFBLENBQ0EsdURBQUEsQ0FDQSx1QkFBQSxDQUVBLDRDQUNJLG9CQUFBLENBT1oseUJBQ0ksb0JBQUEsQ0FHQSw4QkFBQSxDQUNBLHFDQUFBLENBbEJBLDBDQUNJLFNBQUEsQ0FDQSx1REFBQSxDQUNBLHVCQUFBLENBRUEsNENBQ0ksb0JBQUEsQ0FPWix5QkFDSSxvQkFBQSxDQUdBLDhCQUFBLENBQ0EscUNBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbmh0bWwge1xcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG5cXG4gICAgYm9keSB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjIyO1xcbiAgICAgICAgd2lkdGg6IDEwMHZ3O1xcbiAgICAgICAgaGVpZ2h0OiAxMDB2aDtcXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICBwYWRkaW5nOiAwO1xcbiAgICAgICAgbWFyZ2luOiAwO1xcbiAgICB9XFxufVxcblxcbi53aGVlbCB7XFxuICAgIC0teDogMHB4O1xcbiAgICAtLXk6IDBweDtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IHZhcigtLXkpO1xcbiAgICBsZWZ0OiB2YXIoLS14KTtcXG4gICAgd2lkdGg6IDM5NnB4O1xcbiAgICBoZWlnaHQ6IDM5NnB4O1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtMTAwJSk7XFxuICAgIHRyYW5zZm9ybS1vcmlnaW46IDAlIDAlO1xcblxcbiAgICAmLm9uIHtcXG4gICAgICAgIC5hcmMge1xcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuODtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpIHJvdGF0ZSh2YXIoLS1yb3RhdGlvbikpICFpbXBvcnRhbnQ7XFxuICAgICAgICAgICAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLCAwLjUsIDAuNSwgMS41KTtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAuYXJjIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIHRvcDogMDtcXG4gICAgICAgIHJpZ2h0OiAwO1xcbiAgICAgICAgd2lkdGg6IDUwJTtcXG4gICAgICAgIGhlaWdodDogNTAlO1xcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogMCUgMTAwJTtcXG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHJhZGlhbC1ncmFkaWVudChjaXJjbGUgYXQgMCUgMTAwJSwgdHJhbnNwYXJlbnQsIHRyYW5zcGFyZW50IDI5LjUlLCB2YXIoLS1jb2xvci1ib3JkZXIpIDMwJSwgdmFyKC0tY29sb3ItYm9yZGVyKSAzMC41JSwgdmFyKC0tY29sb3IpIDMxJSwgdmFyKC0tY29sb3IpIDUwJSwgdmFyKC0tY29sb3ItYm9yZGVyKSA1MC4yNSUsIHZhcigtLWNvbG9yLWJvcmRlcikgNTEuNSUsIHRyYW5zcGFyZW50IDUxLjc1JSwgdHJhbnNwYXJlbnQpO1xcbiAgICAgICAgLy8gdHJhbnNpdGlvbi1wcm9wZXJ0eTogdHJhbnNmb3JtLCBvcGFjaXR5O1xcbiAgICAgICAgLy8gdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4zcztcXG4gICAgICAgIC8vIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40LCAtMC40LCAwLjcsIC0wLjMpO1xcbiAgICAgICAgLXdlYmtpdC1jbGlwLXBhdGg6IHBvbHlnb24oMCAwLCAwIDk5JSwgOTklIDApO1xcbiAgICAgICAgY2xpcC1wYXRoOiBwb2x5Z29uKDAgMCwgMCA5OSUsIDk5JSAwKTtcXG4gICAgICAgIG9wYWNpdHk6IDA7XFxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDApIHJvdGF0ZSh2YXIoLS1yb3RhdGlvbikpO1xcblxcbiAgICAgICAgaSB7XFxuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgICAgIHRvcDogNDAlO1xcbiAgICAgICAgICAgIGxlZnQ6IDE1JTtcXG4gICAgICAgICAgICBmb250LXNpemU6IDJyZW07XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoY2FsYyh2YXIoLS1yb3RhdGlvbikgKiAtMSkpO1xcbiAgICAgICAgICAgIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCk7XFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogY29sb3IgMC4zcztcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIDgge1xcbiAgICAgICAgJltkYXRhLWNob3Nlbj0nI3skaX0nXSB7XFxuICAgICAgICAgICAgLmFyYyB7XFxuICAgICAgICAgICAgICAgICY6bnRoLWNoaWxkKCN7JGl9KSB7XFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpIHJvdGF0ZSh2YXIoLS1yb3RhdGlvbikpICFpbXBvcnRhbnQ7XFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IGJyaWdodG5lc3MoMTUwJSk7XFxuXFxuICAgICAgICAgICAgICAgICAgICBpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgLmFyYyB7XFxuICAgICAgICAgICAgJjpudGgtY2hpbGQoI3skaX0pIHtcXG4gICAgICAgICAgICAgICAgLS1yb3RhdGlvbjogI3stMjIuNSArICgkaSAtIDEpICogNDV9ZGVnO1xcbiAgICAgICAgICAgICAgICAvLyAtLWNvbG9yOiBoc2woY2FsYygjeygkaSAtIDEpICogNDV9ZGVnICsgMGRlZyksIDM2JSwgMzYlKTtcXG4gICAgICAgICAgICAgICAgLy8gLS1jb2xvci1ib3JkZXI6IGhzbChjYWxjKCN7KCRpIC0gMSkgKiA0NX1kZWcgKyA5MGRlZyksIDM2JSwgNjAlKTtcXG4gICAgICAgICAgICAgICAgLS1jb2xvcjogaHNsKDE4MGRlZywgMzYlLCAzNiUpO1xcbiAgICAgICAgICAgICAgICAtLWNvbG9yLWJvcmRlcjogaHNsKDE4MGRlZywgMzYlLCAzNiUpO1xcbiAgICAgICAgICAgICAgICAvLyB0cmFuc2l0aW9uLWRlbGF5OiAjeygkaSAlIDIpICogMC4wMTV9cztcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsInZhciBuLGwsdSx0LGksbyxyLGYsZSxjPXt9LHM9W10sYT0vYWNpdHxleCg/OnN8Z3xufHB8JCl8cnBofGdyaWR8b3dzfG1uY3xudHd8aW5lW2NoXXx6b298Xm9yZHxpdGVyYS9pLGg9QXJyYXkuaXNBcnJheTtmdW5jdGlvbiB2KG4sbCl7Zm9yKHZhciB1IGluIGwpblt1XT1sW3VdO3JldHVybiBufWZ1bmN0aW9uIHAobil7dmFyIGw9bi5wYXJlbnROb2RlO2wmJmwucmVtb3ZlQ2hpbGQobil9ZnVuY3Rpb24geShsLHUsdCl7dmFyIGksbyxyLGY9e307Zm9yKHIgaW4gdSlcImtleVwiPT1yP2k9dVtyXTpcInJlZlwiPT1yP289dVtyXTpmW3JdPXVbcl07aWYoYXJndW1lbnRzLmxlbmd0aD4yJiYoZi5jaGlsZHJlbj1hcmd1bWVudHMubGVuZ3RoPjM/bi5jYWxsKGFyZ3VtZW50cywyKTp0KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBsJiZudWxsIT1sLmRlZmF1bHRQcm9wcylmb3IociBpbiBsLmRlZmF1bHRQcm9wcyl2b2lkIDA9PT1mW3JdJiYoZltyXT1sLmRlZmF1bHRQcm9wc1tyXSk7cmV0dXJuIGQobCxmLGksbyxudWxsKX1mdW5jdGlvbiBkKG4sdCxpLG8scil7dmFyIGY9e3R5cGU6bixwcm9wczp0LGtleTppLHJlZjpvLF9fazpudWxsLF9fOm51bGwsX19iOjAsX19lOm51bGwsX19kOnZvaWQgMCxfX2M6bnVsbCxjb25zdHJ1Y3Rvcjp2b2lkIDAsX192Om51bGw9PXI/Kyt1OnIsX19pOi0xLF9fdTowfTtyZXR1cm4gbnVsbD09ciYmbnVsbCE9bC52bm9kZSYmbC52bm9kZShmKSxmfWZ1bmN0aW9uIF8oKXtyZXR1cm57Y3VycmVudDpudWxsfX1mdW5jdGlvbiBnKG4pe3JldHVybiBuLmNoaWxkcmVufWZ1bmN0aW9uIGIobixsKXt0aGlzLnByb3BzPW4sdGhpcy5jb250ZXh0PWx9ZnVuY3Rpb24gbShuLGwpe2lmKG51bGw9PWwpcmV0dXJuIG4uX18/bShuLl9fLG4uX19pKzEpOm51bGw7Zm9yKHZhciB1O2w8bi5fX2subGVuZ3RoO2wrKylpZihudWxsIT0odT1uLl9fa1tsXSkmJm51bGwhPXUuX19lKXJldHVybiB1Ll9fZTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBuLnR5cGU/bShuKTpudWxsfWZ1bmN0aW9uIGsobil7dmFyIGwsdTtpZihudWxsIT0obj1uLl9fKSYmbnVsbCE9bi5fX2Mpe2ZvcihuLl9fZT1uLl9fYy5iYXNlPW51bGwsbD0wO2w8bi5fX2subGVuZ3RoO2wrKylpZihudWxsIT0odT1uLl9fa1tsXSkmJm51bGwhPXUuX19lKXtuLl9fZT1uLl9fYy5iYXNlPXUuX19lO2JyZWFrfXJldHVybiBrKG4pfX1mdW5jdGlvbiB3KG4peyghbi5fX2QmJihuLl9fZD0hMCkmJmkucHVzaChuKSYmIXguX19yKyt8fG8hPT1sLmRlYm91bmNlUmVuZGVyaW5nKSYmKChvPWwuZGVib3VuY2VSZW5kZXJpbmcpfHxyKSh4KX1mdW5jdGlvbiB4KCl7dmFyIG4sdSx0LG8scixlLGMscyxhO2ZvcihpLnNvcnQoZik7bj1pLnNoaWZ0KCk7KW4uX19kJiYodT1pLmxlbmd0aCxvPXZvaWQgMCxlPShyPSh0PW4pLl9fdikuX19lLHM9W10sYT1bXSwoYz10Ll9fUCkmJigobz12KHt9LHIpKS5fX3Y9ci5fX3YrMSxsLnZub2RlJiZsLnZub2RlKG8pLEwoYyxvLHIsdC5fX24sdm9pZCAwIT09Yy5vd25lclNWR0VsZW1lbnQsMzImci5fX3U/W2VdOm51bGwscyxudWxsPT1lP20ocik6ZSwhISgzMiZyLl9fdSksYSksby5fXy5fX2tbby5fX2ldPW8sTShzLG8sYSksby5fX2UhPWUmJmsobykpLGkubGVuZ3RoPnUmJmkuc29ydChmKSk7eC5fX3I9MH1mdW5jdGlvbiBDKG4sbCx1LHQsaSxvLHIsZixlLGEsaCl7dmFyIHYscCx5LGQsXyxnPXQmJnQuX19rfHxzLGI9bC5sZW5ndGg7Zm9yKHUuX19kPWUsUCh1LGwsZyksZT11Ll9fZCx2PTA7djxiO3YrKyludWxsIT0oeT11Ll9fa1t2XSkmJlwiYm9vbGVhblwiIT10eXBlb2YgeSYmXCJmdW5jdGlvblwiIT10eXBlb2YgeSYmKHA9LTE9PT15Ll9faT9jOmdbeS5fX2ldfHxjLHkuX19pPXYsTChuLHkscCxpLG8scixmLGUsYSxoKSxkPXkuX19lLHkucmVmJiZwLnJlZiE9eS5yZWYmJihwLnJlZiYmeihwLnJlZixudWxsLHkpLGgucHVzaCh5LnJlZix5Ll9fY3x8ZCx5KSksbnVsbD09XyYmbnVsbCE9ZCYmKF89ZCksNjU1MzYmeS5fX3V8fHAuX19rPT09eS5fX2s/ZT1TKHksZSxuKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiB5LnR5cGUmJnZvaWQgMCE9PXkuX19kP2U9eS5fX2Q6ZCYmKGU9ZC5uZXh0U2libGluZykseS5fX2Q9dm9pZCAwLHkuX191Jj0tMTk2NjA5KTt1Ll9fZD1lLHUuX19lPV99ZnVuY3Rpb24gUChuLGwsdSl7dmFyIHQsaSxvLHIsZixlPWwubGVuZ3RoLGM9dS5sZW5ndGgscz1jLGE9MDtmb3Iobi5fX2s9W10sdD0wO3Q8ZTt0KyspbnVsbCE9KGk9bi5fX2tbdF09bnVsbD09KGk9bFt0XSl8fFwiYm9vbGVhblwiPT10eXBlb2YgaXx8XCJmdW5jdGlvblwiPT10eXBlb2YgaT9udWxsOlwic3RyaW5nXCI9PXR5cGVvZiBpfHxcIm51bWJlclwiPT10eXBlb2YgaXx8XCJiaWdpbnRcIj09dHlwZW9mIGl8fGkuY29uc3RydWN0b3I9PVN0cmluZz9kKG51bGwsaSxudWxsLG51bGwsaSk6aChpKT9kKGcse2NoaWxkcmVuOml9LG51bGwsbnVsbCxudWxsKTppLl9fYj4wP2QoaS50eXBlLGkucHJvcHMsaS5rZXksaS5yZWY/aS5yZWY6bnVsbCxpLl9fdik6aSk/KGkuX189bixpLl9fYj1uLl9fYisxLGY9SChpLHUscj10K2EscyksaS5fX2k9ZixvPW51bGwsLTEhPT1mJiYocy0tLChvPXVbZl0pJiYoby5fX3V8PTEzMTA3MikpLG51bGw9PW98fG51bGw9PT1vLl9fdj8oLTE9PWYmJmEtLSxcImZ1bmN0aW9uXCIhPXR5cGVvZiBpLnR5cGUmJihpLl9fdXw9NjU1MzYpKTpmIT09ciYmKGY9PT1yKzE/YSsrOmY+cj9zPmUtcj9hKz1mLXI6YS0tOmE9ZjxyJiZmPT1yLTE/Zi1yOjAsZiE9PXQrYSYmKGkuX191fD02NTUzNikpKToobz11W3RdKSYmbnVsbD09by5rZXkmJm8uX19lJiYoby5fX2U9PW4uX19kJiYobi5fX2Q9bShvKSksTihvLG8sITEpLHVbdF09bnVsbCxzLS0pO2lmKHMpZm9yKHQ9MDt0PGM7dCsrKW51bGwhPShvPXVbdF0pJiYwPT0oMTMxMDcyJm8uX191KSYmKG8uX19lPT1uLl9fZCYmKG4uX19kPW0obykpLE4obyxvKSl9ZnVuY3Rpb24gUyhuLGwsdSl7dmFyIHQsaTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuLnR5cGUpe2Zvcih0PW4uX19rLGk9MDt0JiZpPHQubGVuZ3RoO2krKyl0W2ldJiYodFtpXS5fXz1uLGw9Uyh0W2ldLGwsdSkpO3JldHVybiBsfXJldHVybiBuLl9fZSE9bCYmKHUuaW5zZXJ0QmVmb3JlKG4uX19lLGx8fG51bGwpLGw9bi5fX2UpLGwmJmwubmV4dFNpYmxpbmd9ZnVuY3Rpb24gJChuLGwpe3JldHVybiBsPWx8fFtdLG51bGw9PW58fFwiYm9vbGVhblwiPT10eXBlb2Ygbnx8KGgobik/bi5zb21lKGZ1bmN0aW9uKG4peyQobixsKX0pOmwucHVzaChuKSksbH1mdW5jdGlvbiBIKG4sbCx1LHQpe3ZhciBpPW4ua2V5LG89bi50eXBlLHI9dS0xLGY9dSsxLGU9bFt1XTtpZihudWxsPT09ZXx8ZSYmaT09ZS5rZXkmJm89PT1lLnR5cGUpcmV0dXJuIHU7aWYodD4obnVsbCE9ZSYmMD09KDEzMTA3MiZlLl9fdSk/MTowKSlmb3IoO3I+PTB8fGY8bC5sZW5ndGg7KXtpZihyPj0wKXtpZigoZT1sW3JdKSYmMD09KDEzMTA3MiZlLl9fdSkmJmk9PWUua2V5JiZvPT09ZS50eXBlKXJldHVybiByO3ItLX1pZihmPGwubGVuZ3RoKXtpZigoZT1sW2ZdKSYmMD09KDEzMTA3MiZlLl9fdSkmJmk9PWUua2V5JiZvPT09ZS50eXBlKXJldHVybiBmO2YrK319cmV0dXJuLTF9ZnVuY3Rpb24gSShuLGwsdSl7XCItXCI9PT1sWzBdP24uc2V0UHJvcGVydHkobCxudWxsPT11P1wiXCI6dSk6bltsXT1udWxsPT11P1wiXCI6XCJudW1iZXJcIiE9dHlwZW9mIHV8fGEudGVzdChsKT91OnUrXCJweFwifWZ1bmN0aW9uIFQobixsLHUsdCxpKXt2YXIgbztuOmlmKFwic3R5bGVcIj09PWwpaWYoXCJzdHJpbmdcIj09dHlwZW9mIHUpbi5zdHlsZS5jc3NUZXh0PXU7ZWxzZXtpZihcInN0cmluZ1wiPT10eXBlb2YgdCYmKG4uc3R5bGUuY3NzVGV4dD10PVwiXCIpLHQpZm9yKGwgaW4gdCl1JiZsIGluIHV8fEkobi5zdHlsZSxsLFwiXCIpO2lmKHUpZm9yKGwgaW4gdSl0JiZ1W2xdPT09dFtsXXx8SShuLnN0eWxlLGwsdVtsXSl9ZWxzZSBpZihcIm9cIj09PWxbMF0mJlwiblwiPT09bFsxXSlvPWwhPT0obD1sLnJlcGxhY2UoLyhQb2ludGVyQ2FwdHVyZSkkfENhcHR1cmUkLyxcIiQxXCIpKSxsPWwudG9Mb3dlckNhc2UoKWluIG4/bC50b0xvd2VyQ2FzZSgpLnNsaWNlKDIpOmwuc2xpY2UoMiksbi5sfHwobi5sPXt9KSxuLmxbbCtvXT11LHU/dD91LnU9dC51Oih1LnU9RGF0ZS5ub3coKSxuLmFkZEV2ZW50TGlzdGVuZXIobCxvP0Q6QSxvKSk6bi5yZW1vdmVFdmVudExpc3RlbmVyKGwsbz9EOkEsbyk7ZWxzZXtpZihpKWw9bC5yZXBsYWNlKC94bGluayhIfDpoKS8sXCJoXCIpLnJlcGxhY2UoL3NOYW1lJC8sXCJzXCIpO2Vsc2UgaWYoXCJ3aWR0aFwiIT09bCYmXCJoZWlnaHRcIiE9PWwmJlwiaHJlZlwiIT09bCYmXCJsaXN0XCIhPT1sJiZcImZvcm1cIiE9PWwmJlwidGFiSW5kZXhcIiE9PWwmJlwiZG93bmxvYWRcIiE9PWwmJlwicm93U3BhblwiIT09bCYmXCJjb2xTcGFuXCIhPT1sJiZcInJvbGVcIiE9PWwmJmwgaW4gbil0cnl7bltsXT1udWxsPT11P1wiXCI6dTticmVhayBufWNhdGNoKG4pe31cImZ1bmN0aW9uXCI9PXR5cGVvZiB1fHwobnVsbD09dXx8ITE9PT11JiZcIi1cIiE9PWxbNF0/bi5yZW1vdmVBdHRyaWJ1dGUobCk6bi5zZXRBdHRyaWJ1dGUobCx1KSl9fWZ1bmN0aW9uIEEobil7dmFyIHU9dGhpcy5sW24udHlwZSshMV07aWYobi50KXtpZihuLnQ8PXUudSlyZXR1cm59ZWxzZSBuLnQ9RGF0ZS5ub3coKTtyZXR1cm4gdShsLmV2ZW50P2wuZXZlbnQobik6bil9ZnVuY3Rpb24gRChuKXtyZXR1cm4gdGhpcy5sW24udHlwZSshMF0obC5ldmVudD9sLmV2ZW50KG4pOm4pfWZ1bmN0aW9uIEwobix1LHQsaSxvLHIsZixlLGMscyl7dmFyIGEscCx5LGQsXyxtLGssdyx4LFAsUywkLEgsSSxULEE9dS50eXBlO2lmKHZvaWQgMCE9PXUuY29uc3RydWN0b3IpcmV0dXJuIG51bGw7MTI4JnQuX191JiYoYz0hISgzMiZ0Ll9fdSkscj1bZT11Ll9fZT10Ll9fZV0pLChhPWwuX19iKSYmYSh1KTtuOmlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIEEpdHJ5e2lmKHc9dS5wcm9wcyx4PShhPUEuY29udGV4dFR5cGUpJiZpW2EuX19jXSxQPWE/eD94LnByb3BzLnZhbHVlOmEuX186aSx0Ll9fYz9rPShwPXUuX19jPXQuX19jKS5fXz1wLl9fRTooXCJwcm90b3R5cGVcImluIEEmJkEucHJvdG90eXBlLnJlbmRlcj91Ll9fYz1wPW5ldyBBKHcsUCk6KHUuX19jPXA9bmV3IGIodyxQKSxwLmNvbnN0cnVjdG9yPUEscC5yZW5kZXI9TykseCYmeC5zdWIocCkscC5wcm9wcz13LHAuc3RhdGV8fChwLnN0YXRlPXt9KSxwLmNvbnRleHQ9UCxwLl9fbj1pLHk9cC5fX2Q9ITAscC5fX2g9W10scC5fc2I9W10pLG51bGw9PXAuX19zJiYocC5fX3M9cC5zdGF0ZSksbnVsbCE9QS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJihwLl9fcz09cC5zdGF0ZSYmKHAuX19zPXYoe30scC5fX3MpKSx2KHAuX19zLEEuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHcscC5fX3MpKSksZD1wLnByb3BzLF89cC5zdGF0ZSxwLl9fdj11LHkpbnVsbD09QS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJm51bGwhPXAuY29tcG9uZW50V2lsbE1vdW50JiZwLmNvbXBvbmVudFdpbGxNb3VudCgpLG51bGwhPXAuY29tcG9uZW50RGlkTW91bnQmJnAuX19oLnB1c2gocC5jb21wb25lbnREaWRNb3VudCk7ZWxzZXtpZihudWxsPT1BLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmdyE9PWQmJm51bGwhPXAuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmcC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHcsUCksIXAuX19lJiYobnVsbCE9cC5zaG91bGRDb21wb25lbnRVcGRhdGUmJiExPT09cC5zaG91bGRDb21wb25lbnRVcGRhdGUodyxwLl9fcyxQKXx8dS5fX3Y9PT10Ll9fdikpe2Zvcih1Ll9fdiE9PXQuX192JiYocC5wcm9wcz13LHAuc3RhdGU9cC5fX3MscC5fX2Q9ITEpLHUuX19lPXQuX19lLHUuX19rPXQuX19rLHUuX19rLmZvckVhY2goZnVuY3Rpb24obil7biYmKG4uX189dSl9KSxTPTA7UzxwLl9zYi5sZW5ndGg7UysrKXAuX19oLnB1c2gocC5fc2JbU10pO3AuX3NiPVtdLHAuX19oLmxlbmd0aCYmZi5wdXNoKHApO2JyZWFrIG59bnVsbCE9cC5jb21wb25lbnRXaWxsVXBkYXRlJiZwLmNvbXBvbmVudFdpbGxVcGRhdGUodyxwLl9fcyxQKSxudWxsIT1wLmNvbXBvbmVudERpZFVwZGF0ZSYmcC5fX2gucHVzaChmdW5jdGlvbigpe3AuY29tcG9uZW50RGlkVXBkYXRlKGQsXyxtKX0pfWlmKHAuY29udGV4dD1QLHAucHJvcHM9dyxwLl9fUD1uLHAuX19lPSExLCQ9bC5fX3IsSD0wLFwicHJvdG90eXBlXCJpbiBBJiZBLnByb3RvdHlwZS5yZW5kZXIpe2ZvcihwLnN0YXRlPXAuX19zLHAuX19kPSExLCQmJiQodSksYT1wLnJlbmRlcihwLnByb3BzLHAuc3RhdGUscC5jb250ZXh0KSxJPTA7STxwLl9zYi5sZW5ndGg7SSsrKXAuX19oLnB1c2gocC5fc2JbSV0pO3AuX3NiPVtdfWVsc2UgZG97cC5fX2Q9ITEsJCYmJCh1KSxhPXAucmVuZGVyKHAucHJvcHMscC5zdGF0ZSxwLmNvbnRleHQpLHAuc3RhdGU9cC5fX3N9d2hpbGUocC5fX2QmJisrSDwyNSk7cC5zdGF0ZT1wLl9fcyxudWxsIT1wLmdldENoaWxkQ29udGV4dCYmKGk9dih2KHt9LGkpLHAuZ2V0Q2hpbGRDb250ZXh0KCkpKSx5fHxudWxsPT1wLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHwobT1wLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGQsXykpLEMobixoKFQ9bnVsbCE9YSYmYS50eXBlPT09ZyYmbnVsbD09YS5rZXk/YS5wcm9wcy5jaGlsZHJlbjphKT9UOltUXSx1LHQsaSxvLHIsZixlLGMscykscC5iYXNlPXUuX19lLHUuX191Jj0tMTYxLHAuX19oLmxlbmd0aCYmZi5wdXNoKHApLGsmJihwLl9fRT1wLl9fPW51bGwpfWNhdGNoKG4pe3UuX192PW51bGwsY3x8bnVsbCE9cj8odS5fX2U9ZSx1Ll9fdXw9Yz8xNjA6MzIscltyLmluZGV4T2YoZSldPW51bGwpOih1Ll9fZT10Ll9fZSx1Ll9faz10Ll9fayksbC5fX2Uobix1LHQpfWVsc2UgbnVsbD09ciYmdS5fX3Y9PT10Ll9fdj8odS5fX2s9dC5fX2ssdS5fX2U9dC5fX2UpOnUuX19lPWoodC5fX2UsdSx0LGksbyxyLGYsYyxzKTsoYT1sLmRpZmZlZCkmJmEodSl9ZnVuY3Rpb24gTShuLHUsdCl7dS5fX2Q9dm9pZCAwO2Zvcih2YXIgaT0wO2k8dC5sZW5ndGg7aSsrKXoodFtpXSx0WysraV0sdFsrK2ldKTtsLl9fYyYmbC5fX2ModSxuKSxuLnNvbWUoZnVuY3Rpb24odSl7dHJ5e249dS5fX2gsdS5fX2g9W10sbi5zb21lKGZ1bmN0aW9uKG4pe24uY2FsbCh1KX0pfWNhdGNoKG4pe2wuX19lKG4sdS5fX3YpfX0pfWZ1bmN0aW9uIGoobCx1LHQsaSxvLHIsZixlLHMpe3ZhciBhLHYseSxkLF8sZyxiLGs9dC5wcm9wcyx3PXUucHJvcHMseD11LnR5cGU7aWYoXCJzdmdcIj09PXgmJihvPSEwKSxudWxsIT1yKWZvcihhPTA7YTxyLmxlbmd0aDthKyspaWYoKF89clthXSkmJlwic2V0QXR0cmlidXRlXCJpbiBfPT0hIXgmJih4P18ubG9jYWxOYW1lPT09eDozPT09Xy5ub2RlVHlwZSkpe2w9XyxyW2FdPW51bGw7YnJlYWt9aWYobnVsbD09bCl7aWYobnVsbD09PXgpcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHcpO2w9bz9kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLHgpOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoeCx3LmlzJiZ3KSxyPW51bGwsZT0hMX1pZihudWxsPT09eClrPT09d3x8ZSYmbC5kYXRhPT09d3x8KGwuZGF0YT13KTtlbHNle2lmKHI9ciYmbi5jYWxsKGwuY2hpbGROb2Rlcyksaz10LnByb3BzfHxjLCFlJiZudWxsIT1yKWZvcihrPXt9LGE9MDthPGwuYXR0cmlidXRlcy5sZW5ndGg7YSsrKWtbKF89bC5hdHRyaWJ1dGVzW2FdKS5uYW1lXT1fLnZhbHVlO2ZvcihhIGluIGspXz1rW2FdLFwiY2hpbGRyZW5cIj09YXx8KFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09YT95PV86XCJrZXlcIj09PWF8fGEgaW4gd3x8VChsLGEsbnVsbCxfLG8pKTtmb3IoYSBpbiB3KV89d1thXSxcImNoaWxkcmVuXCI9PWE/ZD1fOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09YT92PV86XCJ2YWx1ZVwiPT1hP2c9XzpcImNoZWNrZWRcIj09YT9iPV86XCJrZXlcIj09PWF8fGUmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIF98fGtbYV09PT1ffHxUKGwsYSxfLGtbYV0sbyk7aWYodillfHx5JiYodi5fX2h0bWw9PT15Ll9faHRtbHx8di5fX2h0bWw9PT1sLmlubmVySFRNTCl8fChsLmlubmVySFRNTD12Ll9faHRtbCksdS5fX2s9W107ZWxzZSBpZih5JiYobC5pbm5lckhUTUw9XCJcIiksQyhsLGgoZCk/ZDpbZF0sdSx0LGksbyYmXCJmb3JlaWduT2JqZWN0XCIhPT14LHIsZixyP3JbMF06dC5fX2smJm0odCwwKSxlLHMpLG51bGwhPXIpZm9yKGE9ci5sZW5ndGg7YS0tOyludWxsIT1yW2FdJiZwKHJbYV0pO2V8fChhPVwidmFsdWVcIix2b2lkIDAhPT1nJiYoZyE9PWxbYV18fFwicHJvZ3Jlc3NcIj09PXgmJiFnfHxcIm9wdGlvblwiPT09eCYmZyE9PWtbYV0pJiZUKGwsYSxnLGtbYV0sITEpLGE9XCJjaGVja2VkXCIsdm9pZCAwIT09YiYmYiE9PWxbYV0mJlQobCxhLGIsa1thXSwhMSkpfXJldHVybiBsfWZ1bmN0aW9uIHoobix1LHQpe3RyeXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBuP24odSk6bi5jdXJyZW50PXV9Y2F0Y2gobil7bC5fX2Uobix0KX19ZnVuY3Rpb24gTihuLHUsdCl7dmFyIGksbztpZihsLnVubW91bnQmJmwudW5tb3VudChuKSwoaT1uLnJlZikmJihpLmN1cnJlbnQmJmkuY3VycmVudCE9PW4uX19lfHx6KGksbnVsbCx1KSksbnVsbCE9KGk9bi5fX2MpKXtpZihpLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtpLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2gobil7bC5fX2Uobix1KX1pLmJhc2U9aS5fX1A9bnVsbCxuLl9fYz12b2lkIDB9aWYoaT1uLl9faylmb3Iobz0wO288aS5sZW5ndGg7bysrKWlbb10mJk4oaVtvXSx1LHR8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4udHlwZSk7dHx8bnVsbD09bi5fX2V8fHAobi5fX2UpLG4uX189bi5fX2U9bi5fX2Q9dm9pZCAwfWZ1bmN0aW9uIE8obixsLHUpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yKG4sdSl9ZnVuY3Rpb24gcSh1LHQsaSl7dmFyIG8scixmLGU7bC5fXyYmbC5fXyh1LHQpLHI9KG89XCJmdW5jdGlvblwiPT10eXBlb2YgaSk/bnVsbDppJiZpLl9fa3x8dC5fX2ssZj1bXSxlPVtdLEwodCx1PSghbyYmaXx8dCkuX19rPXkoZyxudWxsLFt1XSkscnx8YyxjLHZvaWQgMCE9PXQub3duZXJTVkdFbGVtZW50LCFvJiZpP1tpXTpyP251bGw6dC5maXJzdENoaWxkP24uY2FsbCh0LmNoaWxkTm9kZXMpOm51bGwsZiwhbyYmaT9pOnI/ci5fX2U6dC5maXJzdENoaWxkLG8sZSksTShmLHUsZSl9ZnVuY3Rpb24gQihuLGwpe3EobixsLEIpfWZ1bmN0aW9uIEUobCx1LHQpe3ZhciBpLG8scixmLGU9dih7fSxsLnByb3BzKTtmb3IociBpbiBsLnR5cGUmJmwudHlwZS5kZWZhdWx0UHJvcHMmJihmPWwudHlwZS5kZWZhdWx0UHJvcHMpLHUpXCJrZXlcIj09cj9pPXVbcl06XCJyZWZcIj09cj9vPXVbcl06ZVtyXT12b2lkIDA9PT11W3JdJiZ2b2lkIDAhPT1mP2Zbcl06dVtyXTtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD4yJiYoZS5jaGlsZHJlbj1hcmd1bWVudHMubGVuZ3RoPjM/bi5jYWxsKGFyZ3VtZW50cywyKTp0KSxkKGwudHlwZSxlLGl8fGwua2V5LG98fGwucmVmLG51bGwpfWZ1bmN0aW9uIEYobixsKXt2YXIgdT17X19jOmw9XCJfX2NDXCIrZSsrLF9fOm4sQ29uc3VtZXI6ZnVuY3Rpb24obixsKXtyZXR1cm4gbi5jaGlsZHJlbihsKX0sUHJvdmlkZXI6ZnVuY3Rpb24obil7dmFyIHUsdDtyZXR1cm4gdGhpcy5nZXRDaGlsZENvbnRleHR8fCh1PVtdLCh0PXt9KVtsXT10aGlzLHRoaXMuZ2V0Q2hpbGRDb250ZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIHR9LHRoaXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlPWZ1bmN0aW9uKG4pe3RoaXMucHJvcHMudmFsdWUhPT1uLnZhbHVlJiZ1LnNvbWUoZnVuY3Rpb24obil7bi5fX2U9ITAsdyhuKX0pfSx0aGlzLnN1Yj1mdW5jdGlvbihuKXt1LnB1c2gobik7dmFyIGw9bi5jb21wb25lbnRXaWxsVW5tb3VudDtuLmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uKCl7dS5zcGxpY2UodS5pbmRleE9mKG4pLDEpLGwmJmwuY2FsbChuKX19KSxuLmNoaWxkcmVufX07cmV0dXJuIHUuUHJvdmlkZXIuX189dS5Db25zdW1lci5jb250ZXh0VHlwZT11fW49cy5zbGljZSxsPXtfX2U6ZnVuY3Rpb24obixsLHUsdCl7Zm9yKHZhciBpLG8scjtsPWwuX187KWlmKChpPWwuX19jKSYmIWkuX18pdHJ5e2lmKChvPWkuY29uc3RydWN0b3IpJiZudWxsIT1vLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciYmKGkuc2V0U3RhdGUoby5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IobikpLHI9aS5fX2QpLG51bGwhPWkuY29tcG9uZW50RGlkQ2F0Y2gmJihpLmNvbXBvbmVudERpZENhdGNoKG4sdHx8e30pLHI9aS5fX2QpLHIpcmV0dXJuIGkuX19FPWl9Y2F0Y2gobCl7bj1sfXRocm93IG59fSx1PTAsdD1mdW5jdGlvbihuKXtyZXR1cm4gbnVsbCE9biYmbnVsbD09bi5jb25zdHJ1Y3Rvcn0sYi5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24obixsKXt2YXIgdTt1PW51bGwhPXRoaXMuX19zJiZ0aGlzLl9fcyE9PXRoaXMuc3RhdGU/dGhpcy5fX3M6dGhpcy5fX3M9dih7fSx0aGlzLnN0YXRlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYobj1uKHYoe30sdSksdGhpcy5wcm9wcykpLG4mJnYodSxuKSxudWxsIT1uJiZ0aGlzLl9fdiYmKGwmJnRoaXMuX3NiLnB1c2gobCksdyh0aGlzKSl9LGIucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKG4pe3RoaXMuX192JiYodGhpcy5fX2U9ITAsbiYmdGhpcy5fX2gucHVzaChuKSx3KHRoaXMpKX0sYi5wcm90b3R5cGUucmVuZGVyPWcsaT1bXSxyPVwiZnVuY3Rpb25cIj09dHlwZW9mIFByb21pc2U/UHJvbWlzZS5wcm90b3R5cGUudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKTpzZXRUaW1lb3V0LGY9ZnVuY3Rpb24obixsKXtyZXR1cm4gbi5fX3YuX19iLWwuX192Ll9fYn0seC5fX3I9MCxlPTA7ZXhwb3J0e2IgYXMgQ29tcG9uZW50LGcgYXMgRnJhZ21lbnQsRSBhcyBjbG9uZUVsZW1lbnQsRiBhcyBjcmVhdGVDb250ZXh0LHkgYXMgY3JlYXRlRWxlbWVudCxfIGFzIGNyZWF0ZVJlZix5IGFzIGgsQiBhcyBoeWRyYXRlLHQgYXMgaXNWYWxpZEVsZW1lbnQsbCBhcyBvcHRpb25zLHEgYXMgcmVuZGVyLCQgYXMgdG9DaGlsZEFycmF5fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZWFjdC5tb2R1bGUuanMubWFwXG4iLCJpbXBvcnR7b3B0aW9ucyBhcyByLEZyYWdtZW50IGFzIGV9ZnJvbVwicHJlYWN0XCI7ZXhwb3J0e0ZyYWdtZW50fWZyb21cInByZWFjdFwiO3ZhciB0PS9bXCImPF0vO2Z1bmN0aW9uIG4ocil7aWYoMD09PXIubGVuZ3RofHwhMT09PXQudGVzdChyKSlyZXR1cm4gcjtmb3IodmFyIGU9MCxuPTAsbz1cIlwiLGY9XCJcIjtuPHIubGVuZ3RoO24rKyl7c3dpdGNoKHIuY2hhckNvZGVBdChuKSl7Y2FzZSAzNDpmPVwiJnF1b3Q7XCI7YnJlYWs7Y2FzZSAzODpmPVwiJmFtcDtcIjticmVhaztjYXNlIDYwOmY9XCImbHQ7XCI7YnJlYWs7ZGVmYXVsdDpjb250aW51ZX1uIT09ZSYmKG8rPXIuc2xpY2UoZSxuKSksbys9ZixlPW4rMX1yZXR1cm4gbiE9PWUmJihvKz1yLnNsaWNlKGUsbikpLG99dmFyIG89L2FjaXR8ZXgoPzpzfGd8bnxwfCQpfHJwaHxncmlkfG93c3xtbmN8bnR3fGluZVtjaF18em9vfF5vcmR8aXRlcmEvaSxmPTAsaT1BcnJheS5pc0FycmF5O2Z1bmN0aW9uIHUoZSx0LG4sbyxpLHUpe3ZhciBhLGMscD17fTtmb3IoYyBpbiB0KVwicmVmXCI9PWM/YT10W2NdOnBbY109dFtjXTt2YXIgbD17dHlwZTplLHByb3BzOnAsa2V5Om4scmVmOmEsX19rOm51bGwsX186bnVsbCxfX2I6MCxfX2U6bnVsbCxfX2Q6dm9pZCAwLF9fYzpudWxsLGNvbnN0cnVjdG9yOnZvaWQgMCxfX3Y6LS1mLF9faTotMSxfX3U6MCxfX3NvdXJjZTppLF9fc2VsZjp1fTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiYoYT1lLmRlZmF1bHRQcm9wcykpZm9yKGMgaW4gYSl2b2lkIDA9PT1wW2NdJiYocFtjXT1hW2NdKTtyZXR1cm4gci52bm9kZSYmci52bm9kZShsKSxsfWZ1bmN0aW9uIGEocil7dmFyIHQ9dShlLHt0cGw6cixleHByczpbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKX0pO3JldHVybiB0LmtleT10Ll9fdix0fXZhciBjPXt9LHA9L1tBLVpdL2c7ZnVuY3Rpb24gbChlLHQpe2lmKHIuYXR0cil7dmFyIGY9ci5hdHRyKGUsdCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGYpcmV0dXJuIGZ9aWYoXCJyZWZcIj09PWV8fFwia2V5XCI9PT1lKXJldHVyblwiXCI7aWYoXCJzdHlsZVwiPT09ZSYmXCJvYmplY3RcIj09dHlwZW9mIHQpe3ZhciBpPVwiXCI7Zm9yKHZhciB1IGluIHQpe3ZhciBhPXRbdV07aWYobnVsbCE9YSYmXCJcIiE9PWEpe3ZhciBsPVwiLVwiPT11WzBdP3U6Y1t1XXx8KGNbdV09dS5yZXBsYWNlKHAsXCItJCZcIikudG9Mb3dlckNhc2UoKSksXz1cIjtcIjtcIm51bWJlclwiIT10eXBlb2YgYXx8bC5zdGFydHNXaXRoKFwiLS1cIil8fG8udGVzdChsKXx8KF89XCJweDtcIiksaT1pK2wrXCI6XCIrYStffX1yZXR1cm4gZSsnPVwiJytpKydcIid9cmV0dXJuIG51bGw9PXR8fCExPT09dHx8XCJmdW5jdGlvblwiPT10eXBlb2YgdHx8XCJvYmplY3RcIj09dHlwZW9mIHQ/XCJcIjohMD09PXQ/ZTplKyc9XCInK24odCkrJ1wiJ31mdW5jdGlvbiBfKHIpe2lmKG51bGw9PXJ8fFwiYm9vbGVhblwiPT10eXBlb2Ygcnx8XCJmdW5jdGlvblwiPT10eXBlb2YgcilyZXR1cm4gbnVsbDtpZihcIm9iamVjdFwiPT10eXBlb2Ygcil7aWYodm9pZCAwPT09ci5jb25zdHJ1Y3RvcilyZXR1cm4gcjtpZihpKHIpKXtmb3IodmFyIGU9MDtlPHIubGVuZ3RoO2UrKylyW2VdPV8ocltlXSk7cmV0dXJuIHJ9fXJldHVybiBuKFwiXCIrcil9ZXhwb3J0e3UgYXMganN4LGwgYXMganN4QXR0cix1IGFzIGpzeERFVixfIGFzIGpzeEVzY2FwZSxhIGFzIGpzeFRlbXBsYXRlLHUgYXMganN4c307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc3hSdW50aW1lLm1vZHVsZS5qcy5tYXBcbiIsImltcG9ydHtvcHRpb25zIGFzIG59ZnJvbVwicHJlYWN0XCI7dmFyIHQscix1LGksbz0wLGY9W10sYz1bXSxlPW4uX19iLGE9bi5fX3Isdj1uLmRpZmZlZCxsPW4uX19jLG09bi51bm1vdW50O2Z1bmN0aW9uIGQodCx1KXtuLl9faCYmbi5fX2gocix0LG98fHUpLG89MDt2YXIgaT1yLl9fSHx8KHIuX19IPXtfXzpbXSxfX2g6W119KTtyZXR1cm4gdD49aS5fXy5sZW5ndGgmJmkuX18ucHVzaCh7X19WOmN9KSxpLl9fW3RdfWZ1bmN0aW9uIGgobil7cmV0dXJuIG89MSxzKEIsbil9ZnVuY3Rpb24gcyhuLHUsaSl7dmFyIG89ZCh0KyssMik7aWYoby50PW4sIW8uX19jJiYoby5fXz1baT9pKHUpOkIodm9pZCAwLHUpLGZ1bmN0aW9uKG4pe3ZhciB0PW8uX19OP28uX19OWzBdOm8uX19bMF0scj1vLnQodCxuKTt0IT09ciYmKG8uX19OPVtyLG8uX19bMV1dLG8uX19jLnNldFN0YXRlKHt9KSl9XSxvLl9fYz1yLCFyLnUpKXt2YXIgZj1mdW5jdGlvbihuLHQscil7aWYoIW8uX19jLl9fSClyZXR1cm4hMDt2YXIgdT1vLl9fYy5fX0guX18uZmlsdGVyKGZ1bmN0aW9uKG4pe3JldHVybiBuLl9fY30pO2lmKHUuZXZlcnkoZnVuY3Rpb24obil7cmV0dXJuIW4uX19OfSkpcmV0dXJuIWN8fGMuY2FsbCh0aGlzLG4sdCxyKTt2YXIgaT0hMTtyZXR1cm4gdS5mb3JFYWNoKGZ1bmN0aW9uKG4pe2lmKG4uX19OKXt2YXIgdD1uLl9fWzBdO24uX189bi5fX04sbi5fX049dm9pZCAwLHQhPT1uLl9fWzBdJiYoaT0hMCl9fSksISghaSYmby5fX2MucHJvcHM9PT1uKSYmKCFjfHxjLmNhbGwodGhpcyxuLHQscikpfTtyLnU9ITA7dmFyIGM9ci5zaG91bGRDb21wb25lbnRVcGRhdGUsZT1yLmNvbXBvbmVudFdpbGxVcGRhdGU7ci5jb21wb25lbnRXaWxsVXBkYXRlPWZ1bmN0aW9uKG4sdCxyKXtpZih0aGlzLl9fZSl7dmFyIHU9YztjPXZvaWQgMCxmKG4sdCxyKSxjPXV9ZSYmZS5jYWxsKHRoaXMsbix0LHIpfSxyLnNob3VsZENvbXBvbmVudFVwZGF0ZT1mfXJldHVybiBvLl9fTnx8by5fX31mdW5jdGlvbiBwKHUsaSl7dmFyIG89ZCh0KyssMyk7IW4uX19zJiZ6KG8uX19ILGkpJiYoby5fXz11LG8uaT1pLHIuX19ILl9faC5wdXNoKG8pKX1mdW5jdGlvbiB5KHUsaSl7dmFyIG89ZCh0KyssNCk7IW4uX19zJiZ6KG8uX19ILGkpJiYoby5fXz11LG8uaT1pLHIuX19oLnB1c2gobykpfWZ1bmN0aW9uIF8obil7cmV0dXJuIG89NSxGKGZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bn19LFtdKX1mdW5jdGlvbiBBKG4sdCxyKXtvPTYseShmdW5jdGlvbigpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4/KG4odCgpKSxmdW5jdGlvbigpe3JldHVybiBuKG51bGwpfSk6bj8obi5jdXJyZW50PXQoKSxmdW5jdGlvbigpe3JldHVybiBuLmN1cnJlbnQ9bnVsbH0pOnZvaWQgMH0sbnVsbD09cj9yOnIuY29uY2F0KG4pKX1mdW5jdGlvbiBGKG4scil7dmFyIHU9ZCh0KyssNyk7cmV0dXJuIHoodS5fX0gscik/KHUuX19WPW4oKSx1Lmk9cix1Ll9faD1uLHUuX19WKTp1Ll9ffWZ1bmN0aW9uIFQobix0KXtyZXR1cm4gbz04LEYoZnVuY3Rpb24oKXtyZXR1cm4gbn0sdCl9ZnVuY3Rpb24gcShuKXt2YXIgdT1yLmNvbnRleHRbbi5fX2NdLGk9ZCh0KyssOSk7cmV0dXJuIGkuYz1uLHU/KG51bGw9PWkuX18mJihpLl9fPSEwLHUuc3ViKHIpKSx1LnByb3BzLnZhbHVlKTpuLl9ffWZ1bmN0aW9uIHgodCxyKXtuLnVzZURlYnVnVmFsdWUmJm4udXNlRGVidWdWYWx1ZShyP3IodCk6dCl9ZnVuY3Rpb24gUChuKXt2YXIgdT1kKHQrKywxMCksaT1oKCk7cmV0dXJuIHUuX189bixyLmNvbXBvbmVudERpZENhdGNofHwoci5jb21wb25lbnREaWRDYXRjaD1mdW5jdGlvbihuLHQpe3UuX18mJnUuX18obix0KSxpWzFdKG4pfSksW2lbMF0sZnVuY3Rpb24oKXtpWzFdKHZvaWQgMCl9XX1mdW5jdGlvbiBWKCl7dmFyIG49ZCh0KyssMTEpO2lmKCFuLl9fKXtmb3IodmFyIHU9ci5fX3Y7bnVsbCE9PXUmJiF1Ll9fbSYmbnVsbCE9PXUuX187KXU9dS5fXzt2YXIgaT11Ll9fbXx8KHUuX19tPVswLDBdKTtuLl9fPVwiUFwiK2lbMF0rXCItXCIraVsxXSsrfXJldHVybiBuLl9ffWZ1bmN0aW9uIGIoKXtmb3IodmFyIHQ7dD1mLnNoaWZ0KCk7KWlmKHQuX19QJiZ0Ll9fSCl0cnl7dC5fX0guX19oLmZvckVhY2goayksdC5fX0guX19oLmZvckVhY2godyksdC5fX0guX19oPVtdfWNhdGNoKHIpe3QuX19ILl9faD1bXSxuLl9fZShyLHQuX192KX19bi5fX2I9ZnVuY3Rpb24obil7cj1udWxsLGUmJmUobil9LG4uX19yPWZ1bmN0aW9uKG4pe2EmJmEobiksdD0wO3ZhciBpPShyPW4uX19jKS5fX0g7aSYmKHU9PT1yPyhpLl9faD1bXSxyLl9faD1bXSxpLl9fLmZvckVhY2goZnVuY3Rpb24obil7bi5fX04mJihuLl9fPW4uX19OKSxuLl9fVj1jLG4uX19OPW4uaT12b2lkIDB9KSk6KGkuX19oLmZvckVhY2goayksaS5fX2guZm9yRWFjaCh3KSxpLl9faD1bXSx0PTApKSx1PXJ9LG4uZGlmZmVkPWZ1bmN0aW9uKHQpe3YmJnYodCk7dmFyIG89dC5fX2M7byYmby5fX0gmJihvLl9fSC5fX2gubGVuZ3RoJiYoMSE9PWYucHVzaChvKSYmaT09PW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHwoKGk9bi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpfHxqKShiKSksby5fX0guX18uZm9yRWFjaChmdW5jdGlvbihuKXtuLmkmJihuLl9fSD1uLmkpLG4uX19WIT09YyYmKG4uX189bi5fX1YpLG4uaT12b2lkIDAsbi5fX1Y9Y30pKSx1PXI9bnVsbH0sbi5fX2M9ZnVuY3Rpb24odCxyKXtyLnNvbWUoZnVuY3Rpb24odCl7dHJ5e3QuX19oLmZvckVhY2goayksdC5fX2g9dC5fX2guZmlsdGVyKGZ1bmN0aW9uKG4pe3JldHVybiFuLl9ffHx3KG4pfSl9Y2F0Y2godSl7ci5zb21lKGZ1bmN0aW9uKG4pe24uX19oJiYobi5fX2g9W10pfSkscj1bXSxuLl9fZSh1LHQuX192KX19KSxsJiZsKHQscil9LG4udW5tb3VudD1mdW5jdGlvbih0KXttJiZtKHQpO3ZhciByLHU9dC5fX2M7dSYmdS5fX0gmJih1Ll9fSC5fXy5mb3JFYWNoKGZ1bmN0aW9uKG4pe3RyeXtrKG4pfWNhdGNoKG4pe3I9bn19KSx1Ll9fSD12b2lkIDAsciYmbi5fX2Uocix1Ll9fdikpfTt2YXIgZz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ZnVuY3Rpb24gaihuKXt2YXIgdCxyPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHUpLGcmJmNhbmNlbEFuaW1hdGlvbkZyYW1lKHQpLHNldFRpbWVvdXQobil9LHU9c2V0VGltZW91dChyLDEwMCk7ZyYmKHQ9cmVxdWVzdEFuaW1hdGlvbkZyYW1lKHIpKX1mdW5jdGlvbiBrKG4pe3ZhciB0PXIsdT1uLl9fYztcImZ1bmN0aW9uXCI9PXR5cGVvZiB1JiYobi5fX2M9dm9pZCAwLHUoKSkscj10fWZ1bmN0aW9uIHcobil7dmFyIHQ9cjtuLl9fYz1uLl9fKCkscj10fWZ1bmN0aW9uIHoobix0KXtyZXR1cm4hbnx8bi5sZW5ndGghPT10Lmxlbmd0aHx8dC5zb21lKGZ1bmN0aW9uKHQscil7cmV0dXJuIHQhPT1uW3JdfSl9ZnVuY3Rpb24gQihuLHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dChuKTp0fWV4cG9ydHtUIGFzIHVzZUNhbGxiYWNrLHEgYXMgdXNlQ29udGV4dCx4IGFzIHVzZURlYnVnVmFsdWUscCBhcyB1c2VFZmZlY3QsUCBhcyB1c2VFcnJvckJvdW5kYXJ5LFYgYXMgdXNlSWQsQSBhcyB1c2VJbXBlcmF0aXZlSGFuZGxlLHkgYXMgdXNlTGF5b3V0RWZmZWN0LEYgYXMgdXNlTWVtbyxzIGFzIHVzZVJlZHVjZXIsXyBhcyB1c2VSZWYsaCBhcyB1c2VTdGF0ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob29rcy5tb2R1bGUuanMubWFwXG4iLCJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlTGF5b3V0RWZmZWN0LCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmV4cG9ydCB7XG4gIGlzVmFsaWRFbGVtZW50LFxuICBjcmVhdGVDb250ZXh0LFxuICBjbG9uZUVsZW1lbnQsXG4gIGNyZWF0ZUVsZW1lbnQsXG4gIEZyYWdtZW50LFxufSBmcm9tIFwicHJlYWN0XCI7XG5leHBvcnQge1xuICB1c2VMYXlvdXRFZmZlY3QgYXMgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCxcbiAgdXNlTGF5b3V0RWZmZWN0IGFzIHVzZUluc2VydGlvbkVmZmVjdCxcbiAgdXNlU3RhdGUsXG4gIHVzZUNvbnRleHQsXG59IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcblxuLy8gQ29waWVkIGZyb206XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9tYWluL3BhY2thZ2VzL3NoYXJlZC9FeGVjdXRpb25FbnZpcm9ubWVudC5qc1xuY29uc3QgY2FuVXNlRE9NID0gISEoXG4gIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCJcbik7XG5cbi8vIFRPRE86IHN3aXRjaCB0byBgZXhwb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmUgfSBmcm9tIFwicHJlYWN0L2NvbXBhdFwiYCBvbmNlIHdlIHVwZGF0ZSBQcmVhY3QgdG8gPj0gMTAuMTEuM1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICByZXR1cm4gKHggPT09IHkgJiYgKHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5KSkgfHwgKHggIT09IHggJiYgeSAhPT0geSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdXNlU3luY0V4dGVybmFsU3RvcmUoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U1NSU25hcHNob3QpIHtcbiAgaWYgKGdldFNTUlNuYXBzaG90ICYmICFjYW5Vc2VET00pIGdldFNuYXBzaG90ID0gZ2V0U1NSU25hcHNob3Q7XG4gIGNvbnN0IHZhbHVlID0gZ2V0U25hcHNob3QoKTtcblxuICBjb25zdCBbeyBfaW5zdGFuY2UgfSwgZm9yY2VVcGRhdGVdID0gdXNlU3RhdGUoe1xuICAgIF9pbnN0YW5jZTogeyBfdmFsdWU6IHZhbHVlLCBfZ2V0U25hcHNob3Q6IGdldFNuYXBzaG90IH0sXG4gIH0pO1xuXG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgX2luc3RhbmNlLl92YWx1ZSA9IHZhbHVlO1xuICAgIF9pbnN0YW5jZS5fZ2V0U25hcHNob3QgPSBnZXRTbmFwc2hvdDtcblxuICAgIGlmICghaXMoX2luc3RhbmNlLl92YWx1ZSwgZ2V0U25hcHNob3QoKSkpIHtcbiAgICAgIGZvcmNlVXBkYXRlKHsgX2luc3RhbmNlIH0pO1xuICAgIH1cbiAgfSwgW3N1YnNjcmliZSwgdmFsdWUsIGdldFNuYXBzaG90XSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWlzKF9pbnN0YW5jZS5fdmFsdWUsIF9pbnN0YW5jZS5fZ2V0U25hcHNob3QoKSkpIHtcbiAgICAgIGZvcmNlVXBkYXRlKHsgX2luc3RhbmNlIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaWYgKCFpcyhfaW5zdGFuY2UuX3ZhbHVlLCBfaW5zdGFuY2UuX2dldFNuYXBzaG90KCkpKSB7XG4gICAgICAgIGZvcmNlVXBkYXRlKHsgX2luc3RhbmNlIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LCBbc3Vic2NyaWJlXSk7XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vLyBwcm92aWRlIGZvcndhcmRSZWYgc3R1YiBmb3IgcHJlYWN0XG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZFJlZihjb21wb25lbnQpIHtcbiAgcmV0dXJuIGNvbXBvbmVudDtcbn1cblxuLy8gVXNlcmxhbmQgcG9seWZpbGwgd2hpbGUgd2Ugd2FpdCBmb3IgdGhlIGZvcnRoY29taW5nXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZmNzL2Jsb2IvdXNlZXZlbnQvdGV4dC8wMDAwLXVzZWV2ZW50Lm1kXG4vLyBOb3RlOiBcIkEgaGlnaC1maWRlbHR5IHBvbHlmaWxsIGZvciB1c2VFdmVudCBpcyBub3QgcG9zc2libGUgYmVjYXVzZVxuLy8gdGhlcmUgaXMgbm8gbGlmZWN5Y2xlIG9yIEhvb2sgaW4gUmVhY3QgdGhhdCB3ZSBjYW4gdXNlIHRvIHN3aXRjaFxuLy8gLmN1cnJlbnQgYXQgdGhlIHJpZ2h0IHRpbWluZy5cIlxuLy8gU28gd2Ugd2lsbCBoYXZlIHRvIG1ha2UgZG8gd2l0aCB0aGlzIFwiY2xvc2UgZW5vdWdoXCIgYXBwcm9hY2ggZm9yIG5vdy5cbmV4cG9ydCBjb25zdCB1c2VFdmVudCA9IChmbikgPT4ge1xuICBjb25zdCByZWYgPSB1c2VSZWYoW2ZuLCAoLi4uYXJncykgPT4gcmVmWzBdKC4uLmFyZ3MpXSkuY3VycmVudDtcbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICByZWZbMF0gPSBmbjtcbiAgfSk7XG4gIHJldHVybiByZWZbMV07XG59O1xuIiwiLypcbiAqIFRyYW5zZm9ybXMgYHBhdGhgIGludG8gaXRzIHJlbGF0aXZlIGBiYXNlYCB2ZXJzaW9uXG4gKiBJZiBiYXNlIGlzbid0IHBhcnQgb2YgdGhlIHBhdGggcHJvdmlkZWQgcmV0dXJucyBhYnNvbHV0ZSBwYXRoIGUuZy4gYH4vYXBwYFxuICovXG5leHBvcnQgY29uc3QgcmVsYXRpdmVQYXRoID0gKGJhc2UgPSBcIlwiLCBwYXRoID0gbG9jYXRpb24ucGF0aG5hbWUpID0+XG4gICFwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihiYXNlLnRvTG93ZXJDYXNlKCkpXG4gICAgPyBwYXRoLnNsaWNlKGJhc2UubGVuZ3RoKSB8fCBcIi9cIlxuICAgIDogXCJ+XCIgKyBwYXRoO1xuXG5leHBvcnQgY29uc3QgYWJzb2x1dGVQYXRoID0gKHRvLCBiYXNlID0gXCJcIikgPT5cbiAgdG9bMF0gPT09IFwiflwiID8gdG8uc2xpY2UoMSkgOiBiYXNlICsgdG87XG4iLCJpbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSwgdXNlRXZlbnQgfSBmcm9tIFwiLi9yZWFjdC1kZXBzLmpzXCI7XG5pbXBvcnQgeyBhYnNvbHV0ZVBhdGgsIHJlbGF0aXZlUGF0aCB9IGZyb20gXCIuL3BhdGhzLmpzXCI7XG5cbi8qKlxuICogSGlzdG9yeSBBUEkgZG9jcyBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IaXN0b3J5XG4gKi9cbmNvbnN0IGV2ZW50UG9wc3RhdGUgPSBcInBvcHN0YXRlXCI7XG5jb25zdCBldmVudFB1c2hTdGF0ZSA9IFwicHVzaFN0YXRlXCI7XG5jb25zdCBldmVudFJlcGxhY2VTdGF0ZSA9IFwicmVwbGFjZVN0YXRlXCI7XG5jb25zdCBldmVudEhhc2hjaGFuZ2UgPSBcImhhc2hjaGFuZ2VcIjtcbmV4cG9ydCBjb25zdCBldmVudHMgPSBbXG4gIGV2ZW50UG9wc3RhdGUsXG4gIGV2ZW50UHVzaFN0YXRlLFxuICBldmVudFJlcGxhY2VTdGF0ZSxcbiAgZXZlbnRIYXNoY2hhbmdlLFxuXTtcblxuY29uc3Qgc3Vic2NyaWJlVG9Mb2NhdGlvblVwZGF0ZXMgPSAoY2FsbGJhY2spID0+IHtcbiAgZm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcbiAgICBhZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgcmV0dXJuICgpID0+IHtcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VMb2NhdGlvblByb3BlcnR5ID0gKGZuLCBzc3JGbikgPT5cbiAgdXNlU3luY0V4dGVybmFsU3RvcmUoc3Vic2NyaWJlVG9Mb2NhdGlvblVwZGF0ZXMsIGZuLCBzc3JGbik7XG5cbmNvbnN0IGN1cnJlbnRTZWFyY2ggPSAoKSA9PiBsb2NhdGlvbi5zZWFyY2g7XG5leHBvcnQgY29uc3QgdXNlU2VhcmNoID0gKCkgPT4gdXNlTG9jYXRpb25Qcm9wZXJ0eShjdXJyZW50U2VhcmNoKTtcblxuY29uc3QgY3VycmVudFBhdGhuYW1lID0gKCkgPT4gbG9jYXRpb24ucGF0aG5hbWU7XG5cbmV4cG9ydCBjb25zdCB1c2VQYXRobmFtZSA9ICh7IHNzclBhdGggfSA9IHt9KSA9PlxuICB1c2VMb2NhdGlvblByb3BlcnR5KFxuICAgIGN1cnJlbnRQYXRobmFtZSxcbiAgICBzc3JQYXRoID8gKCkgPT4gc3NyUGF0aCA6IGN1cnJlbnRQYXRobmFtZVxuICApO1xuXG5leHBvcnQgY29uc3QgbmF2aWdhdGUgPSAodG8sIHsgcmVwbGFjZSA9IGZhbHNlIH0gPSB7fSkgPT5cbiAgaGlzdG9yeVtyZXBsYWNlID8gZXZlbnRSZXBsYWNlU3RhdGUgOiBldmVudFB1c2hTdGF0ZV0obnVsbCwgXCJcIiwgdG8pO1xuXG4vLyB0aGUgMm5kIGFyZ3VtZW50IG9mIHRoZSBgdXNlTG9jYXRpb25gIHJldHVybiB2YWx1ZSBpcyBhIGZ1bmN0aW9uXG4vLyB0aGF0IGFsbG93cyB0byBwZXJmb3JtIGEgbmF2aWdhdGlvbi5cbi8vXG4vLyB0aGUgZnVuY3Rpb24gcmVmZXJlbmNlIHNob3VsZCBzdGF5IHRoZSBzYW1lIGJldHdlZW4gcmUtcmVuZGVycywgc28gdGhhdFxuLy8gaXQgY2FuIGJlIHBhc3NlZCBkb3duIGFzIGFuIGVsZW1lbnQgcHJvcCB3aXRob3V0IGFueSBwZXJmb3JtYW5jZSBjb25jZXJucy5cbi8vIChUaGlzIGlzIGFjaGlldmVkIHZpYSBgdXNlRXZlbnRgLilcbmNvbnN0IHVzZUxvY2F0aW9uID0gKG9wdHMgPSB7fSkgPT4gW1xuICByZWxhdGl2ZVBhdGgob3B0cy5iYXNlLCB1c2VQYXRobmFtZShvcHRzKSksXG4gIHVzZUV2ZW50KCh0bywgbmF2T3B0cykgPT4gbmF2aWdhdGUoYWJzb2x1dGVQYXRoKHRvLCBvcHRzLmJhc2UpLCBuYXZPcHRzKSksXG5dO1xuXG5leHBvcnQgZGVmYXVsdCB1c2VMb2NhdGlvbjtcblxuLy8gV2hpbGUgSGlzdG9yeSBBUEkgZG9lcyBoYXZlIGBwb3BzdGF0ZWAgZXZlbnQsIHRoZSBvbmx5XG4vLyBwcm9wZXIgd2F5IHRvIGxpc3RlbiB0byBjaGFuZ2VzIHZpYSBgcHVzaC9yZXBsYWNlU3RhdGVgXG4vLyBpcyB0byBtb25rZXktcGF0Y2ggdGhlc2UgbWV0aG9kcy5cbi8vXG4vLyBTZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ1ODUwMzFcbmlmICh0eXBlb2YgaGlzdG9yeSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3IgKGNvbnN0IHR5cGUgb2YgW2V2ZW50UHVzaFN0YXRlLCBldmVudFJlcGxhY2VTdGF0ZV0pIHtcbiAgICBjb25zdCBvcmlnaW5hbCA9IGhpc3RvcnlbdHlwZV07XG4gICAgLy8gVE9ETzogd2Ugc2hvdWxkIGJlIHVzaW5nIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIHRvIGF2b2lkIG11bHRpcGxlIHJlLXJlbmRlcnMsXG4gICAgLy8gaG93ZXZlciB0aGF0IHdpbGwgcmVxdWlyZSBhbiBhZGRpdGlvbmFsIHBlZXIgZGVwZW5kZW5jeSBvbiByZWFjdC1kb20uXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3R3Zy9yZWFjdC0xOC9kaXNjdXNzaW9ucy84NiNkaXNjdXNzaW9uY29tbWVudC0xNTY3MTQ5XG4gICAgaGlzdG9yeVt0eXBlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBjb25zdCBldmVudCA9IG5ldyBFdmVudCh0eXBlKTtcbiAgICAgIGV2ZW50LmFyZ3VtZW50cyA9IGFyZ3VtZW50cztcblxuICAgICAgZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH1cbn1cbiIsIi8vIGNyZWF0ZXMgYSBtYXRjaGVyIGZ1bmN0aW9uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWtlTWF0Y2hlcihtYWtlUmVnZXhwRm4gPSBwYXRoVG9SZWdleHApIHtcbiAgbGV0IGNhY2hlID0ge307XG5cbiAgLy8gb2J0YWlucyBhIGNhY2hlZCByZWdleHAgdmVyc2lvbiBvZiB0aGUgcGF0dGVyblxuICBjb25zdCBnZXRSZWdleHAgPSAocGF0dGVybikgPT5cbiAgICBjYWNoZVtwYXR0ZXJuXSB8fCAoY2FjaGVbcGF0dGVybl0gPSBtYWtlUmVnZXhwRm4ocGF0dGVybikpO1xuXG4gIHJldHVybiAocGF0dGVybiwgcGF0aCkgPT4ge1xuICAgIGNvbnN0IHsgcmVnZXhwLCBrZXlzIH0gPSBnZXRSZWdleHAocGF0dGVybiB8fCBcIlwiKTtcbiAgICBjb25zdCBvdXQgPSByZWdleHAuZXhlYyhwYXRoKTtcblxuICAgIGlmICghb3V0KSByZXR1cm4gW2ZhbHNlLCBudWxsXTtcblxuICAgIC8vIGZvcm1hdHMgYW4gb2JqZWN0IHdpdGggbWF0Y2hlZCBwYXJhbXNcbiAgICBjb25zdCBwYXJhbXMgPSBrZXlzLnJlZHVjZSgocGFyYW1zLCBrZXksIGkpID0+IHtcbiAgICAgIHBhcmFtc1trZXkubmFtZV0gPSBvdXRbaSArIDFdO1xuICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9LCB7fSk7XG5cbiAgICByZXR1cm4gW3RydWUsIHBhcmFtc107XG4gIH07XG59XG5cbi8vIGVzY2FwZXMgYSByZWdleHAgc3RyaW5nIChib3Jyb3dlZCBmcm9tIHBhdGgtdG8tcmVnZXhwIHNvdXJjZXMpXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi92My4wLjAvaW5kZXguanMjTDIwMlxuY29uc3QgZXNjYXBlUnggPSAoc3RyKSA9PiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuXG4vLyByZXR1cm5zIGEgc2VnbWVudCByZXByZXNlbnRhdGlvbiBpbiBSZWdFeHAgYmFzZWQgb24gZmxhZ3Ncbi8vIGFkYXB0ZWQgYW5kIHNpbXBsaWZpZWQgdmVyc2lvbiBmcm9tIHBhdGgtdG8tcmVnZXhwIHNvdXJjZXNcbmNvbnN0IHJ4Rm9yU2VnbWVudCA9IChyZXBlYXQsIG9wdGlvbmFsLCBwcmVmaXgpID0+IHtcbiAgbGV0IGNhcHR1cmUgPSByZXBlYXQgPyBcIigoPzpbXlxcXFwvXSs/KSg/OlxcXFwvKD86W15cXFxcL10rPykpKilcIiA6IFwiKFteXFxcXC9dKz8pXCI7XG4gIGlmIChvcHRpb25hbCAmJiBwcmVmaXgpIGNhcHR1cmUgPSBcIig/OlxcXFwvXCIgKyBjYXB0dXJlICsgXCIpXCI7XG4gIHJldHVybiBjYXB0dXJlICsgKG9wdGlvbmFsID8gXCI/XCIgOiBcIlwiKTtcbn07XG5cbmNvbnN0IHBhdGhUb1JlZ2V4cCA9IChwYXR0ZXJuKSA9PiB7XG4gIGNvbnN0IGdyb3VwUnggPSAvOihbQS1aYS16MC05X10rKShbPysqXT8pL2c7XG5cbiAgbGV0IG1hdGNoID0gbnVsbCxcbiAgICBsYXN0SW5kZXggPSAwLFxuICAgIGtleXMgPSBbXSxcbiAgICByZXN1bHQgPSBcIlwiO1xuXG4gIHdoaWxlICgobWF0Y2ggPSBncm91cFJ4LmV4ZWMocGF0dGVybikpICE9PSBudWxsKSB7XG4gICAgY29uc3QgW18sIHNlZ21lbnQsIG1vZF0gPSBtYXRjaDtcblxuICAgIC8vIDpmb28gIFsxXSAgICAgICggIClcbiAgICAvLyA6Zm9vPyBbMCAtIDFdICAoIG8pXG4gICAgLy8gOmZvbysgWzEgLSDiiJ5dICAociApXG4gICAgLy8gOmZvbyogWzAgLSDiiJ5dICAocm8pXG4gICAgY29uc3QgcmVwZWF0ID0gbW9kID09PSBcIitcIiB8fCBtb2QgPT09IFwiKlwiO1xuICAgIGNvbnN0IG9wdGlvbmFsID0gbW9kID09PSBcIj9cIiB8fCBtb2QgPT09IFwiKlwiO1xuICAgIGNvbnN0IHByZWZpeCA9IG9wdGlvbmFsICYmIHBhdHRlcm5bbWF0Y2guaW5kZXggLSAxXSA9PT0gXCIvXCIgPyAxIDogMDtcblxuICAgIGNvbnN0IHByZXYgPSBwYXR0ZXJuLnN1YnN0cmluZyhsYXN0SW5kZXgsIG1hdGNoLmluZGV4IC0gcHJlZml4KTtcblxuICAgIGtleXMucHVzaCh7IG5hbWU6IHNlZ21lbnQgfSk7XG4gICAgbGFzdEluZGV4ID0gZ3JvdXBSeC5sYXN0SW5kZXg7XG5cbiAgICByZXN1bHQgKz0gZXNjYXBlUngocHJldikgKyByeEZvclNlZ21lbnQocmVwZWF0LCBvcHRpb25hbCwgcHJlZml4KTtcbiAgfVxuXG4gIHJlc3VsdCArPSBlc2NhcGVSeChwYXR0ZXJuLnN1YnN0cmluZyhsYXN0SW5kZXgpKTtcbiAgcmV0dXJuIHsga2V5cywgcmVnZXhwOiBuZXcgUmVnRXhwKFwiXlwiICsgcmVzdWx0ICsgXCIoPzpcXFxcLyk/JFwiLCBcImlcIikgfTtcbn07XG4iLCJpbXBvcnQgbG9jYXRpb25Ib29rIGZyb20gXCIuL3VzZS1sb2NhdGlvbi5qc1wiO1xuaW1wb3J0IG1hdGNoZXJXaXRoQ2FjaGUgZnJvbSBcIi4vbWF0Y2hlci5qc1wiO1xuXG5pbXBvcnQge1xuICB1c2VDb250ZXh0LFxuICBjcmVhdGVDb250ZXh0LFxuICBpc1ZhbGlkRWxlbWVudCxcbiAgY2xvbmVFbGVtZW50LFxuICBjcmVhdGVFbGVtZW50IGFzIGgsXG4gIEZyYWdtZW50LFxuICB1c2VTdGF0ZSxcbiAgZm9yd2FyZFJlZixcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCxcbiAgdXNlRXZlbnQsXG4gIHVzZUluc2VydGlvbkVmZmVjdCxcbn0gZnJvbSBcIi4vcmVhY3QtZGVwcy5qc1wiO1xuXG4vKlxuICogUm91dGVyIGFuZCByb3V0ZXIgY29udGV4dC4gUm91dGVyIGlzIGEgbGlnaHR3ZWlnaHQgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgY3VycmVudFxuICogcm91dGluZyBvcHRpb25zOiBob3cgbG9jYXRpb24gaXMgbWFuYWdlZCwgYmFzZSBwYXRoIGV0Yy5cbiAqXG4gKiBUaGVyZSBpcyBhIGRlZmF1bHQgcm91dGVyIHByZXNlbnQgZm9yIG1vc3Qgb2YgdGhlIHVzZSBjYXNlcywgaG93ZXZlciBpdCBjYW4gYmUgb3ZlcnJpZGRlblxuICogdmlhIHRoZSA8Um91dGVyIC8+IGNvbXBvbmVudC5cbiAqL1xuXG5jb25zdCBkZWZhdWx0Um91dGVyID0ge1xuICBob29rOiBsb2NhdGlvbkhvb2ssXG4gIG1hdGNoZXI6IG1hdGNoZXJXaXRoQ2FjaGUoKSxcbiAgYmFzZTogXCJcIixcbiAgLy8gdGhpcyBvcHRpb24gaXMgdXNlZCB0byBvdmVycmlkZSB0aGUgY3VycmVudCBsb2NhdGlvbiBkdXJpbmcgU1NSXG4gIC8vIHNzclBhdGg6IHVuZGVmaW5lZCxcbn07XG5cbmNvbnN0IFJvdXRlckN0eCA9IGNyZWF0ZUNvbnRleHQoZGVmYXVsdFJvdXRlcik7XG5cbi8vIGdldHMgdGhlIGNsb3Nlc3QgcGFyZW50IHJvdXRlciBmcm9tIHRoZSBjb250ZXh0XG5leHBvcnQgY29uc3QgdXNlUm91dGVyID0gKCkgPT4gdXNlQ29udGV4dChSb3V0ZXJDdHgpO1xuXG4vKlxuICogUGFydCAxLCBIb29rcyBBUEk6IHVzZVJvdXRlLCB1c2VMb2NhdGlvbiBhbmQgdXNlUGFyYW1zXG4gKi9cblxuLy8gSW50ZXJuYWwgdmVyc2lvbiBvZiB1c2VMb2NhdGlvbiB0byBhdm9pZCByZWR1bmRhbnQgdXNlUm91dGVyIGNhbGxzXG5jb25zdCB1c2VMb2NhdGlvbkZyb21Sb3V0ZXIgPSAocm91dGVyKSA9PiByb3V0ZXIuaG9vayhyb3V0ZXIpO1xuXG5leHBvcnQgY29uc3QgdXNlTG9jYXRpb24gPSAoKSA9PiB1c2VMb2NhdGlvbkZyb21Sb3V0ZXIodXNlUm91dGVyKCkpO1xuXG5leHBvcnQgY29uc3QgdXNlUm91dGUgPSAocGF0dGVybikgPT4ge1xuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgY29uc3QgW3BhdGhdID0gdXNlTG9jYXRpb25Gcm9tUm91dGVyKHJvdXRlcik7XG4gIHJldHVybiByb3V0ZXIubWF0Y2hlcihwYXR0ZXJuLCBwYXRoKTtcbn07XG5cbmNvbnN0IFBhcmFtc0N0eCA9IGNyZWF0ZUNvbnRleHQoeyBwYXJhbXM6IHt9IH0pO1xuZXhwb3J0IGNvbnN0IHVzZVBhcmFtcyA9ICgpID0+IHVzZUNvbnRleHQoUGFyYW1zQ3R4KS5wYXJhbXM7XG5cbi8qXG4gKiBQYXJ0IDIsIExvdyBDYXJiIFJvdXRlciBBUEk6IFJvdXRlciwgUm91dGUsIExpbmssIFN3aXRjaFxuICovXG5cbmV4cG9ydCBjb25zdCBSb3V0ZXIgPSAoe1xuICBob29rLFxuICBtYXRjaGVyLFxuICBzc3JQYXRoLFxuICBiYXNlID0gXCJcIixcbiAgcGFyZW50LFxuICBjaGlsZHJlbixcbn0pID0+IHtcbiAgLy8gdXBkYXRlcyB0aGUgY3VycmVudCByb3V0ZXIgd2l0aCB0aGUgcHJvcHMgcGFzc2VkIGRvd24gdG8gdGhlIGNvbXBvbmVudFxuICBjb25zdCB1cGRhdGVSb3V0ZXIgPSAocm91dGVyLCBwcm90byA9IHBhcmVudCB8fCBkZWZhdWx0Um91dGVyKSA9PiB7XG4gICAgcm91dGVyLmhvb2sgPSBob29rIHx8IHByb3RvLmhvb2s7XG4gICAgcm91dGVyLm1hdGNoZXIgPSBtYXRjaGVyIHx8IHByb3RvLm1hdGNoZXI7XG4gICAgcm91dGVyLnNzclBhdGggPSBzc3JQYXRoIHx8IHByb3RvLnNzclBhdGg7XG4gICAgcm91dGVyLm93bkJhc2UgPSBiYXNlO1xuXG4gICAgLy8gc3RvcmUgcmVmZXJlbmNlIHRvIHBhcmVudCByb3V0ZXJcbiAgICByb3V0ZXIucGFyZW50ID0gcGFyZW50O1xuXG4gICAgcmV0dXJuIHJvdXRlcjtcbiAgfTtcblxuICAvLyB3ZSB1c2UgYHVzZVN0YXRlYCBoZXJlLCBidXQgaXQgb25seSBjYXRjaGVzIHRoZSBmaXJzdCByZW5kZXIgYW5kIG5ldmVyIGNoYW5nZXMuXG4gIC8vIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ob29rcy1mYXEuaHRtbCNob3ctdG8tY3JlYXRlLWV4cGVuc2l2ZS1vYmplY3RzLWxhemlseVxuICBjb25zdCBbdmFsdWVdID0gdXNlU3RhdGUoKCkgPT5cbiAgICB1cGRhdGVSb3V0ZXIoe1xuICAgICAgLy8gV2UgbXVzdCBzdG9yZSBiYXNlIGFzIGEgcHJvcGVydHkgYWNjZXNzb3IgYmVjYXVzZSBlZmZlY3RzXG4gICAgICAvLyBzb21ld2hhdCBjb3VudGVyLWludHVpdGl2ZWx5IHJ1biBpbiBjaGlsZCBjb21wb25lbnRzICpmaXJzdCohXG4gICAgICAvLyBUaGlzIG1lYW5zIHRoYXQgYnkgdGhlIHRpbWUgYSBwYXJlbnQncyBiYXNlIGlzIHVwZGF0ZWQgaW4gdGhlXG4gICAgICAvLyBwYXJlbnQgZWZmZWN0LCB0aGUgY2hpbGQgZWZmZWN0IGhhcyBhbHJlYWR5IHJ1biwgYW5kIHNhd1xuICAgICAgLy8gdGhlIHBhcmVudCdzICpwcmV2aW91cyogYmFzZSBkdXJpbmcgaXRzIG93biBleGVjdXRpb24uXG4gICAgICBnZXQgYmFzZSgpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZS5wYXJlbnQgfHwgZGVmYXVsdFJvdXRlcikuYmFzZSArIHZhbHVlLm93bkJhc2U7XG4gICAgICB9LFxuICAgIH0pXG4gICk7IC8vIGNyZWF0ZSB0aGUgb2JqZWN0IG9uY2UuLi5cbiAgdXNlSW5zZXJ0aW9uRWZmZWN0KCgpID0+IHtcbiAgICB1cGRhdGVSb3V0ZXIodmFsdWUpO1xuICB9KTsgLy8gLi4udGhlbiB1cGRhdGUgaXQgb24gZWFjaCByZW5kZXJcblxuICByZXR1cm4gaChSb3V0ZXJDdHguUHJvdmlkZXIsIHtcbiAgICB2YWx1ZSxcbiAgICBjaGlsZHJlbixcbiAgfSk7XG59O1xuXG4vLyBIZWxwZXIgdG8gd3JhcCBjaGlsZHJlbiBjb21wb25lbnQgaW5zaWRlIHRoZSBQYXJhbXNDdHggcHJvdmlkZXJcbmNvbnN0IFBhcmFtc1dyYXBwZXIgPSAocGFyYW1zLCBjaGlsZHJlbikgPT5cbiAgaChQYXJhbXNDdHguUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogeyBwYXJhbXMgfSxcbiAgICBjaGlsZHJlbixcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBSb3V0ZSA9ICh7IHBhdGgsIG1hdGNoLCBjb21wb25lbnQsIGNoaWxkcmVuIH0pID0+IHtcbiAgY29uc3QgdXNlUm91dGVNYXRjaCA9IHVzZVJvdXRlKHBhdGgpO1xuXG4gIC8vIGBwcm9wcy5tYXRjaGAgaXMgcHJlc2VudCAtIFJvdXRlIGlzIGNvbnRyb2xsZWQgYnkgdGhlIFN3aXRjaFxuICBjb25zdCBbbWF0Y2hlcywgcGFyYW1zXSA9IG1hdGNoIHx8IHVzZVJvdXRlTWF0Y2g7XG5cbiAgaWYgKCFtYXRjaGVzKSByZXR1cm4gbnVsbDtcblxuICAvLyBSZWFjdC1Sb3V0ZXIgc3R5bGUgYGNvbXBvbmVudGAgcHJvcFxuICBpZiAoY29tcG9uZW50KSByZXR1cm4gUGFyYW1zV3JhcHBlcihwYXJhbXMsIGgoY29tcG9uZW50LCB7IHBhcmFtcyB9KSk7XG5cbiAgLy8gc3VwcG9ydCByZW5kZXIgcHJvcCBvciBwbGFpbiBjaGlsZHJlblxuICByZXR1cm4gUGFyYW1zV3JhcHBlcihcbiAgICBwYXJhbXMsXG4gICAgdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbihwYXJhbXMpIDogY2hpbGRyZW5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBMaW5rID0gZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgY29uc3QgWywgbmF2aWdhdGVdID0gdXNlTG9jYXRpb25Gcm9tUm91dGVyKHJvdXRlcik7XG5cbiAgY29uc3QgeyB0bywgaHJlZiA9IHRvLCBjaGlsZHJlbiwgb25DbGljayB9ID0gcHJvcHM7XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSB1c2VFdmVudCgoZXZlbnQpID0+IHtcbiAgICAvLyBpZ25vcmVzIHRoZSBuYXZpZ2F0aW9uIHdoZW4gY2xpY2tlZCB1c2luZyByaWdodCBtb3VzZSBidXR0b24gb3JcbiAgICAvLyBieSBob2xkaW5nIGEgc3BlY2lhbCBtb2RpZmllciBrZXk6IGN0cmwsIGNvbW1hbmQsIHdpbiwgYWx0LCBzaGlmdFxuICAgIGlmIChcbiAgICAgIGV2ZW50LmN0cmxLZXkgfHxcbiAgICAgIGV2ZW50Lm1ldGFLZXkgfHxcbiAgICAgIGV2ZW50LmFsdEtleSB8fFxuICAgICAgZXZlbnQuc2hpZnRLZXkgfHxcbiAgICAgIGV2ZW50LmJ1dHRvbiAhPT0gMFxuICAgIClcbiAgICAgIHJldHVybjtcblxuICAgIG9uQ2xpY2sgJiYgb25DbGljayhldmVudCk7XG4gICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbmF2aWdhdGUodG8gfHwgaHJlZiwgcHJvcHMpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gd3JhcHMgY2hpbGRyZW4gaW4gYGFgIGlmIG5lZWRlZFxuICBjb25zdCBleHRyYVByb3BzID0ge1xuICAgIC8vIGhhbmRsZSBuZXN0ZWQgcm91dGVycyBhbmQgYWJzb2x1dGUgcGF0aHNcbiAgICBocmVmOiBocmVmWzBdID09PSBcIn5cIiA/IGhyZWYuc2xpY2UoMSkgOiByb3V0ZXIuYmFzZSArIGhyZWYsXG4gICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgdG86IG51bGwsXG4gICAgcmVmLFxuICB9O1xuICBjb25zdCBqc3ggPSBpc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBjaGlsZHJlbiA6IGgoXCJhXCIsIHByb3BzKTtcblxuICByZXR1cm4gY2xvbmVFbGVtZW50KGpzeCwgZXh0cmFQcm9wcyk7XG59KTtcblxuY29uc3QgZmxhdHRlbkNoaWxkcmVuID0gKGNoaWxkcmVuKSA9PiB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgID8gW10uY29uY2F0KFxuICAgICAgICAuLi5jaGlsZHJlbi5tYXAoKGMpID0+XG4gICAgICAgICAgYyAmJiBjLnR5cGUgPT09IEZyYWdtZW50XG4gICAgICAgICAgICA/IGZsYXR0ZW5DaGlsZHJlbihjLnByb3BzLmNoaWxkcmVuKVxuICAgICAgICAgICAgOiBmbGF0dGVuQ2hpbGRyZW4oYylcbiAgICAgICAgKVxuICAgICAgKVxuICAgIDogW2NoaWxkcmVuXTtcbn07XG5cbmV4cG9ydCBjb25zdCBTd2l0Y2ggPSAoeyBjaGlsZHJlbiwgbG9jYXRpb24gfSkgPT4ge1xuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgY29uc3QgbWF0Y2hlciA9IHJvdXRlci5tYXRjaGVyO1xuICBjb25zdCBbb3JpZ2luYWxMb2NhdGlvbl0gPSB1c2VMb2NhdGlvbkZyb21Sb3V0ZXIocm91dGVyKTtcblxuICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZmxhdHRlbkNoaWxkcmVuKGNoaWxkcmVuKSkge1xuICAgIGxldCBtYXRjaCA9IDA7XG5cbiAgICBpZiAoXG4gICAgICBpc1ZhbGlkRWxlbWVudChlbGVtZW50KSAmJlxuICAgICAgLy8gd2UgZG9uJ3QgcmVxdWlyZSBhbiBlbGVtZW50IHRvIGJlIG9mIHR5cGUgUm91dGUsXG4gICAgICAvLyBidXQgd2UgZG8gcmVxdWlyZSBpdCB0byBjb250YWluIGEgdHJ1dGh5IGBwYXRoYCBwcm9wLlxuICAgICAgLy8gdGhpcyBhbGxvd3MgdG8gdXNlIGRpZmZlcmVudCBjb21wb25lbnRzIHRoYXQgd3JhcCBSb3V0ZVxuICAgICAgLy8gaW5zaWRlIG9mIGEgc3dpdGNoLCBmb3IgZXhhbXBsZSA8QW5pbWF0ZWRSb3V0ZSAvPi5cbiAgICAgIChtYXRjaCA9IGVsZW1lbnQucHJvcHMucGF0aFxuICAgICAgICA/IG1hdGNoZXIoZWxlbWVudC5wcm9wcy5wYXRoLCBsb2NhdGlvbiB8fCBvcmlnaW5hbExvY2F0aW9uKVxuICAgICAgICA6IFt0cnVlLCB7fV0pWzBdXG4gICAgKVxuICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChlbGVtZW50LCB7IG1hdGNoIH0pO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgUmVkaXJlY3QgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyB0bywgaHJlZiA9IHRvIH0gPSBwcm9wcztcbiAgY29uc3QgWywgbmF2aWdhdGVdID0gdXNlTG9jYXRpb24oKTtcbiAgY29uc3QgcmVkaXJlY3QgPSB1c2VFdmVudCgoKSA9PiBuYXZpZ2F0ZSh0byB8fCBocmVmLCBwcm9wcykpO1xuXG4gIC8vIHJlZGlyZWN0IGlzIGd1YXJhbnRlZWQgdG8gYmUgc3RhYmxlIHNpbmNlIGl0IGlzIHJldHVybmVkIGZyb20gdXNlRXZlbnRcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgcmVkaXJlY3QoKTtcbiAgfSwgW10pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuXG4gIHJldHVybiBudWxsO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlUm91dGU7XG4iLCJmdW5jdGlvbiBpKCl7dGhyb3cgbmV3IEVycm9yKFwiQ3ljbGUgZGV0ZWN0ZWRcIil9dmFyIHQ9U3ltYm9sLmZvcihcInByZWFjdC1zaWduYWxzXCIpO2Z1bmN0aW9uIHIoKXtpZighKHY+MSkpe3ZhciBpLHQ9ITE7d2hpbGUodm9pZCAwIT09Zil7dmFyIHI9ZjtmPXZvaWQgMDtlKys7d2hpbGUodm9pZCAwIT09cil7dmFyIG49ci5vO3Iubz12b2lkIDA7ci5mJj0tMztpZighKDgmci5mKSYmbChyKSl0cnl7ci5jKCl9Y2F0Y2gocil7aWYoIXQpe2k9cjt0PSEwfX1yPW59fWU9MDt2LS07aWYodCl0aHJvdyBpfWVsc2Ugdi0tfWZ1bmN0aW9uIG4oaSl7aWYodj4wKXJldHVybiBpKCk7disrO3RyeXtyZXR1cm4gaSgpfWZpbmFsbHl7cigpfX12YXIgbz12b2lkIDAsaD0wO2Z1bmN0aW9uIHMoaSl7aWYoaD4wKXJldHVybiBpKCk7dmFyIHQ9bztvPXZvaWQgMDtoKys7dHJ5e3JldHVybiBpKCl9ZmluYWxseXtoLS07bz10fX12YXIgZj12b2lkIDAsdj0wLGU9MCx1PTA7ZnVuY3Rpb24gYyhpKXtpZih2b2lkIDAhPT1vKXt2YXIgdD1pLm47aWYodm9pZCAwPT09dHx8dC50IT09byl7dD17aTowLFM6aSxwOm8ucyxuOnZvaWQgMCx0Om8sZTp2b2lkIDAseDp2b2lkIDAscjp0fTtpZih2b2lkIDAhPT1vLnMpby5zLm49dDtvLnM9dDtpLm49dDtpZigzMiZvLmYpaS5TKHQpO3JldHVybiB0fWVsc2UgaWYoLTE9PT10Lmkpe3QuaT0wO2lmKHZvaWQgMCE9PXQubil7dC5uLnA9dC5wO2lmKHZvaWQgMCE9PXQucCl0LnAubj10Lm47dC5wPW8uczt0Lm49dm9pZCAwO28ucy5uPXQ7by5zPXR9cmV0dXJuIHR9fX1mdW5jdGlvbiBkKGkpe3RoaXMudj1pO3RoaXMuaT0wO3RoaXMubj12b2lkIDA7dGhpcy50PXZvaWQgMH1kLnByb3RvdHlwZS5icmFuZD10O2QucHJvdG90eXBlLmg9ZnVuY3Rpb24oKXtyZXR1cm4hMH07ZC5wcm90b3R5cGUuUz1mdW5jdGlvbihpKXtpZih0aGlzLnQhPT1pJiZ2b2lkIDA9PT1pLmUpe2kueD10aGlzLnQ7aWYodm9pZCAwIT09dGhpcy50KXRoaXMudC5lPWk7dGhpcy50PWl9fTtkLnByb3RvdHlwZS5VPWZ1bmN0aW9uKGkpe2lmKHZvaWQgMCE9PXRoaXMudCl7dmFyIHQ9aS5lLHI9aS54O2lmKHZvaWQgMCE9PXQpe3QueD1yO2kuZT12b2lkIDB9aWYodm9pZCAwIT09cil7ci5lPXQ7aS54PXZvaWQgMH1pZihpPT09dGhpcy50KXRoaXMudD1yfX07ZC5wcm90b3R5cGUuc3Vic2NyaWJlPWZ1bmN0aW9uKGkpe3ZhciB0PXRoaXM7cmV0dXJuIE8oZnVuY3Rpb24oKXt2YXIgcj10LnZhbHVlLG49MzImdGhpcy5mO3RoaXMuZiY9LTMzO3RyeXtpKHIpfWZpbmFsbHl7dGhpcy5mfD1ufX0pfTtkLnByb3RvdHlwZS52YWx1ZU9mPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWV9O2QucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWUrXCJcIn07ZC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWV9O2QucHJvdG90eXBlLnBlZWs9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZC5wcm90b3R5cGUsXCJ2YWx1ZVwiLHtnZXQ6ZnVuY3Rpb24oKXt2YXIgaT1jKHRoaXMpO2lmKHZvaWQgMCE9PWkpaS5pPXRoaXMuaTtyZXR1cm4gdGhpcy52fSxzZXQ6ZnVuY3Rpb24odCl7aWYobyBpbnN0YW5jZW9mIF8pIWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiQ29tcHV0ZWQgY2Fubm90IGhhdmUgc2lkZS1lZmZlY3RzXCIpfSgpO2lmKHQhPT10aGlzLnYpe2lmKGU+MTAwKWkoKTt0aGlzLnY9dDt0aGlzLmkrKzt1Kys7disrO3RyeXtmb3IodmFyIG49dGhpcy50O3ZvaWQgMCE9PW47bj1uLngpbi50Lk4oKX1maW5hbGx5e3IoKX19fX0pO2Z1bmN0aW9uIGEoaSl7cmV0dXJuIG5ldyBkKGkpfWZ1bmN0aW9uIGwoaSl7Zm9yKHZhciB0PWkuczt2b2lkIDAhPT10O3Q9dC5uKWlmKHQuUy5pIT09dC5pfHwhdC5TLmgoKXx8dC5TLmkhPT10LmkpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24geShpKXtmb3IodmFyIHQ9aS5zO3ZvaWQgMCE9PXQ7dD10Lm4pe3ZhciByPXQuUy5uO2lmKHZvaWQgMCE9PXIpdC5yPXI7dC5TLm49dDt0Lmk9LTE7aWYodm9pZCAwPT09dC5uKXtpLnM9dDticmVha319fWZ1bmN0aW9uIHcoaSl7dmFyIHQ9aS5zLHI9dm9pZCAwO3doaWxlKHZvaWQgMCE9PXQpe3ZhciBuPXQucDtpZigtMT09PXQuaSl7dC5TLlUodCk7aWYodm9pZCAwIT09biluLm49dC5uO2lmKHZvaWQgMCE9PXQubil0Lm4ucD1ufWVsc2Ugcj10O3QuUy5uPXQucjtpZih2b2lkIDAhPT10LnIpdC5yPXZvaWQgMDt0PW59aS5zPXJ9ZnVuY3Rpb24gXyhpKXtkLmNhbGwodGhpcyx2b2lkIDApO3RoaXMueD1pO3RoaXMucz12b2lkIDA7dGhpcy5nPXUtMTt0aGlzLmY9NH0oXy5wcm90b3R5cGU9bmV3IGQpLmg9ZnVuY3Rpb24oKXt0aGlzLmYmPS0zO2lmKDEmdGhpcy5mKXJldHVybiExO2lmKDMyPT0oMzYmdGhpcy5mKSlyZXR1cm4hMDt0aGlzLmYmPS01O2lmKHRoaXMuZz09PXUpcmV0dXJuITA7dGhpcy5nPXU7dGhpcy5mfD0xO2lmKHRoaXMuaT4wJiYhbCh0aGlzKSl7dGhpcy5mJj0tMjtyZXR1cm4hMH12YXIgaT1vO3RyeXt5KHRoaXMpO289dGhpczt2YXIgdD10aGlzLngoKTtpZigxNiZ0aGlzLmZ8fHRoaXMudiE9PXR8fDA9PT10aGlzLmkpe3RoaXMudj10O3RoaXMuZiY9LTE3O3RoaXMuaSsrfX1jYXRjaChpKXt0aGlzLnY9aTt0aGlzLmZ8PTE2O3RoaXMuaSsrfW89aTt3KHRoaXMpO3RoaXMuZiY9LTI7cmV0dXJuITB9O18ucHJvdG90eXBlLlM9ZnVuY3Rpb24oaSl7aWYodm9pZCAwPT09dGhpcy50KXt0aGlzLmZ8PTM2O2Zvcih2YXIgdD10aGlzLnM7dm9pZCAwIT09dDt0PXQubil0LlMuUyh0KX1kLnByb3RvdHlwZS5TLmNhbGwodGhpcyxpKX07Xy5wcm90b3R5cGUuVT1mdW5jdGlvbihpKXtpZih2b2lkIDAhPT10aGlzLnQpe2QucHJvdG90eXBlLlUuY2FsbCh0aGlzLGkpO2lmKHZvaWQgMD09PXRoaXMudCl7dGhpcy5mJj0tMzM7Zm9yKHZhciB0PXRoaXMuczt2b2lkIDAhPT10O3Q9dC5uKXQuUy5VKHQpfX19O18ucHJvdG90eXBlLk49ZnVuY3Rpb24oKXtpZighKDImdGhpcy5mKSl7dGhpcy5mfD02O2Zvcih2YXIgaT10aGlzLnQ7dm9pZCAwIT09aTtpPWkueClpLnQuTigpfX07Xy5wcm90b3R5cGUucGVlaz1mdW5jdGlvbigpe2lmKCF0aGlzLmgoKSlpKCk7aWYoMTYmdGhpcy5mKXRocm93IHRoaXMudjtyZXR1cm4gdGhpcy52fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoXy5wcm90b3R5cGUsXCJ2YWx1ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtpZigxJnRoaXMuZilpKCk7dmFyIHQ9Yyh0aGlzKTt0aGlzLmgoKTtpZih2b2lkIDAhPT10KXQuaT10aGlzLmk7aWYoMTYmdGhpcy5mKXRocm93IHRoaXMudjtyZXR1cm4gdGhpcy52fX0pO2Z1bmN0aW9uIHAoaSl7cmV0dXJuIG5ldyBfKGkpfWZ1bmN0aW9uIGcoaSl7dmFyIHQ9aS51O2kudT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdCl7disrO3ZhciBuPW87bz12b2lkIDA7dHJ5e3QoKX1jYXRjaCh0KXtpLmYmPS0yO2kuZnw9ODtiKGkpO3Rocm93IHR9ZmluYWxseXtvPW47cigpfX19ZnVuY3Rpb24gYihpKXtmb3IodmFyIHQ9aS5zO3ZvaWQgMCE9PXQ7dD10Lm4pdC5TLlUodCk7aS54PXZvaWQgMDtpLnM9dm9pZCAwO2coaSl9ZnVuY3Rpb24geChpKXtpZihvIT09dGhpcyl0aHJvdyBuZXcgRXJyb3IoXCJPdXQtb2Ytb3JkZXIgZWZmZWN0XCIpO3codGhpcyk7bz1pO3RoaXMuZiY9LTI7aWYoOCZ0aGlzLmYpYih0aGlzKTtyKCl9ZnVuY3Rpb24gRShpKXt0aGlzLng9aTt0aGlzLnU9dm9pZCAwO3RoaXMucz12b2lkIDA7dGhpcy5vPXZvaWQgMDt0aGlzLmY9MzJ9RS5wcm90b3R5cGUuYz1mdW5jdGlvbigpe3ZhciBpPXRoaXMuUygpO3RyeXtpZig4JnRoaXMuZilyZXR1cm47aWYodm9pZCAwPT09dGhpcy54KXJldHVybjt2YXIgdD10aGlzLngoKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0KXRoaXMudT10fWZpbmFsbHl7aSgpfX07RS5wcm90b3R5cGUuUz1mdW5jdGlvbigpe2lmKDEmdGhpcy5mKWkoKTt0aGlzLmZ8PTE7dGhpcy5mJj0tOTtnKHRoaXMpO3kodGhpcyk7disrO3ZhciB0PW87bz10aGlzO3JldHVybiB4LmJpbmQodGhpcyx0KX07RS5wcm90b3R5cGUuTj1mdW5jdGlvbigpe2lmKCEoMiZ0aGlzLmYpKXt0aGlzLmZ8PTI7dGhpcy5vPWY7Zj10aGlzfX07RS5wcm90b3R5cGUuZD1mdW5jdGlvbigpe3RoaXMuZnw9ODtpZighKDEmdGhpcy5mKSliKHRoaXMpfTtmdW5jdGlvbiBPKGkpe3ZhciB0PW5ldyBFKGkpO3RyeXt0LmMoKX1jYXRjaChpKXt0LmQoKTt0aHJvdyBpfXJldHVybiB0LmQuYmluZCh0KX1leHBvcnR7ZCBhcyBTaWduYWwsbiBhcyBiYXRjaCxwIGFzIGNvbXB1dGVkLE8gYXMgZWZmZWN0LGEgYXMgc2lnbmFsLHMgYXMgdW50cmFja2VkfTsvLyMgc291cmNlTWFwcGluZ1VSTD1zaWduYWxzLWNvcmUubW9kdWxlLmpzLm1hcFxuIiwiaW1wb3J0e0NvbXBvbmVudCBhcyBuLG9wdGlvbnMgYXMgcixpc1ZhbGlkRWxlbWVudCBhcyBpfWZyb21cInByZWFjdFwiO2ltcG9ydHt1c2VNZW1vIGFzIHQsdXNlUmVmIGFzIGYsdXNlRWZmZWN0IGFzIG99ZnJvbVwicHJlYWN0L2hvb2tzXCI7aW1wb3J0e1NpZ25hbCBhcyBlLGNvbXB1dGVkIGFzIHUsc2lnbmFsIGFzIGEsZWZmZWN0IGFzIGN9ZnJvbVwiQHByZWFjdC9zaWduYWxzLWNvcmVcIjtleHBvcnR7U2lnbmFsLGJhdGNoLGNvbXB1dGVkLGVmZmVjdCxzaWduYWwsdW50cmFja2VkfWZyb21cIkBwcmVhY3Qvc2lnbmFscy1jb3JlXCI7dmFyIHYscztmdW5jdGlvbiBsKG4saSl7cltuXT1pLmJpbmQobnVsbCxyW25dfHxmdW5jdGlvbigpe30pfWZ1bmN0aW9uIGQobil7aWYocylzKCk7cz1uJiZuLlMoKX1mdW5jdGlvbiBwKG4pe3ZhciByPXRoaXMsZj1uLmRhdGEsbz11c2VTaWduYWwoZik7by52YWx1ZT1mO3ZhciBlPXQoZnVuY3Rpb24oKXt2YXIgbj1yLl9fdjt3aGlsZShuPW4uX18paWYobi5fX2Mpe24uX19jLl9fJGZ8PTQ7YnJlYWt9ci5fXyR1LmM9ZnVuY3Rpb24oKXt2YXIgbjtpZighaShlLnBlZWsoKSkmJjM9PT0obnVsbD09KG49ci5iYXNlKT92b2lkIDA6bi5ub2RlVHlwZSkpci5iYXNlLmRhdGE9ZS5wZWVrKCk7ZWxzZXtyLl9fJGZ8PTE7ci5zZXRTdGF0ZSh7fSl9fTtyZXR1cm4gdShmdW5jdGlvbigpe3ZhciBuPW8udmFsdWUudmFsdWU7cmV0dXJuIDA9PT1uPzA6ITA9PT1uP1wiXCI6bnx8XCJcIn0pfSxbXSk7cmV0dXJuIGUudmFsdWV9cC5kaXNwbGF5TmFtZT1cIl9zdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7Y29uZmlndXJhYmxlOiEwLHZhbHVlOnZvaWQgMH0sdHlwZTp7Y29uZmlndXJhYmxlOiEwLHZhbHVlOnB9LHByb3BzOntjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue2RhdGE6dGhpc319fSxfX2I6e2NvbmZpZ3VyYWJsZTohMCx2YWx1ZToxfX0pO2woXCJfX2JcIixmdW5jdGlvbihuLHIpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiByLnR5cGUpe3ZhciBpLHQ9ci5wcm9wcztmb3IodmFyIGYgaW4gdClpZihcImNoaWxkcmVuXCIhPT1mKXt2YXIgbz10W2ZdO2lmKG8gaW5zdGFuY2VvZiBlKXtpZighaSlyLl9fbnA9aT17fTtpW2ZdPW87dFtmXT1vLnBlZWsoKX19fW4ocil9KTtsKFwiX19yXCIsZnVuY3Rpb24obixyKXtkKCk7dmFyIGksdD1yLl9fYztpZih0KXt0Ll9fJGYmPS0yO2lmKHZvaWQgMD09PShpPXQuX18kdSkpdC5fXyR1PWk9ZnVuY3Rpb24obil7dmFyIHI7YyhmdW5jdGlvbigpe3I9dGhpc30pO3IuYz1mdW5jdGlvbigpe3QuX18kZnw9MTt0LnNldFN0YXRlKHt9KX07cmV0dXJuIHJ9KCl9dj10O2QoaSk7bihyKX0pO2woXCJfX2VcIixmdW5jdGlvbihuLHIsaSx0KXtkKCk7dj12b2lkIDA7bihyLGksdCl9KTtsKFwiZGlmZmVkXCIsZnVuY3Rpb24obixyKXtkKCk7dj12b2lkIDA7dmFyIGk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHIudHlwZSYmKGk9ci5fX2UpKXt2YXIgdD1yLl9fbnAsZj1yLnByb3BzO2lmKHQpe3ZhciBvPWkuVTtpZihvKWZvcih2YXIgZSBpbiBvKXt2YXIgdT1vW2VdO2lmKHZvaWQgMCE9PXUmJiEoZSBpbiB0KSl7dS5kKCk7b1tlXT12b2lkIDB9fWVsc2UgaS5VPW89e307Zm9yKHZhciBhIGluIHQpe3ZhciBjPW9bYV0scz10W2FdO2lmKHZvaWQgMD09PWMpe2M9XyhpLGEscyxmKTtvW2FdPWN9ZWxzZSBjLm8ocyxmKX19fW4ocil9KTtmdW5jdGlvbiBfKG4scixpLHQpe3ZhciBmPXIgaW4gbiYmdm9pZCAwPT09bi5vd25lclNWR0VsZW1lbnQsbz1hKGkpO3JldHVybntvOmZ1bmN0aW9uKG4scil7by52YWx1ZT1uO3Q9cn0sZDpjKGZ1bmN0aW9uKCl7dmFyIGk9by52YWx1ZS52YWx1ZTtpZih0W3JdIT09aSl7dFtyXT1pO2lmKGYpbltyXT1pO2Vsc2UgaWYoaSluLnNldEF0dHJpYnV0ZShyLGkpO2Vsc2Ugbi5yZW1vdmVBdHRyaWJ1dGUocil9fSl9fWwoXCJ1bm1vdW50XCIsZnVuY3Rpb24obixyKXtpZihcInN0cmluZ1wiPT10eXBlb2Ygci50eXBlKXt2YXIgaT1yLl9fZTtpZihpKXt2YXIgdD1pLlU7aWYodCl7aS5VPXZvaWQgMDtmb3IodmFyIGYgaW4gdCl7dmFyIG89dFtmXTtpZihvKW8uZCgpfX19fWVsc2V7dmFyIGU9ci5fX2M7aWYoZSl7dmFyIHU9ZS5fXyR1O2lmKHUpe2UuX18kdT12b2lkIDA7dS5kKCl9fX1uKHIpfSk7bChcIl9faFwiLGZ1bmN0aW9uKG4scixpLHQpe2lmKHQ8M3x8OT09PXQpci5fXyRmfD0yO24ocixpLHQpfSk7bi5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlPWZ1bmN0aW9uKG4scil7dmFyIGk9dGhpcy5fXyR1O2lmKCEoaSYmdm9pZCAwIT09aS5zfHw0JnRoaXMuX18kZikpcmV0dXJuITA7aWYoMyZ0aGlzLl9fJGYpcmV0dXJuITA7Zm9yKHZhciB0IGluIHIpcmV0dXJuITA7Zm9yKHZhciBmIGluIG4paWYoXCJfX3NvdXJjZVwiIT09ZiYmbltmXSE9PXRoaXMucHJvcHNbZl0pcmV0dXJuITA7Zm9yKHZhciBvIGluIHRoaXMucHJvcHMpaWYoIShvIGluIG4pKXJldHVybiEwO3JldHVybiExfTtmdW5jdGlvbiB1c2VTaWduYWwobil7cmV0dXJuIHQoZnVuY3Rpb24oKXtyZXR1cm4gYShuKX0sW10pfWZ1bmN0aW9uIHVzZUNvbXB1dGVkKG4pe3ZhciByPWYobik7ci5jdXJyZW50PW47di5fXyRmfD00O3JldHVybiB0KGZ1bmN0aW9uKCl7cmV0dXJuIHUoZnVuY3Rpb24oKXtyZXR1cm4gci5jdXJyZW50KCl9KX0sW10pfWZ1bmN0aW9uIHVzZVNpZ25hbEVmZmVjdChuKXt2YXIgcj1mKG4pO3IuY3VycmVudD1uO28oZnVuY3Rpb24oKXtyZXR1cm4gYyhmdW5jdGlvbigpe3JldHVybiByLmN1cnJlbnQoKX0pfSxbXSl9ZXhwb3J0e3VzZUNvbXB1dGVkLHVzZVNpZ25hbCx1c2VTaWduYWxFZmZlY3R9Oy8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25hbHMubW9kdWxlLmpzLm1hcFxuIiwidHlwZSBMaXN0ZW5lciA9ICh2YWx1ZTogYW55KSA9PiB2b2lkO1xuXG50eXBlIFRvcGljcyA9IHtcbiAgICBbbmFtZTogc3RyaW5nXTogTGlzdGVuZXJbXTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVQdWJTdWIgPSAoKSA9PiB7XG4gICAgbGV0IHRvcGljczogVG9waWNzID0ge307XG4gICAgbGV0IGRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gICAgY29uc3QgZ2V0VG9waWMgPSAobmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmICghdG9waWNzW25hbWVdKSB7XG4gICAgICAgICAgICB0b3BpY3NbbmFtZV0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b3BpY3NbbmFtZV07XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHN1YnNjcmliZSh0b3BpYzogc3RyaW5nLCBmbjogTGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IGdldFRvcGljKHRvcGljKTtcblxuICAgICAgICAgICAgbGlzdGVuZXJzLnB1c2goZm4pO1xuXG4gICAgICAgICAgICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGZuKTtcblxuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHB1Ymxpc2godG9waWM6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgICAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gZ2V0VG9waWModG9waWMpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudExpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSgpO1xuXG4gICAgICAgICAgICBjdXJyZW50TGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFkZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICB0b3BpY3MgPSB7fTtcbiAgICAgICAgICAgIGRlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBTb25nIH0gZnJvbSAnc3JjL2VudGl0aWVzL3NvbmcnO1xuaW1wb3J0IHsgY3JlYXRlUHViU3ViIH0gZnJvbSAnLi4vcHVic3ViJztcbmltcG9ydCB7IGNyZWF0ZUF1ZGlvIH0gZnJvbSAnLi9hdWRpbyc7XG5pbXBvcnQgeyBTdGF0ZSwgVHJhY2sgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgY3JlYXRlUGxheWVyID0gKCkgPT4ge1xuICAgIGNvbnN0IHB1YnN1YiA9IGNyZWF0ZVB1YlN1YigpO1xuICAgIGNvbnN0IGF1ZGlvID0gY3JlYXRlQXVkaW8oKTtcblxuICAgIGxldCBzdGF0ZTogU3RhdGUgPSB7XG4gICAgICAgIC4uLmF1ZGlvLmdldFN0YXRlKCksXG4gICAgICAgIHRyYWNrczogW10sXG4gICAgICAgIGN1cnJlbnRUcmFja0luZGV4OiBudWxsLFxuICAgICAgICBjdXJyZW50VHJhY2s6IG51bGwsXG4gICAgfTtcblxuICAgIGNvbnN0IHNldFN0YXRlID0gKHZhbHVlOiBQYXJ0aWFsPFN0YXRlPikgPT4ge1xuICAgICAgICBzdGF0ZSA9IHsgLi4uc3RhdGUsIC4uLnZhbHVlIH07XG5cbiAgICAgICAgcHVic3ViLnB1Ymxpc2goJ2NoYW5nZScsIHN0YXRlKTtcbiAgICB9O1xuXG4gICAgYXVkaW8uc3Vic2NyaWJlKHNldFN0YXRlKTtcblxuICAgIGNvbnN0IGNoYW5nZVRyYWNrID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0cmFjayA9IHN0YXRlLmN1cnJlbnRUcmFjaztcblxuICAgICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgICAgIGF1ZGlvLnNldFVybCh0cmFjay51cmwpO1xuICAgICAgICAgICAgYXVkaW8ucGxheSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IG5leHQgPSAoKSA9PiB7XG4gICAgICAgIGlmIChzdGF0ZS5jdXJyZW50VHJhY2tJbmRleCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gc3RhdGUudHJhY2tzLmxlbmd0aCAtIDE7XG4gICAgICAgIGNvbnN0IG5ld0luZGV4ID0gc3RhdGUuY3VycmVudFRyYWNrSW5kZXggKyAxO1xuXG4gICAgICAgIGlmIChuZXdJbmRleCA8PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VHJhY2tJbmRleDogbmV3SW5kZXgsXG4gICAgICAgICAgICAgICAgY3VycmVudFRyYWNrOiBzdGF0ZS50cmFja3NbbmV3SW5kZXhdLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNoYW5nZVRyYWNrKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgYXVkaW8ub25FbmRlZChuZXh0KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHBsYXk6IGF1ZGlvLnBsYXksXG4gICAgICAgIHBhdXNlOiBhdWRpby5wYXVzZSxcbiAgICAgICAgc2VlazogYXVkaW8uc2VlayxcbiAgICAgICAgdm9sdW1lOiBhdWRpby52b2x1bWUsXG4gICAgICAgIGdldEN1cnJlbnRUaW1lOiBhdWRpby5nZXRDdXJyZW50VGltZSxcbiAgICAgICAgZ2V0RWxlbWVudDogYXVkaW8uZ2V0RWxlbWVudCxcbiAgICAgICAgb25DaGFuZ2VDdXJyZW50VGltZTogYXVkaW8ub25DaGFuZ2VDdXJyZW50VGltZSxcblxuICAgICAgICBnZXRTdGF0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRRdWV1ZSh0cmFja3M6IFRyYWNrW10pIHtcbiAgICAgICAgICAgIHNldFN0YXRlKHsgdHJhY2tzIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBsYXlUcmFjayh0cmFja0luZGV4OiBudW1iZXIpIHtcbiAgICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VHJhY2tJbmRleDogdHJhY2tJbmRleCxcbiAgICAgICAgICAgICAgICBjdXJyZW50VHJhY2s6IHN0YXRlLnRyYWNrc1t0cmFja0luZGV4XSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjaGFuZ2VUcmFjaygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG5leHQsXG5cbiAgICAgICAgcHJldigpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5jdXJyZW50VHJhY2tJbmRleCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbmV3SW5kZXggPSBzdGF0ZS5jdXJyZW50VHJhY2tJbmRleCAtIDE7XG5cbiAgICAgICAgICAgIGlmIChuZXdJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VHJhY2s6IHN0YXRlLnRyYWNrc1tuZXdJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUcmFja0luZGV4OiBuZXdJbmRleCxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNoYW5nZVRyYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3Vic2NyaWJlKGxpc3RlbmVyOiAobmV3U3RhdGU6IFN0YXRlKSA9PiB2b2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gcHVic3ViLnN1YnNjcmliZSgnY2hhbmdlJywgbGlzdGVuZXIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZVNvbmdTdGF0dXMoaWQ6IHN0cmluZywgc3RhdHVzOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gc3RhdGUudHJhY2tzLmZpbmRJbmRleCh0cmFjayA9PiB0cmFjay5zb25nLmlkID09PSBpZClcbiAgICAgICAgICAgIGNvbnN0IHRyYWNrcyA9IFsuLi5zdGF0ZS50cmFja3NdXG5cbiAgICAgICAgICAgIHRyYWNrc1tpbmRleF0uc3RhdHVzID0gc3RhdHVzXG5cbiAgICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICB0cmFja3MsXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfTtcbn07XG5cbmNvbnN0IHBsYXllciA9IGNyZWF0ZVBsYXllcigpO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF5ZXI7XG4iLCJpbXBvcnQgeyBjcmVhdGVQdWJTdWIgfSBmcm9tICcuLi9wdWJzdWInO1xuaW1wb3J0IHsgQXVkaW9TdGF0ZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlQXVkaW8gPSAoKSA9PiB7XG4gICAgY29uc3QgcHVic3ViID0gY3JlYXRlUHViU3ViKCk7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG5cbiAgICBsZXQgY3VycmVudFRpbWUgPSAwO1xuXG4gICAgbGV0IHN0YXRlOiBBdWRpb1N0YXRlID0ge1xuICAgICAgICBkdXJhdGlvbjogMCxcbiAgICAgICAgcGxheWluZzogZmFsc2UsXG4gICAgICAgIHZvbHVtZTogMCxcbiAgICB9O1xuXG4gICAgY29uc3Qgc2V0U3RhdGUgPSAodmFsdWU6IFBhcnRpYWw8QXVkaW9TdGF0ZT4pID0+IHtcbiAgICAgICAgc3RhdGUgPSB7IC4uLnN0YXRlLCAuLi52YWx1ZSB9O1xuXG4gICAgICAgIHB1YnN1Yi5wdWJsaXNoKCdjaGFuZ2UnLCBzdGF0ZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHNldHVwID0gKCkgPT4ge1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2R1cmF0aW9uY2hhbmdlJywgKCkgPT5cbiAgICAgICAgICAgIHNldFN0YXRlKHsgZHVyYXRpb246IGVsZW1lbnQuZHVyYXRpb24gfSksXG4gICAgICAgICk7XG5cbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdwbGF5aW5nJywgKCkgPT4gc2V0U3RhdGUoeyBwbGF5aW5nOiB0cnVlIH0pKTtcblxuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BhdXNlJywgKCkgPT4gc2V0U3RhdGUoeyBwbGF5aW5nOiBmYWxzZSB9KSk7XG5cbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3Q3VycmVudFRpbWUgPSBNYXRoLnJvdW5kKGVsZW1lbnQuY3VycmVudFRpbWUpO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudFRpbWUgIT09IG5ld0N1cnJlbnRUaW1lKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFRpbWUgPSBuZXdDdXJyZW50VGltZTtcblxuICAgICAgICAgICAgICAgIHB1YnN1Yi5wdWJsaXNoKCdjaGFuZ2UtY3VycmVudC10aW1lJywgY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3ZvbHVtZWNoYW5nZScsICgpID0+XG4gICAgICAgICAgICBzZXRTdGF0ZSh7IHZvbHVtZTogZWxlbWVudC52b2x1bWUgfSksXG4gICAgICAgICk7XG5cbiAgICAgICAgc2V0U3RhdGUoeyB2b2x1bWU6IGVsZW1lbnQudm9sdW1lIH0pO1xuICAgIH07XG5cbiAgICBzZXR1cCgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VlayhzZWNvbmRzOiBudW1iZXIpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY3VycmVudFRpbWUgPSBzZWNvbmRzO1xuICAgICAgICAgICAgY3VycmVudFRpbWUgPSBzZWNvbmRzO1xuXG4gICAgICAgICAgICBwdWJzdWIucHVibGlzaCgnY2hhbmdlLWN1cnJlbnQtdGltZScsIGN1cnJlbnRUaW1lKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRFbGVtZW50KCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0U3RhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFRpbWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGxheSgpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucGxheSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBhdXNlKCkge1xuICAgICAgICAgICAgZWxlbWVudC5wYXVzZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHZvbHVtZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgICAgICBlbGVtZW50LnZvbHVtZSA9IHZhbHVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldFVybCh1cmw6IHN0cmluZykge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3NyYycsIHVybCk7XG4gICAgICAgICAgICBzZXRTdGF0ZSh7IHBsYXlpbmc6IGZhbHNlIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN1YnNjcmliZShsaXN0ZW5lcjogKG5ld1N0YXRlOiBBdWRpb1N0YXRlKSA9PiB2b2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gcHVic3ViLnN1YnNjcmliZSgnY2hhbmdlJywgbGlzdGVuZXIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG9uQ2hhbmdlQ3VycmVudFRpbWUobGlzdGVuZXI6IChuZXdDdXJyZW50VGltZTogbnVtYmVyKSA9PiB2b2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gcHVic3ViLnN1YnNjcmliZSgnY2hhbmdlLWN1cnJlbnQtdGltZScsIGxpc3RlbmVyKTtcbiAgICAgICAgfSxcblxuICAgICAgICBvbkVuZGVkKGxpc3RlbmVyOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgbGlzdGVuZXIpO1xuXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdlbmRlZCcsIGxpc3RlbmVyKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbiIsImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xuaW1wb3J0IHBsYXllciBmcm9tICcuL3BsYXllcic7XG5cbmV4cG9ydCBjb25zdCB1c2VQbGF5ZXJTdGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHBsYXllci5nZXRTdGF0ZSgpKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gcGxheWVyLnN1YnNjcmliZShzZXRTdGF0ZSk7XG5cbiAgICAgICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiBzdGF0ZTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VDdXJyZW50VGltZSA9ICgpID0+IHtcbiAgICBjb25zdCBbY3VycmVudFRpbWUsIHNldEN1cnJlbnRUaW1lXSA9IHVzZVN0YXRlKHBsYXllci5nZXRDdXJyZW50VGltZSgpKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gcGxheWVyLm9uQ2hhbmdlQ3VycmVudFRpbWUoc2V0Q3VycmVudFRpbWUpO1xuXG4gICAgICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gY3VycmVudFRpbWU7XG59O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi93aGVlbC5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vd2hlZWwuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImNvbnN0IGluc3RhbmNlT2ZBbnkgPSAob2JqZWN0LCBjb25zdHJ1Y3RvcnMpID0+IGNvbnN0cnVjdG9ycy5zb21lKChjKSA9PiBvYmplY3QgaW5zdGFuY2VvZiBjKTtcblxubGV0IGlkYlByb3h5YWJsZVR5cGVzO1xubGV0IGN1cnNvckFkdmFuY2VNZXRob2RzO1xuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRJZGJQcm94eWFibGVUeXBlcygpIHtcbiAgICByZXR1cm4gKGlkYlByb3h5YWJsZVR5cGVzIHx8XG4gICAgICAgIChpZGJQcm94eWFibGVUeXBlcyA9IFtcbiAgICAgICAgICAgIElEQkRhdGFiYXNlLFxuICAgICAgICAgICAgSURCT2JqZWN0U3RvcmUsXG4gICAgICAgICAgICBJREJJbmRleCxcbiAgICAgICAgICAgIElEQkN1cnNvcixcbiAgICAgICAgICAgIElEQlRyYW5zYWN0aW9uLFxuICAgICAgICBdKSk7XG59XG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cbmZ1bmN0aW9uIGdldEN1cnNvckFkdmFuY2VNZXRob2RzKCkge1xuICAgIHJldHVybiAoY3Vyc29yQWR2YW5jZU1ldGhvZHMgfHxcbiAgICAgICAgKGN1cnNvckFkdmFuY2VNZXRob2RzID0gW1xuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5hZHZhbmNlLFxuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5jb250aW51ZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWVQcmltYXJ5S2V5LFxuICAgICAgICBdKSk7XG59XG5jb25zdCBjdXJzb3JSZXF1ZXN0TWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zYWN0aW9uRG9uZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3QocmVxdWVzdCkge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSh3cmFwKHJlcXVlc3QucmVzdWx0KSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChyZXF1ZXN0LmVycm9yKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgIH0pO1xuICAgIHByb21pc2VcbiAgICAgICAgLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgIC8vIFNpbmNlIGN1cnNvcmluZyByZXVzZXMgdGhlIElEQlJlcXVlc3QgKCpzaWdoKiksIHdlIGNhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWxcbiAgICAgICAgLy8gKHNlZSB3cmFwRnVuY3Rpb24pLlxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJDdXJzb3IpIHtcbiAgICAgICAgICAgIGN1cnNvclJlcXVlc3RNYXAuc2V0KHZhbHVlLCByZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYXRjaGluZyB0byBhdm9pZCBcIlVuY2F1Z2h0IFByb21pc2UgZXhjZXB0aW9uc1wiXG4gICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgLy8gVGhpcyBtYXBwaW5nIGV4aXN0cyBpbiByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYnV0IGRvZXNuJ3QgZG9lc24ndCBleGlzdCBpbiB0cmFuc2Zvcm1DYWNoZS4gVGhpc1xuICAgIC8vIGlzIGJlY2F1c2Ugd2UgY3JlYXRlIG1hbnkgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0LlxuICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQocHJvbWlzZSwgcmVxdWVzdCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odHgpIHtcbiAgICAvLyBFYXJseSBiYWlsIGlmIHdlJ3ZlIGFscmVhZHkgY3JlYXRlZCBhIGRvbmUgcHJvbWlzZSBmb3IgdGhpcyB0cmFuc2FjdGlvbi5cbiAgICBpZiAodHJhbnNhY3Rpb25Eb25lTWFwLmhhcyh0eCkpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBkb25lID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdCh0eC5lcnJvciB8fCBuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydEVycm9yJywgJ0Fib3J0RXJyb3InKSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xuICAgIH0pO1xuICAgIC8vIENhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWwuXG4gICAgdHJhbnNhY3Rpb25Eb25lTWFwLnNldCh0eCwgZG9uZSk7XG59XG5sZXQgaWRiUHJveHlUcmFwcyA9IHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yIHRyYW5zYWN0aW9uLmRvbmUuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2RvbmUnKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbkRvbmVNYXAuZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICAvLyBQb2x5ZmlsbCBmb3Igb2JqZWN0U3RvcmVOYW1lcyBiZWNhdXNlIG9mIEVkZ2UuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ29iamVjdFN0b3JlTmFtZXMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5vYmplY3RTdG9yZU5hbWVzIHx8IHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE1ha2UgdHguc3RvcmUgcmV0dXJuIHRoZSBvbmx5IHN0b3JlIGluIHRoZSB0cmFuc2FjdGlvbiwgb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGFyZSBtYW55LlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdzdG9yZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIub2JqZWN0U3RvcmVOYW1lc1sxXVxuICAgICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6IHJlY2VpdmVyLm9iamVjdFN0b3JlKHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEVsc2UgdHJhbnNmb3JtIHdoYXRldmVyIHdlIGdldCBiYWNrLlxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXRbcHJvcF0pO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24gJiZcbiAgICAgICAgICAgIChwcm9wID09PSAnZG9uZScgfHwgcHJvcCA9PT0gJ3N0b3JlJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wIGluIHRhcmdldDtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIHJlcGxhY2VUcmFwcyhjYWxsYmFjaykge1xuICAgIGlkYlByb3h5VHJhcHMgPSBjYWxsYmFjayhpZGJQcm94eVRyYXBzKTtcbn1cbmZ1bmN0aW9uIHdyYXBGdW5jdGlvbihmdW5jKSB7XG4gICAgLy8gRHVlIHRvIGV4cGVjdGVkIG9iamVjdCBlcXVhbGl0eSAod2hpY2ggaXMgZW5mb3JjZWQgYnkgdGhlIGNhY2hpbmcgaW4gYHdyYXBgKSwgd2VcbiAgICAvLyBvbmx5IGNyZWF0ZSBvbmUgbmV3IGZ1bmMgcGVyIGZ1bmMuXG4gICAgLy8gRWRnZSBkb2Vzbid0IHN1cHBvcnQgb2JqZWN0U3RvcmVOYW1lcyAoYm9vbyksIHNvIHdlIHBvbHlmaWxsIGl0IGhlcmUuXG4gICAgaWYgKGZ1bmMgPT09IElEQkRhdGFiYXNlLnByb3RvdHlwZS50cmFuc2FjdGlvbiAmJlxuICAgICAgICAhKCdvYmplY3RTdG9yZU5hbWVzJyBpbiBJREJUcmFuc2FjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3RvcmVOYW1lcywgLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgdHggPSBmdW5jLmNhbGwodW53cmFwKHRoaXMpLCBzdG9yZU5hbWVzLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5zZXQodHgsIHN0b3JlTmFtZXMuc29ydCA/IHN0b3JlTmFtZXMuc29ydCgpIDogW3N0b3JlTmFtZXNdKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKHR4KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ3Vyc29yIG1ldGhvZHMgYXJlIHNwZWNpYWwsIGFzIHRoZSBiZWhhdmlvdXIgaXMgYSBsaXR0bGUgbW9yZSBkaWZmZXJlbnQgdG8gc3RhbmRhcmQgSURCLiBJblxuICAgIC8vIElEQiwgeW91IGFkdmFuY2UgdGhlIGN1cnNvciBhbmQgd2FpdCBmb3IgYSBuZXcgJ3N1Y2Nlc3MnIG9uIHRoZSBJREJSZXF1ZXN0IHRoYXQgZ2F2ZSB5b3UgdGhlXG4gICAgLy8gY3Vyc29yLiBJdCdzIGtpbmRhIGxpa2UgYSBwcm9taXNlIHRoYXQgY2FuIHJlc29sdmUgd2l0aCBtYW55IHZhbHVlcy4gVGhhdCBkb2Vzbid0IG1ha2Ugc2Vuc2VcbiAgICAvLyB3aXRoIHJlYWwgcHJvbWlzZXMsIHNvIGVhY2ggYWR2YW5jZSBtZXRob2RzIHJldHVybnMgYSBuZXcgcHJvbWlzZSBmb3IgdGhlIGN1cnNvciBvYmplY3QsIG9yXG4gICAgLy8gdW5kZWZpbmVkIGlmIHRoZSBlbmQgb2YgdGhlIGN1cnNvciBoYXMgYmVlbiByZWFjaGVkLlxuICAgIGlmIChnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpLmluY2x1ZGVzKGZ1bmMpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJveHkgYXMgJ3RoaXMnIGNhdXNlcyBJTExFR0FMIElOVk9DQVRJT04sIHNvIHdlIHVzZVxuICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgICAgIGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKGN1cnNvclJlcXVlc3RNYXAuZ2V0KHRoaXMpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIC8vIENhbGxpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3h5IGFzICd0aGlzJyBjYXVzZXMgSUxMRUdBTCBJTlZPQ0FUSU9OLCBzbyB3ZSB1c2VcbiAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHdyYXAoZnVuYy5hcHBseSh1bndyYXAodGhpcyksIGFyZ3MpKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB3cmFwRnVuY3Rpb24odmFsdWUpO1xuICAgIC8vIFRoaXMgZG9lc24ndCByZXR1cm4sIGl0IGp1c3QgY3JlYXRlcyBhICdkb25lJyBwcm9taXNlIGZvciB0aGUgdHJhbnNhY3Rpb24sXG4gICAgLy8gd2hpY2ggaXMgbGF0ZXIgcmV0dXJuZWQgZm9yIHRyYW5zYWN0aW9uLmRvbmUgKHNlZSBpZGJPYmplY3RIYW5kbGVyKS5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbilcbiAgICAgICAgY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uKHZhbHVlKTtcbiAgICBpZiAoaW5zdGFuY2VPZkFueSh2YWx1ZSwgZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSkpXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodmFsdWUsIGlkYlByb3h5VHJhcHMpO1xuICAgIC8vIFJldHVybiB0aGUgc2FtZSB2YWx1ZSBiYWNrIGlmIHdlJ3JlIG5vdCBnb2luZyB0byB0cmFuc2Zvcm0gaXQuXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gd3JhcCh2YWx1ZSkge1xuICAgIC8vIFdlIHNvbWV0aW1lcyBnZW5lcmF0ZSBtdWx0aXBsZSBwcm9taXNlcyBmcm9tIGEgc2luZ2xlIElEQlJlcXVlc3QgKGVnIHdoZW4gY3Vyc29yaW5nKSwgYmVjYXVzZVxuICAgIC8vIElEQiBpcyB3ZWlyZCBhbmQgYSBzaW5nbGUgSURCUmVxdWVzdCBjYW4geWllbGQgbWFueSByZXNwb25zZXMsIHNvIHRoZXNlIGNhbid0IGJlIGNhY2hlZC5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJSZXF1ZXN0KVxuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdCh2YWx1ZSk7XG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSB0cmFuc2Zvcm1lZCB0aGlzIHZhbHVlIGJlZm9yZSwgcmV1c2UgdGhlIHRyYW5zZm9ybWVkIHZhbHVlLlxuICAgIC8vIFRoaXMgaXMgZmFzdGVyLCBidXQgaXQgYWxzbyBwcm92aWRlcyBvYmplY3QgZXF1YWxpdHkuXG4gICAgaWYgKHRyYW5zZm9ybUNhY2hlLmhhcyh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSk7XG4gICAgLy8gTm90IGFsbCB0eXBlcyBhcmUgdHJhbnNmb3JtZWQuXG4gICAgLy8gVGhlc2UgbWF5IGJlIHByaW1pdGl2ZSB0eXBlcywgc28gdGhleSBjYW4ndCBiZSBXZWFrTWFwIGtleXMuXG4gICAgaWYgKG5ld1ZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICB0cmFuc2Zvcm1DYWNoZS5zZXQodmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChuZXdWYWx1ZSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3VmFsdWU7XG59XG5jb25zdCB1bndyYXAgPSAodmFsdWUpID0+IHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuXG5leHBvcnQgeyByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYXMgYSwgaW5zdGFuY2VPZkFueSBhcyBpLCByZXBsYWNlVHJhcHMgYXMgciwgdW53cmFwIGFzIHUsIHdyYXAgYXMgdyB9O1xuIiwiaW1wb3J0IHsgdyBhcyB3cmFwLCByIGFzIHJlcGxhY2VUcmFwcyB9IGZyb20gJy4vd3JhcC1pZGItdmFsdWUuanMnO1xuZXhwb3J0IHsgdSBhcyB1bndyYXAsIHcgYXMgd3JhcCB9IGZyb20gJy4vd3JhcC1pZGItdmFsdWUuanMnO1xuXG4vKipcbiAqIE9wZW4gYSBkYXRhYmFzZS5cbiAqXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cbiAqIEBwYXJhbSB2ZXJzaW9uIFNjaGVtYSB2ZXJzaW9uLlxuICogQHBhcmFtIGNhbGxiYWNrcyBBZGRpdGlvbmFsIGNhbGxiYWNrcy5cbiAqL1xuZnVuY3Rpb24gb3BlbkRCKG5hbWUsIHZlcnNpb24sIHsgYmxvY2tlZCwgdXBncmFkZSwgYmxvY2tpbmcsIHRlcm1pbmF0ZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pO1xuICAgIGNvbnN0IG9wZW5Qcm9taXNlID0gd3JhcChyZXF1ZXN0KTtcbiAgICBpZiAodXBncmFkZSkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3VwZ3JhZGVuZWVkZWQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHVwZ3JhZGUod3JhcChyZXF1ZXN0LnJlc3VsdCksIGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIHdyYXAocmVxdWVzdC50cmFuc2FjdGlvbiksIGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChibG9ja2VkKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsIChldmVudCkgPT4gYmxvY2tlZChcbiAgICAgICAgLy8gQ2FzdGluZyBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0LURPTS1saWItZ2VuZXJhdG9yL3B1bGwvMTQwNVxuICAgICAgICBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCBldmVudCkpO1xuICAgIH1cbiAgICBvcGVuUHJvbWlzZVxuICAgICAgICAudGhlbigoZGIpID0+IHtcbiAgICAgICAgaWYgKHRlcm1pbmF0ZWQpXG4gICAgICAgICAgICBkYi5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IHRlcm1pbmF0ZWQoKSk7XG4gICAgICAgIGlmIChibG9ja2luZykge1xuICAgICAgICAgICAgZGIuYWRkRXZlbnRMaXN0ZW5lcigndmVyc2lvbmNoYW5nZScsIChldmVudCkgPT4gYmxvY2tpbmcoZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgZXZlbnQpKTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgIHJldHVybiBvcGVuUHJvbWlzZTtcbn1cbi8qKlxuICogRGVsZXRlIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKi9cbmZ1bmN0aW9uIGRlbGV0ZURCKG5hbWUsIHsgYmxvY2tlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKG5hbWUpO1xuICAgIGlmIChibG9ja2VkKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsIChldmVudCkgPT4gYmxvY2tlZChcbiAgICAgICAgLy8gQ2FzdGluZyBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0LURPTS1saWItZ2VuZXJhdG9yL3B1bGwvMTQwNVxuICAgICAgICBldmVudC5vbGRWZXJzaW9uLCBldmVudCkpO1xuICAgIH1cbiAgICByZXR1cm4gd3JhcChyZXF1ZXN0KS50aGVuKCgpID0+IHVuZGVmaW5lZCk7XG59XG5cbmNvbnN0IHJlYWRNZXRob2RzID0gWydnZXQnLCAnZ2V0S2V5JywgJ2dldEFsbCcsICdnZXRBbGxLZXlzJywgJ2NvdW50J107XG5jb25zdCB3cml0ZU1ldGhvZHMgPSBbJ3B1dCcsICdhZGQnLCAnZGVsZXRlJywgJ2NsZWFyJ107XG5jb25zdCBjYWNoZWRNZXRob2RzID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkge1xuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIElEQkRhdGFiYXNlICYmXG4gICAgICAgICEocHJvcCBpbiB0YXJnZXQpICYmXG4gICAgICAgIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FjaGVkTWV0aG9kcy5nZXQocHJvcCkpXG4gICAgICAgIHJldHVybiBjYWNoZWRNZXRob2RzLmdldChwcm9wKTtcbiAgICBjb25zdCB0YXJnZXRGdW5jTmFtZSA9IHByb3AucmVwbGFjZSgvRnJvbUluZGV4JC8sICcnKTtcbiAgICBjb25zdCB1c2VJbmRleCA9IHByb3AgIT09IHRhcmdldEZ1bmNOYW1lO1xuICAgIGNvbnN0IGlzV3JpdGUgPSB3cml0ZU1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpO1xuICAgIGlmIChcbiAgICAvLyBCYWlsIGlmIHRoZSB0YXJnZXQgZG9lc24ndCBleGlzdCBvbiB0aGUgdGFyZ2V0LiBFZywgZ2V0QWxsIGlzbid0IGluIEVkZ2UuXG4gICAgISh0YXJnZXRGdW5jTmFtZSBpbiAodXNlSW5kZXggPyBJREJJbmRleCA6IElEQk9iamVjdFN0b3JlKS5wcm90b3R5cGUpIHx8XG4gICAgICAgICEoaXNXcml0ZSB8fCByZWFkTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gYXN5bmMgZnVuY3Rpb24gKHN0b3JlTmFtZSwgLi4uYXJncykge1xuICAgICAgICAvLyBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiB1bmRlZmluZWQgZ3ppcHBzIGJldHRlciwgYnV0IGZhaWxzIGluIEVkZ2UgOihcbiAgICAgICAgY29uc3QgdHggPSB0aGlzLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogJ3JlYWRvbmx5Jyk7XG4gICAgICAgIGxldCB0YXJnZXQgPSB0eC5zdG9yZTtcbiAgICAgICAgaWYgKHVzZUluZGV4KVxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LmluZGV4KGFyZ3Muc2hpZnQoKSk7XG4gICAgICAgIC8vIE11c3QgcmVqZWN0IGlmIG9wIHJlamVjdHMuXG4gICAgICAgIC8vIElmIGl0J3MgYSB3cml0ZSBvcGVyYXRpb24sIG11c3QgcmVqZWN0IGlmIHR4LmRvbmUgcmVqZWN0cy5cbiAgICAgICAgLy8gTXVzdCByZWplY3Qgd2l0aCBvcCByZWplY3Rpb24gZmlyc3QuXG4gICAgICAgIC8vIE11c3QgcmVzb2x2ZSB3aXRoIG9wIHZhbHVlLlxuICAgICAgICAvLyBNdXN0IGhhbmRsZSBib3RoIHByb21pc2VzIChubyB1bmhhbmRsZWQgcmVqZWN0aW9ucylcbiAgICAgICAgcmV0dXJuIChhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0RnVuY05hbWVdKC4uLmFyZ3MpLFxuICAgICAgICAgICAgaXNXcml0ZSAmJiB0eC5kb25lLFxuICAgICAgICBdKSlbMF07XG4gICAgfTtcbiAgICBjYWNoZWRNZXRob2RzLnNldChwcm9wLCBtZXRob2QpO1xuICAgIHJldHVybiBtZXRob2Q7XG59XG5yZXBsYWNlVHJhcHMoKG9sZFRyYXBzKSA9PiAoe1xuICAgIC4uLm9sZFRyYXBzLFxuICAgIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+IGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSxcbiAgICBoYXM6ICh0YXJnZXQsIHByb3ApID0+ICEhZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuaGFzKHRhcmdldCwgcHJvcCksXG59KSk7XG5cbmV4cG9ydCB7IGRlbGV0ZURCLCBvcGVuREIgfTtcbiIsImltcG9ydCB7IHNpZ25hbCB9IGZyb20gJ0BwcmVhY3Qvc2lnbmFscyc7XG5pbXBvcnQgeyBvcGVuREIsIERCU2NoZW1hIH0gZnJvbSAnaWRiJztcblxuZXhwb3J0IHR5cGUgU29uZyA9IHtcbiAgICBpZDogc3RyaW5nLFxuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgaW5zdHJ1bWVudGF0aW9uOiBzdHJpbmcsXG4gICAgc291cmNlOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcsXG4gICAgdGVtcG86IG51bWJlcixcbiAgICBtZXRlcjogc3RyaW5nLFxuICAgIGR1cmF0aW9uOiBudW1iZXIsXG4gICAgc3RhdHVzOiBzdHJpbmcsXG4gICAgY292ZXJfZmlsZXBhdGg6IHN0cmluZyxcbiAgICBkb3dubG9hZF9maWxlcGF0aDogc3RyaW5nLFxuICAgIHJlY29yZF9maWxlcGF0aDogc3RyaW5nLFxuICAgIGNyZWF0ZWRfYXQ6IGFueSxcbiAgICB1cGRhdGVkX2F0OiBhbnksXG59XG5cbmV4cG9ydCB0eXBlIFNvbmdGaWxlID0ge1xuICAgIHNvbmdJRDogc3RyaW5nLFxuICAgIGZpbGU6IEJsb2Jcbn1cblxuZXhwb3J0IHR5cGUgU29uZ1N0YXR1cyA9IHtcbiAgICBzb25nSUQ6IHN0cmluZyxcbiAgICBzdGF0dXM6IHN0cmluZ1xufVxuXG5leHBvcnQgY29uc3Qgc29uZ3MgPSBzaWduYWwobmV3IEFycmF5PFNvbmc+KCkpO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNvbmdEQiBleHRlbmRzIERCU2NoZW1hIHtcbiAgICBzb25nczoge1xuICAgICAgICB2YWx1ZTogU29uZztcbiAgICAgICAga2V5OiBzdHJpbmc7XG4gICAgICAgIGluZGV4ZXM6IHsgJ2J5LWtleSc6IHN0cmluZyB9O1xuICAgIH07XG4gICAgc29uZ0ZpbGU6IHtcbiAgICAgICAgdmFsdWU6IFNvbmdGaWxlO1xuICAgICAgICBrZXk6IHN0cmluZztcbiAgICB9O1xuICAgIHNvbmdTdGF0dXM6IHtcbiAgICAgICAgdmFsdWU6IFNvbmdTdGF0dXM7XG4gICAgICAgIGtleTogc3RyaW5nO1xuICAgIH07XG59XG5cblxuZXhwb3J0IGNvbnN0IHNvbmdEQiA9IG9wZW5EQjxTb25nREI+KCdzb25nLWRiJywgMSwge1xuICAgIHVwZ3JhZGUoZGIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJVUEdSQURFIERCXCIpXG4gICAgICAgIGNvbnN0IHNvbmdTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKFwic29uZ3NcIiwge1xuICAgICAgICAgICAga2V5UGF0aDogJ2lkJyxcbiAgICAgICAgfSk7XG4gICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKFwic29uZ0ZpbGVcIiwge1xuICAgICAgICAgICAga2V5UGF0aDogJ3NvbmdJRCcsXG4gICAgICAgIH0pO1xuICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZShcInNvbmdTdGF0dXNcIiwge1xuICAgICAgICAgICAga2V5UGF0aDogJ3NvbmdJRCcsXG4gICAgICAgIH0pO1xuICAgICAgICBzb25nU3RvcmUuY3JlYXRlSW5kZXgoJ2J5LWtleScsICdrZXknKTtcbiAgICB9LFxufSk7IiwiaW1wb3J0IHsgU29uZywgU29uZ0RCLCBTb25nRmlsZSwgU29uZ1N0YXR1cywgc29uZ0RCIH0gZnJvbSBcIi4uL2VudGl0aWVzL3NvbmdcIlxuaW1wb3J0IHsgSURCUERhdGFiYXNlIH0gZnJvbSBcImlkYlwiXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzbGVlcChzZWNvbmRzOiBudW1iZXIsIG1heDogbnVtYmVyIHwgbnVsbCA9IG51bGwpIHtcbiAgICBpZiAobWF4ICE9PSBudWxsKSB7XG4gICAgICAgIHNlY29uZHMgKz0gTWF0aC5yYW5kb20oKSAqIChtYXggLSBzZWNvbmRzKVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHNlY29uZHMgKiAxMDAwKSlcbn1cblxuY2xhc3MgU29uZ0NvbnRyb2xsZXIge1xuICAgIGRiOiBJREJQRGF0YWJhc2U8U29uZ0RCPlxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaW5pdCgpXG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5kYiA9IGF3YWl0IHNvbmdEQlxuICAgIH1cblxuICAgIGFzeW5jIGNyZWF0ZShzb25nOiBTb25nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJDcmVhdGUgc29uZ1wiLCBzb25nKVxuXG4gICAgICAgIGNvbnN0IHN0YXR1cyA9IGF3YWl0IHRoaXMuZ2V0U3RhdHVzKHNvbmcuaWQpXG5cbiAgICAgICAgaWYgKCFzdGF0dXMpIHtcbiAgICAgICAgICAgIGF3YWl0IHNvbmdDb250cm9sbGVyLmNyZWF0ZVN0YXR1cyhzb25nLmlkLCBzb25nLnN0YXR1cylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmRiLnB1dChcInNvbmdzXCIsIHNvbmcpXG4gICAgfVxuXG4gICAgYXN5bmMgY3JlYXRlRmlsZShzb25nSUQ6IHN0cmluZywgZmlsZTogQmxvYikge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5kYi5wdXQoXCJzb25nRmlsZVwiLCB7XG4gICAgICAgICAgICBzb25nSUQsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGFzeW5jIGNyZWF0ZVN0YXR1cyhzb25nSUQ6IHN0cmluZywgc3RhdHVzOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZGIucHV0KFwic29uZ1N0YXR1c1wiLCB7XG4gICAgICAgICAgICBzb25nSUQsXG4gICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0KGlkOiBzdHJpbmcpOiBQcm9taXNlPFNvbmc+IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZGIuZ2V0KFwic29uZ3NcIiwgaWQpXG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RmlsZShpZDogc3RyaW5nKTogUHJvbWlzZTxTb25nRmlsZT4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5kYi5nZXQoXCJzb25nRmlsZVwiLCBpZClcbiAgICB9XG5cbiAgICBhc3luYyBnZXRTdGF0dXMoaWQ6IHN0cmluZyk6IFByb21pc2U8U29uZ1N0YXR1cz4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5kYi5nZXQoXCJzb25nU3RhdHVzXCIsIGlkKVxuICAgIH1cblxuICAgIGFzeW5jIHJlbmFtZShpZDogc3RyaW5nLCB0aXRsZTogc3RyaW5nKTogUHJvbWlzZTxTb25nPiB7XG4gICAgICAgIGxldCBzb25nID0gYXdhaXQgdGhpcy5nZXQoaWQpXG5cbiAgICAgICAgc29uZy50aXRsZSA9IHRpdGxlXG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0KGF3YWl0IHRoaXMuZGIucHV0KFwic29uZ3NcIiwgc29uZykpXG4gICAgfVxuXG4gICAgYXN5bmMgZmxhZ0Rvd25sb2FkKGlkOiBzdHJpbmcsIHBsYXllcjogYW55KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGxldCBzb25nID0gYXdhaXQgdGhpcy5kYi5nZXQoXCJzb25nU3RhdHVzXCIsIGlkKVxuXG4gICAgICAgIHNvbmcuc3RhdHVzID0gXCJ0b19kb3dubG9hZFwiXG5cbiAgICAgICAgYXdhaXQgdGhpcy5kYi5wdXQoXCJzb25nU3RhdHVzXCIsIHNvbmcpXG4gICAgICAgIHBsYXllci51cGRhdGVTb25nU3RhdHVzKGlkLCBcInRvX2Rvd25sb2FkXCIpXG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QWxsKCk6IFByb21pc2U8QXJyYXk8U29uZz4+IHtcbiAgICAgICAgaWYgKCF0aGlzLmRiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwKDEpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLmdldEFsbCgpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZGIuZ2V0QWxsKFwic29uZ3NcIilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGZsYWdEZWxldGUoaWQ6IHN0cmluZywgcGxheWVyOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgbGV0IHNvbmcgPSBhd2FpdCB0aGlzLmRiLmdldChcInNvbmdTdGF0dXNcIiwgaWQpXG5cbiAgICAgICAgc29uZy5zdGF0dXMgPSBcInRvX2RlbGV0ZVwiXG5cbiAgICAgICAgYXdhaXQgdGhpcy5kYi5wdXQoXCJzb25nU3RhdHVzXCIsIHNvbmcpXG4gICAgICAgIHBsYXllci51cGRhdGVTb25nU3RhdHVzKGlkLCBcInRvX2RlbGV0ZVwiKVxuICAgIH1cblxuICAgIGFzeW5jIGRlbGV0ZShpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmRiLmRlbGV0ZShcInNvbmdzXCIsIGlkKVxuICAgIH1cbn1cblxuY29uc3Qgc29uZ0NvbnRyb2xsZXIgPSBuZXcgU29uZ0NvbnRyb2xsZXIoKVxuXG5leHBvcnQgZGVmYXVsdCBzb25nQ29udHJvbGxlciIsImltcG9ydCB7IHVzZVJlZiB9IGZyb20gXCJwcmVhY3QvaG9va3NcIlxuaW1wb3J0IHsgZWZmZWN0LCBzaWduYWwgfSBmcm9tIFwiQHByZWFjdC9zaWduYWxzXCJcbmltcG9ydCBwbGF5ZXIsIHsgdXNlUGxheWVyU3RhdGUgfSBmcm9tIFwiLi4vbGlicy9wbGF5ZXJcIlxuXG5pbXBvcnQgXCIuL3doZWVsLnNjc3NcIlxuaW1wb3J0IHsgU29uZyB9IGZyb20gXCIuLi9lbnRpdGllcy9zb25nXCJcbmltcG9ydCBzb25nQ29udHJvbGxlciBmcm9tIFwiLi4vY29udHJvbGxlcnMvc29uZ0NvbnRyb2xsZXJcIlxuXG5jb25zdCBjaG9zZW4gPSBzaWduYWwoMClcbmNvbnN0IHNob3dpbmcgPSBzaWduYWwoZmFsc2UpXG5jb25zdCB4ID0gc2lnbmFsKDApXG5jb25zdCB5ID0gc2lnbmFsKDApXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFdoZWVsKCkge1xuICAgIGNvbnN0IHN0YXRlID0gdXNlUGxheWVyU3RhdGUoKTtcblxuICAgIGNvbnN0IG1pbiA9IDE1XG4gICAgY29uc3Qgb2Zmc2V0WSA9IDk2XG5cbiAgICBjb25zdCBuTWVhc3VyZSA9IDhcblxuICAgIGNvbnN0IHNvbmdNZWFzdXJlVGltZSA9IChzb25nOiBTb25nKSA9PiB7XG4gICAgICAgIHJldHVybiBzb25nLmR1cmF0aW9uIC8gNjBcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVQbGF5ID0gKCkgPT4ge1xuICAgICAgICBpZiAoc3RhdGUuY3VycmVudFRyYWNrSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5wbGF5aW5nKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLnBhdXNlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBsYXllci5wbGF5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGSVhNRSBQbGF5IGZpcnN0IHRyYWNrIHRvIGxpc3RlblxuICAgICAgICAgICAgcGxheWVyLnBsYXlUcmFjaygwKVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IG9uTW91c2VEb3duID0gKHsgY2xpZW50WCwgY2xpZW50WSB9OiBhbnkpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJvbk1vdXNlRG93blwiKVxuICAgICAgICBzaG93aW5nLnZhbHVlID0gdHJ1ZVxuICAgICAgICB4LnZhbHVlID0gY2xpZW50WFxuICAgICAgICB5LnZhbHVlID0gY2xpZW50WSArIG9mZnNldFlcbiAgICB9XG5cbiAgICBjb25zdCBvbk1vdXNlVXAgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwib25Nb3VzZVVwXCIpXG4gICAgICAgIHNob3dpbmcudmFsdWUgPSBmYWxzZVxuXG4gICAgICAgIHN3aXRjaCAoY2hvc2VuLnZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgLy8gUGF1c2VcbiAgICAgICAgICAgICAgICBoYW5kbGVQbGF5KClcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIC8vIEZvcndhcmRcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuY3VycmVudFRyYWNrICE9PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc2VlayhwbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKSArIHNvbmdNZWFzdXJlVGltZShzdGF0ZS5jdXJyZW50VHJhY2suc29uZykgKiBuTWVhc3VyZSlcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIC8vIE5leHRcbiAgICAgICAgICAgICAgICBwbGF5ZXIubmV4dCgpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAvLyBTYXZlXG4gICAgICAgICAgICAgICAgYXdhaXQgc29uZ0NvbnRyb2xsZXIuZmxhZ0Rvd25sb2FkKHN0YXRlLmN1cnJlbnRUcmFjay5zb25nLmlkLCBwbGF5ZXIpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAvLyBSZXNldFxuICAgICAgICAgICAgICAgIGFsZXJ0KFwiUmVzZXRcIilcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIC8vIERlbGV0ZVxuICAgICAgICAgICAgICAgIGF3YWl0IHNvbmdDb250cm9sbGVyLmZsYWdEZWxldGUoc3RhdGUuY3VycmVudFRyYWNrLnNvbmcuaWQsIHBsYXllcilcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIC8vIFByZXZpb3VzXG4gICAgICAgICAgICAgICAgcGxheWVyLnByZXYoKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgLy8gQmFja3dhcmRcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuY3VycmVudFRyYWNrICE9PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc2VlayhwbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKSAtIHNvbmdNZWFzdXJlVGltZShzdGF0ZS5jdXJyZW50VHJhY2suc29uZykgKiBuTWVhc3VyZSlcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgY2hvc2VuLnZhbHVlID0gMFxuICAgICAgICB0aGlzLndoZWVsLnNldEF0dHJpYnV0ZShcImRhdGEtY2hvc2VuXCIsIDApXG4gICAgfVxuXG4gICAgY29uc3Qgb25Nb3VzZU1vdmUgPSAoeyBjbGllbnRYLCBjbGllbnRZIH06IGFueSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIm9uTW91c2VNb3ZlXCIpXG4gICAgICAgIGlmICghc2hvd2luZy52YWx1ZSkgcmV0dXJuXG5cbiAgICAgICAgbGV0IGR4ID0gY2xpZW50WCAtIHgudmFsdWVcbiAgICAgICAgbGV0IGR5ID0gY2xpZW50WSAtIHkudmFsdWUgKyBvZmZzZXRZXG4gICAgICAgIGxldCBtYWcgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpXG4gICAgICAgIGxldCBpbmRleCA9IHVuZGVmaW5lZFxuXG4gICAgICAgIGlmIChtYWcgPj0gbWluKSB7XG4gICAgICAgICAgICBsZXQgZGVnID0gTWF0aC5hdGFuMihkeSwgZHgpICsgMC42MjUgKiBNYXRoLlBJXG4gICAgICAgICAgICB3aGlsZSAoZGVnIDwgMCkgZGVnICs9IE1hdGguUEkgKiAyXG4gICAgICAgICAgICBpbmRleCA9IE1hdGguZmxvb3IoZGVnIC8gTWF0aC5QSSAqIDQpICsgMVxuICAgICAgICB9XG5cbiAgICAgICAgY2hvc2VuLnZhbHVlID0gaW5kZXhcbiAgICAgICAgdGhpcy53aGVlbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNob3NlblwiLCBpbmRleClcbiAgICB9XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtgcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuIGgtc2NyZWVuIHctc2NyZWVuYH1cbiAgICAgICAgb25Db250ZXh0TWVudT17KGU6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgfX1cbiAgICAgICAgb25Nb3VzZURvd249e29uTW91c2VEb3dufVxuICAgICAgICBvbk1vdXNlTW92ZT17b25Nb3VzZU1vdmV9XG4gICAgICAgIG9uTW91c2VVcD17b25Nb3VzZVVwfVxuICAgICAgICBvblRvdWNoU3RhcnQ9e2UgPT4gb25Nb3VzZURvd24oZS50b3VjaGVzWzBdKX1cbiAgICAgICAgb25Ub3VjaE1vdmU9e2UgPT4gb25Nb3VzZU1vdmUoZS50b3VjaGVzWzBdKX1cbiAgICAgICAgb25Ub3VjaEVuZD17ZSA9PiBvbk1vdXNlVXAoKX1cblxuICAgID5cbiAgICAgICAge3Nob3dpbmcgJiYgPGRpdlxuICAgICAgICAgICAgcmVmPXt3aGVlbCA9PiB0aGlzLndoZWVsID0gd2hlZWx9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2B3aGVlbCR7c2hvd2luZy52YWx1ZSA/ICcgb24nIDogJyd9YH1cbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgXCItLXhcIjogYCR7eC52YWx1ZX1weGAsXG4gICAgICAgICAgICAgICAgXCItLXlcIjogYCR7eS52YWx1ZX1weGBcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhcmNcIiBzdHlsZT17eyBcIi0tY29sb3JcIjogXCIjM2IwNzY0XCIsIFwiLS1jb2xvci1ib3JkZXJcIjogXCIjM2IwNzY0XCIgfX0+e3N0YXRlLnBsYXlpbmcgPyA8aSBjbGFzc05hbWU9XCJmYXMgZmEtcGF1c2VcIj48L2k+IDogPGkgY2xhc3NOYW1lPVwiZmFzIGZhLXBsYXlcIj48L2k+fTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhcmNcIiBzdHlsZT17eyBcIi0tY29sb3JcIjogXCIjMmUxMDY1XCIsIFwiLS1jb2xvci1ib3JkZXJcIjogXCIjMmUxMDY1XCIgfX0+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLWFuZ2xlcy1yaWdodFwiPjwvaT48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXJjXCIgc3R5bGU9e3sgXCItLWNvbG9yXCI6IFwiIzFlMWI0YlwiLCBcIi0tY29sb3ItYm9yZGVyXCI6IFwiIzFlMWI0YlwiIH19PjxpIGNsYXNzTmFtZT1cImZhcyBmYS1hbmdsZS1yaWdodFwiPjwvaT48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXJjXCIgc3R5bGU9e3sgXCItLWNvbG9yXCI6IFwiIzE3YTM0YVwiLCBcIi0tY29sb3ItYm9yZGVyXCI6IFwiIzE3YTM0YVwiIH19PjxpIGNsYXNzTmFtZT1cImZhcyBmYS1zYXZlXCI+PC9pPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhcmNcIiBzdHlsZT17eyBcIi0tY29sb3JcIjogXCIjMjU2M2ViXCIsIFwiLS1jb2xvci1ib3JkZXJcIjogXCIjMjU2M2ViXCIgfX0+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLXJvdGF0ZS1sZWZ0XCI+PC9pPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhcmNcIiBzdHlsZT17eyBcIi0tY29sb3JcIjogXCIjZGMyNjI1XCIsIFwiLS1jb2xvci1ib3JkZXJcIjogXCIjZGMyNjI1XCIgfX0+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLXRyYXNoLWFsdFwiPjwvaT48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXJjXCIgc3R5bGU9e3sgXCItLWNvbG9yXCI6IFwiIzFlMWI0YlwiLCBcIi0tY29sb3ItYm9yZGVyXCI6IFwiIzFlMWI0YlwiIH19PjxpIGNsYXNzTmFtZT1cImZhcyBmYS1hbmdsZS1sZWZ0XCI+PC9pPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhcmNcIiBzdHlsZT17eyBcIi0tY29sb3JcIjogXCIjMmUxMDY1XCIsIFwiLS1jb2xvci1ib3JkZXJcIjogXCIjMmUxMDY1XCIgfX0+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLWFuZ2xlcy1sZWZ0XCI+PC9pPjwvZGl2PlxuICAgICAgICA8L2Rpdj59XG4gICAgPC9kaXYgPlxufSIsImltcG9ydCBXaGVlbCBmcm9tIFwiLi9XaGVlbFwiO1xuXG5jb25zdCBjb2xvcnMgPSBbXCJyZWRcIiwgXCJvcmFuZ2VcIiwgXCJ5ZWxsb3dcIiwgXCJncmVlblwiLCBcImJsdWVcIiwgXCJwdXJwbGVcIl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE11c2ljUGxheWVyKCkge1xuICAgIC8vIHJldHVybiA8PlxuICAgIC8vICAgICA8ZGl2IGNsYXNzTmFtZT1cInctZnVsbCBoLTIgYmctcmVkLTYwMFwiPlxuICAgIC8vICAgICAgICAgey8qIFByb2dyZXNzIGJhciAqL31cbiAgICAvLyAgICAgPC9kaXY+XG4gICAgLy8gICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtYXV0byBwLTQgZmxleCBpdGVtcy1jZW50ZXIgZGFyazpiZy1ncmF5LTkwMFwiPlxuICAgIC8vICAgICAgICAgey8qIDxpbWcgY2xhc3NOYW1lPVwidy0xNlwiIHNyYz1cIi4vaW1nL2ljb24xOTIucG5nXCIgYWx0PVwiXCIgLz4gKi99XG4gICAgLy8gICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cIm1zLTRcIj5QcmV2PC9idXR0b24+XG4gICAgLy8gICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgbXgtYXV0byBpdGVtcy1jZW50ZXJcIj5cbiAgICAvLyAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctMTYgaC0xNiBiZy1yZWQtNjAwIHJvdW5kZWQtbWRcIj48L2Rpdj5cbiAgICAvLyAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQteHMgdGV4dC1jZW50ZXIgbXQtMlwiPlxuICAgIC8vICAgICAgICAgICAgICAgICA8ZGl2PjI4NGEyZmY5LTVlOTktNDg1My05NDM3LTg3MDgyMTJhZjA1NDwvZGl2PlxuICAgIC8vICAgICAgICAgICAgICAgICA8ZGl2PkMjIHwgMTIwIEJwbTwvZGl2PlxuICAgIC8vICAgICAgICAgICAgIDwvZGl2PlxuICAgIC8vICAgICAgICAgPC9kaXY+XG4gICAgLy8gICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lLTRcIj5cbiAgICAvLyAgICAgICAgICAgICA8YnV0dG9uPk5leHQ8L2J1dHRvbj5cbiAgICAvLyAgICAgICAgIDwvZGl2PlxuICAgIC8vICAgICA8L2Rpdj5cbiAgICAvLyA8Lz5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJyZWxhdGl2ZVwiPlxuICAgICAgICB7LyogPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtMS8yIGxlZnQtMS80IHRyYW5zbGF0ZS15LTEvMiB0ZXh0LTJ4bFwiPuKJqjwvZGl2PiAqL31cblxuICAgICAgICA8V2hlZWwgLz5cbiAgICAgICAgey8qIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgdG9wLTEvMiByaWdodC0xLzQgdHJhbnNsYXRlLXktMS8yIHRleHQtMnhsXCI+4omrPC9kaXY+ICovfVxuICAgIDwvZGl2PlxufSIsImNvbnN0IHBhZFRpbWUgPSAodmFsdWU6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IHN0ciA9IHZhbHVlLnRvU3RyaW5nKCk7XG5cbiAgICByZXR1cm4gc3RyLmxlbmd0aCA9PT0gMSA/IGAwJHtzdHJ9YCA6IHN0cjtcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXRUaW1lID0gKHNlY29uZHM6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IGludCA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICBjb25zdCBkZWNpbWFsID0gTWF0aC5mbG9vcihzZWNvbmRzICUgNjApO1xuXG4gICAgcmV0dXJuIGAke2ludH06JHtwYWRUaW1lKGRlY2ltYWwpfWA7XG59O1xuIiwiaW1wb3J0IHBsYXllciwgeyB1c2VQbGF5ZXJTdGF0ZSwgdXNlQ3VycmVudFRpbWUgfSBmcm9tICcuLi8uLi8uLi9saWJzL3BsYXllcic7XG5pbXBvcnQgeyBmb3JtYXRUaW1lIH0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IFByb2dyZXNzID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gdXNlUGxheWVyU3RhdGUoKTtcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IHVzZUN1cnJlbnRUaW1lKCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuXG4gICAgICAgICAgICB7Zm9ybWF0VGltZShjdXJyZW50VGltZSl9XG5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBtaW49ezB9XG4gICAgICAgICAgICAgICAgbWF4PXsxfVxuICAgICAgICAgICAgICAgIHN0ZXA9ezAuMDF9XG4gICAgICAgICAgICAgICAgdmFsdWU9e2N1cnJlbnRUaW1lIC8gc3RhdGUuZHVyYXRpb259XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhldmVudDogYW55KSA9PiBjb25zb2xlLmxvZyhldmVudClcbiAgICAgICAgICAgICAgICAgICAgLy8gcGxheWVyLnNlZWsoc3RhdGUuZHVyYXRpb24gKiAodmFsdWUgYXMgbnVtYmVyKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICB7Zm9ybWF0VGltZShzdGF0ZS5kdXJhdGlvbil9XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzcztcbiIsImltcG9ydCB7IHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncHJlYWN0L2hvb2tzJztcbmltcG9ydCBwbGF5ZXIgZnJvbSAnLi4vLi4vLi4vbGlicy9wbGF5ZXInO1xuaW1wb3J0IHsgRkMgfSBmcm9tICdwcmVhY3QvY29tcGF0JztcblxuXG5jb25zdCBWaWRlbzogRkMgPSAoKSA9PiB7XG4gICAgY29uc3QgdmlkZW9XcmFwcGVyUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHZpZGVvV3JhcHBlckVsZW1lbnQgPSB2aWRlb1dyYXBwZXJSZWYuY3VycmVudCE7XG4gICAgICAgIGNvbnN0IHZpZGVvID0gcGxheWVyLmdldEVsZW1lbnQoKTtcblxuICAgICAgICB2aWRlby5yZW1vdmUoKTtcbiAgICAgICAgdmlkZW8uY2xhc3NMaXN0LnJlbW92ZSgndmlzdWFsbHloaWRkZW4nKTtcbiAgICAgICAgdmlkZW9XcmFwcGVyRWxlbWVudC5hcHBlbmQodmlkZW8pO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB2aWRlb1dyYXBwZXJFbGVtZW50LnJlbW92ZUNoaWxkKHZpZGVvKTtcbiAgICAgICAgICAgIHZpZGVvLmNsYXNzTGlzdC5hZGQoJ3Zpc3VhbGx5aGlkZGVuJyk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh2aWRlbyk7XG4gICAgICAgIH07XG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIDxkaXYgcmVmPXt2aWRlb1dyYXBwZXJSZWZ9IC8+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVmlkZW87XG4iLCJpbXBvcnQgcGxheWVyLCB7IHVzZVBsYXllclN0YXRlIH0gZnJvbSAnLi4vLi4vbGlicy9wbGF5ZXInO1xuaW1wb3J0IFByb2dyZXNzIGZyb20gJy4vUHJvZ3Jlc3MnO1xuaW1wb3J0IFZpZGVvIGZyb20gJy4vVmlkZW8nO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xuXG5jb25zdCBQbGF5ZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBjdXJyZW50VHJhY2ssIHBsYXlpbmcgfSA9IHVzZVBsYXllclN0YXRlKCk7XG4gICAgY29uc3QgW2lzU2hvd1ZpZGVvLCBzZXRJc1Nob3dWaWRlb10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgICBpZiAoIWN1cnJlbnRUcmFjaykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVQbGF5ID0gKCkgPT4ge1xuICAgICAgICBpZiAocGxheWluZykge1xuICAgICAgICAgICAgcGxheWVyLnBhdXNlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwbGF5ZXIucGxheSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8UHJvZ3Jlc3MgLz5cblxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPntjdXJyZW50VHJhY2suc29uZy50aXRsZX08L3N0cm9uZz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIHsvLm1wNCQvLnRlc3QoY3VycmVudFRyYWNrLnVybCkgJiYgKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRJc1Nob3dWaWRlbyghaXNTaG93VmlkZW8pfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7LyogPE9uZGVtYW5kVmlkZW8gLz4gKi99XG4gICAgICAgICAgICAgICAgICAgICAgICBIZXlcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICAgIDxkaXYgb25DbGljaz17aGFuZGxlUGxheX0+XG4gICAgICAgICAgICAgICAgICAgIHtwbGF5aW5nID8gPGRpdj5QYXVzZTwvZGl2PiA6IDxkaXY+UGxheTwvZGl2Pn1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICB7aXNTaG93VmlkZW8gJiYgKFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxWaWRlbyAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBsYXllcjtcbiIsImltcG9ydCB7IEZDIH0gZnJvbSAncHJlYWN0L2NvbXBhdCc7XG5pbXBvcnQgcGxheWVyLCB7IHVzZVBsYXllclN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vbGlicy9wbGF5ZXInO1xuXG50eXBlIFByb3BzID0ge1xuICAgIGluZGV4OiBudW1iZXI7XG59O1xuXG5jb25zdCBUcmFjazogRkM8UHJvcHM+ID0gKHsgaW5kZXggfSkgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gdXNlUGxheWVyU3RhdGUoKTtcbiAgICBjb25zdCB0cmFjayA9IHN0YXRlLnRyYWNrc1tpbmRleF07XG5cbiAgICBjb25zdCBoYW5kbGVQbGF5ID0gKCkgPT4ge1xuICAgICAgICBpZiAoc3RhdGUuY3VycmVudFRyYWNrSW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUucGxheWluZykge1xuICAgICAgICAgICAgICAgIHBsYXllci5wYXVzZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXIucGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGxheWVyLnBsYXlUcmFjayhpbmRleCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgbGV0IGNvbG9yID0gXCJiZy1pbmRpZ28tNjAwXCJcblxuICAgIHN3aXRjaCAodHJhY2suc3RhdHVzKSB7XG4gICAgICAgIGNhc2UgXCJ0b19kZWxldGVcIjpcbiAgICAgICAgICAgIGNvbG9yID0gXCJiZy1yZWQtNjAwXCI7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIFwidG9fZG93bmxvYWRcIjpcbiAgICAgICAgICAgIGNvbG9yID0gXCJiZy1ncmVlbi02MDBcIlxuICAgICAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtgdy0xNiBoLTE2ICR7Y29sb3J9IHJvdW5kZWQtbWRgfSBvbkNsaWNrPXsoKSA9PiBoYW5kbGVQbGF5KCl9PjwvZGl2PlxuXG4gICAgLy8gPGxpPlxuICAgIC8vICAgICA8ZGl2Pnt0cmFjay50aXRsZX08L2Rpdj5cbiAgICAvLyAgICAgPGRpdj5cbiAgICAvLyAgICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gaGFuZGxlUGxheSgpfT5cbiAgICAvLyAgICAgICAgICAgICB7c3RhdGUuY3VycmVudFRyYWNrSW5kZXggPT09IGluZGV4ICYmIHN0YXRlLnBsYXlpbmcgPyAoXG4gICAgLy8gICAgICAgICAgICAgICAgIDxkaXY+UGF1c2U8L2Rpdj5cbiAgICAvLyAgICAgICAgICAgICApIDogKFxuICAgIC8vICAgICAgICAgICAgICAgICA8ZGl2PlBsYXk8L2Rpdj5cbiAgICAvLyAgICAgICAgICAgICApfVxuICAgIC8vICAgICAgICAgPC9idXR0b24+XG4gICAgLy8gICAgIDwvZGl2PlxuICAgIC8vIDwvbGk+XG4gICAgLy8gKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRyYWNrO1xuIiwiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncHJlYWN0L2hvb2tzJztcbmltcG9ydCBwbGF5ZXIsIHsgdXNlUGxheWVyU3RhdGUgfSBmcm9tICcuLi8uLi9saWJzL3BsYXllcic7XG5pbXBvcnQgVHJhY2sgZnJvbSAnLi9UcmFjayc7XG5pbXBvcnQgc29uZ0NvbnRyb2xsZXIgZnJvbSAnLi4vLi4vY29udHJvbGxlcnMvc29uZ0NvbnRyb2xsZXInO1xuaW1wb3J0IHsgc29uZ3MgfSBmcm9tICcuLi8uLi9lbnRpdGllcy9zb25nJztcblxuY29uc3QgUGxheWxpc3QgPSAoKSA9PiB7XG4gICAgY29uc3Qgc3RhdGUgPSB1c2VQbGF5ZXJTdGF0ZSgpO1xuXG4gICAgY29uc3Qgc2V0UXVldWUgPSBhc3luYyAoKSA9PiB7XG5cbiAgICAgICAgY29uc3QgdHJhY2tzID0gYXdhaXQgUHJvbWlzZS5hbGwoc29uZ3MudmFsdWUubWFwKGFzeW5jIChzb25nKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmID0gYXdhaXQgc29uZ0NvbnRyb2xsZXIuZ2V0RmlsZShzb25nLmlkKVxuICAgICAgICAgICAgY29uc3QgcyA9IGF3YWl0IHNvbmdDb250cm9sbGVyLmdldFN0YXR1cyhzb25nLmlkKVxuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzLnN0YXR1cylcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZi5maWxlKVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzb25nOiBzb25nLCB1cmw6IHVybCwgc3RhdHVzOiBzLnN0YXR1cyA/IHMuc3RhdHVzIDogc29uZy5zdGF0dXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICBwbGF5ZXIuc2V0UXVldWUodHJhY2tzKTtcbiAgICB9XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzZXRRdWV1ZSgpXG4gICAgfSwgW3NvbmdzLnZhbHVlXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctZnVsbCByZWxhdGl2ZSBoLTI0IG92ZXJmbG93LXgtYXV0byBiZy1ncmF5LTkwMFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtNCBnYXAtNCBzdGFydC0wIGZsZXhcIj5cbiAgICAgICAgICAgICAgICB7c3RhdGUudHJhY2tzLm1hcCgodHJhY2ssIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxUcmFjayBpbmRleD17aW5kZXh9IGtleT17dHJhY2sudXJsfSAvPlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQbGF5bGlzdDtcbiIsIi8qXG4gQ29weXJpZ2h0IChjKSAyMDIyIEdpbGRhcyBMb3JtZWF1LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiBcbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuIDMuIFRoZSBuYW1lcyBvZiB0aGUgYXV0aG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEICcnQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXG4gSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKQ1JBRlQsXG4gSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsXG4gT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLypcbiAqIFRoaXMgcHJvZ3JhbSBpcyBiYXNlZCBvbiBKWmxpYiAxLjAuMiB5bW5rLCBKQ3JhZnQsSW5jLlxuICogSlpsaWIgaXMgYmFzZWQgb24gemxpYi0xLjEuMywgc28gYWxsIGNyZWRpdCBzaG91bGQgZ28gYXV0aG9yc1xuICogSmVhbi1sb3VwIEdhaWxseShqbG91cEBnemlwLm9yZykgYW5kIE1hcmsgQWRsZXIobWFkbGVyQGFsdW1uaS5jYWx0ZWNoLmVkdSlcbiAqIGFuZCBjb250cmlidXRvcnMgb2YgemxpYi5cbiAqL1xuXG4vLyBkZW5vLWxpbnQtaWdub3JlLWZpbGUgbm8tdGhpcy1hbGlhcyBwcmVmZXItY29uc3RcblxuLy8gR2xvYmFsXG5cbmNvbnN0IE1BWF9CSVRTID0gMTU7XG5jb25zdCBEX0NPREVTID0gMzA7XG5jb25zdCBCTF9DT0RFUyA9IDE5O1xuXG5jb25zdCBMRU5HVEhfQ09ERVMgPSAyOTtcbmNvbnN0IExJVEVSQUxTID0gMjU2O1xuY29uc3QgTF9DT0RFUyA9IChMSVRFUkFMUyArIDEgKyBMRU5HVEhfQ09ERVMpO1xuY29uc3QgSEVBUF9TSVpFID0gKDIgKiBMX0NPREVTICsgMSk7XG5cbmNvbnN0IEVORF9CTE9DSyA9IDI1NjtcblxuLy8gQml0IGxlbmd0aCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JMX0JJVFMgYml0c1xuY29uc3QgTUFYX0JMX0JJVFMgPSA3O1xuXG4vLyByZXBlYXQgcHJldmlvdXMgYml0IGxlbmd0aCAzLTYgdGltZXMgKDIgYml0cyBvZiByZXBlYXQgY291bnQpXG5jb25zdCBSRVBfM182ID0gMTY7XG5cbi8vIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDMtMTAgdGltZXMgKDMgYml0cyBvZiByZXBlYXQgY291bnQpXG5jb25zdCBSRVBaXzNfMTAgPSAxNztcblxuLy8gcmVwZWF0IGEgemVybyBsZW5ndGggMTEtMTM4IHRpbWVzICg3IGJpdHMgb2YgcmVwZWF0IGNvdW50KVxuY29uc3QgUkVQWl8xMV8xMzggPSAxODtcblxuLy8gVGhlIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGggY29kZXMgYXJlIHNlbnQgaW4gb3JkZXIgb2YgZGVjcmVhc2luZ1xuLy8gcHJvYmFiaWxpdHksIHRvIGF2b2lkIHRyYW5zbWl0dGluZyB0aGUgbGVuZ3RocyBmb3IgdW51c2VkIGJpdFxuLy8gbGVuZ3RoIGNvZGVzLlxuXG5jb25zdCBCdWZfc2l6ZSA9IDggKiAyO1xuXG4vLyBKWmxpYiB2ZXJzaW9uIDogXCIxLjAuMlwiXG5jb25zdCBaX0RFRkFVTFRfQ09NUFJFU1NJT04gPSAtMTtcblxuLy8gY29tcHJlc3Npb24gc3RyYXRlZ3lcbmNvbnN0IFpfRklMVEVSRUQgPSAxO1xuY29uc3QgWl9IVUZGTUFOX09OTFkgPSAyO1xuY29uc3QgWl9ERUZBVUxUX1NUUkFURUdZID0gMDtcblxuY29uc3QgWl9OT19GTFVTSCA9IDA7XG5jb25zdCBaX1BBUlRJQUxfRkxVU0ggPSAxO1xuY29uc3QgWl9GVUxMX0ZMVVNIID0gMztcbmNvbnN0IFpfRklOSVNIID0gNDtcblxuY29uc3QgWl9PSyA9IDA7XG5jb25zdCBaX1NUUkVBTV9FTkQgPSAxO1xuY29uc3QgWl9ORUVEX0RJQ1QgPSAyO1xuY29uc3QgWl9TVFJFQU1fRVJST1IgPSAtMjtcbmNvbnN0IFpfREFUQV9FUlJPUiA9IC0zO1xuY29uc3QgWl9CVUZfRVJST1IgPSAtNTtcblxuLy8gVHJlZVxuXG5mdW5jdGlvbiBleHRyYWN0QXJyYXkoYXJyYXkpIHtcblx0cmV0dXJuIGZsYXRBcnJheShhcnJheS5tYXAoKFtsZW5ndGgsIHZhbHVlXSkgPT4gKG5ldyBBcnJheShsZW5ndGgpKS5maWxsKHZhbHVlLCAwLCBsZW5ndGgpKSk7XG59XG5cbmZ1bmN0aW9uIGZsYXRBcnJheShhcnJheSkge1xuXHRyZXR1cm4gYXJyYXkucmVkdWNlKChhLCBiKSA9PiBhLmNvbmNhdChBcnJheS5pc0FycmF5KGIpID8gZmxhdEFycmF5KGIpIDogYiksIFtdKTtcbn1cblxuLy8gc2VlIGRlZmluaXRpb24gb2YgYXJyYXkgZGlzdF9jb2RlIGJlbG93XG5jb25zdCBfZGlzdF9jb2RlID0gWzAsIDEsIDIsIDNdLmNvbmNhdCguLi5leHRyYWN0QXJyYXkoW1xuXHRbMiwgNF0sIFsyLCA1XSwgWzQsIDZdLCBbNCwgN10sIFs4LCA4XSwgWzgsIDldLCBbMTYsIDEwXSwgWzE2LCAxMV0sIFszMiwgMTJdLCBbMzIsIDEzXSwgWzY0LCAxNF0sIFs2NCwgMTVdLCBbMiwgMF0sIFsxLCAxNl0sXG5cdFsxLCAxN10sIFsyLCAxOF0sIFsyLCAxOV0sIFs0LCAyMF0sIFs0LCAyMV0sIFs4LCAyMl0sIFs4LCAyM10sIFsxNiwgMjRdLCBbMTYsIDI1XSwgWzMyLCAyNl0sIFszMiwgMjddLCBbNjQsIDI4XSwgWzY0LCAyOV1cbl0pKTtcblxuZnVuY3Rpb24gVHJlZSgpIHtcblx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cblx0Ly8gZHluX3RyZWU7IC8vIHRoZSBkeW5hbWljIHRyZWVcblx0Ly8gbWF4X2NvZGU7IC8vIGxhcmdlc3QgY29kZSB3aXRoIG5vbiB6ZXJvIGZyZXF1ZW5jeVxuXHQvLyBzdGF0X2Rlc2M7IC8vIHRoZSBjb3JyZXNwb25kaW5nIHN0YXRpYyB0cmVlXG5cblx0Ly8gQ29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyBmb3IgYSB0cmVlIGFuZCB1cGRhdGUgdGhlIHRvdGFsIGJpdFxuXHQvLyBsZW5ndGhcblx0Ly8gZm9yIHRoZSBjdXJyZW50IGJsb2NrLlxuXHQvLyBJTiBhc3NlcnRpb246IHRoZSBmaWVsZHMgZnJlcSBhbmQgZGFkIGFyZSBzZXQsIGhlYXBbaGVhcF9tYXhdIGFuZFxuXHQvLyBhYm92ZSBhcmUgdGhlIHRyZWUgbm9kZXMgc29ydGVkIGJ5IGluY3JlYXNpbmcgZnJlcXVlbmN5LlxuXHQvLyBPVVQgYXNzZXJ0aW9uczogdGhlIGZpZWxkIGxlbiBpcyBzZXQgdG8gdGhlIG9wdGltYWwgYml0IGxlbmd0aCwgdGhlXG5cdC8vIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBmcmVxdWVuY2llcyBmb3IgZWFjaCBiaXQgbGVuZ3RoLlxuXHQvLyBUaGUgbGVuZ3RoIG9wdF9sZW4gaXMgdXBkYXRlZDsgc3RhdGljX2xlbiBpcyBhbHNvIHVwZGF0ZWQgaWYgc3RyZWUgaXNcblx0Ly8gbm90IG51bGwuXG5cdGZ1bmN0aW9uIGdlbl9iaXRsZW4ocykge1xuXHRcdGNvbnN0IHRyZWUgPSB0aGF0LmR5bl90cmVlO1xuXHRcdGNvbnN0IHN0cmVlID0gdGhhdC5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XG5cdFx0Y29uc3QgZXh0cmEgPSB0aGF0LnN0YXRfZGVzYy5leHRyYV9iaXRzO1xuXHRcdGNvbnN0IGJhc2UgPSB0aGF0LnN0YXRfZGVzYy5leHRyYV9iYXNlO1xuXHRcdGNvbnN0IG1heF9sZW5ndGggPSB0aGF0LnN0YXRfZGVzYy5tYXhfbGVuZ3RoO1xuXHRcdGxldCBoOyAvLyBoZWFwIGluZGV4XG5cdFx0bGV0IG4sIG07IC8vIGl0ZXJhdGUgb3ZlciB0aGUgdHJlZSBlbGVtZW50c1xuXHRcdGxldCBiaXRzOyAvLyBiaXQgbGVuZ3RoXG5cdFx0bGV0IHhiaXRzOyAvLyBleHRyYSBiaXRzXG5cdFx0bGV0IGY7IC8vIGZyZXF1ZW5jeVxuXHRcdGxldCBvdmVyZmxvdyA9IDA7IC8vIG51bWJlciBvZiBlbGVtZW50cyB3aXRoIGJpdCBsZW5ndGggdG9vIGxhcmdlXG5cblx0XHRmb3IgKGJpdHMgPSAwOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspXG5cdFx0XHRzLmJsX2NvdW50W2JpdHNdID0gMDtcblxuXHRcdC8vIEluIGEgZmlyc3QgcGFzcywgY29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyAod2hpY2ggbWF5XG5cdFx0Ly8gb3ZlcmZsb3cgaW4gdGhlIGNhc2Ugb2YgdGhlIGJpdCBsZW5ndGggdHJlZSkuXG5cdFx0dHJlZVtzLmhlYXBbcy5oZWFwX21heF0gKiAyICsgMV0gPSAwOyAvLyByb290IG9mIHRoZSBoZWFwXG5cblx0XHRmb3IgKGggPSBzLmhlYXBfbWF4ICsgMTsgaCA8IEhFQVBfU0laRTsgaCsrKSB7XG5cdFx0XHRuID0gcy5oZWFwW2hdO1xuXHRcdFx0Yml0cyA9IHRyZWVbdHJlZVtuICogMiArIDFdICogMiArIDFdICsgMTtcblx0XHRcdGlmIChiaXRzID4gbWF4X2xlbmd0aCkge1xuXHRcdFx0XHRiaXRzID0gbWF4X2xlbmd0aDtcblx0XHRcdFx0b3ZlcmZsb3crKztcblx0XHRcdH1cblx0XHRcdHRyZWVbbiAqIDIgKyAxXSA9IGJpdHM7XG5cdFx0XHQvLyBXZSBvdmVyd3JpdGUgdHJlZVtuKjIrMV0gd2hpY2ggaXMgbm8gbG9uZ2VyIG5lZWRlZFxuXG5cdFx0XHRpZiAobiA+IHRoYXQubWF4X2NvZGUpXG5cdFx0XHRcdGNvbnRpbnVlOyAvLyBub3QgYSBsZWFmIG5vZGVcblxuXHRcdFx0cy5ibF9jb3VudFtiaXRzXSsrO1xuXHRcdFx0eGJpdHMgPSAwO1xuXHRcdFx0aWYgKG4gPj0gYmFzZSlcblx0XHRcdFx0eGJpdHMgPSBleHRyYVtuIC0gYmFzZV07XG5cdFx0XHRmID0gdHJlZVtuICogMl07XG5cdFx0XHRzLm9wdF9sZW4gKz0gZiAqIChiaXRzICsgeGJpdHMpO1xuXHRcdFx0aWYgKHN0cmVlKVxuXHRcdFx0XHRzLnN0YXRpY19sZW4gKz0gZiAqIChzdHJlZVtuICogMiArIDFdICsgeGJpdHMpO1xuXHRcdH1cblx0XHRpZiAob3ZlcmZsb3cgPT09IDApXG5cdFx0XHRyZXR1cm47XG5cblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGV4YW1wbGUgb24gb2JqMiBhbmQgcGljIG9mIHRoZSBDYWxnYXJ5IGNvcnB1c1xuXHRcdC8vIEZpbmQgdGhlIGZpcnN0IGJpdCBsZW5ndGggd2hpY2ggY291bGQgaW5jcmVhc2U6XG5cdFx0ZG8ge1xuXHRcdFx0Yml0cyA9IG1heF9sZW5ndGggLSAxO1xuXHRcdFx0d2hpbGUgKHMuYmxfY291bnRbYml0c10gPT09IDApXG5cdFx0XHRcdGJpdHMtLTtcblx0XHRcdHMuYmxfY291bnRbYml0c10tLTsgLy8gbW92ZSBvbmUgbGVhZiBkb3duIHRoZSB0cmVlXG5cdFx0XHRzLmJsX2NvdW50W2JpdHMgKyAxXSArPSAyOyAvLyBtb3ZlIG9uZSBvdmVyZmxvdyBpdGVtIGFzIGl0cyBicm90aGVyXG5cdFx0XHRzLmJsX2NvdW50W21heF9sZW5ndGhdLS07XG5cdFx0XHQvLyBUaGUgYnJvdGhlciBvZiB0aGUgb3ZlcmZsb3cgaXRlbSBhbHNvIG1vdmVzIG9uZSBzdGVwIHVwLFxuXHRcdFx0Ly8gYnV0IHRoaXMgZG9lcyBub3QgYWZmZWN0IGJsX2NvdW50W21heF9sZW5ndGhdXG5cdFx0XHRvdmVyZmxvdyAtPSAyO1xuXHRcdH0gd2hpbGUgKG92ZXJmbG93ID4gMCk7XG5cblx0XHRmb3IgKGJpdHMgPSBtYXhfbGVuZ3RoOyBiaXRzICE9PSAwOyBiaXRzLS0pIHtcblx0XHRcdG4gPSBzLmJsX2NvdW50W2JpdHNdO1xuXHRcdFx0d2hpbGUgKG4gIT09IDApIHtcblx0XHRcdFx0bSA9IHMuaGVhcFstLWhdO1xuXHRcdFx0XHRpZiAobSA+IHRoYXQubWF4X2NvZGUpXG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdGlmICh0cmVlW20gKiAyICsgMV0gIT0gYml0cykge1xuXHRcdFx0XHRcdHMub3B0X2xlbiArPSAoYml0cyAtIHRyZWVbbSAqIDIgKyAxXSkgKiB0cmVlW20gKiAyXTtcblx0XHRcdFx0XHR0cmVlW20gKiAyICsgMV0gPSBiaXRzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG4tLTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXZlcnNlIHRoZSBmaXJzdCBsZW4gYml0cyBvZiBhIGNvZGUsIHVzaW5nIHN0cmFpZ2h0Zm9yd2FyZCBjb2RlIChhXG5cdC8vIGZhc3RlclxuXHQvLyBtZXRob2Qgd291bGQgdXNlIGEgdGFibGUpXG5cdC8vIElOIGFzc2VydGlvbjogMSA8PSBsZW4gPD0gMTVcblx0ZnVuY3Rpb24gYmlfcmV2ZXJzZShjb2RlLCAvLyB0aGUgdmFsdWUgdG8gaW52ZXJ0XG5cdFx0bGVuIC8vIGl0cyBiaXQgbGVuZ3RoXG5cdCkge1xuXHRcdGxldCByZXMgPSAwO1xuXHRcdGRvIHtcblx0XHRcdHJlcyB8PSBjb2RlICYgMTtcblx0XHRcdGNvZGUgPj4+PSAxO1xuXHRcdFx0cmVzIDw8PSAxO1xuXHRcdH0gd2hpbGUgKC0tbGVuID4gMCk7XG5cdFx0cmV0dXJuIHJlcyA+Pj4gMTtcblx0fVxuXG5cdC8vIEdlbmVyYXRlIHRoZSBjb2RlcyBmb3IgYSBnaXZlbiB0cmVlIGFuZCBiaXQgY291bnRzICh3aGljaCBuZWVkIG5vdCBiZVxuXHQvLyBvcHRpbWFsKS5cblx0Ly8gSU4gYXNzZXJ0aW9uOiB0aGUgYXJyYXkgYmxfY291bnQgY29udGFpbnMgdGhlIGJpdCBsZW5ndGggc3RhdGlzdGljcyBmb3Jcblx0Ly8gdGhlIGdpdmVuIHRyZWUgYW5kIHRoZSBmaWVsZCBsZW4gaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cy5cblx0Ly8gT1VUIGFzc2VydGlvbjogdGhlIGZpZWxkIGNvZGUgaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cyBvZiBub25cblx0Ly8gemVybyBjb2RlIGxlbmd0aC5cblx0ZnVuY3Rpb24gZ2VuX2NvZGVzKHRyZWUsIC8vIHRoZSB0cmVlIHRvIGRlY29yYXRlXG5cdFx0bWF4X2NvZGUsIC8vIGxhcmdlc3QgY29kZSB3aXRoIG5vbiB6ZXJvIGZyZXF1ZW5jeVxuXHRcdGJsX2NvdW50IC8vIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGhcblx0KSB7XG5cdFx0Y29uc3QgbmV4dF9jb2RlID0gW107IC8vIG5leHQgY29kZSB2YWx1ZSBmb3IgZWFjaFxuXHRcdC8vIGJpdCBsZW5ndGhcblx0XHRsZXQgY29kZSA9IDA7IC8vIHJ1bm5pbmcgY29kZSB2YWx1ZVxuXHRcdGxldCBiaXRzOyAvLyBiaXQgaW5kZXhcblx0XHRsZXQgbjsgLy8gY29kZSBpbmRleFxuXHRcdGxldCBsZW47XG5cblx0XHQvLyBUaGUgZGlzdHJpYnV0aW9uIGNvdW50cyBhcmUgZmlyc3QgdXNlZCB0byBnZW5lcmF0ZSB0aGUgY29kZSB2YWx1ZXNcblx0XHQvLyB3aXRob3V0IGJpdCByZXZlcnNhbC5cblx0XHRmb3IgKGJpdHMgPSAxOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcblx0XHRcdG5leHRfY29kZVtiaXRzXSA9IGNvZGUgPSAoKGNvZGUgKyBibF9jb3VudFtiaXRzIC0gMV0pIDw8IDEpO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIHRoYXQgdGhlIGJpdCBjb3VudHMgaW4gYmxfY291bnQgYXJlIGNvbnNpc3RlbnQuIFRoZSBsYXN0IGNvZGVcblx0XHQvLyBtdXN0IGJlIGFsbCBvbmVzLlxuXHRcdC8vIEFzc2VydCAoY29kZSArIGJsX2NvdW50W01BWF9CSVRTXS0xID09ICgxPDxNQVhfQklUUyktMSxcblx0XHQvLyBcImluY29uc2lzdGVudCBiaXQgY291bnRzXCIpO1xuXHRcdC8vIFRyYWNldigoc3RkZXJyLFwiZ2VuX2NvZGVzOiBtYXhfY29kZSAlZCBcIiwgbWF4X2NvZGUpKTtcblxuXHRcdGZvciAobiA9IDA7IG4gPD0gbWF4X2NvZGU7IG4rKykge1xuXHRcdFx0bGVuID0gdHJlZVtuICogMiArIDFdO1xuXHRcdFx0aWYgKGxlbiA9PT0gMClcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHQvLyBOb3cgcmV2ZXJzZSB0aGUgYml0c1xuXHRcdFx0dHJlZVtuICogMl0gPSBiaV9yZXZlcnNlKG5leHRfY29kZVtsZW5dKyssIGxlbik7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29uc3RydWN0IG9uZSBIdWZmbWFuIHRyZWUgYW5kIGFzc2lnbnMgdGhlIGNvZGUgYml0IHN0cmluZ3MgYW5kIGxlbmd0aHMuXG5cdC8vIFVwZGF0ZSB0aGUgdG90YWwgYml0IGxlbmd0aCBmb3IgdGhlIGN1cnJlbnQgYmxvY2suXG5cdC8vIElOIGFzc2VydGlvbjogdGhlIGZpZWxkIGZyZXEgaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cy5cblx0Ly8gT1VUIGFzc2VydGlvbnM6IHRoZSBmaWVsZHMgbGVuIGFuZCBjb2RlIGFyZSBzZXQgdG8gdGhlIG9wdGltYWwgYml0IGxlbmd0aFxuXHQvLyBhbmQgY29ycmVzcG9uZGluZyBjb2RlLiBUaGUgbGVuZ3RoIG9wdF9sZW4gaXMgdXBkYXRlZDsgc3RhdGljX2xlbiBpc1xuXHQvLyBhbHNvIHVwZGF0ZWQgaWYgc3RyZWUgaXMgbm90IG51bGwuIFRoZSBmaWVsZCBtYXhfY29kZSBpcyBzZXQuXG5cdHRoYXQuYnVpbGRfdHJlZSA9IGZ1bmN0aW9uIChzKSB7XG5cdFx0Y29uc3QgdHJlZSA9IHRoYXQuZHluX3RyZWU7XG5cdFx0Y29uc3Qgc3RyZWUgPSB0aGF0LnN0YXRfZGVzYy5zdGF0aWNfdHJlZTtcblx0XHRjb25zdCBlbGVtcyA9IHRoYXQuc3RhdF9kZXNjLmVsZW1zO1xuXHRcdGxldCBuLCBtOyAvLyBpdGVyYXRlIG92ZXIgaGVhcCBlbGVtZW50c1xuXHRcdGxldCBtYXhfY29kZSA9IC0xOyAvLyBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3lcblx0XHRsZXQgbm9kZTsgLy8gbmV3IG5vZGUgYmVpbmcgY3JlYXRlZFxuXG5cdFx0Ly8gQ29uc3RydWN0IHRoZSBpbml0aWFsIGhlYXAsIHdpdGggbGVhc3QgZnJlcXVlbnQgZWxlbWVudCBpblxuXHRcdC8vIGhlYXBbMV0uIFRoZSBzb25zIG9mIGhlYXBbbl0gYXJlIGhlYXBbMipuXSBhbmQgaGVhcFsyKm4rMV0uXG5cdFx0Ly8gaGVhcFswXSBpcyBub3QgdXNlZC5cblx0XHRzLmhlYXBfbGVuID0gMDtcblx0XHRzLmhlYXBfbWF4ID0gSEVBUF9TSVpFO1xuXG5cdFx0Zm9yIChuID0gMDsgbiA8IGVsZW1zOyBuKyspIHtcblx0XHRcdGlmICh0cmVlW24gKiAyXSAhPT0gMCkge1xuXHRcdFx0XHRzLmhlYXBbKytzLmhlYXBfbGVuXSA9IG1heF9jb2RlID0gbjtcblx0XHRcdFx0cy5kZXB0aFtuXSA9IDA7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0cmVlW24gKiAyICsgMV0gPSAwO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFRoZSBwa3ppcCBmb3JtYXQgcmVxdWlyZXMgdGhhdCBhdCBsZWFzdCBvbmUgZGlzdGFuY2UgY29kZSBleGlzdHMsXG5cdFx0Ly8gYW5kIHRoYXQgYXQgbGVhc3Qgb25lIGJpdCBzaG91bGQgYmUgc2VudCBldmVuIGlmIHRoZXJlIGlzIG9ubHkgb25lXG5cdFx0Ly8gcG9zc2libGUgY29kZS4gU28gdG8gYXZvaWQgc3BlY2lhbCBjaGVja3MgbGF0ZXIgb24gd2UgZm9yY2UgYXQgbGVhc3Rcblx0XHQvLyB0d28gY29kZXMgb2Ygbm9uIHplcm8gZnJlcXVlbmN5LlxuXHRcdHdoaWxlIChzLmhlYXBfbGVuIDwgMikge1xuXHRcdFx0bm9kZSA9IHMuaGVhcFsrK3MuaGVhcF9sZW5dID0gbWF4X2NvZGUgPCAyID8gKyttYXhfY29kZSA6IDA7XG5cdFx0XHR0cmVlW25vZGUgKiAyXSA9IDE7XG5cdFx0XHRzLmRlcHRoW25vZGVdID0gMDtcblx0XHRcdHMub3B0X2xlbi0tO1xuXHRcdFx0aWYgKHN0cmVlKVxuXHRcdFx0XHRzLnN0YXRpY19sZW4gLT0gc3RyZWVbbm9kZSAqIDIgKyAxXTtcblx0XHRcdC8vIG5vZGUgaXMgMCBvciAxIHNvIGl0IGRvZXMgbm90IGhhdmUgZXh0cmEgYml0c1xuXHRcdH1cblx0XHR0aGF0Lm1heF9jb2RlID0gbWF4X2NvZGU7XG5cblx0XHQvLyBUaGUgZWxlbWVudHMgaGVhcFtoZWFwX2xlbi8yKzEgLi4gaGVhcF9sZW5dIGFyZSBsZWF2ZXMgb2YgdGhlIHRyZWUsXG5cdFx0Ly8gZXN0YWJsaXNoIHN1Yi1oZWFwcyBvZiBpbmNyZWFzaW5nIGxlbmd0aHM6XG5cblx0XHRmb3IgKG4gPSBNYXRoLmZsb29yKHMuaGVhcF9sZW4gLyAyKTsgbiA+PSAxOyBuLS0pXG5cdFx0XHRzLnBxZG93bmhlYXAodHJlZSwgbik7XG5cblx0XHQvLyBDb25zdHJ1Y3QgdGhlIEh1ZmZtYW4gdHJlZSBieSByZXBlYXRlZGx5IGNvbWJpbmluZyB0aGUgbGVhc3QgdHdvXG5cdFx0Ly8gZnJlcXVlbnQgbm9kZXMuXG5cblx0XHRub2RlID0gZWxlbXM7IC8vIG5leHQgaW50ZXJuYWwgbm9kZSBvZiB0aGUgdHJlZVxuXHRcdGRvIHtcblx0XHRcdC8vIG4gPSBub2RlIG9mIGxlYXN0IGZyZXF1ZW5jeVxuXHRcdFx0biA9IHMuaGVhcFsxXTtcblx0XHRcdHMuaGVhcFsxXSA9IHMuaGVhcFtzLmhlYXBfbGVuLS1dO1xuXHRcdFx0cy5wcWRvd25oZWFwKHRyZWUsIDEpO1xuXHRcdFx0bSA9IHMuaGVhcFsxXTsgLy8gbSA9IG5vZGUgb2YgbmV4dCBsZWFzdCBmcmVxdWVuY3lcblxuXHRcdFx0cy5oZWFwWy0tcy5oZWFwX21heF0gPSBuOyAvLyBrZWVwIHRoZSBub2RlcyBzb3J0ZWQgYnkgZnJlcXVlbmN5XG5cdFx0XHRzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IG07XG5cblx0XHRcdC8vIENyZWF0ZSBhIG5ldyBub2RlIGZhdGhlciBvZiBuIGFuZCBtXG5cdFx0XHR0cmVlW25vZGUgKiAyXSA9ICh0cmVlW24gKiAyXSArIHRyZWVbbSAqIDJdKTtcblx0XHRcdHMuZGVwdGhbbm9kZV0gPSBNYXRoLm1heChzLmRlcHRoW25dLCBzLmRlcHRoW21dKSArIDE7XG5cdFx0XHR0cmVlW24gKiAyICsgMV0gPSB0cmVlW20gKiAyICsgMV0gPSBub2RlO1xuXG5cdFx0XHQvLyBhbmQgaW5zZXJ0IHRoZSBuZXcgbm9kZSBpbiB0aGUgaGVhcFxuXHRcdFx0cy5oZWFwWzFdID0gbm9kZSsrO1xuXHRcdFx0cy5wcWRvd25oZWFwKHRyZWUsIDEpO1xuXHRcdH0gd2hpbGUgKHMuaGVhcF9sZW4gPj0gMik7XG5cblx0XHRzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IHMuaGVhcFsxXTtcblxuXHRcdC8vIEF0IHRoaXMgcG9pbnQsIHRoZSBmaWVsZHMgZnJlcSBhbmQgZGFkIGFyZSBzZXQuIFdlIGNhbiBub3dcblx0XHQvLyBnZW5lcmF0ZSB0aGUgYml0IGxlbmd0aHMuXG5cblx0XHRnZW5fYml0bGVuKHMpO1xuXG5cdFx0Ly8gVGhlIGZpZWxkIGxlbiBpcyBub3cgc2V0LCB3ZSBjYW4gZ2VuZXJhdGUgdGhlIGJpdCBjb2Rlc1xuXHRcdGdlbl9jb2Rlcyh0cmVlLCB0aGF0Lm1heF9jb2RlLCBzLmJsX2NvdW50KTtcblx0fTtcblxufVxuXG5UcmVlLl9sZW5ndGhfY29kZSA9IFswLCAxLCAyLCAzLCA0LCA1LCA2LCA3XS5jb25jYXQoLi4uZXh0cmFjdEFycmF5KFtcblx0WzIsIDhdLCBbMiwgOV0sIFsyLCAxMF0sIFsyLCAxMV0sIFs0LCAxMl0sIFs0LCAxM10sIFs0LCAxNF0sIFs0LCAxNV0sIFs4LCAxNl0sIFs4LCAxN10sIFs4LCAxOF0sIFs4LCAxOV0sXG5cdFsxNiwgMjBdLCBbMTYsIDIxXSwgWzE2LCAyMl0sIFsxNiwgMjNdLCBbMzIsIDI0XSwgWzMyLCAyNV0sIFszMiwgMjZdLCBbMzEsIDI3XSwgWzEsIDI4XV0pKTtcblxuVHJlZS5iYXNlX2xlbmd0aCA9IFswLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCAxMCwgMTIsIDE0LCAxNiwgMjAsIDI0LCAyOCwgMzIsIDQwLCA0OCwgNTYsIDY0LCA4MCwgOTYsIDExMiwgMTI4LCAxNjAsIDE5MiwgMjI0LCAwXTtcblxuVHJlZS5iYXNlX2Rpc3QgPSBbMCwgMSwgMiwgMywgNCwgNiwgOCwgMTIsIDE2LCAyNCwgMzIsIDQ4LCA2NCwgOTYsIDEyOCwgMTkyLCAyNTYsIDM4NCwgNTEyLCA3NjgsIDEwMjQsIDE1MzYsIDIwNDgsIDMwNzIsIDQwOTYsIDYxNDQsIDgxOTIsIDEyMjg4LCAxNjM4NCxcblx0MjQ1NzZdO1xuXG4vLyBNYXBwaW5nIGZyb20gYSBkaXN0YW5jZSB0byBhIGRpc3RhbmNlIGNvZGUuIGRpc3QgaXMgdGhlIGRpc3RhbmNlIC0gMSBhbmRcbi8vIG11c3Qgbm90IGhhdmUgc2lkZSBlZmZlY3RzLiBfZGlzdF9jb2RlWzI1Nl0gYW5kIF9kaXN0X2NvZGVbMjU3XSBhcmUgbmV2ZXJcbi8vIHVzZWQuXG5UcmVlLmRfY29kZSA9IGZ1bmN0aW9uIChkaXN0KSB7XG5cdHJldHVybiAoKGRpc3QpIDwgMjU2ID8gX2Rpc3RfY29kZVtkaXN0XSA6IF9kaXN0X2NvZGVbMjU2ICsgKChkaXN0KSA+Pj4gNyldKTtcbn07XG5cbi8vIGV4dHJhIGJpdHMgZm9yIGVhY2ggbGVuZ3RoIGNvZGVcblRyZWUuZXh0cmFfbGJpdHMgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMSwgMSwgMSwgMiwgMiwgMiwgMiwgMywgMywgMywgMywgNCwgNCwgNCwgNCwgNSwgNSwgNSwgNSwgMF07XG5cbi8vIGV4dHJhIGJpdHMgZm9yIGVhY2ggZGlzdGFuY2UgY29kZVxuVHJlZS5leHRyYV9kYml0cyA9IFswLCAwLCAwLCAwLCAxLCAxLCAyLCAyLCAzLCAzLCA0LCA0LCA1LCA1LCA2LCA2LCA3LCA3LCA4LCA4LCA5LCA5LCAxMCwgMTAsIDExLCAxMSwgMTIsIDEyLCAxMywgMTNdO1xuXG4vLyBleHRyYSBiaXRzIGZvciBlYWNoIGJpdCBsZW5ndGggY29kZVxuVHJlZS5leHRyYV9ibGJpdHMgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMiwgMywgN107XG5cblRyZWUuYmxfb3JkZXIgPSBbMTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNV07XG5cbi8vIFN0YXRpY1RyZWVcblxuZnVuY3Rpb24gU3RhdGljVHJlZShzdGF0aWNfdHJlZSwgZXh0cmFfYml0cywgZXh0cmFfYmFzZSwgZWxlbXMsIG1heF9sZW5ndGgpIHtcblx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdHRoYXQuc3RhdGljX3RyZWUgPSBzdGF0aWNfdHJlZTtcblx0dGhhdC5leHRyYV9iaXRzID0gZXh0cmFfYml0cztcblx0dGhhdC5leHRyYV9iYXNlID0gZXh0cmFfYmFzZTtcblx0dGhhdC5lbGVtcyA9IGVsZW1zO1xuXHR0aGF0Lm1heF9sZW5ndGggPSBtYXhfbGVuZ3RoO1xufVxuXG5jb25zdCBzdGF0aWNfbHRyZWUyX2ZpcnN0X3BhcnQgPSBbMTIsIDE0MCwgNzYsIDIwNCwgNDQsIDE3MiwgMTA4LCAyMzYsIDI4LCAxNTYsIDkyLCAyMjAsIDYwLCAxODgsIDEyNCwgMjUyLCAyLCAxMzAsIDY2LCAxOTQsIDM0LCAxNjIsIDk4LCAyMjYsIDE4LCAxNDYsIDgyLFxuXHQyMTAsIDUwLCAxNzgsIDExNCwgMjQyLCAxMCwgMTM4LCA3NCwgMjAyLCA0MiwgMTcwLCAxMDYsIDIzNCwgMjYsIDE1NCwgOTAsIDIxOCwgNTgsIDE4NiwgMTIyLCAyNTAsIDYsIDEzNCwgNzAsIDE5OCwgMzgsIDE2NiwgMTAyLCAyMzAsIDIyLCAxNTAsIDg2LFxuXHQyMTQsIDU0LCAxODIsIDExOCwgMjQ2LCAxNCwgMTQyLCA3OCwgMjA2LCA0NiwgMTc0LCAxMTAsIDIzOCwgMzAsIDE1OCwgOTQsIDIyMiwgNjIsIDE5MCwgMTI2LCAyNTQsIDEsIDEyOSwgNjUsIDE5MywgMzMsIDE2MSwgOTcsIDIyNSwgMTcsIDE0NSwgODEsXG5cdDIwOSwgNDksIDE3NywgMTEzLCAyNDEsIDksIDEzNywgNzMsIDIwMSwgNDEsIDE2OSwgMTA1LCAyMzMsIDI1LCAxNTMsIDg5LCAyMTcsIDU3LCAxODUsIDEyMSwgMjQ5LCA1LCAxMzMsIDY5LCAxOTcsIDM3LCAxNjUsIDEwMSwgMjI5LCAyMSwgMTQ5LCA4NSxcblx0MjEzLCA1MywgMTgxLCAxMTcsIDI0NSwgMTMsIDE0MSwgNzcsIDIwNSwgNDUsIDE3MywgMTA5LCAyMzcsIDI5LCAxNTcsIDkzLCAyMjEsIDYxLCAxODksIDEyNSwgMjUzLCAxOSwgMjc1LCAxNDcsIDQwMywgODMsIDMzOSwgMjExLCA0NjcsIDUxLCAzMDcsXG5cdDE3OSwgNDM1LCAxMTUsIDM3MSwgMjQzLCA0OTksIDExLCAyNjcsIDEzOSwgMzk1LCA3NSwgMzMxLCAyMDMsIDQ1OSwgNDMsIDI5OSwgMTcxLCA0MjcsIDEwNywgMzYzLCAyMzUsIDQ5MSwgMjcsIDI4MywgMTU1LCA0MTEsIDkxLCAzNDcsIDIxOSwgNDc1LFxuXHQ1OSwgMzE1LCAxODcsIDQ0MywgMTIzLCAzNzksIDI1MSwgNTA3LCA3LCAyNjMsIDEzNSwgMzkxLCA3MSwgMzI3LCAxOTksIDQ1NSwgMzksIDI5NSwgMTY3LCA0MjMsIDEwMywgMzU5LCAyMzEsIDQ4NywgMjMsIDI3OSwgMTUxLCA0MDcsIDg3LCAzNDMsIDIxNSxcblx0NDcxLCA1NSwgMzExLCAxODMsIDQzOSwgMTE5LCAzNzUsIDI0NywgNTAzLCAxNSwgMjcxLCAxNDMsIDM5OSwgNzksIDMzNSwgMjA3LCA0NjMsIDQ3LCAzMDMsIDE3NSwgNDMxLCAxMTEsIDM2NywgMjM5LCA0OTUsIDMxLCAyODcsIDE1OSwgNDE1LCA5NSxcblx0MzUxLCAyMjMsIDQ3OSwgNjMsIDMxOSwgMTkxLCA0NDcsIDEyNywgMzgzLCAyNTUsIDUxMSwgMCwgNjQsIDMyLCA5NiwgMTYsIDgwLCA0OCwgMTEyLCA4LCA3MiwgNDAsIDEwNCwgMjQsIDg4LCA1NiwgMTIwLCA0LCA2OCwgMzYsIDEwMCwgMjAsIDg0LCA1Mixcblx0MTE2LCAzLCAxMzEsIDY3LCAxOTUsIDM1LCAxNjMsIDk5LCAyMjddO1xuY29uc3Qgc3RhdGljX2x0cmVlMl9zZWNvbmRfcGFydCA9IGV4dHJhY3RBcnJheShbWzE0NCwgOF0sIFsxMTIsIDldLCBbMjQsIDddLCBbOCwgOF1dKTtcblN0YXRpY1RyZWUuc3RhdGljX2x0cmVlID0gZmxhdEFycmF5KHN0YXRpY19sdHJlZTJfZmlyc3RfcGFydC5tYXAoKHZhbHVlLCBpbmRleCkgPT4gW3ZhbHVlLCBzdGF0aWNfbHRyZWUyX3NlY29uZF9wYXJ0W2luZGV4XV0pKTtcblxuY29uc3Qgc3RhdGljX2R0cmVlX2ZpcnN0X3BhcnQgPSBbMCwgMTYsIDgsIDI0LCA0LCAyMCwgMTIsIDI4LCAyLCAxOCwgMTAsIDI2LCA2LCAyMiwgMTQsIDMwLCAxLCAxNywgOSwgMjUsIDUsIDIxLCAxMywgMjksIDMsIDE5LCAxMSwgMjcsIDcsIDIzXTtcbmNvbnN0IHN0YXRpY19kdHJlZV9zZWNvbmRfcGFydCA9IGV4dHJhY3RBcnJheShbWzMwLCA1XV0pO1xuU3RhdGljVHJlZS5zdGF0aWNfZHRyZWUgPSBmbGF0QXJyYXkoc3RhdGljX2R0cmVlX2ZpcnN0X3BhcnQubWFwKCh2YWx1ZSwgaW5kZXgpID0+IFt2YWx1ZSwgc3RhdGljX2R0cmVlX3NlY29uZF9wYXJ0W2luZGV4XV0pKTtcblxuU3RhdGljVHJlZS5zdGF0aWNfbF9kZXNjID0gbmV3IFN0YXRpY1RyZWUoU3RhdGljVHJlZS5zdGF0aWNfbHRyZWUsIFRyZWUuZXh0cmFfbGJpdHMsIExJVEVSQUxTICsgMSwgTF9DT0RFUywgTUFYX0JJVFMpO1xuXG5TdGF0aWNUcmVlLnN0YXRpY19kX2Rlc2MgPSBuZXcgU3RhdGljVHJlZShTdGF0aWNUcmVlLnN0YXRpY19kdHJlZSwgVHJlZS5leHRyYV9kYml0cywgMCwgRF9DT0RFUywgTUFYX0JJVFMpO1xuXG5TdGF0aWNUcmVlLnN0YXRpY19ibF9kZXNjID0gbmV3IFN0YXRpY1RyZWUobnVsbCwgVHJlZS5leHRyYV9ibGJpdHMsIDAsIEJMX0NPREVTLCBNQVhfQkxfQklUUyk7XG5cbi8vIERlZmxhdGVcblxuY29uc3QgTUFYX01FTV9MRVZFTCA9IDk7XG5jb25zdCBERUZfTUVNX0xFVkVMID0gODtcblxuZnVuY3Rpb24gQ29uZmlnKGdvb2RfbGVuZ3RoLCBtYXhfbGF6eSwgbmljZV9sZW5ndGgsIG1heF9jaGFpbiwgZnVuYykge1xuXHRjb25zdCB0aGF0ID0gdGhpcztcblx0dGhhdC5nb29kX2xlbmd0aCA9IGdvb2RfbGVuZ3RoO1xuXHR0aGF0Lm1heF9sYXp5ID0gbWF4X2xhenk7XG5cdHRoYXQubmljZV9sZW5ndGggPSBuaWNlX2xlbmd0aDtcblx0dGhhdC5tYXhfY2hhaW4gPSBtYXhfY2hhaW47XG5cdHRoYXQuZnVuYyA9IGZ1bmM7XG59XG5cbmNvbnN0IFNUT1JFRCA9IDA7XG5jb25zdCBGQVNUID0gMTtcbmNvbnN0IFNMT1cgPSAyO1xuY29uc3QgY29uZmlnX3RhYmxlID0gW1xuXHRuZXcgQ29uZmlnKDAsIDAsIDAsIDAsIFNUT1JFRCksXG5cdG5ldyBDb25maWcoNCwgNCwgOCwgNCwgRkFTVCksXG5cdG5ldyBDb25maWcoNCwgNSwgMTYsIDgsIEZBU1QpLFxuXHRuZXcgQ29uZmlnKDQsIDYsIDMyLCAzMiwgRkFTVCksXG5cdG5ldyBDb25maWcoNCwgNCwgMTYsIDE2LCBTTE9XKSxcblx0bmV3IENvbmZpZyg4LCAxNiwgMzIsIDMyLCBTTE9XKSxcblx0bmV3IENvbmZpZyg4LCAxNiwgMTI4LCAxMjgsIFNMT1cpLFxuXHRuZXcgQ29uZmlnKDgsIDMyLCAxMjgsIDI1NiwgU0xPVyksXG5cdG5ldyBDb25maWcoMzIsIDEyOCwgMjU4LCAxMDI0LCBTTE9XKSxcblx0bmV3IENvbmZpZygzMiwgMjU4LCAyNTgsIDQwOTYsIFNMT1cpXG5dO1xuXG5jb25zdCB6X2Vycm1zZyA9IFtcIm5lZWQgZGljdGlvbmFyeVwiLCAvLyBaX05FRURfRElDVFxuXHQvLyAyXG5cdFwic3RyZWFtIGVuZFwiLCAvLyBaX1NUUkVBTV9FTkQgMVxuXHRcIlwiLCAvLyBaX09LIDBcblx0XCJcIiwgLy8gWl9FUlJOTyAoLTEpXG5cdFwic3RyZWFtIGVycm9yXCIsIC8vIFpfU1RSRUFNX0VSUk9SICgtMilcblx0XCJkYXRhIGVycm9yXCIsIC8vIFpfREFUQV9FUlJPUiAoLTMpXG5cdFwiXCIsIC8vIFpfTUVNX0VSUk9SICgtNClcblx0XCJidWZmZXIgZXJyb3JcIiwgLy8gWl9CVUZfRVJST1IgKC01KVxuXHRcIlwiLC8vIFpfVkVSU0lPTl9FUlJPUiAoLTYpXG5cdFwiXCJdO1xuXG4vLyBibG9jayBub3QgY29tcGxldGVkLCBuZWVkIG1vcmUgaW5wdXQgb3IgbW9yZSBvdXRwdXRcbmNvbnN0IE5lZWRNb3JlID0gMDtcblxuLy8gYmxvY2sgZmx1c2ggcGVyZm9ybWVkXG5jb25zdCBCbG9ja0RvbmUgPSAxO1xuXG4vLyBmaW5pc2ggc3RhcnRlZCwgbmVlZCBvbmx5IG1vcmUgb3V0cHV0IGF0IG5leHQgZGVmbGF0ZVxuY29uc3QgRmluaXNoU3RhcnRlZCA9IDI7XG5cbi8vIGZpbmlzaCBkb25lLCBhY2NlcHQgbm8gbW9yZSBpbnB1dCBvciBvdXRwdXRcbmNvbnN0IEZpbmlzaERvbmUgPSAzO1xuXG4vLyBwcmVzZXQgZGljdGlvbmFyeSBmbGFnIGluIHpsaWIgaGVhZGVyXG5jb25zdCBQUkVTRVRfRElDVCA9IDB4MjA7XG5cbmNvbnN0IElOSVRfU1RBVEUgPSA0MjtcbmNvbnN0IEJVU1lfU1RBVEUgPSAxMTM7XG5jb25zdCBGSU5JU0hfU1RBVEUgPSA2NjY7XG5cbi8vIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZFxuY29uc3QgWl9ERUZMQVRFRCA9IDg7XG5cbmNvbnN0IFNUT1JFRF9CTE9DSyA9IDA7XG5jb25zdCBTVEFUSUNfVFJFRVMgPSAxO1xuY29uc3QgRFlOX1RSRUVTID0gMjtcblxuY29uc3QgTUlOX01BVENIID0gMztcbmNvbnN0IE1BWF9NQVRDSCA9IDI1ODtcbmNvbnN0IE1JTl9MT09LQUhFQUQgPSAoTUFYX01BVENIICsgTUlOX01BVENIICsgMSk7XG5cbmZ1bmN0aW9uIHNtYWxsZXIodHJlZSwgbiwgbSwgZGVwdGgpIHtcblx0Y29uc3QgdG4yID0gdHJlZVtuICogMl07XG5cdGNvbnN0IHRtMiA9IHRyZWVbbSAqIDJdO1xuXHRyZXR1cm4gKHRuMiA8IHRtMiB8fCAodG4yID09IHRtMiAmJiBkZXB0aFtuXSA8PSBkZXB0aFttXSkpO1xufVxuXG5mdW5jdGlvbiBEZWZsYXRlKCkge1xuXG5cdGNvbnN0IHRoYXQgPSB0aGlzO1xuXHRsZXQgc3RybTsgLy8gcG9pbnRlciBiYWNrIHRvIHRoaXMgemxpYiBzdHJlYW1cblx0bGV0IHN0YXR1czsgLy8gYXMgdGhlIG5hbWUgaW1wbGllc1xuXHQvLyBwZW5kaW5nX2J1ZjsgLy8gb3V0cHV0IHN0aWxsIHBlbmRpbmdcblx0bGV0IHBlbmRpbmdfYnVmX3NpemU7IC8vIHNpemUgb2YgcGVuZGluZ19idWZcblx0Ly8gcGVuZGluZ19vdXQ7IC8vIG5leHQgcGVuZGluZyBieXRlIHRvIG91dHB1dCB0byB0aGUgc3RyZWFtXG5cdC8vIHBlbmRpbmc7IC8vIG5iIG9mIGJ5dGVzIGluIHRoZSBwZW5kaW5nIGJ1ZmZlclxuXG5cdC8vIGRpc3RfYnVmOyAvLyBidWZmZXIgZm9yIGRpc3RhbmNlc1xuXHQvLyBsY19idWY7IC8vIGJ1ZmZlciBmb3IgbGl0ZXJhbHMgb3IgbGVuZ3Roc1xuXHQvLyBUbyBzaW1wbGlmeSB0aGUgY29kZSwgZGlzdF9idWYgYW5kIGxjX2J1ZiBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBlbGVtZW50cy5cblx0Ly8gVG8gdXNlIGRpZmZlcmVudCBsZW5ndGhzLCBhbiBleHRyYSBmbGFnIGFycmF5IHdvdWxkIGJlIG5lY2Vzc2FyeS5cblxuXHRsZXQgbGFzdF9mbHVzaDsgLy8gdmFsdWUgb2YgZmx1c2ggcGFyYW0gZm9yIHByZXZpb3VzIGRlZmxhdGUgY2FsbFxuXG5cdGxldCB3X3NpemU7IC8vIExaNzcgd2luIHNpemUgKDMySyBieSBkZWZhdWx0KVxuXHRsZXQgd19iaXRzOyAvLyBsb2cyKHdfc2l6ZSkgKDguLjE2KVxuXHRsZXQgd19tYXNrOyAvLyB3X3NpemUgLSAxXG5cblx0bGV0IHdpbjtcblx0Ly8gU2xpZGluZyB3aW4uIElucHV0IGJ5dGVzIGFyZSByZWFkIGludG8gdGhlIHNlY29uZCBoYWxmIG9mIHRoZSB3aW4sXG5cdC8vIGFuZCBtb3ZlIHRvIHRoZSBmaXJzdCBoYWxmIGxhdGVyIHRvIGtlZXAgYSBkaWN0aW9uYXJ5IG9mIGF0IGxlYXN0IHdTaXplXG5cdC8vIGJ5dGVzLiBXaXRoIHRoaXMgb3JnYW5pemF0aW9uLCBtYXRjaGVzIGFyZSBsaW1pdGVkIHRvIGEgZGlzdGFuY2Ugb2Zcblx0Ly8gd1NpemUtTUFYX01BVENIIGJ5dGVzLCBidXQgdGhpcyBlbnN1cmVzIHRoYXQgSU8gaXMgYWx3YXlzXG5cdC8vIHBlcmZvcm1lZCB3aXRoIGEgbGVuZ3RoIG11bHRpcGxlIG9mIHRoZSBibG9jayBzaXplLiBBbHNvLCBpdCBsaW1pdHNcblx0Ly8gdGhlIHdpbiBzaXplIHRvIDY0Sywgd2hpY2ggaXMgcXVpdGUgdXNlZnVsIG9uIE1TRE9TLlxuXHQvLyBUbyBkbzogdXNlIHRoZSB1c2VyIGlucHV0IGJ1ZmZlciBhcyBzbGlkaW5nIHdpbi5cblxuXHRsZXQgd2luZG93X3NpemU7XG5cdC8vIEFjdHVhbCBzaXplIG9mIHdpbjogMip3U2l6ZSwgZXhjZXB0IHdoZW4gdGhlIHVzZXIgaW5wdXQgYnVmZmVyXG5cdC8vIGlzIGRpcmVjdGx5IHVzZWQgYXMgc2xpZGluZyB3aW4uXG5cblx0bGV0IHByZXY7XG5cdC8vIExpbmsgdG8gb2xkZXIgc3RyaW5nIHdpdGggc2FtZSBoYXNoIGluZGV4LiBUbyBsaW1pdCB0aGUgc2l6ZSBvZiB0aGlzXG5cdC8vIGFycmF5IHRvIDY0SywgdGhpcyBsaW5rIGlzIG1haW50YWluZWQgb25seSBmb3IgdGhlIGxhc3QgMzJLIHN0cmluZ3MuXG5cdC8vIEFuIGluZGV4IGluIHRoaXMgYXJyYXkgaXMgdGh1cyBhIHdpbiBpbmRleCBtb2R1bG8gMzJLLlxuXG5cdGxldCBoZWFkOyAvLyBIZWFkcyBvZiB0aGUgaGFzaCBjaGFpbnMgb3IgTklMLlxuXG5cdGxldCBpbnNfaDsgLy8gaGFzaCBpbmRleCBvZiBzdHJpbmcgdG8gYmUgaW5zZXJ0ZWRcblx0bGV0IGhhc2hfc2l6ZTsgLy8gbnVtYmVyIG9mIGVsZW1lbnRzIGluIGhhc2ggdGFibGVcblx0bGV0IGhhc2hfYml0czsgLy8gbG9nMihoYXNoX3NpemUpXG5cdGxldCBoYXNoX21hc2s7IC8vIGhhc2hfc2l6ZS0xXG5cblx0Ly8gTnVtYmVyIG9mIGJpdHMgYnkgd2hpY2ggaW5zX2ggbXVzdCBiZSBzaGlmdGVkIGF0IGVhY2ggaW5wdXRcblx0Ly8gc3RlcC4gSXQgbXVzdCBiZSBzdWNoIHRoYXQgYWZ0ZXIgTUlOX01BVENIIHN0ZXBzLCB0aGUgb2xkZXN0XG5cdC8vIGJ5dGUgbm8gbG9uZ2VyIHRha2VzIHBhcnQgaW4gdGhlIGhhc2gga2V5LCB0aGF0IGlzOlxuXHQvLyBoYXNoX3NoaWZ0ICogTUlOX01BVENIID49IGhhc2hfYml0c1xuXHRsZXQgaGFzaF9zaGlmdDtcblxuXHQvLyBXaW5kb3cgcG9zaXRpb24gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgY3VycmVudCBvdXRwdXQgYmxvY2suIEdldHNcblx0Ly8gbmVnYXRpdmUgd2hlbiB0aGUgd2luIGlzIG1vdmVkIGJhY2t3YXJkcy5cblxuXHRsZXQgYmxvY2tfc3RhcnQ7XG5cblx0bGV0IG1hdGNoX2xlbmd0aDsgLy8gbGVuZ3RoIG9mIGJlc3QgbWF0Y2hcblx0bGV0IHByZXZfbWF0Y2g7IC8vIHByZXZpb3VzIG1hdGNoXG5cdGxldCBtYXRjaF9hdmFpbGFibGU7IC8vIHNldCBpZiBwcmV2aW91cyBtYXRjaCBleGlzdHNcblx0bGV0IHN0cnN0YXJ0OyAvLyBzdGFydCBvZiBzdHJpbmcgdG8gaW5zZXJ0XG5cdGxldCBtYXRjaF9zdGFydDsgLy8gc3RhcnQgb2YgbWF0Y2hpbmcgc3RyaW5nXG5cdGxldCBsb29rYWhlYWQ7IC8vIG51bWJlciBvZiB2YWxpZCBieXRlcyBhaGVhZCBpbiB3aW5cblxuXHQvLyBMZW5ndGggb2YgdGhlIGJlc3QgbWF0Y2ggYXQgcHJldmlvdXMgc3RlcC4gTWF0Y2hlcyBub3QgZ3JlYXRlciB0aGFuIHRoaXNcblx0Ly8gYXJlIGRpc2NhcmRlZC4gVGhpcyBpcyB1c2VkIGluIHRoZSBsYXp5IG1hdGNoIGV2YWx1YXRpb24uXG5cdGxldCBwcmV2X2xlbmd0aDtcblxuXHQvLyBUbyBzcGVlZCB1cCBkZWZsYXRpb24sIGhhc2ggY2hhaW5zIGFyZSBuZXZlciBzZWFyY2hlZCBiZXlvbmQgdGhpc1xuXHQvLyBsZW5ndGguIEEgaGlnaGVyIGxpbWl0IGltcHJvdmVzIGNvbXByZXNzaW9uIHJhdGlvIGJ1dCBkZWdyYWRlcyB0aGUgc3BlZWQuXG5cdGxldCBtYXhfY2hhaW5fbGVuZ3RoO1xuXG5cdC8vIEF0dGVtcHQgdG8gZmluZCBhIGJldHRlciBtYXRjaCBvbmx5IHdoZW4gdGhlIGN1cnJlbnQgbWF0Y2ggaXMgc3RyaWN0bHlcblx0Ly8gc21hbGxlciB0aGFuIHRoaXMgdmFsdWUuIFRoaXMgbWVjaGFuaXNtIGlzIHVzZWQgb25seSBmb3IgY29tcHJlc3Npb25cblx0Ly8gbGV2ZWxzID49IDQuXG5cdGxldCBtYXhfbGF6eV9tYXRjaDtcblxuXHQvLyBJbnNlcnQgbmV3IHN0cmluZ3MgaW4gdGhlIGhhc2ggdGFibGUgb25seSBpZiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIG5vdFxuXHQvLyBncmVhdGVyIHRoYW4gdGhpcyBsZW5ndGguIFRoaXMgc2F2ZXMgdGltZSBidXQgZGVncmFkZXMgY29tcHJlc3Npb24uXG5cdC8vIG1heF9pbnNlcnRfbGVuZ3RoIGlzIHVzZWQgb25seSBmb3IgY29tcHJlc3Npb24gbGV2ZWxzIDw9IDMuXG5cblx0bGV0IGxldmVsOyAvLyBjb21wcmVzc2lvbiBsZXZlbCAoMS4uOSlcblx0bGV0IHN0cmF0ZWd5OyAvLyBmYXZvciBvciBmb3JjZSBIdWZmbWFuIGNvZGluZ1xuXG5cdC8vIFVzZSBhIGZhc3RlciBzZWFyY2ggd2hlbiB0aGUgcHJldmlvdXMgbWF0Y2ggaXMgbG9uZ2VyIHRoYW4gdGhpc1xuXHRsZXQgZ29vZF9tYXRjaDtcblxuXHQvLyBTdG9wIHNlYXJjaGluZyB3aGVuIGN1cnJlbnQgbWF0Y2ggZXhjZWVkcyB0aGlzXG5cdGxldCBuaWNlX21hdGNoO1xuXG5cdGxldCBkeW5fbHRyZWU7IC8vIGxpdGVyYWwgYW5kIGxlbmd0aCB0cmVlXG5cdGxldCBkeW5fZHRyZWU7IC8vIGRpc3RhbmNlIHRyZWVcblx0bGV0IGJsX3RyZWU7IC8vIEh1ZmZtYW4gdHJlZSBmb3IgYml0IGxlbmd0aHNcblxuXHRjb25zdCBsX2Rlc2MgPSBuZXcgVHJlZSgpOyAvLyBkZXNjIGZvciBsaXRlcmFsIHRyZWVcblx0Y29uc3QgZF9kZXNjID0gbmV3IFRyZWUoKTsgLy8gZGVzYyBmb3IgZGlzdGFuY2UgdHJlZVxuXHRjb25zdCBibF9kZXNjID0gbmV3IFRyZWUoKTsgLy8gZGVzYyBmb3IgYml0IGxlbmd0aCB0cmVlXG5cblx0Ly8gdGhhdC5oZWFwX2xlbjsgLy8gbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBoZWFwXG5cdC8vIHRoYXQuaGVhcF9tYXg7IC8vIGVsZW1lbnQgb2YgbGFyZ2VzdCBmcmVxdWVuY3lcblx0Ly8gVGhlIHNvbnMgb2YgaGVhcFtuXSBhcmUgaGVhcFsyKm5dIGFuZCBoZWFwWzIqbisxXS4gaGVhcFswXSBpcyBub3QgdXNlZC5cblx0Ly8gVGhlIHNhbWUgaGVhcCBhcnJheSBpcyB1c2VkIHRvIGJ1aWxkIGFsbCB0cmVlcy5cblxuXHQvLyBEZXB0aCBvZiBlYWNoIHN1YnRyZWUgdXNlZCBhcyB0aWUgYnJlYWtlciBmb3IgdHJlZXMgb2YgZXF1YWwgZnJlcXVlbmN5XG5cdHRoYXQuZGVwdGggPSBbXTtcblxuXHQvLyBTaXplIG9mIG1hdGNoIGJ1ZmZlciBmb3IgbGl0ZXJhbHMvbGVuZ3Rocy4gVGhlcmUgYXJlIDQgcmVhc29ucyBmb3Jcblx0Ly8gbGltaXRpbmcgbGl0X2J1ZnNpemUgdG8gNjRLOlxuXHQvLyAtIGZyZXF1ZW5jaWVzIGNhbiBiZSBrZXB0IGluIDE2IGJpdCBjb3VudGVyc1xuXHQvLyAtIGlmIGNvbXByZXNzaW9uIGlzIG5vdCBzdWNjZXNzZnVsIGZvciB0aGUgZmlyc3QgYmxvY2ssIGFsbCBpbnB1dFxuXHQvLyBkYXRhIGlzIHN0aWxsIGluIHRoZSB3aW4gc28gd2UgY2FuIHN0aWxsIGVtaXQgYSBzdG9yZWQgYmxvY2sgZXZlblxuXHQvLyB3aGVuIGlucHV0IGNvbWVzIGZyb20gc3RhbmRhcmQgaW5wdXQuIChUaGlzIGNhbiBhbHNvIGJlIGRvbmUgZm9yXG5cdC8vIGFsbCBibG9ja3MgaWYgbGl0X2J1ZnNpemUgaXMgbm90IGdyZWF0ZXIgdGhhbiAzMksuKVxuXHQvLyAtIGlmIGNvbXByZXNzaW9uIGlzIG5vdCBzdWNjZXNzZnVsIGZvciBhIGZpbGUgc21hbGxlciB0aGFuIDY0Sywgd2UgY2FuXG5cdC8vIGV2ZW4gZW1pdCBhIHN0b3JlZCBmaWxlIGluc3RlYWQgb2YgYSBzdG9yZWQgYmxvY2sgKHNhdmluZyA1IGJ5dGVzKS5cblx0Ly8gVGhpcyBpcyBhcHBsaWNhYmxlIG9ubHkgZm9yIHppcCAobm90IGd6aXAgb3IgemxpYikuXG5cdC8vIC0gY3JlYXRpbmcgbmV3IEh1ZmZtYW4gdHJlZXMgbGVzcyBmcmVxdWVudGx5IG1heSBub3QgcHJvdmlkZSBmYXN0XG5cdC8vIGFkYXB0YXRpb24gdG8gY2hhbmdlcyBpbiB0aGUgaW5wdXQgZGF0YSBzdGF0aXN0aWNzLiAoVGFrZSBmb3Jcblx0Ly8gZXhhbXBsZSBhIGJpbmFyeSBmaWxlIHdpdGggcG9vcmx5IGNvbXByZXNzaWJsZSBjb2RlIGZvbGxvd2VkIGJ5XG5cdC8vIGEgaGlnaGx5IGNvbXByZXNzaWJsZSBzdHJpbmcgdGFibGUuKSBTbWFsbGVyIGJ1ZmZlciBzaXplcyBnaXZlXG5cdC8vIGZhc3QgYWRhcHRhdGlvbiBidXQgaGF2ZSBvZiBjb3Vyc2UgdGhlIG92ZXJoZWFkIG9mIHRyYW5zbWl0dGluZ1xuXHQvLyB0cmVlcyBtb3JlIGZyZXF1ZW50bHkuXG5cdC8vIC0gSSBjYW4ndCBjb3VudCBhYm92ZSA0XG5cdGxldCBsaXRfYnVmc2l6ZTtcblxuXHRsZXQgbGFzdF9saXQ7IC8vIHJ1bm5pbmcgaW5kZXggaW4gZGlzdF9idWYgYW5kIGxjX2J1ZlxuXG5cdC8vIHRoYXQub3B0X2xlbjsgLy8gYml0IGxlbmd0aCBvZiBjdXJyZW50IGJsb2NrIHdpdGggb3B0aW1hbCB0cmVlc1xuXHQvLyB0aGF0LnN0YXRpY19sZW47IC8vIGJpdCBsZW5ndGggb2YgY3VycmVudCBibG9jayB3aXRoIHN0YXRpYyB0cmVlc1xuXHRsZXQgbWF0Y2hlczsgLy8gbnVtYmVyIG9mIHN0cmluZyBtYXRjaGVzIGluIGN1cnJlbnQgYmxvY2tcblx0bGV0IGxhc3RfZW9iX2xlbjsgLy8gYml0IGxlbmd0aCBvZiBFT0IgY29kZSBmb3IgbGFzdCBibG9ja1xuXG5cdC8vIE91dHB1dCBidWZmZXIuIGJpdHMgYXJlIGluc2VydGVkIHN0YXJ0aW5nIGF0IHRoZSBib3R0b20gKGxlYXN0XG5cdC8vIHNpZ25pZmljYW50IGJpdHMpLlxuXHRsZXQgYmlfYnVmO1xuXG5cdC8vIE51bWJlciBvZiB2YWxpZCBiaXRzIGluIGJpX2J1Zi4gQWxsIGJpdHMgYWJvdmUgdGhlIGxhc3QgdmFsaWQgYml0XG5cdC8vIGFyZSBhbHdheXMgemVyby5cblx0bGV0IGJpX3ZhbGlkO1xuXG5cdC8vIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggZm9yIGFuIG9wdGltYWwgdHJlZVxuXHR0aGF0LmJsX2NvdW50ID0gW107XG5cblx0Ly8gaGVhcCB1c2VkIHRvIGJ1aWxkIHRoZSBIdWZmbWFuIHRyZWVzXG5cdHRoYXQuaGVhcCA9IFtdO1xuXG5cdGR5bl9sdHJlZSA9IFtdO1xuXHRkeW5fZHRyZWUgPSBbXTtcblx0YmxfdHJlZSA9IFtdO1xuXG5cdGZ1bmN0aW9uIGxtX2luaXQoKSB7XG5cdFx0d2luZG93X3NpemUgPSAyICogd19zaXplO1xuXG5cdFx0aGVhZFtoYXNoX3NpemUgLSAxXSA9IDA7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBoYXNoX3NpemUgLSAxOyBpKyspIHtcblx0XHRcdGhlYWRbaV0gPSAwO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnM6XG5cdFx0bWF4X2xhenlfbWF0Y2ggPSBjb25maWdfdGFibGVbbGV2ZWxdLm1heF9sYXp5O1xuXHRcdGdvb2RfbWF0Y2ggPSBjb25maWdfdGFibGVbbGV2ZWxdLmdvb2RfbGVuZ3RoO1xuXHRcdG5pY2VfbWF0Y2ggPSBjb25maWdfdGFibGVbbGV2ZWxdLm5pY2VfbGVuZ3RoO1xuXHRcdG1heF9jaGFpbl9sZW5ndGggPSBjb25maWdfdGFibGVbbGV2ZWxdLm1heF9jaGFpbjtcblxuXHRcdHN0cnN0YXJ0ID0gMDtcblx0XHRibG9ja19zdGFydCA9IDA7XG5cdFx0bG9va2FoZWFkID0gMDtcblx0XHRtYXRjaF9sZW5ndGggPSBwcmV2X2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG5cdFx0bWF0Y2hfYXZhaWxhYmxlID0gMDtcblx0XHRpbnNfaCA9IDA7XG5cdH1cblxuXHRmdW5jdGlvbiBpbml0X2Jsb2NrKCkge1xuXHRcdGxldCBpO1xuXHRcdC8vIEluaXRpYWxpemUgdGhlIHRyZWVzLlxuXHRcdGZvciAoaSA9IDA7IGkgPCBMX0NPREVTOyBpKyspXG5cdFx0XHRkeW5fbHRyZWVbaSAqIDJdID0gMDtcblx0XHRmb3IgKGkgPSAwOyBpIDwgRF9DT0RFUzsgaSsrKVxuXHRcdFx0ZHluX2R0cmVlW2kgKiAyXSA9IDA7XG5cdFx0Zm9yIChpID0gMDsgaSA8IEJMX0NPREVTOyBpKyspXG5cdFx0XHRibF90cmVlW2kgKiAyXSA9IDA7XG5cblx0XHRkeW5fbHRyZWVbRU5EX0JMT0NLICogMl0gPSAxO1xuXHRcdHRoYXQub3B0X2xlbiA9IHRoYXQuc3RhdGljX2xlbiA9IDA7XG5cdFx0bGFzdF9saXQgPSBtYXRjaGVzID0gMDtcblx0fVxuXG5cdC8vIEluaXRpYWxpemUgdGhlIHRyZWUgZGF0YSBzdHJ1Y3R1cmVzIGZvciBhIG5ldyB6bGliIHN0cmVhbS5cblx0ZnVuY3Rpb24gdHJfaW5pdCgpIHtcblxuXHRcdGxfZGVzYy5keW5fdHJlZSA9IGR5bl9sdHJlZTtcblx0XHRsX2Rlc2Muc3RhdF9kZXNjID0gU3RhdGljVHJlZS5zdGF0aWNfbF9kZXNjO1xuXG5cdFx0ZF9kZXNjLmR5bl90cmVlID0gZHluX2R0cmVlO1xuXHRcdGRfZGVzYy5zdGF0X2Rlc2MgPSBTdGF0aWNUcmVlLnN0YXRpY19kX2Rlc2M7XG5cblx0XHRibF9kZXNjLmR5bl90cmVlID0gYmxfdHJlZTtcblx0XHRibF9kZXNjLnN0YXRfZGVzYyA9IFN0YXRpY1RyZWUuc3RhdGljX2JsX2Rlc2M7XG5cblx0XHRiaV9idWYgPSAwO1xuXHRcdGJpX3ZhbGlkID0gMDtcblx0XHRsYXN0X2VvYl9sZW4gPSA4OyAvLyBlbm91Z2ggbG9va2FoZWFkIGZvciBpbmZsYXRlXG5cblx0XHQvLyBJbml0aWFsaXplIHRoZSBmaXJzdCBibG9jayBvZiB0aGUgZmlyc3QgZmlsZTpcblx0XHRpbml0X2Jsb2NrKCk7XG5cdH1cblxuXHQvLyBSZXN0b3JlIHRoZSBoZWFwIHByb3BlcnR5IGJ5IG1vdmluZyBkb3duIHRoZSB0cmVlIHN0YXJ0aW5nIGF0IG5vZGUgayxcblx0Ly8gZXhjaGFuZ2luZyBhIG5vZGUgd2l0aCB0aGUgc21hbGxlc3Qgb2YgaXRzIHR3byBzb25zIGlmIG5lY2Vzc2FyeSxcblx0Ly8gc3RvcHBpbmdcblx0Ly8gd2hlbiB0aGUgaGVhcCBwcm9wZXJ0eSBpcyByZS1lc3RhYmxpc2hlZCAoZWFjaCBmYXRoZXIgc21hbGxlciB0aGFuIGl0c1xuXHQvLyB0d28gc29ucykuXG5cdHRoYXQucHFkb3duaGVhcCA9IGZ1bmN0aW9uICh0cmVlLCAvLyB0aGUgdHJlZSB0byByZXN0b3JlXG5cdFx0ayAvLyBub2RlIHRvIG1vdmUgZG93blxuXHQpIHtcblx0XHRjb25zdCBoZWFwID0gdGhhdC5oZWFwO1xuXHRcdGNvbnN0IHYgPSBoZWFwW2tdO1xuXHRcdGxldCBqID0gayA8PCAxOyAvLyBsZWZ0IHNvbiBvZiBrXG5cdFx0d2hpbGUgKGogPD0gdGhhdC5oZWFwX2xlbikge1xuXHRcdFx0Ly8gU2V0IGogdG8gdGhlIHNtYWxsZXN0IG9mIHRoZSB0d28gc29uczpcblx0XHRcdGlmIChqIDwgdGhhdC5oZWFwX2xlbiAmJiBzbWFsbGVyKHRyZWUsIGhlYXBbaiArIDFdLCBoZWFwW2pdLCB0aGF0LmRlcHRoKSkge1xuXHRcdFx0XHRqKys7XG5cdFx0XHR9XG5cdFx0XHQvLyBFeGl0IGlmIHYgaXMgc21hbGxlciB0aGFuIGJvdGggc29uc1xuXHRcdFx0aWYgKHNtYWxsZXIodHJlZSwgdiwgaGVhcFtqXSwgdGhhdC5kZXB0aCkpXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHQvLyBFeGNoYW5nZSB2IHdpdGggdGhlIHNtYWxsZXN0IHNvblxuXHRcdFx0aGVhcFtrXSA9IGhlYXBbal07XG5cdFx0XHRrID0gajtcblx0XHRcdC8vIEFuZCBjb250aW51ZSBkb3duIHRoZSB0cmVlLCBzZXR0aW5nIGogdG8gdGhlIGxlZnQgc29uIG9mIGtcblx0XHRcdGogPDw9IDE7XG5cdFx0fVxuXHRcdGhlYXBba10gPSB2O1xuXHR9O1xuXG5cdC8vIFNjYW4gYSBsaXRlcmFsIG9yIGRpc3RhbmNlIHRyZWUgdG8gZGV0ZXJtaW5lIHRoZSBmcmVxdWVuY2llcyBvZiB0aGUgY29kZXNcblx0Ly8gaW4gdGhlIGJpdCBsZW5ndGggdHJlZS5cblx0ZnVuY3Rpb24gc2Nhbl90cmVlKHRyZWUsLy8gdGhlIHRyZWUgdG8gYmUgc2Nhbm5lZFxuXHRcdG1heF9jb2RlIC8vIGFuZCBpdHMgbGFyZ2VzdCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeVxuXHQpIHtcblx0XHRsZXQgcHJldmxlbiA9IC0xOyAvLyBsYXN0IGVtaXR0ZWQgbGVuZ3RoXG5cdFx0bGV0IGN1cmxlbjsgLy8gbGVuZ3RoIG9mIGN1cnJlbnQgY29kZVxuXHRcdGxldCBuZXh0bGVuID0gdHJlZVswICogMiArIDFdOyAvLyBsZW5ndGggb2YgbmV4dCBjb2RlXG5cdFx0bGV0IGNvdW50ID0gMDsgLy8gcmVwZWF0IGNvdW50IG9mIHRoZSBjdXJyZW50IGNvZGVcblx0XHRsZXQgbWF4X2NvdW50ID0gNzsgLy8gbWF4IHJlcGVhdCBjb3VudFxuXHRcdGxldCBtaW5fY291bnQgPSA0OyAvLyBtaW4gcmVwZWF0IGNvdW50XG5cblx0XHRpZiAobmV4dGxlbiA9PT0gMCkge1xuXHRcdFx0bWF4X2NvdW50ID0gMTM4O1xuXHRcdFx0bWluX2NvdW50ID0gMztcblx0XHR9XG5cdFx0dHJlZVsobWF4X2NvZGUgKyAxKSAqIDIgKyAxXSA9IDB4ZmZmZjsgLy8gZ3VhcmRcblxuXHRcdGZvciAobGV0IG4gPSAwOyBuIDw9IG1heF9jb2RlOyBuKyspIHtcblx0XHRcdGN1cmxlbiA9IG5leHRsZW47XG5cdFx0XHRuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdO1xuXHRcdFx0aWYgKCsrY291bnQgPCBtYXhfY291bnQgJiYgY3VybGVuID09IG5leHRsZW4pIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9IGVsc2UgaWYgKGNvdW50IDwgbWluX2NvdW50KSB7XG5cdFx0XHRcdGJsX3RyZWVbY3VybGVuICogMl0gKz0gY291bnQ7XG5cdFx0XHR9IGVsc2UgaWYgKGN1cmxlbiAhPT0gMCkge1xuXHRcdFx0XHRpZiAoY3VybGVuICE9IHByZXZsZW4pXG5cdFx0XHRcdFx0YmxfdHJlZVtjdXJsZW4gKiAyXSsrO1xuXHRcdFx0XHRibF90cmVlW1JFUF8zXzYgKiAyXSsrO1xuXHRcdFx0fSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuXHRcdFx0XHRibF90cmVlW1JFUFpfM18xMCAqIDJdKys7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRibF90cmVlW1JFUFpfMTFfMTM4ICogMl0rKztcblx0XHRcdH1cblx0XHRcdGNvdW50ID0gMDtcblx0XHRcdHByZXZsZW4gPSBjdXJsZW47XG5cdFx0XHRpZiAobmV4dGxlbiA9PT0gMCkge1xuXHRcdFx0XHRtYXhfY291bnQgPSAxMzg7XG5cdFx0XHRcdG1pbl9jb3VudCA9IDM7XG5cdFx0XHR9IGVsc2UgaWYgKGN1cmxlbiA9PSBuZXh0bGVuKSB7XG5cdFx0XHRcdG1heF9jb3VudCA9IDY7XG5cdFx0XHRcdG1pbl9jb3VudCA9IDM7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXhfY291bnQgPSA3O1xuXHRcdFx0XHRtaW5fY291bnQgPSA0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbnN0cnVjdCB0aGUgSHVmZm1hbiB0cmVlIGZvciB0aGUgYml0IGxlbmd0aHMgYW5kIHJldHVybiB0aGUgaW5kZXggaW5cblx0Ly8gYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG5cdGZ1bmN0aW9uIGJ1aWxkX2JsX3RyZWUoKSB7XG5cdFx0bGV0IG1heF9ibGluZGV4OyAvLyBpbmRleCBvZiBsYXN0IGJpdCBsZW5ndGggY29kZSBvZiBub24gemVybyBmcmVxXG5cblx0XHQvLyBEZXRlcm1pbmUgdGhlIGJpdCBsZW5ndGggZnJlcXVlbmNpZXMgZm9yIGxpdGVyYWwgYW5kIGRpc3RhbmNlIHRyZWVzXG5cdFx0c2Nhbl90cmVlKGR5bl9sdHJlZSwgbF9kZXNjLm1heF9jb2RlKTtcblx0XHRzY2FuX3RyZWUoZHluX2R0cmVlLCBkX2Rlc2MubWF4X2NvZGUpO1xuXG5cdFx0Ly8gQnVpbGQgdGhlIGJpdCBsZW5ndGggdHJlZTpcblx0XHRibF9kZXNjLmJ1aWxkX3RyZWUodGhhdCk7XG5cdFx0Ly8gb3B0X2xlbiBub3cgaW5jbHVkZXMgdGhlIGxlbmd0aCBvZiB0aGUgdHJlZSByZXByZXNlbnRhdGlvbnMsIGV4Y2VwdFxuXHRcdC8vIHRoZSBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RocyBjb2RlcyBhbmQgdGhlIDUrNSs0IGJpdHMgZm9yIHRoZVxuXHRcdC8vIGNvdW50cy5cblxuXHRcdC8vIERldGVybWluZSB0aGUgbnVtYmVyIG9mIGJpdCBsZW5ndGggY29kZXMgdG8gc2VuZC4gVGhlIHBremlwIGZvcm1hdFxuXHRcdC8vIHJlcXVpcmVzIHRoYXQgYXQgbGVhc3QgNCBiaXQgbGVuZ3RoIGNvZGVzIGJlIHNlbnQuIChhcHBub3RlLnR4dCBzYXlzXG5cdFx0Ly8gMyBidXQgdGhlIGFjdHVhbCB2YWx1ZSB1c2VkIGlzIDQuKVxuXHRcdGZvciAobWF4X2JsaW5kZXggPSBCTF9DT0RFUyAtIDE7IG1heF9ibGluZGV4ID49IDM7IG1heF9ibGluZGV4LS0pIHtcblx0XHRcdGlmIChibF90cmVlW1RyZWUuYmxfb3JkZXJbbWF4X2JsaW5kZXhdICogMiArIDFdICE9PSAwKVxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0Ly8gVXBkYXRlIG9wdF9sZW4gdG8gaW5jbHVkZSB0aGUgYml0IGxlbmd0aCB0cmVlIGFuZCBjb3VudHNcblx0XHR0aGF0Lm9wdF9sZW4gKz0gMyAqIChtYXhfYmxpbmRleCArIDEpICsgNSArIDUgKyA0O1xuXG5cdFx0cmV0dXJuIG1heF9ibGluZGV4O1xuXHR9XG5cblx0Ly8gT3V0cHV0IGEgYnl0ZSBvbiB0aGUgc3RyZWFtLlxuXHQvLyBJTiBhc3NlcnRpb246IHRoZXJlIGlzIGVub3VnaCByb29tIGluIHBlbmRpbmdfYnVmLlxuXHRmdW5jdGlvbiBwdXRfYnl0ZShwKSB7XG5cdFx0dGhhdC5wZW5kaW5nX2J1Zlt0aGF0LnBlbmRpbmcrK10gPSBwO1xuXHR9XG5cblx0ZnVuY3Rpb24gcHV0X3Nob3J0KHcpIHtcblx0XHRwdXRfYnl0ZSh3ICYgMHhmZik7XG5cdFx0cHV0X2J5dGUoKHcgPj4+IDgpICYgMHhmZik7XG5cdH1cblxuXHRmdW5jdGlvbiBwdXRTaG9ydE1TQihiKSB7XG5cdFx0cHV0X2J5dGUoKGIgPj4gOCkgJiAweGZmKTtcblx0XHRwdXRfYnl0ZSgoYiAmIDB4ZmYpICYgMHhmZik7XG5cdH1cblxuXHRmdW5jdGlvbiBzZW5kX2JpdHModmFsdWUsIGxlbmd0aCkge1xuXHRcdGxldCB2YWw7XG5cdFx0Y29uc3QgbGVuID0gbGVuZ3RoO1xuXHRcdGlmIChiaV92YWxpZCA+IEJ1Zl9zaXplIC0gbGVuKSB7XG5cdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdC8vIGJpX2J1ZiB8PSAodmFsIDw8IGJpX3ZhbGlkKTtcblx0XHRcdGJpX2J1ZiB8PSAoKHZhbCA8PCBiaV92YWxpZCkgJiAweGZmZmYpO1xuXHRcdFx0cHV0X3Nob3J0KGJpX2J1Zik7XG5cdFx0XHRiaV9idWYgPSB2YWwgPj4+IChCdWZfc2l6ZSAtIGJpX3ZhbGlkKTtcblx0XHRcdGJpX3ZhbGlkICs9IGxlbiAtIEJ1Zl9zaXplO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBiaV9idWYgfD0gKHZhbHVlKSA8PCBiaV92YWxpZDtcblx0XHRcdGJpX2J1ZiB8PSAoKCh2YWx1ZSkgPDwgYmlfdmFsaWQpICYgMHhmZmZmKTtcblx0XHRcdGJpX3ZhbGlkICs9IGxlbjtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBzZW5kX2NvZGUoYywgdHJlZSkge1xuXHRcdGNvbnN0IGMyID0gYyAqIDI7XG5cdFx0c2VuZF9iaXRzKHRyZWVbYzJdICYgMHhmZmZmLCB0cmVlW2MyICsgMV0gJiAweGZmZmYpO1xuXHR9XG5cblx0Ly8gU2VuZCBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSBpbiBjb21wcmVzc2VkIGZvcm0sIHVzaW5nIHRoZSBjb2RlcyBpblxuXHQvLyBibF90cmVlLlxuXHRmdW5jdGlvbiBzZW5kX3RyZWUodHJlZSwvLyB0aGUgdHJlZSB0byBiZSBzZW50XG5cdFx0bWF4X2NvZGUgLy8gYW5kIGl0cyBsYXJnZXN0IGNvZGUgb2Ygbm9uIHplcm8gZnJlcXVlbmN5XG5cdCkge1xuXHRcdGxldCBuOyAvLyBpdGVyYXRlcyBvdmVyIGFsbCB0cmVlIGVsZW1lbnRzXG5cdFx0bGV0IHByZXZsZW4gPSAtMTsgLy8gbGFzdCBlbWl0dGVkIGxlbmd0aFxuXHRcdGxldCBjdXJsZW47IC8vIGxlbmd0aCBvZiBjdXJyZW50IGNvZGVcblx0XHRsZXQgbmV4dGxlbiA9IHRyZWVbMCAqIDIgKyAxXTsgLy8gbGVuZ3RoIG9mIG5leHQgY29kZVxuXHRcdGxldCBjb3VudCA9IDA7IC8vIHJlcGVhdCBjb3VudCBvZiB0aGUgY3VycmVudCBjb2RlXG5cdFx0bGV0IG1heF9jb3VudCA9IDc7IC8vIG1heCByZXBlYXQgY291bnRcblx0XHRsZXQgbWluX2NvdW50ID0gNDsgLy8gbWluIHJlcGVhdCBjb3VudFxuXG5cdFx0aWYgKG5leHRsZW4gPT09IDApIHtcblx0XHRcdG1heF9jb3VudCA9IDEzODtcblx0XHRcdG1pbl9jb3VudCA9IDM7XG5cdFx0fVxuXG5cdFx0Zm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG5cdFx0XHRjdXJsZW4gPSBuZXh0bGVuO1xuXHRcdFx0bmV4dGxlbiA9IHRyZWVbKG4gKyAxKSAqIDIgKyAxXTtcblx0XHRcdGlmICgrK2NvdW50IDwgbWF4X2NvdW50ICYmIGN1cmxlbiA9PSBuZXh0bGVuKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0c2VuZF9jb2RlKGN1cmxlbiwgYmxfdHJlZSk7XG5cdFx0XHRcdH0gd2hpbGUgKC0tY291bnQgIT09IDApO1xuXHRcdFx0fSBlbHNlIGlmIChjdXJsZW4gIT09IDApIHtcblx0XHRcdFx0aWYgKGN1cmxlbiAhPSBwcmV2bGVuKSB7XG5cdFx0XHRcdFx0c2VuZF9jb2RlKGN1cmxlbiwgYmxfdHJlZSk7XG5cdFx0XHRcdFx0Y291bnQtLTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZW5kX2NvZGUoUkVQXzNfNiwgYmxfdHJlZSk7XG5cdFx0XHRcdHNlbmRfYml0cyhjb3VudCAtIDMsIDIpO1xuXHRcdFx0fSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuXHRcdFx0XHRzZW5kX2NvZGUoUkVQWl8zXzEwLCBibF90cmVlKTtcblx0XHRcdFx0c2VuZF9iaXRzKGNvdW50IC0gMywgMyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZW5kX2NvZGUoUkVQWl8xMV8xMzgsIGJsX3RyZWUpO1xuXHRcdFx0XHRzZW5kX2JpdHMoY291bnQgLSAxMSwgNyk7XG5cdFx0XHR9XG5cdFx0XHRjb3VudCA9IDA7XG5cdFx0XHRwcmV2bGVuID0gY3VybGVuO1xuXHRcdFx0aWYgKG5leHRsZW4gPT09IDApIHtcblx0XHRcdFx0bWF4X2NvdW50ID0gMTM4O1xuXHRcdFx0XHRtaW5fY291bnQgPSAzO1xuXHRcdFx0fSBlbHNlIGlmIChjdXJsZW4gPT0gbmV4dGxlbikge1xuXHRcdFx0XHRtYXhfY291bnQgPSA2O1xuXHRcdFx0XHRtaW5fY291bnQgPSAzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF4X2NvdW50ID0gNztcblx0XHRcdFx0bWluX2NvdW50ID0gNDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZW5kIHRoZSBoZWFkZXIgZm9yIGEgYmxvY2sgdXNpbmcgZHluYW1pYyBIdWZmbWFuIHRyZWVzOiB0aGUgY291bnRzLCB0aGVcblx0Ly8gbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aCBjb2RlcywgdGhlIGxpdGVyYWwgdHJlZSBhbmQgdGhlIGRpc3RhbmNlIHRyZWUuXG5cdC8vIElOIGFzc2VydGlvbjogbGNvZGVzID49IDI1NywgZGNvZGVzID49IDEsIGJsY29kZXMgPj0gNC5cblx0ZnVuY3Rpb24gc2VuZF9hbGxfdHJlZXMobGNvZGVzLCBkY29kZXMsIGJsY29kZXMpIHtcblx0XHRsZXQgcmFuazsgLy8gaW5kZXggaW4gYmxfb3JkZXJcblxuXHRcdHNlbmRfYml0cyhsY29kZXMgLSAyNTcsIDUpOyAvLyBub3QgKzI1NSBhcyBzdGF0ZWQgaW4gYXBwbm90ZS50eHRcblx0XHRzZW5kX2JpdHMoZGNvZGVzIC0gMSwgNSk7XG5cdFx0c2VuZF9iaXRzKGJsY29kZXMgLSA0LCA0KTsgLy8gbm90IC0zIGFzIHN0YXRlZCBpbiBhcHBub3RlLnR4dFxuXHRcdGZvciAocmFuayA9IDA7IHJhbmsgPCBibGNvZGVzOyByYW5rKyspIHtcblx0XHRcdHNlbmRfYml0cyhibF90cmVlW1RyZWUuYmxfb3JkZXJbcmFua10gKiAyICsgMV0sIDMpO1xuXHRcdH1cblx0XHRzZW5kX3RyZWUoZHluX2x0cmVlLCBsY29kZXMgLSAxKTsgLy8gbGl0ZXJhbCB0cmVlXG5cdFx0c2VuZF90cmVlKGR5bl9kdHJlZSwgZGNvZGVzIC0gMSk7IC8vIGRpc3RhbmNlIHRyZWVcblx0fVxuXG5cdC8vIEZsdXNoIHRoZSBiaXQgYnVmZmVyLCBrZWVwaW5nIGF0IG1vc3QgNyBiaXRzIGluIGl0LlxuXHRmdW5jdGlvbiBiaV9mbHVzaCgpIHtcblx0XHRpZiAoYmlfdmFsaWQgPT0gMTYpIHtcblx0XHRcdHB1dF9zaG9ydChiaV9idWYpO1xuXHRcdFx0YmlfYnVmID0gMDtcblx0XHRcdGJpX3ZhbGlkID0gMDtcblx0XHR9IGVsc2UgaWYgKGJpX3ZhbGlkID49IDgpIHtcblx0XHRcdHB1dF9ieXRlKGJpX2J1ZiAmIDB4ZmYpO1xuXHRcdFx0YmlfYnVmID4+Pj0gODtcblx0XHRcdGJpX3ZhbGlkIC09IDg7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2VuZCBvbmUgZW1wdHkgc3RhdGljIGJsb2NrIHRvIGdpdmUgZW5vdWdoIGxvb2thaGVhZCBmb3IgaW5mbGF0ZS5cblx0Ly8gVGhpcyB0YWtlcyAxMCBiaXRzLCBvZiB3aGljaCA3IG1heSByZW1haW4gaW4gdGhlIGJpdCBidWZmZXIuXG5cdC8vIFRoZSBjdXJyZW50IGluZmxhdGUgY29kZSByZXF1aXJlcyA5IGJpdHMgb2YgbG9va2FoZWFkLiBJZiB0aGVcblx0Ly8gbGFzdCB0d28gY29kZXMgZm9yIHRoZSBwcmV2aW91cyBibG9jayAocmVhbCBjb2RlIHBsdXMgRU9CKSB3ZXJlIGNvZGVkXG5cdC8vIG9uIDUgYml0cyBvciBsZXNzLCBpbmZsYXRlIG1heSBoYXZlIG9ubHkgNSszIGJpdHMgb2YgbG9va2FoZWFkIHRvIGRlY29kZVxuXHQvLyB0aGUgbGFzdCByZWFsIGNvZGUuIEluIHRoaXMgY2FzZSB3ZSBzZW5kIHR3byBlbXB0eSBzdGF0aWMgYmxvY2tzIGluc3RlYWRcblx0Ly8gb2Ygb25lLiAoVGhlcmUgYXJlIG5vIHByb2JsZW1zIGlmIHRoZSBwcmV2aW91cyBibG9jayBpcyBzdG9yZWQgb3IgZml4ZWQuKVxuXHQvLyBUbyBzaW1wbGlmeSB0aGUgY29kZSwgd2UgYXNzdW1lIHRoZSB3b3JzdCBjYXNlIG9mIGxhc3QgcmVhbCBjb2RlIGVuY29kZWRcblx0Ly8gb24gb25lIGJpdCBvbmx5LlxuXHRmdW5jdGlvbiBfdHJfYWxpZ24oKSB7XG5cdFx0c2VuZF9iaXRzKFNUQVRJQ19UUkVFUyA8PCAxLCAzKTtcblx0XHRzZW5kX2NvZGUoRU5EX0JMT0NLLCBTdGF0aWNUcmVlLnN0YXRpY19sdHJlZSk7XG5cblx0XHRiaV9mbHVzaCgpO1xuXG5cdFx0Ly8gT2YgdGhlIDEwIGJpdHMgZm9yIHRoZSBlbXB0eSBibG9jaywgd2UgaGF2ZSBhbHJlYWR5IHNlbnRcblx0XHQvLyAoMTAgLSBiaV92YWxpZCkgYml0cy4gVGhlIGxvb2thaGVhZCBmb3IgdGhlIGxhc3QgcmVhbCBjb2RlIChiZWZvcmVcblx0XHQvLyB0aGUgRU9CIG9mIHRoZSBwcmV2aW91cyBibG9jaykgd2FzIHRodXMgYXQgbGVhc3Qgb25lIHBsdXMgdGhlIGxlbmd0aFxuXHRcdC8vIG9mIHRoZSBFT0IgcGx1cyB3aGF0IHdlIGhhdmUganVzdCBzZW50IG9mIHRoZSBlbXB0eSBzdGF0aWMgYmxvY2suXG5cdFx0aWYgKDEgKyBsYXN0X2VvYl9sZW4gKyAxMCAtIGJpX3ZhbGlkIDwgOSkge1xuXHRcdFx0c2VuZF9iaXRzKFNUQVRJQ19UUkVFUyA8PCAxLCAzKTtcblx0XHRcdHNlbmRfY29kZShFTkRfQkxPQ0ssIFN0YXRpY1RyZWUuc3RhdGljX2x0cmVlKTtcblx0XHRcdGJpX2ZsdXNoKCk7XG5cdFx0fVxuXHRcdGxhc3RfZW9iX2xlbiA9IDc7XG5cdH1cblxuXHQvLyBTYXZlIHRoZSBtYXRjaCBpbmZvIGFuZCB0YWxseSB0aGUgZnJlcXVlbmN5IGNvdW50cy4gUmV0dXJuIHRydWUgaWZcblx0Ly8gdGhlIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkLlxuXHRmdW5jdGlvbiBfdHJfdGFsbHkoZGlzdCwgLy8gZGlzdGFuY2Ugb2YgbWF0Y2hlZCBzdHJpbmdcblx0XHRsYyAvLyBtYXRjaCBsZW5ndGgtTUlOX01BVENIIG9yIHVubWF0Y2hlZCBjaGFyIChpZiBkaXN0PT0wKVxuXHQpIHtcblx0XHRsZXQgb3V0X2xlbmd0aCwgaW5fbGVuZ3RoLCBkY29kZTtcblx0XHR0aGF0LmRpc3RfYnVmW2xhc3RfbGl0XSA9IGRpc3Q7XG5cdFx0dGhhdC5sY19idWZbbGFzdF9saXRdID0gbGMgJiAweGZmO1xuXHRcdGxhc3RfbGl0Kys7XG5cblx0XHRpZiAoZGlzdCA9PT0gMCkge1xuXHRcdFx0Ly8gbGMgaXMgdGhlIHVubWF0Y2hlZCBjaGFyXG5cdFx0XHRkeW5fbHRyZWVbbGMgKiAyXSsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVzKys7XG5cdFx0XHQvLyBIZXJlLCBsYyBpcyB0aGUgbWF0Y2ggbGVuZ3RoIC0gTUlOX01BVENIXG5cdFx0XHRkaXN0LS07IC8vIGRpc3QgPSBtYXRjaCBkaXN0YW5jZSAtIDFcblx0XHRcdGR5bl9sdHJlZVsoVHJlZS5fbGVuZ3RoX2NvZGVbbGNdICsgTElURVJBTFMgKyAxKSAqIDJdKys7XG5cdFx0XHRkeW5fZHRyZWVbVHJlZS5kX2NvZGUoZGlzdCkgKiAyXSsrO1xuXHRcdH1cblxuXHRcdGlmICgobGFzdF9saXQgJiAweDFmZmYpID09PSAwICYmIGxldmVsID4gMikge1xuXHRcdFx0Ly8gQ29tcHV0ZSBhbiB1cHBlciBib3VuZCBmb3IgdGhlIGNvbXByZXNzZWQgbGVuZ3RoXG5cdFx0XHRvdXRfbGVuZ3RoID0gbGFzdF9saXQgKiA4O1xuXHRcdFx0aW5fbGVuZ3RoID0gc3Ryc3RhcnQgLSBibG9ja19zdGFydDtcblx0XHRcdGZvciAoZGNvZGUgPSAwOyBkY29kZSA8IERfQ09ERVM7IGRjb2RlKyspIHtcblx0XHRcdFx0b3V0X2xlbmd0aCArPSBkeW5fZHRyZWVbZGNvZGUgKiAyXSAqICg1ICsgVHJlZS5leHRyYV9kYml0c1tkY29kZV0pO1xuXHRcdFx0fVxuXHRcdFx0b3V0X2xlbmd0aCA+Pj49IDM7XG5cdFx0XHRpZiAoKG1hdGNoZXMgPCBNYXRoLmZsb29yKGxhc3RfbGl0IC8gMikpICYmIG91dF9sZW5ndGggPCBNYXRoLmZsb29yKGluX2xlbmd0aCAvIDIpKVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gKGxhc3RfbGl0ID09IGxpdF9idWZzaXplIC0gMSk7XG5cdFx0Ly8gV2UgYXZvaWQgZXF1YWxpdHkgd2l0aCBsaXRfYnVmc2l6ZSBiZWNhdXNlIG9mIHdyYXBhcm91bmQgYXQgNjRLXG5cdFx0Ly8gb24gMTYgYml0IG1hY2hpbmVzIGFuZCBiZWNhdXNlIHN0b3JlZCBibG9ja3MgYXJlIHJlc3RyaWN0ZWQgdG9cblx0XHQvLyA2NEstMSBieXRlcy5cblx0fVxuXG5cdC8vIFNlbmQgdGhlIGJsb2NrIGRhdGEgY29tcHJlc3NlZCB1c2luZyB0aGUgZ2l2ZW4gSHVmZm1hbiB0cmVlc1xuXHRmdW5jdGlvbiBjb21wcmVzc19ibG9jayhsdHJlZSwgZHRyZWUpIHtcblx0XHRsZXQgZGlzdDsgLy8gZGlzdGFuY2Ugb2YgbWF0Y2hlZCBzdHJpbmdcblx0XHRsZXQgbGM7IC8vIG1hdGNoIGxlbmd0aCBvciB1bm1hdGNoZWQgY2hhciAoaWYgZGlzdCA9PT0gMClcblx0XHRsZXQgbHggPSAwOyAvLyBydW5uaW5nIGluZGV4IGluIGRpc3RfYnVmIGFuZCBsY19idWZcblx0XHRsZXQgY29kZTsgLy8gdGhlIGNvZGUgdG8gc2VuZFxuXHRcdGxldCBleHRyYTsgLy8gbnVtYmVyIG9mIGV4dHJhIGJpdHMgdG8gc2VuZFxuXG5cdFx0aWYgKGxhc3RfbGl0ICE9PSAwKSB7XG5cdFx0XHRkbyB7XG5cdFx0XHRcdGRpc3QgPSB0aGF0LmRpc3RfYnVmW2x4XTtcblx0XHRcdFx0bGMgPSB0aGF0LmxjX2J1ZltseF07XG5cdFx0XHRcdGx4Kys7XG5cblx0XHRcdFx0aWYgKGRpc3QgPT09IDApIHtcblx0XHRcdFx0XHRzZW5kX2NvZGUobGMsIGx0cmVlKTsgLy8gc2VuZCBhIGxpdGVyYWwgYnl0ZVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIEhlcmUsIGxjIGlzIHRoZSBtYXRjaCBsZW5ndGggLSBNSU5fTUFUQ0hcblx0XHRcdFx0XHRjb2RlID0gVHJlZS5fbGVuZ3RoX2NvZGVbbGNdO1xuXG5cdFx0XHRcdFx0c2VuZF9jb2RlKGNvZGUgKyBMSVRFUkFMUyArIDEsIGx0cmVlKTsgLy8gc2VuZCB0aGUgbGVuZ3RoXG5cdFx0XHRcdFx0Ly8gY29kZVxuXHRcdFx0XHRcdGV4dHJhID0gVHJlZS5leHRyYV9sYml0c1tjb2RlXTtcblx0XHRcdFx0XHRpZiAoZXh0cmEgIT09IDApIHtcblx0XHRcdFx0XHRcdGxjIC09IFRyZWUuYmFzZV9sZW5ndGhbY29kZV07XG5cdFx0XHRcdFx0XHRzZW5kX2JpdHMobGMsIGV4dHJhKTsgLy8gc2VuZCB0aGUgZXh0cmEgbGVuZ3RoIGJpdHNcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGlzdC0tOyAvLyBkaXN0IGlzIG5vdyB0aGUgbWF0Y2ggZGlzdGFuY2UgLSAxXG5cdFx0XHRcdFx0Y29kZSA9IFRyZWUuZF9jb2RlKGRpc3QpO1xuXG5cdFx0XHRcdFx0c2VuZF9jb2RlKGNvZGUsIGR0cmVlKTsgLy8gc2VuZCB0aGUgZGlzdGFuY2UgY29kZVxuXHRcdFx0XHRcdGV4dHJhID0gVHJlZS5leHRyYV9kYml0c1tjb2RlXTtcblx0XHRcdFx0XHRpZiAoZXh0cmEgIT09IDApIHtcblx0XHRcdFx0XHRcdGRpc3QgLT0gVHJlZS5iYXNlX2Rpc3RbY29kZV07XG5cdFx0XHRcdFx0XHRzZW5kX2JpdHMoZGlzdCwgZXh0cmEpOyAvLyBzZW5kIHRoZSBleHRyYSBkaXN0YW5jZSBiaXRzXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IC8vIGxpdGVyYWwgb3IgbWF0Y2ggcGFpciA/XG5cdFx0XHR9IHdoaWxlIChseCA8IGxhc3RfbGl0KTtcblx0XHR9XG5cblx0XHRzZW5kX2NvZGUoRU5EX0JMT0NLLCBsdHJlZSk7XG5cdFx0bGFzdF9lb2JfbGVuID0gbHRyZWVbRU5EX0JMT0NLICogMiArIDFdO1xuXHR9XG5cblx0Ly8gRmx1c2ggdGhlIGJpdCBidWZmZXIgYW5kIGFsaWduIHRoZSBvdXRwdXQgb24gYSBieXRlIGJvdW5kYXJ5XG5cdGZ1bmN0aW9uIGJpX3dpbmR1cCgpIHtcblx0XHRpZiAoYmlfdmFsaWQgPiA4KSB7XG5cdFx0XHRwdXRfc2hvcnQoYmlfYnVmKTtcblx0XHR9IGVsc2UgaWYgKGJpX3ZhbGlkID4gMCkge1xuXHRcdFx0cHV0X2J5dGUoYmlfYnVmICYgMHhmZik7XG5cdFx0fVxuXHRcdGJpX2J1ZiA9IDA7XG5cdFx0YmlfdmFsaWQgPSAwO1xuXHR9XG5cblx0Ly8gQ29weSBhIHN0b3JlZCBibG9jaywgc3RvcmluZyBmaXJzdCB0aGUgbGVuZ3RoIGFuZCBpdHNcblx0Ly8gb25lJ3MgY29tcGxlbWVudCBpZiByZXF1ZXN0ZWQuXG5cdGZ1bmN0aW9uIGNvcHlfYmxvY2soYnVmLCAvLyB0aGUgaW5wdXQgZGF0YVxuXHRcdGxlbiwgLy8gaXRzIGxlbmd0aFxuXHRcdGhlYWRlciAvLyB0cnVlIGlmIGJsb2NrIGhlYWRlciBtdXN0IGJlIHdyaXR0ZW5cblx0KSB7XG5cdFx0Ymlfd2luZHVwKCk7IC8vIGFsaWduIG9uIGJ5dGUgYm91bmRhcnlcblx0XHRsYXN0X2VvYl9sZW4gPSA4OyAvLyBlbm91Z2ggbG9va2FoZWFkIGZvciBpbmZsYXRlXG5cblx0XHRpZiAoaGVhZGVyKSB7XG5cdFx0XHRwdXRfc2hvcnQobGVuKTtcblx0XHRcdHB1dF9zaG9ydCh+bGVuKTtcblx0XHR9XG5cblx0XHR0aGF0LnBlbmRpbmdfYnVmLnNldCh3aW4uc3ViYXJyYXkoYnVmLCBidWYgKyBsZW4pLCB0aGF0LnBlbmRpbmcpO1xuXHRcdHRoYXQucGVuZGluZyArPSBsZW47XG5cdH1cblxuXHQvLyBTZW5kIGEgc3RvcmVkIGJsb2NrXG5cdGZ1bmN0aW9uIF90cl9zdG9yZWRfYmxvY2soYnVmLCAvLyBpbnB1dCBibG9ja1xuXHRcdHN0b3JlZF9sZW4sIC8vIGxlbmd0aCBvZiBpbnB1dCBibG9ja1xuXHRcdGVvZiAvLyB0cnVlIGlmIHRoaXMgaXMgdGhlIGxhc3QgYmxvY2sgZm9yIGEgZmlsZVxuXHQpIHtcblx0XHRzZW5kX2JpdHMoKFNUT1JFRF9CTE9DSyA8PCAxKSArIChlb2YgPyAxIDogMCksIDMpOyAvLyBzZW5kIGJsb2NrIHR5cGVcblx0XHRjb3B5X2Jsb2NrKGJ1Ziwgc3RvcmVkX2xlbiwgdHJ1ZSk7IC8vIHdpdGggaGVhZGVyXG5cdH1cblxuXHQvLyBEZXRlcm1pbmUgdGhlIGJlc3QgZW5jb2RpbmcgZm9yIHRoZSBjdXJyZW50IGJsb2NrOiBkeW5hbWljIHRyZWVzLCBzdGF0aWNcblx0Ly8gdHJlZXMgb3Igc3RvcmUsIGFuZCBvdXRwdXQgdGhlIGVuY29kZWQgYmxvY2sgdG8gdGhlIHppcCBmaWxlLlxuXHRmdW5jdGlvbiBfdHJfZmx1c2hfYmxvY2soYnVmLCAvLyBpbnB1dCBibG9jaywgb3IgTlVMTCBpZiB0b28gb2xkXG5cdFx0c3RvcmVkX2xlbiwgLy8gbGVuZ3RoIG9mIGlucHV0IGJsb2NrXG5cdFx0ZW9mIC8vIHRydWUgaWYgdGhpcyBpcyB0aGUgbGFzdCBibG9jayBmb3IgYSBmaWxlXG5cdCkge1xuXHRcdGxldCBvcHRfbGVuYiwgc3RhdGljX2xlbmI7Ly8gb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBpbiBieXRlc1xuXHRcdGxldCBtYXhfYmxpbmRleCA9IDA7IC8vIGluZGV4IG9mIGxhc3QgYml0IGxlbmd0aCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXFcblxuXHRcdC8vIEJ1aWxkIHRoZSBIdWZmbWFuIHRyZWVzIHVubGVzcyBhIHN0b3JlZCBibG9jayBpcyBmb3JjZWRcblx0XHRpZiAobGV2ZWwgPiAwKSB7XG5cdFx0XHQvLyBDb25zdHJ1Y3QgdGhlIGxpdGVyYWwgYW5kIGRpc3RhbmNlIHRyZWVzXG5cdFx0XHRsX2Rlc2MuYnVpbGRfdHJlZSh0aGF0KTtcblxuXHRcdFx0ZF9kZXNjLmJ1aWxkX3RyZWUodGhhdCk7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gYXJlIHRoZSB0b3RhbCBiaXQgbGVuZ3Roc1xuXHRcdFx0Ly8gb2Zcblx0XHRcdC8vIHRoZSBjb21wcmVzc2VkIGJsb2NrIGRhdGEsIGV4Y2x1ZGluZyB0aGUgdHJlZSByZXByZXNlbnRhdGlvbnMuXG5cblx0XHRcdC8vIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWUgZm9yIHRoZSBhYm92ZSB0d28gdHJlZXMsIGFuZCBnZXQgdGhlXG5cdFx0XHQvLyBpbmRleFxuXHRcdFx0Ly8gaW4gYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG5cdFx0XHRtYXhfYmxpbmRleCA9IGJ1aWxkX2JsX3RyZWUoKTtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nLiBDb21wdXRlIGZpcnN0IHRoZSBibG9jayBsZW5ndGggaW5cblx0XHRcdC8vIGJ5dGVzXG5cdFx0XHRvcHRfbGVuYiA9ICh0aGF0Lm9wdF9sZW4gKyAzICsgNykgPj4+IDM7XG5cdFx0XHRzdGF0aWNfbGVuYiA9ICh0aGF0LnN0YXRpY19sZW4gKyAzICsgNykgPj4+IDM7XG5cblx0XHRcdGlmIChzdGF0aWNfbGVuYiA8PSBvcHRfbGVuYilcblx0XHRcdFx0b3B0X2xlbmIgPSBzdGF0aWNfbGVuYjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b3B0X2xlbmIgPSBzdGF0aWNfbGVuYiA9IHN0b3JlZF9sZW4gKyA1OyAvLyBmb3JjZSBhIHN0b3JlZCBibG9ja1xuXHRcdH1cblxuXHRcdGlmICgoc3RvcmVkX2xlbiArIDQgPD0gb3B0X2xlbmIpICYmIGJ1ZiAhPSAtMSkge1xuXHRcdFx0Ly8gNDogdHdvIHdvcmRzIGZvciB0aGUgbGVuZ3Roc1xuXHRcdFx0Ly8gVGhlIHRlc3QgYnVmICE9IE5VTEwgaXMgb25seSBuZWNlc3NhcnkgaWYgTElUX0JVRlNJWkUgPiBXU0laRS5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBjYW4ndCBoYXZlIHByb2Nlc3NlZCBtb3JlIHRoYW4gV1NJWkUgaW5wdXQgYnl0ZXNcblx0XHRcdC8vIHNpbmNlXG5cdFx0XHQvLyB0aGUgbGFzdCBibG9jayBmbHVzaCwgYmVjYXVzZSBjb21wcmVzc2lvbiB3b3VsZCBoYXZlIGJlZW5cblx0XHRcdC8vIHN1Y2Nlc3NmdWwuIElmIExJVF9CVUZTSVpFIDw9IFdTSVpFLCBpdCBpcyBuZXZlciB0b28gbGF0ZSB0b1xuXHRcdFx0Ly8gdHJhbnNmb3JtIGEgYmxvY2sgaW50byBhIHN0b3JlZCBibG9jay5cblx0XHRcdF90cl9zdG9yZWRfYmxvY2soYnVmLCBzdG9yZWRfbGVuLCBlb2YpO1xuXHRcdH0gZWxzZSBpZiAoc3RhdGljX2xlbmIgPT0gb3B0X2xlbmIpIHtcblx0XHRcdHNlbmRfYml0cygoU1RBVElDX1RSRUVTIDw8IDEpICsgKGVvZiA/IDEgOiAwKSwgMyk7XG5cdFx0XHRjb21wcmVzc19ibG9jayhTdGF0aWNUcmVlLnN0YXRpY19sdHJlZSwgU3RhdGljVHJlZS5zdGF0aWNfZHRyZWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzZW5kX2JpdHMoKERZTl9UUkVFUyA8PCAxKSArIChlb2YgPyAxIDogMCksIDMpO1xuXHRcdFx0c2VuZF9hbGxfdHJlZXMobF9kZXNjLm1heF9jb2RlICsgMSwgZF9kZXNjLm1heF9jb2RlICsgMSwgbWF4X2JsaW5kZXggKyAxKTtcblx0XHRcdGNvbXByZXNzX2Jsb2NrKGR5bl9sdHJlZSwgZHluX2R0cmVlKTtcblx0XHR9XG5cblx0XHQvLyBUaGUgYWJvdmUgY2hlY2sgaXMgbWFkZSBtb2QgMl4zMiwgZm9yIGZpbGVzIGxhcmdlciB0aGFuIDUxMiBNQlxuXHRcdC8vIGFuZCB1TG9uZyBpbXBsZW1lbnRlZCBvbiAzMiBiaXRzLlxuXG5cdFx0aW5pdF9ibG9jaygpO1xuXG5cdFx0aWYgKGVvZikge1xuXHRcdFx0Ymlfd2luZHVwKCk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gZmx1c2hfYmxvY2tfb25seShlb2YpIHtcblx0XHRfdHJfZmx1c2hfYmxvY2soYmxvY2tfc3RhcnQgPj0gMCA/IGJsb2NrX3N0YXJ0IDogLTEsIHN0cnN0YXJ0IC0gYmxvY2tfc3RhcnQsIGVvZik7XG5cdFx0YmxvY2tfc3RhcnQgPSBzdHJzdGFydDtcblx0XHRzdHJtLmZsdXNoX3BlbmRpbmcoKTtcblx0fVxuXG5cdC8vIEZpbGwgdGhlIHdpbiB3aGVuIHRoZSBsb29rYWhlYWQgYmVjb21lcyBpbnN1ZmZpY2llbnQuXG5cdC8vIFVwZGF0ZXMgc3Ryc3RhcnQgYW5kIGxvb2thaGVhZC5cblx0Ly9cblx0Ly8gSU4gYXNzZXJ0aW9uOiBsb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEXG5cdC8vIE9VVCBhc3NlcnRpb25zOiBzdHJzdGFydCA8PSB3aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFEXG5cdC8vIEF0IGxlYXN0IG9uZSBieXRlIGhhcyBiZWVuIHJlYWQsIG9yIGF2YWlsX2luID09PSAwOyByZWFkcyBhcmVcblx0Ly8gcGVyZm9ybWVkIGZvciBhdCBsZWFzdCB0d28gYnl0ZXMgKHJlcXVpcmVkIGZvciB0aGUgemlwIHRyYW5zbGF0ZV9lb2xcblx0Ly8gb3B0aW9uIC0tIG5vdCBzdXBwb3J0ZWQgaGVyZSkuXG5cdGZ1bmN0aW9uIGZpbGxfd2luZG93KCkge1xuXHRcdGxldCBuLCBtO1xuXHRcdGxldCBwO1xuXHRcdGxldCBtb3JlOyAvLyBBbW91bnQgb2YgZnJlZSBzcGFjZSBhdCB0aGUgZW5kIG9mIHRoZSB3aW4uXG5cblx0XHRkbyB7XG5cdFx0XHRtb3JlID0gKHdpbmRvd19zaXplIC0gbG9va2FoZWFkIC0gc3Ryc3RhcnQpO1xuXG5cdFx0XHQvLyBEZWFsIHdpdGggIUAjJCUgNjRLIGxpbWl0OlxuXHRcdFx0aWYgKG1vcmUgPT09IDAgJiYgc3Ryc3RhcnQgPT09IDAgJiYgbG9va2FoZWFkID09PSAwKSB7XG5cdFx0XHRcdG1vcmUgPSB3X3NpemU7XG5cdFx0XHR9IGVsc2UgaWYgKG1vcmUgPT0gLTEpIHtcblx0XHRcdFx0Ly8gVmVyeSB1bmxpa2VseSwgYnV0IHBvc3NpYmxlIG9uIDE2IGJpdCBtYWNoaW5lIGlmIHN0cnN0YXJ0ID09XG5cdFx0XHRcdC8vIDBcblx0XHRcdFx0Ly8gYW5kIGxvb2thaGVhZCA9PSAxIChpbnB1dCBkb25lIG9uZSBieXRlIGF0IHRpbWUpXG5cdFx0XHRcdG1vcmUtLTtcblxuXHRcdFx0XHQvLyBJZiB0aGUgd2luIGlzIGFsbW9zdCBmdWxsIGFuZCB0aGVyZSBpcyBpbnN1ZmZpY2llbnRcblx0XHRcdFx0Ly8gbG9va2FoZWFkLFxuXHRcdFx0XHQvLyBtb3ZlIHRoZSB1cHBlciBoYWxmIHRvIHRoZSBsb3dlciBvbmUgdG8gbWFrZSByb29tIGluIHRoZVxuXHRcdFx0XHQvLyB1cHBlciBoYWxmLlxuXHRcdFx0fSBlbHNlIGlmIChzdHJzdGFydCA+PSB3X3NpemUgKyB3X3NpemUgLSBNSU5fTE9PS0FIRUFEKSB7XG5cdFx0XHRcdHdpbi5zZXQod2luLnN1YmFycmF5KHdfc2l6ZSwgd19zaXplICsgd19zaXplKSwgMCk7XG5cblx0XHRcdFx0bWF0Y2hfc3RhcnQgLT0gd19zaXplO1xuXHRcdFx0XHRzdHJzdGFydCAtPSB3X3NpemU7IC8vIHdlIG5vdyBoYXZlIHN0cnN0YXJ0ID49IE1BWF9ESVNUXG5cdFx0XHRcdGJsb2NrX3N0YXJ0IC09IHdfc2l6ZTtcblxuXHRcdFx0XHQvLyBTbGlkZSB0aGUgaGFzaCB0YWJsZSAoY291bGQgYmUgYXZvaWRlZCB3aXRoIDMyIGJpdCB2YWx1ZXNcblx0XHRcdFx0Ly8gYXQgdGhlIGV4cGVuc2Ugb2YgbWVtb3J5IHVzYWdlKS4gV2Ugc2xpZGUgZXZlbiB3aGVuIGxldmVsID09XG5cdFx0XHRcdC8vIDBcblx0XHRcdFx0Ly8gdG8ga2VlcCB0aGUgaGFzaCB0YWJsZSBjb25zaXN0ZW50IGlmIHdlIHN3aXRjaCBiYWNrIHRvIGxldmVsXG5cdFx0XHRcdC8vID4gMFxuXHRcdFx0XHQvLyBsYXRlci4gKFVzaW5nIGxldmVsIDAgcGVybWFuZW50bHkgaXMgbm90IGFuIG9wdGltYWwgdXNhZ2Ugb2Zcblx0XHRcdFx0Ly8gemxpYiwgc28gd2UgZG9uJ3QgY2FyZSBhYm91dCB0aGlzIHBhdGhvbG9naWNhbCBjYXNlLilcblxuXHRcdFx0XHRuID0gaGFzaF9zaXplO1xuXHRcdFx0XHRwID0gbjtcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdG0gPSAoaGVhZFstLXBdICYgMHhmZmZmKTtcblx0XHRcdFx0XHRoZWFkW3BdID0gKG0gPj0gd19zaXplID8gbSAtIHdfc2l6ZSA6IDApO1xuXHRcdFx0XHR9IHdoaWxlICgtLW4gIT09IDApO1xuXG5cdFx0XHRcdG4gPSB3X3NpemU7XG5cdFx0XHRcdHAgPSBuO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0bSA9IChwcmV2Wy0tcF0gJiAweGZmZmYpO1xuXHRcdFx0XHRcdHByZXZbcF0gPSAobSA+PSB3X3NpemUgPyBtIC0gd19zaXplIDogMCk7XG5cdFx0XHRcdFx0Ly8gSWYgbiBpcyBub3Qgb24gYW55IGhhc2ggY2hhaW4sIHByZXZbbl0gaXMgZ2FyYmFnZSBidXRcblx0XHRcdFx0XHQvLyBpdHMgdmFsdWUgd2lsbCBuZXZlciBiZSB1c2VkLlxuXHRcdFx0XHR9IHdoaWxlICgtLW4gIT09IDApO1xuXHRcdFx0XHRtb3JlICs9IHdfc2l6ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHN0cm0uYXZhaWxfaW4gPT09IDApXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0Ly8gSWYgdGhlcmUgd2FzIG5vIHNsaWRpbmc6XG5cdFx0XHQvLyBzdHJzdGFydCA8PSBXU0laRStNQVhfRElTVC0xICYmIGxvb2thaGVhZCA8PSBNSU5fTE9PS0FIRUFEIC0gMSAmJlxuXHRcdFx0Ly8gbW9yZSA9PSB3aW5kb3dfc2l6ZSAtIGxvb2thaGVhZCAtIHN0cnN0YXJ0XG5cdFx0XHQvLyA9PiBtb3JlID49IHdpbmRvd19zaXplIC0gKE1JTl9MT09LQUhFQUQtMSArIFdTSVpFICsgTUFYX0RJU1QtMSlcblx0XHRcdC8vID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAyKldTSVpFICsgMlxuXHRcdFx0Ly8gSW4gdGhlIEJJR19NRU0gb3IgTU1BUCBjYXNlIChub3QgeWV0IHN1cHBvcnRlZCksXG5cdFx0XHQvLyB3aW5kb3dfc2l6ZSA9PSBpbnB1dF9zaXplICsgTUlOX0xPT0tBSEVBRCAmJlxuXHRcdFx0Ly8gc3Ryc3RhcnQgKyBzLT5sb29rYWhlYWQgPD0gaW5wdXRfc2l6ZSA9PiBtb3JlID49IE1JTl9MT09LQUhFQUQuXG5cdFx0XHQvLyBPdGhlcndpc2UsIHdpbmRvd19zaXplID09IDIqV1NJWkUgc28gbW9yZSA+PSAyLlxuXHRcdFx0Ly8gSWYgdGhlcmUgd2FzIHNsaWRpbmcsIG1vcmUgPj0gV1NJWkUuIFNvIGluIGFsbCBjYXNlcywgbW9yZSA+PSAyLlxuXG5cdFx0XHRuID0gc3RybS5yZWFkX2J1Zih3aW4sIHN0cnN0YXJ0ICsgbG9va2FoZWFkLCBtb3JlKTtcblx0XHRcdGxvb2thaGVhZCArPSBuO1xuXG5cdFx0XHQvLyBJbml0aWFsaXplIHRoZSBoYXNoIHZhbHVlIG5vdyB0aGF0IHdlIGhhdmUgc29tZSBpbnB1dDpcblx0XHRcdGlmIChsb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG5cdFx0XHRcdGluc19oID0gd2luW3N0cnN0YXJ0XSAmIDB4ZmY7XG5cdFx0XHRcdGluc19oID0gKCgoaW5zX2gpIDw8IGhhc2hfc2hpZnQpIF4gKHdpbltzdHJzdGFydCArIDFdICYgMHhmZikpICYgaGFzaF9tYXNrO1xuXHRcdFx0fVxuXHRcdFx0Ly8gSWYgdGhlIHdob2xlIGlucHV0IGhhcyBsZXNzIHRoYW4gTUlOX01BVENIIGJ5dGVzLCBpbnNfaCBpc1xuXHRcdFx0Ly8gZ2FyYmFnZSxcblx0XHRcdC8vIGJ1dCB0aGlzIGlzIG5vdCBpbXBvcnRhbnQgc2luY2Ugb25seSBsaXRlcmFsIGJ5dGVzIHdpbGwgYmVcblx0XHRcdC8vIGVtaXR0ZWQuXG5cdFx0fSB3aGlsZSAobG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCAmJiBzdHJtLmF2YWlsX2luICE9PSAwKTtcblx0fVxuXG5cdC8vIENvcHkgd2l0aG91dCBjb21wcmVzc2lvbiBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gdGhlIGlucHV0IHN0cmVhbSxcblx0Ly8gcmV0dXJuXG5cdC8vIHRoZSBjdXJyZW50IGJsb2NrIHN0YXRlLlxuXHQvLyBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IGluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgZGljdGlvbmFyeSBzaW5jZVxuXHQvLyB1bmNvbXByZXNzaWJsZSBkYXRhIGlzIHByb2JhYmx5IG5vdCB1c2VmdWwuIFRoaXMgZnVuY3Rpb24gaXMgdXNlZFxuXHQvLyBvbmx5IGZvciB0aGUgbGV2ZWw9MCBjb21wcmVzc2lvbiBvcHRpb24uXG5cdC8vIE5PVEU6IHRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIG9wdGltaXplZCB0byBhdm9pZCBleHRyYSBjb3B5aW5nIGZyb21cblx0Ly8gd2luIHRvIHBlbmRpbmdfYnVmLlxuXHRmdW5jdGlvbiBkZWZsYXRlX3N0b3JlZChmbHVzaCkge1xuXHRcdC8vIFN0b3JlZCBibG9ja3MgYXJlIGxpbWl0ZWQgdG8gMHhmZmZmIGJ5dGVzLCBwZW5kaW5nX2J1ZiBpcyBsaW1pdGVkXG5cdFx0Ly8gdG8gcGVuZGluZ19idWZfc2l6ZSwgYW5kIGVhY2ggc3RvcmVkIGJsb2NrIGhhcyBhIDUgYnl0ZSBoZWFkZXI6XG5cblx0XHRsZXQgbWF4X2Jsb2NrX3NpemUgPSAweGZmZmY7XG5cdFx0bGV0IG1heF9zdGFydDtcblxuXHRcdGlmIChtYXhfYmxvY2tfc2l6ZSA+IHBlbmRpbmdfYnVmX3NpemUgLSA1KSB7XG5cdFx0XHRtYXhfYmxvY2tfc2l6ZSA9IHBlbmRpbmdfYnVmX3NpemUgLSA1O1xuXHRcdH1cblxuXHRcdC8vIENvcHkgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIGlucHV0IHRvIG91dHB1dDpcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG5cdFx0d2hpbGUgKHRydWUpIHtcblx0XHRcdC8vIEZpbGwgdGhlIHdpbiBhcyBtdWNoIGFzIHBvc3NpYmxlOlxuXHRcdFx0aWYgKGxvb2thaGVhZCA8PSAxKSB7XG5cdFx0XHRcdGZpbGxfd2luZG93KCk7XG5cdFx0XHRcdGlmIChsb29rYWhlYWQgPT09IDAgJiYgZmx1c2ggPT0gWl9OT19GTFVTSClcblx0XHRcdFx0XHRyZXR1cm4gTmVlZE1vcmU7XG5cdFx0XHRcdGlmIChsb29rYWhlYWQgPT09IDApXG5cdFx0XHRcdFx0YnJlYWs7IC8vIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrXG5cdFx0XHR9XG5cblx0XHRcdHN0cnN0YXJ0ICs9IGxvb2thaGVhZDtcblx0XHRcdGxvb2thaGVhZCA9IDA7XG5cblx0XHRcdC8vIEVtaXQgYSBzdG9yZWQgYmxvY2sgaWYgcGVuZGluZ19idWYgd2lsbCBiZSBmdWxsOlxuXHRcdFx0bWF4X3N0YXJ0ID0gYmxvY2tfc3RhcnQgKyBtYXhfYmxvY2tfc2l6ZTtcblx0XHRcdGlmIChzdHJzdGFydCA9PT0gMCB8fCBzdHJzdGFydCA+PSBtYXhfc3RhcnQpIHtcblx0XHRcdFx0Ly8gc3Ryc3RhcnQgPT09IDAgaXMgcG9zc2libGUgd2hlbiB3cmFwYXJvdW5kIG9uIDE2LWJpdCBtYWNoaW5lXG5cdFx0XHRcdGxvb2thaGVhZCA9IChzdHJzdGFydCAtIG1heF9zdGFydCk7XG5cdFx0XHRcdHN0cnN0YXJ0ID0gbWF4X3N0YXJ0O1xuXG5cdFx0XHRcdGZsdXNoX2Jsb2NrX29ubHkoZmFsc2UpO1xuXHRcdFx0XHRpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApXG5cdFx0XHRcdFx0cmV0dXJuIE5lZWRNb3JlO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIEZsdXNoIGlmIHdlIG1heSBoYXZlIHRvIHNsaWRlLCBvdGhlcndpc2UgYmxvY2tfc3RhcnQgbWF5IGJlY29tZVxuXHRcdFx0Ly8gbmVnYXRpdmUgYW5kIHRoZSBkYXRhIHdpbGwgYmUgZ29uZTpcblx0XHRcdGlmIChzdHJzdGFydCAtIGJsb2NrX3N0YXJ0ID49IHdfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIHtcblx0XHRcdFx0Zmx1c2hfYmxvY2tfb25seShmYWxzZSk7XG5cdFx0XHRcdGlmIChzdHJtLmF2YWlsX291dCA9PT0gMClcblx0XHRcdFx0XHRyZXR1cm4gTmVlZE1vcmU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zmx1c2hfYmxvY2tfb25seShmbHVzaCA9PSBaX0ZJTklTSCk7XG5cdFx0aWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKVxuXHRcdFx0cmV0dXJuIChmbHVzaCA9PSBaX0ZJTklTSCkgPyBGaW5pc2hTdGFydGVkIDogTmVlZE1vcmU7XG5cblx0XHRyZXR1cm4gZmx1c2ggPT0gWl9GSU5JU0ggPyBGaW5pc2hEb25lIDogQmxvY2tEb25lO1xuXHR9XG5cblx0ZnVuY3Rpb24gbG9uZ2VzdF9tYXRjaChjdXJfbWF0Y2gpIHtcblx0XHRsZXQgY2hhaW5fbGVuZ3RoID0gbWF4X2NoYWluX2xlbmd0aDsgLy8gbWF4IGhhc2ggY2hhaW4gbGVuZ3RoXG5cdFx0bGV0IHNjYW4gPSBzdHJzdGFydDsgLy8gY3VycmVudCBzdHJpbmdcblx0XHRsZXQgbWF0Y2g7IC8vIG1hdGNoZWQgc3RyaW5nXG5cdFx0bGV0IGxlbjsgLy8gbGVuZ3RoIG9mIGN1cnJlbnQgbWF0Y2hcblx0XHRsZXQgYmVzdF9sZW4gPSBwcmV2X2xlbmd0aDsgLy8gYmVzdCBtYXRjaCBsZW5ndGggc28gZmFyXG5cdFx0Y29uc3QgbGltaXQgPSBzdHJzdGFydCA+ICh3X3NpemUgLSBNSU5fTE9PS0FIRUFEKSA/IHN0cnN0YXJ0IC0gKHdfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIDogMDtcblx0XHRsZXQgX25pY2VfbWF0Y2ggPSBuaWNlX21hdGNoO1xuXG5cdFx0Ly8gU3RvcCB3aGVuIGN1cl9tYXRjaCBiZWNvbWVzIDw9IGxpbWl0LiBUbyBzaW1wbGlmeSB0aGUgY29kZSxcblx0XHQvLyB3ZSBwcmV2ZW50IG1hdGNoZXMgd2l0aCB0aGUgc3RyaW5nIG9mIHdpbiBpbmRleCAwLlxuXG5cdFx0Y29uc3Qgd21hc2sgPSB3X21hc2s7XG5cblx0XHRjb25zdCBzdHJlbmQgPSBzdHJzdGFydCArIE1BWF9NQVRDSDtcblx0XHRsZXQgc2Nhbl9lbmQxID0gd2luW3NjYW4gKyBiZXN0X2xlbiAtIDFdO1xuXHRcdGxldCBzY2FuX2VuZCA9IHdpbltzY2FuICsgYmVzdF9sZW5dO1xuXG5cdFx0Ly8gVGhlIGNvZGUgaXMgb3B0aW1pemVkIGZvciBIQVNIX0JJVFMgPj0gOCBhbmQgTUFYX01BVENILTIgbXVsdGlwbGUgb2Zcblx0XHQvLyAxNi5cblx0XHQvLyBJdCBpcyBlYXN5IHRvIGdldCByaWQgb2YgdGhpcyBvcHRpbWl6YXRpb24gaWYgbmVjZXNzYXJ5LlxuXG5cdFx0Ly8gRG8gbm90IHdhc3RlIHRvbyBtdWNoIHRpbWUgaWYgd2UgYWxyZWFkeSBoYXZlIGEgZ29vZCBtYXRjaDpcblx0XHRpZiAocHJldl9sZW5ndGggPj0gZ29vZF9tYXRjaCkge1xuXHRcdFx0Y2hhaW5fbGVuZ3RoID4+PSAyO1xuXHRcdH1cblxuXHRcdC8vIERvIG5vdCBsb29rIGZvciBtYXRjaGVzIGJleW9uZCB0aGUgZW5kIG9mIHRoZSBpbnB1dC4gVGhpcyBpc1xuXHRcdC8vIG5lY2Vzc2FyeVxuXHRcdC8vIHRvIG1ha2UgZGVmbGF0ZSBkZXRlcm1pbmlzdGljLlxuXHRcdGlmIChfbmljZV9tYXRjaCA+IGxvb2thaGVhZClcblx0XHRcdF9uaWNlX21hdGNoID0gbG9va2FoZWFkO1xuXG5cdFx0ZG8ge1xuXHRcdFx0bWF0Y2ggPSBjdXJfbWF0Y2g7XG5cblx0XHRcdC8vIFNraXAgdG8gbmV4dCBtYXRjaCBpZiB0aGUgbWF0Y2ggbGVuZ3RoIGNhbm5vdCBpbmNyZWFzZVxuXHRcdFx0Ly8gb3IgaWYgdGhlIG1hdGNoIGxlbmd0aCBpcyBsZXNzIHRoYW4gMjpcblx0XHRcdGlmICh3aW5bbWF0Y2ggKyBiZXN0X2xlbl0gIT0gc2Nhbl9lbmQgfHwgd2luW21hdGNoICsgYmVzdF9sZW4gLSAxXSAhPSBzY2FuX2VuZDEgfHwgd2luW21hdGNoXSAhPSB3aW5bc2Nhbl1cblx0XHRcdFx0fHwgd2luWysrbWF0Y2hdICE9IHdpbltzY2FuICsgMV0pXG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHQvLyBUaGUgY2hlY2sgYXQgYmVzdF9sZW4tMSBjYW4gYmUgcmVtb3ZlZCBiZWNhdXNlIGl0IHdpbGwgYmUgbWFkZVxuXHRcdFx0Ly8gYWdhaW4gbGF0ZXIuIChUaGlzIGhldXJpc3RpYyBpcyBub3QgYWx3YXlzIGEgd2luLilcblx0XHRcdC8vIEl0IGlzIG5vdCBuZWNlc3NhcnkgdG8gY29tcGFyZSBzY2FuWzJdIGFuZCBtYXRjaFsyXSBzaW5jZSB0aGV5XG5cdFx0XHQvLyBhcmUgYWx3YXlzIGVxdWFsIHdoZW4gdGhlIG90aGVyIGJ5dGVzIG1hdGNoLCBnaXZlbiB0aGF0XG5cdFx0XHQvLyB0aGUgaGFzaCBrZXlzIGFyZSBlcXVhbCBhbmQgdGhhdCBIQVNIX0JJVFMgPj0gOC5cblx0XHRcdHNjYW4gKz0gMjtcblx0XHRcdG1hdGNoKys7XG5cblx0XHRcdC8vIFdlIGNoZWNrIGZvciBpbnN1ZmZpY2llbnQgbG9va2FoZWFkIG9ubHkgZXZlcnkgOHRoIGNvbXBhcmlzb247XG5cdFx0XHQvLyB0aGUgMjU2dGggY2hlY2sgd2lsbCBiZSBtYWRlIGF0IHN0cnN0YXJ0KzI1OC5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuXHRcdFx0ZG8ge1xuXHRcdFx0XHQvLyBlbXB0eSBibG9ja1xuXHRcdFx0fSB3aGlsZSAod2luWysrc2Nhbl0gPT0gd2luWysrbWF0Y2hdICYmIHdpblsrK3NjYW5dID09IHdpblsrK21hdGNoXSAmJiB3aW5bKytzY2FuXSA9PSB3aW5bKyttYXRjaF1cblx0XHRcdCYmIHdpblsrK3NjYW5dID09IHdpblsrK21hdGNoXSAmJiB3aW5bKytzY2FuXSA9PSB3aW5bKyttYXRjaF0gJiYgd2luWysrc2Nhbl0gPT0gd2luWysrbWF0Y2hdXG5cdFx0XHQmJiB3aW5bKytzY2FuXSA9PSB3aW5bKyttYXRjaF0gJiYgd2luWysrc2Nhbl0gPT0gd2luWysrbWF0Y2hdICYmIHNjYW4gPCBzdHJlbmQpO1xuXG5cdFx0XHRsZW4gPSBNQVhfTUFUQ0ggLSAoc3RyZW5kIC0gc2Nhbik7XG5cdFx0XHRzY2FuID0gc3RyZW5kIC0gTUFYX01BVENIO1xuXG5cdFx0XHRpZiAobGVuID4gYmVzdF9sZW4pIHtcblx0XHRcdFx0bWF0Y2hfc3RhcnQgPSBjdXJfbWF0Y2g7XG5cdFx0XHRcdGJlc3RfbGVuID0gbGVuO1xuXHRcdFx0XHRpZiAobGVuID49IF9uaWNlX21hdGNoKVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRzY2FuX2VuZDEgPSB3aW5bc2NhbiArIGJlc3RfbGVuIC0gMV07XG5cdFx0XHRcdHNjYW5fZW5kID0gd2luW3NjYW4gKyBiZXN0X2xlbl07XG5cdFx0XHR9XG5cblx0XHR9IHdoaWxlICgoY3VyX21hdGNoID0gKHByZXZbY3VyX21hdGNoICYgd21hc2tdICYgMHhmZmZmKSkgPiBsaW1pdCAmJiAtLWNoYWluX2xlbmd0aCAhPT0gMCk7XG5cblx0XHRpZiAoYmVzdF9sZW4gPD0gbG9va2FoZWFkKVxuXHRcdFx0cmV0dXJuIGJlc3RfbGVuO1xuXHRcdHJldHVybiBsb29rYWhlYWQ7XG5cdH1cblxuXHQvLyBDb21wcmVzcyBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gdGhlIGlucHV0IHN0cmVhbSwgcmV0dXJuIHRoZSBjdXJyZW50XG5cdC8vIGJsb2NrIHN0YXRlLlxuXHQvLyBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IHBlcmZvcm0gbGF6eSBldmFsdWF0aW9uIG9mIG1hdGNoZXMgYW5kIGluc2VydHNcblx0Ly8gbmV3IHN0cmluZ3MgaW4gdGhlIGRpY3Rpb25hcnkgb25seSBmb3IgdW5tYXRjaGVkIHN0cmluZ3Mgb3IgZm9yIHNob3J0XG5cdC8vIG1hdGNoZXMuIEl0IGlzIHVzZWQgb25seSBmb3IgdGhlIGZhc3QgY29tcHJlc3Npb24gb3B0aW9ucy5cblx0ZnVuY3Rpb24gZGVmbGF0ZV9mYXN0KGZsdXNoKSB7XG5cdFx0Ly8gc2hvcnQgaGFzaF9oZWFkID0gMDsgLy8gaGVhZCBvZiB0aGUgaGFzaCBjaGFpblxuXHRcdGxldCBoYXNoX2hlYWQgPSAwOyAvLyBoZWFkIG9mIHRoZSBoYXNoIGNoYWluXG5cdFx0bGV0IGJmbHVzaDsgLy8gc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkXG5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG5cdFx0d2hpbGUgKHRydWUpIHtcblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuXHRcdFx0Ly8gYXQgdGhlIGVuZCBvZiB0aGUgaW5wdXQgZmlsZS4gV2UgbmVlZCBNQVhfTUFUQ0ggYnl0ZXNcblx0XHRcdC8vIGZvciB0aGUgbmV4dCBtYXRjaCwgcGx1cyBNSU5fTUFUQ0ggYnl0ZXMgdG8gaW5zZXJ0IHRoZVxuXHRcdFx0Ly8gc3RyaW5nIGZvbGxvd2luZyB0aGUgbmV4dCBtYXRjaC5cblx0XHRcdGlmIChsb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG5cdFx0XHRcdGZpbGxfd2luZG93KCk7XG5cdFx0XHRcdGlmIChsb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIGZsdXNoID09IFpfTk9fRkxVU0gpIHtcblx0XHRcdFx0XHRyZXR1cm4gTmVlZE1vcmU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGxvb2thaGVhZCA9PT0gMClcblx0XHRcdFx0XHRicmVhazsgLy8gZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2tcblx0XHRcdH1cblxuXHRcdFx0Ly8gSW5zZXJ0IHRoZSBzdHJpbmcgd2luW3N0cnN0YXJ0IC4uIHN0cnN0YXJ0KzJdIGluIHRoZVxuXHRcdFx0Ly8gZGljdGlvbmFyeSwgYW5kIHNldCBoYXNoX2hlYWQgdG8gdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW46XG5cdFx0XHRpZiAobG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuXHRcdFx0XHRpbnNfaCA9ICgoKGluc19oKSA8PCBoYXNoX3NoaWZ0KSBeICh3aW5bKHN0cnN0YXJ0KSArIChNSU5fTUFUQ0ggLSAxKV0gJiAweGZmKSkgJiBoYXNoX21hc2s7XG5cblx0XHRcdFx0Ly8gcHJldltzdHJzdGFydCZ3X21hc2tdPWhhc2hfaGVhZD1oZWFkW2luc19oXTtcblx0XHRcdFx0aGFzaF9oZWFkID0gKGhlYWRbaW5zX2hdICYgMHhmZmZmKTtcblx0XHRcdFx0cHJldltzdHJzdGFydCAmIHdfbWFza10gPSBoZWFkW2luc19oXTtcblx0XHRcdFx0aGVhZFtpbnNfaF0gPSBzdHJzdGFydDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRmluZCB0aGUgbG9uZ2VzdCBtYXRjaCwgZGlzY2FyZGluZyB0aG9zZSA8PSBwcmV2X2xlbmd0aC5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQgd2UgaGF2ZSBhbHdheXMgbWF0Y2hfbGVuZ3RoIDwgTUlOX01BVENIXG5cblx0XHRcdGlmIChoYXNoX2hlYWQgIT09IDAgJiYgKChzdHJzdGFydCAtIGhhc2hfaGVhZCkgJiAweGZmZmYpIDw9IHdfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIHtcblx0XHRcdFx0Ly8gVG8gc2ltcGxpZnkgdGhlIGNvZGUsIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmdcblx0XHRcdFx0Ly8gb2Ygd2luIGluZGV4IDAgKGluIHBhcnRpY3VsYXIgd2UgaGF2ZSB0byBhdm9pZCBhIG1hdGNoXG5cdFx0XHRcdC8vIG9mIHRoZSBzdHJpbmcgd2l0aCBpdHNlbGYgYXQgdGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBmaWxlKS5cblx0XHRcdFx0aWYgKHN0cmF0ZWd5ICE9IFpfSFVGRk1BTl9PTkxZKSB7XG5cdFx0XHRcdFx0bWF0Y2hfbGVuZ3RoID0gbG9uZ2VzdF9tYXRjaChoYXNoX2hlYWQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGxvbmdlc3RfbWF0Y2goKSBzZXRzIG1hdGNoX3N0YXJ0XG5cdFx0XHR9XG5cdFx0XHRpZiAobWF0Y2hfbGVuZ3RoID49IE1JTl9NQVRDSCkge1xuXHRcdFx0XHQvLyBjaGVja19tYXRjaChzdHJzdGFydCwgbWF0Y2hfc3RhcnQsIG1hdGNoX2xlbmd0aCk7XG5cblx0XHRcdFx0YmZsdXNoID0gX3RyX3RhbGx5KHN0cnN0YXJ0IC0gbWF0Y2hfc3RhcnQsIG1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCk7XG5cblx0XHRcdFx0bG9va2FoZWFkIC09IG1hdGNoX2xlbmd0aDtcblxuXHRcdFx0XHQvLyBJbnNlcnQgbmV3IHN0cmluZ3MgaW4gdGhlIGhhc2ggdGFibGUgb25seSBpZiB0aGUgbWF0Y2ggbGVuZ3RoXG5cdFx0XHRcdC8vIGlzIG5vdCB0b28gbGFyZ2UuIFRoaXMgc2F2ZXMgdGltZSBidXQgZGVncmFkZXMgY29tcHJlc3Npb24uXG5cdFx0XHRcdGlmIChtYXRjaF9sZW5ndGggPD0gbWF4X2xhenlfbWF0Y2ggJiYgbG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuXHRcdFx0XHRcdG1hdGNoX2xlbmd0aC0tOyAvLyBzdHJpbmcgYXQgc3Ryc3RhcnQgYWxyZWFkeSBpbiBoYXNoIHRhYmxlXG5cdFx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdFx0c3Ryc3RhcnQrKztcblxuXHRcdFx0XHRcdFx0aW5zX2ggPSAoKGluc19oIDw8IGhhc2hfc2hpZnQpIF4gKHdpblsoc3Ryc3RhcnQpICsgKE1JTl9NQVRDSCAtIDEpXSAmIDB4ZmYpKSAmIGhhc2hfbWFzaztcblx0XHRcdFx0XHRcdC8vIHByZXZbc3Ryc3RhcnQmd19tYXNrXT1oYXNoX2hlYWQ9aGVhZFtpbnNfaF07XG5cdFx0XHRcdFx0XHRoYXNoX2hlYWQgPSAoaGVhZFtpbnNfaF0gJiAweGZmZmYpO1xuXHRcdFx0XHRcdFx0cHJldltzdHJzdGFydCAmIHdfbWFza10gPSBoZWFkW2luc19oXTtcblx0XHRcdFx0XHRcdGhlYWRbaW5zX2hdID0gc3Ryc3RhcnQ7XG5cblx0XHRcdFx0XHRcdC8vIHN0cnN0YXJ0IG5ldmVyIGV4Y2VlZHMgV1NJWkUtTUFYX01BVENILCBzbyB0aGVyZSBhcmVcblx0XHRcdFx0XHRcdC8vIGFsd2F5cyBNSU5fTUFUQ0ggYnl0ZXMgYWhlYWQuXG5cdFx0XHRcdFx0fSB3aGlsZSAoLS1tYXRjaF9sZW5ndGggIT09IDApO1xuXHRcdFx0XHRcdHN0cnN0YXJ0Kys7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3Ryc3RhcnQgKz0gbWF0Y2hfbGVuZ3RoO1xuXHRcdFx0XHRcdG1hdGNoX2xlbmd0aCA9IDA7XG5cdFx0XHRcdFx0aW5zX2ggPSB3aW5bc3Ryc3RhcnRdICYgMHhmZjtcblxuXHRcdFx0XHRcdGluc19oID0gKCgoaW5zX2gpIDw8IGhhc2hfc2hpZnQpIF4gKHdpbltzdHJzdGFydCArIDFdICYgMHhmZikpICYgaGFzaF9tYXNrO1xuXHRcdFx0XHRcdC8vIElmIGxvb2thaGVhZCA8IE1JTl9NQVRDSCwgaW5zX2ggaXMgZ2FyYmFnZSwgYnV0IGl0IGRvZXNcblx0XHRcdFx0XHQvLyBub3Rcblx0XHRcdFx0XHQvLyBtYXR0ZXIgc2luY2UgaXQgd2lsbCBiZSByZWNvbXB1dGVkIGF0IG5leHQgZGVmbGF0ZSBjYWxsLlxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBObyBtYXRjaCwgb3V0cHV0IGEgbGl0ZXJhbCBieXRlXG5cblx0XHRcdFx0YmZsdXNoID0gX3RyX3RhbGx5KDAsIHdpbltzdHJzdGFydF0gJiAweGZmKTtcblx0XHRcdFx0bG9va2FoZWFkLS07XG5cdFx0XHRcdHN0cnN0YXJ0Kys7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYmZsdXNoKSB7XG5cblx0XHRcdFx0Zmx1c2hfYmxvY2tfb25seShmYWxzZSk7XG5cdFx0XHRcdGlmIChzdHJtLmF2YWlsX291dCA9PT0gMClcblx0XHRcdFx0XHRyZXR1cm4gTmVlZE1vcmU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zmx1c2hfYmxvY2tfb25seShmbHVzaCA9PSBaX0ZJTklTSCk7XG5cdFx0aWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG5cdFx0XHRpZiAoZmx1c2ggPT0gWl9GSU5JU0gpXG5cdFx0XHRcdHJldHVybiBGaW5pc2hTdGFydGVkO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gTmVlZE1vcmU7XG5cdFx0fVxuXHRcdHJldHVybiBmbHVzaCA9PSBaX0ZJTklTSCA/IEZpbmlzaERvbmUgOiBCbG9ja0RvbmU7XG5cdH1cblxuXHQvLyBTYW1lIGFzIGFib3ZlLCBidXQgYWNoaWV2ZXMgYmV0dGVyIGNvbXByZXNzaW9uLiBXZSB1c2UgYSBsYXp5XG5cdC8vIGV2YWx1YXRpb24gZm9yIG1hdGNoZXM6IGEgbWF0Y2ggaXMgZmluYWxseSBhZG9wdGVkIG9ubHkgaWYgdGhlcmUgaXNcblx0Ly8gbm8gYmV0dGVyIG1hdGNoIGF0IHRoZSBuZXh0IHdpbiBwb3NpdGlvbi5cblx0ZnVuY3Rpb24gZGVmbGF0ZV9zbG93KGZsdXNoKSB7XG5cdFx0Ly8gc2hvcnQgaGFzaF9oZWFkID0gMDsgLy8gaGVhZCBvZiBoYXNoIGNoYWluXG5cdFx0bGV0IGhhc2hfaGVhZCA9IDA7IC8vIGhlYWQgb2YgaGFzaCBjaGFpblxuXHRcdGxldCBiZmx1c2g7IC8vIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZFxuXHRcdGxldCBtYXhfaW5zZXJ0O1xuXG5cdFx0Ly8gUHJvY2VzcyB0aGUgaW5wdXQgYmxvY2suXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuXHRcdHdoaWxlICh0cnVlKSB7XG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSBhbHdheXMgaGF2ZSBlbm91Z2ggbG9va2FoZWFkLCBleGNlcHRcblx0XHRcdC8vIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG5cdFx0XHQvLyBmb3IgdGhlIG5leHQgbWF0Y2gsIHBsdXMgTUlOX01BVENIIGJ5dGVzIHRvIGluc2VydCB0aGVcblx0XHRcdC8vIHN0cmluZyBmb2xsb3dpbmcgdGhlIG5leHQgbWF0Y2guXG5cblx0XHRcdGlmIChsb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG5cdFx0XHRcdGZpbGxfd2luZG93KCk7XG5cdFx0XHRcdGlmIChsb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIGZsdXNoID09IFpfTk9fRkxVU0gpIHtcblx0XHRcdFx0XHRyZXR1cm4gTmVlZE1vcmU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGxvb2thaGVhZCA9PT0gMClcblx0XHRcdFx0XHRicmVhazsgLy8gZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2tcblx0XHRcdH1cblxuXHRcdFx0Ly8gSW5zZXJ0IHRoZSBzdHJpbmcgd2luW3N0cnN0YXJ0IC4uIHN0cnN0YXJ0KzJdIGluIHRoZVxuXHRcdFx0Ly8gZGljdGlvbmFyeSwgYW5kIHNldCBoYXNoX2hlYWQgdG8gdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW46XG5cblx0XHRcdGlmIChsb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG5cdFx0XHRcdGluc19oID0gKCgoaW5zX2gpIDw8IGhhc2hfc2hpZnQpIF4gKHdpblsoc3Ryc3RhcnQpICsgKE1JTl9NQVRDSCAtIDEpXSAmIDB4ZmYpKSAmIGhhc2hfbWFzaztcblx0XHRcdFx0Ly8gcHJldltzdHJzdGFydCZ3X21hc2tdPWhhc2hfaGVhZD1oZWFkW2luc19oXTtcblx0XHRcdFx0aGFzaF9oZWFkID0gKGhlYWRbaW5zX2hdICYgMHhmZmZmKTtcblx0XHRcdFx0cHJldltzdHJzdGFydCAmIHdfbWFza10gPSBoZWFkW2luc19oXTtcblx0XHRcdFx0aGVhZFtpbnNfaF0gPSBzdHJzdGFydDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRmluZCB0aGUgbG9uZ2VzdCBtYXRjaCwgZGlzY2FyZGluZyB0aG9zZSA8PSBwcmV2X2xlbmd0aC5cblx0XHRcdHByZXZfbGVuZ3RoID0gbWF0Y2hfbGVuZ3RoO1xuXHRcdFx0cHJldl9tYXRjaCA9IG1hdGNoX3N0YXJ0O1xuXHRcdFx0bWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcblxuXHRcdFx0aWYgKGhhc2hfaGVhZCAhPT0gMCAmJiBwcmV2X2xlbmd0aCA8IG1heF9sYXp5X21hdGNoICYmICgoc3Ryc3RhcnQgLSBoYXNoX2hlYWQpICYgMHhmZmZmKSA8PSB3X3NpemUgLSBNSU5fTE9PS0FIRUFEKSB7XG5cdFx0XHRcdC8vIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLCB3ZSBwcmV2ZW50IG1hdGNoZXMgd2l0aCB0aGUgc3RyaW5nXG5cdFx0XHRcdC8vIG9mIHdpbiBpbmRleCAwIChpbiBwYXJ0aWN1bGFyIHdlIGhhdmUgdG8gYXZvaWQgYSBtYXRjaFxuXHRcdFx0XHQvLyBvZiB0aGUgc3RyaW5nIHdpdGggaXRzZWxmIGF0IHRoZSBzdGFydCBvZiB0aGUgaW5wdXQgZmlsZSkuXG5cblx0XHRcdFx0aWYgKHN0cmF0ZWd5ICE9IFpfSFVGRk1BTl9PTkxZKSB7XG5cdFx0XHRcdFx0bWF0Y2hfbGVuZ3RoID0gbG9uZ2VzdF9tYXRjaChoYXNoX2hlYWQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGxvbmdlc3RfbWF0Y2goKSBzZXRzIG1hdGNoX3N0YXJ0XG5cblx0XHRcdFx0aWYgKG1hdGNoX2xlbmd0aCA8PSA1ICYmIChzdHJhdGVneSA9PSBaX0ZJTFRFUkVEIHx8IChtYXRjaF9sZW5ndGggPT0gTUlOX01BVENIICYmIHN0cnN0YXJ0IC0gbWF0Y2hfc3RhcnQgPiA0MDk2KSkpIHtcblxuXHRcdFx0XHRcdC8vIElmIHByZXZfbWF0Y2ggaXMgYWxzbyBNSU5fTUFUQ0gsIG1hdGNoX3N0YXJ0IGlzIGdhcmJhZ2Vcblx0XHRcdFx0XHQvLyBidXQgd2Ugd2lsbCBpZ25vcmUgdGhlIGN1cnJlbnQgbWF0Y2ggYW55d2F5LlxuXHRcdFx0XHRcdG1hdGNoX2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhlcmUgd2FzIGEgbWF0Y2ggYXQgdGhlIHByZXZpb3VzIHN0ZXAgYW5kIHRoZSBjdXJyZW50XG5cdFx0XHQvLyBtYXRjaCBpcyBub3QgYmV0dGVyLCBvdXRwdXQgdGhlIHByZXZpb3VzIG1hdGNoOlxuXHRcdFx0aWYgKHByZXZfbGVuZ3RoID49IE1JTl9NQVRDSCAmJiBtYXRjaF9sZW5ndGggPD0gcHJldl9sZW5ndGgpIHtcblx0XHRcdFx0bWF4X2luc2VydCA9IHN0cnN0YXJ0ICsgbG9va2FoZWFkIC0gTUlOX01BVENIO1xuXHRcdFx0XHQvLyBEbyBub3QgaW5zZXJ0IHN0cmluZ3MgaW4gaGFzaCB0YWJsZSBiZXlvbmQgdGhpcy5cblxuXHRcdFx0XHQvLyBjaGVja19tYXRjaChzdHJzdGFydC0xLCBwcmV2X21hdGNoLCBwcmV2X2xlbmd0aCk7XG5cblx0XHRcdFx0YmZsdXNoID0gX3RyX3RhbGx5KHN0cnN0YXJ0IC0gMSAtIHByZXZfbWF0Y2gsIHByZXZfbGVuZ3RoIC0gTUlOX01BVENIKTtcblxuXHRcdFx0XHQvLyBJbnNlcnQgaW4gaGFzaCB0YWJsZSBhbGwgc3RyaW5ncyB1cCB0byB0aGUgZW5kIG9mIHRoZSBtYXRjaC5cblx0XHRcdFx0Ly8gc3Ryc3RhcnQtMSBhbmQgc3Ryc3RhcnQgYXJlIGFscmVhZHkgaW5zZXJ0ZWQuIElmIHRoZXJlIGlzIG5vdFxuXHRcdFx0XHQvLyBlbm91Z2ggbG9va2FoZWFkLCB0aGUgbGFzdCB0d28gc3RyaW5ncyBhcmUgbm90IGluc2VydGVkIGluXG5cdFx0XHRcdC8vIHRoZSBoYXNoIHRhYmxlLlxuXHRcdFx0XHRsb29rYWhlYWQgLT0gcHJldl9sZW5ndGggLSAxO1xuXHRcdFx0XHRwcmV2X2xlbmd0aCAtPSAyO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCsrc3Ryc3RhcnQgPD0gbWF4X2luc2VydCkge1xuXHRcdFx0XHRcdFx0aW5zX2ggPSAoKChpbnNfaCkgPDwgaGFzaF9zaGlmdCkgXiAod2luWyhzdHJzdGFydCkgKyAoTUlOX01BVENIIC0gMSldICYgMHhmZikpICYgaGFzaF9tYXNrO1xuXHRcdFx0XHRcdFx0Ly8gcHJldltzdHJzdGFydCZ3X21hc2tdPWhhc2hfaGVhZD1oZWFkW2luc19oXTtcblx0XHRcdFx0XHRcdGhhc2hfaGVhZCA9IChoZWFkW2luc19oXSAmIDB4ZmZmZik7XG5cdFx0XHRcdFx0XHRwcmV2W3N0cnN0YXJ0ICYgd19tYXNrXSA9IGhlYWRbaW5zX2hdO1xuXHRcdFx0XHRcdFx0aGVhZFtpbnNfaF0gPSBzdHJzdGFydDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKC0tcHJldl9sZW5ndGggIT09IDApO1xuXHRcdFx0XHRtYXRjaF9hdmFpbGFibGUgPSAwO1xuXHRcdFx0XHRtYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuXHRcdFx0XHRzdHJzdGFydCsrO1xuXG5cdFx0XHRcdGlmIChiZmx1c2gpIHtcblx0XHRcdFx0XHRmbHVzaF9ibG9ja19vbmx5KGZhbHNlKTtcblx0XHRcdFx0XHRpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApXG5cdFx0XHRcdFx0XHRyZXR1cm4gTmVlZE1vcmU7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAobWF0Y2hfYXZhaWxhYmxlICE9PSAwKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgd2FzIG5vIG1hdGNoIGF0IHRoZSBwcmV2aW91cyBwb3NpdGlvbiwgb3V0cHV0IGFcblx0XHRcdFx0Ly8gc2luZ2xlIGxpdGVyYWwuIElmIHRoZXJlIHdhcyBhIG1hdGNoIGJ1dCB0aGUgY3VycmVudCBtYXRjaFxuXHRcdFx0XHQvLyBpcyBsb25nZXIsIHRydW5jYXRlIHRoZSBwcmV2aW91cyBtYXRjaCB0byBhIHNpbmdsZSBsaXRlcmFsLlxuXG5cdFx0XHRcdGJmbHVzaCA9IF90cl90YWxseSgwLCB3aW5bc3Ryc3RhcnQgLSAxXSAmIDB4ZmYpO1xuXG5cdFx0XHRcdGlmIChiZmx1c2gpIHtcblx0XHRcdFx0XHRmbHVzaF9ibG9ja19vbmx5KGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzdHJzdGFydCsrO1xuXHRcdFx0XHRsb29rYWhlYWQtLTtcblx0XHRcdFx0aWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKVxuXHRcdFx0XHRcdHJldHVybiBOZWVkTW9yZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIFRoZXJlIGlzIG5vIHByZXZpb3VzIG1hdGNoIHRvIGNvbXBhcmUgd2l0aCwgd2FpdCBmb3Jcblx0XHRcdFx0Ly8gdGhlIG5leHQgc3RlcCB0byBkZWNpZGUuXG5cblx0XHRcdFx0bWF0Y2hfYXZhaWxhYmxlID0gMTtcblx0XHRcdFx0c3Ryc3RhcnQrKztcblx0XHRcdFx0bG9va2FoZWFkLS07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKG1hdGNoX2F2YWlsYWJsZSAhPT0gMCkge1xuXHRcdFx0YmZsdXNoID0gX3RyX3RhbGx5KDAsIHdpbltzdHJzdGFydCAtIDFdICYgMHhmZik7XG5cdFx0XHRtYXRjaF9hdmFpbGFibGUgPSAwO1xuXHRcdH1cblx0XHRmbHVzaF9ibG9ja19vbmx5KGZsdXNoID09IFpfRklOSVNIKTtcblxuXHRcdGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuXHRcdFx0aWYgKGZsdXNoID09IFpfRklOSVNIKVxuXHRcdFx0XHRyZXR1cm4gRmluaXNoU3RhcnRlZDtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIE5lZWRNb3JlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmbHVzaCA9PSBaX0ZJTklTSCA/IEZpbmlzaERvbmUgOiBCbG9ja0RvbmU7XG5cdH1cblxuXHRmdW5jdGlvbiBkZWZsYXRlUmVzZXQoc3RybSkge1xuXHRcdHN0cm0udG90YWxfaW4gPSBzdHJtLnRvdGFsX291dCA9IDA7XG5cdFx0c3RybS5tc2cgPSBudWxsOyAvL1xuXG5cdFx0dGhhdC5wZW5kaW5nID0gMDtcblx0XHR0aGF0LnBlbmRpbmdfb3V0ID0gMDtcblxuXHRcdHN0YXR1cyA9IEJVU1lfU1RBVEU7XG5cblx0XHRsYXN0X2ZsdXNoID0gWl9OT19GTFVTSDtcblxuXHRcdHRyX2luaXQoKTtcblx0XHRsbV9pbml0KCk7XG5cdFx0cmV0dXJuIFpfT0s7XG5cdH1cblxuXHR0aGF0LmRlZmxhdGVJbml0ID0gZnVuY3Rpb24gKHN0cm0sIF9sZXZlbCwgYml0cywgX21ldGhvZCwgbWVtTGV2ZWwsIF9zdHJhdGVneSkge1xuXHRcdGlmICghX21ldGhvZClcblx0XHRcdF9tZXRob2QgPSBaX0RFRkxBVEVEO1xuXHRcdGlmICghbWVtTGV2ZWwpXG5cdFx0XHRtZW1MZXZlbCA9IERFRl9NRU1fTEVWRUw7XG5cdFx0aWYgKCFfc3RyYXRlZ3kpXG5cdFx0XHRfc3RyYXRlZ3kgPSBaX0RFRkFVTFRfU1RSQVRFR1k7XG5cblx0XHQvLyBieXRlW10gbXlfdmVyc2lvbj1aTElCX1ZFUlNJT047XG5cblx0XHQvL1xuXHRcdC8vIGlmICghdmVyc2lvbiB8fCB2ZXJzaW9uWzBdICE9IG15X3ZlcnNpb25bMF1cblx0XHQvLyB8fCBzdHJlYW1fc2l6ZSAhPSBzaXplb2Yoel9zdHJlYW0pKSB7XG5cdFx0Ly8gcmV0dXJuIFpfVkVSU0lPTl9FUlJPUjtcblx0XHQvLyB9XG5cblx0XHRzdHJtLm1zZyA9IG51bGw7XG5cblx0XHRpZiAoX2xldmVsID09IFpfREVGQVVMVF9DT01QUkVTU0lPTilcblx0XHRcdF9sZXZlbCA9IDY7XG5cblx0XHRpZiAobWVtTGV2ZWwgPCAxIHx8IG1lbUxldmVsID4gTUFYX01FTV9MRVZFTCB8fCBfbWV0aG9kICE9IFpfREVGTEFURUQgfHwgYml0cyA8IDkgfHwgYml0cyA+IDE1IHx8IF9sZXZlbCA8IDAgfHwgX2xldmVsID4gOSB8fCBfc3RyYXRlZ3kgPCAwXG5cdFx0XHR8fCBfc3RyYXRlZ3kgPiBaX0hVRkZNQU5fT05MWSkge1xuXHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHRcdH1cblxuXHRcdHN0cm0uZHN0YXRlID0gdGhhdDtcblxuXHRcdHdfYml0cyA9IGJpdHM7XG5cdFx0d19zaXplID0gMSA8PCB3X2JpdHM7XG5cdFx0d19tYXNrID0gd19zaXplIC0gMTtcblxuXHRcdGhhc2hfYml0cyA9IG1lbUxldmVsICsgNztcblx0XHRoYXNoX3NpemUgPSAxIDw8IGhhc2hfYml0cztcblx0XHRoYXNoX21hc2sgPSBoYXNoX3NpemUgLSAxO1xuXHRcdGhhc2hfc2hpZnQgPSBNYXRoLmZsb29yKChoYXNoX2JpdHMgKyBNSU5fTUFUQ0ggLSAxKSAvIE1JTl9NQVRDSCk7XG5cblx0XHR3aW4gPSBuZXcgVWludDhBcnJheSh3X3NpemUgKiAyKTtcblx0XHRwcmV2ID0gW107XG5cdFx0aGVhZCA9IFtdO1xuXG5cdFx0bGl0X2J1ZnNpemUgPSAxIDw8IChtZW1MZXZlbCArIDYpOyAvLyAxNksgZWxlbWVudHMgYnkgZGVmYXVsdFxuXG5cdFx0dGhhdC5wZW5kaW5nX2J1ZiA9IG5ldyBVaW50OEFycmF5KGxpdF9idWZzaXplICogNCk7XG5cdFx0cGVuZGluZ19idWZfc2l6ZSA9IGxpdF9idWZzaXplICogNDtcblxuXHRcdHRoYXQuZGlzdF9idWYgPSBuZXcgVWludDE2QXJyYXkobGl0X2J1ZnNpemUpO1xuXHRcdHRoYXQubGNfYnVmID0gbmV3IFVpbnQ4QXJyYXkobGl0X2J1ZnNpemUpO1xuXG5cdFx0bGV2ZWwgPSBfbGV2ZWw7XG5cblx0XHRzdHJhdGVneSA9IF9zdHJhdGVneTtcblxuXHRcdHJldHVybiBkZWZsYXRlUmVzZXQoc3RybSk7XG5cdH07XG5cblx0dGhhdC5kZWZsYXRlRW5kID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmIChzdGF0dXMgIT0gSU5JVF9TVEFURSAmJiBzdGF0dXMgIT0gQlVTWV9TVEFURSAmJiBzdGF0dXMgIT0gRklOSVNIX1NUQVRFKSB7XG5cdFx0XHRyZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdFx0fVxuXHRcdC8vIERlYWxsb2NhdGUgaW4gcmV2ZXJzZSBvcmRlciBvZiBhbGxvY2F0aW9uczpcblx0XHR0aGF0LmxjX2J1ZiA9IG51bGw7XG5cdFx0dGhhdC5kaXN0X2J1ZiA9IG51bGw7XG5cdFx0dGhhdC5wZW5kaW5nX2J1ZiA9IG51bGw7XG5cdFx0aGVhZCA9IG51bGw7XG5cdFx0cHJldiA9IG51bGw7XG5cdFx0d2luID0gbnVsbDtcblx0XHQvLyBmcmVlXG5cdFx0dGhhdC5kc3RhdGUgPSBudWxsO1xuXHRcdHJldHVybiBzdGF0dXMgPT0gQlVTWV9TVEFURSA/IFpfREFUQV9FUlJPUiA6IFpfT0s7XG5cdH07XG5cblx0dGhhdC5kZWZsYXRlUGFyYW1zID0gZnVuY3Rpb24gKHN0cm0sIF9sZXZlbCwgX3N0cmF0ZWd5KSB7XG5cdFx0bGV0IGVyciA9IFpfT0s7XG5cblx0XHRpZiAoX2xldmVsID09IFpfREVGQVVMVF9DT01QUkVTU0lPTikge1xuXHRcdFx0X2xldmVsID0gNjtcblx0XHR9XG5cdFx0aWYgKF9sZXZlbCA8IDAgfHwgX2xldmVsID4gOSB8fCBfc3RyYXRlZ3kgPCAwIHx8IF9zdHJhdGVneSA+IFpfSFVGRk1BTl9PTkxZKSB7XG5cdFx0XHRyZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdFx0fVxuXG5cdFx0aWYgKGNvbmZpZ190YWJsZVtsZXZlbF0uZnVuYyAhPSBjb25maWdfdGFibGVbX2xldmVsXS5mdW5jICYmIHN0cm0udG90YWxfaW4gIT09IDApIHtcblx0XHRcdC8vIEZsdXNoIHRoZSBsYXN0IGJ1ZmZlcjpcblx0XHRcdGVyciA9IHN0cm0uZGVmbGF0ZShaX1BBUlRJQUxfRkxVU0gpO1xuXHRcdH1cblxuXHRcdGlmIChsZXZlbCAhPSBfbGV2ZWwpIHtcblx0XHRcdGxldmVsID0gX2xldmVsO1xuXHRcdFx0bWF4X2xhenlfbWF0Y2ggPSBjb25maWdfdGFibGVbbGV2ZWxdLm1heF9sYXp5O1xuXHRcdFx0Z29vZF9tYXRjaCA9IGNvbmZpZ190YWJsZVtsZXZlbF0uZ29vZF9sZW5ndGg7XG5cdFx0XHRuaWNlX21hdGNoID0gY29uZmlnX3RhYmxlW2xldmVsXS5uaWNlX2xlbmd0aDtcblx0XHRcdG1heF9jaGFpbl9sZW5ndGggPSBjb25maWdfdGFibGVbbGV2ZWxdLm1heF9jaGFpbjtcblx0XHR9XG5cdFx0c3RyYXRlZ3kgPSBfc3RyYXRlZ3k7XG5cdFx0cmV0dXJuIGVycjtcblx0fTtcblxuXHR0aGF0LmRlZmxhdGVTZXREaWN0aW9uYXJ5ID0gZnVuY3Rpb24gKF9zdHJtLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoKSB7XG5cdFx0bGV0IGxlbmd0aCA9IGRpY3RMZW5ndGg7XG5cdFx0bGV0IG4sIGluZGV4ID0gMDtcblxuXHRcdGlmICghZGljdGlvbmFyeSB8fCBzdGF0dXMgIT0gSU5JVF9TVEFURSlcblx0XHRcdHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblxuXHRcdGlmIChsZW5ndGggPCBNSU5fTUFUQ0gpXG5cdFx0XHRyZXR1cm4gWl9PSztcblx0XHRpZiAobGVuZ3RoID4gd19zaXplIC0gTUlOX0xPT0tBSEVBRCkge1xuXHRcdFx0bGVuZ3RoID0gd19zaXplIC0gTUlOX0xPT0tBSEVBRDtcblx0XHRcdGluZGV4ID0gZGljdExlbmd0aCAtIGxlbmd0aDsgLy8gdXNlIHRoZSB0YWlsIG9mIHRoZSBkaWN0aW9uYXJ5XG5cdFx0fVxuXHRcdHdpbi5zZXQoZGljdGlvbmFyeS5zdWJhcnJheShpbmRleCwgaW5kZXggKyBsZW5ndGgpLCAwKTtcblxuXHRcdHN0cnN0YXJ0ID0gbGVuZ3RoO1xuXHRcdGJsb2NrX3N0YXJ0ID0gbGVuZ3RoO1xuXG5cdFx0Ly8gSW5zZXJ0IGFsbCBzdHJpbmdzIGluIHRoZSBoYXNoIHRhYmxlIChleGNlcHQgZm9yIHRoZSBsYXN0IHR3byBieXRlcykuXG5cdFx0Ly8gcy0+bG9va2FoZWFkIHN0YXlzIG51bGwsIHNvIHMtPmluc19oIHdpbGwgYmUgcmVjb21wdXRlZCBhdCB0aGUgbmV4dFxuXHRcdC8vIGNhbGwgb2YgZmlsbF93aW5kb3cuXG5cblx0XHRpbnNfaCA9IHdpblswXSAmIDB4ZmY7XG5cdFx0aW5zX2ggPSAoKChpbnNfaCkgPDwgaGFzaF9zaGlmdCkgXiAod2luWzFdICYgMHhmZikpICYgaGFzaF9tYXNrO1xuXG5cdFx0Zm9yIChuID0gMDsgbiA8PSBsZW5ndGggLSBNSU5fTUFUQ0g7IG4rKykge1xuXHRcdFx0aW5zX2ggPSAoKChpbnNfaCkgPDwgaGFzaF9zaGlmdCkgXiAod2luWyhuKSArIChNSU5fTUFUQ0ggLSAxKV0gJiAweGZmKSkgJiBoYXNoX21hc2s7XG5cdFx0XHRwcmV2W24gJiB3X21hc2tdID0gaGVhZFtpbnNfaF07XG5cdFx0XHRoZWFkW2luc19oXSA9IG47XG5cdFx0fVxuXHRcdHJldHVybiBaX09LO1xuXHR9O1xuXG5cdHRoYXQuZGVmbGF0ZSA9IGZ1bmN0aW9uIChfc3RybSwgZmx1c2gpIHtcblx0XHRsZXQgaSwgaGVhZGVyLCBsZXZlbF9mbGFncywgb2xkX2ZsdXNoLCBic3RhdGU7XG5cblx0XHRpZiAoZmx1c2ggPiBaX0ZJTklTSCB8fCBmbHVzaCA8IDApIHtcblx0XHRcdHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblx0XHR9XG5cblx0XHRpZiAoIV9zdHJtLm5leHRfb3V0IHx8ICghX3N0cm0ubmV4dF9pbiAmJiBfc3RybS5hdmFpbF9pbiAhPT0gMCkgfHwgKHN0YXR1cyA9PSBGSU5JU0hfU1RBVEUgJiYgZmx1c2ggIT0gWl9GSU5JU0gpKSB7XG5cdFx0XHRfc3RybS5tc2cgPSB6X2Vycm1zZ1taX05FRURfRElDVCAtIChaX1NUUkVBTV9FUlJPUildO1xuXHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHRcdH1cblx0XHRpZiAoX3N0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG5cdFx0XHRfc3RybS5tc2cgPSB6X2Vycm1zZ1taX05FRURfRElDVCAtIChaX0JVRl9FUlJPUildO1xuXHRcdFx0cmV0dXJuIFpfQlVGX0VSUk9SO1xuXHRcdH1cblxuXHRcdHN0cm0gPSBfc3RybTsgLy8ganVzdCBpbiBjYXNlXG5cdFx0b2xkX2ZsdXNoID0gbGFzdF9mbHVzaDtcblx0XHRsYXN0X2ZsdXNoID0gZmx1c2g7XG5cblx0XHQvLyBXcml0ZSB0aGUgemxpYiBoZWFkZXJcblx0XHRpZiAoc3RhdHVzID09IElOSVRfU1RBVEUpIHtcblx0XHRcdGhlYWRlciA9IChaX0RFRkxBVEVEICsgKCh3X2JpdHMgLSA4KSA8PCA0KSkgPDwgODtcblx0XHRcdGxldmVsX2ZsYWdzID0gKChsZXZlbCAtIDEpICYgMHhmZikgPj4gMTtcblxuXHRcdFx0aWYgKGxldmVsX2ZsYWdzID4gMylcblx0XHRcdFx0bGV2ZWxfZmxhZ3MgPSAzO1xuXHRcdFx0aGVhZGVyIHw9IChsZXZlbF9mbGFncyA8PCA2KTtcblx0XHRcdGlmIChzdHJzdGFydCAhPT0gMClcblx0XHRcdFx0aGVhZGVyIHw9IFBSRVNFVF9ESUNUO1xuXHRcdFx0aGVhZGVyICs9IDMxIC0gKGhlYWRlciAlIDMxKTtcblxuXHRcdFx0c3RhdHVzID0gQlVTWV9TVEFURTtcblx0XHRcdHB1dFNob3J0TVNCKGhlYWRlcik7XG5cdFx0fVxuXG5cdFx0Ly8gRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZVxuXHRcdGlmICh0aGF0LnBlbmRpbmcgIT09IDApIHtcblx0XHRcdHN0cm0uZmx1c2hfcGVuZGluZygpO1xuXHRcdFx0aWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwiIGF2YWlsX291dD09MFwiKTtcblx0XHRcdFx0Ly8gU2luY2UgYXZhaWxfb3V0IGlzIDAsIGRlZmxhdGUgd2lsbCBiZSBjYWxsZWQgYWdhaW4gd2l0aFxuXHRcdFx0XHQvLyBtb3JlIG91dHB1dCBzcGFjZSwgYnV0IHBvc3NpYmx5IHdpdGggYm90aCBwZW5kaW5nIGFuZFxuXHRcdFx0XHQvLyBhdmFpbF9pbiBlcXVhbCB0byB6ZXJvLiBUaGVyZSB3b24ndCBiZSBhbnl0aGluZyB0byBkbyxcblx0XHRcdFx0Ly8gYnV0IHRoaXMgaXMgbm90IGFuIGVycm9yIHNpdHVhdGlvbiBzbyBtYWtlIHN1cmUgd2Vcblx0XHRcdFx0Ly8gcmV0dXJuIE9LIGluc3RlYWQgb2YgQlVGX0VSUk9SIGF0IG5leHQgY2FsbCBvZiBkZWZsYXRlOlxuXHRcdFx0XHRsYXN0X2ZsdXNoID0gLTE7XG5cdFx0XHRcdHJldHVybiBaX09LO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhlcmUgaXMgc29tZXRoaW5nIHRvIGRvIGFuZCBhdm9pZCBkdXBsaWNhdGVcblx0XHRcdC8vIGNvbnNlY3V0aXZlXG5cdFx0XHQvLyBmbHVzaGVzLiBGb3IgcmVwZWF0ZWQgYW5kIHVzZWxlc3MgY2FsbHMgd2l0aCBaX0ZJTklTSCwgd2Uga2VlcFxuXHRcdFx0Ly8gcmV0dXJuaW5nIFpfU1RSRUFNX0VORCBpbnN0ZWFkIG9mIFpfQlVGRl9FUlJPUi5cblx0XHR9IGVsc2UgaWYgKHN0cm0uYXZhaWxfaW4gPT09IDAgJiYgZmx1c2ggPD0gb2xkX2ZsdXNoICYmIGZsdXNoICE9IFpfRklOSVNIKSB7XG5cdFx0XHRzdHJtLm1zZyA9IHpfZXJybXNnW1pfTkVFRF9ESUNUIC0gKFpfQlVGX0VSUk9SKV07XG5cdFx0XHRyZXR1cm4gWl9CVUZfRVJST1I7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlciBtdXN0IG5vdCBwcm92aWRlIG1vcmUgaW5wdXQgYWZ0ZXIgdGhlIGZpcnN0IEZJTklTSDpcblx0XHRpZiAoc3RhdHVzID09IEZJTklTSF9TVEFURSAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSB7XG5cdFx0XHRfc3RybS5tc2cgPSB6X2Vycm1zZ1taX05FRURfRElDVCAtIChaX0JVRl9FUlJPUildO1xuXHRcdFx0cmV0dXJuIFpfQlVGX0VSUk9SO1xuXHRcdH1cblxuXHRcdC8vIFN0YXJ0IGEgbmV3IGJsb2NrIG9yIGNvbnRpbnVlIHRoZSBjdXJyZW50IG9uZS5cblx0XHRpZiAoc3RybS5hdmFpbF9pbiAhPT0gMCB8fCBsb29rYWhlYWQgIT09IDAgfHwgKGZsdXNoICE9IFpfTk9fRkxVU0ggJiYgc3RhdHVzICE9IEZJTklTSF9TVEFURSkpIHtcblx0XHRcdGJzdGF0ZSA9IC0xO1xuXHRcdFx0c3dpdGNoIChjb25maWdfdGFibGVbbGV2ZWxdLmZ1bmMpIHtcblx0XHRcdFx0Y2FzZSBTVE9SRUQ6XG5cdFx0XHRcdFx0YnN0YXRlID0gZGVmbGF0ZV9zdG9yZWQoZmx1c2gpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIEZBU1Q6XG5cdFx0XHRcdFx0YnN0YXRlID0gZGVmbGF0ZV9mYXN0KGZsdXNoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBTTE9XOlxuXHRcdFx0XHRcdGJzdGF0ZSA9IGRlZmxhdGVfc2xvdyhmbHVzaCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHR9XG5cblx0XHRcdGlmIChic3RhdGUgPT0gRmluaXNoU3RhcnRlZCB8fCBic3RhdGUgPT0gRmluaXNoRG9uZSkge1xuXHRcdFx0XHRzdGF0dXMgPSBGSU5JU0hfU1RBVEU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYnN0YXRlID09IE5lZWRNb3JlIHx8IGJzdGF0ZSA9PSBGaW5pc2hTdGFydGVkKSB7XG5cdFx0XHRcdGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuXHRcdFx0XHRcdGxhc3RfZmx1c2ggPSAtMTsgLy8gYXZvaWQgQlVGX0VSUk9SIG5leHQgY2FsbCwgc2VlIGFib3ZlXG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIFpfT0s7XG5cdFx0XHRcdC8vIElmIGZsdXNoICE9IFpfTk9fRkxVU0ggJiYgYXZhaWxfb3V0ID09PSAwLCB0aGUgbmV4dCBjYWxsXG5cdFx0XHRcdC8vIG9mIGRlZmxhdGUgc2hvdWxkIHVzZSB0aGUgc2FtZSBmbHVzaCBwYXJhbWV0ZXIgdG8gbWFrZSBzdXJlXG5cdFx0XHRcdC8vIHRoYXQgdGhlIGZsdXNoIGlzIGNvbXBsZXRlLiBTbyB3ZSBkb24ndCBoYXZlIHRvIG91dHB1dCBhblxuXHRcdFx0XHQvLyBlbXB0eSBibG9jayBoZXJlLCB0aGlzIHdpbGwgYmUgZG9uZSBhdCBuZXh0IGNhbGwuIFRoaXMgYWxzb1xuXHRcdFx0XHQvLyBlbnN1cmVzIHRoYXQgZm9yIGEgdmVyeSBzbWFsbCBvdXRwdXQgYnVmZmVyLCB3ZSBlbWl0IGF0IG1vc3Rcblx0XHRcdFx0Ly8gb25lIGVtcHR5IGJsb2NrLlxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYnN0YXRlID09IEJsb2NrRG9uZSkge1xuXHRcdFx0XHRpZiAoZmx1c2ggPT0gWl9QQVJUSUFMX0ZMVVNIKSB7XG5cdFx0XHRcdFx0X3RyX2FsaWduKCk7XG5cdFx0XHRcdH0gZWxzZSB7IC8vIEZVTExfRkxVU0ggb3IgU1lOQ19GTFVTSFxuXHRcdFx0XHRcdF90cl9zdG9yZWRfYmxvY2soMCwgMCwgZmFsc2UpO1xuXHRcdFx0XHRcdC8vIEZvciBhIGZ1bGwgZmx1c2gsIHRoaXMgZW1wdHkgYmxvY2sgd2lsbCBiZSByZWNvZ25pemVkXG5cdFx0XHRcdFx0Ly8gYXMgYSBzcGVjaWFsIG1hcmtlciBieSBpbmZsYXRlX3N5bmMoKS5cblx0XHRcdFx0XHRpZiAoZmx1c2ggPT0gWl9GVUxMX0ZMVVNIKSB7XG5cdFx0XHRcdFx0XHQvLyBzdGF0ZS5oZWFkW3MuaGFzaF9zaXplLTFdPTA7XG5cdFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgaGFzaF9zaXplLyotMSovOyBpKyspXG5cdFx0XHRcdFx0XHRcdC8vIGZvcmdldCBoaXN0b3J5XG5cdFx0XHRcdFx0XHRcdGhlYWRbaV0gPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHJtLmZsdXNoX3BlbmRpbmcoKTtcblx0XHRcdFx0aWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG5cdFx0XHRcdFx0bGFzdF9mbHVzaCA9IC0xOyAvLyBhdm9pZCBCVUZfRVJST1IgYXQgbmV4dCBjYWxsLCBzZWUgYWJvdmVcblx0XHRcdFx0XHRyZXR1cm4gWl9PSztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChmbHVzaCAhPSBaX0ZJTklTSClcblx0XHRcdHJldHVybiBaX09LO1xuXHRcdHJldHVybiBaX1NUUkVBTV9FTkQ7XG5cdH07XG59XG5cbi8vIFpTdHJlYW1cblxuZnVuY3Rpb24gWlN0cmVhbSgpIHtcblx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdHRoYXQubmV4dF9pbl9pbmRleCA9IDA7XG5cdHRoYXQubmV4dF9vdXRfaW5kZXggPSAwO1xuXHQvLyB0aGF0Lm5leHRfaW47IC8vIG5leHQgaW5wdXQgYnl0ZVxuXHR0aGF0LmF2YWlsX2luID0gMDsgLy8gbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSBhdCBuZXh0X2luXG5cdHRoYXQudG90YWxfaW4gPSAwOyAvLyB0b3RhbCBuYiBvZiBpbnB1dCBieXRlcyByZWFkIHNvIGZhclxuXHQvLyB0aGF0Lm5leHRfb3V0OyAvLyBuZXh0IG91dHB1dCBieXRlIHNob3VsZCBiZSBwdXQgdGhlcmVcblx0dGhhdC5hdmFpbF9vdXQgPSAwOyAvLyByZW1haW5pbmcgZnJlZSBzcGFjZSBhdCBuZXh0X291dFxuXHR0aGF0LnRvdGFsX291dCA9IDA7IC8vIHRvdGFsIG5iIG9mIGJ5dGVzIG91dHB1dCBzbyBmYXJcblx0Ly8gdGhhdC5tc2c7XG5cdC8vIHRoYXQuZHN0YXRlO1xufVxuXG5aU3RyZWFtLnByb3RvdHlwZSA9IHtcblx0ZGVmbGF0ZUluaXQobGV2ZWwsIGJpdHMpIHtcblx0XHRjb25zdCB0aGF0ID0gdGhpcztcblx0XHR0aGF0LmRzdGF0ZSA9IG5ldyBEZWZsYXRlKCk7XG5cdFx0aWYgKCFiaXRzKVxuXHRcdFx0Yml0cyA9IE1BWF9CSVRTO1xuXHRcdHJldHVybiB0aGF0LmRzdGF0ZS5kZWZsYXRlSW5pdCh0aGF0LCBsZXZlbCwgYml0cyk7XG5cdH0sXG5cblx0ZGVmbGF0ZShmbHVzaCkge1xuXHRcdGNvbnN0IHRoYXQgPSB0aGlzO1xuXHRcdGlmICghdGhhdC5kc3RhdGUpIHtcblx0XHRcdHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoYXQuZHN0YXRlLmRlZmxhdGUodGhhdCwgZmx1c2gpO1xuXHR9LFxuXG5cdGRlZmxhdGVFbmQoKSB7XG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdFx0aWYgKCF0aGF0LmRzdGF0ZSlcblx0XHRcdHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblx0XHRjb25zdCByZXQgPSB0aGF0LmRzdGF0ZS5kZWZsYXRlRW5kKCk7XG5cdFx0dGhhdC5kc3RhdGUgPSBudWxsO1xuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0ZGVmbGF0ZVBhcmFtcyhsZXZlbCwgc3RyYXRlZ3kpIHtcblx0XHRjb25zdCB0aGF0ID0gdGhpcztcblx0XHRpZiAoIXRoYXQuZHN0YXRlKVxuXHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHRcdHJldHVybiB0aGF0LmRzdGF0ZS5kZWZsYXRlUGFyYW1zKHRoYXQsIGxldmVsLCBzdHJhdGVneSk7XG5cdH0sXG5cblx0ZGVmbGF0ZVNldERpY3Rpb25hcnkoZGljdGlvbmFyeSwgZGljdExlbmd0aCkge1xuXHRcdGNvbnN0IHRoYXQgPSB0aGlzO1xuXHRcdGlmICghdGhhdC5kc3RhdGUpXG5cdFx0XHRyZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdFx0cmV0dXJuIHRoYXQuZHN0YXRlLmRlZmxhdGVTZXREaWN0aW9uYXJ5KHRoYXQsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgpO1xuXHR9LFxuXG5cdC8vIFJlYWQgYSBuZXcgYnVmZmVyIGZyb20gdGhlIGN1cnJlbnQgaW5wdXQgc3RyZWFtLCB1cGRhdGUgdGhlXG5cdC8vIHRvdGFsIG51bWJlciBvZiBieXRlcyByZWFkLiBBbGwgZGVmbGF0ZSgpIGlucHV0IGdvZXMgdGhyb3VnaFxuXHQvLyB0aGlzIGZ1bmN0aW9uIHNvIHNvbWUgYXBwbGljYXRpb25zIG1heSB3aXNoIHRvIG1vZGlmeSBpdCB0byBhdm9pZFxuXHQvLyBhbGxvY2F0aW5nIGEgbGFyZ2Ugc3RybS0+bmV4dF9pbiBidWZmZXIgYW5kIGNvcHlpbmcgZnJvbSBpdC5cblx0Ly8gKFNlZSBhbHNvIGZsdXNoX3BlbmRpbmcoKSkuXG5cdHJlYWRfYnVmKGJ1Ziwgc3RhcnQsIHNpemUpIHtcblx0XHRjb25zdCB0aGF0ID0gdGhpcztcblx0XHRsZXQgbGVuID0gdGhhdC5hdmFpbF9pbjtcblx0XHRpZiAobGVuID4gc2l6ZSlcblx0XHRcdGxlbiA9IHNpemU7XG5cdFx0aWYgKGxlbiA9PT0gMClcblx0XHRcdHJldHVybiAwO1xuXHRcdHRoYXQuYXZhaWxfaW4gLT0gbGVuO1xuXHRcdGJ1Zi5zZXQodGhhdC5uZXh0X2luLnN1YmFycmF5KHRoYXQubmV4dF9pbl9pbmRleCwgdGhhdC5uZXh0X2luX2luZGV4ICsgbGVuKSwgc3RhcnQpO1xuXHRcdHRoYXQubmV4dF9pbl9pbmRleCArPSBsZW47XG5cdFx0dGhhdC50b3RhbF9pbiArPSBsZW47XG5cdFx0cmV0dXJuIGxlbjtcblx0fSxcblxuXHQvLyBGbHVzaCBhcyBtdWNoIHBlbmRpbmcgb3V0cHV0IGFzIHBvc3NpYmxlLiBBbGwgZGVmbGF0ZSgpIG91dHB1dCBnb2VzXG5cdC8vIHRocm91Z2ggdGhpcyBmdW5jdGlvbiBzbyBzb21lIGFwcGxpY2F0aW9ucyBtYXkgd2lzaCB0byBtb2RpZnkgaXRcblx0Ly8gdG8gYXZvaWQgYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPm5leHRfb3V0IGJ1ZmZlciBhbmQgY29weWluZyBpbnRvIGl0LlxuXHQvLyAoU2VlIGFsc28gcmVhZF9idWYoKSkuXG5cdGZsdXNoX3BlbmRpbmcoKSB7XG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdFx0bGV0IGxlbiA9IHRoYXQuZHN0YXRlLnBlbmRpbmc7XG5cblx0XHRpZiAobGVuID4gdGhhdC5hdmFpbF9vdXQpXG5cdFx0XHRsZW4gPSB0aGF0LmF2YWlsX291dDtcblx0XHRpZiAobGVuID09PSAwKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0Ly8gaWYgKHRoYXQuZHN0YXRlLnBlbmRpbmdfYnVmLmxlbmd0aCA8PSB0aGF0LmRzdGF0ZS5wZW5kaW5nX291dCB8fCB0aGF0Lm5leHRfb3V0Lmxlbmd0aCA8PSB0aGF0Lm5leHRfb3V0X2luZGV4XG5cdFx0Ly8gfHwgdGhhdC5kc3RhdGUucGVuZGluZ19idWYubGVuZ3RoIDwgKHRoYXQuZHN0YXRlLnBlbmRpbmdfb3V0ICsgbGVuKSB8fCB0aGF0Lm5leHRfb3V0Lmxlbmd0aCA8ICh0aGF0Lm5leHRfb3V0X2luZGV4ICtcblx0XHQvLyBsZW4pKSB7XG5cdFx0Ly8gY29uc29sZS5sb2codGhhdC5kc3RhdGUucGVuZGluZ19idWYubGVuZ3RoICsgXCIsIFwiICsgdGhhdC5kc3RhdGUucGVuZGluZ19vdXQgKyBcIiwgXCIgKyB0aGF0Lm5leHRfb3V0Lmxlbmd0aCArIFwiLCBcIiArXG5cdFx0Ly8gdGhhdC5uZXh0X291dF9pbmRleCArIFwiLCBcIiArIGxlbik7XG5cdFx0Ly8gY29uc29sZS5sb2coXCJhdmFpbF9vdXQ9XCIgKyB0aGF0LmF2YWlsX291dCk7XG5cdFx0Ly8gfVxuXG5cdFx0dGhhdC5uZXh0X291dC5zZXQodGhhdC5kc3RhdGUucGVuZGluZ19idWYuc3ViYXJyYXkodGhhdC5kc3RhdGUucGVuZGluZ19vdXQsIHRoYXQuZHN0YXRlLnBlbmRpbmdfb3V0ICsgbGVuKSwgdGhhdC5uZXh0X291dF9pbmRleCk7XG5cblx0XHR0aGF0Lm5leHRfb3V0X2luZGV4ICs9IGxlbjtcblx0XHR0aGF0LmRzdGF0ZS5wZW5kaW5nX291dCArPSBsZW47XG5cdFx0dGhhdC50b3RhbF9vdXQgKz0gbGVuO1xuXHRcdHRoYXQuYXZhaWxfb3V0IC09IGxlbjtcblx0XHR0aGF0LmRzdGF0ZS5wZW5kaW5nIC09IGxlbjtcblx0XHRpZiAodGhhdC5kc3RhdGUucGVuZGluZyA9PT0gMCkge1xuXHRcdFx0dGhhdC5kc3RhdGUucGVuZGluZ19vdXQgPSAwO1xuXHRcdH1cblx0fVxufTtcblxuLy8gRGVmbGF0ZVxuXG5mdW5jdGlvbiBaaXBEZWZsYXRlKG9wdGlvbnMpIHtcblx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdGNvbnN0IHogPSBuZXcgWlN0cmVhbSgpO1xuXHRjb25zdCBidWZzaXplID0gZ2V0TWF4aW11bUNvbXByZXNzZWRTaXplKG9wdGlvbnMgJiYgb3B0aW9ucy5jaHVua1NpemUgPyBvcHRpb25zLmNodW5rU2l6ZSA6IDY0ICogMTAyNCk7XG5cdGNvbnN0IGZsdXNoID0gWl9OT19GTFVTSDtcblx0Y29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYnVmc2l6ZSk7XG5cdGxldCBsZXZlbCA9IG9wdGlvbnMgPyBvcHRpb25zLmxldmVsIDogWl9ERUZBVUxUX0NPTVBSRVNTSU9OO1xuXHRpZiAodHlwZW9mIGxldmVsID09IFwidW5kZWZpbmVkXCIpXG5cdFx0bGV2ZWwgPSBaX0RFRkFVTFRfQ09NUFJFU1NJT047XG5cdHouZGVmbGF0ZUluaXQobGV2ZWwpO1xuXHR6Lm5leHRfb3V0ID0gYnVmO1xuXG5cdHRoYXQuYXBwZW5kID0gZnVuY3Rpb24gKGRhdGEsIG9ucHJvZ3Jlc3MpIHtcblx0XHRsZXQgZXJyLCBhcnJheSwgbGFzdEluZGV4ID0gMCwgYnVmZmVySW5kZXggPSAwLCBidWZmZXJTaXplID0gMDtcblx0XHRjb25zdCBidWZmZXJzID0gW107XG5cdFx0aWYgKCFkYXRhLmxlbmd0aClcblx0XHRcdHJldHVybjtcblx0XHR6Lm5leHRfaW5faW5kZXggPSAwO1xuXHRcdHoubmV4dF9pbiA9IGRhdGE7XG5cdFx0ei5hdmFpbF9pbiA9IGRhdGEubGVuZ3RoO1xuXHRcdGRvIHtcblx0XHRcdHoubmV4dF9vdXRfaW5kZXggPSAwO1xuXHRcdFx0ei5hdmFpbF9vdXQgPSBidWZzaXplO1xuXHRcdFx0ZXJyID0gei5kZWZsYXRlKGZsdXNoKTtcblx0XHRcdGlmIChlcnIgIT0gWl9PSylcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiZGVmbGF0aW5nOiBcIiArIHoubXNnKTtcblx0XHRcdGlmICh6Lm5leHRfb3V0X2luZGV4KVxuXHRcdFx0XHRpZiAoei5uZXh0X291dF9pbmRleCA9PSBidWZzaXplKVxuXHRcdFx0XHRcdGJ1ZmZlcnMucHVzaChuZXcgVWludDhBcnJheShidWYpKTtcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdGJ1ZmZlcnMucHVzaChidWYuc3ViYXJyYXkoMCwgei5uZXh0X291dF9pbmRleCkpO1xuXHRcdFx0YnVmZmVyU2l6ZSArPSB6Lm5leHRfb3V0X2luZGV4O1xuXHRcdFx0aWYgKG9ucHJvZ3Jlc3MgJiYgei5uZXh0X2luX2luZGV4ID4gMCAmJiB6Lm5leHRfaW5faW5kZXggIT0gbGFzdEluZGV4KSB7XG5cdFx0XHRcdG9ucHJvZ3Jlc3Moei5uZXh0X2luX2luZGV4KTtcblx0XHRcdFx0bGFzdEluZGV4ID0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0fVxuXHRcdH0gd2hpbGUgKHouYXZhaWxfaW4gPiAwIHx8IHouYXZhaWxfb3V0ID09PSAwKTtcblx0XHRpZiAoYnVmZmVycy5sZW5ndGggPiAxKSB7XG5cdFx0XHRhcnJheSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlclNpemUpO1xuXHRcdFx0YnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVuaykge1xuXHRcdFx0XHRhcnJheS5zZXQoY2h1bmssIGJ1ZmZlckluZGV4KTtcblx0XHRcdFx0YnVmZmVySW5kZXggKz0gY2h1bmsubGVuZ3RoO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFycmF5ID0gYnVmZmVyc1swXSA/IG5ldyBVaW50OEFycmF5KGJ1ZmZlcnNbMF0pIDogbmV3IFVpbnQ4QXJyYXkoKTtcblx0XHR9XG5cdFx0cmV0dXJuIGFycmF5O1xuXHR9O1xuXHR0aGF0LmZsdXNoID0gZnVuY3Rpb24gKCkge1xuXHRcdGxldCBlcnIsIGFycmF5LCBidWZmZXJJbmRleCA9IDAsIGJ1ZmZlclNpemUgPSAwO1xuXHRcdGNvbnN0IGJ1ZmZlcnMgPSBbXTtcblx0XHRkbyB7XG5cdFx0XHR6Lm5leHRfb3V0X2luZGV4ID0gMDtcblx0XHRcdHouYXZhaWxfb3V0ID0gYnVmc2l6ZTtcblx0XHRcdGVyciA9IHouZGVmbGF0ZShaX0ZJTklTSCk7XG5cdFx0XHRpZiAoZXJyICE9IFpfU1RSRUFNX0VORCAmJiBlcnIgIT0gWl9PSylcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiZGVmbGF0aW5nOiBcIiArIHoubXNnKTtcblx0XHRcdGlmIChidWZzaXplIC0gei5hdmFpbF9vdXQgPiAwKVxuXHRcdFx0XHRidWZmZXJzLnB1c2goYnVmLnNsaWNlKDAsIHoubmV4dF9vdXRfaW5kZXgpKTtcblx0XHRcdGJ1ZmZlclNpemUgKz0gei5uZXh0X291dF9pbmRleDtcblx0XHR9IHdoaWxlICh6LmF2YWlsX2luID4gMCB8fCB6LmF2YWlsX291dCA9PT0gMCk7XG5cdFx0ei5kZWZsYXRlRW5kKCk7XG5cdFx0YXJyYXkgPSBuZXcgVWludDhBcnJheShidWZmZXJTaXplKTtcblx0XHRidWZmZXJzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rKSB7XG5cdFx0XHRhcnJheS5zZXQoY2h1bmssIGJ1ZmZlckluZGV4KTtcblx0XHRcdGJ1ZmZlckluZGV4ICs9IGNodW5rLmxlbmd0aDtcblx0XHR9KTtcblx0XHRyZXR1cm4gYXJyYXk7XG5cdH07XG59XG5cbmZ1bmN0aW9uIGdldE1heGltdW1Db21wcmVzc2VkU2l6ZSh1bmNvbXByZXNzZWRTaXplKSB7XG5cdHJldHVybiB1bmNvbXByZXNzZWRTaXplICsgKDUgKiAoTWF0aC5mbG9vcih1bmNvbXByZXNzZWRTaXplIC8gMTYzODMpICsgMSkpO1xufVxuXG5leHBvcnQge1xuXHRaaXBEZWZsYXRlIGFzIERlZmxhdGVcbn07IiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4vKlxuICogVGhpcyBwcm9ncmFtIGlzIGJhc2VkIG9uIEpabGliIDEuMC4yIHltbmssIEpDcmFmdCxJbmMuXG4gKiBKWmxpYiBpcyBiYXNlZCBvbiB6bGliLTEuMS4zLCBzbyBhbGwgY3JlZGl0IHNob3VsZCBnbyBhdXRob3JzXG4gKiBKZWFuLWxvdXAgR2FpbGx5KGpsb3VwQGd6aXAub3JnKSBhbmQgTWFyayBBZGxlcihtYWRsZXJAYWx1bW5pLmNhbHRlY2guZWR1KVxuICogYW5kIGNvbnRyaWJ1dG9ycyBvZiB6bGliLlxuICovXG5cbi8vIGRlbm8tbGludC1pZ25vcmUtZmlsZSBuby10aGlzLWFsaWFzIHByZWZlci1jb25zdFxuXG4vLyBHbG9iYWxcblxuY29uc3QgTUFYX0JJVFMgPSAxNTtcblxuY29uc3QgWl9PSyA9IDA7XG5jb25zdCBaX1NUUkVBTV9FTkQgPSAxO1xuY29uc3QgWl9ORUVEX0RJQ1QgPSAyO1xuY29uc3QgWl9TVFJFQU1fRVJST1IgPSAtMjtcbmNvbnN0IFpfREFUQV9FUlJPUiA9IC0zO1xuY29uc3QgWl9NRU1fRVJST1IgPSAtNDtcbmNvbnN0IFpfQlVGX0VSUk9SID0gLTU7XG5cbmNvbnN0IGluZmxhdGVfbWFzayA9IFsweDAwMDAwMDAwLCAweDAwMDAwMDAxLCAweDAwMDAwMDAzLCAweDAwMDAwMDA3LCAweDAwMDAwMDBmLCAweDAwMDAwMDFmLCAweDAwMDAwMDNmLCAweDAwMDAwMDdmLCAweDAwMDAwMGZmLCAweDAwMDAwMWZmLCAweDAwMDAwM2ZmLFxuXHQweDAwMDAwN2ZmLCAweDAwMDAwZmZmLCAweDAwMDAxZmZmLCAweDAwMDAzZmZmLCAweDAwMDA3ZmZmLCAweDAwMDBmZmZmXTtcblxuY29uc3QgTUFOWSA9IDE0NDA7XG5cbi8vIEpabGliIHZlcnNpb24gOiBcIjEuMC4yXCJcbmNvbnN0IFpfTk9fRkxVU0ggPSAwO1xuY29uc3QgWl9GSU5JU0ggPSA0O1xuXG4vLyBJbmZUcmVlXG5jb25zdCBmaXhlZF9ibCA9IDk7XG5jb25zdCBmaXhlZF9iZCA9IDU7XG5cbmNvbnN0IGZpeGVkX3RsID0gWzk2LCA3LCAyNTYsIDAsIDgsIDgwLCAwLCA4LCAxNiwgODQsIDgsIDExNSwgODIsIDcsIDMxLCAwLCA4LCAxMTIsIDAsIDgsIDQ4LCAwLCA5LCAxOTIsIDgwLCA3LCAxMCwgMCwgOCwgOTYsIDAsIDgsIDMyLCAwLCA5LCAxNjAsIDAsIDgsIDAsXG5cdDAsIDgsIDEyOCwgMCwgOCwgNjQsIDAsIDksIDIyNCwgODAsIDcsIDYsIDAsIDgsIDg4LCAwLCA4LCAyNCwgMCwgOSwgMTQ0LCA4MywgNywgNTksIDAsIDgsIDEyMCwgMCwgOCwgNTYsIDAsIDksIDIwOCwgODEsIDcsIDE3LCAwLCA4LCAxMDQsIDAsIDgsIDQwLFxuXHQwLCA5LCAxNzYsIDAsIDgsIDgsIDAsIDgsIDEzNiwgMCwgOCwgNzIsIDAsIDksIDI0MCwgODAsIDcsIDQsIDAsIDgsIDg0LCAwLCA4LCAyMCwgODUsIDgsIDIyNywgODMsIDcsIDQzLCAwLCA4LCAxMTYsIDAsIDgsIDUyLCAwLCA5LCAyMDAsIDgxLCA3LCAxMyxcblx0MCwgOCwgMTAwLCAwLCA4LCAzNiwgMCwgOSwgMTY4LCAwLCA4LCA0LCAwLCA4LCAxMzIsIDAsIDgsIDY4LCAwLCA5LCAyMzIsIDgwLCA3LCA4LCAwLCA4LCA5MiwgMCwgOCwgMjgsIDAsIDksIDE1MiwgODQsIDcsIDgzLCAwLCA4LCAxMjQsIDAsIDgsIDYwLFxuXHQwLCA5LCAyMTYsIDgyLCA3LCAyMywgMCwgOCwgMTA4LCAwLCA4LCA0NCwgMCwgOSwgMTg0LCAwLCA4LCAxMiwgMCwgOCwgMTQwLCAwLCA4LCA3NiwgMCwgOSwgMjQ4LCA4MCwgNywgMywgMCwgOCwgODIsIDAsIDgsIDE4LCA4NSwgOCwgMTYzLCA4MywgNyxcblx0MzUsIDAsIDgsIDExNCwgMCwgOCwgNTAsIDAsIDksIDE5NiwgODEsIDcsIDExLCAwLCA4LCA5OCwgMCwgOCwgMzQsIDAsIDksIDE2NCwgMCwgOCwgMiwgMCwgOCwgMTMwLCAwLCA4LCA2NiwgMCwgOSwgMjI4LCA4MCwgNywgNywgMCwgOCwgOTAsIDAsIDgsXG5cdDI2LCAwLCA5LCAxNDgsIDg0LCA3LCA2NywgMCwgOCwgMTIyLCAwLCA4LCA1OCwgMCwgOSwgMjEyLCA4MiwgNywgMTksIDAsIDgsIDEwNiwgMCwgOCwgNDIsIDAsIDksIDE4MCwgMCwgOCwgMTAsIDAsIDgsIDEzOCwgMCwgOCwgNzQsIDAsIDksIDI0NCwgODAsXG5cdDcsIDUsIDAsIDgsIDg2LCAwLCA4LCAyMiwgMTkyLCA4LCAwLCA4MywgNywgNTEsIDAsIDgsIDExOCwgMCwgOCwgNTQsIDAsIDksIDIwNCwgODEsIDcsIDE1LCAwLCA4LCAxMDIsIDAsIDgsIDM4LCAwLCA5LCAxNzIsIDAsIDgsIDYsIDAsIDgsIDEzNCwgMCxcblx0OCwgNzAsIDAsIDksIDIzNiwgODAsIDcsIDksIDAsIDgsIDk0LCAwLCA4LCAzMCwgMCwgOSwgMTU2LCA4NCwgNywgOTksIDAsIDgsIDEyNiwgMCwgOCwgNjIsIDAsIDksIDIyMCwgODIsIDcsIDI3LCAwLCA4LCAxMTAsIDAsIDgsIDQ2LCAwLCA5LCAxODgsIDAsXG5cdDgsIDE0LCAwLCA4LCAxNDIsIDAsIDgsIDc4LCAwLCA5LCAyNTIsIDk2LCA3LCAyNTYsIDAsIDgsIDgxLCAwLCA4LCAxNywgODUsIDgsIDEzMSwgODIsIDcsIDMxLCAwLCA4LCAxMTMsIDAsIDgsIDQ5LCAwLCA5LCAxOTQsIDgwLCA3LCAxMCwgMCwgOCwgOTcsXG5cdDAsIDgsIDMzLCAwLCA5LCAxNjIsIDAsIDgsIDEsIDAsIDgsIDEyOSwgMCwgOCwgNjUsIDAsIDksIDIyNiwgODAsIDcsIDYsIDAsIDgsIDg5LCAwLCA4LCAyNSwgMCwgOSwgMTQ2LCA4MywgNywgNTksIDAsIDgsIDEyMSwgMCwgOCwgNTcsIDAsIDksIDIxMCxcblx0ODEsIDcsIDE3LCAwLCA4LCAxMDUsIDAsIDgsIDQxLCAwLCA5LCAxNzgsIDAsIDgsIDksIDAsIDgsIDEzNywgMCwgOCwgNzMsIDAsIDksIDI0MiwgODAsIDcsIDQsIDAsIDgsIDg1LCAwLCA4LCAyMSwgODAsIDgsIDI1OCwgODMsIDcsIDQzLCAwLCA4LCAxMTcsXG5cdDAsIDgsIDUzLCAwLCA5LCAyMDIsIDgxLCA3LCAxMywgMCwgOCwgMTAxLCAwLCA4LCAzNywgMCwgOSwgMTcwLCAwLCA4LCA1LCAwLCA4LCAxMzMsIDAsIDgsIDY5LCAwLCA5LCAyMzQsIDgwLCA3LCA4LCAwLCA4LCA5MywgMCwgOCwgMjksIDAsIDksIDE1NCxcblx0ODQsIDcsIDgzLCAwLCA4LCAxMjUsIDAsIDgsIDYxLCAwLCA5LCAyMTgsIDgyLCA3LCAyMywgMCwgOCwgMTA5LCAwLCA4LCA0NSwgMCwgOSwgMTg2LCAwLCA4LCAxMywgMCwgOCwgMTQxLCAwLCA4LCA3NywgMCwgOSwgMjUwLCA4MCwgNywgMywgMCwgOCwgODMsXG5cdDAsIDgsIDE5LCA4NSwgOCwgMTk1LCA4MywgNywgMzUsIDAsIDgsIDExNSwgMCwgOCwgNTEsIDAsIDksIDE5OCwgODEsIDcsIDExLCAwLCA4LCA5OSwgMCwgOCwgMzUsIDAsIDksIDE2NiwgMCwgOCwgMywgMCwgOCwgMTMxLCAwLCA4LCA2NywgMCwgOSwgMjMwLFxuXHQ4MCwgNywgNywgMCwgOCwgOTEsIDAsIDgsIDI3LCAwLCA5LCAxNTAsIDg0LCA3LCA2NywgMCwgOCwgMTIzLCAwLCA4LCA1OSwgMCwgOSwgMjE0LCA4MiwgNywgMTksIDAsIDgsIDEwNywgMCwgOCwgNDMsIDAsIDksIDE4MiwgMCwgOCwgMTEsIDAsIDgsIDEzOSxcblx0MCwgOCwgNzUsIDAsIDksIDI0NiwgODAsIDcsIDUsIDAsIDgsIDg3LCAwLCA4LCAyMywgMTkyLCA4LCAwLCA4MywgNywgNTEsIDAsIDgsIDExOSwgMCwgOCwgNTUsIDAsIDksIDIwNiwgODEsIDcsIDE1LCAwLCA4LCAxMDMsIDAsIDgsIDM5LCAwLCA5LCAxNzQsXG5cdDAsIDgsIDcsIDAsIDgsIDEzNSwgMCwgOCwgNzEsIDAsIDksIDIzOCwgODAsIDcsIDksIDAsIDgsIDk1LCAwLCA4LCAzMSwgMCwgOSwgMTU4LCA4NCwgNywgOTksIDAsIDgsIDEyNywgMCwgOCwgNjMsIDAsIDksIDIyMiwgODIsIDcsIDI3LCAwLCA4LCAxMTEsXG5cdDAsIDgsIDQ3LCAwLCA5LCAxOTAsIDAsIDgsIDE1LCAwLCA4LCAxNDMsIDAsIDgsIDc5LCAwLCA5LCAyNTQsIDk2LCA3LCAyNTYsIDAsIDgsIDgwLCAwLCA4LCAxNiwgODQsIDgsIDExNSwgODIsIDcsIDMxLCAwLCA4LCAxMTIsIDAsIDgsIDQ4LCAwLCA5LFxuXHQxOTMsIDgwLCA3LCAxMCwgMCwgOCwgOTYsIDAsIDgsIDMyLCAwLCA5LCAxNjEsIDAsIDgsIDAsIDAsIDgsIDEyOCwgMCwgOCwgNjQsIDAsIDksIDIyNSwgODAsIDcsIDYsIDAsIDgsIDg4LCAwLCA4LCAyNCwgMCwgOSwgMTQ1LCA4MywgNywgNTksIDAsIDgsXG5cdDEyMCwgMCwgOCwgNTYsIDAsIDksIDIwOSwgODEsIDcsIDE3LCAwLCA4LCAxMDQsIDAsIDgsIDQwLCAwLCA5LCAxNzcsIDAsIDgsIDgsIDAsIDgsIDEzNiwgMCwgOCwgNzIsIDAsIDksIDI0MSwgODAsIDcsIDQsIDAsIDgsIDg0LCAwLCA4LCAyMCwgODUsIDgsXG5cdDIyNywgODMsIDcsIDQzLCAwLCA4LCAxMTYsIDAsIDgsIDUyLCAwLCA5LCAyMDEsIDgxLCA3LCAxMywgMCwgOCwgMTAwLCAwLCA4LCAzNiwgMCwgOSwgMTY5LCAwLCA4LCA0LCAwLCA4LCAxMzIsIDAsIDgsIDY4LCAwLCA5LCAyMzMsIDgwLCA3LCA4LCAwLCA4LFxuXHQ5MiwgMCwgOCwgMjgsIDAsIDksIDE1MywgODQsIDcsIDgzLCAwLCA4LCAxMjQsIDAsIDgsIDYwLCAwLCA5LCAyMTcsIDgyLCA3LCAyMywgMCwgOCwgMTA4LCAwLCA4LCA0NCwgMCwgOSwgMTg1LCAwLCA4LCAxMiwgMCwgOCwgMTQwLCAwLCA4LCA3NiwgMCwgOSxcblx0MjQ5LCA4MCwgNywgMywgMCwgOCwgODIsIDAsIDgsIDE4LCA4NSwgOCwgMTYzLCA4MywgNywgMzUsIDAsIDgsIDExNCwgMCwgOCwgNTAsIDAsIDksIDE5NywgODEsIDcsIDExLCAwLCA4LCA5OCwgMCwgOCwgMzQsIDAsIDksIDE2NSwgMCwgOCwgMiwgMCwgOCxcblx0MTMwLCAwLCA4LCA2NiwgMCwgOSwgMjI5LCA4MCwgNywgNywgMCwgOCwgOTAsIDAsIDgsIDI2LCAwLCA5LCAxNDksIDg0LCA3LCA2NywgMCwgOCwgMTIyLCAwLCA4LCA1OCwgMCwgOSwgMjEzLCA4MiwgNywgMTksIDAsIDgsIDEwNiwgMCwgOCwgNDIsIDAsIDksXG5cdDE4MSwgMCwgOCwgMTAsIDAsIDgsIDEzOCwgMCwgOCwgNzQsIDAsIDksIDI0NSwgODAsIDcsIDUsIDAsIDgsIDg2LCAwLCA4LCAyMiwgMTkyLCA4LCAwLCA4MywgNywgNTEsIDAsIDgsIDExOCwgMCwgOCwgNTQsIDAsIDksIDIwNSwgODEsIDcsIDE1LCAwLCA4LFxuXHQxMDIsIDAsIDgsIDM4LCAwLCA5LCAxNzMsIDAsIDgsIDYsIDAsIDgsIDEzNCwgMCwgOCwgNzAsIDAsIDksIDIzNywgODAsIDcsIDksIDAsIDgsIDk0LCAwLCA4LCAzMCwgMCwgOSwgMTU3LCA4NCwgNywgOTksIDAsIDgsIDEyNiwgMCwgOCwgNjIsIDAsIDksXG5cdDIyMSwgODIsIDcsIDI3LCAwLCA4LCAxMTAsIDAsIDgsIDQ2LCAwLCA5LCAxODksIDAsIDgsIDE0LCAwLCA4LCAxNDIsIDAsIDgsIDc4LCAwLCA5LCAyNTMsIDk2LCA3LCAyNTYsIDAsIDgsIDgxLCAwLCA4LCAxNywgODUsIDgsIDEzMSwgODIsIDcsIDMxLCAwLFxuXHQ4LCAxMTMsIDAsIDgsIDQ5LCAwLCA5LCAxOTUsIDgwLCA3LCAxMCwgMCwgOCwgOTcsIDAsIDgsIDMzLCAwLCA5LCAxNjMsIDAsIDgsIDEsIDAsIDgsIDEyOSwgMCwgOCwgNjUsIDAsIDksIDIyNywgODAsIDcsIDYsIDAsIDgsIDg5LCAwLCA4LCAyNSwgMCwgOSxcblx0MTQ3LCA4MywgNywgNTksIDAsIDgsIDEyMSwgMCwgOCwgNTcsIDAsIDksIDIxMSwgODEsIDcsIDE3LCAwLCA4LCAxMDUsIDAsIDgsIDQxLCAwLCA5LCAxNzksIDAsIDgsIDksIDAsIDgsIDEzNywgMCwgOCwgNzMsIDAsIDksIDI0MywgODAsIDcsIDQsIDAsIDgsXG5cdDg1LCAwLCA4LCAyMSwgODAsIDgsIDI1OCwgODMsIDcsIDQzLCAwLCA4LCAxMTcsIDAsIDgsIDUzLCAwLCA5LCAyMDMsIDgxLCA3LCAxMywgMCwgOCwgMTAxLCAwLCA4LCAzNywgMCwgOSwgMTcxLCAwLCA4LCA1LCAwLCA4LCAxMzMsIDAsIDgsIDY5LCAwLCA5LFxuXHQyMzUsIDgwLCA3LCA4LCAwLCA4LCA5MywgMCwgOCwgMjksIDAsIDksIDE1NSwgODQsIDcsIDgzLCAwLCA4LCAxMjUsIDAsIDgsIDYxLCAwLCA5LCAyMTksIDgyLCA3LCAyMywgMCwgOCwgMTA5LCAwLCA4LCA0NSwgMCwgOSwgMTg3LCAwLCA4LCAxMywgMCwgOCxcblx0MTQxLCAwLCA4LCA3NywgMCwgOSwgMjUxLCA4MCwgNywgMywgMCwgOCwgODMsIDAsIDgsIDE5LCA4NSwgOCwgMTk1LCA4MywgNywgMzUsIDAsIDgsIDExNSwgMCwgOCwgNTEsIDAsIDksIDE5OSwgODEsIDcsIDExLCAwLCA4LCA5OSwgMCwgOCwgMzUsIDAsIDksXG5cdDE2NywgMCwgOCwgMywgMCwgOCwgMTMxLCAwLCA4LCA2NywgMCwgOSwgMjMxLCA4MCwgNywgNywgMCwgOCwgOTEsIDAsIDgsIDI3LCAwLCA5LCAxNTEsIDg0LCA3LCA2NywgMCwgOCwgMTIzLCAwLCA4LCA1OSwgMCwgOSwgMjE1LCA4MiwgNywgMTksIDAsIDgsXG5cdDEwNywgMCwgOCwgNDMsIDAsIDksIDE4MywgMCwgOCwgMTEsIDAsIDgsIDEzOSwgMCwgOCwgNzUsIDAsIDksIDI0NywgODAsIDcsIDUsIDAsIDgsIDg3LCAwLCA4LCAyMywgMTkyLCA4LCAwLCA4MywgNywgNTEsIDAsIDgsIDExOSwgMCwgOCwgNTUsIDAsIDksXG5cdDIwNywgODEsIDcsIDE1LCAwLCA4LCAxMDMsIDAsIDgsIDM5LCAwLCA5LCAxNzUsIDAsIDgsIDcsIDAsIDgsIDEzNSwgMCwgOCwgNzEsIDAsIDksIDIzOSwgODAsIDcsIDksIDAsIDgsIDk1LCAwLCA4LCAzMSwgMCwgOSwgMTU5LCA4NCwgNywgOTksIDAsIDgsXG5cdDEyNywgMCwgOCwgNjMsIDAsIDksIDIyMywgODIsIDcsIDI3LCAwLCA4LCAxMTEsIDAsIDgsIDQ3LCAwLCA5LCAxOTEsIDAsIDgsIDE1LCAwLCA4LCAxNDMsIDAsIDgsIDc5LCAwLCA5LCAyNTVdO1xuY29uc3QgZml4ZWRfdGQgPSBbODAsIDUsIDEsIDg3LCA1LCAyNTcsIDgzLCA1LCAxNywgOTEsIDUsIDQwOTcsIDgxLCA1LCA1LCA4OSwgNSwgMTAyNSwgODUsIDUsIDY1LCA5MywgNSwgMTYzODUsIDgwLCA1LCAzLCA4OCwgNSwgNTEzLCA4NCwgNSwgMzMsIDkyLCA1LFxuXHQ4MTkzLCA4MiwgNSwgOSwgOTAsIDUsIDIwNDksIDg2LCA1LCAxMjksIDE5MiwgNSwgMjQ1NzcsIDgwLCA1LCAyLCA4NywgNSwgMzg1LCA4MywgNSwgMjUsIDkxLCA1LCA2MTQ1LCA4MSwgNSwgNywgODksIDUsIDE1MzcsIDg1LCA1LCA5NywgOTMsIDUsXG5cdDI0NTc3LCA4MCwgNSwgNCwgODgsIDUsIDc2OSwgODQsIDUsIDQ5LCA5MiwgNSwgMTIyODksIDgyLCA1LCAxMywgOTAsIDUsIDMwNzMsIDg2LCA1LCAxOTMsIDE5MiwgNSwgMjQ1NzddO1xuXG4vLyBUYWJsZXMgZm9yIGRlZmxhdGUgZnJvbSBQS1pJUCdzIGFwcG5vdGUudHh0LlxuY29uc3QgY3BsZW5zID0gWyAvLyBDb3B5IGxlbmd0aHMgZm9yIGxpdGVyYWwgY29kZXMgMjU3Li4yODVcblx0MywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMywgMTUsIDE3LCAxOSwgMjMsIDI3LCAzMSwgMzUsIDQzLCA1MSwgNTksIDY3LCA4MywgOTksIDExNSwgMTMxLCAxNjMsIDE5NSwgMjI3LCAyNTgsIDAsIDBdO1xuXG4vLyBzZWUgbm90ZSAjMTMgYWJvdmUgYWJvdXQgMjU4XG5jb25zdCBjcGxleHQgPSBbIC8vIEV4dHJhIGJpdHMgZm9yIGxpdGVyYWwgY29kZXMgMjU3Li4yODVcblx0MCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMSwgMSwgMSwgMiwgMiwgMiwgMiwgMywgMywgMywgMywgNCwgNCwgNCwgNCwgNSwgNSwgNSwgNSwgMCwgMTEyLCAxMTIgLy8gMTEyPT1pbnZhbGlkXG5dO1xuXG5jb25zdCBjcGRpc3QgPSBbIC8vIENvcHkgb2Zmc2V0cyBmb3IgZGlzdGFuY2UgY29kZXMgMC4uMjlcblx0MSwgMiwgMywgNCwgNSwgNywgOSwgMTMsIDE3LCAyNSwgMzMsIDQ5LCA2NSwgOTcsIDEyOSwgMTkzLCAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsIDgxOTMsIDEyMjg5LCAxNjM4NSwgMjQ1NzddO1xuXG5jb25zdCBjcGRleHQgPSBbIC8vIEV4dHJhIGJpdHMgZm9yIGRpc3RhbmNlIGNvZGVzXG5cdDAsIDAsIDAsIDAsIDEsIDEsIDIsIDIsIDMsIDMsIDQsIDQsIDUsIDUsIDYsIDYsIDcsIDcsIDgsIDgsIDksIDksIDEwLCAxMCwgMTEsIDExLCAxMiwgMTIsIDEzLCAxM107XG5cbi8vIElmIEJNQVggbmVlZHMgdG8gYmUgbGFyZ2VyIHRoYW4gMTYsIHRoZW4gaCBhbmQgeFtdIHNob3VsZCBiZSB1TG9uZy5cbmNvbnN0IEJNQVggPSAxNTsgLy8gbWF4aW11bSBiaXQgbGVuZ3RoIG9mIGFueSBjb2RlXG5cbmZ1bmN0aW9uIEluZlRyZWUoKSB7XG5cdGNvbnN0IHRoYXQgPSB0aGlzO1xuXG5cdGxldCBobjsgLy8gaHVmdHMgdXNlZCBpbiBzcGFjZVxuXHRsZXQgdjsgLy8gd29yayBhcmVhIGZvciBodWZ0X2J1aWxkXG5cdGxldCBjOyAvLyBiaXQgbGVuZ3RoIGNvdW50IHRhYmxlXG5cdGxldCByOyAvLyB0YWJsZSBlbnRyeSBmb3Igc3RydWN0dXJlIGFzc2lnbm1lbnRcblx0bGV0IHU7IC8vIHRhYmxlIHN0YWNrXG5cdGxldCB4OyAvLyBiaXQgb2Zmc2V0cywgdGhlbiBjb2RlIHN0YWNrXG5cblx0ZnVuY3Rpb24gaHVmdF9idWlsZChiLCAvLyBjb2RlIGxlbmd0aHMgaW4gYml0cyAoYWxsIGFzc3VtZWQgPD1cblx0XHQvLyBCTUFYKVxuXHRcdGJpbmRleCwgbiwgLy8gbnVtYmVyIG9mIGNvZGVzIChhc3N1bWVkIDw9IDI4OClcblx0XHRzLCAvLyBudW1iZXIgb2Ygc2ltcGxlLXZhbHVlZCBjb2RlcyAoMC4ucy0xKVxuXHRcdGQsIC8vIGxpc3Qgb2YgYmFzZSB2YWx1ZXMgZm9yIG5vbi1zaW1wbGUgY29kZXNcblx0XHRlLCAvLyBsaXN0IG9mIGV4dHJhIGJpdHMgZm9yIG5vbi1zaW1wbGUgY29kZXNcblx0XHR0LCAvLyByZXN1bHQ6IHN0YXJ0aW5nIHRhYmxlXG5cdFx0bSwgLy8gbWF4aW11bSBsb29rdXAgYml0cywgcmV0dXJucyBhY3R1YWxcblx0XHRocCwvLyBzcGFjZSBmb3IgdHJlZXNcblx0XHRobiwvLyBodWZ0cyB1c2VkIGluIHNwYWNlXG5cdFx0diAvLyB3b3JraW5nIGFyZWE6IHZhbHVlcyBpbiBvcmRlciBvZiBiaXQgbGVuZ3RoXG5cdCkge1xuXHRcdC8vIEdpdmVuIGEgbGlzdCBvZiBjb2RlIGxlbmd0aHMgYW5kIGEgbWF4aW11bSB0YWJsZSBzaXplLCBtYWtlIGEgc2V0IG9mXG5cdFx0Ly8gdGFibGVzIHRvIGRlY29kZSB0aGF0IHNldCBvZiBjb2Rlcy4gUmV0dXJuIFpfT0sgb24gc3VjY2Vzcyxcblx0XHQvLyBaX0JVRl9FUlJPUlxuXHRcdC8vIGlmIHRoZSBnaXZlbiBjb2RlIHNldCBpcyBpbmNvbXBsZXRlICh0aGUgdGFibGVzIGFyZSBzdGlsbCBidWlsdCBpblxuXHRcdC8vIHRoaXNcblx0XHQvLyBjYXNlKSwgWl9EQVRBX0VSUk9SIGlmIHRoZSBpbnB1dCBpcyBpbnZhbGlkIChhbiBvdmVyLXN1YnNjcmliZWQgc2V0XG5cdFx0Ly8gb2Zcblx0XHQvLyBsZW5ndGhzKSwgb3IgWl9NRU1fRVJST1IgaWYgbm90IGVub3VnaCBtZW1vcnkuXG5cblx0XHRsZXQgYTsgLy8gY291bnRlciBmb3IgY29kZXMgb2YgbGVuZ3RoIGtcblx0XHRsZXQgZjsgLy8gaSByZXBlYXRzIGluIHRhYmxlIGV2ZXJ5IGYgZW50cmllc1xuXHRcdGxldCBnOyAvLyBtYXhpbXVtIGNvZGUgbGVuZ3RoXG5cdFx0bGV0IGg7IC8vIHRhYmxlIGxldmVsXG5cdFx0bGV0IGk7IC8vIGNvdW50ZXIsIGN1cnJlbnQgY29kZVxuXHRcdGxldCBqOyAvLyBjb3VudGVyXG5cdFx0bGV0IGs7IC8vIG51bWJlciBvZiBiaXRzIGluIGN1cnJlbnQgY29kZVxuXHRcdGxldCBsOyAvLyBiaXRzIHBlciB0YWJsZSAocmV0dXJuZWQgaW4gbSlcblx0XHRsZXQgbWFzazsgLy8gKDEgPDwgdykgLSAxLCB0byBhdm9pZCBjYyAtTyBidWcgb24gSFBcblx0XHRsZXQgcDsgLy8gcG9pbnRlciBpbnRvIGNbXSwgYltdLCBvciB2W11cblx0XHRsZXQgcTsgLy8gcG9pbnRzIHRvIGN1cnJlbnQgdGFibGVcblx0XHRsZXQgdzsgLy8gYml0cyBiZWZvcmUgdGhpcyB0YWJsZSA9PSAobCAqIGgpXG5cdFx0bGV0IHhwOyAvLyBwb2ludGVyIGludG8geFxuXHRcdGxldCB5OyAvLyBudW1iZXIgb2YgZHVtbXkgY29kZXMgYWRkZWRcblx0XHRsZXQgejsgLy8gbnVtYmVyIG9mIGVudHJpZXMgaW4gY3VycmVudCB0YWJsZVxuXG5cdFx0Ly8gR2VuZXJhdGUgY291bnRzIGZvciBlYWNoIGJpdCBsZW5ndGhcblxuXHRcdHAgPSAwO1xuXHRcdGkgPSBuO1xuXHRcdGRvIHtcblx0XHRcdGNbYltiaW5kZXggKyBwXV0rKztcblx0XHRcdHArKztcblx0XHRcdGktLTsgLy8gYXNzdW1lIGFsbCBlbnRyaWVzIDw9IEJNQVhcblx0XHR9IHdoaWxlIChpICE9PSAwKTtcblxuXHRcdGlmIChjWzBdID09IG4pIHsgLy8gbnVsbCBpbnB1dC0tYWxsIHplcm8gbGVuZ3RoIGNvZGVzXG5cdFx0XHR0WzBdID0gLTE7XG5cdFx0XHRtWzBdID0gMDtcblx0XHRcdHJldHVybiBaX09LO1xuXHRcdH1cblxuXHRcdC8vIEZpbmQgbWluaW11bSBhbmQgbWF4aW11bSBsZW5ndGgsIGJvdW5kICptIGJ5IHRob3NlXG5cdFx0bCA9IG1bMF07XG5cdFx0Zm9yIChqID0gMTsgaiA8PSBCTUFYOyBqKyspXG5cdFx0XHRpZiAoY1tqXSAhPT0gMClcblx0XHRcdFx0YnJlYWs7XG5cdFx0ayA9IGo7IC8vIG1pbmltdW0gY29kZSBsZW5ndGhcblx0XHRpZiAobCA8IGopIHtcblx0XHRcdGwgPSBqO1xuXHRcdH1cblx0XHRmb3IgKGkgPSBCTUFYOyBpICE9PSAwOyBpLS0pIHtcblx0XHRcdGlmIChjW2ldICE9PSAwKVxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0ZyA9IGk7IC8vIG1heGltdW0gY29kZSBsZW5ndGhcblx0XHRpZiAobCA+IGkpIHtcblx0XHRcdGwgPSBpO1xuXHRcdH1cblx0XHRtWzBdID0gbDtcblxuXHRcdC8vIEFkanVzdCBsYXN0IGxlbmd0aCBjb3VudCB0byBmaWxsIG91dCBjb2RlcywgaWYgbmVlZGVkXG5cdFx0Zm9yICh5ID0gMSA8PCBqOyBqIDwgaTsgaisrLCB5IDw8PSAxKSB7XG5cdFx0XHRpZiAoKHkgLT0gY1tqXSkgPCAwKSB7XG5cdFx0XHRcdHJldHVybiBaX0RBVEFfRVJST1I7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICgoeSAtPSBjW2ldKSA8IDApIHtcblx0XHRcdHJldHVybiBaX0RBVEFfRVJST1I7XG5cdFx0fVxuXHRcdGNbaV0gKz0geTtcblxuXHRcdC8vIEdlbmVyYXRlIHN0YXJ0aW5nIG9mZnNldHMgaW50byB0aGUgdmFsdWUgdGFibGUgZm9yIGVhY2ggbGVuZ3RoXG5cdFx0eFsxXSA9IGogPSAwO1xuXHRcdHAgPSAxO1xuXHRcdHhwID0gMjtcblx0XHR3aGlsZSAoLS1pICE9PSAwKSB7IC8vIG5vdGUgdGhhdCBpID09IGcgZnJvbSBhYm92ZVxuXHRcdFx0eFt4cF0gPSAoaiArPSBjW3BdKTtcblx0XHRcdHhwKys7XG5cdFx0XHRwKys7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBhIHRhYmxlIG9mIHZhbHVlcyBpbiBvcmRlciBvZiBiaXQgbGVuZ3Roc1xuXHRcdGkgPSAwO1xuXHRcdHAgPSAwO1xuXHRcdGRvIHtcblx0XHRcdGlmICgoaiA9IGJbYmluZGV4ICsgcF0pICE9PSAwKSB7XG5cdFx0XHRcdHZbeFtqXSsrXSA9IGk7XG5cdFx0XHR9XG5cdFx0XHRwKys7XG5cdFx0fSB3aGlsZSAoKytpIDwgbik7XG5cdFx0biA9IHhbZ107IC8vIHNldCBuIHRvIGxlbmd0aCBvZiB2XG5cblx0XHQvLyBHZW5lcmF0ZSB0aGUgSHVmZm1hbiBjb2RlcyBhbmQgZm9yIGVhY2gsIG1ha2UgdGhlIHRhYmxlIGVudHJpZXNcblx0XHR4WzBdID0gaSA9IDA7IC8vIGZpcnN0IEh1ZmZtYW4gY29kZSBpcyB6ZXJvXG5cdFx0cCA9IDA7IC8vIGdyYWIgdmFsdWVzIGluIGJpdCBvcmRlclxuXHRcdGggPSAtMTsgLy8gbm8gdGFibGVzIHlldC0tbGV2ZWwgLTFcblx0XHR3ID0gLWw7IC8vIGJpdHMgZGVjb2RlZCA9PSAobCAqIGgpXG5cdFx0dVswXSA9IDA7IC8vIGp1c3QgdG8ga2VlcCBjb21waWxlcnMgaGFwcHlcblx0XHRxID0gMDsgLy8gZGl0dG9cblx0XHR6ID0gMDsgLy8gZGl0dG9cblxuXHRcdC8vIGdvIHRocm91Z2ggdGhlIGJpdCBsZW5ndGhzIChrIGFscmVhZHkgaXMgYml0cyBpbiBzaG9ydGVzdCBjb2RlKVxuXHRcdGZvciAoOyBrIDw9IGc7IGsrKykge1xuXHRcdFx0YSA9IGNba107XG5cdFx0XHR3aGlsZSAoYS0tICE9PSAwKSB7XG5cdFx0XHRcdC8vIGhlcmUgaSBpcyB0aGUgSHVmZm1hbiBjb2RlIG9mIGxlbmd0aCBrIGJpdHMgZm9yIHZhbHVlICpwXG5cdFx0XHRcdC8vIG1ha2UgdGFibGVzIHVwIHRvIHJlcXVpcmVkIGxldmVsXG5cdFx0XHRcdHdoaWxlIChrID4gdyArIGwpIHtcblx0XHRcdFx0XHRoKys7XG5cdFx0XHRcdFx0dyArPSBsOyAvLyBwcmV2aW91cyB0YWJsZSBhbHdheXMgbCBiaXRzXG5cdFx0XHRcdFx0Ly8gY29tcHV0ZSBtaW5pbXVtIHNpemUgdGFibGUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGwgYml0c1xuXHRcdFx0XHRcdHogPSBnIC0gdztcblx0XHRcdFx0XHR6ID0gKHogPiBsKSA/IGwgOiB6OyAvLyB0YWJsZSBzaXplIHVwcGVyIGxpbWl0XG5cdFx0XHRcdFx0aWYgKChmID0gMSA8PCAoaiA9IGsgLSB3KSkgPiBhICsgMSkgeyAvLyB0cnkgYSBrLXcgYml0IHRhYmxlXG5cdFx0XHRcdFx0XHQvLyB0b28gZmV3IGNvZGVzIGZvclxuXHRcdFx0XHRcdFx0Ly8gay13IGJpdCB0YWJsZVxuXHRcdFx0XHRcdFx0ZiAtPSBhICsgMTsgLy8gZGVkdWN0IGNvZGVzIGZyb20gcGF0dGVybnMgbGVmdFxuXHRcdFx0XHRcdFx0eHAgPSBrO1xuXHRcdFx0XHRcdFx0aWYgKGogPCB6KSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICgrK2ogPCB6KSB7IC8vIHRyeSBzbWFsbGVyIHRhYmxlcyB1cCB0byB6IGJpdHNcblx0XHRcdFx0XHRcdFx0XHRpZiAoKGYgPDw9IDEpIDw9IGNbKyt4cF0pXG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhazsgLy8gZW5vdWdoIGNvZGVzIHRvIHVzZSB1cCBqIGJpdHNcblx0XHRcdFx0XHRcdFx0XHRmIC09IGNbeHBdOyAvLyBlbHNlIGRlZHVjdCBjb2RlcyBmcm9tIHBhdHRlcm5zXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0eiA9IDEgPDwgajsgLy8gdGFibGUgZW50cmllcyBmb3Igai1iaXQgdGFibGVcblxuXHRcdFx0XHRcdC8vIGFsbG9jYXRlIG5ldyB0YWJsZVxuXHRcdFx0XHRcdGlmIChoblswXSArIHogPiBNQU5ZKSB7IC8vIChub3RlOiBkb2Vzbid0IG1hdHRlciBmb3IgZml4ZWQpXG5cdFx0XHRcdFx0XHRyZXR1cm4gWl9EQVRBX0VSUk9SOyAvLyBvdmVyZmxvdyBvZiBNQU5ZXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHVbaF0gPSBxID0gLyogaHArICovaG5bMF07IC8vIERFQlVHXG5cdFx0XHRcdFx0aG5bMF0gKz0gejtcblxuXHRcdFx0XHRcdC8vIGNvbm5lY3QgdG8gbGFzdCB0YWJsZSwgaWYgdGhlcmUgaXMgb25lXG5cdFx0XHRcdFx0aWYgKGggIT09IDApIHtcblx0XHRcdFx0XHRcdHhbaF0gPSBpOyAvLyBzYXZlIHBhdHRlcm4gZm9yIGJhY2tpbmcgdXBcblx0XHRcdFx0XHRcdHJbMF0gPSAvKiAoYnl0ZSkgKi9qOyAvLyBiaXRzIGluIHRoaXMgdGFibGVcblx0XHRcdFx0XHRcdHJbMV0gPSAvKiAoYnl0ZSkgKi9sOyAvLyBiaXRzIHRvIGR1bXAgYmVmb3JlIHRoaXMgdGFibGVcblx0XHRcdFx0XHRcdGogPSBpID4+PiAodyAtIGwpO1xuXHRcdFx0XHRcdFx0clsyXSA9IC8qIChpbnQpICovKHEgLSB1W2ggLSAxXSAtIGopOyAvLyBvZmZzZXQgdG8gdGhpcyB0YWJsZVxuXHRcdFx0XHRcdFx0aHAuc2V0KHIsICh1W2ggLSAxXSArIGopICogMyk7XG5cdFx0XHRcdFx0XHQvLyB0b1xuXHRcdFx0XHRcdFx0Ly8gbGFzdFxuXHRcdFx0XHRcdFx0Ly8gdGFibGVcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dFswXSA9IHE7IC8vIGZpcnN0IHRhYmxlIGlzIHJldHVybmVkIHJlc3VsdFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHNldCB1cCB0YWJsZSBlbnRyeSBpbiByXG5cdFx0XHRcdHJbMV0gPSAvKiAoYnl0ZSkgKi8oayAtIHcpO1xuXHRcdFx0XHRpZiAocCA+PSBuKSB7XG5cdFx0XHRcdFx0clswXSA9IDEyOCArIDY0OyAvLyBvdXQgb2YgdmFsdWVzLS1pbnZhbGlkIGNvZGVcblx0XHRcdFx0fSBlbHNlIGlmICh2W3BdIDwgcykge1xuXHRcdFx0XHRcdHJbMF0gPSAvKiAoYnl0ZSkgKi8odltwXSA8IDI1NiA/IDAgOiAzMiArIDY0KTsgLy8gMjU2IGlzXG5cdFx0XHRcdFx0Ly8gZW5kLW9mLWJsb2NrXG5cdFx0XHRcdFx0clsyXSA9IHZbcCsrXTsgLy8gc2ltcGxlIGNvZGUgaXMganVzdCB0aGUgdmFsdWVcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyWzBdID0gLyogKGJ5dGUpICovKGVbdltwXSAtIHNdICsgMTYgKyA2NCk7IC8vIG5vbi1zaW1wbGUtLWxvb2tcblx0XHRcdFx0XHQvLyB1cCBpbiBsaXN0c1xuXHRcdFx0XHRcdHJbMl0gPSBkW3ZbcCsrXSAtIHNdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gZmlsbCBjb2RlLWxpa2UgZW50cmllcyB3aXRoIHJcblx0XHRcdFx0ZiA9IDEgPDwgKGsgLSB3KTtcblx0XHRcdFx0Zm9yIChqID0gaSA+Pj4gdzsgaiA8IHo7IGogKz0gZikge1xuXHRcdFx0XHRcdGhwLnNldChyLCAocSArIGopICogMyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBiYWNrd2FyZHMgaW5jcmVtZW50IHRoZSBrLWJpdCBjb2RlIGlcblx0XHRcdFx0Zm9yIChqID0gMSA8PCAoayAtIDEpOyAoaSAmIGopICE9PSAwOyBqID4+Pj0gMSkge1xuXHRcdFx0XHRcdGkgXj0gajtcblx0XHRcdFx0fVxuXHRcdFx0XHRpIF49IGo7XG5cblx0XHRcdFx0Ly8gYmFja3VwIG92ZXIgZmluaXNoZWQgdGFibGVzXG5cdFx0XHRcdG1hc2sgPSAoMSA8PCB3KSAtIDE7IC8vIG5lZWRlZCBvbiBIUCwgY2MgLU8gYnVnXG5cdFx0XHRcdHdoaWxlICgoaSAmIG1hc2spICE9IHhbaF0pIHtcblx0XHRcdFx0XHRoLS07IC8vIGRvbid0IG5lZWQgdG8gdXBkYXRlIHFcblx0XHRcdFx0XHR3IC09IGw7XG5cdFx0XHRcdFx0bWFzayA9ICgxIDw8IHcpIC0gMTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBSZXR1cm4gWl9CVUZfRVJST1IgaWYgd2Ugd2VyZSBnaXZlbiBhbiBpbmNvbXBsZXRlIHRhYmxlXG5cdFx0cmV0dXJuIHkgIT09IDAgJiYgZyAhPSAxID8gWl9CVUZfRVJST1IgOiBaX09LO1xuXHR9XG5cblx0ZnVuY3Rpb24gaW5pdFdvcmtBcmVhKHZzaXplKSB7XG5cdFx0bGV0IGk7XG5cdFx0aWYgKCFobikge1xuXHRcdFx0aG4gPSBbXTsgLy8gW107IC8vbmV3IEFycmF5KDEpO1xuXHRcdFx0diA9IFtdOyAvLyBuZXcgQXJyYXkodnNpemUpO1xuXHRcdFx0YyA9IG5ldyBJbnQzMkFycmF5KEJNQVggKyAxKTsgLy8gbmV3IEFycmF5KEJNQVggKyAxKTtcblx0XHRcdHIgPSBbXTsgLy8gbmV3IEFycmF5KDMpO1xuXHRcdFx0dSA9IG5ldyBJbnQzMkFycmF5KEJNQVgpOyAvLyBuZXcgQXJyYXkoQk1BWCk7XG5cdFx0XHR4ID0gbmV3IEludDMyQXJyYXkoQk1BWCArIDEpOyAvLyBuZXcgQXJyYXkoQk1BWCArIDEpO1xuXHRcdH1cblx0XHRpZiAodi5sZW5ndGggPCB2c2l6ZSkge1xuXHRcdFx0diA9IFtdOyAvLyBuZXcgQXJyYXkodnNpemUpO1xuXHRcdH1cblx0XHRmb3IgKGkgPSAwOyBpIDwgdnNpemU7IGkrKykge1xuXHRcdFx0dltpXSA9IDA7XG5cdFx0fVxuXHRcdGZvciAoaSA9IDA7IGkgPCBCTUFYICsgMTsgaSsrKSB7XG5cdFx0XHRjW2ldID0gMDtcblx0XHR9XG5cdFx0Zm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuXHRcdFx0cltpXSA9IDA7XG5cdFx0fVxuXHRcdC8vIGZvcihpbnQgaT0wOyBpPEJNQVg7IGkrKyl7dVtpXT0wO31cblx0XHR1LnNldChjLnN1YmFycmF5KDAsIEJNQVgpLCAwKTtcblx0XHQvLyBmb3IoaW50IGk9MDsgaTxCTUFYKzE7IGkrKyl7eFtpXT0wO31cblx0XHR4LnNldChjLnN1YmFycmF5KDAsIEJNQVggKyAxKSwgMCk7XG5cdH1cblxuXHR0aGF0LmluZmxhdGVfdHJlZXNfYml0cyA9IGZ1bmN0aW9uIChjLCAvLyAxOSBjb2RlIGxlbmd0aHNcblx0XHRiYiwgLy8gYml0cyB0cmVlIGRlc2lyZWQvYWN0dWFsIGRlcHRoXG5cdFx0dGIsIC8vIGJpdHMgdHJlZSByZXN1bHRcblx0XHRocCwgLy8gc3BhY2UgZm9yIHRyZWVzXG5cdFx0eiAvLyBmb3IgbWVzc2FnZXNcblx0KSB7XG5cdFx0bGV0IHJlc3VsdDtcblx0XHRpbml0V29ya0FyZWEoMTkpO1xuXHRcdGhuWzBdID0gMDtcblx0XHRyZXN1bHQgPSBodWZ0X2J1aWxkKGMsIDAsIDE5LCAxOSwgbnVsbCwgbnVsbCwgdGIsIGJiLCBocCwgaG4sIHYpO1xuXG5cdFx0aWYgKHJlc3VsdCA9PSBaX0RBVEFfRVJST1IpIHtcblx0XHRcdHoubXNnID0gXCJvdmVyc3Vic2NyaWJlZCBkeW5hbWljIGJpdCBsZW5ndGhzIHRyZWVcIjtcblx0XHR9IGVsc2UgaWYgKHJlc3VsdCA9PSBaX0JVRl9FUlJPUiB8fCBiYlswXSA9PT0gMCkge1xuXHRcdFx0ei5tc2cgPSBcImluY29tcGxldGUgZHluYW1pYyBiaXQgbGVuZ3RocyB0cmVlXCI7XG5cdFx0XHRyZXN1bHQgPSBaX0RBVEFfRVJST1I7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0dGhhdC5pbmZsYXRlX3RyZWVzX2R5bmFtaWMgPSBmdW5jdGlvbiAobmwsIC8vIG51bWJlciBvZiBsaXRlcmFsL2xlbmd0aCBjb2Rlc1xuXHRcdG5kLCAvLyBudW1iZXIgb2YgZGlzdGFuY2UgY29kZXNcblx0XHRjLCAvLyB0aGF0IG1hbnkgKHRvdGFsKSBjb2RlIGxlbmd0aHNcblx0XHRibCwgLy8gbGl0ZXJhbCBkZXNpcmVkL2FjdHVhbCBiaXQgZGVwdGhcblx0XHRiZCwgLy8gZGlzdGFuY2UgZGVzaXJlZC9hY3R1YWwgYml0IGRlcHRoXG5cdFx0dGwsIC8vIGxpdGVyYWwvbGVuZ3RoIHRyZWUgcmVzdWx0XG5cdFx0dGQsIC8vIGRpc3RhbmNlIHRyZWUgcmVzdWx0XG5cdFx0aHAsIC8vIHNwYWNlIGZvciB0cmVlc1xuXHRcdHogLy8gZm9yIG1lc3NhZ2VzXG5cdCkge1xuXHRcdGxldCByZXN1bHQ7XG5cblx0XHQvLyBidWlsZCBsaXRlcmFsL2xlbmd0aCB0cmVlXG5cdFx0aW5pdFdvcmtBcmVhKDI4OCk7XG5cdFx0aG5bMF0gPSAwO1xuXHRcdHJlc3VsdCA9IGh1ZnRfYnVpbGQoYywgMCwgbmwsIDI1NywgY3BsZW5zLCBjcGxleHQsIHRsLCBibCwgaHAsIGhuLCB2KTtcblx0XHRpZiAocmVzdWx0ICE9IFpfT0sgfHwgYmxbMF0gPT09IDApIHtcblx0XHRcdGlmIChyZXN1bHQgPT0gWl9EQVRBX0VSUk9SKSB7XG5cdFx0XHRcdHoubXNnID0gXCJvdmVyc3Vic2NyaWJlZCBsaXRlcmFsL2xlbmd0aCB0cmVlXCI7XG5cdFx0XHR9IGVsc2UgaWYgKHJlc3VsdCAhPSBaX01FTV9FUlJPUikge1xuXHRcdFx0XHR6Lm1zZyA9IFwiaW5jb21wbGV0ZSBsaXRlcmFsL2xlbmd0aCB0cmVlXCI7XG5cdFx0XHRcdHJlc3VsdCA9IFpfREFUQV9FUlJPUjtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXG5cdFx0Ly8gYnVpbGQgZGlzdGFuY2UgdHJlZVxuXHRcdGluaXRXb3JrQXJlYSgyODgpO1xuXHRcdHJlc3VsdCA9IGh1ZnRfYnVpbGQoYywgbmwsIG5kLCAwLCBjcGRpc3QsIGNwZGV4dCwgdGQsIGJkLCBocCwgaG4sIHYpO1xuXG5cdFx0aWYgKHJlc3VsdCAhPSBaX09LIHx8IChiZFswXSA9PT0gMCAmJiBubCA+IDI1NykpIHtcblx0XHRcdGlmIChyZXN1bHQgPT0gWl9EQVRBX0VSUk9SKSB7XG5cdFx0XHRcdHoubXNnID0gXCJvdmVyc3Vic2NyaWJlZCBkaXN0YW5jZSB0cmVlXCI7XG5cdFx0XHR9IGVsc2UgaWYgKHJlc3VsdCA9PSBaX0JVRl9FUlJPUikge1xuXHRcdFx0XHR6Lm1zZyA9IFwiaW5jb21wbGV0ZSBkaXN0YW5jZSB0cmVlXCI7XG5cdFx0XHRcdHJlc3VsdCA9IFpfREFUQV9FUlJPUjtcblx0XHRcdH0gZWxzZSBpZiAocmVzdWx0ICE9IFpfTUVNX0VSUk9SKSB7XG5cdFx0XHRcdHoubXNnID0gXCJlbXB0eSBkaXN0YW5jZSB0cmVlIHdpdGggbGVuZ3Roc1wiO1xuXHRcdFx0XHRyZXN1bHQgPSBaX0RBVEFfRVJST1I7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblxuXHRcdHJldHVybiBaX09LO1xuXHR9O1xuXG59XG5cbkluZlRyZWUuaW5mbGF0ZV90cmVlc19maXhlZCA9IGZ1bmN0aW9uIChibCwgLy8gbGl0ZXJhbCBkZXNpcmVkL2FjdHVhbCBiaXQgZGVwdGhcblx0YmQsIC8vIGRpc3RhbmNlIGRlc2lyZWQvYWN0dWFsIGJpdCBkZXB0aFxuXHR0bCwvLyBsaXRlcmFsL2xlbmd0aCB0cmVlIHJlc3VsdFxuXHR0ZC8vIGRpc3RhbmNlIHRyZWUgcmVzdWx0XG4pIHtcblx0YmxbMF0gPSBmaXhlZF9ibDtcblx0YmRbMF0gPSBmaXhlZF9iZDtcblx0dGxbMF0gPSBmaXhlZF90bDtcblx0dGRbMF0gPSBmaXhlZF90ZDtcblx0cmV0dXJuIFpfT0s7XG59O1xuXG4vLyBJbmZDb2Rlc1xuXG4vLyB3YWl0aW5nIGZvciBcImk6XCI9aW5wdXQsXG4vLyBcIm86XCI9b3V0cHV0LFxuLy8gXCJ4OlwiPW5vdGhpbmdcbmNvbnN0IFNUQVJUID0gMDsgLy8geDogc2V0IHVwIGZvciBMRU5cbmNvbnN0IExFTiA9IDE7IC8vIGk6IGdldCBsZW5ndGgvbGl0ZXJhbC9lb2IgbmV4dFxuY29uc3QgTEVORVhUID0gMjsgLy8gaTogZ2V0dGluZyBsZW5ndGggZXh0cmEgKGhhdmUgYmFzZSlcbmNvbnN0IERJU1QgPSAzOyAvLyBpOiBnZXQgZGlzdGFuY2UgbmV4dFxuY29uc3QgRElTVEVYVCA9IDQ7Ly8gaTogZ2V0dGluZyBkaXN0YW5jZSBleHRyYVxuY29uc3QgQ09QWSA9IDU7IC8vIG86IGNvcHlpbmcgYnl0ZXMgaW4gd2luLCB3YWl0aW5nXG4vLyBmb3Igc3BhY2VcbmNvbnN0IExJVCA9IDY7IC8vIG86IGdvdCBsaXRlcmFsLCB3YWl0aW5nIGZvciBvdXRwdXRcbi8vIHNwYWNlXG5jb25zdCBXQVNIID0gNzsgLy8gbzogZ290IGVvYiwgcG9zc2libHkgc3RpbGwgb3V0cHV0XG4vLyB3YWl0aW5nXG5jb25zdCBFTkQgPSA4OyAvLyB4OiBnb3QgZW9iIGFuZCBhbGwgZGF0YSBmbHVzaGVkXG5jb25zdCBCQURDT0RFID0gOTsvLyB4OiBnb3QgZXJyb3JcblxuZnVuY3Rpb24gSW5mQ29kZXMoKSB7XG5cdGNvbnN0IHRoYXQgPSB0aGlzO1xuXG5cdGxldCBtb2RlOyAvLyBjdXJyZW50IGluZmxhdGVfY29kZXMgbW9kZVxuXG5cdC8vIG1vZGUgZGVwZW5kZW50IGluZm9ybWF0aW9uXG5cdGxldCBsZW4gPSAwO1xuXG5cdGxldCB0cmVlOyAvLyBwb2ludGVyIGludG8gdHJlZVxuXHRsZXQgdHJlZV9pbmRleCA9IDA7XG5cdGxldCBuZWVkID0gMDsgLy8gYml0cyBuZWVkZWRcblxuXHRsZXQgbGl0ID0gMDtcblxuXHQvLyBpZiBFWFQgb3IgQ09QWSwgd2hlcmUgYW5kIGhvdyBtdWNoXG5cdGxldCBnZXQgPSAwOyAvLyBiaXRzIHRvIGdldCBmb3IgZXh0cmFcblx0bGV0IGRpc3QgPSAwOyAvLyBkaXN0YW5jZSBiYWNrIHRvIGNvcHkgZnJvbVxuXG5cdGxldCBsYml0cyA9IDA7IC8vIGx0cmVlIGJpdHMgZGVjb2RlZCBwZXIgYnJhbmNoXG5cdGxldCBkYml0cyA9IDA7IC8vIGR0cmVlIGJpdHMgZGVjb2RlciBwZXIgYnJhbmNoXG5cdGxldCBsdHJlZTsgLy8gbGl0ZXJhbC9sZW5ndGgvZW9iIHRyZWVcblx0bGV0IGx0cmVlX2luZGV4ID0gMDsgLy8gbGl0ZXJhbC9sZW5ndGgvZW9iIHRyZWVcblx0bGV0IGR0cmVlOyAvLyBkaXN0YW5jZSB0cmVlXG5cdGxldCBkdHJlZV9pbmRleCA9IDA7IC8vIGRpc3RhbmNlIHRyZWVcblxuXHQvLyBDYWxsZWQgd2l0aCBudW1iZXIgb2YgYnl0ZXMgbGVmdCB0byB3cml0ZSBpbiB3aW4gYXQgbGVhc3QgMjU4XG5cdC8vICh0aGUgbWF4aW11bSBzdHJpbmcgbGVuZ3RoKSBhbmQgbnVtYmVyIG9mIGlucHV0IGJ5dGVzIGF2YWlsYWJsZVxuXHQvLyBhdCBsZWFzdCB0ZW4uIFRoZSB0ZW4gYnl0ZXMgYXJlIHNpeCBieXRlcyBmb3IgdGhlIGxvbmdlc3QgbGVuZ3RoL1xuXHQvLyBkaXN0YW5jZSBwYWlyIHBsdXMgZm91ciBieXRlcyBmb3Igb3ZlcmxvYWRpbmcgdGhlIGJpdCBidWZmZXIuXG5cblx0ZnVuY3Rpb24gaW5mbGF0ZV9mYXN0KGJsLCBiZCwgdGwsIHRsX2luZGV4LCB0ZCwgdGRfaW5kZXgsIHMsIHopIHtcblx0XHRsZXQgdDsgLy8gdGVtcG9yYXJ5IHBvaW50ZXJcblx0XHRsZXQgdHA7IC8vIHRlbXBvcmFyeSBwb2ludGVyXG5cdFx0bGV0IHRwX2luZGV4OyAvLyB0ZW1wb3JhcnkgcG9pbnRlclxuXHRcdGxldCBlOyAvLyBleHRyYSBiaXRzIG9yIG9wZXJhdGlvblxuXHRcdGxldCBiOyAvLyBiaXQgYnVmZmVyXG5cdFx0bGV0IGs7IC8vIGJpdHMgaW4gYml0IGJ1ZmZlclxuXHRcdGxldCBwOyAvLyBpbnB1dCBkYXRhIHBvaW50ZXJcblx0XHRsZXQgbjsgLy8gYnl0ZXMgYXZhaWxhYmxlIHRoZXJlXG5cdFx0bGV0IHE7IC8vIG91dHB1dCB3aW4gd3JpdGUgcG9pbnRlclxuXHRcdGxldCBtOyAvLyBieXRlcyB0byBlbmQgb2Ygd2luIG9yIHJlYWQgcG9pbnRlclxuXHRcdGxldCBtbDsgLy8gbWFzayBmb3IgbGl0ZXJhbC9sZW5ndGggdHJlZVxuXHRcdGxldCBtZDsgLy8gbWFzayBmb3IgZGlzdGFuY2UgdHJlZVxuXHRcdGxldCBjOyAvLyBieXRlcyB0byBjb3B5XG5cdFx0bGV0IGQ7IC8vIGRpc3RhbmNlIGJhY2sgdG8gY29weSBmcm9tXG5cdFx0bGV0IHI7IC8vIGNvcHkgc291cmNlIHBvaW50ZXJcblxuXHRcdGxldCB0cF9pbmRleF90XzM7IC8vICh0cF9pbmRleCt0KSozXG5cblx0XHQvLyBsb2FkIGlucHV0LCBvdXRwdXQsIGJpdCB2YWx1ZXNcblx0XHRwID0gei5uZXh0X2luX2luZGV4O1xuXHRcdG4gPSB6LmF2YWlsX2luO1xuXHRcdGIgPSBzLmJpdGI7XG5cdFx0ayA9IHMuYml0aztcblx0XHRxID0gcy53cml0ZTtcblx0XHRtID0gcSA8IHMucmVhZCA/IHMucmVhZCAtIHEgLSAxIDogcy5lbmQgLSBxO1xuXG5cdFx0Ly8gaW5pdGlhbGl6ZSBtYXNrc1xuXHRcdG1sID0gaW5mbGF0ZV9tYXNrW2JsXTtcblx0XHRtZCA9IGluZmxhdGVfbWFza1tiZF07XG5cblx0XHQvLyBkbyB1bnRpbCBub3QgZW5vdWdoIGlucHV0IG9yIG91dHB1dCBzcGFjZSBmb3IgZmFzdCBsb29wXG5cdFx0ZG8geyAvLyBhc3N1bWUgY2FsbGVkIHdpdGggbSA+PSAyNTggJiYgbiA+PSAxMFxuXHRcdFx0Ly8gZ2V0IGxpdGVyYWwvbGVuZ3RoIGNvZGVcblx0XHRcdHdoaWxlIChrIDwgKDIwKSkgeyAvLyBtYXggYml0cyBmb3IgbGl0ZXJhbC9sZW5ndGggY29kZVxuXHRcdFx0XHRuLS07XG5cdFx0XHRcdGIgfD0gKHoucmVhZF9ieXRlKHArKykgJiAweGZmKSA8PCBrO1xuXHRcdFx0XHRrICs9IDg7XG5cdFx0XHR9XG5cblx0XHRcdHQgPSBiICYgbWw7XG5cdFx0XHR0cCA9IHRsO1xuXHRcdFx0dHBfaW5kZXggPSB0bF9pbmRleDtcblx0XHRcdHRwX2luZGV4X3RfMyA9ICh0cF9pbmRleCArIHQpICogMztcblx0XHRcdGlmICgoZSA9IHRwW3RwX2luZGV4X3RfM10pID09PSAwKSB7XG5cdFx0XHRcdGIgPj49ICh0cFt0cF9pbmRleF90XzMgKyAxXSk7XG5cdFx0XHRcdGsgLT0gKHRwW3RwX2luZGV4X3RfMyArIDFdKTtcblxuXHRcdFx0XHRzLndpbltxKytdID0gLyogKGJ5dGUpICovdHBbdHBfaW5kZXhfdF8zICsgMl07XG5cdFx0XHRcdG0tLTtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRkbyB7XG5cblx0XHRcdFx0YiA+Pj0gKHRwW3RwX2luZGV4X3RfMyArIDFdKTtcblx0XHRcdFx0ayAtPSAodHBbdHBfaW5kZXhfdF8zICsgMV0pO1xuXG5cdFx0XHRcdGlmICgoZSAmIDE2KSAhPT0gMCkge1xuXHRcdFx0XHRcdGUgJj0gMTU7XG5cdFx0XHRcdFx0YyA9IHRwW3RwX2luZGV4X3RfMyArIDJdICsgKC8qIChpbnQpICovYiAmIGluZmxhdGVfbWFza1tlXSk7XG5cblx0XHRcdFx0XHRiID4+PSBlO1xuXHRcdFx0XHRcdGsgLT0gZTtcblxuXHRcdFx0XHRcdC8vIGRlY29kZSBkaXN0YW5jZSBiYXNlIG9mIGJsb2NrIHRvIGNvcHlcblx0XHRcdFx0XHR3aGlsZSAoayA8ICgxNSkpIHsgLy8gbWF4IGJpdHMgZm9yIGRpc3RhbmNlIGNvZGVcblx0XHRcdFx0XHRcdG4tLTtcblx0XHRcdFx0XHRcdGIgfD0gKHoucmVhZF9ieXRlKHArKykgJiAweGZmKSA8PCBrO1xuXHRcdFx0XHRcdFx0ayArPSA4O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHQgPSBiICYgbWQ7XG5cdFx0XHRcdFx0dHAgPSB0ZDtcblx0XHRcdFx0XHR0cF9pbmRleCA9IHRkX2luZGV4O1xuXHRcdFx0XHRcdHRwX2luZGV4X3RfMyA9ICh0cF9pbmRleCArIHQpICogMztcblx0XHRcdFx0XHRlID0gdHBbdHBfaW5kZXhfdF8zXTtcblxuXHRcdFx0XHRcdGRvIHtcblxuXHRcdFx0XHRcdFx0YiA+Pj0gKHRwW3RwX2luZGV4X3RfMyArIDFdKTtcblx0XHRcdFx0XHRcdGsgLT0gKHRwW3RwX2luZGV4X3RfMyArIDFdKTtcblxuXHRcdFx0XHRcdFx0aWYgKChlICYgMTYpICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdC8vIGdldCBleHRyYSBiaXRzIHRvIGFkZCB0byBkaXN0YW5jZSBiYXNlXG5cdFx0XHRcdFx0XHRcdGUgJj0gMTU7XG5cdFx0XHRcdFx0XHRcdHdoaWxlIChrIDwgKGUpKSB7IC8vIGdldCBleHRyYSBiaXRzICh1cCB0byAxMylcblx0XHRcdFx0XHRcdFx0XHRuLS07XG5cdFx0XHRcdFx0XHRcdFx0YiB8PSAoei5yZWFkX2J5dGUocCsrKSAmIDB4ZmYpIDw8IGs7XG5cdFx0XHRcdFx0XHRcdFx0ayArPSA4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0ZCA9IHRwW3RwX2luZGV4X3RfMyArIDJdICsgKGIgJiBpbmZsYXRlX21hc2tbZV0pO1xuXG5cdFx0XHRcdFx0XHRcdGIgPj49IChlKTtcblx0XHRcdFx0XHRcdFx0ayAtPSAoZSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gZG8gdGhlIGNvcHlcblx0XHRcdFx0XHRcdFx0bSAtPSBjO1xuXHRcdFx0XHRcdFx0XHRpZiAocSA+PSBkKSB7IC8vIG9mZnNldCBiZWZvcmUgZGVzdFxuXHRcdFx0XHRcdFx0XHRcdC8vIGp1c3QgY29weVxuXHRcdFx0XHRcdFx0XHRcdHIgPSBxIC0gZDtcblx0XHRcdFx0XHRcdFx0XHRpZiAocSAtIHIgPiAwICYmIDIgPiAocSAtIHIpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzLndpbltxKytdID0gcy53aW5bcisrXTsgLy8gbWluaW11bVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gY291bnQgaXNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIHRocmVlLFxuXHRcdFx0XHRcdFx0XHRcdFx0cy53aW5bcSsrXSA9IHMud2luW3IrK107IC8vIHNvIHVucm9sbFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gbG9vcCBhXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBsaXR0bGVcblx0XHRcdFx0XHRcdFx0XHRcdGMgLT0gMjtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0cy53aW4uc2V0KHMud2luLnN1YmFycmF5KHIsIHIgKyAyKSwgcSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRxICs9IDI7XG5cdFx0XHRcdFx0XHRcdFx0XHRyICs9IDI7XG5cdFx0XHRcdFx0XHRcdFx0XHRjIC09IDI7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgeyAvLyBlbHNlIG9mZnNldCBhZnRlciBkZXN0aW5hdGlvblxuXHRcdFx0XHRcdFx0XHRcdHIgPSBxIC0gZDtcblx0XHRcdFx0XHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyICs9IHMuZW5kOyAvLyBmb3JjZSBwb2ludGVyIGluIHdpblxuXHRcdFx0XHRcdFx0XHRcdH0gd2hpbGUgKHIgPCAwKTsgLy8gY292ZXJzIGludmFsaWQgZGlzdGFuY2VzXG5cdFx0XHRcdFx0XHRcdFx0ZSA9IHMuZW5kIC0gcjtcblx0XHRcdFx0XHRcdFx0XHRpZiAoYyA+IGUpIHsgLy8gaWYgc291cmNlIGNyb3NzZXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRjIC09IGU7IC8vIHdyYXBwZWQgY29weVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKHEgLSByID4gMCAmJiBlID4gKHEgLSByKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cy53aW5bcSsrXSA9IHMud2luW3IrK107XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gd2hpbGUgKC0tZSAhPT0gMCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRzLndpbi5zZXQocy53aW4uc3ViYXJyYXkociwgciArIGUpLCBxKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cSArPSBlO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyICs9IGU7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGUgPSAwO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0ciA9IDA7IC8vIGNvcHkgcmVzdCBmcm9tIHN0YXJ0IG9mIHdpblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8gY29weSBhbGwgb3Igd2hhdCdzIGxlZnRcblx0XHRcdFx0XHRcdFx0aWYgKHEgLSByID4gMCAmJiBjID4gKHEgLSByKSkge1xuXHRcdFx0XHRcdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRcdFx0XHRcdHMud2luW3ErK10gPSBzLndpbltyKytdO1xuXHRcdFx0XHRcdFx0XHRcdH0gd2hpbGUgKC0tYyAhPT0gMCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0cy53aW4uc2V0KHMud2luLnN1YmFycmF5KHIsIHIgKyBjKSwgcSk7XG5cdFx0XHRcdFx0XHRcdFx0cSArPSBjO1xuXHRcdFx0XHRcdFx0XHRcdHIgKz0gYztcblx0XHRcdFx0XHRcdFx0XHRjID0gMDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoKGUgJiA2NCkgPT09IDApIHtcblx0XHRcdFx0XHRcdFx0dCArPSB0cFt0cF9pbmRleF90XzMgKyAyXTtcblx0XHRcdFx0XHRcdFx0dCArPSAoYiAmIGluZmxhdGVfbWFza1tlXSk7XG5cdFx0XHRcdFx0XHRcdHRwX2luZGV4X3RfMyA9ICh0cF9pbmRleCArIHQpICogMztcblx0XHRcdFx0XHRcdFx0ZSA9IHRwW3RwX2luZGV4X3RfM107XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR6Lm1zZyA9IFwiaW52YWxpZCBkaXN0YW5jZSBjb2RlXCI7XG5cblx0XHRcdFx0XHRcdFx0YyA9IHouYXZhaWxfaW4gLSBuO1xuXHRcdFx0XHRcdFx0XHRjID0gKGsgPj4gMykgPCBjID8gayA+PiAzIDogYztcblx0XHRcdFx0XHRcdFx0biArPSBjO1xuXHRcdFx0XHRcdFx0XHRwIC09IGM7XG5cdFx0XHRcdFx0XHRcdGsgLT0gYyA8PCAzO1xuXG5cdFx0XHRcdFx0XHRcdHMuYml0YiA9IGI7XG5cdFx0XHRcdFx0XHRcdHMuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHRcdHMud3JpdGUgPSBxO1xuXG5cdFx0XHRcdFx0XHRcdHJldHVybiBaX0RBVEFfRVJST1I7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG5cdFx0XHRcdFx0fSB3aGlsZSAodHJ1ZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoKGUgJiA2NCkgPT09IDApIHtcblx0XHRcdFx0XHR0ICs9IHRwW3RwX2luZGV4X3RfMyArIDJdO1xuXHRcdFx0XHRcdHQgKz0gKGIgJiBpbmZsYXRlX21hc2tbZV0pO1xuXHRcdFx0XHRcdHRwX2luZGV4X3RfMyA9ICh0cF9pbmRleCArIHQpICogMztcblx0XHRcdFx0XHRpZiAoKGUgPSB0cFt0cF9pbmRleF90XzNdKSA9PT0gMCkge1xuXG5cdFx0XHRcdFx0XHRiID4+PSAodHBbdHBfaW5kZXhfdF8zICsgMV0pO1xuXHRcdFx0XHRcdFx0ayAtPSAodHBbdHBfaW5kZXhfdF8zICsgMV0pO1xuXG5cdFx0XHRcdFx0XHRzLndpbltxKytdID0gLyogKGJ5dGUpICovdHBbdHBfaW5kZXhfdF8zICsgMl07XG5cdFx0XHRcdFx0XHRtLS07XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoKGUgJiAzMikgIT09IDApIHtcblxuXHRcdFx0XHRcdGMgPSB6LmF2YWlsX2luIC0gbjtcblx0XHRcdFx0XHRjID0gKGsgPj4gMykgPCBjID8gayA+PiAzIDogYztcblx0XHRcdFx0XHRuICs9IGM7XG5cdFx0XHRcdFx0cCAtPSBjO1xuXHRcdFx0XHRcdGsgLT0gYyA8PCAzO1xuXG5cdFx0XHRcdFx0cy5iaXRiID0gYjtcblx0XHRcdFx0XHRzLmJpdGsgPSBrO1xuXHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdHMud3JpdGUgPSBxO1xuXG5cdFx0XHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VORDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR6Lm1zZyA9IFwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlXCI7XG5cblx0XHRcdFx0XHRjID0gei5hdmFpbF9pbiAtIG47XG5cdFx0XHRcdFx0YyA9IChrID4+IDMpIDwgYyA/IGsgPj4gMyA6IGM7XG5cdFx0XHRcdFx0biArPSBjO1xuXHRcdFx0XHRcdHAgLT0gYztcblx0XHRcdFx0XHRrIC09IGMgPDwgMztcblxuXHRcdFx0XHRcdHMuYml0YiA9IGI7XG5cdFx0XHRcdFx0cy5iaXRrID0gaztcblx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRzLndyaXRlID0gcTtcblxuXHRcdFx0XHRcdHJldHVybiBaX0RBVEFfRVJST1I7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuXHRcdFx0fSB3aGlsZSAodHJ1ZSk7XG5cdFx0fSB3aGlsZSAobSA+PSAyNTggJiYgbiA+PSAxMCk7XG5cblx0XHQvLyBub3QgZW5vdWdoIGlucHV0IG9yIG91dHB1dC0tcmVzdG9yZSBwb2ludGVycyBhbmQgcmV0dXJuXG5cdFx0YyA9IHouYXZhaWxfaW4gLSBuO1xuXHRcdGMgPSAoayA+PiAzKSA8IGMgPyBrID4+IDMgOiBjO1xuXHRcdG4gKz0gYztcblx0XHRwIC09IGM7XG5cdFx0ayAtPSBjIDw8IDM7XG5cblx0XHRzLmJpdGIgPSBiO1xuXHRcdHMuYml0ayA9IGs7XG5cdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0cy53cml0ZSA9IHE7XG5cblx0XHRyZXR1cm4gWl9PSztcblx0fVxuXG5cdHRoYXQuaW5pdCA9IGZ1bmN0aW9uIChibCwgYmQsIHRsLCB0bF9pbmRleCwgdGQsIHRkX2luZGV4KSB7XG5cdFx0bW9kZSA9IFNUQVJUO1xuXHRcdGxiaXRzID0gLyogKGJ5dGUpICovYmw7XG5cdFx0ZGJpdHMgPSAvKiAoYnl0ZSkgKi9iZDtcblx0XHRsdHJlZSA9IHRsO1xuXHRcdGx0cmVlX2luZGV4ID0gdGxfaW5kZXg7XG5cdFx0ZHRyZWUgPSB0ZDtcblx0XHRkdHJlZV9pbmRleCA9IHRkX2luZGV4O1xuXHRcdHRyZWUgPSBudWxsO1xuXHR9O1xuXG5cdHRoYXQucHJvYyA9IGZ1bmN0aW9uIChzLCB6LCByKSB7XG5cdFx0bGV0IGo7IC8vIHRlbXBvcmFyeSBzdG9yYWdlXG5cdFx0bGV0IHRpbmRleDsgLy8gdGVtcG9yYXJ5IHBvaW50ZXJcblx0XHRsZXQgZTsgLy8gZXh0cmEgYml0cyBvciBvcGVyYXRpb25cblx0XHRsZXQgYiA9IDA7IC8vIGJpdCBidWZmZXJcblx0XHRsZXQgayA9IDA7IC8vIGJpdHMgaW4gYml0IGJ1ZmZlclxuXHRcdGxldCBwID0gMDsgLy8gaW5wdXQgZGF0YSBwb2ludGVyXG5cdFx0bGV0IG47IC8vIGJ5dGVzIGF2YWlsYWJsZSB0aGVyZVxuXHRcdGxldCBxOyAvLyBvdXRwdXQgd2luIHdyaXRlIHBvaW50ZXJcblx0XHRsZXQgbTsgLy8gYnl0ZXMgdG8gZW5kIG9mIHdpbiBvciByZWFkIHBvaW50ZXJcblx0XHRsZXQgZjsgLy8gcG9pbnRlciB0byBjb3B5IHN0cmluZ3MgZnJvbVxuXG5cdFx0Ly8gY29weSBpbnB1dC9vdXRwdXQgaW5mb3JtYXRpb24gdG8gbG9jYWxzIChVUERBVEUgbWFjcm8gcmVzdG9yZXMpXG5cdFx0cCA9IHoubmV4dF9pbl9pbmRleDtcblx0XHRuID0gei5hdmFpbF9pbjtcblx0XHRiID0gcy5iaXRiO1xuXHRcdGsgPSBzLmJpdGs7XG5cdFx0cSA9IHMud3JpdGU7XG5cdFx0bSA9IHEgPCBzLnJlYWQgPyBzLnJlYWQgLSBxIC0gMSA6IHMuZW5kIC0gcTtcblxuXHRcdC8vIHByb2Nlc3MgaW5wdXQgYW5kIG91dHB1dCBiYXNlZCBvbiBjdXJyZW50IHN0YXRlXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuXHRcdHdoaWxlICh0cnVlKSB7XG5cdFx0XHRzd2l0Y2ggKG1vZGUpIHtcblx0XHRcdFx0Ly8gd2FpdGluZyBmb3IgXCJpOlwiPWlucHV0LCBcIm86XCI9b3V0cHV0LCBcIng6XCI9bm90aGluZ1xuXHRcdFx0XHRjYXNlIFNUQVJUOiAvLyB4OiBzZXQgdXAgZm9yIExFTlxuXHRcdFx0XHRcdGlmIChtID49IDI1OCAmJiBuID49IDEwKSB7XG5cblx0XHRcdFx0XHRcdHMuYml0YiA9IGI7XG5cdFx0XHRcdFx0XHRzLmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0cy53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRyID0gaW5mbGF0ZV9mYXN0KGxiaXRzLCBkYml0cywgbHRyZWUsIGx0cmVlX2luZGV4LCBkdHJlZSwgZHRyZWVfaW5kZXgsIHMsIHopO1xuXG5cdFx0XHRcdFx0XHRwID0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0biA9IHouYXZhaWxfaW47XG5cdFx0XHRcdFx0XHRiID0gcy5iaXRiO1xuXHRcdFx0XHRcdFx0ayA9IHMuYml0aztcblx0XHRcdFx0XHRcdHEgPSBzLndyaXRlO1xuXHRcdFx0XHRcdFx0bSA9IHEgPCBzLnJlYWQgPyBzLnJlYWQgLSBxIC0gMSA6IHMuZW5kIC0gcTtcblxuXHRcdFx0XHRcdFx0aWYgKHIgIT0gWl9PSykge1xuXHRcdFx0XHRcdFx0XHRtb2RlID0gciA9PSBaX1NUUkVBTV9FTkQgPyBXQVNIIDogQkFEQ09ERTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5lZWQgPSBsYml0cztcblx0XHRcdFx0XHR0cmVlID0gbHRyZWU7XG5cdFx0XHRcdFx0dHJlZV9pbmRleCA9IGx0cmVlX2luZGV4O1xuXG5cdFx0XHRcdFx0bW9kZSA9IExFTjtcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlIExFTjogLy8gaTogZ2V0IGxlbmd0aC9saXRlcmFsL2VvYiBuZXh0XG5cdFx0XHRcdFx0aiA9IG5lZWQ7XG5cblx0XHRcdFx0XHR3aGlsZSAoayA8IChqKSkge1xuXHRcdFx0XHRcdFx0aWYgKG4gIT09IDApXG5cdFx0XHRcdFx0XHRcdHIgPSBaX09LO1xuXHRcdFx0XHRcdFx0ZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0cy5iaXRiID0gYjtcblx0XHRcdFx0XHRcdFx0cy5iaXRrID0gaztcblx0XHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRcdFx0cy53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBzLmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRuLS07XG5cdFx0XHRcdFx0XHRiIHw9ICh6LnJlYWRfYnl0ZShwKyspICYgMHhmZikgPDwgaztcblx0XHRcdFx0XHRcdGsgKz0gODtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aW5kZXggPSAodHJlZV9pbmRleCArIChiICYgaW5mbGF0ZV9tYXNrW2pdKSkgKiAzO1xuXG5cdFx0XHRcdFx0YiA+Pj49ICh0cmVlW3RpbmRleCArIDFdKTtcblx0XHRcdFx0XHRrIC09ICh0cmVlW3RpbmRleCArIDFdKTtcblxuXHRcdFx0XHRcdGUgPSB0cmVlW3RpbmRleF07XG5cblx0XHRcdFx0XHRpZiAoZSA9PT0gMCkgeyAvLyBsaXRlcmFsXG5cdFx0XHRcdFx0XHRsaXQgPSB0cmVlW3RpbmRleCArIDJdO1xuXHRcdFx0XHRcdFx0bW9kZSA9IExJVDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoKGUgJiAxNikgIT09IDApIHsgLy8gbGVuZ3RoXG5cdFx0XHRcdFx0XHRnZXQgPSBlICYgMTU7XG5cdFx0XHRcdFx0XHRsZW4gPSB0cmVlW3RpbmRleCArIDJdO1xuXHRcdFx0XHRcdFx0bW9kZSA9IExFTkVYVDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoKGUgJiA2NCkgPT09IDApIHsgLy8gbmV4dCB0YWJsZVxuXHRcdFx0XHRcdFx0bmVlZCA9IGU7XG5cdFx0XHRcdFx0XHR0cmVlX2luZGV4ID0gdGluZGV4IC8gMyArIHRyZWVbdGluZGV4ICsgMl07XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKChlICYgMzIpICE9PSAwKSB7IC8vIGVuZCBvZiBibG9ja1xuXHRcdFx0XHRcdFx0bW9kZSA9IFdBU0g7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kZSA9IEJBRENPREU7IC8vIGludmFsaWQgY29kZVxuXHRcdFx0XHRcdHoubXNnID0gXCJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGVcIjtcblx0XHRcdFx0XHRyID0gWl9EQVRBX0VSUk9SO1xuXG5cdFx0XHRcdFx0cy5iaXRiID0gYjtcblx0XHRcdFx0XHRzLmJpdGsgPSBrO1xuXHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdHMud3JpdGUgPSBxO1xuXHRcdFx0XHRcdHJldHVybiBzLmluZmxhdGVfZmx1c2goeiwgcik7XG5cblx0XHRcdFx0Y2FzZSBMRU5FWFQ6IC8vIGk6IGdldHRpbmcgbGVuZ3RoIGV4dHJhIChoYXZlIGJhc2UpXG5cdFx0XHRcdFx0aiA9IGdldDtcblxuXHRcdFx0XHRcdHdoaWxlIChrIDwgKGopKSB7XG5cdFx0XHRcdFx0XHRpZiAobiAhPT0gMClcblx0XHRcdFx0XHRcdFx0ciA9IFpfT0s7XG5cdFx0XHRcdFx0XHRlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRzLmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0XHRzLmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0XHRzLndyaXRlID0gcTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHMuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG4tLTtcblx0XHRcdFx0XHRcdGIgfD0gKHoucmVhZF9ieXRlKHArKykgJiAweGZmKSA8PCBrO1xuXHRcdFx0XHRcdFx0ayArPSA4O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGxlbiArPSAoYiAmIGluZmxhdGVfbWFza1tqXSk7XG5cblx0XHRcdFx0XHRiID4+PSBqO1xuXHRcdFx0XHRcdGsgLT0gajtcblxuXHRcdFx0XHRcdG5lZWQgPSBkYml0cztcblx0XHRcdFx0XHR0cmVlID0gZHRyZWU7XG5cdFx0XHRcdFx0dHJlZV9pbmRleCA9IGR0cmVlX2luZGV4O1xuXHRcdFx0XHRcdG1vZGUgPSBESVNUO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgRElTVDogLy8gaTogZ2V0IGRpc3RhbmNlIG5leHRcblx0XHRcdFx0XHRqID0gbmVlZDtcblxuXHRcdFx0XHRcdHdoaWxlIChrIDwgKGopKSB7XG5cdFx0XHRcdFx0XHRpZiAobiAhPT0gMClcblx0XHRcdFx0XHRcdFx0ciA9IFpfT0s7XG5cdFx0XHRcdFx0XHRlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRzLmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0XHRzLmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0XHRzLndyaXRlID0gcTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHMuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG4tLTtcblx0XHRcdFx0XHRcdGIgfD0gKHoucmVhZF9ieXRlKHArKykgJiAweGZmKSA8PCBrO1xuXHRcdFx0XHRcdFx0ayArPSA4O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRpbmRleCA9ICh0cmVlX2luZGV4ICsgKGIgJiBpbmZsYXRlX21hc2tbal0pKSAqIDM7XG5cblx0XHRcdFx0XHRiID4+PSB0cmVlW3RpbmRleCArIDFdO1xuXHRcdFx0XHRcdGsgLT0gdHJlZVt0aW5kZXggKyAxXTtcblxuXHRcdFx0XHRcdGUgPSAodHJlZVt0aW5kZXhdKTtcblx0XHRcdFx0XHRpZiAoKGUgJiAxNikgIT09IDApIHsgLy8gZGlzdGFuY2Vcblx0XHRcdFx0XHRcdGdldCA9IGUgJiAxNTtcblx0XHRcdFx0XHRcdGRpc3QgPSB0cmVlW3RpbmRleCArIDJdO1xuXHRcdFx0XHRcdFx0bW9kZSA9IERJU1RFWFQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKChlICYgNjQpID09PSAwKSB7IC8vIG5leHQgdGFibGVcblx0XHRcdFx0XHRcdG5lZWQgPSBlO1xuXHRcdFx0XHRcdFx0dHJlZV9pbmRleCA9IHRpbmRleCAvIDMgKyB0cmVlW3RpbmRleCArIDJdO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGUgPSBCQURDT0RFOyAvLyBpbnZhbGlkIGNvZGVcblx0XHRcdFx0XHR6Lm1zZyA9IFwiaW52YWxpZCBkaXN0YW5jZSBjb2RlXCI7XG5cdFx0XHRcdFx0ciA9IFpfREFUQV9FUlJPUjtcblxuXHRcdFx0XHRcdHMuYml0YiA9IGI7XG5cdFx0XHRcdFx0cy5iaXRrID0gaztcblx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRzLndyaXRlID0gcTtcblx0XHRcdFx0XHRyZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXG5cdFx0XHRcdGNhc2UgRElTVEVYVDogLy8gaTogZ2V0dGluZyBkaXN0YW5jZSBleHRyYVxuXHRcdFx0XHRcdGogPSBnZXQ7XG5cblx0XHRcdFx0XHR3aGlsZSAoayA8IChqKSkge1xuXHRcdFx0XHRcdFx0aWYgKG4gIT09IDApXG5cdFx0XHRcdFx0XHRcdHIgPSBaX09LO1xuXHRcdFx0XHRcdFx0ZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0cy5iaXRiID0gYjtcblx0XHRcdFx0XHRcdFx0cy5iaXRrID0gaztcblx0XHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRcdFx0cy53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBzLmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRuLS07XG5cdFx0XHRcdFx0XHRiIHw9ICh6LnJlYWRfYnl0ZShwKyspICYgMHhmZikgPDwgaztcblx0XHRcdFx0XHRcdGsgKz0gODtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRkaXN0ICs9IChiICYgaW5mbGF0ZV9tYXNrW2pdKTtcblxuXHRcdFx0XHRcdGIgPj49IGo7XG5cdFx0XHRcdFx0ayAtPSBqO1xuXG5cdFx0XHRcdFx0bW9kZSA9IENPUFk7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSBDT1BZOiAvLyBvOiBjb3B5aW5nIGJ5dGVzIGluIHdpbiwgd2FpdGluZyBmb3Igc3BhY2Vcblx0XHRcdFx0XHRmID0gcSAtIGRpc3Q7XG5cdFx0XHRcdFx0d2hpbGUgKGYgPCAwKSB7IC8vIG1vZHVsbyB3aW4gc2l6ZS1cIndoaWxlXCIgaW5zdGVhZFxuXHRcdFx0XHRcdFx0ZiArPSBzLmVuZDsgLy8gb2YgXCJpZlwiIGhhbmRsZXMgaW52YWxpZCBkaXN0YW5jZXNcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKGxlbiAhPT0gMCkge1xuXG5cdFx0XHRcdFx0XHRpZiAobSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRpZiAocSA9PSBzLmVuZCAmJiBzLnJlYWQgIT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRxID0gMDtcblx0XHRcdFx0XHRcdFx0XHRtID0gcSA8IHMucmVhZCA/IHMucmVhZCAtIHEgLSAxIDogcy5lbmQgLSBxO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChtID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0cy53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdFx0ciA9IHMuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHRcdFx0XHRxID0gcy53cml0ZTtcblx0XHRcdFx0XHRcdFx0XHRtID0gcSA8IHMucmVhZCA/IHMucmVhZCAtIHEgLSAxIDogcy5lbmQgLSBxO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHEgPT0gcy5lbmQgJiYgcy5yZWFkICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRxID0gMDtcblx0XHRcdFx0XHRcdFx0XHRcdG0gPSBxIDwgcy5yZWFkID8gcy5yZWFkIC0gcSAtIDEgOiBzLmVuZCAtIHE7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKG0gPT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHMuYml0YiA9IGI7XG5cdFx0XHRcdFx0XHRcdFx0XHRzLmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0XHRcdFx0cy53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzLndpbltxKytdID0gcy53aW5bZisrXTtcblx0XHRcdFx0XHRcdG0tLTtcblxuXHRcdFx0XHRcdFx0aWYgKGYgPT0gcy5lbmQpXG5cdFx0XHRcdFx0XHRcdGYgPSAwO1xuXHRcdFx0XHRcdFx0bGVuLS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGUgPSBTVEFSVDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBMSVQ6IC8vIG86IGdvdCBsaXRlcmFsLCB3YWl0aW5nIGZvciBvdXRwdXQgc3BhY2Vcblx0XHRcdFx0XHRpZiAobSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0aWYgKHEgPT0gcy5lbmQgJiYgcy5yZWFkICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdHEgPSAwO1xuXHRcdFx0XHRcdFx0XHRtID0gcSA8IHMucmVhZCA/IHMucmVhZCAtIHEgLSAxIDogcy5lbmQgLSBxO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKG0gPT09IDApIHtcblx0XHRcdFx0XHRcdFx0cy53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdHIgPSBzLmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0XHRcdHEgPSBzLndyaXRlO1xuXHRcdFx0XHRcdFx0XHRtID0gcSA8IHMucmVhZCA/IHMucmVhZCAtIHEgLSAxIDogcy5lbmQgLSBxO1xuXG5cdFx0XHRcdFx0XHRcdGlmIChxID09IHMuZW5kICYmIHMucmVhZCAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdHEgPSAwO1xuXHRcdFx0XHRcdFx0XHRcdG0gPSBxIDwgcy5yZWFkID8gcy5yZWFkIC0gcSAtIDEgOiBzLmVuZCAtIHE7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKG0gPT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRzLmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0XHRcdHMuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHRcdFx0cy53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHMuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyID0gWl9PSztcblxuXHRcdFx0XHRcdHMud2luW3ErK10gPSAvKiAoYnl0ZSkgKi9saXQ7XG5cdFx0XHRcdFx0bS0tO1xuXG5cdFx0XHRcdFx0bW9kZSA9IFNUQVJUO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFdBU0g6IC8vIG86IGdvdCBlb2IsIHBvc3NpYmx5IG1vcmUgb3V0cHV0XG5cdFx0XHRcdFx0aWYgKGsgPiA3KSB7IC8vIHJldHVybiB1bnVzZWQgYnl0ZSwgaWYgYW55XG5cdFx0XHRcdFx0XHRrIC09IDg7XG5cdFx0XHRcdFx0XHRuKys7XG5cdFx0XHRcdFx0XHRwLS07IC8vIGNhbiBhbHdheXMgcmV0dXJuIG9uZVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHMud3JpdGUgPSBxO1xuXHRcdFx0XHRcdHIgPSBzLmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0cSA9IHMud3JpdGU7XG5cdFx0XHRcdFx0bSA9IHEgPCBzLnJlYWQgPyBzLnJlYWQgLSBxIC0gMSA6IHMuZW5kIC0gcTtcblxuXHRcdFx0XHRcdGlmIChzLnJlYWQgIT0gcy53cml0ZSkge1xuXHRcdFx0XHRcdFx0cy5iaXRiID0gYjtcblx0XHRcdFx0XHRcdHMuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHRzLndyaXRlID0gcTtcblx0XHRcdFx0XHRcdHJldHVybiBzLmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGUgPSBFTkQ7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSBFTkQ6XG5cdFx0XHRcdFx0ciA9IFpfU1RSRUFNX0VORDtcblx0XHRcdFx0XHRzLmJpdGIgPSBiO1xuXHRcdFx0XHRcdHMuYml0ayA9IGs7XG5cdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0cy53cml0ZSA9IHE7XG5cdFx0XHRcdFx0cmV0dXJuIHMuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblxuXHRcdFx0XHRjYXNlIEJBRENPREU6IC8vIHg6IGdvdCBlcnJvclxuXG5cdFx0XHRcdFx0ciA9IFpfREFUQV9FUlJPUjtcblxuXHRcdFx0XHRcdHMuYml0YiA9IGI7XG5cdFx0XHRcdFx0cy5iaXRrID0gaztcblx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRzLndyaXRlID0gcTtcblx0XHRcdFx0XHRyZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0ciA9IFpfU1RSRUFNX0VSUk9SO1xuXG5cdFx0XHRcdFx0cy5iaXRiID0gYjtcblx0XHRcdFx0XHRzLmJpdGsgPSBrO1xuXHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdHMud3JpdGUgPSBxO1xuXHRcdFx0XHRcdHJldHVybiBzLmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdHRoYXQuZnJlZSA9IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBaRlJFRSh6LCBjKTtcblx0fTtcblxufVxuXG4vLyBJbmZCbG9ja3NcblxuLy8gVGFibGUgZm9yIGRlZmxhdGUgZnJvbSBQS1pJUCdzIGFwcG5vdGUudHh0LlxuY29uc3QgYm9yZGVyID0gWyAvLyBPcmRlciBvZiB0aGUgYml0IGxlbmd0aCBjb2RlIGxlbmd0aHNcblx0MTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNV07XG5cbmNvbnN0IFRZUEUgPSAwOyAvLyBnZXQgdHlwZSBiaXRzICgzLCBpbmNsdWRpbmcgZW5kIGJpdClcbmNvbnN0IExFTlMgPSAxOyAvLyBnZXQgbGVuZ3RocyBmb3Igc3RvcmVkXG5jb25zdCBTVE9SRUQgPSAyOy8vIHByb2Nlc3Npbmcgc3RvcmVkIGJsb2NrXG5jb25zdCBUQUJMRSA9IDM7IC8vIGdldCB0YWJsZSBsZW5ndGhzXG5jb25zdCBCVFJFRSA9IDQ7IC8vIGdldCBiaXQgbGVuZ3RocyB0cmVlIGZvciBhIGR5bmFtaWNcbi8vIGJsb2NrXG5jb25zdCBEVFJFRSA9IDU7IC8vIGdldCBsZW5ndGgsIGRpc3RhbmNlIHRyZWVzIGZvciBhXG4vLyBkeW5hbWljIGJsb2NrXG5jb25zdCBDT0RFUyA9IDY7IC8vIHByb2Nlc3NpbmcgZml4ZWQgb3IgZHluYW1pYyBibG9ja1xuY29uc3QgRFJZID0gNzsgLy8gb3V0cHV0IHJlbWFpbmluZyB3aW4gYnl0ZXNcbmNvbnN0IERPTkVMT0NLUyA9IDg7IC8vIGZpbmlzaGVkIGxhc3QgYmxvY2ssIGRvbmVcbmNvbnN0IEJBREJMT0NLUyA9IDk7IC8vIG90IGEgZGF0YSBlcnJvci0tc3R1Y2sgaGVyZVxuXG5mdW5jdGlvbiBJbmZCbG9ja3Moeiwgdykge1xuXHRjb25zdCB0aGF0ID0gdGhpcztcblxuXHRsZXQgbW9kZSA9IFRZUEU7IC8vIGN1cnJlbnQgaW5mbGF0ZV9ibG9jayBtb2RlXG5cblx0bGV0IGxlZnQgPSAwOyAvLyBpZiBTVE9SRUQsIGJ5dGVzIGxlZnQgdG8gY29weVxuXG5cdGxldCB0YWJsZSA9IDA7IC8vIHRhYmxlIGxlbmd0aHMgKDE0IGJpdHMpXG5cdGxldCBpbmRleCA9IDA7IC8vIGluZGV4IGludG8gYmxlbnMgKG9yIGJvcmRlcilcblx0bGV0IGJsZW5zOyAvLyBiaXQgbGVuZ3RocyBvZiBjb2Rlc1xuXHRjb25zdCBiYiA9IFswXTsgLy8gYml0IGxlbmd0aCB0cmVlIGRlcHRoXG5cdGNvbnN0IHRiID0gWzBdOyAvLyBiaXQgbGVuZ3RoIGRlY29kaW5nIHRyZWVcblxuXHRjb25zdCBjb2RlcyA9IG5ldyBJbmZDb2RlcygpOyAvLyBpZiBDT0RFUywgY3VycmVudCBzdGF0ZVxuXG5cdGxldCBsYXN0ID0gMDsgLy8gdHJ1ZSBpZiB0aGlzIGJsb2NrIGlzIHRoZSBsYXN0IGJsb2NrXG5cblx0bGV0IGh1ZnRzID0gbmV3IEludDMyQXJyYXkoTUFOWSAqIDMpOyAvLyBzaW5nbGUgbWFsbG9jIGZvciB0cmVlIHNwYWNlXG5cdGNvbnN0IGNoZWNrID0gMDsgLy8gY2hlY2sgb24gb3V0cHV0XG5cdGNvbnN0IGluZnRyZWUgPSBuZXcgSW5mVHJlZSgpO1xuXG5cdHRoYXQuYml0ayA9IDA7IC8vIGJpdHMgaW4gYml0IGJ1ZmZlclxuXHR0aGF0LmJpdGIgPSAwOyAvLyBiaXQgYnVmZmVyXG5cdHRoYXQud2luID0gbmV3IFVpbnQ4QXJyYXkodyk7IC8vIHNsaWRpbmcgd2luXG5cdHRoYXQuZW5kID0gdzsgLy8gb25lIGJ5dGUgYWZ0ZXIgc2xpZGluZyB3aW5cblx0dGhhdC5yZWFkID0gMDsgLy8gd2luIHJlYWQgcG9pbnRlclxuXHR0aGF0LndyaXRlID0gMDsgLy8gd2luIHdyaXRlIHBvaW50ZXJcblxuXHR0aGF0LnJlc2V0ID0gZnVuY3Rpb24gKHosIGMpIHtcblx0XHRpZiAoYylcblx0XHRcdGNbMF0gPSBjaGVjaztcblx0XHQvLyBpZiAobW9kZSA9PSBCVFJFRSB8fCBtb2RlID09IERUUkVFKSB7XG5cdFx0Ly8gfVxuXHRcdGlmIChtb2RlID09IENPREVTKSB7XG5cdFx0XHRjb2Rlcy5mcmVlKHopO1xuXHRcdH1cblx0XHRtb2RlID0gVFlQRTtcblx0XHR0aGF0LmJpdGsgPSAwO1xuXHRcdHRoYXQuYml0YiA9IDA7XG5cdFx0dGhhdC5yZWFkID0gdGhhdC53cml0ZSA9IDA7XG5cdH07XG5cblx0dGhhdC5yZXNldCh6LCBudWxsKTtcblxuXHQvLyBjb3B5IGFzIG11Y2ggYXMgcG9zc2libGUgZnJvbSB0aGUgc2xpZGluZyB3aW4gdG8gdGhlIG91dHB1dCBhcmVhXG5cdHRoYXQuaW5mbGF0ZV9mbHVzaCA9IGZ1bmN0aW9uICh6LCByKSB7XG5cdFx0bGV0IG47XG5cdFx0bGV0IHA7XG5cdFx0bGV0IHE7XG5cblx0XHQvLyBsb2NhbCBjb3BpZXMgb2Ygc291cmNlIGFuZCBkZXN0aW5hdGlvbiBwb2ludGVyc1xuXHRcdHAgPSB6Lm5leHRfb3V0X2luZGV4O1xuXHRcdHEgPSB0aGF0LnJlYWQ7XG5cblx0XHQvLyBjb21wdXRlIG51bWJlciBvZiBieXRlcyB0byBjb3B5IGFzIGZhciBhcyBlbmQgb2Ygd2luXG5cdFx0biA9IC8qIChpbnQpICovKChxIDw9IHRoYXQud3JpdGUgPyB0aGF0LndyaXRlIDogdGhhdC5lbmQpIC0gcSk7XG5cdFx0aWYgKG4gPiB6LmF2YWlsX291dClcblx0XHRcdG4gPSB6LmF2YWlsX291dDtcblx0XHRpZiAobiAhPT0gMCAmJiByID09IFpfQlVGX0VSUk9SKVxuXHRcdFx0ciA9IFpfT0s7XG5cblx0XHQvLyB1cGRhdGUgY291bnRlcnNcblx0XHR6LmF2YWlsX291dCAtPSBuO1xuXHRcdHoudG90YWxfb3V0ICs9IG47XG5cblx0XHQvLyBjb3B5IGFzIGZhciBhcyBlbmQgb2Ygd2luXG5cdFx0ei5uZXh0X291dC5zZXQodGhhdC53aW4uc3ViYXJyYXkocSwgcSArIG4pLCBwKTtcblx0XHRwICs9IG47XG5cdFx0cSArPSBuO1xuXG5cdFx0Ly8gc2VlIGlmIG1vcmUgdG8gY29weSBhdCBiZWdpbm5pbmcgb2Ygd2luXG5cdFx0aWYgKHEgPT0gdGhhdC5lbmQpIHtcblx0XHRcdC8vIHdyYXAgcG9pbnRlcnNcblx0XHRcdHEgPSAwO1xuXHRcdFx0aWYgKHRoYXQud3JpdGUgPT0gdGhhdC5lbmQpXG5cdFx0XHRcdHRoYXQud3JpdGUgPSAwO1xuXG5cdFx0XHQvLyBjb21wdXRlIGJ5dGVzIHRvIGNvcHlcblx0XHRcdG4gPSB0aGF0LndyaXRlIC0gcTtcblx0XHRcdGlmIChuID4gei5hdmFpbF9vdXQpXG5cdFx0XHRcdG4gPSB6LmF2YWlsX291dDtcblx0XHRcdGlmIChuICE9PSAwICYmIHIgPT0gWl9CVUZfRVJST1IpXG5cdFx0XHRcdHIgPSBaX09LO1xuXG5cdFx0XHQvLyB1cGRhdGUgY291bnRlcnNcblx0XHRcdHouYXZhaWxfb3V0IC09IG47XG5cdFx0XHR6LnRvdGFsX291dCArPSBuO1xuXG5cdFx0XHQvLyBjb3B5XG5cdFx0XHR6Lm5leHRfb3V0LnNldCh0aGF0Lndpbi5zdWJhcnJheShxLCBxICsgbiksIHApO1xuXHRcdFx0cCArPSBuO1xuXHRcdFx0cSArPSBuO1xuXHRcdH1cblxuXHRcdC8vIHVwZGF0ZSBwb2ludGVyc1xuXHRcdHoubmV4dF9vdXRfaW5kZXggPSBwO1xuXHRcdHRoYXQucmVhZCA9IHE7XG5cblx0XHQvLyBkb25lXG5cdFx0cmV0dXJuIHI7XG5cdH07XG5cblx0dGhhdC5wcm9jID0gZnVuY3Rpb24gKHosIHIpIHtcblx0XHRsZXQgdDsgLy8gdGVtcG9yYXJ5IHN0b3JhZ2Vcblx0XHRsZXQgYjsgLy8gYml0IGJ1ZmZlclxuXHRcdGxldCBrOyAvLyBiaXRzIGluIGJpdCBidWZmZXJcblx0XHRsZXQgcDsgLy8gaW5wdXQgZGF0YSBwb2ludGVyXG5cdFx0bGV0IG47IC8vIGJ5dGVzIGF2YWlsYWJsZSB0aGVyZVxuXHRcdGxldCBxOyAvLyBvdXRwdXQgd2luIHdyaXRlIHBvaW50ZXJcblx0XHRsZXQgbTsgLy8gYnl0ZXMgdG8gZW5kIG9mIHdpbiBvciByZWFkIHBvaW50ZXJcblxuXHRcdGxldCBpO1xuXG5cdFx0Ly8gY29weSBpbnB1dC9vdXRwdXQgaW5mb3JtYXRpb24gdG8gbG9jYWxzIChVUERBVEUgbWFjcm8gcmVzdG9yZXMpXG5cdFx0Ly8ge1xuXHRcdHAgPSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0biA9IHouYXZhaWxfaW47XG5cdFx0YiA9IHRoYXQuYml0Yjtcblx0XHRrID0gdGhhdC5iaXRrO1xuXHRcdC8vIH1cblx0XHQvLyB7XG5cdFx0cSA9IHRoYXQud3JpdGU7XG5cdFx0bSA9IC8qIChpbnQpICovKHEgPCB0aGF0LnJlYWQgPyB0aGF0LnJlYWQgLSBxIC0gMSA6IHRoYXQuZW5kIC0gcSk7XG5cdFx0Ly8gfVxuXG5cdFx0Ly8gcHJvY2VzcyBpbnB1dCBiYXNlZCBvbiBjdXJyZW50IHN0YXRlXG5cdFx0Ly8gREVCVUcgZHRyZWVcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG5cdFx0d2hpbGUgKHRydWUpIHtcblx0XHRcdGxldCBibCwgYmQsIHRsLCB0ZCwgYmxfLCBiZF8sIHRsXywgdGRfO1xuXHRcdFx0c3dpdGNoIChtb2RlKSB7XG5cdFx0XHRcdGNhc2UgVFlQRTpcblxuXHRcdFx0XHRcdHdoaWxlIChrIDwgKDMpKSB7XG5cdFx0XHRcdFx0XHRpZiAobiAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRyID0gWl9PSztcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRoYXQuYml0YiA9IGI7XG5cdFx0XHRcdFx0XHRcdHRoYXQuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhhdC5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bi0tO1xuXHRcdFx0XHRcdFx0YiB8PSAoei5yZWFkX2J5dGUocCsrKSAmIDB4ZmYpIDw8IGs7XG5cdFx0XHRcdFx0XHRrICs9IDg7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHQgPSAvKiAoaW50KSAqLyhiICYgNyk7XG5cdFx0XHRcdFx0bGFzdCA9IHQgJiAxO1xuXG5cdFx0XHRcdFx0c3dpdGNoICh0ID4+PiAxKSB7XG5cdFx0XHRcdFx0XHRjYXNlIDA6IC8vIHN0b3JlZFxuXHRcdFx0XHRcdFx0XHQvLyB7XG5cdFx0XHRcdFx0XHRcdGIgPj4+PSAoMyk7XG5cdFx0XHRcdFx0XHRcdGsgLT0gKDMpO1xuXHRcdFx0XHRcdFx0XHQvLyB9XG5cdFx0XHRcdFx0XHRcdHQgPSBrICYgNzsgLy8gZ28gdG8gYnl0ZSBib3VuZGFyeVxuXG5cdFx0XHRcdFx0XHRcdC8vIHtcblx0XHRcdFx0XHRcdFx0YiA+Pj49ICh0KTtcblx0XHRcdFx0XHRcdFx0ayAtPSAodCk7XG5cdFx0XHRcdFx0XHRcdC8vIH1cblx0XHRcdFx0XHRcdFx0bW9kZSA9IExFTlM7IC8vIGdldCBsZW5ndGggb2Ygc3RvcmVkIGJsb2NrXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAxOiAvLyBmaXhlZFxuXHRcdFx0XHRcdFx0XHQvLyB7XG5cdFx0XHRcdFx0XHRcdGJsID0gW107IC8vIG5ldyBBcnJheSgxKTtcblx0XHRcdFx0XHRcdFx0YmQgPSBbXTsgLy8gbmV3IEFycmF5KDEpO1xuXHRcdFx0XHRcdFx0XHR0bCA9IFtbXV07IC8vIG5ldyBBcnJheSgxKTtcblx0XHRcdFx0XHRcdFx0dGQgPSBbW11dOyAvLyBuZXcgQXJyYXkoMSk7XG5cblx0XHRcdFx0XHRcdFx0SW5mVHJlZS5pbmZsYXRlX3RyZWVzX2ZpeGVkKGJsLCBiZCwgdGwsIHRkKTtcblx0XHRcdFx0XHRcdFx0Y29kZXMuaW5pdChibFswXSwgYmRbMF0sIHRsWzBdLCAwLCB0ZFswXSwgMCk7XG5cdFx0XHRcdFx0XHRcdC8vIH1cblxuXHRcdFx0XHRcdFx0XHQvLyB7XG5cdFx0XHRcdFx0XHRcdGIgPj4+PSAoMyk7XG5cdFx0XHRcdFx0XHRcdGsgLT0gKDMpO1xuXHRcdFx0XHRcdFx0XHQvLyB9XG5cblx0XHRcdFx0XHRcdFx0bW9kZSA9IENPREVTO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMjogLy8gZHluYW1pY1xuXG5cdFx0XHRcdFx0XHRcdC8vIHtcblx0XHRcdFx0XHRcdFx0YiA+Pj49ICgzKTtcblx0XHRcdFx0XHRcdFx0ayAtPSAoMyk7XG5cdFx0XHRcdFx0XHRcdC8vIH1cblxuXHRcdFx0XHRcdFx0XHRtb2RlID0gVEFCTEU7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAzOiAvLyBpbGxlZ2FsXG5cblx0XHRcdFx0XHRcdFx0Ly8ge1xuXHRcdFx0XHRcdFx0XHRiID4+Pj0gKDMpO1xuXHRcdFx0XHRcdFx0XHRrIC09ICgzKTtcblx0XHRcdFx0XHRcdFx0Ly8gfVxuXHRcdFx0XHRcdFx0XHRtb2RlID0gQkFEQkxPQ0tTO1xuXHRcdFx0XHRcdFx0XHR6Lm1zZyA9IFwiaW52YWxpZCBibG9jayB0eXBlXCI7XG5cdFx0XHRcdFx0XHRcdHIgPSBaX0RBVEFfRVJST1I7XG5cblx0XHRcdFx0XHRcdFx0dGhhdC5iaXRiID0gYjtcblx0XHRcdFx0XHRcdFx0dGhhdC5iaXRrID0gaztcblx0XHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRcdFx0dGhhdC53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGF0LmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIExFTlM6XG5cblx0XHRcdFx0XHR3aGlsZSAoayA8ICgzMikpIHtcblx0XHRcdFx0XHRcdGlmIChuICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdHIgPSBaX09LO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhhdC5iaXRiID0gYjtcblx0XHRcdFx0XHRcdFx0dGhhdC5iaXRrID0gaztcblx0XHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRcdFx0dGhhdC53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGF0LmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRuLS07XG5cdFx0XHRcdFx0XHRiIHw9ICh6LnJlYWRfYnl0ZShwKyspICYgMHhmZikgPDwgaztcblx0XHRcdFx0XHRcdGsgKz0gODtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoKCgofmIpID4+PiAxNikgJiAweGZmZmYpICE9IChiICYgMHhmZmZmKSkge1xuXHRcdFx0XHRcdFx0bW9kZSA9IEJBREJMT0NLUztcblx0XHRcdFx0XHRcdHoubXNnID0gXCJpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzXCI7XG5cdFx0XHRcdFx0XHRyID0gWl9EQVRBX0VSUk9SO1xuXG5cdFx0XHRcdFx0XHR0aGF0LmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0dGhhdC5iaXRrID0gaztcblx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bGVmdCA9IChiICYgMHhmZmZmKTtcblx0XHRcdFx0XHRiID0gayA9IDA7IC8vIGR1bXAgYml0c1xuXHRcdFx0XHRcdG1vZGUgPSBsZWZ0ICE9PSAwID8gU1RPUkVEIDogKGxhc3QgIT09IDAgPyBEUlkgOiBUWVBFKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBTVE9SRUQ6XG5cdFx0XHRcdFx0aWYgKG4gPT09IDApIHtcblx0XHRcdFx0XHRcdHRoYXQuYml0YiA9IGI7XG5cdFx0XHRcdFx0XHR0aGF0LmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0dGhhdC53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhhdC5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChtID09PSAwKSB7XG5cdFx0XHRcdFx0XHRpZiAocSA9PSB0aGF0LmVuZCAmJiB0aGF0LnJlYWQgIT09IDApIHtcblx0XHRcdFx0XHRcdFx0cSA9IDA7XG5cdFx0XHRcdFx0XHRcdG0gPSAvKiAoaW50KSAqLyhxIDwgdGhhdC5yZWFkID8gdGhhdC5yZWFkIC0gcSAtIDEgOiB0aGF0LmVuZCAtIHEpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKG0gPT09IDApIHtcblx0XHRcdFx0XHRcdFx0dGhhdC53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdHIgPSB0aGF0LmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0XHRcdHEgPSB0aGF0LndyaXRlO1xuXHRcdFx0XHRcdFx0XHRtID0gLyogKGludCkgKi8ocSA8IHRoYXQucmVhZCA/IHRoYXQucmVhZCAtIHEgLSAxIDogdGhhdC5lbmQgLSBxKTtcblx0XHRcdFx0XHRcdFx0aWYgKHEgPT0gdGhhdC5lbmQgJiYgdGhhdC5yZWFkICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0cSA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0bSA9IC8qIChpbnQpICovKHEgPCB0aGF0LnJlYWQgPyB0aGF0LnJlYWQgLSBxIC0gMSA6IHRoYXQuZW5kIC0gcSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKG0gPT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGF0LmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0XHRcdHRoYXQuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHRcdFx0dGhhdC53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyID0gWl9PSztcblxuXHRcdFx0XHRcdHQgPSBsZWZ0O1xuXHRcdFx0XHRcdGlmICh0ID4gbilcblx0XHRcdFx0XHRcdHQgPSBuO1xuXHRcdFx0XHRcdGlmICh0ID4gbSlcblx0XHRcdFx0XHRcdHQgPSBtO1xuXHRcdFx0XHRcdHRoYXQud2luLnNldCh6LnJlYWRfYnVmKHAsIHQpLCBxKTtcblx0XHRcdFx0XHRwICs9IHQ7XG5cdFx0XHRcdFx0biAtPSB0O1xuXHRcdFx0XHRcdHEgKz0gdDtcblx0XHRcdFx0XHRtIC09IHQ7XG5cdFx0XHRcdFx0aWYgKChsZWZ0IC09IHQpICE9PSAwKVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0bW9kZSA9IGxhc3QgIT09IDAgPyBEUlkgOiBUWVBFO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFRBQkxFOlxuXG5cdFx0XHRcdFx0d2hpbGUgKGsgPCAoMTQpKSB7XG5cdFx0XHRcdFx0XHRpZiAobiAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRyID0gWl9PSztcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRoYXQuYml0YiA9IGI7XG5cdFx0XHRcdFx0XHRcdHRoYXQuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhhdC5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRuLS07XG5cdFx0XHRcdFx0XHRiIHw9ICh6LnJlYWRfYnl0ZShwKyspICYgMHhmZikgPDwgaztcblx0XHRcdFx0XHRcdGsgKz0gODtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0YWJsZSA9IHQgPSAoYiAmIDB4M2ZmZik7XG5cdFx0XHRcdFx0aWYgKCh0ICYgMHgxZikgPiAyOSB8fCAoKHQgPj4gNSkgJiAweDFmKSA+IDI5KSB7XG5cdFx0XHRcdFx0XHRtb2RlID0gQkFEQkxPQ0tTO1xuXHRcdFx0XHRcdFx0ei5tc2cgPSBcInRvbyBtYW55IGxlbmd0aCBvciBkaXN0YW5jZSBzeW1ib2xzXCI7XG5cdFx0XHRcdFx0XHRyID0gWl9EQVRBX0VSUk9SO1xuXG5cdFx0XHRcdFx0XHR0aGF0LmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0dGhhdC5iaXRrID0gaztcblx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dCA9IDI1OCArICh0ICYgMHgxZikgKyAoKHQgPj4gNSkgJiAweDFmKTtcblx0XHRcdFx0XHRpZiAoIWJsZW5zIHx8IGJsZW5zLmxlbmd0aCA8IHQpIHtcblx0XHRcdFx0XHRcdGJsZW5zID0gW107IC8vIG5ldyBBcnJheSh0KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IHQ7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRibGVuc1tpXSA9IDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8ge1xuXHRcdFx0XHRcdGIgPj4+PSAoMTQpO1xuXHRcdFx0XHRcdGsgLT0gKDE0KTtcblx0XHRcdFx0XHQvLyB9XG5cblx0XHRcdFx0XHRpbmRleCA9IDA7XG5cdFx0XHRcdFx0bW9kZSA9IEJUUkVFO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgQlRSRUU6XG5cdFx0XHRcdFx0d2hpbGUgKGluZGV4IDwgNCArICh0YWJsZSA+Pj4gMTApKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoayA8ICgzKSkge1xuXHRcdFx0XHRcdFx0XHRpZiAobiAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdHIgPSBaX09LO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoYXQuYml0YiA9IGI7XG5cdFx0XHRcdFx0XHRcdFx0dGhhdC5iaXRrID0gaztcblx0XHRcdFx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRcdFx0XHR0aGF0LndyaXRlID0gcTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhhdC5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdG4tLTtcblx0XHRcdFx0XHRcdFx0YiB8PSAoei5yZWFkX2J5dGUocCsrKSAmIDB4ZmYpIDw8IGs7XG5cdFx0XHRcdFx0XHRcdGsgKz0gODtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0YmxlbnNbYm9yZGVyW2luZGV4KytdXSA9IGIgJiA3O1xuXG5cdFx0XHRcdFx0XHQvLyB7XG5cdFx0XHRcdFx0XHRiID4+Pj0gKDMpO1xuXHRcdFx0XHRcdFx0ayAtPSAoMyk7XG5cdFx0XHRcdFx0XHQvLyB9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0d2hpbGUgKGluZGV4IDwgMTkpIHtcblx0XHRcdFx0XHRcdGJsZW5zW2JvcmRlcltpbmRleCsrXV0gPSAwO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJiWzBdID0gNztcblx0XHRcdFx0XHR0ID0gaW5mdHJlZS5pbmZsYXRlX3RyZWVzX2JpdHMoYmxlbnMsIGJiLCB0YiwgaHVmdHMsIHopO1xuXHRcdFx0XHRcdGlmICh0ICE9IFpfT0spIHtcblx0XHRcdFx0XHRcdHIgPSB0O1xuXHRcdFx0XHRcdFx0aWYgKHIgPT0gWl9EQVRBX0VSUk9SKSB7XG5cdFx0XHRcdFx0XHRcdGJsZW5zID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0bW9kZSA9IEJBREJMT0NLUztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dGhhdC5iaXRiID0gYjtcblx0XHRcdFx0XHRcdHRoYXQuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHR0aGF0LndyaXRlID0gcTtcblx0XHRcdFx0XHRcdHJldHVybiB0aGF0LmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aW5kZXggPSAwO1xuXHRcdFx0XHRcdG1vZGUgPSBEVFJFRTtcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlIERUUkVFOlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cblx0XHRcdFx0XHR3aGlsZSAodHJ1ZSkge1xuXHRcdFx0XHRcdFx0dCA9IHRhYmxlO1xuXHRcdFx0XHRcdFx0aWYgKGluZGV4ID49IDI1OCArICh0ICYgMHgxZikgKyAoKHQgPj4gNSkgJiAweDFmKSkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bGV0IGosIGM7XG5cblx0XHRcdFx0XHRcdHQgPSBiYlswXTtcblxuXHRcdFx0XHRcdFx0d2hpbGUgKGsgPCAodCkpIHtcblx0XHRcdFx0XHRcdFx0aWYgKG4gIT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRyID0gWl9PSztcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGF0LmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0XHRcdHRoYXQuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHRcdFx0dGhhdC53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRuLS07XG5cdFx0XHRcdFx0XHRcdGIgfD0gKHoucmVhZF9ieXRlKHArKykgJiAweGZmKSA8PCBrO1xuXHRcdFx0XHRcdFx0XHRrICs9IDg7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIGlmICh0YlswXSA9PSAtMSkge1xuXHRcdFx0XHRcdFx0Ly8gU3lzdGVtLmVyci5wcmludGxuKFwibnVsbC4uLlwiKTtcblx0XHRcdFx0XHRcdC8vIH1cblxuXHRcdFx0XHRcdFx0dCA9IGh1ZnRzWyh0YlswXSArIChiICYgaW5mbGF0ZV9tYXNrW3RdKSkgKiAzICsgMV07XG5cdFx0XHRcdFx0XHRjID0gaHVmdHNbKHRiWzBdICsgKGIgJiBpbmZsYXRlX21hc2tbdF0pKSAqIDMgKyAyXTtcblxuXHRcdFx0XHRcdFx0aWYgKGMgPCAxNikge1xuXHRcdFx0XHRcdFx0XHRiID4+Pj0gKHQpO1xuXHRcdFx0XHRcdFx0XHRrIC09ICh0KTtcblx0XHRcdFx0XHRcdFx0YmxlbnNbaW5kZXgrK10gPSBjO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHsgLy8gYyA9PSAxNi4uMThcblx0XHRcdFx0XHRcdFx0aSA9IGMgPT0gMTggPyA3IDogYyAtIDE0O1xuXHRcdFx0XHRcdFx0XHRqID0gYyA9PSAxOCA/IDExIDogMztcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoayA8ICh0ICsgaSkpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAobiAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ciA9IFpfT0s7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoYXQuYml0YiA9IGI7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGF0LmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0XHRcdFx0dGhhdC53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhhdC5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRuLS07XG5cdFx0XHRcdFx0XHRcdFx0YiB8PSAoei5yZWFkX2J5dGUocCsrKSAmIDB4ZmYpIDw8IGs7XG5cdFx0XHRcdFx0XHRcdFx0ayArPSA4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0YiA+Pj49ICh0KTtcblx0XHRcdFx0XHRcdFx0ayAtPSAodCk7XG5cblx0XHRcdFx0XHRcdFx0aiArPSAoYiAmIGluZmxhdGVfbWFza1tpXSk7XG5cblx0XHRcdFx0XHRcdFx0YiA+Pj49IChpKTtcblx0XHRcdFx0XHRcdFx0ayAtPSAoaSk7XG5cblx0XHRcdFx0XHRcdFx0aSA9IGluZGV4O1xuXHRcdFx0XHRcdFx0XHR0ID0gdGFibGU7XG5cdFx0XHRcdFx0XHRcdGlmIChpICsgaiA+IDI1OCArICh0ICYgMHgxZikgKyAoKHQgPj4gNSkgJiAweDFmKSB8fCAoYyA9PSAxNiAmJiBpIDwgMSkpIHtcblx0XHRcdFx0XHRcdFx0XHRibGVucyA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdFx0bW9kZSA9IEJBREJMT0NLUztcblx0XHRcdFx0XHRcdFx0XHR6Lm1zZyA9IFwiaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdFwiO1xuXHRcdFx0XHRcdFx0XHRcdHIgPSBaX0RBVEFfRVJST1I7XG5cblx0XHRcdFx0XHRcdFx0XHR0aGF0LmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0XHRcdHRoYXQuYml0ayA9IGs7XG5cdFx0XHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0XHRcdFx0dGhhdC53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGMgPSBjID09IDE2ID8gYmxlbnNbaSAtIDFdIDogMDtcblx0XHRcdFx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdFx0XHRcdGJsZW5zW2krK10gPSBjO1xuXHRcdFx0XHRcdFx0XHR9IHdoaWxlICgtLWogIT09IDApO1xuXHRcdFx0XHRcdFx0XHRpbmRleCA9IGk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGJbMF0gPSAtMTtcblx0XHRcdFx0XHQvLyB7XG5cdFx0XHRcdFx0YmxfID0gW107IC8vIG5ldyBBcnJheSgxKTtcblx0XHRcdFx0XHRiZF8gPSBbXTsgLy8gbmV3IEFycmF5KDEpO1xuXHRcdFx0XHRcdHRsXyA9IFtdOyAvLyBuZXcgQXJyYXkoMSk7XG5cdFx0XHRcdFx0dGRfID0gW107IC8vIG5ldyBBcnJheSgxKTtcblx0XHRcdFx0XHRibF9bMF0gPSA5OyAvLyBtdXN0IGJlIDw9IDkgZm9yIGxvb2thaGVhZCBhc3N1bXB0aW9uc1xuXHRcdFx0XHRcdGJkX1swXSA9IDY7IC8vIG11c3QgYmUgPD0gOSBmb3IgbG9va2FoZWFkIGFzc3VtcHRpb25zXG5cblx0XHRcdFx0XHR0ID0gdGFibGU7XG5cdFx0XHRcdFx0dCA9IGluZnRyZWUuaW5mbGF0ZV90cmVlc19keW5hbWljKDI1NyArICh0ICYgMHgxZiksIDEgKyAoKHQgPj4gNSkgJiAweDFmKSwgYmxlbnMsIGJsXywgYmRfLCB0bF8sIHRkXywgaHVmdHMsIHopO1xuXG5cdFx0XHRcdFx0aWYgKHQgIT0gWl9PSykge1xuXHRcdFx0XHRcdFx0aWYgKHQgPT0gWl9EQVRBX0VSUk9SKSB7XG5cdFx0XHRcdFx0XHRcdGJsZW5zID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0bW9kZSA9IEJBREJMT0NLUztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHIgPSB0O1xuXG5cdFx0XHRcdFx0XHR0aGF0LmJpdGIgPSBiO1xuXHRcdFx0XHRcdFx0dGhhdC5iaXRrID0gaztcblx0XHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29kZXMuaW5pdChibF9bMF0sIGJkX1swXSwgaHVmdHMsIHRsX1swXSwgaHVmdHMsIHRkX1swXSk7XG5cdFx0XHRcdFx0Ly8gfVxuXHRcdFx0XHRcdG1vZGUgPSBDT0RFUztcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlIENPREVTOlxuXHRcdFx0XHRcdHRoYXQuYml0YiA9IGI7XG5cdFx0XHRcdFx0dGhhdC5iaXRrID0gaztcblx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHR0aGF0LndyaXRlID0gcTtcblxuXHRcdFx0XHRcdGlmICgociA9IGNvZGVzLnByb2ModGhhdCwgeiwgcikpICE9IFpfU1RSRUFNX0VORCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ciA9IFpfT0s7XG5cdFx0XHRcdFx0Y29kZXMuZnJlZSh6KTtcblxuXHRcdFx0XHRcdHAgPSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0biA9IHouYXZhaWxfaW47XG5cdFx0XHRcdFx0YiA9IHRoYXQuYml0Yjtcblx0XHRcdFx0XHRrID0gdGhhdC5iaXRrO1xuXHRcdFx0XHRcdHEgPSB0aGF0LndyaXRlO1xuXHRcdFx0XHRcdG0gPSAvKiAoaW50KSAqLyhxIDwgdGhhdC5yZWFkID8gdGhhdC5yZWFkIC0gcSAtIDEgOiB0aGF0LmVuZCAtIHEpO1xuXG5cdFx0XHRcdFx0aWYgKGxhc3QgPT09IDApIHtcblx0XHRcdFx0XHRcdG1vZGUgPSBUWVBFO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGUgPSBEUlk7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSBEUlk6XG5cdFx0XHRcdFx0dGhhdC53cml0ZSA9IHE7XG5cdFx0XHRcdFx0ciA9IHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0XHRxID0gdGhhdC53cml0ZTtcblx0XHRcdFx0XHRtID0gLyogKGludCkgKi8ocSA8IHRoYXQucmVhZCA/IHRoYXQucmVhZCAtIHEgLSAxIDogdGhhdC5lbmQgLSBxKTtcblx0XHRcdFx0XHRpZiAodGhhdC5yZWFkICE9IHRoYXQud3JpdGUpIHtcblx0XHRcdFx0XHRcdHRoYXQuYml0YiA9IGI7XG5cdFx0XHRcdFx0XHR0aGF0LmJpdGsgPSBrO1xuXHRcdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdFx0dGhhdC53cml0ZSA9IHE7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhhdC5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RlID0gRE9ORUxPQ0tTO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgRE9ORUxPQ0tTOlxuXHRcdFx0XHRcdHIgPSBaX1NUUkVBTV9FTkQ7XG5cblx0XHRcdFx0XHR0aGF0LmJpdGIgPSBiO1xuXHRcdFx0XHRcdHRoYXQuYml0ayA9IGs7XG5cdFx0XHRcdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0XHRcdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdFx0XHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0XHRcdFx0dGhhdC53cml0ZSA9IHE7XG5cdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0XHRcdFx0Y2FzZSBCQURCTE9DS1M6XG5cdFx0XHRcdFx0ciA9IFpfREFUQV9FUlJPUjtcblxuXHRcdFx0XHRcdHRoYXQuYml0YiA9IGI7XG5cdFx0XHRcdFx0dGhhdC5iaXRrID0gaztcblx0XHRcdFx0XHR6LmF2YWlsX2luID0gbjtcblx0XHRcdFx0XHR6LnRvdGFsX2luICs9IHAgLSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHRcdFx0ei5uZXh0X2luX2luZGV4ID0gcDtcblx0XHRcdFx0XHR0aGF0LndyaXRlID0gcTtcblx0XHRcdFx0XHRyZXR1cm4gdGhhdC5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0ciA9IFpfU1RSRUFNX0VSUk9SO1xuXG5cdFx0XHRcdFx0dGhhdC5iaXRiID0gYjtcblx0XHRcdFx0XHR0aGF0LmJpdGsgPSBrO1xuXHRcdFx0XHRcdHouYXZhaWxfaW4gPSBuO1xuXHRcdFx0XHRcdHoudG90YWxfaW4gKz0gcCAtIHoubmV4dF9pbl9pbmRleDtcblx0XHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSBwO1xuXHRcdFx0XHRcdHRoYXQud3JpdGUgPSBxO1xuXHRcdFx0XHRcdHJldHVybiB0aGF0LmluZmxhdGVfZmx1c2goeiwgcik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdHRoYXQuZnJlZSA9IGZ1bmN0aW9uICh6KSB7XG5cdFx0dGhhdC5yZXNldCh6LCBudWxsKTtcblx0XHR0aGF0LndpbiA9IG51bGw7XG5cdFx0aHVmdHMgPSBudWxsO1xuXHRcdC8vIFpGUkVFKHosIHMpO1xuXHR9O1xuXG5cdHRoYXQuc2V0X2RpY3Rpb25hcnkgPSBmdW5jdGlvbiAoZCwgc3RhcnQsIG4pIHtcblx0XHR0aGF0Lndpbi5zZXQoZC5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBuKSwgMCk7XG5cdFx0dGhhdC5yZWFkID0gdGhhdC53cml0ZSA9IG47XG5cdH07XG5cblx0Ly8gUmV0dXJucyB0cnVlIGlmIGluZmxhdGUgaXMgY3VycmVudGx5IGF0IHRoZSBlbmQgb2YgYSBibG9jayBnZW5lcmF0ZWRcblx0Ly8gYnkgWl9TWU5DX0ZMVVNIIG9yIFpfRlVMTF9GTFVTSC5cblx0dGhhdC5zeW5jX3BvaW50ID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBtb2RlID09IExFTlMgPyAxIDogMDtcblx0fTtcblxufVxuXG4vLyBJbmZsYXRlXG5cbi8vIHByZXNldCBkaWN0aW9uYXJ5IGZsYWcgaW4gemxpYiBoZWFkZXJcbmNvbnN0IFBSRVNFVF9ESUNUID0gMHgyMDtcblxuY29uc3QgWl9ERUZMQVRFRCA9IDg7XG5cbmNvbnN0IE1FVEhPRCA9IDA7IC8vIHdhaXRpbmcgZm9yIG1ldGhvZCBieXRlXG5jb25zdCBGTEFHID0gMTsgLy8gd2FpdGluZyBmb3IgZmxhZyBieXRlXG5jb25zdCBESUNUNCA9IDI7IC8vIGZvdXIgZGljdGlvbmFyeSBjaGVjayBieXRlcyB0byBnb1xuY29uc3QgRElDVDMgPSAzOyAvLyB0aHJlZSBkaWN0aW9uYXJ5IGNoZWNrIGJ5dGVzIHRvIGdvXG5jb25zdCBESUNUMiA9IDQ7IC8vIHR3byBkaWN0aW9uYXJ5IGNoZWNrIGJ5dGVzIHRvIGdvXG5jb25zdCBESUNUMSA9IDU7IC8vIG9uZSBkaWN0aW9uYXJ5IGNoZWNrIGJ5dGUgdG8gZ29cbmNvbnN0IERJQ1QwID0gNjsgLy8gd2FpdGluZyBmb3IgaW5mbGF0ZVNldERpY3Rpb25hcnlcbmNvbnN0IEJMT0NLUyA9IDc7IC8vIGRlY29tcHJlc3NpbmcgYmxvY2tzXG5jb25zdCBET05FID0gMTI7IC8vIGZpbmlzaGVkIGNoZWNrLCBkb25lXG5jb25zdCBCQUQgPSAxMzsgLy8gZ290IGFuIGVycm9yLS1zdGF5IGhlcmVcblxuY29uc3QgbWFyayA9IFswLCAwLCAweGZmLCAweGZmXTtcblxuZnVuY3Rpb24gSW5mbGF0ZSgpIHtcblx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cblx0dGhhdC5tb2RlID0gMDsgLy8gY3VycmVudCBpbmZsYXRlIG1vZGVcblxuXHQvLyBtb2RlIGRlcGVuZGVudCBpbmZvcm1hdGlvblxuXHR0aGF0Lm1ldGhvZCA9IDA7IC8vIGlmIEZMQUdTLCBtZXRob2QgYnl0ZVxuXG5cdC8vIGlmIENIRUNLLCBjaGVjayB2YWx1ZXMgdG8gY29tcGFyZVxuXHR0aGF0LndhcyA9IFswXTsgLy8gbmV3IEFycmF5KDEpOyAvLyBjb21wdXRlZCBjaGVjayB2YWx1ZVxuXHR0aGF0Lm5lZWQgPSAwOyAvLyBzdHJlYW0gY2hlY2sgdmFsdWVcblxuXHQvLyBpZiBCQUQsIGluZmxhdGVTeW5jJ3MgbWFya2VyIGJ5dGVzIGNvdW50XG5cdHRoYXQubWFya2VyID0gMDtcblxuXHQvLyBtb2RlIGluZGVwZW5kZW50IGluZm9ybWF0aW9uXG5cdHRoYXQud2JpdHMgPSAwOyAvLyBsb2cyKHdpbiBzaXplKSAoOC4uMTUsIGRlZmF1bHRzIHRvIDE1KVxuXG5cdC8vIHRoaXMuYmxvY2tzOyAvLyBjdXJyZW50IGluZmxhdGVfYmxvY2tzIHN0YXRlXG5cblx0ZnVuY3Rpb24gaW5mbGF0ZVJlc2V0KHopIHtcblx0XHRpZiAoIXogfHwgIXouaXN0YXRlKVxuXHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXG5cdFx0ei50b3RhbF9pbiA9IHoudG90YWxfb3V0ID0gMDtcblx0XHR6Lm1zZyA9IG51bGw7XG5cdFx0ei5pc3RhdGUubW9kZSA9IEJMT0NLUztcblx0XHR6LmlzdGF0ZS5ibG9ja3MucmVzZXQoeiwgbnVsbCk7XG5cdFx0cmV0dXJuIFpfT0s7XG5cdH1cblxuXHR0aGF0LmluZmxhdGVFbmQgPSBmdW5jdGlvbiAoeikge1xuXHRcdGlmICh0aGF0LmJsb2Nrcylcblx0XHRcdHRoYXQuYmxvY2tzLmZyZWUoeik7XG5cdFx0dGhhdC5ibG9ja3MgPSBudWxsO1xuXHRcdC8vIFpGUkVFKHosIHotPnN0YXRlKTtcblx0XHRyZXR1cm4gWl9PSztcblx0fTtcblxuXHR0aGF0LmluZmxhdGVJbml0ID0gZnVuY3Rpb24gKHosIHcpIHtcblx0XHR6Lm1zZyA9IG51bGw7XG5cdFx0dGhhdC5ibG9ja3MgPSBudWxsO1xuXG5cdFx0Ly8gc2V0IHdpbiBzaXplXG5cdFx0aWYgKHcgPCA4IHx8IHcgPiAxNSkge1xuXHRcdFx0dGhhdC5pbmZsYXRlRW5kKHopO1xuXHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHRcdH1cblx0XHR0aGF0LndiaXRzID0gdztcblxuXHRcdHouaXN0YXRlLmJsb2NrcyA9IG5ldyBJbmZCbG9ja3MoeiwgMSA8PCB3KTtcblxuXHRcdC8vIHJlc2V0IHN0YXRlXG5cdFx0aW5mbGF0ZVJlc2V0KHopO1xuXHRcdHJldHVybiBaX09LO1xuXHR9O1xuXG5cdHRoYXQuaW5mbGF0ZSA9IGZ1bmN0aW9uICh6LCBmKSB7XG5cdFx0bGV0IHI7XG5cdFx0bGV0IGI7XG5cblx0XHRpZiAoIXogfHwgIXouaXN0YXRlIHx8ICF6Lm5leHRfaW4pXG5cdFx0XHRyZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdFx0Y29uc3QgaXN0YXRlID0gei5pc3RhdGU7XG5cdFx0ZiA9IGYgPT0gWl9GSU5JU0ggPyBaX0JVRl9FUlJPUiA6IFpfT0s7XG5cdFx0ciA9IFpfQlVGX0VSUk9SO1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cblx0XHR3aGlsZSAodHJ1ZSkge1xuXHRcdFx0c3dpdGNoIChpc3RhdGUubW9kZSkge1xuXHRcdFx0XHRjYXNlIE1FVEhPRDpcblxuXHRcdFx0XHRcdGlmICh6LmF2YWlsX2luID09PSAwKVxuXHRcdFx0XHRcdFx0cmV0dXJuIHI7XG5cdFx0XHRcdFx0ciA9IGY7XG5cblx0XHRcdFx0XHR6LmF2YWlsX2luLS07XG5cdFx0XHRcdFx0ei50b3RhbF9pbisrO1xuXHRcdFx0XHRcdGlmICgoKGlzdGF0ZS5tZXRob2QgPSB6LnJlYWRfYnl0ZSh6Lm5leHRfaW5faW5kZXgrKykpICYgMHhmKSAhPSBaX0RFRkxBVEVEKSB7XG5cdFx0XHRcdFx0XHRpc3RhdGUubW9kZSA9IEJBRDtcblx0XHRcdFx0XHRcdHoubXNnID0gXCJ1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZFwiO1xuXHRcdFx0XHRcdFx0aXN0YXRlLm1hcmtlciA9IDU7IC8vIGNhbid0IHRyeSBpbmZsYXRlU3luY1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICgoaXN0YXRlLm1ldGhvZCA+PiA0KSArIDggPiBpc3RhdGUud2JpdHMpIHtcblx0XHRcdFx0XHRcdGlzdGF0ZS5tb2RlID0gQkFEO1xuXHRcdFx0XHRcdFx0ei5tc2cgPSBcImludmFsaWQgd2luIHNpemVcIjtcblx0XHRcdFx0XHRcdGlzdGF0ZS5tYXJrZXIgPSA1OyAvLyBjYW4ndCB0cnkgaW5mbGF0ZVN5bmNcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpc3RhdGUubW9kZSA9IEZMQUc7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSBGTEFHOlxuXG5cdFx0XHRcdFx0aWYgKHouYXZhaWxfaW4gPT09IDApXG5cdFx0XHRcdFx0XHRyZXR1cm4gcjtcblx0XHRcdFx0XHRyID0gZjtcblxuXHRcdFx0XHRcdHouYXZhaWxfaW4tLTtcblx0XHRcdFx0XHR6LnRvdGFsX2luKys7XG5cdFx0XHRcdFx0YiA9ICh6LnJlYWRfYnl0ZSh6Lm5leHRfaW5faW5kZXgrKykpICYgMHhmZjtcblxuXHRcdFx0XHRcdGlmICgoKChpc3RhdGUubWV0aG9kIDw8IDgpICsgYikgJSAzMSkgIT09IDApIHtcblx0XHRcdFx0XHRcdGlzdGF0ZS5tb2RlID0gQkFEO1xuXHRcdFx0XHRcdFx0ei5tc2cgPSBcImluY29ycmVjdCBoZWFkZXIgY2hlY2tcIjtcblx0XHRcdFx0XHRcdGlzdGF0ZS5tYXJrZXIgPSA1OyAvLyBjYW4ndCB0cnkgaW5mbGF0ZVN5bmNcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICgoYiAmIFBSRVNFVF9ESUNUKSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0aXN0YXRlLm1vZGUgPSBCTE9DS1M7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aXN0YXRlLm1vZGUgPSBESUNUNDtcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlIERJQ1Q0OlxuXG5cdFx0XHRcdFx0aWYgKHouYXZhaWxfaW4gPT09IDApXG5cdFx0XHRcdFx0XHRyZXR1cm4gcjtcblx0XHRcdFx0XHRyID0gZjtcblxuXHRcdFx0XHRcdHouYXZhaWxfaW4tLTtcblx0XHRcdFx0XHR6LnRvdGFsX2luKys7XG5cdFx0XHRcdFx0aXN0YXRlLm5lZWQgPSAoKHoucmVhZF9ieXRlKHoubmV4dF9pbl9pbmRleCsrKSAmIDB4ZmYpIDw8IDI0KSAmIDB4ZmYwMDAwMDA7XG5cdFx0XHRcdFx0aXN0YXRlLm1vZGUgPSBESUNUMztcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlIERJQ1QzOlxuXG5cdFx0XHRcdFx0aWYgKHouYXZhaWxfaW4gPT09IDApXG5cdFx0XHRcdFx0XHRyZXR1cm4gcjtcblx0XHRcdFx0XHRyID0gZjtcblxuXHRcdFx0XHRcdHouYXZhaWxfaW4tLTtcblx0XHRcdFx0XHR6LnRvdGFsX2luKys7XG5cdFx0XHRcdFx0aXN0YXRlLm5lZWQgKz0gKCh6LnJlYWRfYnl0ZSh6Lm5leHRfaW5faW5kZXgrKykgJiAweGZmKSA8PCAxNikgJiAweGZmMDAwMDtcblx0XHRcdFx0XHRpc3RhdGUubW9kZSA9IERJQ1QyO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgRElDVDI6XG5cblx0XHRcdFx0XHRpZiAoei5hdmFpbF9pbiA9PT0gMClcblx0XHRcdFx0XHRcdHJldHVybiByO1xuXHRcdFx0XHRcdHIgPSBmO1xuXG5cdFx0XHRcdFx0ei5hdmFpbF9pbi0tO1xuXHRcdFx0XHRcdHoudG90YWxfaW4rKztcblx0XHRcdFx0XHRpc3RhdGUubmVlZCArPSAoKHoucmVhZF9ieXRlKHoubmV4dF9pbl9pbmRleCsrKSAmIDB4ZmYpIDw8IDgpICYgMHhmZjAwO1xuXHRcdFx0XHRcdGlzdGF0ZS5tb2RlID0gRElDVDE7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSBESUNUMTpcblxuXHRcdFx0XHRcdGlmICh6LmF2YWlsX2luID09PSAwKVxuXHRcdFx0XHRcdFx0cmV0dXJuIHI7XG5cdFx0XHRcdFx0ciA9IGY7XG5cblx0XHRcdFx0XHR6LmF2YWlsX2luLS07XG5cdFx0XHRcdFx0ei50b3RhbF9pbisrO1xuXHRcdFx0XHRcdGlzdGF0ZS5uZWVkICs9ICh6LnJlYWRfYnl0ZSh6Lm5leHRfaW5faW5kZXgrKykgJiAweGZmKTtcblx0XHRcdFx0XHRpc3RhdGUubW9kZSA9IERJQ1QwO1xuXHRcdFx0XHRcdHJldHVybiBaX05FRURfRElDVDtcblx0XHRcdFx0Y2FzZSBESUNUMDpcblx0XHRcdFx0XHRpc3RhdGUubW9kZSA9IEJBRDtcblx0XHRcdFx0XHR6Lm1zZyA9IFwibmVlZCBkaWN0aW9uYXJ5XCI7XG5cdFx0XHRcdFx0aXN0YXRlLm1hcmtlciA9IDA7IC8vIGNhbiB0cnkgaW5mbGF0ZVN5bmNcblx0XHRcdFx0XHRyZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdFx0XHRcdGNhc2UgQkxPQ0tTOlxuXG5cdFx0XHRcdFx0ciA9IGlzdGF0ZS5ibG9ja3MucHJvYyh6LCByKTtcblx0XHRcdFx0XHRpZiAociA9PSBaX0RBVEFfRVJST1IpIHtcblx0XHRcdFx0XHRcdGlzdGF0ZS5tb2RlID0gQkFEO1xuXHRcdFx0XHRcdFx0aXN0YXRlLm1hcmtlciA9IDA7IC8vIGNhbiB0cnkgaW5mbGF0ZVN5bmNcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAociA9PSBaX09LKSB7XG5cdFx0XHRcdFx0XHRyID0gZjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHIgIT0gWl9TVFJFQU1fRU5EKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ciA9IGY7XG5cdFx0XHRcdFx0aXN0YXRlLmJsb2Nrcy5yZXNldCh6LCBpc3RhdGUud2FzKTtcblx0XHRcdFx0XHRpc3RhdGUubW9kZSA9IERPTkU7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSBET05FOlxuXHRcdFx0XHRcdHouYXZhaWxfaW4gPSAwO1xuXHRcdFx0XHRcdHJldHVybiBaX1NUUkVBTV9FTkQ7XG5cdFx0XHRcdGNhc2UgQkFEOlxuXHRcdFx0XHRcdHJldHVybiBaX0RBVEFfRVJST1I7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHR0aGF0LmluZmxhdGVTZXREaWN0aW9uYXJ5ID0gZnVuY3Rpb24gKHosIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgpIHtcblx0XHRsZXQgaW5kZXggPSAwLCBsZW5ndGggPSBkaWN0TGVuZ3RoO1xuXHRcdGlmICgheiB8fCAhei5pc3RhdGUgfHwgei5pc3RhdGUubW9kZSAhPSBESUNUMClcblx0XHRcdHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblx0XHRjb25zdCBpc3RhdGUgPSB6LmlzdGF0ZTtcblx0XHRpZiAobGVuZ3RoID49ICgxIDw8IGlzdGF0ZS53Yml0cykpIHtcblx0XHRcdGxlbmd0aCA9ICgxIDw8IGlzdGF0ZS53Yml0cykgLSAxO1xuXHRcdFx0aW5kZXggPSBkaWN0TGVuZ3RoIC0gbGVuZ3RoO1xuXHRcdH1cblx0XHRpc3RhdGUuYmxvY2tzLnNldF9kaWN0aW9uYXJ5KGRpY3Rpb25hcnksIGluZGV4LCBsZW5ndGgpO1xuXHRcdGlzdGF0ZS5tb2RlID0gQkxPQ0tTO1xuXHRcdHJldHVybiBaX09LO1xuXHR9O1xuXG5cdHRoYXQuaW5mbGF0ZVN5bmMgPSBmdW5jdGlvbiAoeikge1xuXHRcdGxldCBuOyAvLyBudW1iZXIgb2YgYnl0ZXMgdG8gbG9vayBhdFxuXHRcdGxldCBwOyAvLyBwb2ludGVyIHRvIGJ5dGVzXG5cdFx0bGV0IG07IC8vIG51bWJlciBvZiBtYXJrZXIgYnl0ZXMgZm91bmQgaW4gYSByb3dcblx0XHRsZXQgciwgdzsgLy8gdGVtcG9yYXJpZXMgdG8gc2F2ZSB0b3RhbF9pbiBhbmQgdG90YWxfb3V0XG5cblx0XHQvLyBzZXQgdXBcblx0XHRpZiAoIXogfHwgIXouaXN0YXRlKVxuXHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHRcdGNvbnN0IGlzdGF0ZSA9IHouaXN0YXRlO1xuXHRcdGlmIChpc3RhdGUubW9kZSAhPSBCQUQpIHtcblx0XHRcdGlzdGF0ZS5tb2RlID0gQkFEO1xuXHRcdFx0aXN0YXRlLm1hcmtlciA9IDA7XG5cdFx0fVxuXHRcdGlmICgobiA9IHouYXZhaWxfaW4pID09PSAwKVxuXHRcdFx0cmV0dXJuIFpfQlVGX0VSUk9SO1xuXHRcdHAgPSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0bSA9IGlzdGF0ZS5tYXJrZXI7XG5cblx0XHQvLyBzZWFyY2hcblx0XHR3aGlsZSAobiAhPT0gMCAmJiBtIDwgNCkge1xuXHRcdFx0aWYgKHoucmVhZF9ieXRlKHApID09IG1hcmtbbV0pIHtcblx0XHRcdFx0bSsrO1xuXHRcdFx0fSBlbHNlIGlmICh6LnJlYWRfYnl0ZShwKSAhPT0gMCkge1xuXHRcdFx0XHRtID0gMDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG0gPSA0IC0gbTtcblx0XHRcdH1cblx0XHRcdHArKztcblx0XHRcdG4tLTtcblx0XHR9XG5cblx0XHQvLyByZXN0b3JlXG5cdFx0ei50b3RhbF9pbiArPSBwIC0gei5uZXh0X2luX2luZGV4O1xuXHRcdHoubmV4dF9pbl9pbmRleCA9IHA7XG5cdFx0ei5hdmFpbF9pbiA9IG47XG5cdFx0aXN0YXRlLm1hcmtlciA9IG07XG5cblx0XHQvLyByZXR1cm4gbm8gam95IG9yIHNldCB1cCB0byByZXN0YXJ0IG9uIGEgbmV3IGJsb2NrXG5cdFx0aWYgKG0gIT0gNCkge1xuXHRcdFx0cmV0dXJuIFpfREFUQV9FUlJPUjtcblx0XHR9XG5cdFx0ciA9IHoudG90YWxfaW47XG5cdFx0dyA9IHoudG90YWxfb3V0O1xuXHRcdGluZmxhdGVSZXNldCh6KTtcblx0XHR6LnRvdGFsX2luID0gcjtcblx0XHR6LnRvdGFsX291dCA9IHc7XG5cdFx0aXN0YXRlLm1vZGUgPSBCTE9DS1M7XG5cdFx0cmV0dXJuIFpfT0s7XG5cdH07XG5cblx0Ly8gUmV0dXJucyB0cnVlIGlmIGluZmxhdGUgaXMgY3VycmVudGx5IGF0IHRoZSBlbmQgb2YgYSBibG9jayBnZW5lcmF0ZWRcblx0Ly8gYnkgWl9TWU5DX0ZMVVNIIG9yIFpfRlVMTF9GTFVTSC4gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJ5IG9uZSBQUFBcblx0Ly8gaW1wbGVtZW50YXRpb24gdG8gcHJvdmlkZSBhbiBhZGRpdGlvbmFsIHNhZmV0eSBjaGVjay4gUFBQIHVzZXNcblx0Ly8gWl9TWU5DX0ZMVVNIXG5cdC8vIGJ1dCByZW1vdmVzIHRoZSBsZW5ndGggYnl0ZXMgb2YgdGhlIHJlc3VsdGluZyBlbXB0eSBzdG9yZWQgYmxvY2suIFdoZW5cblx0Ly8gZGVjb21wcmVzc2luZywgUFBQIGNoZWNrcyB0aGF0IGF0IHRoZSBlbmQgb2YgaW5wdXQgcGFja2V0LCBpbmZsYXRlIGlzXG5cdC8vIHdhaXRpbmcgZm9yIHRoZXNlIGxlbmd0aCBieXRlcy5cblx0dGhhdC5pbmZsYXRlU3luY1BvaW50ID0gZnVuY3Rpb24gKHopIHtcblx0XHRpZiAoIXogfHwgIXouaXN0YXRlIHx8ICF6LmlzdGF0ZS5ibG9ja3MpXG5cdFx0XHRyZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdFx0cmV0dXJuIHouaXN0YXRlLmJsb2Nrcy5zeW5jX3BvaW50KCk7XG5cdH07XG59XG5cbi8vIFpTdHJlYW1cblxuZnVuY3Rpb24gWlN0cmVhbSgpIHtcbn1cblxuWlN0cmVhbS5wcm90b3R5cGUgPSB7XG5cdGluZmxhdGVJbml0KGJpdHMpIHtcblx0XHRjb25zdCB0aGF0ID0gdGhpcztcblx0XHR0aGF0LmlzdGF0ZSA9IG5ldyBJbmZsYXRlKCk7XG5cdFx0aWYgKCFiaXRzKVxuXHRcdFx0Yml0cyA9IE1BWF9CSVRTO1xuXHRcdHJldHVybiB0aGF0LmlzdGF0ZS5pbmZsYXRlSW5pdCh0aGF0LCBiaXRzKTtcblx0fSxcblxuXHRpbmZsYXRlKGYpIHtcblx0XHRjb25zdCB0aGF0ID0gdGhpcztcblx0XHRpZiAoIXRoYXQuaXN0YXRlKVxuXHRcdFx0cmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHRcdHJldHVybiB0aGF0LmlzdGF0ZS5pbmZsYXRlKHRoYXQsIGYpO1xuXHR9LFxuXG5cdGluZmxhdGVFbmQoKSB7XG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdFx0aWYgKCF0aGF0LmlzdGF0ZSlcblx0XHRcdHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblx0XHRjb25zdCByZXQgPSB0aGF0LmlzdGF0ZS5pbmZsYXRlRW5kKHRoYXQpO1xuXHRcdHRoYXQuaXN0YXRlID0gbnVsbDtcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluZmxhdGVTeW5jKCkge1xuXHRcdGNvbnN0IHRoYXQgPSB0aGlzO1xuXHRcdGlmICghdGhhdC5pc3RhdGUpXG5cdFx0XHRyZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdFx0cmV0dXJuIHRoYXQuaXN0YXRlLmluZmxhdGVTeW5jKHRoYXQpO1xuXHR9LFxuXHRpbmZsYXRlU2V0RGljdGlvbmFyeShkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoKSB7XG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdFx0aWYgKCF0aGF0LmlzdGF0ZSlcblx0XHRcdHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblx0XHRyZXR1cm4gdGhhdC5pc3RhdGUuaW5mbGF0ZVNldERpY3Rpb25hcnkodGhhdCwgZGljdGlvbmFyeSwgZGljdExlbmd0aCk7XG5cdH0sXG5cdHJlYWRfYnl0ZShzdGFydCkge1xuXHRcdGNvbnN0IHRoYXQgPSB0aGlzO1xuXHRcdHJldHVybiB0aGF0Lm5leHRfaW5bc3RhcnRdO1xuXHR9LFxuXHRyZWFkX2J1ZihzdGFydCwgc2l6ZSkge1xuXHRcdGNvbnN0IHRoYXQgPSB0aGlzO1xuXHRcdHJldHVybiB0aGF0Lm5leHRfaW4uc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgc2l6ZSk7XG5cdH1cbn07XG5cbi8vIEluZmxhdGVyXG5cbmZ1bmN0aW9uIFppcEluZmxhdGUob3B0aW9ucykge1xuXHRjb25zdCB0aGF0ID0gdGhpcztcblx0Y29uc3QgeiA9IG5ldyBaU3RyZWFtKCk7XG5cdGNvbnN0IGJ1ZnNpemUgPSBvcHRpb25zICYmIG9wdGlvbnMuY2h1bmtTaXplID8gTWF0aC5mbG9vcihvcHRpb25zLmNodW5rU2l6ZSAqIDIpIDogMTI4ICogMTAyNDtcblx0Y29uc3QgZmx1c2ggPSBaX05PX0ZMVVNIO1xuXHRjb25zdCBidWYgPSBuZXcgVWludDhBcnJheShidWZzaXplKTtcblx0bGV0IG5vbW9yZWlucHV0ID0gZmFsc2U7XG5cblx0ei5pbmZsYXRlSW5pdCgpO1xuXHR6Lm5leHRfb3V0ID0gYnVmO1xuXG5cdHRoYXQuYXBwZW5kID0gZnVuY3Rpb24gKGRhdGEsIG9ucHJvZ3Jlc3MpIHtcblx0XHRjb25zdCBidWZmZXJzID0gW107XG5cdFx0bGV0IGVyciwgYXJyYXksIGxhc3RJbmRleCA9IDAsIGJ1ZmZlckluZGV4ID0gMCwgYnVmZmVyU2l6ZSA9IDA7XG5cdFx0aWYgKGRhdGEubGVuZ3RoID09PSAwKVxuXHRcdFx0cmV0dXJuO1xuXHRcdHoubmV4dF9pbl9pbmRleCA9IDA7XG5cdFx0ei5uZXh0X2luID0gZGF0YTtcblx0XHR6LmF2YWlsX2luID0gZGF0YS5sZW5ndGg7XG5cdFx0ZG8ge1xuXHRcdFx0ei5uZXh0X291dF9pbmRleCA9IDA7XG5cdFx0XHR6LmF2YWlsX291dCA9IGJ1ZnNpemU7XG5cdFx0XHRpZiAoKHouYXZhaWxfaW4gPT09IDApICYmICghbm9tb3JlaW5wdXQpKSB7IC8vIGlmIGJ1ZmZlciBpcyBlbXB0eSBhbmQgbW9yZSBpbnB1dCBpcyBhdmFpbGFibGUsIHJlZmlsbCBpdFxuXHRcdFx0XHR6Lm5leHRfaW5faW5kZXggPSAwO1xuXHRcdFx0XHRub21vcmVpbnB1dCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRlcnIgPSB6LmluZmxhdGUoZmx1c2gpO1xuXHRcdFx0aWYgKG5vbW9yZWlucHV0ICYmIChlcnIgPT09IFpfQlVGX0VSUk9SKSkge1xuXHRcdFx0XHRpZiAoei5hdmFpbF9pbiAhPT0gMClcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJpbmZsYXRpbmc6IGJhZCBpbnB1dFwiKTtcblx0XHRcdH0gZWxzZSBpZiAoZXJyICE9PSBaX09LICYmIGVyciAhPT0gWl9TVFJFQU1fRU5EKVxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJpbmZsYXRpbmc6IFwiICsgei5tc2cpO1xuXHRcdFx0aWYgKChub21vcmVpbnB1dCB8fCBlcnIgPT09IFpfU1RSRUFNX0VORCkgJiYgKHouYXZhaWxfaW4gPT09IGRhdGEubGVuZ3RoKSlcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW5mbGF0aW5nOiBiYWQgaW5wdXRcIik7XG5cdFx0XHRpZiAoei5uZXh0X291dF9pbmRleClcblx0XHRcdFx0aWYgKHoubmV4dF9vdXRfaW5kZXggPT09IGJ1ZnNpemUpXG5cdFx0XHRcdFx0YnVmZmVycy5wdXNoKG5ldyBVaW50OEFycmF5KGJ1ZikpO1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0YnVmZmVycy5wdXNoKGJ1Zi5zdWJhcnJheSgwLCB6Lm5leHRfb3V0X2luZGV4KSk7XG5cdFx0XHRidWZmZXJTaXplICs9IHoubmV4dF9vdXRfaW5kZXg7XG5cdFx0XHRpZiAob25wcm9ncmVzcyAmJiB6Lm5leHRfaW5faW5kZXggPiAwICYmIHoubmV4dF9pbl9pbmRleCAhPSBsYXN0SW5kZXgpIHtcblx0XHRcdFx0b25wcm9ncmVzcyh6Lm5leHRfaW5faW5kZXgpO1xuXHRcdFx0XHRsYXN0SW5kZXggPSB6Lm5leHRfaW5faW5kZXg7XG5cdFx0XHR9XG5cdFx0fSB3aGlsZSAoei5hdmFpbF9pbiA+IDAgfHwgei5hdmFpbF9vdXQgPT09IDApO1xuXHRcdGlmIChidWZmZXJzLmxlbmd0aCA+IDEpIHtcblx0XHRcdGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyU2l6ZSk7XG5cdFx0XHRidWZmZXJzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rKSB7XG5cdFx0XHRcdGFycmF5LnNldChjaHVuaywgYnVmZmVySW5kZXgpO1xuXHRcdFx0XHRidWZmZXJJbmRleCArPSBjaHVuay5sZW5ndGg7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YXJyYXkgPSBidWZmZXJzWzBdID8gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyc1swXSkgOiBuZXcgVWludDhBcnJheSgpO1xuXHRcdH1cblx0XHRyZXR1cm4gYXJyYXk7XG5cdH07XG5cdHRoYXQuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG5cdFx0ei5pbmZsYXRlRW5kKCk7XG5cdH07XG59XG5cbmV4cG9ydCB7XG5cdFppcEluZmxhdGUgYXMgSW5mbGF0ZVxufTsiLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbmNvbnN0IE1BWF8zMl9CSVRTID0gMHhmZmZmZmZmZjtcbmNvbnN0IE1BWF8xNl9CSVRTID0gMHhmZmZmO1xuY29uc3QgQ09NUFJFU1NJT05fTUVUSE9EX0RFRkxBVEUgPSAweDA4O1xuY29uc3QgQ09NUFJFU1NJT05fTUVUSE9EX1NUT1JFID0gMHgwMDtcbmNvbnN0IENPTVBSRVNTSU9OX01FVEhPRF9BRVMgPSAweDYzO1xuXG5jb25zdCBMT0NBTF9GSUxFX0hFQURFUl9TSUdOQVRVUkUgPSAweDA0MDM0YjUwO1xuY29uc3QgU1BMSVRfWklQX0ZJTEVfU0lHTkFUVVJFID0gMHgwODA3NGI1MDtcbmNvbnN0IERBVEFfREVTQ1JJUFRPUl9SRUNPUkRfU0lHTkFUVVJFID0gU1BMSVRfWklQX0ZJTEVfU0lHTkFUVVJFO1xuY29uc3QgQ0VOVFJBTF9GSUxFX0hFQURFUl9TSUdOQVRVUkUgPSAweDAyMDE0YjUwO1xuY29uc3QgRU5EX09GX0NFTlRSQUxfRElSX1NJR05BVFVSRSA9IDB4MDYwNTRiNTA7XG5jb25zdCBaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfU0lHTkFUVVJFID0gMHgwNjA2NGI1MDtcbmNvbnN0IFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9MT0NBVE9SX1NJR05BVFVSRSA9IDB4MDcwNjRiNTA7XG5jb25zdCBFTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RIID0gMjI7XG5jb25zdCBaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTE9DQVRPUl9MRU5HVEggPSAyMDtcbmNvbnN0IFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9MRU5HVEggPSA1NjtcbmNvbnN0IFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9UT1RBTF9MRU5HVEggPSBFTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RIICsgWklQNjRfRU5EX09GX0NFTlRSQUxfRElSX0xPQ0FUT1JfTEVOR1RIICsgWklQNjRfRU5EX09GX0NFTlRSQUxfRElSX0xFTkdUSDtcblxuY29uc3QgRVhUUkFGSUVMRF9UWVBFX1pJUDY0ID0gMHgwMDAxO1xuY29uc3QgRVhUUkFGSUVMRF9UWVBFX0FFUyA9IDB4OTkwMTtcbmNvbnN0IEVYVFJBRklFTERfVFlQRV9OVEZTID0gMHgwMDBhO1xuY29uc3QgRVhUUkFGSUVMRF9UWVBFX05URlNfVEFHMSA9IDB4MDAwMTtcbmNvbnN0IEVYVFJBRklFTERfVFlQRV9FWFRFTkRFRF9USU1FU1RBTVAgPSAweDU0NTU7XG5jb25zdCBFWFRSQUZJRUxEX1RZUEVfVU5JQ09ERV9QQVRIID0gMHg3MDc1O1xuY29uc3QgRVhUUkFGSUVMRF9UWVBFX1VOSUNPREVfQ09NTUVOVCA9IDB4NjM3NTtcbmNvbnN0IEVYVFJBRklFTERfVFlQRV9VU0RaID0gMHgxOTg2O1xuXG5jb25zdCBCSVRGTEFHX0VOQ1JZUFRFRCA9IDB4MDE7XG5jb25zdCBCSVRGTEFHX0xFVkVMID0gMHgwNjtcbmNvbnN0IEJJVEZMQUdfREFUQV9ERVNDUklQVE9SID0gMHgwMDA4O1xuY29uc3QgQklURkxBR19MQU5HX0VOQ09ESU5HX0ZMQUcgPSAweDA4MDA7XG5jb25zdCBGSUxFX0FUVFJfTVNET1NfRElSX01BU0sgPSAweDEwO1xuXG5jb25zdCBWRVJTSU9OX0RFRkxBVEUgPSAweDE0O1xuY29uc3QgVkVSU0lPTl9aSVA2NCA9IDB4MkQ7XG5jb25zdCBWRVJTSU9OX0FFUyA9IDB4MzM7XG5cbmNvbnN0IERJUkVDVE9SWV9TSUdOQVRVUkUgPSBcIi9cIjtcblxuY29uc3QgTUFYX0RBVEUgPSBuZXcgRGF0ZSgyMTA3LCAxMSwgMzEpO1xuY29uc3QgTUlOX0RBVEUgPSBuZXcgRGF0ZSgxOTgwLCAwLCAxKTtcblxuY29uc3QgVU5ERUZJTkVEX1ZBTFVFID0gdW5kZWZpbmVkO1xuY29uc3QgVU5ERUZJTkVEX1RZUEUgPSBcInVuZGVmaW5lZFwiO1xuY29uc3QgRlVOQ1RJT05fVFlQRSA9IFwiZnVuY3Rpb25cIjtcblxuZXhwb3J0IHtcblx0TUFYXzMyX0JJVFMsXG5cdE1BWF8xNl9CSVRTLFxuXHRDT01QUkVTU0lPTl9NRVRIT0RfREVGTEFURSxcblx0Q09NUFJFU1NJT05fTUVUSE9EX1NUT1JFLFxuXHRDT01QUkVTU0lPTl9NRVRIT0RfQUVTLFxuXHRTUExJVF9aSVBfRklMRV9TSUdOQVRVUkUsXG5cdExPQ0FMX0ZJTEVfSEVBREVSX1NJR05BVFVSRSxcblx0REFUQV9ERVNDUklQVE9SX1JFQ09SRF9TSUdOQVRVUkUsXG5cdENFTlRSQUxfRklMRV9IRUFERVJfU0lHTkFUVVJFLFxuXHRFTkRfT0ZfQ0VOVFJBTF9ESVJfU0lHTkFUVVJFLFxuXHRaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTE9DQVRPUl9TSUdOQVRVUkUsXG5cdFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9TSUdOQVRVUkUsXG5cdEVYVFJBRklFTERfVFlQRV9aSVA2NCxcblx0RVhUUkFGSUVMRF9UWVBFX0FFUyxcblx0RVhUUkFGSUVMRF9UWVBFX05URlMsXG5cdEVYVFJBRklFTERfVFlQRV9OVEZTX1RBRzEsXG5cdEVYVFJBRklFTERfVFlQRV9FWFRFTkRFRF9USU1FU1RBTVAsXG5cdEVYVFJBRklFTERfVFlQRV9VTklDT0RFX1BBVEgsXG5cdEVYVFJBRklFTERfVFlQRV9VTklDT0RFX0NPTU1FTlQsXG5cdEVYVFJBRklFTERfVFlQRV9VU0RaLFxuXHRFTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RILFxuXHRaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTE9DQVRPUl9MRU5HVEgsXG5cdFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9MRU5HVEgsXG5cdFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9UT1RBTF9MRU5HVEgsXG5cdEJJVEZMQUdfRU5DUllQVEVELFxuXHRCSVRGTEFHX0xFVkVMLFxuXHRCSVRGTEFHX0RBVEFfREVTQ1JJUFRPUixcblx0QklURkxBR19MQU5HX0VOQ09ESU5HX0ZMQUcsXG5cdEZJTEVfQVRUUl9NU0RPU19ESVJfTUFTSyxcblx0VkVSU0lPTl9ERUZMQVRFLFxuXHRWRVJTSU9OX1pJUDY0LFxuXHRWRVJTSU9OX0FFUyxcblx0RElSRUNUT1JZX1NJR05BVFVSRSxcblx0TUlOX0RBVEUsXG5cdE1BWF9EQVRFLFxuXHRVTkRFRklORURfVkFMVUUsXG5cdFVOREVGSU5FRF9UWVBFLFxuXHRGVU5DVElPTl9UWVBFXG59OyIsIi8qXG4gQ29weXJpZ2h0IChjKSAyMDIyIEdpbGRhcyBMb3JtZWF1LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiBcbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuIDMuIFRoZSBuYW1lcyBvZiB0aGUgYXV0aG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEICcnQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXG4gSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKQ1JBRlQsXG4gSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsXG4gT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLyogZ2xvYmFsIFRyYW5zZm9ybVN0cmVhbSAqL1xuXG5leHBvcnQge1xuXHRTdHJlYW1BZGFwdGVyXG59O1xuXG5jbGFzcyBTdHJlYW1BZGFwdGVyIHtcblxuXHRjb25zdHJ1Y3RvcihDb2RlYykge1xuXHRcdHJldHVybiBjbGFzcyBleHRlbmRzIFRyYW5zZm9ybVN0cmVhbSB7XG5cdFx0XHRjb25zdHJ1Y3RvcihfZm9ybWF0LCBvcHRpb25zKSB7XG5cdFx0XHRcdGNvbnN0IGNvZGVjID0gbmV3IENvZGVjKG9wdGlvbnMpO1xuXHRcdFx0XHRzdXBlcih7XG5cdFx0XHRcdFx0dHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG5cdFx0XHRcdFx0XHRjb250cm9sbGVyLmVucXVldWUoY29kZWMuYXBwZW5kKGNodW5rKSk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRmbHVzaChjb250cm9sbGVyKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBjaHVuayA9IGNvZGVjLmZsdXNoKCk7XG5cdFx0XHRcdFx0XHRpZiAoY2h1bmspIHtcblx0XHRcdFx0XHRcdFx0Y29udHJvbGxlci5lbnF1ZXVlKGNodW5rKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0iLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbi8qIGdsb2JhbCBuYXZpZ2F0b3IsIENvbXByZXNzaW9uU3RyZWFtLCBEZWNvbXByZXNzaW9uU3RyZWFtICovXG5cbmltcG9ydCB7XG5cdFVOREVGSU5FRF9WQUxVRSxcblx0VU5ERUZJTkVEX1RZUEVcbn0gZnJvbSBcIi4vY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgeyBTdHJlYW1BZGFwdGVyIH0gZnJvbSBcIi4vc3RyZWFtcy9zdHJlYW0tYWRhcHRlci5qc1wiO1xuXG5jb25zdCBNSU5JTVVNX0NIVU5LX1NJWkUgPSA2NDtcbmxldCBtYXhXb3JrZXJzID0gMjtcbnRyeSB7XG5cdGlmICh0eXBlb2YgbmF2aWdhdG9yICE9IFVOREVGSU5FRF9UWVBFICYmIG5hdmlnYXRvci5oYXJkd2FyZUNvbmN1cnJlbmN5KSB7XG5cdFx0bWF4V29ya2VycyA9IG5hdmlnYXRvci5oYXJkd2FyZUNvbmN1cnJlbmN5O1xuXHR9XG59IGNhdGNoIChfZXJyb3IpIHtcblx0Ly8gaWdub3JlZFxufVxuY29uc3QgREVGQVVMVF9DT05GSUdVUkFUSU9OID0ge1xuXHRjaHVua1NpemU6IDUxMiAqIDEwMjQsXG5cdG1heFdvcmtlcnMsXG5cdHRlcm1pbmF0ZVdvcmtlclRpbWVvdXQ6IDUwMDAsXG5cdHVzZVdlYldvcmtlcnM6IHRydWUsXG5cdHVzZUNvbXByZXNzaW9uU3RyZWFtOiB0cnVlLFxuXHR3b3JrZXJTY3JpcHRzOiBVTkRFRklORURfVkFMVUUsXG5cdENvbXByZXNzaW9uU3RyZWFtTmF0aXZlOiB0eXBlb2YgQ29tcHJlc3Npb25TdHJlYW0gIT0gVU5ERUZJTkVEX1RZUEUgJiYgQ29tcHJlc3Npb25TdHJlYW0sXG5cdERlY29tcHJlc3Npb25TdHJlYW1OYXRpdmU6IHR5cGVvZiBEZWNvbXByZXNzaW9uU3RyZWFtICE9IFVOREVGSU5FRF9UWVBFICYmIERlY29tcHJlc3Npb25TdHJlYW1cbn07XG5cbmNvbnN0IGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfQ09ORklHVVJBVElPTik7XG5cbmV4cG9ydCB7XG5cdGNvbmZpZ3VyZSxcblx0Z2V0Q29uZmlndXJhdGlvbixcblx0Z2V0Q2h1bmtTaXplXG59O1xuXG5mdW5jdGlvbiBnZXRDb25maWd1cmF0aW9uKCkge1xuXHRyZXR1cm4gY29uZmlnO1xufVxuXG5mdW5jdGlvbiBnZXRDaHVua1NpemUoY29uZmlnKSB7XG5cdHJldHVybiBNYXRoLm1heChjb25maWcuY2h1bmtTaXplLCBNSU5JTVVNX0NIVU5LX1NJWkUpO1xufVxuXG5mdW5jdGlvbiBjb25maWd1cmUoY29uZmlndXJhdGlvbikge1xuXHRjb25zdCB7XG5cdFx0YmFzZVVSTCxcblx0XHRjaHVua1NpemUsXG5cdFx0bWF4V29ya2Vycyxcblx0XHR0ZXJtaW5hdGVXb3JrZXJUaW1lb3V0LFxuXHRcdHVzZUNvbXByZXNzaW9uU3RyZWFtLFxuXHRcdHVzZVdlYldvcmtlcnMsXG5cdFx0RGVmbGF0ZSxcblx0XHRJbmZsYXRlLFxuXHRcdENvbXByZXNzaW9uU3RyZWFtLFxuXHRcdERlY29tcHJlc3Npb25TdHJlYW0sXG5cdFx0d29ya2VyU2NyaXB0c1xuXHR9ID0gY29uZmlndXJhdGlvbjtcblx0c2V0SWZEZWZpbmVkKFwiYmFzZVVSTFwiLCBiYXNlVVJMKTtcblx0c2V0SWZEZWZpbmVkKFwiY2h1bmtTaXplXCIsIGNodW5rU2l6ZSk7XG5cdHNldElmRGVmaW5lZChcIm1heFdvcmtlcnNcIiwgbWF4V29ya2Vycyk7XG5cdHNldElmRGVmaW5lZChcInRlcm1pbmF0ZVdvcmtlclRpbWVvdXRcIiwgdGVybWluYXRlV29ya2VyVGltZW91dCk7XG5cdHNldElmRGVmaW5lZChcInVzZUNvbXByZXNzaW9uU3RyZWFtXCIsIHVzZUNvbXByZXNzaW9uU3RyZWFtKTtcblx0c2V0SWZEZWZpbmVkKFwidXNlV2ViV29ya2Vyc1wiLCB1c2VXZWJXb3JrZXJzKTtcblx0aWYgKERlZmxhdGUpIHtcblx0XHRjb25maWcuQ29tcHJlc3Npb25TdHJlYW0gPSBuZXcgU3RyZWFtQWRhcHRlcihEZWZsYXRlKTtcblx0fVxuXHRpZiAoSW5mbGF0ZSkge1xuXHRcdGNvbmZpZy5EZWNvbXByZXNzaW9uU3RyZWFtID0gbmV3IFN0cmVhbUFkYXB0ZXIoSW5mbGF0ZSk7XG5cdH1cblx0c2V0SWZEZWZpbmVkKFwiQ29tcHJlc3Npb25TdHJlYW1cIiwgQ29tcHJlc3Npb25TdHJlYW0pO1xuXHRzZXRJZkRlZmluZWQoXCJEZWNvbXByZXNzaW9uU3RyZWFtXCIsIERlY29tcHJlc3Npb25TdHJlYW0pO1xuXHRpZiAod29ya2VyU2NyaXB0cyAhPT0gVU5ERUZJTkVEX1ZBTFVFKSB7XG5cdFx0Y29uc3QgeyBkZWZsYXRlLCBpbmZsYXRlIH0gPSB3b3JrZXJTY3JpcHRzO1xuXHRcdGlmIChkZWZsYXRlIHx8IGluZmxhdGUpIHtcblx0XHRcdGlmICghY29uZmlnLndvcmtlclNjcmlwdHMpIHtcblx0XHRcdFx0Y29uZmlnLndvcmtlclNjcmlwdHMgPSB7fTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGRlZmxhdGUpIHtcblx0XHRcdGlmICghQXJyYXkuaXNBcnJheShkZWZsYXRlKSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJ3b3JrZXJTY3JpcHRzLmRlZmxhdGUgbXVzdCBiZSBhbiBhcnJheVwiKTtcblx0XHRcdH1cblx0XHRcdGNvbmZpZy53b3JrZXJTY3JpcHRzLmRlZmxhdGUgPSBkZWZsYXRlO1xuXHRcdH1cblx0XHRpZiAoaW5mbGF0ZSkge1xuXHRcdFx0aWYgKCFBcnJheS5pc0FycmF5KGluZmxhdGUpKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIndvcmtlclNjcmlwdHMuaW5mbGF0ZSBtdXN0IGJlIGFuIGFycmF5XCIpO1xuXHRcdFx0fVxuXHRcdFx0Y29uZmlnLndvcmtlclNjcmlwdHMuaW5mbGF0ZSA9IGluZmxhdGU7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHNldElmRGVmaW5lZChwcm9wZXJ0eU5hbWUsIHByb3BlcnR5VmFsdWUpIHtcblx0aWYgKHByb3BlcnR5VmFsdWUgIT09IFVOREVGSU5FRF9WQUxVRSkge1xuXHRcdGNvbmZpZ1twcm9wZXJ0eU5hbWVdID0gcHJvcGVydHlWYWx1ZTtcblx0fVxufVxuIiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4vLyBkZW5vLWxpbnQtaWdub3JlLWZpbGUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5cbmltcG9ydCB7IGdldE1pbWVUeXBlIGFzIGdldERlZmF1bHRNaW1lVHlwZSB9IGZyb20gXCIuL2RlZmF1bHQtbWltZS10eXBlLmpzXCI7XG5cbmNvbnN0IHRhYmxlID0ge1xuXHRcImFwcGxpY2F0aW9uXCI6IHtcblx0XHRcImFuZHJldy1pbnNldFwiOiBcImV6XCIsXG5cdFx0XCJhbm5vZGV4XCI6IFwiYW54XCIsXG5cdFx0XCJhdG9tK3htbFwiOiBcImF0b21cIixcblx0XHRcImF0b21jYXQreG1sXCI6IFwiYXRvbWNhdFwiLFxuXHRcdFwiYXRvbXNlcnYreG1sXCI6IFwiYXRvbXNydlwiLFxuXHRcdFwiYmJvbGluXCI6IFwibGluXCIsXG5cdFx0XCJjdS1zZWVtZVwiOiBcImN1XCIsXG5cdFx0XCJkYXZtb3VudCt4bWxcIjogXCJkYXZtb3VudFwiLFxuXHRcdFwiZHNwdHlwZVwiOiBcInRzcFwiLFxuXHRcdFwiZWNtYXNjcmlwdFwiOiBbXG5cdFx0XHRcImVzXCIsXG5cdFx0XHRcImVjbWFcIlxuXHRcdF0sXG5cdFx0XCJmdXR1cmVzcGxhc2hcIjogXCJzcGxcIixcblx0XHRcImh0YVwiOiBcImh0YVwiLFxuXHRcdFwiamF2YS1hcmNoaXZlXCI6IFwiamFyXCIsXG5cdFx0XCJqYXZhLXNlcmlhbGl6ZWQtb2JqZWN0XCI6IFwic2VyXCIsXG5cdFx0XCJqYXZhLXZtXCI6IFwiY2xhc3NcIixcblx0XHRcIm0zZ1wiOiBcIm0zZ1wiLFxuXHRcdFwibWFjLWJpbmhleDQwXCI6IFwiaHF4XCIsXG5cdFx0XCJtYXRoZW1hdGljYVwiOiBbXG5cdFx0XHRcIm5iXCIsXG5cdFx0XHRcIm1hXCIsXG5cdFx0XHRcIm1iXCJcblx0XHRdLFxuXHRcdFwibXNhY2Nlc3NcIjogXCJtZGJcIixcblx0XHRcIm1zd29yZFwiOiBbXG5cdFx0XHRcImRvY1wiLFxuXHRcdFx0XCJkb3RcIixcblx0XHRcdFwid2l6XCJcblx0XHRdLFxuXHRcdFwibXhmXCI6IFwibXhmXCIsXG5cdFx0XCJvZGFcIjogXCJvZGFcIixcblx0XHRcIm9nZ1wiOiBcIm9neFwiLFxuXHRcdFwicGRmXCI6IFwicGRmXCIsXG5cdFx0XCJwZ3Ata2V5c1wiOiBcImtleVwiLFxuXHRcdFwicGdwLXNpZ25hdHVyZVwiOiBbXG5cdFx0XHRcImFzY1wiLFxuXHRcdFx0XCJzaWdcIlxuXHRcdF0sXG5cdFx0XCJwaWNzLXJ1bGVzXCI6IFwicHJmXCIsXG5cdFx0XCJwb3N0c2NyaXB0XCI6IFtcblx0XHRcdFwicHNcIixcblx0XHRcdFwiYWlcIixcblx0XHRcdFwiZXBzXCIsXG5cdFx0XHRcImVwc2lcIixcblx0XHRcdFwiZXBzZlwiLFxuXHRcdFx0XCJlcHMyXCIsXG5cdFx0XHRcImVwczNcIlxuXHRcdF0sXG5cdFx0XCJyYXJcIjogXCJyYXJcIixcblx0XHRcInJkZit4bWxcIjogXCJyZGZcIixcblx0XHRcInJzcyt4bWxcIjogXCJyc3NcIixcblx0XHRcInJ0ZlwiOiBcInJ0ZlwiLFxuXHRcdFwieGh0bWwreG1sXCI6IFtcblx0XHRcdFwieGh0bWxcIixcblx0XHRcdFwieGh0XCJcblx0XHRdLFxuXHRcdFwieG1sXCI6IFtcblx0XHRcdFwieG1sXCIsXG5cdFx0XHRcInhzbFwiLFxuXHRcdFx0XCJ4c2RcIixcblx0XHRcdFwieHBkbFwiXG5cdFx0XSxcblx0XHRcInhzcGYreG1sXCI6IFwieHNwZlwiLFxuXHRcdFwiemlwXCI6IFwiemlwXCIsXG5cdFx0XCJ2bmQuYW5kcm9pZC5wYWNrYWdlLWFyY2hpdmVcIjogXCJhcGtcIixcblx0XHRcInZuZC5jaW5kZXJlbGxhXCI6IFwiY2R5XCIsXG5cdFx0XCJ2bmQuZ29vZ2xlLWVhcnRoLmttbCt4bWxcIjogXCJrbWxcIixcblx0XHRcInZuZC5nb29nbGUtZWFydGgua216XCI6IFwia216XCIsXG5cdFx0XCJ2bmQubW96aWxsYS54dWwreG1sXCI6IFwieHVsXCIsXG5cdFx0XCJ2bmQubXMtZXhjZWxcIjogW1xuXHRcdFx0XCJ4bHNcIixcblx0XHRcdFwieGxiXCIsXG5cdFx0XHRcInhsdFwiLFxuXHRcdFx0XCJ4bG1cIixcblx0XHRcdFwieGxhXCIsXG5cdFx0XHRcInhsY1wiLFxuXHRcdFx0XCJ4bHdcIlxuXHRcdF0sXG5cdFx0XCJ2bmQubXMtcGtpLnNlY2NhdFwiOiBcImNhdFwiLFxuXHRcdFwidm5kLm1zLXBraS5zdGxcIjogXCJzdGxcIixcblx0XHRcInZuZC5tcy1wb3dlcnBvaW50XCI6IFtcblx0XHRcdFwicHB0XCIsXG5cdFx0XHRcInBwc1wiLFxuXHRcdFx0XCJwb3RcIixcblx0XHRcdFwicHBhXCIsXG5cdFx0XHRcInB3elwiXG5cdFx0XSxcblx0XHRcInZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuY2hhcnRcIjogXCJvZGNcIixcblx0XHRcInZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZGF0YWJhc2VcIjogXCJvZGJcIixcblx0XHRcInZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZm9ybXVsYVwiOiBcIm9kZlwiLFxuXHRcdFwidm5kLm9hc2lzLm9wZW5kb2N1bWVudC5ncmFwaGljc1wiOiBcIm9kZ1wiLFxuXHRcdFwidm5kLm9hc2lzLm9wZW5kb2N1bWVudC5ncmFwaGljcy10ZW1wbGF0ZVwiOiBcIm90Z1wiLFxuXHRcdFwidm5kLm9hc2lzLm9wZW5kb2N1bWVudC5pbWFnZVwiOiBcIm9kaVwiLFxuXHRcdFwidm5kLm9hc2lzLm9wZW5kb2N1bWVudC5wcmVzZW50YXRpb25cIjogXCJvZHBcIixcblx0XHRcInZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uLXRlbXBsYXRlXCI6IFwib3RwXCIsXG5cdFx0XCJ2bmQub2FzaXMub3BlbmRvY3VtZW50LnNwcmVhZHNoZWV0XCI6IFwib2RzXCIsXG5cdFx0XCJ2bmQub2FzaXMub3BlbmRvY3VtZW50LnNwcmVhZHNoZWV0LXRlbXBsYXRlXCI6IFwib3RzXCIsXG5cdFx0XCJ2bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHRcIjogXCJvZHRcIixcblx0XHRcInZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dC1tYXN0ZXJcIjogW1xuXHRcdFx0XCJvZG1cIixcblx0XHRcdFwib3RtXCJcblx0XHRdLFxuXHRcdFwidm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0LXRlbXBsYXRlXCI6IFwib3R0XCIsXG5cdFx0XCJ2bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHQtd2ViXCI6IFwib3RoXCIsXG5cdFx0XCJ2bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldFwiOiBcInhsc3hcIixcblx0XHRcInZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRlbXBsYXRlXCI6IFwieGx0eFwiLFxuXHRcdFwidm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnByZXNlbnRhdGlvblwiOiBcInBwdHhcIixcblx0XHRcInZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZXNob3dcIjogXCJwcHN4XCIsXG5cdFx0XCJ2bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwudGVtcGxhdGVcIjogXCJwb3R4XCIsXG5cdFx0XCJ2bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudFwiOiBcImRvY3hcIixcblx0XHRcInZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLnRlbXBsYXRlXCI6IFwiZG90eFwiLFxuXHRcdFwidm5kLnNtYWZcIjogXCJtbWZcIixcblx0XHRcInZuZC5zdGFyZGl2aXNpb24uY2FsY1wiOiBcInNkY1wiLFxuXHRcdFwidm5kLnN0YXJkaXZpc2lvbi5jaGFydFwiOiBcInNkc1wiLFxuXHRcdFwidm5kLnN0YXJkaXZpc2lvbi5kcmF3XCI6IFwic2RhXCIsXG5cdFx0XCJ2bmQuc3RhcmRpdmlzaW9uLmltcHJlc3NcIjogXCJzZGRcIixcblx0XHRcInZuZC5zdGFyZGl2aXNpb24ubWF0aFwiOiBbXG5cdFx0XHRcInNkZlwiLFxuXHRcdFx0XCJzbWZcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuc3RhcmRpdmlzaW9uLndyaXRlclwiOiBbXG5cdFx0XHRcInNkd1wiLFxuXHRcdFx0XCJ2b3JcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuc3RhcmRpdmlzaW9uLndyaXRlci1nbG9iYWxcIjogXCJzZ2xcIixcblx0XHRcInZuZC5zdW4ueG1sLmNhbGNcIjogXCJzeGNcIixcblx0XHRcInZuZC5zdW4ueG1sLmNhbGMudGVtcGxhdGVcIjogXCJzdGNcIixcblx0XHRcInZuZC5zdW4ueG1sLmRyYXdcIjogXCJzeGRcIixcblx0XHRcInZuZC5zdW4ueG1sLmRyYXcudGVtcGxhdGVcIjogXCJzdGRcIixcblx0XHRcInZuZC5zdW4ueG1sLmltcHJlc3NcIjogXCJzeGlcIixcblx0XHRcInZuZC5zdW4ueG1sLmltcHJlc3MudGVtcGxhdGVcIjogXCJzdGlcIixcblx0XHRcInZuZC5zdW4ueG1sLm1hdGhcIjogXCJzeG1cIixcblx0XHRcInZuZC5zdW4ueG1sLndyaXRlclwiOiBcInN4d1wiLFxuXHRcdFwidm5kLnN1bi54bWwud3JpdGVyLmdsb2JhbFwiOiBcInN4Z1wiLFxuXHRcdFwidm5kLnN1bi54bWwud3JpdGVyLnRlbXBsYXRlXCI6IFwic3R3XCIsXG5cdFx0XCJ2bmQuc3ltYmlhbi5pbnN0YWxsXCI6IFtcblx0XHRcdFwic2lzXCIsXG5cdFx0XHRcInNpc3hcIlxuXHRcdF0sXG5cdFx0XCJ2bmQudmlzaW9cIjogW1xuXHRcdFx0XCJ2c2RcIixcblx0XHRcdFwidnN0XCIsXG5cdFx0XHRcInZzc1wiLFxuXHRcdFx0XCJ2c3dcIixcblx0XHRcdFwidnNkeFwiLFxuXHRcdFx0XCJ2c3N4XCIsXG5cdFx0XHRcInZzdHhcIixcblx0XHRcdFwidnNzbVwiLFxuXHRcdFx0XCJ2c3RtXCJcblx0XHRdLFxuXHRcdFwidm5kLndhcC53YnhtbFwiOiBcIndieG1sXCIsXG5cdFx0XCJ2bmQud2FwLndtbGNcIjogXCJ3bWxjXCIsXG5cdFx0XCJ2bmQud2FwLndtbHNjcmlwdGNcIjogXCJ3bWxzY1wiLFxuXHRcdFwidm5kLndvcmRwZXJmZWN0XCI6IFwid3BkXCIsXG5cdFx0XCJ2bmQud29yZHBlcmZlY3Q1LjFcIjogXCJ3cDVcIixcblx0XHRcIngtMTIzXCI6IFwid2tcIixcblx0XHRcIngtN3otY29tcHJlc3NlZFwiOiBcIjd6XCIsXG5cdFx0XCJ4LWFiaXdvcmRcIjogXCJhYndcIixcblx0XHRcIngtYXBwbGUtZGlza2ltYWdlXCI6IFwiZG1nXCIsXG5cdFx0XCJ4LWJjcGlvXCI6IFwiYmNwaW9cIixcblx0XHRcIngtYml0dG9ycmVudFwiOiBcInRvcnJlbnRcIixcblx0XHRcIngtY2JyXCI6IFtcblx0XHRcdFwiY2JyXCIsXG5cdFx0XHRcImNiYVwiLFxuXHRcdFx0XCJjYnRcIixcblx0XHRcdFwiY2I3XCJcblx0XHRdLFxuXHRcdFwieC1jYnpcIjogXCJjYnpcIixcblx0XHRcIngtY2RmXCI6IFtcblx0XHRcdFwiY2RmXCIsXG5cdFx0XHRcImNkYVwiXG5cdFx0XSxcblx0XHRcIngtY2RsaW5rXCI6IFwidmNkXCIsXG5cdFx0XCJ4LWNoZXNzLXBnblwiOiBcInBnblwiLFxuXHRcdFwieC1jcGlvXCI6IFwiY3Bpb1wiLFxuXHRcdFwieC1jc2hcIjogXCJjc2hcIixcblx0XHRcIngtZGlyZWN0b3JcIjogW1xuXHRcdFx0XCJkaXJcIixcblx0XHRcdFwiZHhyXCIsXG5cdFx0XHRcImNzdFwiLFxuXHRcdFx0XCJjY3RcIixcblx0XHRcdFwiY3h0XCIsXG5cdFx0XHRcInczZFwiLFxuXHRcdFx0XCJmZ2RcIixcblx0XHRcdFwic3dhXCJcblx0XHRdLFxuXHRcdFwieC1kbXNcIjogXCJkbXNcIixcblx0XHRcIngtZG9vbVwiOiBcIndhZFwiLFxuXHRcdFwieC1kdmlcIjogXCJkdmlcIixcblx0XHRcIngtaHR0cGQtZXJ1YnlcIjogXCJyaHRtbFwiLFxuXHRcdFwieC1mb250XCI6IFwicGNmLlpcIixcblx0XHRcIngtZnJlZW1pbmRcIjogXCJtbVwiLFxuXHRcdFwieC1nbnVtZXJpY1wiOiBcImdudW1lcmljXCIsXG5cdFx0XCJ4LWdvLXNnZlwiOiBcInNnZlwiLFxuXHRcdFwieC1ncmFwaGluZy1jYWxjdWxhdG9yXCI6IFwiZ2NmXCIsXG5cdFx0XCJ4LWd0YXJcIjogW1xuXHRcdFx0XCJndGFyXCIsXG5cdFx0XHRcInRhelwiXG5cdFx0XSxcblx0XHRcIngtaGRmXCI6IFwiaGRmXCIsXG5cdFx0XCJ4LWh0dHBkLXBocFwiOiBbXG5cdFx0XHRcInBodG1sXCIsXG5cdFx0XHRcInBodFwiLFxuXHRcdFx0XCJwaHBcIlxuXHRcdF0sXG5cdFx0XCJ4LWh0dHBkLXBocC1zb3VyY2VcIjogXCJwaHBzXCIsXG5cdFx0XCJ4LWh0dHBkLXBocDNcIjogXCJwaHAzXCIsXG5cdFx0XCJ4LWh0dHBkLXBocDMtcHJlcHJvY2Vzc2VkXCI6IFwicGhwM3BcIixcblx0XHRcIngtaHR0cGQtcGhwNFwiOiBcInBocDRcIixcblx0XHRcIngtaHR0cGQtcGhwNVwiOiBcInBocDVcIixcblx0XHRcIngtaWNhXCI6IFwiaWNhXCIsXG5cdFx0XCJ4LWluZm9cIjogXCJpbmZvXCIsXG5cdFx0XCJ4LWludGVybmV0LXNpZ251cFwiOiBbXG5cdFx0XHRcImluc1wiLFxuXHRcdFx0XCJpc3BcIlxuXHRcdF0sXG5cdFx0XCJ4LWlwaG9uZVwiOiBcImlpaVwiLFxuXHRcdFwieC1pc285NjYwLWltYWdlXCI6IFwiaXNvXCIsXG5cdFx0XCJ4LWphdmEtam5scC1maWxlXCI6IFwiam5scFwiLFxuXHRcdFwieC1qbW9sXCI6IFwiam16XCIsXG5cdFx0XCJ4LWtpbGx1c3RyYXRvclwiOiBcImtpbFwiLFxuXHRcdFwieC1sYXRleFwiOiBcImxhdGV4XCIsXG5cdFx0XCJ4LWx5eFwiOiBcImx5eFwiLFxuXHRcdFwieC1senhcIjogXCJsenhcIixcblx0XHRcIngtbWFrZXJcIjogW1xuXHRcdFx0XCJmcm1cIixcblx0XHRcdFwiZmJcIixcblx0XHRcdFwiZmJkb2NcIlxuXHRcdF0sXG5cdFx0XCJ4LW1zLXdtZFwiOiBcIndtZFwiLFxuXHRcdFwieC1tc2Rvcy1wcm9ncmFtXCI6IFtcblx0XHRcdFwiY29tXCIsXG5cdFx0XHRcImV4ZVwiLFxuXHRcdFx0XCJiYXRcIixcblx0XHRcdFwiZGxsXCJcblx0XHRdLFxuXHRcdFwieC1uZXRjZGZcIjogW1xuXHRcdFx0XCJuY1wiXG5cdFx0XSxcblx0XHRcIngtbnMtcHJveHktYXV0b2NvbmZpZ1wiOiBbXG5cdFx0XHRcInBhY1wiLFxuXHRcdFx0XCJkYXRcIlxuXHRcdF0sXG5cdFx0XCJ4LW53Y1wiOiBcIm53Y1wiLFxuXHRcdFwieC1vYmplY3RcIjogXCJvXCIsXG5cdFx0XCJ4LW96LWFwcGxpY2F0aW9uXCI6IFwib3phXCIsXG5cdFx0XCJ4LXBrY3M3LWNlcnRyZXFyZXNwXCI6IFwicDdyXCIsXG5cdFx0XCJ4LXB5dGhvbi1jb2RlXCI6IFtcblx0XHRcdFwicHljXCIsXG5cdFx0XHRcInB5b1wiXG5cdFx0XSxcblx0XHRcIngtcWdpc1wiOiBbXG5cdFx0XHRcInFnc1wiLFxuXHRcdFx0XCJzaHBcIixcblx0XHRcdFwic2h4XCJcblx0XHRdLFxuXHRcdFwieC1xdWlja3RpbWVwbGF5ZXJcIjogXCJxdGxcIixcblx0XHRcIngtcmVkaGF0LXBhY2thZ2UtbWFuYWdlclwiOiBbXG5cdFx0XHRcInJwbVwiLFxuXHRcdFx0XCJycGFcIlxuXHRcdF0sXG5cdFx0XCJ4LXJ1YnlcIjogXCJyYlwiLFxuXHRcdFwieC1zaFwiOiBcInNoXCIsXG5cdFx0XCJ4LXNoYXJcIjogXCJzaGFyXCIsXG5cdFx0XCJ4LXNob2Nrd2F2ZS1mbGFzaFwiOiBbXG5cdFx0XHRcInN3ZlwiLFxuXHRcdFx0XCJzd2ZsXCJcblx0XHRdLFxuXHRcdFwieC1zaWx2ZXJsaWdodFwiOiBcInNjclwiLFxuXHRcdFwieC1zdHVmZml0XCI6IFwic2l0XCIsXG5cdFx0XCJ4LXN2NGNwaW9cIjogXCJzdjRjcGlvXCIsXG5cdFx0XCJ4LXN2NGNyY1wiOiBcInN2NGNyY1wiLFxuXHRcdFwieC10YXJcIjogXCJ0YXJcIixcblx0XHRcIngtdGV4LWdmXCI6IFwiZ2ZcIixcblx0XHRcIngtdGV4LXBrXCI6IFwicGtcIixcblx0XHRcIngtdGV4aW5mb1wiOiBbXG5cdFx0XHRcInRleGluZm9cIixcblx0XHRcdFwidGV4aVwiXG5cdFx0XSxcblx0XHRcIngtdHJhc2hcIjogW1xuXHRcdFx0XCJ+XCIsXG5cdFx0XHRcIiVcIixcblx0XHRcdFwiYmFrXCIsXG5cdFx0XHRcIm9sZFwiLFxuXHRcdFx0XCJzaWtcIlxuXHRcdF0sXG5cdFx0XCJ4LXVzdGFyXCI6IFwidXN0YXJcIixcblx0XHRcIngtd2Fpcy1zb3VyY2VcIjogXCJzcmNcIixcblx0XHRcIngtd2luZ3pcIjogXCJ3elwiLFxuXHRcdFwieC14NTA5LWNhLWNlcnRcIjogW1xuXHRcdFx0XCJjcnRcIixcblx0XHRcdFwiZGVyXCIsXG5cdFx0XHRcImNlclwiXG5cdFx0XSxcblx0XHRcIngteGNmXCI6IFwieGNmXCIsXG5cdFx0XCJ4LXhmaWdcIjogXCJmaWdcIixcblx0XHRcIngteHBpbnN0YWxsXCI6IFwieHBpXCIsXG5cdFx0XCJhcHBsaXh3YXJlXCI6IFwiYXdcIixcblx0XHRcImF0b21zdmMreG1sXCI6IFwiYXRvbXN2Y1wiLFxuXHRcdFwiY2N4bWwreG1sXCI6IFwiY2N4bWxcIixcblx0XHRcImNkbWktY2FwYWJpbGl0eVwiOiBcImNkbWlhXCIsXG5cdFx0XCJjZG1pLWNvbnRhaW5lclwiOiBcImNkbWljXCIsXG5cdFx0XCJjZG1pLWRvbWFpblwiOiBcImNkbWlkXCIsXG5cdFx0XCJjZG1pLW9iamVjdFwiOiBcImNkbWlvXCIsXG5cdFx0XCJjZG1pLXF1ZXVlXCI6IFwiY2RtaXFcIixcblx0XHRcImRvY2Jvb2sreG1sXCI6IFwiZGJrXCIsXG5cdFx0XCJkc3NjK2RlclwiOiBcImRzc2NcIixcblx0XHRcImRzc2MreG1sXCI6IFwieGRzc2NcIixcblx0XHRcImVtbWEreG1sXCI6IFwiZW1tYVwiLFxuXHRcdFwiZXB1Yit6aXBcIjogXCJlcHViXCIsXG5cdFx0XCJleGlcIjogXCJleGlcIixcblx0XHRcImZvbnQtdGRwZnJcIjogXCJwZnJcIixcblx0XHRcImdtbCt4bWxcIjogXCJnbWxcIixcblx0XHRcImdweCt4bWxcIjogXCJncHhcIixcblx0XHRcImd4ZlwiOiBcImd4ZlwiLFxuXHRcdFwiaHlwZXJzdHVkaW9cIjogXCJzdGtcIixcblx0XHRcImlua21sK3htbFwiOiBbXG5cdFx0XHRcImlua1wiLFxuXHRcdFx0XCJpbmttbFwiXG5cdFx0XSxcblx0XHRcImlwZml4XCI6IFwiaXBmaXhcIixcblx0XHRcImpzb25tbCtqc29uXCI6IFwianNvbm1sXCIsXG5cdFx0XCJsb3N0K3htbFwiOiBcImxvc3R4bWxcIixcblx0XHRcIm1hZHMreG1sXCI6IFwibWFkc1wiLFxuXHRcdFwibWFyY1wiOiBcIm1yY1wiLFxuXHRcdFwibWFyY3htbCt4bWxcIjogXCJtcmN4XCIsXG5cdFx0XCJtYXRobWwreG1sXCI6IFtcblx0XHRcdFwibWF0aG1sXCIsXG5cdFx0XHRcIm1tbFwiXG5cdFx0XSxcblx0XHRcIm1ib3hcIjogXCJtYm94XCIsXG5cdFx0XCJtZWRpYXNlcnZlcmNvbnRyb2wreG1sXCI6IFwibXNjbWxcIixcblx0XHRcIm1ldGFsaW5rK3htbFwiOiBcIm1ldGFsaW5rXCIsXG5cdFx0XCJtZXRhbGluazQreG1sXCI6IFwibWV0YTRcIixcblx0XHRcIm1ldHMreG1sXCI6IFwibWV0c1wiLFxuXHRcdFwibW9kcyt4bWxcIjogXCJtb2RzXCIsXG5cdFx0XCJtcDIxXCI6IFtcblx0XHRcdFwibTIxXCIsXG5cdFx0XHRcIm1wMjFcIlxuXHRcdF0sXG5cdFx0XCJtcDRcIjogXCJtcDRzXCIsXG5cdFx0XCJvZWJwcy1wYWNrYWdlK3htbFwiOiBcIm9wZlwiLFxuXHRcdFwib21kb2MreG1sXCI6IFwib21kb2NcIixcblx0XHRcIm9uZW5vdGVcIjogW1xuXHRcdFx0XCJvbmV0b2NcIixcblx0XHRcdFwib25ldG9jMlwiLFxuXHRcdFx0XCJvbmV0bXBcIixcblx0XHRcdFwib25lcGtnXCJcblx0XHRdLFxuXHRcdFwib3hwc1wiOiBcIm94cHNcIixcblx0XHRcInBhdGNoLW9wcy1lcnJvcit4bWxcIjogXCJ4ZXJcIixcblx0XHRcInBncC1lbmNyeXB0ZWRcIjogXCJwZ3BcIixcblx0XHRcInBrY3MxMFwiOiBcInAxMFwiLFxuXHRcdFwicGtjczctbWltZVwiOiBbXG5cdFx0XHRcInA3bVwiLFxuXHRcdFx0XCJwN2NcIlxuXHRcdF0sXG5cdFx0XCJwa2NzNy1zaWduYXR1cmVcIjogXCJwN3NcIixcblx0XHRcInBrY3M4XCI6IFwicDhcIixcblx0XHRcInBraXgtYXR0ci1jZXJ0XCI6IFwiYWNcIixcblx0XHRcInBraXgtY3JsXCI6IFwiY3JsXCIsXG5cdFx0XCJwa2l4LXBraXBhdGhcIjogXCJwa2lwYXRoXCIsXG5cdFx0XCJwa2l4Y21wXCI6IFwicGtpXCIsXG5cdFx0XCJwbHMreG1sXCI6IFwicGxzXCIsXG5cdFx0XCJwcnMuY3d3XCI6IFwiY3d3XCIsXG5cdFx0XCJwc2tjK3htbFwiOiBcInBza2N4bWxcIixcblx0XHRcInJlZ2luZm8reG1sXCI6IFwicmlmXCIsXG5cdFx0XCJyZWxheC1uZy1jb21wYWN0LXN5bnRheFwiOiBcInJuY1wiLFxuXHRcdFwicmVzb3VyY2UtbGlzdHMreG1sXCI6IFwicmxcIixcblx0XHRcInJlc291cmNlLWxpc3RzLWRpZmYreG1sXCI6IFwicmxkXCIsXG5cdFx0XCJybHMtc2VydmljZXMreG1sXCI6IFwicnNcIixcblx0XHRcInJwa2ktZ2hvc3RidXN0ZXJzXCI6IFwiZ2JyXCIsXG5cdFx0XCJycGtpLW1hbmlmZXN0XCI6IFwibWZ0XCIsXG5cdFx0XCJycGtpLXJvYVwiOiBcInJvYVwiLFxuXHRcdFwicnNkK3htbFwiOiBcInJzZFwiLFxuXHRcdFwic2JtbCt4bWxcIjogXCJzYm1sXCIsXG5cdFx0XCJzY3ZwLWN2LXJlcXVlc3RcIjogXCJzY3FcIixcblx0XHRcInNjdnAtY3YtcmVzcG9uc2VcIjogXCJzY3NcIixcblx0XHRcInNjdnAtdnAtcmVxdWVzdFwiOiBcInNwcVwiLFxuXHRcdFwic2N2cC12cC1yZXNwb25zZVwiOiBcInNwcFwiLFxuXHRcdFwic2RwXCI6IFwic2RwXCIsXG5cdFx0XCJzZXQtcGF5bWVudC1pbml0aWF0aW9uXCI6IFwic2V0cGF5XCIsXG5cdFx0XCJzZXQtcmVnaXN0cmF0aW9uLWluaXRpYXRpb25cIjogXCJzZXRyZWdcIixcblx0XHRcInNoZit4bWxcIjogXCJzaGZcIixcblx0XHRcInNwYXJxbC1xdWVyeVwiOiBcInJxXCIsXG5cdFx0XCJzcGFycWwtcmVzdWx0cyt4bWxcIjogXCJzcnhcIixcblx0XHRcInNyZ3NcIjogXCJncmFtXCIsXG5cdFx0XCJzcmdzK3htbFwiOiBcImdyeG1sXCIsXG5cdFx0XCJzcnUreG1sXCI6IFwic3J1XCIsXG5cdFx0XCJzc2RsK3htbFwiOiBcInNzZGxcIixcblx0XHRcInNzbWwreG1sXCI6IFwic3NtbFwiLFxuXHRcdFwidGVpK3htbFwiOiBbXG5cdFx0XHRcInRlaVwiLFxuXHRcdFx0XCJ0ZWljb3JwdXNcIlxuXHRcdF0sXG5cdFx0XCJ0aHJhdWQreG1sXCI6IFwidGZpXCIsXG5cdFx0XCJ0aW1lc3RhbXBlZC1kYXRhXCI6IFwidHNkXCIsXG5cdFx0XCJ2bmQuM2dwcC5waWMtYnctbGFyZ2VcIjogXCJwbGJcIixcblx0XHRcInZuZC4zZ3BwLnBpYy1idy1zbWFsbFwiOiBcInBzYlwiLFxuXHRcdFwidm5kLjNncHAucGljLWJ3LXZhclwiOiBcInB2YlwiLFxuXHRcdFwidm5kLjNncHAyLnRjYXBcIjogXCJ0Y2FwXCIsXG5cdFx0XCJ2bmQuM20ucG9zdC1pdC1ub3Rlc1wiOiBcInB3blwiLFxuXHRcdFwidm5kLmFjY3BhYy5zaW1wbHkuYXNvXCI6IFwiYXNvXCIsXG5cdFx0XCJ2bmQuYWNjcGFjLnNpbXBseS5pbXBcIjogXCJpbXBcIixcblx0XHRcInZuZC5hY3Vjb2JvbFwiOiBcImFjdVwiLFxuXHRcdFwidm5kLmFjdWNvcnBcIjogW1xuXHRcdFx0XCJhdGNcIixcblx0XHRcdFwiYWN1dGNcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuYWRvYmUuYWlyLWFwcGxpY2F0aW9uLWluc3RhbGxlci1wYWNrYWdlK3ppcFwiOiBcImFpclwiLFxuXHRcdFwidm5kLmFkb2JlLmZvcm1zY2VudHJhbC5mY2R0XCI6IFwiZmNkdFwiLFxuXHRcdFwidm5kLmFkb2JlLmZ4cFwiOiBbXG5cdFx0XHRcImZ4cFwiLFxuXHRcdFx0XCJmeHBsXCJcblx0XHRdLFxuXHRcdFwidm5kLmFkb2JlLnhkcCt4bWxcIjogXCJ4ZHBcIixcblx0XHRcInZuZC5hZG9iZS54ZmRmXCI6IFwieGZkZlwiLFxuXHRcdFwidm5kLmFoZWFkLnNwYWNlXCI6IFwiYWhlYWRcIixcblx0XHRcInZuZC5haXJ6aXAuZmlsZXNlY3VyZS5hemZcIjogXCJhemZcIixcblx0XHRcInZuZC5haXJ6aXAuZmlsZXNlY3VyZS5henNcIjogXCJhenNcIixcblx0XHRcInZuZC5hbWF6b24uZWJvb2tcIjogXCJhendcIixcblx0XHRcInZuZC5hbWVyaWNhbmR5bmFtaWNzLmFjY1wiOiBcImFjY1wiLFxuXHRcdFwidm5kLmFtaWdhLmFtaVwiOiBcImFtaVwiLFxuXHRcdFwidm5kLmFuc2VyLXdlYi1jZXJ0aWZpY2F0ZS1pc3N1ZS1pbml0aWF0aW9uXCI6IFwiY2lpXCIsXG5cdFx0XCJ2bmQuYW5zZXItd2ViLWZ1bmRzLXRyYW5zZmVyLWluaXRpYXRpb25cIjogXCJmdGlcIixcblx0XHRcInZuZC5hbnRpeC5nYW1lLWNvbXBvbmVudFwiOiBcImF0eFwiLFxuXHRcdFwidm5kLmFwcGxlLmluc3RhbGxlcit4bWxcIjogXCJtcGtnXCIsXG5cdFx0XCJ2bmQuYXBwbGUubXBlZ3VybFwiOiBcIm0zdThcIixcblx0XHRcInZuZC5hcmlzdGFuZXR3b3Jrcy5zd2lcIjogXCJzd2lcIixcblx0XHRcInZuZC5hc3RyYWVhLXNvZnR3YXJlLmlvdGFcIjogXCJpb3RhXCIsXG5cdFx0XCJ2bmQuYXVkaW9ncmFwaFwiOiBcImFlcFwiLFxuXHRcdFwidm5kLmJsdWVpY2UubXVsdGlwYXNzXCI6IFwibXBtXCIsXG5cdFx0XCJ2bmQuYm1pXCI6IFwiYm1pXCIsXG5cdFx0XCJ2bmQuYnVzaW5lc3NvYmplY3RzXCI6IFwicmVwXCIsXG5cdFx0XCJ2bmQuY2hlbWRyYXcreG1sXCI6IFwiY2R4bWxcIixcblx0XHRcInZuZC5jaGlwbnV0cy5rYXJhb2tlLW1tZFwiOiBcIm1tZFwiLFxuXHRcdFwidm5kLmNsYXltb3JlXCI6IFwiY2xhXCIsXG5cdFx0XCJ2bmQuY2xvYW50by5ycDlcIjogXCJycDlcIixcblx0XHRcInZuZC5jbG9uay5jNGdyb3VwXCI6IFtcblx0XHRcdFwiYzRnXCIsXG5cdFx0XHRcImM0ZFwiLFxuXHRcdFx0XCJjNGZcIixcblx0XHRcdFwiYzRwXCIsXG5cdFx0XHRcImM0dVwiXG5cdFx0XSxcblx0XHRcInZuZC5jbHVldHJ1c3QuY2FydG9tb2JpbGUtY29uZmlnXCI6IFwiYzExYW1jXCIsXG5cdFx0XCJ2bmQuY2x1ZXRydXN0LmNhcnRvbW9iaWxlLWNvbmZpZy1wa2dcIjogXCJjMTFhbXpcIixcblx0XHRcInZuZC5jb21tb25zcGFjZVwiOiBcImNzcFwiLFxuXHRcdFwidm5kLmNvbnRhY3QuY21zZ1wiOiBcImNkYmNtc2dcIixcblx0XHRcInZuZC5jb3Ntb2NhbGxlclwiOiBcImNtY1wiLFxuXHRcdFwidm5kLmNyaWNrLmNsaWNrZXJcIjogXCJjbGt4XCIsXG5cdFx0XCJ2bmQuY3JpY2suY2xpY2tlci5rZXlib2FyZFwiOiBcImNsa2tcIixcblx0XHRcInZuZC5jcmljay5jbGlja2VyLnBhbGV0dGVcIjogXCJjbGtwXCIsXG5cdFx0XCJ2bmQuY3JpY2suY2xpY2tlci50ZW1wbGF0ZVwiOiBcImNsa3RcIixcblx0XHRcInZuZC5jcmljay5jbGlja2VyLndvcmRiYW5rXCI6IFwiY2xrd1wiLFxuXHRcdFwidm5kLmNyaXRpY2FsdG9vbHMud2JzK3htbFwiOiBcIndic1wiLFxuXHRcdFwidm5kLmN0Yy1wb3NtbFwiOiBcInBtbFwiLFxuXHRcdFwidm5kLmN1cHMtcHBkXCI6IFwicHBkXCIsXG5cdFx0XCJ2bmQuY3VybC5jYXJcIjogXCJjYXJcIixcblx0XHRcInZuZC5jdXJsLnBjdXJsXCI6IFwicGN1cmxcIixcblx0XHRcInZuZC5kYXJ0XCI6IFwiZGFydFwiLFxuXHRcdFwidm5kLmRhdGEtdmlzaW9uLnJkelwiOiBcInJkelwiLFxuXHRcdFwidm5kLmRlY2UuZGF0YVwiOiBbXG5cdFx0XHRcInV2ZlwiLFxuXHRcdFx0XCJ1dnZmXCIsXG5cdFx0XHRcInV2ZFwiLFxuXHRcdFx0XCJ1dnZkXCJcblx0XHRdLFxuXHRcdFwidm5kLmRlY2UudHRtbCt4bWxcIjogW1xuXHRcdFx0XCJ1dnRcIixcblx0XHRcdFwidXZ2dFwiXG5cdFx0XSxcblx0XHRcInZuZC5kZWNlLnVuc3BlY2lmaWVkXCI6IFtcblx0XHRcdFwidXZ4XCIsXG5cdFx0XHRcInV2dnhcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuZGVjZS56aXBcIjogW1xuXHRcdFx0XCJ1dnpcIixcblx0XHRcdFwidXZ2elwiXG5cdFx0XSxcblx0XHRcInZuZC5kZW5vdm8uZmNzZWxheW91dC1saW5rXCI6IFwiZmVfbGF1bmNoXCIsXG5cdFx0XCJ2bmQuZG5hXCI6IFwiZG5hXCIsXG5cdFx0XCJ2bmQuZG9sYnkubWxwXCI6IFwibWxwXCIsXG5cdFx0XCJ2bmQuZHBncmFwaFwiOiBcImRwZ1wiLFxuXHRcdFwidm5kLmRyZWFtZmFjdG9yeVwiOiBcImRmYWNcIixcblx0XHRcInZuZC5kcy1rZXlwb2ludFwiOiBcImtweHhcIixcblx0XHRcInZuZC5kdmIuYWl0XCI6IFwiYWl0XCIsXG5cdFx0XCJ2bmQuZHZiLnNlcnZpY2VcIjogXCJzdmNcIixcblx0XHRcInZuZC5keW5hZ2VvXCI6IFwiZ2VvXCIsXG5cdFx0XCJ2bmQuZWNvd2luLmNoYXJ0XCI6IFwibWFnXCIsXG5cdFx0XCJ2bmQuZW5saXZlblwiOiBcIm5tbFwiLFxuXHRcdFwidm5kLmVwc29uLmVzZlwiOiBcImVzZlwiLFxuXHRcdFwidm5kLmVwc29uLm1zZlwiOiBcIm1zZlwiLFxuXHRcdFwidm5kLmVwc29uLnF1aWNrYW5pbWVcIjogXCJxYW1cIixcblx0XHRcInZuZC5lcHNvbi5zYWx0XCI6IFwic2x0XCIsXG5cdFx0XCJ2bmQuZXBzb24uc3NmXCI6IFwic3NmXCIsXG5cdFx0XCJ2bmQuZXN6aWdubzMreG1sXCI6IFtcblx0XHRcdFwiZXMzXCIsXG5cdFx0XHRcImV0M1wiXG5cdFx0XSxcblx0XHRcInZuZC5lenBpeC1hbGJ1bVwiOiBcImV6MlwiLFxuXHRcdFwidm5kLmV6cGl4LXBhY2thZ2VcIjogXCJlejNcIixcblx0XHRcInZuZC5mZGZcIjogXCJmZGZcIixcblx0XHRcInZuZC5mZHNuLm1zZWVkXCI6IFwibXNlZWRcIixcblx0XHRcInZuZC5mZHNuLnNlZWRcIjogW1xuXHRcdFx0XCJzZWVkXCIsXG5cdFx0XHRcImRhdGFsZXNzXCJcblx0XHRdLFxuXHRcdFwidm5kLmZsb2dyYXBoaXRcIjogXCJncGhcIixcblx0XHRcInZuZC5mbHV4dGltZS5jbGlwXCI6IFwiZnRjXCIsXG5cdFx0XCJ2bmQuZnJhbWVtYWtlclwiOiBbXG5cdFx0XHRcImZtXCIsXG5cdFx0XHRcImZyYW1lXCIsXG5cdFx0XHRcIm1ha2VyXCIsXG5cdFx0XHRcImJvb2tcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuZnJvZ2Fucy5mbmNcIjogXCJmbmNcIixcblx0XHRcInZuZC5mcm9nYW5zLmx0ZlwiOiBcImx0ZlwiLFxuXHRcdFwidm5kLmZzYy53ZWJsYXVuY2hcIjogXCJmc2NcIixcblx0XHRcInZuZC5mdWppdHN1Lm9hc3lzXCI6IFwib2FzXCIsXG5cdFx0XCJ2bmQuZnVqaXRzdS5vYXN5czJcIjogXCJvYTJcIixcblx0XHRcInZuZC5mdWppdHN1Lm9hc3lzM1wiOiBcIm9hM1wiLFxuXHRcdFwidm5kLmZ1aml0c3Uub2FzeXNncFwiOiBcImZnNVwiLFxuXHRcdFwidm5kLmZ1aml0c3Uub2FzeXNwcnNcIjogXCJiaDJcIixcblx0XHRcInZuZC5mdWppeGVyb3guZGRkXCI6IFwiZGRkXCIsXG5cdFx0XCJ2bmQuZnVqaXhlcm94LmRvY3V3b3Jrc1wiOiBcInhkd1wiLFxuXHRcdFwidm5kLmZ1aml4ZXJveC5kb2N1d29ya3MuYmluZGVyXCI6IFwieGJkXCIsXG5cdFx0XCJ2bmQuZnV6enlzaGVldFwiOiBcImZ6c1wiLFxuXHRcdFwidm5kLmdlbm9tYXRpeC50dXhlZG9cIjogXCJ0eGRcIixcblx0XHRcInZuZC5nZW9nZWJyYS5maWxlXCI6IFwiZ2diXCIsXG5cdFx0XCJ2bmQuZ2VvZ2VicmEudG9vbFwiOiBcImdndFwiLFxuXHRcdFwidm5kLmdlb21ldHJ5LWV4cGxvcmVyXCI6IFtcblx0XHRcdFwiZ2V4XCIsXG5cdFx0XHRcImdyZVwiXG5cdFx0XSxcblx0XHRcInZuZC5nZW9uZXh0XCI6IFwiZ3h0XCIsXG5cdFx0XCJ2bmQuZ2VvcGxhblwiOiBcImcyd1wiLFxuXHRcdFwidm5kLmdlb3NwYWNlXCI6IFwiZzN3XCIsXG5cdFx0XCJ2bmQuZ214XCI6IFwiZ214XCIsXG5cdFx0XCJ2bmQuZ3JhZmVxXCI6IFtcblx0XHRcdFwiZ3FmXCIsXG5cdFx0XHRcImdxc1wiXG5cdFx0XSxcblx0XHRcInZuZC5ncm9vdmUtYWNjb3VudFwiOiBcImdhY1wiLFxuXHRcdFwidm5kLmdyb292ZS1oZWxwXCI6IFwiZ2hmXCIsXG5cdFx0XCJ2bmQuZ3Jvb3ZlLWlkZW50aXR5LW1lc3NhZ2VcIjogXCJnaW1cIixcblx0XHRcInZuZC5ncm9vdmUtaW5qZWN0b3JcIjogXCJncnZcIixcblx0XHRcInZuZC5ncm9vdmUtdG9vbC1tZXNzYWdlXCI6IFwiZ3RtXCIsXG5cdFx0XCJ2bmQuZ3Jvb3ZlLXRvb2wtdGVtcGxhdGVcIjogXCJ0cGxcIixcblx0XHRcInZuZC5ncm9vdmUtdmNhcmRcIjogXCJ2Y2dcIixcblx0XHRcInZuZC5oYWwreG1sXCI6IFwiaGFsXCIsXG5cdFx0XCJ2bmQuaGFuZGhlbGQtZW50ZXJ0YWlubWVudCt4bWxcIjogXCJ6bW1cIixcblx0XHRcInZuZC5oYmNpXCI6IFwiaGJjaVwiLFxuXHRcdFwidm5kLmhoZS5sZXNzb24tcGxheWVyXCI6IFwibGVzXCIsXG5cdFx0XCJ2bmQuaHAtaHBnbFwiOiBcImhwZ2xcIixcblx0XHRcInZuZC5ocC1ocGlkXCI6IFwiaHBpZFwiLFxuXHRcdFwidm5kLmhwLWhwc1wiOiBcImhwc1wiLFxuXHRcdFwidm5kLmhwLWpseXRcIjogXCJqbHRcIixcblx0XHRcInZuZC5ocC1wY2xcIjogXCJwY2xcIixcblx0XHRcInZuZC5ocC1wY2x4bFwiOiBcInBjbHhsXCIsXG5cdFx0XCJ2bmQuaHlkcm9zdGF0aXguc29mLWRhdGFcIjogXCJzZmQtaGRzdHhcIixcblx0XHRcInZuZC5pYm0ubWluaXBheVwiOiBcIm1weVwiLFxuXHRcdFwidm5kLmlibS5tb2RjYXBcIjogW1xuXHRcdFx0XCJhZnBcIixcblx0XHRcdFwibGlzdGFmcFwiLFxuXHRcdFx0XCJsaXN0MzgyMFwiXG5cdFx0XSxcblx0XHRcInZuZC5pYm0ucmlnaHRzLW1hbmFnZW1lbnRcIjogXCJpcm1cIixcblx0XHRcInZuZC5pYm0uc2VjdXJlLWNvbnRhaW5lclwiOiBcInNjXCIsXG5cdFx0XCJ2bmQuaWNjcHJvZmlsZVwiOiBbXG5cdFx0XHRcImljY1wiLFxuXHRcdFx0XCJpY21cIlxuXHRcdF0sXG5cdFx0XCJ2bmQuaWdsb2FkZXJcIjogXCJpZ2xcIixcblx0XHRcInZuZC5pbW1lcnZpc2lvbi1pdnBcIjogXCJpdnBcIixcblx0XHRcInZuZC5pbW1lcnZpc2lvbi1pdnVcIjogXCJpdnVcIixcblx0XHRcInZuZC5pbnNvcnMuaWdtXCI6IFwiaWdtXCIsXG5cdFx0XCJ2bmQuaW50ZXJjb24uZm9ybW5ldFwiOiBbXG5cdFx0XHRcInhwd1wiLFxuXHRcdFx0XCJ4cHhcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuaW50ZXJnZW9cIjogXCJpMmdcIixcblx0XHRcInZuZC5pbnR1LnFib1wiOiBcInFib1wiLFxuXHRcdFwidm5kLmludHUucWZ4XCI6IFwicWZ4XCIsXG5cdFx0XCJ2bmQuaXB1bnBsdWdnZWQucmNwcm9maWxlXCI6IFwicmNwcm9maWxlXCIsXG5cdFx0XCJ2bmQuaXJlcG9zaXRvcnkucGFja2FnZSt4bWxcIjogXCJpcnBcIixcblx0XHRcInZuZC5pcy14cHJcIjogXCJ4cHJcIixcblx0XHRcInZuZC5pc2FjLmZjc1wiOiBcImZjc1wiLFxuXHRcdFwidm5kLmphbVwiOiBcImphbVwiLFxuXHRcdFwidm5kLmpjcC5qYXZhbWUubWlkbGV0LXJtc1wiOiBcInJtc1wiLFxuXHRcdFwidm5kLmppc3BcIjogXCJqaXNwXCIsXG5cdFx0XCJ2bmQuam9vc3Quam9kYS1hcmNoaXZlXCI6IFwiam9kYVwiLFxuXHRcdFwidm5kLmthaG9vdHpcIjogW1xuXHRcdFx0XCJrdHpcIixcblx0XHRcdFwia3RyXCJcblx0XHRdLFxuXHRcdFwidm5kLmtkZS5rYXJib25cIjogXCJrYXJib25cIixcblx0XHRcInZuZC5rZGUua2NoYXJ0XCI6IFwiY2hydFwiLFxuXHRcdFwidm5kLmtkZS5rZm9ybXVsYVwiOiBcImtmb1wiLFxuXHRcdFwidm5kLmtkZS5raXZpb1wiOiBcImZsd1wiLFxuXHRcdFwidm5kLmtkZS5rb250b3VyXCI6IFwia29uXCIsXG5cdFx0XCJ2bmQua2RlLmtwcmVzZW50ZXJcIjogW1xuXHRcdFx0XCJrcHJcIixcblx0XHRcdFwia3B0XCJcblx0XHRdLFxuXHRcdFwidm5kLmtkZS5rc3ByZWFkXCI6IFwia3NwXCIsXG5cdFx0XCJ2bmQua2RlLmt3b3JkXCI6IFtcblx0XHRcdFwia3dkXCIsXG5cdFx0XHRcImt3dFwiXG5cdFx0XSxcblx0XHRcInZuZC5rZW5hbWVhYXBwXCI6IFwiaHRrZVwiLFxuXHRcdFwidm5kLmtpZHNwaXJhdGlvblwiOiBcImtpYVwiLFxuXHRcdFwidm5kLmtpbmFyXCI6IFtcblx0XHRcdFwia25lXCIsXG5cdFx0XHRcImtucFwiXG5cdFx0XSxcblx0XHRcInZuZC5rb2FuXCI6IFtcblx0XHRcdFwic2twXCIsXG5cdFx0XHRcInNrZFwiLFxuXHRcdFx0XCJza3RcIixcblx0XHRcdFwic2ttXCJcblx0XHRdLFxuXHRcdFwidm5kLmtvZGFrLWRlc2NyaXB0b3JcIjogXCJzc2VcIixcblx0XHRcInZuZC5sYXMubGFzK3htbFwiOiBcImxhc3htbFwiLFxuXHRcdFwidm5kLmxsYW1hZ3JhcGhpY3MubGlmZS1iYWxhbmNlLmRlc2t0b3BcIjogXCJsYmRcIixcblx0XHRcInZuZC5sbGFtYWdyYXBoaWNzLmxpZmUtYmFsYW5jZS5leGNoYW5nZSt4bWxcIjogXCJsYmVcIixcblx0XHRcInZuZC5sb3R1cy0xLTItM1wiOiBcIjEyM1wiLFxuXHRcdFwidm5kLmxvdHVzLWFwcHJvYWNoXCI6IFwiYXByXCIsXG5cdFx0XCJ2bmQubG90dXMtZnJlZWxhbmNlXCI6IFwicHJlXCIsXG5cdFx0XCJ2bmQubG90dXMtbm90ZXNcIjogXCJuc2ZcIixcblx0XHRcInZuZC5sb3R1cy1vcmdhbml6ZXJcIjogXCJvcmdcIixcblx0XHRcInZuZC5sb3R1cy1zY3JlZW5jYW1cIjogXCJzY21cIixcblx0XHRcInZuZC5sb3R1cy13b3JkcHJvXCI6IFwibHdwXCIsXG5cdFx0XCJ2bmQubWFjcG9ydHMucG9ydHBrZ1wiOiBcInBvcnRwa2dcIixcblx0XHRcInZuZC5tY2RcIjogXCJtY2RcIixcblx0XHRcInZuZC5tZWRjYWxjZGF0YVwiOiBcIm1jMVwiLFxuXHRcdFwidm5kLm1lZGlhc3RhdGlvbi5jZGtleVwiOiBcImNka2V5XCIsXG5cdFx0XCJ2bmQubWZlclwiOiBcIm13ZlwiLFxuXHRcdFwidm5kLm1mbXBcIjogXCJtZm1cIixcblx0XHRcInZuZC5taWNyb2dyYWZ4LmZsb1wiOiBcImZsb1wiLFxuXHRcdFwidm5kLm1pY3JvZ3JhZnguaWd4XCI6IFwiaWd4XCIsXG5cdFx0XCJ2bmQubWlmXCI6IFwibWlmXCIsXG5cdFx0XCJ2bmQubW9iaXVzLmRhZlwiOiBcImRhZlwiLFxuXHRcdFwidm5kLm1vYml1cy5kaXNcIjogXCJkaXNcIixcblx0XHRcInZuZC5tb2JpdXMubWJrXCI6IFwibWJrXCIsXG5cdFx0XCJ2bmQubW9iaXVzLm1xeVwiOiBcIm1xeVwiLFxuXHRcdFwidm5kLm1vYml1cy5tc2xcIjogXCJtc2xcIixcblx0XHRcInZuZC5tb2JpdXMucGxjXCI6IFwicGxjXCIsXG5cdFx0XCJ2bmQubW9iaXVzLnR4ZlwiOiBcInR4ZlwiLFxuXHRcdFwidm5kLm1vcGh1bi5hcHBsaWNhdGlvblwiOiBcIm1wblwiLFxuXHRcdFwidm5kLm1vcGh1bi5jZXJ0aWZpY2F0ZVwiOiBcIm1wY1wiLFxuXHRcdFwidm5kLm1zLWFydGdhbHJ5XCI6IFwiY2lsXCIsXG5cdFx0XCJ2bmQubXMtY2FiLWNvbXByZXNzZWRcIjogXCJjYWJcIixcblx0XHRcInZuZC5tcy1leGNlbC5hZGRpbi5tYWNyb2VuYWJsZWQuMTJcIjogXCJ4bGFtXCIsXG5cdFx0XCJ2bmQubXMtZXhjZWwuc2hlZXQuYmluYXJ5Lm1hY3JvZW5hYmxlZC4xMlwiOiBcInhsc2JcIixcblx0XHRcInZuZC5tcy1leGNlbC5zaGVldC5tYWNyb2VuYWJsZWQuMTJcIjogXCJ4bHNtXCIsXG5cdFx0XCJ2bmQubXMtZXhjZWwudGVtcGxhdGUubWFjcm9lbmFibGVkLjEyXCI6IFwieGx0bVwiLFxuXHRcdFwidm5kLm1zLWZvbnRvYmplY3RcIjogXCJlb3RcIixcblx0XHRcInZuZC5tcy1odG1saGVscFwiOiBcImNobVwiLFxuXHRcdFwidm5kLm1zLWltc1wiOiBcImltc1wiLFxuXHRcdFwidm5kLm1zLWxybVwiOiBcImxybVwiLFxuXHRcdFwidm5kLm1zLW9mZmljZXRoZW1lXCI6IFwidGhteFwiLFxuXHRcdFwidm5kLm1zLXBvd2VycG9pbnQuYWRkaW4ubWFjcm9lbmFibGVkLjEyXCI6IFwicHBhbVwiLFxuXHRcdFwidm5kLm1zLXBvd2VycG9pbnQucHJlc2VudGF0aW9uLm1hY3JvZW5hYmxlZC4xMlwiOiBcInBwdG1cIixcblx0XHRcInZuZC5tcy1wb3dlcnBvaW50LnNsaWRlLm1hY3JvZW5hYmxlZC4xMlwiOiBcInNsZG1cIixcblx0XHRcInZuZC5tcy1wb3dlcnBvaW50LnNsaWRlc2hvdy5tYWNyb2VuYWJsZWQuMTJcIjogXCJwcHNtXCIsXG5cdFx0XCJ2bmQubXMtcG93ZXJwb2ludC50ZW1wbGF0ZS5tYWNyb2VuYWJsZWQuMTJcIjogXCJwb3RtXCIsXG5cdFx0XCJ2bmQubXMtcHJvamVjdFwiOiBbXG5cdFx0XHRcIm1wcFwiLFxuXHRcdFx0XCJtcHRcIlxuXHRcdF0sXG5cdFx0XCJ2bmQubXMtd29yZC5kb2N1bWVudC5tYWNyb2VuYWJsZWQuMTJcIjogXCJkb2NtXCIsXG5cdFx0XCJ2bmQubXMtd29yZC50ZW1wbGF0ZS5tYWNyb2VuYWJsZWQuMTJcIjogXCJkb3RtXCIsXG5cdFx0XCJ2bmQubXMtd29ya3NcIjogW1xuXHRcdFx0XCJ3cHNcIixcblx0XHRcdFwid2tzXCIsXG5cdFx0XHRcIndjbVwiLFxuXHRcdFx0XCJ3ZGJcIlxuXHRcdF0sXG5cdFx0XCJ2bmQubXMtd3BsXCI6IFwid3BsXCIsXG5cdFx0XCJ2bmQubXMteHBzZG9jdW1lbnRcIjogXCJ4cHNcIixcblx0XHRcInZuZC5tc2VxXCI6IFwibXNlcVwiLFxuXHRcdFwidm5kLm11c2ljaWFuXCI6IFwibXVzXCIsXG5cdFx0XCJ2bmQubXV2ZWUuc3R5bGVcIjogXCJtc3R5XCIsXG5cdFx0XCJ2bmQubXluZmNcIjogXCJ0YWdsZXRcIixcblx0XHRcInZuZC5uZXVyb2xhbmd1YWdlLm5sdVwiOiBcIm5sdVwiLFxuXHRcdFwidm5kLm5pdGZcIjogW1xuXHRcdFx0XCJudGZcIixcblx0XHRcdFwibml0ZlwiXG5cdFx0XSxcblx0XHRcInZuZC5ub2JsZW5ldC1kaXJlY3RvcnlcIjogXCJubmRcIixcblx0XHRcInZuZC5ub2JsZW5ldC1zZWFsZXJcIjogXCJubnNcIixcblx0XHRcInZuZC5ub2JsZW5ldC13ZWJcIjogXCJubndcIixcblx0XHRcInZuZC5ub2tpYS5uLWdhZ2UuZGF0YVwiOiBcIm5nZGF0XCIsXG5cdFx0XCJ2bmQubm9raWEubi1nYWdlLnN5bWJpYW4uaW5zdGFsbFwiOiBcIm4tZ2FnZVwiLFxuXHRcdFwidm5kLm5va2lhLnJhZGlvLXByZXNldFwiOiBcInJwc3RcIixcblx0XHRcInZuZC5ub2tpYS5yYWRpby1wcmVzZXRzXCI6IFwicnBzc1wiLFxuXHRcdFwidm5kLm5vdmFkaWdtLmVkbVwiOiBcImVkbVwiLFxuXHRcdFwidm5kLm5vdmFkaWdtLmVkeFwiOiBcImVkeFwiLFxuXHRcdFwidm5kLm5vdmFkaWdtLmV4dFwiOiBcImV4dFwiLFxuXHRcdFwidm5kLm9hc2lzLm9wZW5kb2N1bWVudC5jaGFydC10ZW1wbGF0ZVwiOiBcIm90Y1wiLFxuXHRcdFwidm5kLm9hc2lzLm9wZW5kb2N1bWVudC5mb3JtdWxhLXRlbXBsYXRlXCI6IFwib2RmdFwiLFxuXHRcdFwidm5kLm9hc2lzLm9wZW5kb2N1bWVudC5pbWFnZS10ZW1wbGF0ZVwiOiBcIm90aVwiLFxuXHRcdFwidm5kLm9scGMtc3VnYXJcIjogXCJ4b1wiLFxuXHRcdFwidm5kLm9tYS5kZDIreG1sXCI6IFwiZGQyXCIsXG5cdFx0XCJ2bmQub3Blbm9mZmljZW9yZy5leHRlbnNpb25cIjogXCJveHRcIixcblx0XHRcInZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZVwiOiBcInNsZHhcIixcblx0XHRcInZuZC5vc2dlby5tYXBndWlkZS5wYWNrYWdlXCI6IFwibWdwXCIsXG5cdFx0XCJ2bmQub3NnaS5kcFwiOiBcImRwXCIsXG5cdFx0XCJ2bmQub3NnaS5zdWJzeXN0ZW1cIjogXCJlc2FcIixcblx0XHRcInZuZC5wYWxtXCI6IFtcblx0XHRcdFwicGRiXCIsXG5cdFx0XHRcInBxYVwiLFxuXHRcdFx0XCJvcHJjXCJcblx0XHRdLFxuXHRcdFwidm5kLnBhd2FhZmlsZVwiOiBcInBhd1wiLFxuXHRcdFwidm5kLnBnLmZvcm1hdFwiOiBcInN0clwiLFxuXHRcdFwidm5kLnBnLm9zYXNsaVwiOiBcImVpNlwiLFxuXHRcdFwidm5kLnBpY3NlbFwiOiBcImVmaWZcIixcblx0XHRcInZuZC5wbWkud2lkZ2V0XCI6IFwid2dcIixcblx0XHRcInZuZC5wb2NrZXRsZWFyblwiOiBcInBsZlwiLFxuXHRcdFwidm5kLnBvd2VyYnVpbGRlcjZcIjogXCJwYmRcIixcblx0XHRcInZuZC5wcmV2aWV3c3lzdGVtcy5ib3hcIjogXCJib3hcIixcblx0XHRcInZuZC5wcm90ZXVzLm1hZ2F6aW5lXCI6IFwibWd6XCIsXG5cdFx0XCJ2bmQucHVibGlzaGFyZS1kZWx0YS10cmVlXCI6IFwicXBzXCIsXG5cdFx0XCJ2bmQucHZpLnB0aWQxXCI6IFwicHRpZFwiLFxuXHRcdFwidm5kLnF1YXJrLnF1YXJreHByZXNzXCI6IFtcblx0XHRcdFwicXhkXCIsXG5cdFx0XHRcInF4dFwiLFxuXHRcdFx0XCJxd2RcIixcblx0XHRcdFwicXd0XCIsXG5cdFx0XHRcInF4bFwiLFxuXHRcdFx0XCJxeGJcIlxuXHRcdF0sXG5cdFx0XCJ2bmQucmVhbHZuYy5iZWRcIjogXCJiZWRcIixcblx0XHRcInZuZC5yZWNvcmRhcmUubXVzaWN4bWxcIjogXCJteGxcIixcblx0XHRcInZuZC5yZWNvcmRhcmUubXVzaWN4bWwreG1sXCI6IFwibXVzaWN4bWxcIixcblx0XHRcInZuZC5yaWcuY3J5cHRvbm90ZVwiOiBcImNyeXB0b25vdGVcIixcblx0XHRcInZuZC5ybi1yZWFsbWVkaWFcIjogXCJybVwiLFxuXHRcdFwidm5kLnJuLXJlYWxtZWRpYS12YnJcIjogXCJybXZiXCIsXG5cdFx0XCJ2bmQucm91dGU2Ni5saW5rNjYreG1sXCI6IFwibGluazY2XCIsXG5cdFx0XCJ2bmQuc2FpbGluZ3RyYWNrZXIudHJhY2tcIjogXCJzdFwiLFxuXHRcdFwidm5kLnNlZW1haWxcIjogXCJzZWVcIixcblx0XHRcInZuZC5zZW1hXCI6IFwic2VtYVwiLFxuXHRcdFwidm5kLnNlbWRcIjogXCJzZW1kXCIsXG5cdFx0XCJ2bmQuc2VtZlwiOiBcInNlbWZcIixcblx0XHRcInZuZC5zaGFuYS5pbmZvcm1lZC5mb3JtZGF0YVwiOiBcImlmbVwiLFxuXHRcdFwidm5kLnNoYW5hLmluZm9ybWVkLmZvcm10ZW1wbGF0ZVwiOiBcIml0cFwiLFxuXHRcdFwidm5kLnNoYW5hLmluZm9ybWVkLmludGVyY2hhbmdlXCI6IFwiaWlmXCIsXG5cdFx0XCJ2bmQuc2hhbmEuaW5mb3JtZWQucGFja2FnZVwiOiBcImlwa1wiLFxuXHRcdFwidm5kLnNpbXRlY2gtbWluZG1hcHBlclwiOiBbXG5cdFx0XHRcInR3ZFwiLFxuXHRcdFx0XCJ0d2RzXCJcblx0XHRdLFxuXHRcdFwidm5kLnNtYXJ0LnRlYWNoZXJcIjogXCJ0ZWFjaGVyXCIsXG5cdFx0XCJ2bmQuc29sZW50LnNka20reG1sXCI6IFtcblx0XHRcdFwic2RrbVwiLFxuXHRcdFx0XCJzZGtkXCJcblx0XHRdLFxuXHRcdFwidm5kLnNwb3RmaXJlLmR4cFwiOiBcImR4cFwiLFxuXHRcdFwidm5kLnNwb3RmaXJlLnNmc1wiOiBcInNmc1wiLFxuXHRcdFwidm5kLnN0ZXBtYW5pYS5wYWNrYWdlXCI6IFwic216aXBcIixcblx0XHRcInZuZC5zdGVwbWFuaWEuc3RlcGNoYXJ0XCI6IFwic21cIixcblx0XHRcInZuZC5zdXMtY2FsZW5kYXJcIjogW1xuXHRcdFx0XCJzdXNcIixcblx0XHRcdFwic3VzcFwiXG5cdFx0XSxcblx0XHRcInZuZC5zdmRcIjogXCJzdmRcIixcblx0XHRcInZuZC5zeW5jbWwreG1sXCI6IFwieHNtXCIsXG5cdFx0XCJ2bmQuc3luY21sLmRtK3dieG1sXCI6IFwiYmRtXCIsXG5cdFx0XCJ2bmQuc3luY21sLmRtK3htbFwiOiBcInhkbVwiLFxuXHRcdFwidm5kLnRhby5pbnRlbnQtbW9kdWxlLWFyY2hpdmVcIjogXCJ0YW9cIixcblx0XHRcInZuZC50Y3BkdW1wLnBjYXBcIjogW1xuXHRcdFx0XCJwY2FwXCIsXG5cdFx0XHRcImNhcFwiLFxuXHRcdFx0XCJkbXBcIlxuXHRcdF0sXG5cdFx0XCJ2bmQudG1vYmlsZS1saXZldHZcIjogXCJ0bW9cIixcblx0XHRcInZuZC50cmlkLnRwdFwiOiBcInRwdFwiLFxuXHRcdFwidm5kLnRyaXNjYXBlLm14c1wiOiBcIm14c1wiLFxuXHRcdFwidm5kLnRydWVhcHBcIjogXCJ0cmFcIixcblx0XHRcInZuZC51ZmRsXCI6IFtcblx0XHRcdFwidWZkXCIsXG5cdFx0XHRcInVmZGxcIlxuXHRcdF0sXG5cdFx0XCJ2bmQudWlxLnRoZW1lXCI6IFwidXR6XCIsXG5cdFx0XCJ2bmQudW1hamluXCI6IFwidW1qXCIsXG5cdFx0XCJ2bmQudW5pdHlcIjogXCJ1bml0eXdlYlwiLFxuXHRcdFwidm5kLnVvbWwreG1sXCI6IFwidW9tbFwiLFxuXHRcdFwidm5kLnZjeFwiOiBcInZjeFwiLFxuXHRcdFwidm5kLnZpc2lvbmFyeVwiOiBcInZpc1wiLFxuXHRcdFwidm5kLnZzZlwiOiBcInZzZlwiLFxuXHRcdFwidm5kLndlYnR1cmJvXCI6IFwid3RiXCIsXG5cdFx0XCJ2bmQud29sZnJhbS5wbGF5ZXJcIjogXCJuYnBcIixcblx0XHRcInZuZC53cWRcIjogXCJ3cWRcIixcblx0XHRcInZuZC53dC5zdGZcIjogXCJzdGZcIixcblx0XHRcInZuZC54YXJhXCI6IFwieGFyXCIsXG5cdFx0XCJ2bmQueGZkbFwiOiBcInhmZGxcIixcblx0XHRcInZuZC55YW1haGEuaHYtZGljXCI6IFwiaHZkXCIsXG5cdFx0XCJ2bmQueWFtYWhhLmh2LXNjcmlwdFwiOiBcImh2c1wiLFxuXHRcdFwidm5kLnlhbWFoYS5odi12b2ljZVwiOiBcImh2cFwiLFxuXHRcdFwidm5kLnlhbWFoYS5vcGVuc2NvcmVmb3JtYXRcIjogXCJvc2ZcIixcblx0XHRcInZuZC55YW1haGEub3BlbnNjb3JlZm9ybWF0Lm9zZnB2Zyt4bWxcIjogXCJvc2ZwdmdcIixcblx0XHRcInZuZC55YW1haGEuc21hZi1hdWRpb1wiOiBcInNhZlwiLFxuXHRcdFwidm5kLnlhbWFoYS5zbWFmLXBocmFzZVwiOiBcInNwZlwiLFxuXHRcdFwidm5kLnllbGxvd3JpdmVyLWN1c3RvbS1tZW51XCI6IFwiY21wXCIsXG5cdFx0XCJ2bmQuenVsXCI6IFtcblx0XHRcdFwiemlyXCIsXG5cdFx0XHRcInppcnpcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuenphenouZGVjayt4bWxcIjogXCJ6YXpcIixcblx0XHRcInZvaWNleG1sK3htbFwiOiBcInZ4bWxcIixcblx0XHRcIndpZGdldFwiOiBcIndndFwiLFxuXHRcdFwid2luaGxwXCI6IFwiaGxwXCIsXG5cdFx0XCJ3c2RsK3htbFwiOiBcIndzZGxcIixcblx0XHRcIndzcG9saWN5K3htbFwiOiBcIndzcG9saWN5XCIsXG5cdFx0XCJ4LWFjZS1jb21wcmVzc2VkXCI6IFwiYWNlXCIsXG5cdFx0XCJ4LWF1dGhvcndhcmUtYmluXCI6IFtcblx0XHRcdFwiYWFiXCIsXG5cdFx0XHRcIngzMlwiLFxuXHRcdFx0XCJ1MzJcIixcblx0XHRcdFwidm94XCJcblx0XHRdLFxuXHRcdFwieC1hdXRob3J3YXJlLW1hcFwiOiBcImFhbVwiLFxuXHRcdFwieC1hdXRob3J3YXJlLXNlZ1wiOiBcImFhc1wiLFxuXHRcdFwieC1ibG9yYlwiOiBbXG5cdFx0XHRcImJsYlwiLFxuXHRcdFx0XCJibG9yYlwiXG5cdFx0XSxcblx0XHRcIngtYnppcFwiOiBcImJ6XCIsXG5cdFx0XCJ4LWJ6aXAyXCI6IFtcblx0XHRcdFwiYnoyXCIsXG5cdFx0XHRcImJvelwiXG5cdFx0XSxcblx0XHRcIngtY2ZzLWNvbXByZXNzZWRcIjogXCJjZnNcIixcblx0XHRcIngtY2hhdFwiOiBcImNoYXRcIixcblx0XHRcIngtY29uZmVyZW5jZVwiOiBcIm5zY1wiLFxuXHRcdFwieC1kZ2MtY29tcHJlc3NlZFwiOiBcImRnY1wiLFxuXHRcdFwieC1kdGJuY3greG1sXCI6IFwibmN4XCIsXG5cdFx0XCJ4LWR0Ym9vayt4bWxcIjogXCJkdGJcIixcblx0XHRcIngtZHRicmVzb3VyY2UreG1sXCI6IFwicmVzXCIsXG5cdFx0XCJ4LWV2YVwiOiBcImV2YVwiLFxuXHRcdFwieC1mb250LWJkZlwiOiBcImJkZlwiLFxuXHRcdFwieC1mb250LWdob3N0c2NyaXB0XCI6IFwiZ3NmXCIsXG5cdFx0XCJ4LWZvbnQtbGludXgtcHNmXCI6IFwicHNmXCIsXG5cdFx0XCJ4LWZvbnQtcGNmXCI6IFwicGNmXCIsXG5cdFx0XCJ4LWZvbnQtc25mXCI6IFwic25mXCIsXG5cdFx0XCJ4LWZvbnQtdHRmXCI6IFtcblx0XHRcdFwidHRmXCIsXG5cdFx0XHRcInR0Y1wiXG5cdFx0XSxcblx0XHRcIngtZm9udC10eXBlMVwiOiBbXG5cdFx0XHRcInBmYVwiLFxuXHRcdFx0XCJwZmJcIixcblx0XHRcdFwicGZtXCIsXG5cdFx0XHRcImFmbVwiXG5cdFx0XSxcblx0XHRcIngtZnJlZWFyY1wiOiBcImFyY1wiLFxuXHRcdFwieC1nY2EtY29tcHJlc3NlZFwiOiBcImdjYVwiLFxuXHRcdFwieC1nbHVseFwiOiBcInVseFwiLFxuXHRcdFwieC1ncmFtcHMteG1sXCI6IFwiZ3JhbXBzXCIsXG5cdFx0XCJ4LWluc3RhbGwtaW5zdHJ1Y3Rpb25zXCI6IFwiaW5zdGFsbFwiLFxuXHRcdFwieC1semgtY29tcHJlc3NlZFwiOiBbXG5cdFx0XHRcImx6aFwiLFxuXHRcdFx0XCJsaGFcIlxuXHRcdF0sXG5cdFx0XCJ4LW1pZVwiOiBcIm1pZVwiLFxuXHRcdFwieC1tb2JpcG9ja2V0LWVib29rXCI6IFtcblx0XHRcdFwicHJjXCIsXG5cdFx0XHRcIm1vYmlcIlxuXHRcdF0sXG5cdFx0XCJ4LW1zLWFwcGxpY2F0aW9uXCI6IFwiYXBwbGljYXRpb25cIixcblx0XHRcIngtbXMtc2hvcnRjdXRcIjogXCJsbmtcIixcblx0XHRcIngtbXMteGJhcFwiOiBcInhiYXBcIixcblx0XHRcIngtbXNiaW5kZXJcIjogXCJvYmRcIixcblx0XHRcIngtbXNjYXJkZmlsZVwiOiBcImNyZFwiLFxuXHRcdFwieC1tc2NsaXBcIjogXCJjbHBcIixcblx0XHRcImFwcGxpY2F0aW9uL3gtbXMtaW5zdGFsbGVyXCI6IFwibXNpXCIsXG5cdFx0XCJ4LW1zbWVkaWF2aWV3XCI6IFtcblx0XHRcdFwibXZiXCIsXG5cdFx0XHRcIm0xM1wiLFxuXHRcdFx0XCJtMTRcIlxuXHRcdF0sXG5cdFx0XCJ4LW1zbWV0YWZpbGVcIjogW1xuXHRcdFx0XCJ3bWZcIixcblx0XHRcdFwid216XCIsXG5cdFx0XHRcImVtZlwiLFxuXHRcdFx0XCJlbXpcIlxuXHRcdF0sXG5cdFx0XCJ4LW1zbW9uZXlcIjogXCJtbnlcIixcblx0XHRcIngtbXNwdWJsaXNoZXJcIjogXCJwdWJcIixcblx0XHRcIngtbXNzY2hlZHVsZVwiOiBcInNjZFwiLFxuXHRcdFwieC1tc3Rlcm1pbmFsXCI6IFwidHJtXCIsXG5cdFx0XCJ4LW1zd3JpdGVcIjogXCJ3cmlcIixcblx0XHRcIngtbnpiXCI6IFwibnpiXCIsXG5cdFx0XCJ4LXBrY3MxMlwiOiBbXG5cdFx0XHRcInAxMlwiLFxuXHRcdFx0XCJwZnhcIlxuXHRcdF0sXG5cdFx0XCJ4LXBrY3M3LWNlcnRpZmljYXRlc1wiOiBbXG5cdFx0XHRcInA3YlwiLFxuXHRcdFx0XCJzcGNcIlxuXHRcdF0sXG5cdFx0XCJ4LXJlc2VhcmNoLWluZm8tc3lzdGVtc1wiOiBcInJpc1wiLFxuXHRcdFwieC1zaWx2ZXJsaWdodC1hcHBcIjogXCJ4YXBcIixcblx0XHRcIngtc3FsXCI6IFwic3FsXCIsXG5cdFx0XCJ4LXN0dWZmaXR4XCI6IFwic2l0eFwiLFxuXHRcdFwieC1zdWJyaXBcIjogXCJzcnRcIixcblx0XHRcIngtdDN2bS1pbWFnZVwiOiBcInQzXCIsXG5cdFx0XCJ4LXRleC10Zm1cIjogXCJ0Zm1cIixcblx0XHRcIngtdGdpZlwiOiBcIm9ialwiLFxuXHRcdFwieC14bGlmZit4bWxcIjogXCJ4bGZcIixcblx0XHRcIngteHpcIjogXCJ4elwiLFxuXHRcdFwieC16bWFjaGluZVwiOiBbXG5cdFx0XHRcInoxXCIsXG5cdFx0XHRcInoyXCIsXG5cdFx0XHRcInozXCIsXG5cdFx0XHRcIno0XCIsXG5cdFx0XHRcIno1XCIsXG5cdFx0XHRcIno2XCIsXG5cdFx0XHRcIno3XCIsXG5cdFx0XHRcIno4XCJcblx0XHRdLFxuXHRcdFwieGFtbCt4bWxcIjogXCJ4YW1sXCIsXG5cdFx0XCJ4Y2FwLWRpZmYreG1sXCI6IFwieGRmXCIsXG5cdFx0XCJ4ZW5jK3htbFwiOiBcInhlbmNcIixcblx0XHRcInhtbC1kdGRcIjogXCJkdGRcIixcblx0XHRcInhvcCt4bWxcIjogXCJ4b3BcIixcblx0XHRcInhwcm9jK3htbFwiOiBcInhwbFwiLFxuXHRcdFwieHNsdCt4bWxcIjogXCJ4c2x0XCIsXG5cdFx0XCJ4dit4bWxcIjogW1xuXHRcdFx0XCJteG1sXCIsXG5cdFx0XHRcInhodm1sXCIsXG5cdFx0XHRcInh2bWxcIixcblx0XHRcdFwieHZtXCJcblx0XHRdLFxuXHRcdFwieWFuZ1wiOiBcInlhbmdcIixcblx0XHRcInlpbit4bWxcIjogXCJ5aW5cIixcblx0XHRcImVudm95XCI6IFwiZXZ5XCIsXG5cdFx0XCJmcmFjdGFsc1wiOiBcImZpZlwiLFxuXHRcdFwiaW50ZXJuZXQtcHJvcGVydHktc3RyZWFtXCI6IFwiYWN4XCIsXG5cdFx0XCJvbGVzY3JpcHRcIjogXCJheHNcIixcblx0XHRcInZuZC5tcy1vdXRsb29rXCI6IFwibXNnXCIsXG5cdFx0XCJ2bmQubXMtcGtpY2VydHN0b3JlXCI6IFwic3N0XCIsXG5cdFx0XCJ4LWNvbXByZXNzXCI6IFwielwiLFxuXHRcdFwieC1wZXJmbW9uXCI6IFtcblx0XHRcdFwicG1hXCIsXG5cdFx0XHRcInBtY1wiLFxuXHRcdFx0XCJwbXJcIixcblx0XHRcdFwicG13XCJcblx0XHRdLFxuXHRcdFwieW5kLm1zLXBraXBrb1wiOiBcInBrb1wiLFxuXHRcdFwiZ3ppcFwiOiBbXG5cdFx0XHRcImd6XCIsXG5cdFx0XHRcInRnelwiXG5cdFx0XSxcblx0XHRcInNtaWwreG1sXCI6IFtcblx0XHRcdFwic21pXCIsXG5cdFx0XHRcInNtaWxcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuZGViaWFuLmJpbmFyeS1wYWNrYWdlXCI6IFtcblx0XHRcdFwiZGViXCIsXG5cdFx0XHRcInVkZWJcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuaHpuLTNkLWNyb3Nzd29yZFwiOiBcIngzZFwiLFxuXHRcdFwidm5kLnNxbGl0ZTNcIjogW1xuXHRcdFx0XCJkYlwiLFxuXHRcdFx0XCJzcWxpdGVcIixcblx0XHRcdFwic3FsaXRlM1wiLFxuXHRcdFx0XCJkYi13YWxcIixcblx0XHRcdFwic3FsaXRlLXdhbFwiLFxuXHRcdFx0XCJkYi1zaG1cIixcblx0XHRcdFwic3FsaXRlLXNobVwiXG5cdFx0XSxcblx0XHRcInZuZC53YXAuc2ljXCI6IFwic2ljXCIsXG5cdFx0XCJ2bmQud2FwLnNsY1wiOiBcInNsY1wiLFxuXHRcdFwieC1rcml0YVwiOiBbXG5cdFx0XHRcImtyYVwiLFxuXHRcdFx0XCJrcnpcIlxuXHRcdF0sXG5cdFx0XCJ4LXBlcmxcIjogW1xuXHRcdFx0XCJwbVwiLFxuXHRcdFx0XCJwbFwiXG5cdFx0XSxcblx0XHRcInlhbWxcIjogW1xuXHRcdFx0XCJ5YW1sXCIsXG5cdFx0XHRcInltbFwiXG5cdFx0XVxuXHR9LFxuXHRcImF1ZGlvXCI6IHtcblx0XHRcImFtclwiOiBcImFtclwiLFxuXHRcdFwiYW1yLXdiXCI6IFwiYXdiXCIsXG5cdFx0XCJhbm5vZGV4XCI6IFwiYXhhXCIsXG5cdFx0XCJiYXNpY1wiOiBbXG5cdFx0XHRcImF1XCIsXG5cdFx0XHRcInNuZFwiXG5cdFx0XSxcblx0XHRcImZsYWNcIjogXCJmbGFjXCIsXG5cdFx0XCJtaWRpXCI6IFtcblx0XHRcdFwibWlkXCIsXG5cdFx0XHRcIm1pZGlcIixcblx0XHRcdFwia2FyXCIsXG5cdFx0XHRcInJtaVwiXG5cdFx0XSxcblx0XHRcIm1wZWdcIjogW1xuXHRcdFx0XCJtcGdhXCIsXG5cdFx0XHRcIm1wZWdhXCIsXG5cdFx0XHRcIm1wM1wiLFxuXHRcdFx0XCJtNGFcIixcblx0XHRcdFwibXAyYVwiLFxuXHRcdFx0XCJtMmFcIixcblx0XHRcdFwibTNhXCJcblx0XHRdLFxuXHRcdFwibXBlZ3VybFwiOiBcIm0zdVwiLFxuXHRcdFwib2dnXCI6IFtcblx0XHRcdFwib2dhXCIsXG5cdFx0XHRcIm9nZ1wiLFxuXHRcdFx0XCJzcHhcIlxuXHRcdF0sXG5cdFx0XCJwcnMuc2lkXCI6IFwic2lkXCIsXG5cdFx0XCJ4LWFpZmZcIjogXCJhaWZjXCIsXG5cdFx0XCJ4LWdzbVwiOiBcImdzbVwiLFxuXHRcdFwieC1tcy13bWFcIjogXCJ3bWFcIixcblx0XHRcIngtbXMtd2F4XCI6IFwid2F4XCIsXG5cdFx0XCJ4LXBuLXJlYWxhdWRpb1wiOiBcInJhbVwiLFxuXHRcdFwieC1yZWFsYXVkaW9cIjogXCJyYVwiLFxuXHRcdFwieC1zZDJcIjogXCJzZDJcIixcblx0XHRcImFkcGNtXCI6IFwiYWRwXCIsXG5cdFx0XCJtcDRcIjogXCJtcDRhXCIsXG5cdFx0XCJzM21cIjogXCJzM21cIixcblx0XHRcInNpbGtcIjogXCJzaWxcIixcblx0XHRcInZuZC5kZWNlLmF1ZGlvXCI6IFtcblx0XHRcdFwidXZhXCIsXG5cdFx0XHRcInV2dmFcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuZGlnaXRhbC13aW5kc1wiOiBcImVvbFwiLFxuXHRcdFwidm5kLmRyYVwiOiBcImRyYVwiLFxuXHRcdFwidm5kLmR0c1wiOiBcImR0c1wiLFxuXHRcdFwidm5kLmR0cy5oZFwiOiBcImR0c2hkXCIsXG5cdFx0XCJ2bmQubHVjZW50LnZvaWNlXCI6IFwibHZwXCIsXG5cdFx0XCJ2bmQubXMtcGxheXJlYWR5Lm1lZGlhLnB5YVwiOiBcInB5YVwiLFxuXHRcdFwidm5kLm51ZXJhLmVjZWxwNDgwMFwiOiBcImVjZWxwNDgwMFwiLFxuXHRcdFwidm5kLm51ZXJhLmVjZWxwNzQ3MFwiOiBcImVjZWxwNzQ3MFwiLFxuXHRcdFwidm5kLm51ZXJhLmVjZWxwOTYwMFwiOiBcImVjZWxwOTYwMFwiLFxuXHRcdFwidm5kLnJpcFwiOiBcInJpcFwiLFxuXHRcdFwid2VibVwiOiBcIndlYmFcIixcblx0XHRcIngtY2FmXCI6IFwiY2FmXCIsXG5cdFx0XCJ4LW1hdHJvc2thXCI6IFwibWthXCIsXG5cdFx0XCJ4LXBuLXJlYWxhdWRpby1wbHVnaW5cIjogXCJybXBcIixcblx0XHRcInhtXCI6IFwieG1cIixcblx0XHRcImFhY1wiOiBcImFhY1wiLFxuXHRcdFwiYWlmZlwiOiBbXG5cdFx0XHRcImFpZmZcIixcblx0XHRcdFwiYWlmXCIsXG5cdFx0XHRcImFmZlwiXG5cdFx0XSxcblx0XHRcIm9wdXNcIjogXCJvcHVzXCIsXG5cdFx0XCJ3YXZcIjogXCJ3YXZcIlxuXHR9LFxuXHRcImNoZW1pY2FsXCI6IHtcblx0XHRcIngtYWxjaGVteVwiOiBcImFsY1wiLFxuXHRcdFwieC1jYWNoZVwiOiBbXG5cdFx0XHRcImNhY1wiLFxuXHRcdFx0XCJjYWNoZVwiXG5cdFx0XSxcblx0XHRcIngtY2FjaGUtY3NmXCI6IFwiY3NmXCIsXG5cdFx0XCJ4LWNhY3R2cy1iaW5hcnlcIjogW1xuXHRcdFx0XCJjYmluXCIsXG5cdFx0XHRcImNhc2NpaVwiLFxuXHRcdFx0XCJjdGFiXCJcblx0XHRdLFxuXHRcdFwieC1jZHhcIjogXCJjZHhcIixcblx0XHRcIngtY2hlbTNkXCI6IFwiYzNkXCIsXG5cdFx0XCJ4LWNpZlwiOiBcImNpZlwiLFxuXHRcdFwieC1jbWRmXCI6IFwiY21kZlwiLFxuXHRcdFwieC1jbWxcIjogXCJjbWxcIixcblx0XHRcIngtY29tcGFzc1wiOiBcImNwYVwiLFxuXHRcdFwieC1jcm9zc2ZpcmVcIjogXCJic2RcIixcblx0XHRcIngtY3NtbFwiOiBbXG5cdFx0XHRcImNzbWxcIixcblx0XHRcdFwiY3NtXCJcblx0XHRdLFxuXHRcdFwieC1jdHhcIjogXCJjdHhcIixcblx0XHRcIngtY3hmXCI6IFtcblx0XHRcdFwiY3hmXCIsXG5cdFx0XHRcImNlZlwiXG5cdFx0XSxcblx0XHRcIngtZW1ibC1kbC1udWNsZW90aWRlXCI6IFtcblx0XHRcdFwiZW1iXCIsXG5cdFx0XHRcImVtYmxcIlxuXHRcdF0sXG5cdFx0XCJ4LWdhbWVzcy1pbnB1dFwiOiBbXG5cdFx0XHRcImlucFwiLFxuXHRcdFx0XCJnYW1cIixcblx0XHRcdFwiZ2FtaW5cIlxuXHRcdF0sXG5cdFx0XCJ4LWdhdXNzaWFuLWNoZWNrcG9pbnRcIjogW1xuXHRcdFx0XCJmY2hcIixcblx0XHRcdFwiZmNoa1wiXG5cdFx0XSxcblx0XHRcIngtZ2F1c3NpYW4tY3ViZVwiOiBcImN1YlwiLFxuXHRcdFwieC1nYXVzc2lhbi1pbnB1dFwiOiBbXG5cdFx0XHRcImdhdVwiLFxuXHRcdFx0XCJnamNcIixcblx0XHRcdFwiZ2pmXCJcblx0XHRdLFxuXHRcdFwieC1nYXVzc2lhbi1sb2dcIjogXCJnYWxcIixcblx0XHRcIngtZ2NnOC1zZXF1ZW5jZVwiOiBcImdjZ1wiLFxuXHRcdFwieC1nZW5iYW5rXCI6IFwiZ2VuXCIsXG5cdFx0XCJ4LWhpblwiOiBcImhpblwiLFxuXHRcdFwieC1pc29zdGFyXCI6IFtcblx0XHRcdFwiaXN0clwiLFxuXHRcdFx0XCJpc3RcIlxuXHRcdF0sXG5cdFx0XCJ4LWpjYW1wLWR4XCI6IFtcblx0XHRcdFwiamR4XCIsXG5cdFx0XHRcImR4XCJcblx0XHRdLFxuXHRcdFwieC1raW5lbWFnZVwiOiBcImtpblwiLFxuXHRcdFwieC1tYWNtb2xlY3VsZVwiOiBcIm1jbVwiLFxuXHRcdFwieC1tYWNyb21vZGVsLWlucHV0XCI6IFwibW1vZFwiLFxuXHRcdFwieC1tZGwtbW9sZmlsZVwiOiBcIm1vbFwiLFxuXHRcdFwieC1tZGwtcmRmaWxlXCI6IFwicmRcIixcblx0XHRcIngtbWRsLXJ4bmZpbGVcIjogXCJyeG5cIixcblx0XHRcIngtbWRsLXNkZmlsZVwiOiBcInNkXCIsXG5cdFx0XCJ4LW1kbC10Z2ZcIjogXCJ0Z2ZcIixcblx0XHRcIngtbW1jaWZcIjogXCJtY2lmXCIsXG5cdFx0XCJ4LW1vbDJcIjogXCJtb2wyXCIsXG5cdFx0XCJ4LW1vbGNvbm4tWlwiOiBcImJcIixcblx0XHRcIngtbW9wYWMtZ3JhcGhcIjogXCJncHRcIixcblx0XHRcIngtbW9wYWMtaW5wdXRcIjogW1xuXHRcdFx0XCJtb3BcIixcblx0XHRcdFwibW9wY3J0XCIsXG5cdFx0XHRcInptdFwiXG5cdFx0XSxcblx0XHRcIngtbW9wYWMtb3V0XCI6IFwibW9vXCIsXG5cdFx0XCJ4LW5jYmktYXNuMVwiOiBcImFzblwiLFxuXHRcdFwieC1uY2JpLWFzbjEtYXNjaWlcIjogW1xuXHRcdFx0XCJwcnRcIixcblx0XHRcdFwiZW50XCJcblx0XHRdLFxuXHRcdFwieC1uY2JpLWFzbjEtYmluYXJ5XCI6IFwidmFsXCIsXG5cdFx0XCJ4LXJvc2RhbFwiOiBcInJvc1wiLFxuXHRcdFwieC1zd2lzc3Byb3RcIjogXCJzd1wiLFxuXHRcdFwieC12YW1hcy1pc28xNDk3NlwiOiBcInZtc1wiLFxuXHRcdFwieC12bWRcIjogXCJ2bWRcIixcblx0XHRcIngteHRlbFwiOiBcInh0ZWxcIixcblx0XHRcIngteHl6XCI6IFwieHl6XCJcblx0fSxcblx0XCJmb250XCI6IHtcblx0XHRcIm90ZlwiOiBcIm90ZlwiLFxuXHRcdFwid29mZlwiOiBcIndvZmZcIixcblx0XHRcIndvZmYyXCI6IFwid29mZjJcIlxuXHR9LFxuXHRcImltYWdlXCI6IHtcblx0XHRcImdpZlwiOiBcImdpZlwiLFxuXHRcdFwiaWVmXCI6IFwiaWVmXCIsXG5cdFx0XCJqcGVnXCI6IFtcblx0XHRcdFwianBlZ1wiLFxuXHRcdFx0XCJqcGdcIixcblx0XHRcdFwianBlXCIsXG5cdFx0XHRcImpmaWZcIixcblx0XHRcdFwiamZpZi10Ym5sXCIsXG5cdFx0XHRcImppZlwiXG5cdFx0XSxcblx0XHRcInBjeFwiOiBcInBjeFwiLFxuXHRcdFwicG5nXCI6IFwicG5nXCIsXG5cdFx0XCJzdmcreG1sXCI6IFtcblx0XHRcdFwic3ZnXCIsXG5cdFx0XHRcInN2Z3pcIlxuXHRcdF0sXG5cdFx0XCJ0aWZmXCI6IFtcblx0XHRcdFwidGlmZlwiLFxuXHRcdFx0XCJ0aWZcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuZGp2dVwiOiBbXG5cdFx0XHRcImRqdnVcIixcblx0XHRcdFwiZGp2XCJcblx0XHRdLFxuXHRcdFwidm5kLndhcC53Ym1wXCI6IFwid2JtcFwiLFxuXHRcdFwieC1jYW5vbi1jcjJcIjogXCJjcjJcIixcblx0XHRcIngtY2Fub24tY3J3XCI6IFwiY3J3XCIsXG5cdFx0XCJ4LWNtdS1yYXN0ZXJcIjogXCJyYXNcIixcblx0XHRcIngtY29yZWxkcmF3XCI6IFwiY2RyXCIsXG5cdFx0XCJ4LWNvcmVsZHJhd3BhdHRlcm5cIjogXCJwYXRcIixcblx0XHRcIngtY29yZWxkcmF3dGVtcGxhdGVcIjogXCJjZHRcIixcblx0XHRcIngtY29yZWxwaG90b3BhaW50XCI6IFwiY3B0XCIsXG5cdFx0XCJ4LWVwc29uLWVyZlwiOiBcImVyZlwiLFxuXHRcdFwieC1pY29uXCI6IFwiaWNvXCIsXG5cdFx0XCJ4LWpnXCI6IFwiYXJ0XCIsXG5cdFx0XCJ4LWpuZ1wiOiBcImpuZ1wiLFxuXHRcdFwieC1uaWtvbi1uZWZcIjogXCJuZWZcIixcblx0XHRcIngtb2x5bXB1cy1vcmZcIjogXCJvcmZcIixcblx0XHRcIngtcG9ydGFibGUtYW55bWFwXCI6IFwicG5tXCIsXG5cdFx0XCJ4LXBvcnRhYmxlLWJpdG1hcFwiOiBcInBibVwiLFxuXHRcdFwieC1wb3J0YWJsZS1ncmF5bWFwXCI6IFwicGdtXCIsXG5cdFx0XCJ4LXBvcnRhYmxlLXBpeG1hcFwiOiBcInBwbVwiLFxuXHRcdFwieC1yZ2JcIjogXCJyZ2JcIixcblx0XHRcIngteGJpdG1hcFwiOiBcInhibVwiLFxuXHRcdFwieC14cGl4bWFwXCI6IFwieHBtXCIsXG5cdFx0XCJ4LXh3aW5kb3dkdW1wXCI6IFwieHdkXCIsXG5cdFx0XCJibXBcIjogXCJibXBcIixcblx0XHRcImNnbVwiOiBcImNnbVwiLFxuXHRcdFwiZzNmYXhcIjogXCJnM1wiLFxuXHRcdFwia3R4XCI6IFwia3R4XCIsXG5cdFx0XCJwcnMuYnRpZlwiOiBcImJ0aWZcIixcblx0XHRcInNnaVwiOiBcInNnaVwiLFxuXHRcdFwidm5kLmRlY2UuZ3JhcGhpY1wiOiBbXG5cdFx0XHRcInV2aVwiLFxuXHRcdFx0XCJ1dnZpXCIsXG5cdFx0XHRcInV2Z1wiLFxuXHRcdFx0XCJ1dnZnXCJcblx0XHRdLFxuXHRcdFwidm5kLmR3Z1wiOiBcImR3Z1wiLFxuXHRcdFwidm5kLmR4ZlwiOiBcImR4ZlwiLFxuXHRcdFwidm5kLmZhc3RiaWRzaGVldFwiOiBcImZic1wiLFxuXHRcdFwidm5kLmZweFwiOiBcImZweFwiLFxuXHRcdFwidm5kLmZzdFwiOiBcImZzdFwiLFxuXHRcdFwidm5kLmZ1aml4ZXJveC5lZG1pY3MtbW1yXCI6IFwibW1yXCIsXG5cdFx0XCJ2bmQuZnVqaXhlcm94LmVkbWljcy1ybGNcIjogXCJybGNcIixcblx0XHRcInZuZC5tcy1tb2RpXCI6IFwibWRpXCIsXG5cdFx0XCJ2bmQubXMtcGhvdG9cIjogXCJ3ZHBcIixcblx0XHRcInZuZC5uZXQtZnB4XCI6IFwibnB4XCIsXG5cdFx0XCJ2bmQueGlmZlwiOiBcInhpZlwiLFxuXHRcdFwid2VicFwiOiBcIndlYnBcIixcblx0XHRcIngtM2RzXCI6IFwiM2RzXCIsXG5cdFx0XCJ4LWNteFwiOiBcImNteFwiLFxuXHRcdFwieC1mcmVlaGFuZFwiOiBbXG5cdFx0XHRcImZoXCIsXG5cdFx0XHRcImZoY1wiLFxuXHRcdFx0XCJmaDRcIixcblx0XHRcdFwiZmg1XCIsXG5cdFx0XHRcImZoN1wiXG5cdFx0XSxcblx0XHRcIngtcGljdFwiOiBbXG5cdFx0XHRcInBpY1wiLFxuXHRcdFx0XCJwY3RcIlxuXHRcdF0sXG5cdFx0XCJ4LXRnYVwiOiBcInRnYVwiLFxuXHRcdFwiY2lzLWNvZFwiOiBcImNvZFwiLFxuXHRcdFwiYXZpZlwiOiBcImF2aWZzXCIsXG5cdFx0XCJoZWljXCI6IFtcblx0XHRcdFwiaGVpZlwiLFxuXHRcdFx0XCJoZWljXCJcblx0XHRdLFxuXHRcdFwicGpwZWdcIjogW1xuXHRcdFx0XCJwanBnXCJcblx0XHRdLFxuXHRcdFwidm5kLmFkb2JlLnBob3Rvc2hvcFwiOiBcInBzZFwiLFxuXHRcdFwieC1hZG9iZS1kbmdcIjogXCJkbmdcIixcblx0XHRcIngtZnVqaS1yYWZcIjogXCJyYWZcIixcblx0XHRcIngtaWNuc1wiOiBcImljbnNcIixcblx0XHRcIngta29kYWstZGNyXCI6IFwiZGNyXCIsXG5cdFx0XCJ4LWtvZGFrLWsyNVwiOiBcImsyNVwiLFxuXHRcdFwieC1rb2Rhay1rZGNcIjogXCJrZGNcIixcblx0XHRcIngtbWlub2x0YS1tcndcIjogXCJtcndcIixcblx0XHRcIngtcGFuYXNvbmljLXJhd1wiOiBbXG5cdFx0XHRcInJhd1wiLFxuXHRcdFx0XCJydzJcIixcblx0XHRcdFwicndsXCJcblx0XHRdLFxuXHRcdFwieC1wZW50YXgtcGVmXCI6IFtcblx0XHRcdFwicGVmXCIsXG5cdFx0XHRcInB0eFwiXG5cdFx0XSxcblx0XHRcIngtc2lnbWEteDNmXCI6IFwieDNmXCIsXG5cdFx0XCJ4LXNvbnktYXJ3XCI6IFwiYXJ3XCIsXG5cdFx0XCJ4LXNvbnktc3IyXCI6IFwic3IyXCIsXG5cdFx0XCJ4LXNvbnktc3JmXCI6IFwic3JmXCJcblx0fSxcblx0XCJtZXNzYWdlXCI6IHtcblx0XHRcInJmYzgyMlwiOiBbXG5cdFx0XHRcImVtbFwiLFxuXHRcdFx0XCJtaW1lXCIsXG5cdFx0XHRcIm1odFwiLFxuXHRcdFx0XCJtaHRtbFwiLFxuXHRcdFx0XCJud3NcIlxuXHRcdF1cblx0fSxcblx0XCJtb2RlbFwiOiB7XG5cdFx0XCJpZ2VzXCI6IFtcblx0XHRcdFwiaWdzXCIsXG5cdFx0XHRcImlnZXNcIlxuXHRcdF0sXG5cdFx0XCJtZXNoXCI6IFtcblx0XHRcdFwibXNoXCIsXG5cdFx0XHRcIm1lc2hcIixcblx0XHRcdFwic2lsb1wiXG5cdFx0XSxcblx0XHRcInZybWxcIjogW1xuXHRcdFx0XCJ3cmxcIixcblx0XHRcdFwidnJtbFwiXG5cdFx0XSxcblx0XHRcIngzZCt2cm1sXCI6IFtcblx0XHRcdFwieDNkdlwiLFxuXHRcdFx0XCJ4M2R2elwiXG5cdFx0XSxcblx0XHRcIngzZCt4bWxcIjogXCJ4M2R6XCIsXG5cdFx0XCJ4M2QrYmluYXJ5XCI6IFtcblx0XHRcdFwieDNkYlwiLFxuXHRcdFx0XCJ4M2RielwiXG5cdFx0XSxcblx0XHRcInZuZC5jb2xsYWRhK3htbFwiOiBcImRhZVwiLFxuXHRcdFwidm5kLmR3ZlwiOiBcImR3ZlwiLFxuXHRcdFwidm5kLmdkbFwiOiBcImdkbFwiLFxuXHRcdFwidm5kLmd0d1wiOiBcImd0d1wiLFxuXHRcdFwidm5kLm10c1wiOiBcIm10c1wiLFxuXHRcdFwidm5kLnVzZHoremlwXCI6IFwidXNkelwiLFxuXHRcdFwidm5kLnZ0dVwiOiBcInZ0dVwiXG5cdH0sXG5cdFwidGV4dFwiOiB7XG5cdFx0XCJjYWNoZS1tYW5pZmVzdFwiOiBbXG5cdFx0XHRcIm1hbmlmZXN0XCIsXG5cdFx0XHRcImFwcGNhY2hlXCJcblx0XHRdLFxuXHRcdFwiY2FsZW5kYXJcIjogW1xuXHRcdFx0XCJpY3NcIixcblx0XHRcdFwiaWN6XCIsXG5cdFx0XHRcImlmYlwiXG5cdFx0XSxcblx0XHRcImNzc1wiOiBcImNzc1wiLFxuXHRcdFwiY3N2XCI6IFwiY3N2XCIsXG5cdFx0XCJoMzIzXCI6IFwiMzIzXCIsXG5cdFx0XCJodG1sXCI6IFtcblx0XHRcdFwiaHRtbFwiLFxuXHRcdFx0XCJodG1cIixcblx0XHRcdFwic2h0bWxcIixcblx0XHRcdFwic3RtXCJcblx0XHRdLFxuXHRcdFwiaXVsc1wiOiBcInVsc1wiLFxuXHRcdFwicGxhaW5cIjogW1xuXHRcdFx0XCJ0eHRcIixcblx0XHRcdFwidGV4dFwiLFxuXHRcdFx0XCJicmZcIixcblx0XHRcdFwiY29uZlwiLFxuXHRcdFx0XCJkZWZcIixcblx0XHRcdFwibGlzdFwiLFxuXHRcdFx0XCJsb2dcIixcblx0XHRcdFwiaW5cIixcblx0XHRcdFwiYmFzXCIsXG5cdFx0XHRcImRpZmZcIixcblx0XHRcdFwia3NoXCJcblx0XHRdLFxuXHRcdFwicmljaHRleHRcIjogXCJydHhcIixcblx0XHRcInNjcmlwdGxldFwiOiBbXG5cdFx0XHRcInNjdFwiLFxuXHRcdFx0XCJ3c2NcIlxuXHRcdF0sXG5cdFx0XCJ0ZXhtYWNzXCI6IFwidG1cIixcblx0XHRcInRhYi1zZXBhcmF0ZWQtdmFsdWVzXCI6IFwidHN2XCIsXG5cdFx0XCJ2bmQuc3VuLmoybWUuYXBwLWRlc2NyaXB0b3JcIjogXCJqYWRcIixcblx0XHRcInZuZC53YXAud21sXCI6IFwid21sXCIsXG5cdFx0XCJ2bmQud2FwLndtbHNjcmlwdFwiOiBcIndtbHNcIixcblx0XHRcIngtYmlidGV4XCI6IFwiYmliXCIsXG5cdFx0XCJ4LWJvb1wiOiBcImJvb1wiLFxuXHRcdFwieC1jKytoZHJcIjogW1xuXHRcdFx0XCJoKytcIixcblx0XHRcdFwiaHBwXCIsXG5cdFx0XHRcImh4eFwiLFxuXHRcdFx0XCJoaFwiXG5cdFx0XSxcblx0XHRcIngtYysrc3JjXCI6IFtcblx0XHRcdFwiYysrXCIsXG5cdFx0XHRcImNwcFwiLFxuXHRcdFx0XCJjeHhcIixcblx0XHRcdFwiY2NcIlxuXHRcdF0sXG5cdFx0XCJ4LWNvbXBvbmVudFwiOiBcImh0Y1wiLFxuXHRcdFwieC1kc3JjXCI6IFwiZFwiLFxuXHRcdFwieC1kaWZmXCI6IFwicGF0Y2hcIixcblx0XHRcIngtaGFza2VsbFwiOiBcImhzXCIsXG5cdFx0XCJ4LWphdmFcIjogXCJqYXZhXCIsXG5cdFx0XCJ4LWxpdGVyYXRlLWhhc2tlbGxcIjogXCJsaHNcIixcblx0XHRcIngtbW9jXCI6IFwibW9jXCIsXG5cdFx0XCJ4LXBhc2NhbFwiOiBbXG5cdFx0XHRcInBcIixcblx0XHRcdFwicGFzXCIsXG5cdFx0XHRcInBwXCIsXG5cdFx0XHRcImluY1wiXG5cdFx0XSxcblx0XHRcIngtcGNzLWdjZFwiOiBcImdjZFwiLFxuXHRcdFwieC1weXRob25cIjogXCJweVwiLFxuXHRcdFwieC1zY2FsYVwiOiBcInNjYWxhXCIsXG5cdFx0XCJ4LXNldGV4dFwiOiBcImV0eFwiLFxuXHRcdFwieC10Y2xcIjogW1xuXHRcdFx0XCJ0Y2xcIixcblx0XHRcdFwidGtcIlxuXHRcdF0sXG5cdFx0XCJ4LXRleFwiOiBbXG5cdFx0XHRcInRleFwiLFxuXHRcdFx0XCJsdHhcIixcblx0XHRcdFwic3R5XCIsXG5cdFx0XHRcImNsc1wiXG5cdFx0XSxcblx0XHRcIngtdmNhbGVuZGFyXCI6IFwidmNzXCIsXG5cdFx0XCJ4LXZjYXJkXCI6IFwidmNmXCIsXG5cdFx0XCJuM1wiOiBcIm4zXCIsXG5cdFx0XCJwcnMubGluZXMudGFnXCI6IFwiZHNjXCIsXG5cdFx0XCJzZ21sXCI6IFtcblx0XHRcdFwic2dtbFwiLFxuXHRcdFx0XCJzZ21cIlxuXHRcdF0sXG5cdFx0XCJ0cm9mZlwiOiBbXG5cdFx0XHRcInRcIixcblx0XHRcdFwidHJcIixcblx0XHRcdFwicm9mZlwiLFxuXHRcdFx0XCJtYW5cIixcblx0XHRcdFwibWVcIixcblx0XHRcdFwibXNcIlxuXHRcdF0sXG5cdFx0XCJ0dXJ0bGVcIjogXCJ0dGxcIixcblx0XHRcInVyaS1saXN0XCI6IFtcblx0XHRcdFwidXJpXCIsXG5cdFx0XHRcInVyaXNcIixcblx0XHRcdFwidXJsc1wiXG5cdFx0XSxcblx0XHRcInZjYXJkXCI6IFwidmNhcmRcIixcblx0XHRcInZuZC5jdXJsXCI6IFwiY3VybFwiLFxuXHRcdFwidm5kLmN1cmwuZGN1cmxcIjogXCJkY3VybFwiLFxuXHRcdFwidm5kLmN1cmwuc2N1cmxcIjogXCJzY3VybFwiLFxuXHRcdFwidm5kLmN1cmwubWN1cmxcIjogXCJtY3VybFwiLFxuXHRcdFwidm5kLmR2Yi5zdWJ0aXRsZVwiOiBcInN1YlwiLFxuXHRcdFwidm5kLmZseVwiOiBcImZseVwiLFxuXHRcdFwidm5kLmZtaS5mbGV4c3RvclwiOiBcImZseFwiLFxuXHRcdFwidm5kLmdyYXBodml6XCI6IFwiZ3ZcIixcblx0XHRcInZuZC5pbjNkLjNkbWxcIjogXCIzZG1sXCIsXG5cdFx0XCJ2bmQuaW4zZC5zcG90XCI6IFwic3BvdFwiLFxuXHRcdFwieC1hc21cIjogW1xuXHRcdFx0XCJzXCIsXG5cdFx0XHRcImFzbVwiXG5cdFx0XSxcblx0XHRcIngtY1wiOiBbXG5cdFx0XHRcImNcIixcblx0XHRcdFwiaFwiLFxuXHRcdFx0XCJkaWNcIlxuXHRcdF0sXG5cdFx0XCJ4LWZvcnRyYW5cIjogW1xuXHRcdFx0XCJmXCIsXG5cdFx0XHRcImZvclwiLFxuXHRcdFx0XCJmNzdcIixcblx0XHRcdFwiZjkwXCJcblx0XHRdLFxuXHRcdFwieC1vcG1sXCI6IFwib3BtbFwiLFxuXHRcdFwieC1uZm9cIjogXCJuZm9cIixcblx0XHRcIngtc2Z2XCI6IFwic2Z2XCIsXG5cdFx0XCJ4LXV1ZW5jb2RlXCI6IFwidXVcIixcblx0XHRcIndlYnZpZXdodG1sXCI6IFwiaHR0XCIsXG5cdFx0XCJqYXZhc2NyaXB0XCI6IFwianNcIixcblx0XHRcImpzb25cIjogXCJqc29uXCIsXG5cdFx0XCJtYXJrZG93blwiOiBbXG5cdFx0XHRcIm1kXCIsXG5cdFx0XHRcIm1hcmtkb3duXCIsXG5cdFx0XHRcIm1kb3duXCIsXG5cdFx0XHRcIm1hcmtkblwiXG5cdFx0XSxcblx0XHRcInZuZC53YXAuc2lcIjogXCJzaVwiLFxuXHRcdFwidm5kLndhcC5zbFwiOiBcInNsXCJcblx0fSxcblx0XCJ2aWRlb1wiOiB7XG5cdFx0XCJhdmlmXCI6IFwiYXZpZlwiLFxuXHRcdFwiM2dwcFwiOiBcIjNncFwiLFxuXHRcdFwiYW5ub2RleFwiOiBcImF4dlwiLFxuXHRcdFwiZGxcIjogXCJkbFwiLFxuXHRcdFwiZHZcIjogW1xuXHRcdFx0XCJkaWZcIixcblx0XHRcdFwiZHZcIlxuXHRcdF0sXG5cdFx0XCJmbGlcIjogXCJmbGlcIixcblx0XHRcImdsXCI6IFwiZ2xcIixcblx0XHRcIm1wZWdcIjogW1xuXHRcdFx0XCJtcGVnXCIsXG5cdFx0XHRcIm1wZ1wiLFxuXHRcdFx0XCJtcGVcIixcblx0XHRcdFwibTF2XCIsXG5cdFx0XHRcIm0ydlwiLFxuXHRcdFx0XCJtcDJcIixcblx0XHRcdFwibXBhXCIsXG5cdFx0XHRcIm1wdjJcIlxuXHRcdF0sXG5cdFx0XCJtcDRcIjogW1xuXHRcdFx0XCJtcDRcIixcblx0XHRcdFwibXA0dlwiLFxuXHRcdFx0XCJtcGc0XCJcblx0XHRdLFxuXHRcdFwicXVpY2t0aW1lXCI6IFtcblx0XHRcdFwicXRcIixcblx0XHRcdFwibW92XCJcblx0XHRdLFxuXHRcdFwib2dnXCI6IFwib2d2XCIsXG5cdFx0XCJ2bmQubXBlZ3VybFwiOiBbXG5cdFx0XHRcIm14dVwiLFxuXHRcdFx0XCJtNHVcIlxuXHRcdF0sXG5cdFx0XCJ4LWZsdlwiOiBcImZsdlwiLFxuXHRcdFwieC1sYS1hc2ZcIjogW1xuXHRcdFx0XCJsc2ZcIixcblx0XHRcdFwibHN4XCJcblx0XHRdLFxuXHRcdFwieC1tbmdcIjogXCJtbmdcIixcblx0XHRcIngtbXMtYXNmXCI6IFtcblx0XHRcdFwiYXNmXCIsXG5cdFx0XHRcImFzeFwiLFxuXHRcdFx0XCJhc3JcIlxuXHRcdF0sXG5cdFx0XCJ4LW1zLXdtXCI6IFwid21cIixcblx0XHRcIngtbXMtd212XCI6IFwid212XCIsXG5cdFx0XCJ4LW1zLXdteFwiOiBcIndteFwiLFxuXHRcdFwieC1tcy13dnhcIjogXCJ3dnhcIixcblx0XHRcIngtbXN2aWRlb1wiOiBcImF2aVwiLFxuXHRcdFwieC1zZ2ktbW92aWVcIjogXCJtb3ZpZVwiLFxuXHRcdFwieC1tYXRyb3NrYVwiOiBbXG5cdFx0XHRcIm1wdlwiLFxuXHRcdFx0XCJta3ZcIixcblx0XHRcdFwibWszZFwiLFxuXHRcdFx0XCJta3NcIlxuXHRcdF0sXG5cdFx0XCIzZ3BwMlwiOiBcIjNnMlwiLFxuXHRcdFwiaDI2MVwiOiBcImgyNjFcIixcblx0XHRcImgyNjNcIjogXCJoMjYzXCIsXG5cdFx0XCJoMjY0XCI6IFwiaDI2NFwiLFxuXHRcdFwianBlZ1wiOiBcImpwZ3ZcIixcblx0XHRcImpwbVwiOiBbXG5cdFx0XHRcImpwbVwiLFxuXHRcdFx0XCJqcGdtXCJcblx0XHRdLFxuXHRcdFwibWoyXCI6IFtcblx0XHRcdFwibWoyXCIsXG5cdFx0XHRcIm1qcDJcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuZGVjZS5oZFwiOiBbXG5cdFx0XHRcInV2aFwiLFxuXHRcdFx0XCJ1dnZoXCJcblx0XHRdLFxuXHRcdFwidm5kLmRlY2UubW9iaWxlXCI6IFtcblx0XHRcdFwidXZtXCIsXG5cdFx0XHRcInV2dm1cIlxuXHRcdF0sXG5cdFx0XCJ2bmQuZGVjZS5wZFwiOiBbXG5cdFx0XHRcInV2cFwiLFxuXHRcdFx0XCJ1dnZwXCJcblx0XHRdLFxuXHRcdFwidm5kLmRlY2Uuc2RcIjogW1xuXHRcdFx0XCJ1dnNcIixcblx0XHRcdFwidXZ2c1wiXG5cdFx0XSxcblx0XHRcInZuZC5kZWNlLnZpZGVvXCI6IFtcblx0XHRcdFwidXZ2XCIsXG5cdFx0XHRcInV2dnZcIlxuXHRcdF0sXG5cdFx0XCJ2bmQuZHZiLmZpbGVcIjogXCJkdmJcIixcblx0XHRcInZuZC5mdnRcIjogXCJmdnRcIixcblx0XHRcInZuZC5tcy1wbGF5cmVhZHkubWVkaWEucHl2XCI6IFwicHl2XCIsXG5cdFx0XCJ2bmQudXZ2dS5tcDRcIjogW1xuXHRcdFx0XCJ1dnVcIixcblx0XHRcdFwidXZ2dVwiXG5cdFx0XSxcblx0XHRcInZuZC52aXZvXCI6IFwidml2XCIsXG5cdFx0XCJ3ZWJtXCI6IFwid2VibVwiLFxuXHRcdFwieC1mNHZcIjogXCJmNHZcIixcblx0XHRcIngtbTR2XCI6IFwibTR2XCIsXG5cdFx0XCJ4LW1zLXZvYlwiOiBcInZvYlwiLFxuXHRcdFwieC1zbXZcIjogXCJzbXZcIixcblx0XHRcIm1wMnRcIjogXCJ0c1wiXG5cdH0sXG5cdFwieC1jb25mZXJlbmNlXCI6IHtcblx0XHRcIngtY29vbHRhbGtcIjogXCJpY2VcIlxuXHR9LFxuXHRcIngtd29ybGRcIjoge1xuXHRcdFwieC12cm1sXCI6IFtcblx0XHRcdFwidnJtXCIsXG5cdFx0XHRcImZsclwiLFxuXHRcdFx0XCJ3cnpcIixcblx0XHRcdFwieGFmXCIsXG5cdFx0XHRcInhvZlwiXG5cdFx0XVxuXHR9XG59O1xuXG5jb25zdCBtaW1lVHlwZXMgPSAoKCkgPT4ge1xuXHRjb25zdCBtaW1lVHlwZXMgPSB7fTtcblx0Zm9yIChjb25zdCB0eXBlIG9mIE9iamVjdC5rZXlzKHRhYmxlKSkge1xuXHRcdGZvciAoY29uc3Qgc3VidHlwZSBvZiBPYmplY3Qua2V5cyh0YWJsZVt0eXBlXSkpIHtcblx0XHRcdGNvbnN0IHZhbHVlID0gdGFibGVbdHlwZV1bc3VidHlwZV07XG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0bWltZVR5cGVzW3ZhbHVlXSA9IHR5cGUgKyBcIi9cIiArIHN1YnR5cGU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKGxldCBpbmRleE1pbWVUeXBlID0gMDsgaW5kZXhNaW1lVHlwZSA8IHZhbHVlLmxlbmd0aDsgaW5kZXhNaW1lVHlwZSsrKSB7XG5cdFx0XHRcdFx0bWltZVR5cGVzW3ZhbHVlW2luZGV4TWltZVR5cGVdXSA9IHR5cGUgKyBcIi9cIiArIHN1YnR5cGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIG1pbWVUeXBlcztcbn0pKCk7XG5cbmV4cG9ydCB7XG5cdG1pbWVUeXBlcyxcblx0Z2V0TWltZVR5cGVcbn07XG5cbmZ1bmN0aW9uIGdldE1pbWVUeXBlKGZpbGVuYW1lKSB7XG5cdHJldHVybiBmaWxlbmFtZSAmJiBtaW1lVHlwZXNbZmlsZW5hbWUuc3BsaXQoXCIuXCIpLnBvcCgpLnRvTG93ZXJDYXNlKCldIHx8IGdldERlZmF1bHRNaW1lVHlwZSgpO1xufSIsIi8qXG4gQ29weXJpZ2h0IChjKSAyMDIyIEdpbGRhcyBMb3JtZWF1LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiBcbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuIDMuIFRoZSBuYW1lcyBvZiB0aGUgYXV0aG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEICcnQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXG4gSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKQ1JBRlQsXG4gSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsXG4gT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuY29uc3QgdGFibGUgPSBbXTtcbmZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcblx0bGV0IHQgPSBpO1xuXHRmb3IgKGxldCBqID0gMDsgaiA8IDg7IGorKykge1xuXHRcdGlmICh0ICYgMSkge1xuXHRcdFx0dCA9ICh0ID4+PiAxKSBeIDB4RURCODgzMjA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHQgPSB0ID4+PiAxO1xuXHRcdH1cblx0fVxuXHR0YWJsZVtpXSA9IHQ7XG59XG5cbmNsYXNzIENyYzMyIHtcblxuXHRjb25zdHJ1Y3RvcihjcmMpIHtcblx0XHR0aGlzLmNyYyA9IGNyYyB8fCAtMTtcblx0fVxuXG5cdGFwcGVuZChkYXRhKSB7XG5cdFx0bGV0IGNyYyA9IHRoaXMuY3JjIHwgMDtcblx0XHRmb3IgKGxldCBvZmZzZXQgPSAwLCBsZW5ndGggPSBkYXRhLmxlbmd0aCB8IDA7IG9mZnNldCA8IGxlbmd0aDsgb2Zmc2V0KyspIHtcblx0XHRcdGNyYyA9IChjcmMgPj4+IDgpIF4gdGFibGVbKGNyYyBeIGRhdGFbb2Zmc2V0XSkgJiAweEZGXTtcblx0XHR9XG5cdFx0dGhpcy5jcmMgPSBjcmM7XG5cdH1cblxuXHRnZXQoKSB7XG5cdFx0cmV0dXJuIH50aGlzLmNyYztcblx0fVxufVxuXG5leHBvcnQge1xuXHRDcmMzMlxufTsiLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbi8qIGdsb2JhbCBUcmFuc2Zvcm1TdHJlYW0gKi9cblxuaW1wb3J0IHsgQ3JjMzIgfSBmcm9tIFwiLi9jb2RlY3MvY3JjMzIuanNcIjtcblxuY2xhc3MgQ3JjMzJTdHJlYW0gZXh0ZW5kcyBUcmFuc2Zvcm1TdHJlYW0ge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdGxldCBzdHJlYW07XG5cdFx0Y29uc3QgY3JjMzIgPSBuZXcgQ3JjMzIoKTtcblx0XHRzdXBlcih7XG5cdFx0XHR0cmFuc2Zvcm0oY2h1bmssIGNvbnRyb2xsZXIpIHtcblx0XHRcdFx0Y3JjMzIuYXBwZW5kKGNodW5rKTtcblx0XHRcdFx0Y29udHJvbGxlci5lbnF1ZXVlKGNodW5rKTtcblx0XHRcdH0sXG5cdFx0XHRmbHVzaCgpIHtcblx0XHRcdFx0Y29uc3QgdmFsdWUgPSBuZXcgVWludDhBcnJheSg0KTtcblx0XHRcdFx0Y29uc3QgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcodmFsdWUuYnVmZmVyKTtcblx0XHRcdFx0ZGF0YVZpZXcuc2V0VWludDMyKDAsIGNyYzMyLmdldCgpKTtcblx0XHRcdFx0c3RyZWFtLnZhbHVlID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0c3RyZWFtID0gdGhpcztcblx0fVxufVxuXG5leHBvcnQge1xuXHRDcmMzMlN0cmVhbVxufTsiLCIvLyBEZXJpdmVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3hxZG9vMDBvL2pzemlwL2Jsb2IvbWFzdGVyL2xpYi9zamNsLmpzIGFuZCBodHRwczovL2dpdGh1Yi5jb20vYml0d2lzZXNoaWZ0bGVmdC9zamNsXG5cbi8vIGRlbm8tbGludC1pZ25vcmUtZmlsZSBuby10aGlzLWFsaWFzXG5cbi8qXG4gKiBTSkNMIGlzIG9wZW4uIFlvdSBjYW4gdXNlLCBtb2RpZnkgYW5kIHJlZGlzdHJpYnV0ZSBpdCB1bmRlciBhIEJTRFxuICogbGljZW5zZSBvciB1bmRlciB0aGUgR05VIEdQTCwgdmVyc2lvbiAyLjAuXG4gKi9cblxuLyoqIEBmaWxlT3ZlcnZpZXcgSmF2YXNjcmlwdCBjcnlwdG9ncmFwaHkgaW1wbGVtZW50YXRpb24uXG4gKlxuICogQ3J1c2ggdG8gcmVtb3ZlIGNvbW1lbnRzLCBzaG9ydGVuIHZhcmlhYmxlIG5hbWVzIGFuZFxuICogZ2VuZXJhbGx5IHJlZHVjZSB0cmFuc21pc3Npb24gc2l6ZS5cbiAqXG4gKiBAYXV0aG9yIEVtaWx5IFN0YXJrXG4gKiBAYXV0aG9yIE1pa2UgSGFtYnVyZ1xuICogQGF1dGhvciBEYW4gQm9uZWhcbiAqL1xuXG4vKmpzbGludCBpbmRlbnQ6IDIsIGJpdHdpc2U6IGZhbHNlLCBub21lbjogZmFsc2UsIHBsdXNwbHVzOiBmYWxzZSwgd2hpdGU6IGZhbHNlLCByZWdleHA6IGZhbHNlICovXG5cbi8qKiBAZmlsZU92ZXJ2aWV3IEFycmF5cyBvZiBiaXRzLCBlbmNvZGVkIGFzIGFycmF5cyBvZiBOdW1iZXJzLlxuICpcbiAqIEBhdXRob3IgRW1pbHkgU3RhcmtcbiAqIEBhdXRob3IgTWlrZSBIYW1idXJnXG4gKiBAYXV0aG9yIERhbiBCb25laFxuICovXG5cbi8qKlxuICogQXJyYXlzIG9mIGJpdHMsIGVuY29kZWQgYXMgYXJyYXlzIG9mIE51bWJlcnMuXG4gKiBAbmFtZXNwYWNlXG4gKiBAZGVzY3JpcHRpb25cbiAqIDxwPlxuICogVGhlc2Ugb2JqZWN0cyBhcmUgdGhlIGN1cnJlbmN5IGFjY2VwdGVkIGJ5IFNKQ0wncyBjcnlwdG8gZnVuY3Rpb25zLlxuICogPC9wPlxuICpcbiAqIDxwPlxuICogTW9zdCBvZiBvdXIgY3J5cHRvIHByaW1pdGl2ZXMgb3BlcmF0ZSBvbiBhcnJheXMgb2YgNC1ieXRlIHdvcmRzIGludGVybmFsbHksXG4gKiBidXQgbWFueSBvZiB0aGVtIGNhbiB0YWtlIGFyZ3VtZW50cyB0aGF0IGFyZSBub3QgYSBtdWx0aXBsZSBvZiA0IGJ5dGVzLlxuICogVGhpcyBsaWJyYXJ5IGVuY29kZXMgYXJyYXlzIG9mIGJpdHMgKHdob3NlIHNpemUgbmVlZCBub3QgYmUgYSBtdWx0aXBsZSBvZiA4XG4gKiBiaXRzKSBhcyBhcnJheXMgb2YgMzItYml0IHdvcmRzLiAgVGhlIGJpdHMgYXJlIHBhY2tlZCwgYmlnLWVuZGlhbiwgaW50byBhblxuICogYXJyYXkgb2Ygd29yZHMsIDMyIGJpdHMgYXQgYSB0aW1lLiAgU2luY2UgdGhlIHdvcmRzIGFyZSBkb3VibGUtcHJlY2lzaW9uXG4gKiBmbG9hdGluZyBwb2ludCBudW1iZXJzLCB0aGV5IGZpdCBzb21lIGV4dHJhIGRhdGEuICBXZSB1c2UgdGhpcyAoaW4gYSBwcml2YXRlLFxuICogcG9zc2libHktY2hhbmdpbmcgbWFubmVyKSB0byBlbmNvZGUgdGhlIG51bWJlciBvZiBiaXRzIGFjdHVhbGx5ICBwcmVzZW50XG4gKiBpbiB0aGUgbGFzdCB3b3JkIG9mIHRoZSBhcnJheS5cbiAqIDwvcD5cbiAqXG4gKiA8cD5cbiAqIEJlY2F1c2UgYml0d2lzZSBvcHMgY2xlYXIgdGhpcyBvdXQtb2YtYmFuZCBkYXRhLCB0aGVzZSBhcnJheXMgY2FuIGJlIHBhc3NlZFxuICogdG8gY2lwaGVycyBsaWtlIEFFUyB3aGljaCB3YW50IGFycmF5cyBvZiB3b3Jkcy5cbiAqIDwvcD5cbiAqL1xuY29uc3QgYml0QXJyYXkgPSB7XG5cdC8qKlxuXHQgKiBDb25jYXRlbmF0ZSB0d28gYml0IGFycmF5cy5cblx0ICogQHBhcmFtIHtiaXRBcnJheX0gYTEgVGhlIGZpcnN0IGFycmF5LlxuXHQgKiBAcGFyYW0ge2JpdEFycmF5fSBhMiBUaGUgc2Vjb25kIGFycmF5LlxuXHQgKiBAcmV0dXJuIHtiaXRBcnJheX0gVGhlIGNvbmNhdGVuYXRpb24gb2YgYTEgYW5kIGEyLlxuXHQgKi9cblx0Y29uY2F0KGExLCBhMikge1xuXHRcdGlmIChhMS5sZW5ndGggPT09IDAgfHwgYTIubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gYTEuY29uY2F0KGEyKTtcblx0XHR9XG5cblx0XHRjb25zdCBsYXN0ID0gYTFbYTEubGVuZ3RoIC0gMV0sIHNoaWZ0ID0gYml0QXJyYXkuZ2V0UGFydGlhbChsYXN0KTtcblx0XHRpZiAoc2hpZnQgPT09IDMyKSB7XG5cdFx0XHRyZXR1cm4gYTEuY29uY2F0KGEyKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGJpdEFycmF5Ll9zaGlmdFJpZ2h0KGEyLCBzaGlmdCwgbGFzdCB8IDAsIGExLnNsaWNlKDAsIGExLmxlbmd0aCAtIDEpKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEZpbmQgdGhlIGxlbmd0aCBvZiBhbiBhcnJheSBvZiBiaXRzLlxuXHQgKiBAcGFyYW0ge2JpdEFycmF5fSBhIFRoZSBhcnJheS5cblx0ICogQHJldHVybiB7TnVtYmVyfSBUaGUgbGVuZ3RoIG9mIGEsIGluIGJpdHMuXG5cdCAqL1xuXHRiaXRMZW5ndGgoYSkge1xuXHRcdGNvbnN0IGwgPSBhLmxlbmd0aDtcblx0XHRpZiAobCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXHRcdGNvbnN0IHggPSBhW2wgLSAxXTtcblx0XHRyZXR1cm4gKGwgLSAxKSAqIDMyICsgYml0QXJyYXkuZ2V0UGFydGlhbCh4KTtcblx0fSxcblxuXHQvKipcblx0ICogVHJ1bmNhdGUgYW4gYXJyYXkuXG5cdCAqIEBwYXJhbSB7Yml0QXJyYXl9IGEgVGhlIGFycmF5LlxuXHQgKiBAcGFyYW0ge051bWJlcn0gbGVuIFRoZSBsZW5ndGggdG8gdHJ1bmNhdGUgdG8sIGluIGJpdHMuXG5cdCAqIEByZXR1cm4ge2JpdEFycmF5fSBBIG5ldyBhcnJheSwgdHJ1bmNhdGVkIHRvIGxlbiBiaXRzLlxuXHQgKi9cblx0Y2xhbXAoYSwgbGVuKSB7XG5cdFx0aWYgKGEubGVuZ3RoICogMzIgPCBsZW4pIHtcblx0XHRcdHJldHVybiBhO1xuXHRcdH1cblx0XHRhID0gYS5zbGljZSgwLCBNYXRoLmNlaWwobGVuIC8gMzIpKTtcblx0XHRjb25zdCBsID0gYS5sZW5ndGg7XG5cdFx0bGVuID0gbGVuICYgMzE7XG5cdFx0aWYgKGwgPiAwICYmIGxlbikge1xuXHRcdFx0YVtsIC0gMV0gPSBiaXRBcnJheS5wYXJ0aWFsKGxlbiwgYVtsIC0gMV0gJiAweDgwMDAwMDAwID4+IChsZW4gLSAxKSwgMSk7XG5cdFx0fVxuXHRcdHJldHVybiBhO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBNYWtlIGEgcGFydGlhbCB3b3JkIGZvciBhIGJpdCBhcnJheS5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IGxlbiBUaGUgbnVtYmVyIG9mIGJpdHMgaW4gdGhlIHdvcmQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB4IFRoZSBiaXRzLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gW19lbmQ9MF0gUGFzcyAxIGlmIHggaGFzIGFscmVhZHkgYmVlbiBzaGlmdGVkIHRvIHRoZSBoaWdoIHNpZGUuXG5cdCAqIEByZXR1cm4ge051bWJlcn0gVGhlIHBhcnRpYWwgd29yZC5cblx0ICovXG5cdHBhcnRpYWwobGVuLCB4LCBfZW5kKSB7XG5cdFx0aWYgKGxlbiA9PT0gMzIpIHtcblx0XHRcdHJldHVybiB4O1xuXHRcdH1cblx0XHRyZXR1cm4gKF9lbmQgPyB4IHwgMCA6IHggPDwgKDMyIC0gbGVuKSkgKyBsZW4gKiAweDEwMDAwMDAwMDAwO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBHZXQgdGhlIG51bWJlciBvZiBiaXRzIHVzZWQgYnkgYSBwYXJ0aWFsIHdvcmQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB4IFRoZSBwYXJ0aWFsIHdvcmQuXG5cdCAqIEByZXR1cm4ge051bWJlcn0gVGhlIG51bWJlciBvZiBiaXRzIHVzZWQgYnkgdGhlIHBhcnRpYWwgd29yZC5cblx0ICovXG5cdGdldFBhcnRpYWwoeCkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKHggLyAweDEwMDAwMDAwMDAwKSB8fCAzMjtcblx0fSxcblxuXHQvKiogU2hpZnQgYW4gYXJyYXkgcmlnaHQuXG5cdCAqIEBwYXJhbSB7Yml0QXJyYXl9IGEgVGhlIGFycmF5IHRvIHNoaWZ0LlxuXHQgKiBAcGFyYW0ge051bWJlcn0gc2hpZnQgVGhlIG51bWJlciBvZiBiaXRzIHRvIHNoaWZ0LlxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2NhcnJ5PTBdIEEgYnl0ZSB0byBjYXJyeSBpblxuXHQgKiBAcGFyYW0ge2JpdEFycmF5fSBbb3V0PVtdXSBBbiBhcnJheSB0byBwcmVwZW5kIHRvIHRoZSBvdXRwdXQuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfc2hpZnRSaWdodChhLCBzaGlmdCwgY2FycnksIG91dCkge1xuXHRcdGlmIChvdXQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0b3V0ID0gW107XG5cdFx0fVxuXG5cdFx0Zm9yICg7IHNoaWZ0ID49IDMyOyBzaGlmdCAtPSAzMikge1xuXHRcdFx0b3V0LnB1c2goY2FycnkpO1xuXHRcdFx0Y2FycnkgPSAwO1xuXHRcdH1cblx0XHRpZiAoc2hpZnQgPT09IDApIHtcblx0XHRcdHJldHVybiBvdXQuY29uY2F0KGEpO1xuXHRcdH1cblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuXHRcdFx0b3V0LnB1c2goY2FycnkgfCBhW2ldID4+PiBzaGlmdCk7XG5cdFx0XHRjYXJyeSA9IGFbaV0gPDwgKDMyIC0gc2hpZnQpO1xuXHRcdH1cblx0XHRjb25zdCBsYXN0MiA9IGEubGVuZ3RoID8gYVthLmxlbmd0aCAtIDFdIDogMDtcblx0XHRjb25zdCBzaGlmdDIgPSBiaXRBcnJheS5nZXRQYXJ0aWFsKGxhc3QyKTtcblx0XHRvdXQucHVzaChiaXRBcnJheS5wYXJ0aWFsKHNoaWZ0ICsgc2hpZnQyICYgMzEsIChzaGlmdCArIHNoaWZ0MiA+IDMyKSA/IGNhcnJ5IDogb3V0LnBvcCgpLCAxKSk7XG5cdFx0cmV0dXJuIG91dDtcblx0fVxufTtcblxuLyoqIEBmaWxlT3ZlcnZpZXcgQml0IGFycmF5IGNvZGVjIGltcGxlbWVudGF0aW9ucy5cbiAqXG4gKiBAYXV0aG9yIEVtaWx5IFN0YXJrXG4gKiBAYXV0aG9yIE1pa2UgSGFtYnVyZ1xuICogQGF1dGhvciBEYW4gQm9uZWhcbiAqL1xuXG4vKipcbiAqIEFycmF5cyBvZiBieXRlc1xuICogQG5hbWVzcGFjZVxuICovXG5jb25zdCBjb2RlYyA9IHtcblx0Ynl0ZXM6IHtcblx0XHQvKiogQ29udmVydCBmcm9tIGEgYml0QXJyYXkgdG8gYW4gYXJyYXkgb2YgYnl0ZXMuICovXG5cdFx0ZnJvbUJpdHMoYXJyKSB7XG5cdFx0XHRjb25zdCBibCA9IGJpdEFycmF5LmJpdExlbmd0aChhcnIpO1xuXHRcdFx0Y29uc3QgYnl0ZUxlbmd0aCA9IGJsIC8gODtcblx0XHRcdGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KGJ5dGVMZW5ndGgpO1xuXHRcdFx0bGV0IHRtcDtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZUxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmICgoaSAmIDMpID09PSAwKSB7XG5cdFx0XHRcdFx0dG1wID0gYXJyW2kgLyA0XTtcblx0XHRcdFx0fVxuXHRcdFx0XHRvdXRbaV0gPSB0bXAgPj4+IDI0O1xuXHRcdFx0XHR0bXAgPDw9IDg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gb3V0O1xuXHRcdH0sXG5cdFx0LyoqIENvbnZlcnQgZnJvbSBhbiBhcnJheSBvZiBieXRlcyB0byBhIGJpdEFycmF5LiAqL1xuXHRcdHRvQml0cyhieXRlcykge1xuXHRcdFx0Y29uc3Qgb3V0ID0gW107XG5cdFx0XHRsZXQgaTtcblx0XHRcdGxldCB0bXAgPSAwO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHRtcCA9IHRtcCA8PCA4IHwgYnl0ZXNbaV07XG5cdFx0XHRcdGlmICgoaSAmIDMpID09PSAzKSB7XG5cdFx0XHRcdFx0b3V0LnB1c2godG1wKTtcblx0XHRcdFx0XHR0bXAgPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoaSAmIDMpIHtcblx0XHRcdFx0b3V0LnB1c2goYml0QXJyYXkucGFydGlhbCg4ICogKGkgJiAzKSwgdG1wKSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gb3V0O1xuXHRcdH1cblx0fVxufTtcblxuY29uc3QgaGFzaCA9IHt9O1xuXG4vKipcbiAqIENvbnRleHQgZm9yIGEgU0hBLTEgb3BlcmF0aW9uIGluIHByb2dyZXNzLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmhhc2guc2hhMSA9IGNsYXNzIHtcblx0Y29uc3RydWN0b3IoaGFzaCkge1xuXHRcdGNvbnN0IHNoYTEgPSB0aGlzO1xuXHRcdC8qKlxuXHRcdCAqIFRoZSBoYXNoJ3MgYmxvY2sgc2l6ZSwgaW4gYml0cy5cblx0XHQgKiBAY29uc3RhbnRcblx0XHQgKi9cblx0XHRzaGExLmJsb2NrU2l6ZSA9IDUxMjtcblx0XHQvKipcblx0XHQgKiBUaGUgU0hBLTEgaW5pdGlhbGl6YXRpb24gdmVjdG9yLlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0c2hhMS5faW5pdCA9IFsweDY3NDUyMzAxLCAweEVGQ0RBQjg5LCAweDk4QkFEQ0ZFLCAweDEwMzI1NDc2LCAweEMzRDJFMUYwXTtcblx0XHQvKipcblx0XHQgKiBUaGUgU0hBLTEgaGFzaCBrZXkuXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRzaGExLl9rZXkgPSBbMHg1QTgyNzk5OSwgMHg2RUQ5RUJBMSwgMHg4RjFCQkNEQywgMHhDQTYyQzFENl07XG5cdFx0aWYgKGhhc2gpIHtcblx0XHRcdHNoYTEuX2ggPSBoYXNoLl9oLnNsaWNlKDApO1xuXHRcdFx0c2hhMS5fYnVmZmVyID0gaGFzaC5fYnVmZmVyLnNsaWNlKDApO1xuXHRcdFx0c2hhMS5fbGVuZ3RoID0gaGFzaC5fbGVuZ3RoO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzaGExLnJlc2V0KCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFJlc2V0IHRoZSBoYXNoIHN0YXRlLlxuXHQgKiBAcmV0dXJuIHRoaXNcblx0ICovXG5cdHJlc2V0KCkge1xuXHRcdGNvbnN0IHNoYTEgPSB0aGlzO1xuXHRcdHNoYTEuX2ggPSBzaGExLl9pbml0LnNsaWNlKDApO1xuXHRcdHNoYTEuX2J1ZmZlciA9IFtdO1xuXHRcdHNoYTEuX2xlbmd0aCA9IDA7XG5cdFx0cmV0dXJuIHNoYTE7XG5cdH1cblxuXHQvKipcblx0ICogSW5wdXQgc2V2ZXJhbCB3b3JkcyB0byB0aGUgaGFzaC5cblx0ICogQHBhcmFtIHtiaXRBcnJheXxTdHJpbmd9IGRhdGEgdGhlIGRhdGEgdG8gaGFzaC5cblx0ICogQHJldHVybiB0aGlzXG5cdCAqL1xuXHR1cGRhdGUoZGF0YSkge1xuXHRcdGNvbnN0IHNoYTEgPSB0aGlzO1xuXHRcdGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0ZGF0YSA9IGNvZGVjLnV0ZjhTdHJpbmcudG9CaXRzKGRhdGEpO1xuXHRcdH1cblx0XHRjb25zdCBiID0gc2hhMS5fYnVmZmVyID0gYml0QXJyYXkuY29uY2F0KHNoYTEuX2J1ZmZlciwgZGF0YSk7XG5cdFx0Y29uc3Qgb2wgPSBzaGExLl9sZW5ndGg7XG5cdFx0Y29uc3QgbmwgPSBzaGExLl9sZW5ndGggPSBvbCArIGJpdEFycmF5LmJpdExlbmd0aChkYXRhKTtcblx0XHRpZiAobmwgPiA5MDA3MTk5MjU0NzQwOTkxKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgaGFzaCBtb3JlIHRoYW4gMl41MyAtIDEgYml0c1wiKTtcblx0XHR9XG5cdFx0Y29uc3QgYyA9IG5ldyBVaW50MzJBcnJheShiKTtcblx0XHRsZXQgaiA9IDA7XG5cdFx0Zm9yIChsZXQgaSA9IHNoYTEuYmxvY2tTaXplICsgb2wgLSAoKHNoYTEuYmxvY2tTaXplICsgb2wpICYgKHNoYTEuYmxvY2tTaXplIC0gMSkpOyBpIDw9IG5sO1xuXHRcdFx0aSArPSBzaGExLmJsb2NrU2l6ZSkge1xuXHRcdFx0c2hhMS5fYmxvY2soYy5zdWJhcnJheSgxNiAqIGosIDE2ICogKGogKyAxKSkpO1xuXHRcdFx0aiArPSAxO1xuXHRcdH1cblx0XHRiLnNwbGljZSgwLCAxNiAqIGopO1xuXHRcdHJldHVybiBzaGExO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbXBsZXRlIGhhc2hpbmcgYW5kIG91dHB1dCB0aGUgaGFzaCB2YWx1ZS5cblx0ICogQHJldHVybiB7Yml0QXJyYXl9IFRoZSBoYXNoIHZhbHVlLCBhbiBhcnJheSBvZiA1IGJpZy1lbmRpYW4gd29yZHMuIFRPRE9cblx0ICovXG5cdGZpbmFsaXplKCkge1xuXHRcdGNvbnN0IHNoYTEgPSB0aGlzO1xuXHRcdGxldCBiID0gc2hhMS5fYnVmZmVyO1xuXHRcdGNvbnN0IGggPSBzaGExLl9oO1xuXG5cdFx0Ly8gUm91bmQgb3V0IGFuZCBwdXNoIHRoZSBidWZmZXJcblx0XHRiID0gYml0QXJyYXkuY29uY2F0KGIsIFtiaXRBcnJheS5wYXJ0aWFsKDEsIDEpXSk7XG5cdFx0Ly8gUm91bmQgb3V0IHRoZSBidWZmZXIgdG8gYSBtdWx0aXBsZSBvZiAxNiB3b3JkcywgbGVzcyB0aGUgMiBsZW5ndGggd29yZHMuXG5cdFx0Zm9yIChsZXQgaSA9IGIubGVuZ3RoICsgMjsgaSAmIDE1OyBpKyspIHtcblx0XHRcdGIucHVzaCgwKTtcblx0XHR9XG5cblx0XHQvLyBhcHBlbmQgdGhlIGxlbmd0aFxuXHRcdGIucHVzaChNYXRoLmZsb29yKHNoYTEuX2xlbmd0aCAvIDB4MTAwMDAwMDAwKSk7XG5cdFx0Yi5wdXNoKHNoYTEuX2xlbmd0aCB8IDApO1xuXG5cdFx0d2hpbGUgKGIubGVuZ3RoKSB7XG5cdFx0XHRzaGExLl9ibG9jayhiLnNwbGljZSgwLCAxNikpO1xuXHRcdH1cblxuXHRcdHNoYTEucmVzZXQoKTtcblx0XHRyZXR1cm4gaDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgU0hBLTEgbG9naWNhbCBmdW5jdGlvbnMgZigwKSwgZigxKSwgLi4uLCBmKDc5KS5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9mKHQsIGIsIGMsIGQpIHtcblx0XHRpZiAodCA8PSAxOSkge1xuXHRcdFx0cmV0dXJuIChiICYgYykgfCAofmIgJiBkKTtcblx0XHR9IGVsc2UgaWYgKHQgPD0gMzkpIHtcblx0XHRcdHJldHVybiBiIF4gYyBeIGQ7XG5cdFx0fSBlbHNlIGlmICh0IDw9IDU5KSB7XG5cdFx0XHRyZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpO1xuXHRcdH0gZWxzZSBpZiAodCA8PSA3OSkge1xuXHRcdFx0cmV0dXJuIGIgXiBjIF4gZDtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ2lyY3VsYXIgbGVmdC1zaGlmdCBvcGVyYXRvci5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9TKG4sIHgpIHtcblx0XHRyZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gMzIgLSBuKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQZXJmb3JtIG9uZSBjeWNsZSBvZiBTSEEtMS5cblx0ICogQHBhcmFtIHtVaW50MzJBcnJheXxiaXRBcnJheX0gd29yZHMgb25lIGJsb2NrIG9mIHdvcmRzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2Jsb2NrKHdvcmRzKSB7XG5cdFx0Y29uc3Qgc2hhMSA9IHRoaXM7XG5cdFx0Y29uc3QgaCA9IHNoYTEuX2g7XG5cdFx0Ly8gV2hlbiB3b3JkcyBpcyBwYXNzZWQgdG8gX2Jsb2NrLCBpdCBoYXMgMTYgZWxlbWVudHMuIFNIQTEgX2Jsb2NrXG5cdFx0Ly8gZnVuY3Rpb24gZXh0ZW5kcyB3b3JkcyB3aXRoIG5ldyBlbGVtZW50cyAoYXQgdGhlIGVuZCB0aGVyZSBhcmUgODAgZWxlbWVudHMpLiBcblx0XHQvLyBUaGUgcHJvYmxlbSBpcyB0aGF0IGlmIHdlIHVzZSBVaW50MzJBcnJheSBpbnN0ZWFkIG9mIEFycmF5LCBcblx0XHQvLyB0aGUgbGVuZ3RoIG9mIFVpbnQzMkFycmF5IGNhbm5vdCBiZSBjaGFuZ2VkLiBUaHVzLCB3ZSByZXBsYWNlIHdvcmRzIHdpdGggYSBcblx0XHQvLyBub3JtYWwgQXJyYXkgaGVyZS5cblx0XHRjb25zdCB3ID0gQXJyYXkoODApOyAvLyBkbyBub3QgdXNlIFVpbnQzMkFycmF5IGhlcmUgYXMgdGhlIGluc3RhbnRpYXRpb24gaXMgc2xvd2VyXG5cdFx0Zm9yIChsZXQgaiA9IDA7IGogPCAxNjsgaisrKSB7XG5cdFx0XHR3W2pdID0gd29yZHNbal07XG5cdFx0fVxuXG5cdFx0bGV0IGEgPSBoWzBdO1xuXHRcdGxldCBiID0gaFsxXTtcblx0XHRsZXQgYyA9IGhbMl07XG5cdFx0bGV0IGQgPSBoWzNdO1xuXHRcdGxldCBlID0gaFs0XTtcblxuXHRcdGZvciAobGV0IHQgPSAwOyB0IDw9IDc5OyB0KyspIHtcblx0XHRcdGlmICh0ID49IDE2KSB7XG5cdFx0XHRcdHdbdF0gPSBzaGExLl9TKDEsIHdbdCAtIDNdIF4gd1t0IC0gOF0gXiB3W3QgLSAxNF0gXiB3W3QgLSAxNl0pO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgdG1wID0gKHNoYTEuX1MoNSwgYSkgKyBzaGExLl9mKHQsIGIsIGMsIGQpICsgZSArIHdbdF0gK1xuXHRcdFx0XHRzaGExLl9rZXlbTWF0aC5mbG9vcih0IC8gMjApXSkgfCAwO1xuXHRcdFx0ZSA9IGQ7XG5cdFx0XHRkID0gYztcblx0XHRcdGMgPSBzaGExLl9TKDMwLCBiKTtcblx0XHRcdGIgPSBhO1xuXHRcdFx0YSA9IHRtcDtcblx0XHR9XG5cblx0XHRoWzBdID0gKGhbMF0gKyBhKSB8IDA7XG5cdFx0aFsxXSA9IChoWzFdICsgYikgfCAwO1xuXHRcdGhbMl0gPSAoaFsyXSArIGMpIHwgMDtcblx0XHRoWzNdID0gKGhbM10gKyBkKSB8IDA7XG5cdFx0aFs0XSA9IChoWzRdICsgZSkgfCAwO1xuXHR9XG59O1xuXG4vKiogQGZpbGVPdmVydmlldyBMb3ctbGV2ZWwgQUVTIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIFRoaXMgZmlsZSBjb250YWlucyBhIGxvdy1sZXZlbCBpbXBsZW1lbnRhdGlvbiBvZiBBRVMsIG9wdGltaXplZCBmb3JcbiAqIHNpemUgYW5kIGZvciBlZmZpY2llbmN5IG9uIHNldmVyYWwgYnJvd3NlcnMuICBJdCBpcyBiYXNlZCBvblxuICogT3BlblNTTCdzIGFlc19jb3JlLmMsIGEgcHVibGljLWRvbWFpbiBpbXBsZW1lbnRhdGlvbiBieSBWaW5jZW50XG4gKiBSaWptZW4sIEFudG9vbiBCb3NzZWxhZXJzIGFuZCBQYXVsbyBCYXJyZXRvLlxuICpcbiAqIEFuIG9sZGVyIHZlcnNpb24gb2YgdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBhdmFpbGFibGUgaW4gdGhlIHB1YmxpY1xuICogZG9tYWluLCBidXQgdGhpcyBvbmUgaXMgKGMpIEVtaWx5IFN0YXJrLCBNaWtlIEhhbWJ1cmcsIERhbiBCb25laCxcbiAqIFN0YW5mb3JkIFVuaXZlcnNpdHkgMjAwOC0yMDEwIGFuZCBCU0QtbGljZW5zZWQgZm9yIGxpYWJpbGl0eVxuICogcmVhc29ucy5cbiAqXG4gKiBAYXV0aG9yIEVtaWx5IFN0YXJrXG4gKiBAYXV0aG9yIE1pa2UgSGFtYnVyZ1xuICogQGF1dGhvciBEYW4gQm9uZWhcbiAqL1xuXG5jb25zdCBjaXBoZXIgPSB7fTtcblxuLyoqXG4gKiBTY2hlZHVsZSBvdXQgYW4gQUVTIGtleSBmb3IgYm90aCBlbmNyeXB0aW9uIGFuZCBkZWNyeXB0aW9uLiAgVGhpc1xuICogaXMgYSBsb3ctbGV2ZWwgY2xhc3MuICBVc2UgYSBjaXBoZXIgbW9kZSB0byBkbyBidWxrIGVuY3J5cHRpb24uXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBrZXkgVGhlIGtleSBhcyBhbiBhcnJheSBvZiA0LCA2IG9yIDggd29yZHMuXG4gKi9cbmNpcGhlci5hZXMgPSBjbGFzcyB7XG5cdGNvbnN0cnVjdG9yKGtleSkge1xuXHRcdC8qKlxuXHRcdCAqIFRoZSBleHBhbmRlZCBTLWJveCBhbmQgaW52ZXJzZSBTLWJveCB0YWJsZXMuICBUaGVzZSB3aWxsIGJlIGNvbXB1dGVkXG5cdFx0ICogb24gdGhlIGNsaWVudCBzbyB0aGF0IHdlIGRvbid0IGhhdmUgdG8gc2VuZCB0aGVtIGRvd24gdGhlIHdpcmUuXG5cdFx0ICpcblx0XHQgKiBUaGVyZSBhcmUgdHdvIHRhYmxlcywgX3RhYmxlc1swXSBpcyBmb3IgZW5jcnlwdGlvbiBhbmRcblx0XHQgKiBfdGFibGVzWzFdIGlzIGZvciBkZWNyeXB0aW9uLlxuXHRcdCAqXG5cdFx0ICogVGhlIGZpcnN0IDQgc3ViLXRhYmxlcyBhcmUgdGhlIGV4cGFuZGVkIFMtYm94IHdpdGggTWl4Q29sdW1ucy4gIFRoZVxuXHRcdCAqIGxhc3QgKF90YWJsZXNbMDFdWzRdKSBpcyB0aGUgUy1ib3ggaXRzZWxmLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRjb25zdCBhZXMgPSB0aGlzO1xuXHRcdGFlcy5fdGFibGVzID0gW1tbXSwgW10sIFtdLCBbXSwgW11dLCBbW10sIFtdLCBbXSwgW10sIFtdXV07XG5cblx0XHRpZiAoIWFlcy5fdGFibGVzWzBdWzBdWzBdKSB7XG5cdFx0XHRhZXMuX3ByZWNvbXB1dGUoKTtcblx0XHR9XG5cblx0XHRjb25zdCBzYm94ID0gYWVzLl90YWJsZXNbMF1bNF07XG5cdFx0Y29uc3QgZGVjVGFibGUgPSBhZXMuX3RhYmxlc1sxXTtcblx0XHRjb25zdCBrZXlMZW4gPSBrZXkubGVuZ3RoO1xuXG5cdFx0bGV0IGksIGVuY0tleSwgZGVjS2V5LCByY29uID0gMTtcblxuXHRcdGlmIChrZXlMZW4gIT09IDQgJiYga2V5TGVuICE9PSA2ICYmIGtleUxlbiAhPT0gOCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBhZXMga2V5IHNpemVcIik7XG5cdFx0fVxuXG5cdFx0YWVzLl9rZXkgPSBbZW5jS2V5ID0ga2V5LnNsaWNlKDApLCBkZWNLZXkgPSBbXV07XG5cblx0XHQvLyBzY2hlZHVsZSBlbmNyeXB0aW9uIGtleXNcblx0XHRmb3IgKGkgPSBrZXlMZW47IGkgPCA0ICoga2V5TGVuICsgMjg7IGkrKykge1xuXHRcdFx0bGV0IHRtcCA9IGVuY0tleVtpIC0gMV07XG5cblx0XHRcdC8vIGFwcGx5IHNib3hcblx0XHRcdGlmIChpICUga2V5TGVuID09PSAwIHx8IChrZXlMZW4gPT09IDggJiYgaSAlIGtleUxlbiA9PT0gNCkpIHtcblx0XHRcdFx0dG1wID0gc2JveFt0bXAgPj4+IDI0XSA8PCAyNCBeIHNib3hbdG1wID4+IDE2ICYgMjU1XSA8PCAxNiBeIHNib3hbdG1wID4+IDggJiAyNTVdIDw8IDggXiBzYm94W3RtcCAmIDI1NV07XG5cblx0XHRcdFx0Ly8gc2hpZnQgcm93cyBhbmQgYWRkIHJjb25cblx0XHRcdFx0aWYgKGkgJSBrZXlMZW4gPT09IDApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAgPDwgOCBeIHRtcCA+Pj4gMjQgXiByY29uIDw8IDI0O1xuXHRcdFx0XHRcdHJjb24gPSByY29uIDw8IDEgXiAocmNvbiA+PiA3KSAqIDI4Mztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRlbmNLZXlbaV0gPSBlbmNLZXlbaSAtIGtleUxlbl0gXiB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gc2NoZWR1bGUgZGVjcnlwdGlvbiBrZXlzXG5cdFx0Zm9yIChsZXQgaiA9IDA7IGk7IGorKywgaS0tKSB7XG5cdFx0XHRjb25zdCB0bXAgPSBlbmNLZXlbaiAmIDMgPyBpIDogaSAtIDRdO1xuXHRcdFx0aWYgKGkgPD0gNCB8fCBqIDwgNCkge1xuXHRcdFx0XHRkZWNLZXlbal0gPSB0bXA7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWNLZXlbal0gPSBkZWNUYWJsZVswXVtzYm94W3RtcCA+Pj4gMjRdXSBeXG5cdFx0XHRcdFx0ZGVjVGFibGVbMV1bc2JveFt0bXAgPj4gMTYgJiAyNTVdXSBeXG5cdFx0XHRcdFx0ZGVjVGFibGVbMl1bc2JveFt0bXAgPj4gOCAmIDI1NV1dIF5cblx0XHRcdFx0XHRkZWNUYWJsZVszXVtzYm94W3RtcCAmIDI1NV1dO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHQvLyBwdWJsaWNcblx0LyogU29tZXRoaW5nIGxpa2UgdGhpcyBtaWdodCBhcHBlYXIgaGVyZSBldmVudHVhbGx5XG5cdG5hbWU6IFwiQUVTXCIsXG5cdGJsb2NrU2l6ZTogNCxcblx0a2V5U2l6ZXM6IFs0LDYsOF0sXG5cdCovXG5cblx0LyoqXG5cdCAqIEVuY3J5cHQgYW4gYXJyYXkgb2YgNCBiaWctZW5kaWFuIHdvcmRzLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBwbGFpbnRleHQuXG5cdCAqIEByZXR1cm4ge0FycmF5fSBUaGUgY2lwaGVydGV4dC5cblx0ICovXG5cdGVuY3J5cHQoZGF0YSkge1xuXHRcdHJldHVybiB0aGlzLl9jcnlwdChkYXRhLCAwKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEZWNyeXB0IGFuIGFycmF5IG9mIDQgYmlnLWVuZGlhbiB3b3Jkcy5cblx0ICogQHBhcmFtIHtBcnJheX0gZGF0YSBUaGUgY2lwaGVydGV4dC5cblx0ICogQHJldHVybiB7QXJyYXl9IFRoZSBwbGFpbnRleHQuXG5cdCAqL1xuXHRkZWNyeXB0KGRhdGEpIHtcblx0XHRyZXR1cm4gdGhpcy5fY3J5cHQoZGF0YSwgMSk7XG5cdH1cblxuXHQvKipcblx0ICogRXhwYW5kIHRoZSBTLWJveCB0YWJsZXMuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcHJlY29tcHV0ZSgpIHtcblx0XHRjb25zdCBlbmNUYWJsZSA9IHRoaXMuX3RhYmxlc1swXTtcblx0XHRjb25zdCBkZWNUYWJsZSA9IHRoaXMuX3RhYmxlc1sxXTtcblx0XHRjb25zdCBzYm94ID0gZW5jVGFibGVbNF07XG5cdFx0Y29uc3Qgc2JveEludiA9IGRlY1RhYmxlWzRdO1xuXHRcdGNvbnN0IGQgPSBbXTtcblx0XHRjb25zdCB0aCA9IFtdO1xuXHRcdGxldCB4SW52LCB4MiwgeDQsIHg4O1xuXG5cdFx0Ly8gQ29tcHV0ZSBkb3VibGUgYW5kIHRoaXJkIHRhYmxlc1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcblx0XHRcdHRoWyhkW2ldID0gaSA8PCAxIF4gKGkgPj4gNykgKiAyODMpIF4gaV0gPSBpO1xuXHRcdH1cblxuXHRcdGZvciAobGV0IHggPSB4SW52ID0gMDsgIXNib3hbeF07IHggXj0geDIgfHwgMSwgeEludiA9IHRoW3hJbnZdIHx8IDEpIHtcblx0XHRcdC8vIENvbXB1dGUgc2JveFxuXHRcdFx0bGV0IHMgPSB4SW52IF4geEludiA8PCAxIF4geEludiA8PCAyIF4geEludiA8PCAzIF4geEludiA8PCA0O1xuXHRcdFx0cyA9IHMgPj4gOCBeIHMgJiAyNTUgXiA5OTtcblx0XHRcdHNib3hbeF0gPSBzO1xuXHRcdFx0c2JveEludltzXSA9IHg7XG5cblx0XHRcdC8vIENvbXB1dGUgTWl4Q29sdW1uc1xuXHRcdFx0eDggPSBkW3g0ID0gZFt4MiA9IGRbeF1dXTtcblx0XHRcdGxldCB0RGVjID0geDggKiAweDEwMTAxMDEgXiB4NCAqIDB4MTAwMDEgXiB4MiAqIDB4MTAxIF4geCAqIDB4MTAxMDEwMDtcblx0XHRcdGxldCB0RW5jID0gZFtzXSAqIDB4MTAxIF4gcyAqIDB4MTAxMDEwMDtcblxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0XHRcdFx0ZW5jVGFibGVbaV1beF0gPSB0RW5jID0gdEVuYyA8PCAyNCBeIHRFbmMgPj4+IDg7XG5cdFx0XHRcdGRlY1RhYmxlW2ldW3NdID0gdERlYyA9IHREZWMgPDwgMjQgXiB0RGVjID4+PiA4O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbXBhY3RpZnkuICBDb25zaWRlcmFibGUgc3BlZWR1cCBvbiBGaXJlZm94LlxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG5cdFx0XHRlbmNUYWJsZVtpXSA9IGVuY1RhYmxlW2ldLnNsaWNlKDApO1xuXHRcdFx0ZGVjVGFibGVbaV0gPSBkZWNUYWJsZVtpXS5zbGljZSgwKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogRW5jcnlwdGlvbiBhbmQgZGVjcnlwdGlvbiBjb3JlLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBpbnB1dCBGb3VyIHdvcmRzIHRvIGJlIGVuY3J5cHRlZCBvciBkZWNyeXB0ZWQuXG5cdCAqIEBwYXJhbSBkaXIgVGhlIGRpcmVjdGlvbiwgMCBmb3IgZW5jcnlwdCBhbmQgMSBmb3IgZGVjcnlwdC5cblx0ICogQHJldHVybiB7QXJyYXl9IFRoZSBmb3VyIGVuY3J5cHRlZCBvciBkZWNyeXB0ZWQgd29yZHMuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfY3J5cHQoaW5wdXQsIGRpcikge1xuXHRcdGlmIChpbnB1dC5sZW5ndGggIT09IDQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImludmFsaWQgYWVzIGJsb2NrIHNpemVcIik7XG5cdFx0fVxuXG5cdFx0Y29uc3Qga2V5ID0gdGhpcy5fa2V5W2Rpcl07XG5cblx0XHRjb25zdCBuSW5uZXJSb3VuZHMgPSBrZXkubGVuZ3RoIC8gNCAtIDI7XG5cdFx0Y29uc3Qgb3V0ID0gWzAsIDAsIDAsIDBdO1xuXHRcdGNvbnN0IHRhYmxlID0gdGhpcy5fdGFibGVzW2Rpcl07XG5cblx0XHQvLyBsb2FkIHVwIHRoZSB0YWJsZXNcblx0XHRjb25zdCB0MCA9IHRhYmxlWzBdO1xuXHRcdGNvbnN0IHQxID0gdGFibGVbMV07XG5cdFx0Y29uc3QgdDIgPSB0YWJsZVsyXTtcblx0XHRjb25zdCB0MyA9IHRhYmxlWzNdO1xuXHRcdGNvbnN0IHNib3ggPSB0YWJsZVs0XTtcblxuXHRcdC8vIHN0YXRlIHZhcmlhYmxlcyBhLGIsYyxkIGFyZSBsb2FkZWQgd2l0aCBwcmUtd2hpdGVuZWQgZGF0YVxuXHRcdGxldCBhID0gaW5wdXRbMF0gXiBrZXlbMF07XG5cdFx0bGV0IGIgPSBpbnB1dFtkaXIgPyAzIDogMV0gXiBrZXlbMV07XG5cdFx0bGV0IGMgPSBpbnB1dFsyXSBeIGtleVsyXTtcblx0XHRsZXQgZCA9IGlucHV0W2RpciA/IDEgOiAzXSBeIGtleVszXTtcblx0XHRsZXQga0luZGV4ID0gNDtcblx0XHRsZXQgYTIsIGIyLCBjMjtcblxuXHRcdC8vIElubmVyIHJvdW5kcy4gIENyaWJiZWQgZnJvbSBPcGVuU1NMLlxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbklubmVyUm91bmRzOyBpKyspIHtcblx0XHRcdGEyID0gdDBbYSA+Pj4gMjRdIF4gdDFbYiA+PiAxNiAmIDI1NV0gXiB0MltjID4+IDggJiAyNTVdIF4gdDNbZCAmIDI1NV0gXiBrZXlba0luZGV4XTtcblx0XHRcdGIyID0gdDBbYiA+Pj4gMjRdIF4gdDFbYyA+PiAxNiAmIDI1NV0gXiB0MltkID4+IDggJiAyNTVdIF4gdDNbYSAmIDI1NV0gXiBrZXlba0luZGV4ICsgMV07XG5cdFx0XHRjMiA9IHQwW2MgPj4+IDI0XSBeIHQxW2QgPj4gMTYgJiAyNTVdIF4gdDJbYSA+PiA4ICYgMjU1XSBeIHQzW2IgJiAyNTVdIF4ga2V5W2tJbmRleCArIDJdO1xuXHRcdFx0ZCA9IHQwW2QgPj4+IDI0XSBeIHQxW2EgPj4gMTYgJiAyNTVdIF4gdDJbYiA+PiA4ICYgMjU1XSBeIHQzW2MgJiAyNTVdIF4ga2V5W2tJbmRleCArIDNdO1xuXHRcdFx0a0luZGV4ICs9IDQ7XG5cdFx0XHRhID0gYTI7IGIgPSBiMjsgYyA9IGMyO1xuXHRcdH1cblxuXHRcdC8vIExhc3Qgcm91bmQuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0XHRcdG91dFtkaXIgPyAzICYgLWkgOiBpXSA9XG5cdFx0XHRcdHNib3hbYSA+Pj4gMjRdIDw8IDI0IF5cblx0XHRcdFx0c2JveFtiID4+IDE2ICYgMjU1XSA8PCAxNiBeXG5cdFx0XHRcdHNib3hbYyA+PiA4ICYgMjU1XSA8PCA4IF5cblx0XHRcdFx0c2JveFtkICYgMjU1XSBeXG5cdFx0XHRcdGtleVtrSW5kZXgrK107XG5cdFx0XHRhMiA9IGE7IGEgPSBiOyBiID0gYzsgYyA9IGQ7IGQgPSBhMjtcblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0O1xuXHR9XG59O1xuXG4vKipcbiAqIFJhbmRvbSB2YWx1ZXNcbiAqIEBuYW1lc3BhY2VcbiAqL1xuY29uc3QgcmFuZG9tID0ge1xuXHQvKiogXG5cdCAqIEdlbmVyYXRlIHJhbmRvbSB3b3JkcyB3aXRoIHB1cmUganMsIGNyeXB0b2dyYXBoaWNhbGx5IG5vdCBhcyBzdHJvbmcgJiBzYWZlIGFzIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbi5cblx0ICogQHBhcmFtIHtUeXBlZEFycmF5fSB0eXBlZEFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuXHQgKiBAcmV0dXJuIHtUeXBlZEFycmF5fSBUaGUgcmFuZG9tIHZhbHVlcy5cblx0ICovXG5cdGdldFJhbmRvbVZhbHVlcyh0eXBlZEFycmF5KSB7XG5cdFx0Y29uc3Qgd29yZHMgPSBuZXcgVWludDMyQXJyYXkodHlwZWRBcnJheS5idWZmZXIpO1xuXHRcdGNvbnN0IHIgPSAobV93KSA9PiB7XG5cdFx0XHRsZXQgbV96ID0gMHgzYWRlNjhiMTtcblx0XHRcdGNvbnN0IG1hc2sgPSAweGZmZmZmZmZmO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0bV96ID0gKDB4OTA2OSAqIChtX3ogJiAweEZGRkYpICsgKG1feiA+PiAweDEwKSkgJiBtYXNrO1xuXHRcdFx0XHRtX3cgPSAoMHg0NjUwICogKG1fdyAmIDB4RkZGRikgKyAobV93ID4+IDB4MTApKSAmIG1hc2s7XG5cdFx0XHRcdGNvbnN0IHJlc3VsdCA9ICgoKChtX3ogPDwgMHgxMCkgKyBtX3cpICYgbWFzaykgLyAweDEwMDAwMDAwMCkgKyAuNTtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdCAqIChNYXRoLnJhbmRvbSgpID4gLjUgPyAxIDogLTEpO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdGZvciAobGV0IGkgPSAwLCByY2FjaGU7IGkgPCB0eXBlZEFycmF5Lmxlbmd0aDsgaSArPSA0KSB7XG5cdFx0XHRjb25zdCBfciA9IHIoKHJjYWNoZSB8fCBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDAwMDAwKTtcblx0XHRcdHJjYWNoZSA9IF9yKCkgKiAweDNhZGU2N2I3O1xuXHRcdFx0d29yZHNbaSAvIDRdID0gKF9yKCkgKiAweDEwMDAwMDAwMCkgfCAwO1xuXHRcdH1cblx0XHRyZXR1cm4gdHlwZWRBcnJheTtcblx0fVxufTtcblxuLyoqIEBmaWxlT3ZlcnZpZXcgQ1RSIG1vZGUgaW1wbGVtZW50YXRpb24uXG4gKlxuICogU3BlY2lhbCB0aGFua3MgdG8gUm95IE5pY2hvbHNvbiBmb3IgcG9pbnRpbmcgb3V0IGEgYnVnIGluIG91clxuICogaW1wbGVtZW50YXRpb24uXG4gKlxuICogQGF1dGhvciBFbWlseSBTdGFya1xuICogQGF1dGhvciBNaWtlIEhhbWJ1cmdcbiAqIEBhdXRob3IgRGFuIEJvbmVoXG4gKi9cblxuLyoqIEJyaWFuIEdsYWRtYW4ncyBDVFIgTW9kZS5cbiogQGNvbnN0cnVjdG9yXG4qIEBwYXJhbSB7T2JqZWN0fSBfcHJmIFRoZSBhZXMgaW5zdGFuY2UgdG8gZ2VuZXJhdGUga2V5LlxuKiBAcGFyYW0ge2JpdEFycmF5fSBfaXYgVGhlIGl2IGZvciBjdHIgbW9kZSwgaXQgbXVzdCBiZSAxMjggYml0cy5cbiovXG5cbmNvbnN0IG1vZGUgPSB7fTtcblxuLyoqXG4gKiBCcmlhbiBHbGFkbWFuJ3MgQ1RSIE1vZGUuXG4gKiBAbmFtZXNwYWNlXG4gKi9cbm1vZGUuY3RyR2xhZG1hbiA9IGNsYXNzIHtcblx0Y29uc3RydWN0b3IocHJmLCBpdikge1xuXHRcdHRoaXMuX3ByZiA9IHByZjtcblx0XHR0aGlzLl9pbml0SXYgPSBpdjtcblx0XHR0aGlzLl9pdiA9IGl2O1xuXHR9XG5cblx0cmVzZXQoKSB7XG5cdFx0dGhpcy5faXYgPSB0aGlzLl9pbml0SXY7XG5cdH1cblxuXHQvKiogSW5wdXQgc29tZSBkYXRhIHRvIGNhbGN1bGF0ZS5cblx0ICogQHBhcmFtIHtiaXRBcnJheX0gZGF0YSB0aGUgZGF0YSB0byBwcm9jZXNzLCBpdCBtdXN0IGJlIGludGVyZ3JhbCBtdWx0aXBsZSBvZiAxMjggYml0cyB1bmxlc3MgaXQncyB0aGUgbGFzdC5cblx0ICovXG5cdHVwZGF0ZShkYXRhKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FsY3VsYXRlKHRoaXMuX3ByZiwgZGF0YSwgdGhpcy5faXYpO1xuXHR9XG5cblx0aW5jV29yZCh3b3JkKSB7XG5cdFx0aWYgKCgod29yZCA+PiAyNCkgJiAweGZmKSA9PT0gMHhmZikgeyAvL292ZXJmbG93XG5cdFx0XHRsZXQgYjEgPSAod29yZCA+PiAxNikgJiAweGZmO1xuXHRcdFx0bGV0IGIyID0gKHdvcmQgPj4gOCkgJiAweGZmO1xuXHRcdFx0bGV0IGIzID0gd29yZCAmIDB4ZmY7XG5cblx0XHRcdGlmIChiMSA9PT0gMHhmZikgeyAvLyBvdmVyZmxvdyBiMSAgIFxuXHRcdFx0XHRiMSA9IDA7XG5cdFx0XHRcdGlmIChiMiA9PT0gMHhmZikge1xuXHRcdFx0XHRcdGIyID0gMDtcblx0XHRcdFx0XHRpZiAoYjMgPT09IDB4ZmYpIHtcblx0XHRcdFx0XHRcdGIzID0gMDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0KytiMztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KytiMjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0KytiMTtcblx0XHRcdH1cblxuXHRcdFx0d29yZCA9IDA7XG5cdFx0XHR3b3JkICs9IChiMSA8PCAxNik7XG5cdFx0XHR3b3JkICs9IChiMiA8PCA4KTtcblx0XHRcdHdvcmQgKz0gYjM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdvcmQgKz0gKDB4MDEgPDwgMjQpO1xuXHRcdH1cblx0XHRyZXR1cm4gd29yZDtcblx0fVxuXG5cdGluY0NvdW50ZXIoY291bnRlcikge1xuXHRcdGlmICgoY291bnRlclswXSA9IHRoaXMuaW5jV29yZChjb3VudGVyWzBdKSkgPT09IDApIHtcblx0XHRcdC8vIGVuY3JfZGF0YSBpbiBmaWxlZW5jLmMgZnJvbSAgRHIgQnJpYW4gR2xhZG1hbidzIGNvdW50cyBvbmx5IHdpdGggRFdPUkQgaiA8IDhcblx0XHRcdGNvdW50ZXJbMV0gPSB0aGlzLmluY1dvcmQoY291bnRlclsxXSk7XG5cdFx0fVxuXHR9XG5cblx0Y2FsY3VsYXRlKHByZiwgZGF0YSwgaXYpIHtcblx0XHRsZXQgbDtcblx0XHRpZiAoIShsID0gZGF0YS5sZW5ndGgpKSB7XG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fVxuXHRcdGNvbnN0IGJsID0gYml0QXJyYXkuYml0TGVuZ3RoKGRhdGEpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSArPSA0KSB7XG5cdFx0XHR0aGlzLmluY0NvdW50ZXIoaXYpO1xuXHRcdFx0Y29uc3QgZSA9IHByZi5lbmNyeXB0KGl2KTtcblx0XHRcdGRhdGFbaV0gXj0gZVswXTtcblx0XHRcdGRhdGFbaSArIDFdIF49IGVbMV07XG5cdFx0XHRkYXRhW2kgKyAyXSBePSBlWzJdO1xuXHRcdFx0ZGF0YVtpICsgM10gXj0gZVszXTtcblx0XHR9XG5cdFx0cmV0dXJuIGJpdEFycmF5LmNsYW1wKGRhdGEsIGJsKTtcblx0fVxufTtcblxuY29uc3QgbWlzYyA9IHtcblx0aW1wb3J0S2V5KHBhc3N3b3JkKSB7XG5cdFx0cmV0dXJuIG5ldyBtaXNjLmhtYWNTaGExKGNvZGVjLmJ5dGVzLnRvQml0cyhwYXNzd29yZCkpO1xuXHR9LFxuXHRwYmtkZjIocHJmLCBzYWx0LCBjb3VudCwgbGVuZ3RoKSB7XG5cdFx0Y291bnQgPSBjb3VudCB8fCAxMDAwMDtcblx0XHRpZiAobGVuZ3RoIDwgMCB8fCBjb3VudCA8IDApIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImludmFsaWQgcGFyYW1zIHRvIHBia2RmMlwiKTtcblx0XHR9XG5cdFx0Y29uc3QgYnl0ZUxlbmd0aCA9ICgobGVuZ3RoID4+IDUpICsgMSkgPDwgMjtcblx0XHRsZXQgdSwgdWksIGksIGosIGs7XG5cdFx0Y29uc3QgYXJyYXlCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG5cdFx0Y29uc3Qgb3V0ID0gbmV3IERhdGFWaWV3KGFycmF5QnVmZmVyKTtcblx0XHRsZXQgb3V0TGVuZ3RoID0gMDtcblx0XHRjb25zdCBiID0gYml0QXJyYXk7XG5cdFx0c2FsdCA9IGNvZGVjLmJ5dGVzLnRvQml0cyhzYWx0KTtcblx0XHRmb3IgKGsgPSAxOyBvdXRMZW5ndGggPCAoYnl0ZUxlbmd0aCB8fCAxKTsgaysrKSB7XG5cdFx0XHR1ID0gdWkgPSBwcmYuZW5jcnlwdChiLmNvbmNhdChzYWx0LCBba10pKTtcblx0XHRcdGZvciAoaSA9IDE7IGkgPCBjb3VudDsgaSsrKSB7XG5cdFx0XHRcdHVpID0gcHJmLmVuY3J5cHQodWkpO1xuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgdWkubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHR1W2pdIF49IHVpW2pdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRmb3IgKGkgPSAwOyBvdXRMZW5ndGggPCAoYnl0ZUxlbmd0aCB8fCAxKSAmJiBpIDwgdS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRvdXQuc2V0SW50MzIob3V0TGVuZ3RoLCB1W2ldKTtcblx0XHRcdFx0b3V0TGVuZ3RoICs9IDQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBhcnJheUJ1ZmZlci5zbGljZSgwLCBsZW5ndGggLyA4KTtcblx0fVxufTtcblxuLyoqIEBmaWxlT3ZlcnZpZXcgSE1BQyBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAYXV0aG9yIEVtaWx5IFN0YXJrXG4gKiBAYXV0aG9yIE1pa2UgSGFtYnVyZ1xuICogQGF1dGhvciBEYW4gQm9uZWhcbiAqL1xuXG4vKiogSE1BQyB3aXRoIHRoZSBzcGVjaWZpZWQgaGFzaCBmdW5jdGlvbi5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtiaXRBcnJheX0ga2V5IHRoZSBrZXkgZm9yIEhNQUMuXG4gKiBAcGFyYW0ge09iamVjdH0gW0hhc2g9aGFzaC5zaGExXSBUaGUgaGFzaCBmdW5jdGlvbiB0byB1c2UuXG4gKi9cbm1pc2MuaG1hY1NoYTEgPSBjbGFzcyB7XG5cblx0Y29uc3RydWN0b3Ioa2V5KSB7XG5cdFx0Y29uc3QgaG1hYyA9IHRoaXM7XG5cdFx0Y29uc3QgSGFzaCA9IGhtYWMuX2hhc2ggPSBoYXNoLnNoYTE7XG5cdFx0Y29uc3QgZXhLZXkgPSBbW10sIFtdXTtcblx0XHRobWFjLl9iYXNlSGFzaCA9IFtuZXcgSGFzaCgpLCBuZXcgSGFzaCgpXTtcblx0XHRjb25zdCBicyA9IGhtYWMuX2Jhc2VIYXNoWzBdLmJsb2NrU2l6ZSAvIDMyO1xuXG5cdFx0aWYgKGtleS5sZW5ndGggPiBicykge1xuXHRcdFx0a2V5ID0gbmV3IEhhc2goKS51cGRhdGUoa2V5KS5maW5hbGl6ZSgpO1xuXHRcdH1cblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgYnM7IGkrKykge1xuXHRcdFx0ZXhLZXlbMF1baV0gPSBrZXlbaV0gXiAweDM2MzYzNjM2O1xuXHRcdFx0ZXhLZXlbMV1baV0gPSBrZXlbaV0gXiAweDVDNUM1QzVDO1xuXHRcdH1cblxuXHRcdGhtYWMuX2Jhc2VIYXNoWzBdLnVwZGF0ZShleEtleVswXSk7XG5cdFx0aG1hYy5fYmFzZUhhc2hbMV0udXBkYXRlKGV4S2V5WzFdKTtcblx0XHRobWFjLl9yZXN1bHRIYXNoID0gbmV3IEhhc2goaG1hYy5fYmFzZUhhc2hbMF0pO1xuXHR9XG5cdHJlc2V0KCkge1xuXHRcdGNvbnN0IGhtYWMgPSB0aGlzO1xuXHRcdGhtYWMuX3Jlc3VsdEhhc2ggPSBuZXcgaG1hYy5faGFzaChobWFjLl9iYXNlSGFzaFswXSk7XG5cdFx0aG1hYy5fdXBkYXRlZCA9IGZhbHNlO1xuXHR9XG5cblx0dXBkYXRlKGRhdGEpIHtcblx0XHRjb25zdCBobWFjID0gdGhpcztcblx0XHRobWFjLl91cGRhdGVkID0gdHJ1ZTtcblx0XHRobWFjLl9yZXN1bHRIYXNoLnVwZGF0ZShkYXRhKTtcblx0fVxuXG5cdGRpZ2VzdCgpIHtcblx0XHRjb25zdCBobWFjID0gdGhpcztcblx0XHRjb25zdCB3ID0gaG1hYy5fcmVzdWx0SGFzaC5maW5hbGl6ZSgpO1xuXHRcdGNvbnN0IHJlc3VsdCA9IG5ldyAoaG1hYy5faGFzaCkoaG1hYy5fYmFzZUhhc2hbMV0pLnVwZGF0ZSh3KS5maW5hbGl6ZSgpO1xuXG5cdFx0aG1hYy5yZXNldCgpO1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdGVuY3J5cHQoZGF0YSkge1xuXHRcdGlmICghdGhpcy5fdXBkYXRlZCkge1xuXHRcdFx0dGhpcy51cGRhdGUoZGF0YSk7XG5cdFx0XHRyZXR1cm4gdGhpcy5kaWdlc3QoZGF0YSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImVuY3J5cHQgb24gYWxyZWFkeSB1cGRhdGVkIGhtYWMgY2FsbGVkIVwiKTtcblx0XHR9XG5cdH1cbn07XG5cbmV4cG9ydCB7XG5cdGNpcGhlcixcblx0Y29kZWMsXG5cdG1pc2MsXG5cdG1vZGUsXG5cdHJhbmRvbVxufTsiLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbi8qIGdsb2JhbCBjcnlwdG8gKi9cblxuaW1wb3J0IHtcblx0cmFuZG9tXG59IGZyb20gXCIuL2NvZGVjcy9zamNsLmpzXCI7XG5cbmNvbnN0IEdFVF9SQU5ET01fVkFMVUVTX1NVUFBPUlRFRCA9IHR5cGVvZiBjcnlwdG8gIT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PSBcImZ1bmN0aW9uXCI7XG5cbmNvbnN0IEVSUl9JTlZBTElEX1BBU1NXT1JEID0gXCJJbnZhbGlkIHBhc3N3b3JkXCI7XG5jb25zdCBFUlJfSU5WQUxJRF9TSUdOQVRVUkUgPSBcIkludmFsaWQgc2lnbmF0dXJlXCI7XG5jb25zdCBFUlJfQUJPUlRfQ0hFQ0tfUEFTU1dPUkQgPSBcInppcGpzLWFib3J0LWNoZWNrLXBhc3N3b3JkXCI7XG5cbmV4cG9ydCB7XG5cdGdldFJhbmRvbVZhbHVlcyxcblx0RVJSX0lOVkFMSURfUEFTU1dPUkQsXG5cdEVSUl9JTlZBTElEX1NJR05BVFVSRSxcblx0RVJSX0FCT1JUX0NIRUNLX1BBU1NXT1JEXG59O1xuXG5mdW5jdGlvbiBnZXRSYW5kb21WYWx1ZXMoYXJyYXkpIHtcblx0aWYgKEdFVF9SQU5ET01fVkFMVUVTX1NVUFBPUlRFRCkge1xuXHRcdHJldHVybiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gcmFuZG9tLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7XG5cdH1cbn0iLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbi8qIGdsb2JhbCBjcnlwdG8sIFRyYW5zZm9ybVN0cmVhbSAqL1xuLy8gZGVuby1saW50LWlnbm9yZS1maWxlIG5vLXRoaXMtYWxpYXNcblxuaW1wb3J0IHsgZW5jb2RlVGV4dCB9IGZyb20gXCIuLy4uL3V0aWwvZW5jb2RlLXRleHQuanNcIjtcbmltcG9ydCB7XG5cdGNpcGhlcixcblx0Y29kZWMsXG5cdG1pc2MsXG5cdG1vZGVcbn0gZnJvbSBcIi4vY29kZWNzL3NqY2wuanNcIjtcbmltcG9ydCB7XG5cdEVSUl9JTlZBTElEX1BBU1NXT1JELFxuXHRFUlJfSU5WQUxJRF9TSUdOQVRVUkUsXG5cdEVSUl9BQk9SVF9DSEVDS19QQVNTV09SRCxcblx0Z2V0UmFuZG9tVmFsdWVzXG59IGZyb20gXCIuL2NvbW1vbi1jcnlwdG8uanNcIjtcblxuY29uc3QgQkxPQ0tfTEVOR1RIID0gMTY7XG5jb25zdCBSQVdfRk9STUFUID0gXCJyYXdcIjtcbmNvbnN0IFBCS0RGMl9BTEdPUklUSE0gPSB7IG5hbWU6IFwiUEJLREYyXCIgfTtcbmNvbnN0IEhBU0hfQUxHT1JJVEhNID0geyBuYW1lOiBcIkhNQUNcIiB9O1xuY29uc3QgSEFTSF9GVU5DVElPTiA9IFwiU0hBLTFcIjtcbmNvbnN0IEJBU0VfS0VZX0FMR09SSVRITSA9IE9iamVjdC5hc3NpZ24oeyBoYXNoOiBIQVNIX0FMR09SSVRITSB9LCBQQktERjJfQUxHT1JJVEhNKTtcbmNvbnN0IERFUklWRURfQklUU19BTEdPUklUSE0gPSBPYmplY3QuYXNzaWduKHsgaXRlcmF0aW9uczogMTAwMCwgaGFzaDogeyBuYW1lOiBIQVNIX0ZVTkNUSU9OIH0gfSwgUEJLREYyX0FMR09SSVRITSk7XG5jb25zdCBERVJJVkVEX0JJVFNfVVNBR0UgPSBbXCJkZXJpdmVCaXRzXCJdO1xuY29uc3QgU0FMVF9MRU5HVEggPSBbOCwgMTIsIDE2XTtcbmNvbnN0IEtFWV9MRU5HVEggPSBbMTYsIDI0LCAzMl07XG5jb25zdCBTSUdOQVRVUkVfTEVOR1RIID0gMTA7XG5jb25zdCBDT1VOVEVSX0RFRkFVTFRfVkFMVUUgPSBbMCwgMCwgMCwgMF07XG5jb25zdCBVTkRFRklORURfVFlQRSA9IFwidW5kZWZpbmVkXCI7XG5jb25zdCBGVU5DVElPTl9UWVBFID0gXCJmdW5jdGlvblwiO1xuLy8gZGVuby1saW50LWlnbm9yZSB2YWxpZC10eXBlb2ZcbmNvbnN0IENSWVBUT19BUElfU1VQUE9SVEVEID0gdHlwZW9mIGNyeXB0byAhPSBVTkRFRklORURfVFlQRTtcbmNvbnN0IHN1YnRsZSA9IENSWVBUT19BUElfU1VQUE9SVEVEICYmIGNyeXB0by5zdWJ0bGU7XG5jb25zdCBTVUJUTEVfQVBJX1NVUFBPUlRFRCA9IENSWVBUT19BUElfU1VQUE9SVEVEICYmIHR5cGVvZiBzdWJ0bGUgIT0gVU5ERUZJTkVEX1RZUEU7XG5jb25zdCBjb2RlY0J5dGVzID0gY29kZWMuYnl0ZXM7XG5jb25zdCBBZXMgPSBjaXBoZXIuYWVzO1xuY29uc3QgQ3RyR2xhZG1hbiA9IG1vZGUuY3RyR2xhZG1hbjtcbmNvbnN0IEhtYWNTaGExID0gbWlzYy5obWFjU2hhMTtcblxubGV0IElNUE9SVF9LRVlfU1VQUE9SVEVEID0gQ1JZUFRPX0FQSV9TVVBQT1JURUQgJiYgU1VCVExFX0FQSV9TVVBQT1JURUQgJiYgdHlwZW9mIHN1YnRsZS5pbXBvcnRLZXkgPT0gRlVOQ1RJT05fVFlQRTtcbmxldCBERVJJVkVfQklUU19TVVBQT1JURUQgPSBDUllQVE9fQVBJX1NVUFBPUlRFRCAmJiBTVUJUTEVfQVBJX1NVUFBPUlRFRCAmJiB0eXBlb2Ygc3VidGxlLmRlcml2ZUJpdHMgPT0gRlVOQ1RJT05fVFlQRTtcblxuY2xhc3MgQUVTRGVjcnlwdGlvblN0cmVhbSBleHRlbmRzIFRyYW5zZm9ybVN0cmVhbSB7XG5cblx0Y29uc3RydWN0b3IoeyBwYXNzd29yZCwgc2lnbmVkLCBlbmNyeXB0aW9uU3RyZW5ndGgsIGNoZWNrUGFzc3dvcmRPbmx5IH0pIHtcblx0XHRzdXBlcih7XG5cdFx0XHRzdGFydCgpIHtcblx0XHRcdFx0T2JqZWN0LmFzc2lnbih0aGlzLCB7XG5cdFx0XHRcdFx0cmVhZHk6IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gdGhpcy5yZXNvbHZlUmVhZHkgPSByZXNvbHZlKSxcblx0XHRcdFx0XHRwYXNzd29yZCxcblx0XHRcdFx0XHRzaWduZWQsXG5cdFx0XHRcdFx0c3RyZW5ndGg6IGVuY3J5cHRpb25TdHJlbmd0aCAtIDEsXG5cdFx0XHRcdFx0cGVuZGluZzogbmV3IFVpbnQ4QXJyYXkoKVxuXHRcdFx0XHR9KTtcblx0XHRcdH0sXG5cdFx0XHRhc3luYyB0cmFuc2Zvcm0oY2h1bmssIGNvbnRyb2xsZXIpIHtcblx0XHRcdFx0Y29uc3QgYWVzQ3J5cHRvID0gdGhpcztcblx0XHRcdFx0Y29uc3Qge1xuXHRcdFx0XHRcdHBhc3N3b3JkLFxuXHRcdFx0XHRcdHN0cmVuZ3RoLFxuXHRcdFx0XHRcdHJlc29sdmVSZWFkeSxcblx0XHRcdFx0XHRyZWFkeVxuXHRcdFx0XHR9ID0gYWVzQ3J5cHRvO1xuXHRcdFx0XHRpZiAocGFzc3dvcmQpIHtcblx0XHRcdFx0XHRhd2FpdCBjcmVhdGVEZWNyeXB0aW9uS2V5cyhhZXNDcnlwdG8sIHN0cmVuZ3RoLCBwYXNzd29yZCwgc3ViYXJyYXkoY2h1bmssIDAsIFNBTFRfTEVOR1RIW3N0cmVuZ3RoXSArIDIpKTtcblx0XHRcdFx0XHRjaHVuayA9IHN1YmFycmF5KGNodW5rLCBTQUxUX0xFTkdUSFtzdHJlbmd0aF0gKyAyKTtcblx0XHRcdFx0XHRpZiAoY2hlY2tQYXNzd29yZE9ubHkpIHtcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXIuZXJyb3IobmV3IEVycm9yKEVSUl9BQk9SVF9DSEVDS19QQVNTV09SRCkpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXNvbHZlUmVhZHkoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YXdhaXQgcmVhZHk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3Qgb3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkoY2h1bmsubGVuZ3RoIC0gU0lHTkFUVVJFX0xFTkdUSCAtICgoY2h1bmsubGVuZ3RoIC0gU0lHTkFUVVJFX0xFTkdUSCkgJSBCTE9DS19MRU5HVEgpKTtcblx0XHRcdFx0Y29udHJvbGxlci5lbnF1ZXVlKGFwcGVuZChhZXNDcnlwdG8sIGNodW5rLCBvdXRwdXQsIDAsIFNJR05BVFVSRV9MRU5HVEgsIHRydWUpKTtcblx0XHRcdH0sXG5cdFx0XHRhc3luYyBmbHVzaChjb250cm9sbGVyKSB7XG5cdFx0XHRcdGNvbnN0IHtcblx0XHRcdFx0XHRzaWduZWQsXG5cdFx0XHRcdFx0Y3RyLFxuXHRcdFx0XHRcdGhtYWMsXG5cdFx0XHRcdFx0cGVuZGluZyxcblx0XHRcdFx0XHRyZWFkeVxuXHRcdFx0XHR9ID0gdGhpcztcblx0XHRcdFx0aWYgKGhtYWMgJiYgY3RyKSB7XG5cdFx0XHRcdFx0YXdhaXQgcmVhZHk7XG5cdFx0XHRcdFx0Y29uc3QgY2h1bmtUb0RlY3J5cHQgPSBzdWJhcnJheShwZW5kaW5nLCAwLCBwZW5kaW5nLmxlbmd0aCAtIFNJR05BVFVSRV9MRU5HVEgpO1xuXHRcdFx0XHRcdGNvbnN0IG9yaWdpbmFsU2lnbmF0dXJlID0gc3ViYXJyYXkocGVuZGluZywgcGVuZGluZy5sZW5ndGggLSBTSUdOQVRVUkVfTEVOR1RIKTtcblx0XHRcdFx0XHRsZXQgZGVjcnlwdGVkQ2h1bmtBcnJheSA9IG5ldyBVaW50OEFycmF5KCk7XG5cdFx0XHRcdFx0aWYgKGNodW5rVG9EZWNyeXB0Lmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0Y29uc3QgZW5jcnlwdGVkQ2h1bmsgPSB0b0JpdHMoY29kZWNCeXRlcywgY2h1bmtUb0RlY3J5cHQpO1xuXHRcdFx0XHRcdFx0aG1hYy51cGRhdGUoZW5jcnlwdGVkQ2h1bmspO1xuXHRcdFx0XHRcdFx0Y29uc3QgZGVjcnlwdGVkQ2h1bmsgPSBjdHIudXBkYXRlKGVuY3J5cHRlZENodW5rKTtcblx0XHRcdFx0XHRcdGRlY3J5cHRlZENodW5rQXJyYXkgPSBmcm9tQml0cyhjb2RlY0J5dGVzLCBkZWNyeXB0ZWRDaHVuayk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChzaWduZWQpIHtcblx0XHRcdFx0XHRcdGNvbnN0IHNpZ25hdHVyZSA9IHN1YmFycmF5KGZyb21CaXRzKGNvZGVjQnl0ZXMsIGhtYWMuZGlnZXN0KCkpLCAwLCBTSUdOQVRVUkVfTEVOR1RIKTtcblx0XHRcdFx0XHRcdGZvciAobGV0IGluZGV4U2lnbmF0dXJlID0gMDsgaW5kZXhTaWduYXR1cmUgPCBTSUdOQVRVUkVfTEVOR1RIOyBpbmRleFNpZ25hdHVyZSsrKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChzaWduYXR1cmVbaW5kZXhTaWduYXR1cmVdICE9IG9yaWdpbmFsU2lnbmF0dXJlW2luZGV4U2lnbmF0dXJlXSkge1xuXHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfSU5WQUxJRF9TSUdOQVRVUkUpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvbnRyb2xsZXIuZW5xdWV1ZShkZWNyeXB0ZWRDaHVua0FycmF5KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59XG5cbmNsYXNzIEFFU0VuY3J5cHRpb25TdHJlYW0gZXh0ZW5kcyBUcmFuc2Zvcm1TdHJlYW0ge1xuXG5cdGNvbnN0cnVjdG9yKHsgcGFzc3dvcmQsIGVuY3J5cHRpb25TdHJlbmd0aCB9KSB7XG5cdFx0Ly8gZGVuby1saW50LWlnbm9yZSBwcmVmZXItY29uc3Rcblx0XHRsZXQgc3RyZWFtO1xuXHRcdHN1cGVyKHtcblx0XHRcdHN0YXJ0KCkge1xuXHRcdFx0XHRPYmplY3QuYXNzaWduKHRoaXMsIHtcblx0XHRcdFx0XHRyZWFkeTogbmV3IFByb21pc2UocmVzb2x2ZSA9PiB0aGlzLnJlc29sdmVSZWFkeSA9IHJlc29sdmUpLFxuXHRcdFx0XHRcdHBhc3N3b3JkLFxuXHRcdFx0XHRcdHN0cmVuZ3RoOiBlbmNyeXB0aW9uU3RyZW5ndGggLSAxLFxuXHRcdFx0XHRcdHBlbmRpbmc6IG5ldyBVaW50OEFycmF5KClcblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXHRcdFx0YXN5bmMgdHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG5cdFx0XHRcdGNvbnN0IGFlc0NyeXB0byA9IHRoaXM7XG5cdFx0XHRcdGNvbnN0IHtcblx0XHRcdFx0XHRwYXNzd29yZCxcblx0XHRcdFx0XHRzdHJlbmd0aCxcblx0XHRcdFx0XHRyZXNvbHZlUmVhZHksXG5cdFx0XHRcdFx0cmVhZHlcblx0XHRcdFx0fSA9IGFlc0NyeXB0bztcblx0XHRcdFx0bGV0IHByZWFtYmxlID0gbmV3IFVpbnQ4QXJyYXkoKTtcblx0XHRcdFx0aWYgKHBhc3N3b3JkKSB7XG5cdFx0XHRcdFx0cHJlYW1ibGUgPSBhd2FpdCBjcmVhdGVFbmNyeXB0aW9uS2V5cyhhZXNDcnlwdG8sIHN0cmVuZ3RoLCBwYXNzd29yZCk7XG5cdFx0XHRcdFx0cmVzb2x2ZVJlYWR5KCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YXdhaXQgcmVhZHk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3Qgb3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkocHJlYW1ibGUubGVuZ3RoICsgY2h1bmsubGVuZ3RoIC0gKGNodW5rLmxlbmd0aCAlIEJMT0NLX0xFTkdUSCkpO1xuXHRcdFx0XHRvdXRwdXQuc2V0KHByZWFtYmxlLCAwKTtcblx0XHRcdFx0Y29udHJvbGxlci5lbnF1ZXVlKGFwcGVuZChhZXNDcnlwdG8sIGNodW5rLCBvdXRwdXQsIHByZWFtYmxlLmxlbmd0aCwgMCkpO1xuXHRcdFx0fSxcblx0XHRcdGFzeW5jIGZsdXNoKGNvbnRyb2xsZXIpIHtcblx0XHRcdFx0Y29uc3Qge1xuXHRcdFx0XHRcdGN0cixcblx0XHRcdFx0XHRobWFjLFxuXHRcdFx0XHRcdHBlbmRpbmcsXG5cdFx0XHRcdFx0cmVhZHlcblx0XHRcdFx0fSA9IHRoaXM7XG5cdFx0XHRcdGlmIChobWFjICYmIGN0cikge1xuXHRcdFx0XHRcdGF3YWl0IHJlYWR5O1xuXHRcdFx0XHRcdGxldCBlbmNyeXB0ZWRDaHVua0FycmF5ID0gbmV3IFVpbnQ4QXJyYXkoKTtcblx0XHRcdFx0XHRpZiAocGVuZGluZy5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdGNvbnN0IGVuY3J5cHRlZENodW5rID0gY3RyLnVwZGF0ZSh0b0JpdHMoY29kZWNCeXRlcywgcGVuZGluZykpO1xuXHRcdFx0XHRcdFx0aG1hYy51cGRhdGUoZW5jcnlwdGVkQ2h1bmspO1xuXHRcdFx0XHRcdFx0ZW5jcnlwdGVkQ2h1bmtBcnJheSA9IGZyb21CaXRzKGNvZGVjQnl0ZXMsIGVuY3J5cHRlZENodW5rKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c3RyZWFtLnNpZ25hdHVyZSA9IGZyb21CaXRzKGNvZGVjQnl0ZXMsIGhtYWMuZGlnZXN0KCkpLnNsaWNlKDAsIFNJR05BVFVSRV9MRU5HVEgpO1xuXHRcdFx0XHRcdGNvbnRyb2xsZXIuZW5xdWV1ZShjb25jYXQoZW5jcnlwdGVkQ2h1bmtBcnJheSwgc3RyZWFtLnNpZ25hdHVyZSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0c3RyZWFtID0gdGhpcztcblx0fVxufVxuXG5leHBvcnQge1xuXHRBRVNEZWNyeXB0aW9uU3RyZWFtLFxuXHRBRVNFbmNyeXB0aW9uU3RyZWFtLFxuXHRFUlJfSU5WQUxJRF9QQVNTV09SRFxufTtcblxuZnVuY3Rpb24gYXBwZW5kKGFlc0NyeXB0bywgaW5wdXQsIG91dHB1dCwgcGFkZGluZ1N0YXJ0LCBwYWRkaW5nRW5kLCB2ZXJpZnlTaWduYXR1cmUpIHtcblx0Y29uc3Qge1xuXHRcdGN0cixcblx0XHRobWFjLFxuXHRcdHBlbmRpbmdcblx0fSA9IGFlc0NyeXB0bztcblx0Y29uc3QgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGggLSBwYWRkaW5nRW5kO1xuXHRpZiAocGVuZGluZy5sZW5ndGgpIHtcblx0XHRpbnB1dCA9IGNvbmNhdChwZW5kaW5nLCBpbnB1dCk7XG5cdFx0b3V0cHV0ID0gZXhwYW5kKG91dHB1dCwgaW5wdXRMZW5ndGggLSAoaW5wdXRMZW5ndGggJSBCTE9DS19MRU5HVEgpKTtcblx0fVxuXHRsZXQgb2Zmc2V0O1xuXHRmb3IgKG9mZnNldCA9IDA7IG9mZnNldCA8PSBpbnB1dExlbmd0aCAtIEJMT0NLX0xFTkdUSDsgb2Zmc2V0ICs9IEJMT0NLX0xFTkdUSCkge1xuXHRcdGNvbnN0IGlucHV0Q2h1bmsgPSB0b0JpdHMoY29kZWNCeXRlcywgc3ViYXJyYXkoaW5wdXQsIG9mZnNldCwgb2Zmc2V0ICsgQkxPQ0tfTEVOR1RIKSk7XG5cdFx0aWYgKHZlcmlmeVNpZ25hdHVyZSkge1xuXHRcdFx0aG1hYy51cGRhdGUoaW5wdXRDaHVuayk7XG5cdFx0fVxuXHRcdGNvbnN0IG91dHB1dENodW5rID0gY3RyLnVwZGF0ZShpbnB1dENodW5rKTtcblx0XHRpZiAoIXZlcmlmeVNpZ25hdHVyZSkge1xuXHRcdFx0aG1hYy51cGRhdGUob3V0cHV0Q2h1bmspO1xuXHRcdH1cblx0XHRvdXRwdXQuc2V0KGZyb21CaXRzKGNvZGVjQnl0ZXMsIG91dHB1dENodW5rKSwgb2Zmc2V0ICsgcGFkZGluZ1N0YXJ0KTtcblx0fVxuXHRhZXNDcnlwdG8ucGVuZGluZyA9IHN1YmFycmF5KGlucHV0LCBvZmZzZXQpO1xuXHRyZXR1cm4gb3V0cHV0O1xufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVEZWNyeXB0aW9uS2V5cyhkZWNyeXB0LCBzdHJlbmd0aCwgcGFzc3dvcmQsIHByZWFtYmxlKSB7XG5cdGNvbnN0IHBhc3N3b3JkVmVyaWZpY2F0aW9uS2V5ID0gYXdhaXQgY3JlYXRlS2V5cyhkZWNyeXB0LCBzdHJlbmd0aCwgcGFzc3dvcmQsIHN1YmFycmF5KHByZWFtYmxlLCAwLCBTQUxUX0xFTkdUSFtzdHJlbmd0aF0pKTtcblx0Y29uc3QgcGFzc3dvcmRWZXJpZmljYXRpb24gPSBzdWJhcnJheShwcmVhbWJsZSwgU0FMVF9MRU5HVEhbc3RyZW5ndGhdKTtcblx0aWYgKHBhc3N3b3JkVmVyaWZpY2F0aW9uS2V5WzBdICE9IHBhc3N3b3JkVmVyaWZpY2F0aW9uWzBdIHx8IHBhc3N3b3JkVmVyaWZpY2F0aW9uS2V5WzFdICE9IHBhc3N3b3JkVmVyaWZpY2F0aW9uWzFdKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9JTlZBTElEX1BBU1NXT1JEKTtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVFbmNyeXB0aW9uS2V5cyhlbmNyeXB0LCBzdHJlbmd0aCwgcGFzc3dvcmQpIHtcblx0Y29uc3Qgc2FsdCA9IGdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShTQUxUX0xFTkdUSFtzdHJlbmd0aF0pKTtcblx0Y29uc3QgcGFzc3dvcmRWZXJpZmljYXRpb24gPSBhd2FpdCBjcmVhdGVLZXlzKGVuY3J5cHQsIHN0cmVuZ3RoLCBwYXNzd29yZCwgc2FsdCk7XG5cdHJldHVybiBjb25jYXQoc2FsdCwgcGFzc3dvcmRWZXJpZmljYXRpb24pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVLZXlzKGFlc0NyeXB0bywgc3RyZW5ndGgsIHBhc3N3b3JkLCBzYWx0KSB7XG5cdGFlc0NyeXB0by5wYXNzd29yZCA9IG51bGw7XG5cdGNvbnN0IGVuY29kZWRQYXNzd29yZCA9IGVuY29kZVRleHQocGFzc3dvcmQpO1xuXHRjb25zdCBiYXNlS2V5ID0gYXdhaXQgaW1wb3J0S2V5KFJBV19GT1JNQVQsIGVuY29kZWRQYXNzd29yZCwgQkFTRV9LRVlfQUxHT1JJVEhNLCBmYWxzZSwgREVSSVZFRF9CSVRTX1VTQUdFKTtcblx0Y29uc3QgZGVyaXZlZEJpdHMgPSBhd2FpdCBkZXJpdmVCaXRzKE9iamVjdC5hc3NpZ24oeyBzYWx0IH0sIERFUklWRURfQklUU19BTEdPUklUSE0pLCBiYXNlS2V5LCA4ICogKChLRVlfTEVOR1RIW3N0cmVuZ3RoXSAqIDIpICsgMikpO1xuXHRjb25zdCBjb21wb3NpdGVLZXkgPSBuZXcgVWludDhBcnJheShkZXJpdmVkQml0cyk7XG5cdGNvbnN0IGtleSA9IHRvQml0cyhjb2RlY0J5dGVzLCBzdWJhcnJheShjb21wb3NpdGVLZXksIDAsIEtFWV9MRU5HVEhbc3RyZW5ndGhdKSk7XG5cdGNvbnN0IGF1dGhlbnRpY2F0aW9uID0gdG9CaXRzKGNvZGVjQnl0ZXMsIHN1YmFycmF5KGNvbXBvc2l0ZUtleSwgS0VZX0xFTkdUSFtzdHJlbmd0aF0sIEtFWV9MRU5HVEhbc3RyZW5ndGhdICogMikpO1xuXHRjb25zdCBwYXNzd29yZFZlcmlmaWNhdGlvbiA9IHN1YmFycmF5KGNvbXBvc2l0ZUtleSwgS0VZX0xFTkdUSFtzdHJlbmd0aF0gKiAyKTtcblx0T2JqZWN0LmFzc2lnbihhZXNDcnlwdG8sIHtcblx0XHRrZXlzOiB7XG5cdFx0XHRrZXksXG5cdFx0XHRhdXRoZW50aWNhdGlvbixcblx0XHRcdHBhc3N3b3JkVmVyaWZpY2F0aW9uXG5cdFx0fSxcblx0XHRjdHI6IG5ldyBDdHJHbGFkbWFuKG5ldyBBZXMoa2V5KSwgQXJyYXkuZnJvbShDT1VOVEVSX0RFRkFVTFRfVkFMVUUpKSxcblx0XHRobWFjOiBuZXcgSG1hY1NoYTEoYXV0aGVudGljYXRpb24pXG5cdH0pO1xuXHRyZXR1cm4gcGFzc3dvcmRWZXJpZmljYXRpb247XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGltcG9ydEtleShmb3JtYXQsIHBhc3N3b3JkLCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcblx0aWYgKElNUE9SVF9LRVlfU1VQUE9SVEVEKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBhd2FpdCBzdWJ0bGUuaW1wb3J0S2V5KGZvcm1hdCwgcGFzc3dvcmQsIGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcyk7XG5cdFx0fSBjYXRjaCAoX2Vycm9yKSB7XG5cdFx0XHRJTVBPUlRfS0VZX1NVUFBPUlRFRCA9IGZhbHNlO1xuXHRcdFx0cmV0dXJuIG1pc2MuaW1wb3J0S2V5KHBhc3N3b3JkKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG1pc2MuaW1wb3J0S2V5KHBhc3N3b3JkKTtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBkZXJpdmVCaXRzKGFsZ29yaXRobSwgYmFzZUtleSwgbGVuZ3RoKSB7XG5cdGlmIChERVJJVkVfQklUU19TVVBQT1JURUQpIHtcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIGF3YWl0IHN1YnRsZS5kZXJpdmVCaXRzKGFsZ29yaXRobSwgYmFzZUtleSwgbGVuZ3RoKTtcblx0XHR9IGNhdGNoIChfZXJyb3IpIHtcblx0XHRcdERFUklWRV9CSVRTX1NVUFBPUlRFRCA9IGZhbHNlO1xuXHRcdFx0cmV0dXJuIG1pc2MucGJrZGYyKGJhc2VLZXksIGFsZ29yaXRobS5zYWx0LCBERVJJVkVEX0JJVFNfQUxHT1JJVEhNLml0ZXJhdGlvbnMsIGxlbmd0aCk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBtaXNjLnBia2RmMihiYXNlS2V5LCBhbGdvcml0aG0uc2FsdCwgREVSSVZFRF9CSVRTX0FMR09SSVRITS5pdGVyYXRpb25zLCBsZW5ndGgpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNvbmNhdChsZWZ0QXJyYXksIHJpZ2h0QXJyYXkpIHtcblx0bGV0IGFycmF5ID0gbGVmdEFycmF5O1xuXHRpZiAobGVmdEFycmF5Lmxlbmd0aCArIHJpZ2h0QXJyYXkubGVuZ3RoKSB7XG5cdFx0YXJyYXkgPSBuZXcgVWludDhBcnJheShsZWZ0QXJyYXkubGVuZ3RoICsgcmlnaHRBcnJheS5sZW5ndGgpO1xuXHRcdGFycmF5LnNldChsZWZ0QXJyYXksIDApO1xuXHRcdGFycmF5LnNldChyaWdodEFycmF5LCBsZWZ0QXJyYXkubGVuZ3RoKTtcblx0fVxuXHRyZXR1cm4gYXJyYXk7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZChpbnB1dEFycmF5LCBsZW5ndGgpIHtcblx0aWYgKGxlbmd0aCAmJiBsZW5ndGggPiBpbnB1dEFycmF5Lmxlbmd0aCkge1xuXHRcdGNvbnN0IGFycmF5ID0gaW5wdXRBcnJheTtcblx0XHRpbnB1dEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcblx0XHRpbnB1dEFycmF5LnNldChhcnJheSwgMCk7XG5cdH1cblx0cmV0dXJuIGlucHV0QXJyYXk7XG59XG5cbmZ1bmN0aW9uIHN1YmFycmF5KGFycmF5LCBiZWdpbiwgZW5kKSB7XG5cdHJldHVybiBhcnJheS5zdWJhcnJheShiZWdpbiwgZW5kKTtcbn1cblxuZnVuY3Rpb24gZnJvbUJpdHMoY29kZWNCeXRlcywgY2h1bmspIHtcblx0cmV0dXJuIGNvZGVjQnl0ZXMuZnJvbUJpdHMoY2h1bmspO1xufVxuZnVuY3Rpb24gdG9CaXRzKGNvZGVjQnl0ZXMsIGNodW5rKSB7XG5cdHJldHVybiBjb2RlY0J5dGVzLnRvQml0cyhjaHVuayk7XG59IiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4vKiBnbG9iYWwgVGV4dEVuY29kZXIgKi9cblxuZXhwb3J0IHtcblx0ZW5jb2RlVGV4dFxufTtcblxuZnVuY3Rpb24gZW5jb2RlVGV4dCh2YWx1ZSkge1xuXHRpZiAodHlwZW9mIFRleHRFbmNvZGVyID09IFwidW5kZWZpbmVkXCIpIHtcblx0XHR2YWx1ZSA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXHRcdGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KHZhbHVlLmxlbmd0aCk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcblx0XHRcdHJlc3VsdFtpXSA9IHZhbHVlLmNoYXJDb2RlQXQoaSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh2YWx1ZSk7XG5cdH1cbn0iLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbi8qIGdsb2JhbCBUcmFuc2Zvcm1TdHJlYW0gKi9cbi8vIGRlbm8tbGludC1pZ25vcmUtZmlsZSBuby10aGlzLWFsaWFzXG5cbmltcG9ydCB7IENyYzMyIH0gZnJvbSBcIi4vY29kZWNzL2NyYzMyLmpzXCI7XG5pbXBvcnQge1xuXHRFUlJfSU5WQUxJRF9QQVNTV09SRCxcblx0RVJSX0FCT1JUX0NIRUNLX1BBU1NXT1JELFxuXHRnZXRSYW5kb21WYWx1ZXNcbn0gZnJvbSBcIi4vY29tbW9uLWNyeXB0by5qc1wiO1xuXG5jb25zdCBIRUFERVJfTEVOR1RIID0gMTI7XG5cbmNsYXNzIFppcENyeXB0b0RlY3J5cHRpb25TdHJlYW0gZXh0ZW5kcyBUcmFuc2Zvcm1TdHJlYW0ge1xuXG5cdGNvbnN0cnVjdG9yKHsgcGFzc3dvcmQsIHBhc3N3b3JkVmVyaWZpY2F0aW9uLCBjaGVja1Bhc3N3b3JkT25seSB9KSB7XG5cdFx0c3VwZXIoe1xuXHRcdFx0c3RhcnQoKSB7XG5cdFx0XHRcdE9iamVjdC5hc3NpZ24odGhpcywge1xuXHRcdFx0XHRcdHBhc3N3b3JkLFxuXHRcdFx0XHRcdHBhc3N3b3JkVmVyaWZpY2F0aW9uXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRjcmVhdGVLZXlzKHRoaXMsIHBhc3N3b3JkKTtcblx0XHRcdH0sXG5cdFx0XHR0cmFuc2Zvcm0oY2h1bmssIGNvbnRyb2xsZXIpIHtcblx0XHRcdFx0Y29uc3QgemlwQ3J5cHRvID0gdGhpcztcblx0XHRcdFx0aWYgKHppcENyeXB0by5wYXNzd29yZCkge1xuXHRcdFx0XHRcdGNvbnN0IGRlY3J5cHRlZEhlYWRlciA9IGRlY3J5cHQoemlwQ3J5cHRvLCBjaHVuay5zdWJhcnJheSgwLCBIRUFERVJfTEVOR1RIKSk7XG5cdFx0XHRcdFx0emlwQ3J5cHRvLnBhc3N3b3JkID0gbnVsbDtcblx0XHRcdFx0XHRpZiAoZGVjcnlwdGVkSGVhZGVyW0hFQURFUl9MRU5HVEggLSAxXSAhPSB6aXBDcnlwdG8ucGFzc3dvcmRWZXJpZmljYXRpb24pIHtcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfSU5WQUxJRF9QQVNTV09SRCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNodW5rID0gY2h1bmsuc3ViYXJyYXkoSEVBREVSX0xFTkdUSCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGNoZWNrUGFzc3dvcmRPbmx5KSB7XG5cdFx0XHRcdFx0Y29udHJvbGxlci5lcnJvcihuZXcgRXJyb3IoRVJSX0FCT1JUX0NIRUNLX1BBU1NXT1JEKSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udHJvbGxlci5lbnF1ZXVlKGRlY3J5cHQoemlwQ3J5cHRvLCBjaHVuaykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cblxuY2xhc3MgWmlwQ3J5cHRvRW5jcnlwdGlvblN0cmVhbSBleHRlbmRzIFRyYW5zZm9ybVN0cmVhbSB7XG5cblx0Y29uc3RydWN0b3IoeyBwYXNzd29yZCwgcGFzc3dvcmRWZXJpZmljYXRpb24gfSkge1xuXHRcdHN1cGVyKHtcblx0XHRcdHN0YXJ0KCkge1xuXHRcdFx0XHRPYmplY3QuYXNzaWduKHRoaXMsIHtcblx0XHRcdFx0XHRwYXNzd29yZCxcblx0XHRcdFx0XHRwYXNzd29yZFZlcmlmaWNhdGlvblxuXHRcdFx0XHR9KTtcblx0XHRcdFx0Y3JlYXRlS2V5cyh0aGlzLCBwYXNzd29yZCk7XG5cdFx0XHR9LFxuXHRcdFx0dHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG5cdFx0XHRcdGNvbnN0IHppcENyeXB0byA9IHRoaXM7XG5cdFx0XHRcdGxldCBvdXRwdXQ7XG5cdFx0XHRcdGxldCBvZmZzZXQ7XG5cdFx0XHRcdGlmICh6aXBDcnlwdG8ucGFzc3dvcmQpIHtcblx0XHRcdFx0XHR6aXBDcnlwdG8ucGFzc3dvcmQgPSBudWxsO1xuXHRcdFx0XHRcdGNvbnN0IGhlYWRlciA9IGdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShIRUFERVJfTEVOR1RIKSk7XG5cdFx0XHRcdFx0aGVhZGVyW0hFQURFUl9MRU5HVEggLSAxXSA9IHppcENyeXB0by5wYXNzd29yZFZlcmlmaWNhdGlvbjtcblx0XHRcdFx0XHRvdXRwdXQgPSBuZXcgVWludDhBcnJheShjaHVuay5sZW5ndGggKyBoZWFkZXIubGVuZ3RoKTtcblx0XHRcdFx0XHRvdXRwdXQuc2V0KGVuY3J5cHQoemlwQ3J5cHRvLCBoZWFkZXIpLCAwKTtcblx0XHRcdFx0XHRvZmZzZXQgPSBIRUFERVJfTEVOR1RIO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG91dHB1dCA9IG5ldyBVaW50OEFycmF5KGNodW5rLmxlbmd0aCk7XG5cdFx0XHRcdFx0b2Zmc2V0ID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRvdXRwdXQuc2V0KGVuY3J5cHQoemlwQ3J5cHRvLCBjaHVuayksIG9mZnNldCk7XG5cdFx0XHRcdGNvbnRyb2xsZXIuZW5xdWV1ZShvdXRwdXQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59XG5cbmV4cG9ydCB7XG5cdFppcENyeXB0b0RlY3J5cHRpb25TdHJlYW0sXG5cdFppcENyeXB0b0VuY3J5cHRpb25TdHJlYW0sXG5cdEVSUl9JTlZBTElEX1BBU1NXT1JEXG59O1xuXG5mdW5jdGlvbiBkZWNyeXB0KHRhcmdldCwgaW5wdXQpIHtcblx0Y29uc3Qgb3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkoaW5wdXQubGVuZ3RoKTtcblx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGlucHV0Lmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdG91dHB1dFtpbmRleF0gPSBnZXRCeXRlKHRhcmdldCkgXiBpbnB1dFtpbmRleF07XG5cdFx0dXBkYXRlS2V5cyh0YXJnZXQsIG91dHB1dFtpbmRleF0pO1xuXHR9XG5cdHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGVuY3J5cHQodGFyZ2V0LCBpbnB1dCkge1xuXHRjb25zdCBvdXRwdXQgPSBuZXcgVWludDhBcnJheShpbnB1dC5sZW5ndGgpO1xuXHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaW5wdXQubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0b3V0cHV0W2luZGV4XSA9IGdldEJ5dGUodGFyZ2V0KSBeIGlucHV0W2luZGV4XTtcblx0XHR1cGRhdGVLZXlzKHRhcmdldCwgaW5wdXRbaW5kZXhdKTtcblx0fVxuXHRyZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXlzKHRhcmdldCwgcGFzc3dvcmQpIHtcblx0Y29uc3Qga2V5cyA9IFsweDEyMzQ1Njc4LCAweDIzNDU2Nzg5LCAweDM0NTY3ODkwXTtcblx0T2JqZWN0LmFzc2lnbih0YXJnZXQsIHtcblx0XHRrZXlzLFxuXHRcdGNyY0tleTA6IG5ldyBDcmMzMihrZXlzWzBdKSxcblx0XHRjcmNLZXkyOiBuZXcgQ3JjMzIoa2V5c1syXSksXG5cdH0pO1xuXHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcGFzc3dvcmQubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0dXBkYXRlS2V5cyh0YXJnZXQsIHBhc3N3b3JkLmNoYXJDb2RlQXQoaW5kZXgpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVLZXlzKHRhcmdldCwgYnl0ZSkge1xuXHRsZXQgW2tleTAsIGtleTEsIGtleTJdID0gdGFyZ2V0LmtleXM7XG5cdHRhcmdldC5jcmNLZXkwLmFwcGVuZChbYnl0ZV0pO1xuXHRrZXkwID0gfnRhcmdldC5jcmNLZXkwLmdldCgpO1xuXHRrZXkxID0gZ2V0SW50MzIoTWF0aC5pbXVsKGdldEludDMyKGtleTEgKyBnZXRJbnQ4KGtleTApKSwgMTM0Nzc1ODEzKSArIDEpO1xuXHR0YXJnZXQuY3JjS2V5Mi5hcHBlbmQoW2tleTEgPj4+IDI0XSk7XG5cdGtleTIgPSB+dGFyZ2V0LmNyY0tleTIuZ2V0KCk7XG5cdHRhcmdldC5rZXlzID0gW2tleTAsIGtleTEsIGtleTJdO1xufVxuXG5mdW5jdGlvbiBnZXRCeXRlKHRhcmdldCkge1xuXHRjb25zdCB0ZW1wID0gdGFyZ2V0LmtleXNbMl0gfCAyO1xuXHRyZXR1cm4gZ2V0SW50OChNYXRoLmltdWwodGVtcCwgKHRlbXAgXiAxKSkgPj4+IDgpO1xufVxuXG5mdW5jdGlvbiBnZXRJbnQ4KG51bWJlcikge1xuXHRyZXR1cm4gbnVtYmVyICYgMHhGRjtcbn1cblxuZnVuY3Rpb24gZ2V0SW50MzIobnVtYmVyKSB7XG5cdHJldHVybiBudW1iZXIgJiAweEZGRkZGRkZGO1xufSIsIi8qXG4gQ29weXJpZ2h0IChjKSAyMDIyIEdpbGRhcyBMb3JtZWF1LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiBcbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuIDMuIFRoZSBuYW1lcyBvZiB0aGUgYXV0aG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEICcnQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXG4gSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKQ1JBRlQsXG4gSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsXG4gT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLyogZ2xvYmFsIFRyYW5zZm9ybVN0cmVhbSAqL1xuLy8gZGVuby1saW50LWlnbm9yZS1maWxlIG5vLXRoaXMtYWxpYXNcblxuaW1wb3J0IHsgQ3JjMzJTdHJlYW0gfSBmcm9tIFwiLi9jcmMzMi1zdHJlYW0uanNcIjtcbmltcG9ydCB7XG5cdEFFU0VuY3J5cHRpb25TdHJlYW0sXG5cdEFFU0RlY3J5cHRpb25TdHJlYW1cbn0gZnJvbSBcIi4vYWVzLWNyeXB0by1zdHJlYW0uanNcIjtcbmltcG9ydCB7XG5cdFppcENyeXB0b0VuY3J5cHRpb25TdHJlYW0sXG5cdFppcENyeXB0b0RlY3J5cHRpb25TdHJlYW1cbn0gZnJvbSBcIi4vemlwLWNyeXB0by1zdHJlYW0uanNcIjtcbmltcG9ydCB7XG5cdEVSUl9JTlZBTElEX1BBU1NXT1JELFxuXHRFUlJfSU5WQUxJRF9TSUdOQVRVUkUsXG5cdEVSUl9BQk9SVF9DSEVDS19QQVNTV09SRFxufSBmcm9tIFwiLi9jb21tb24tY3J5cHRvLmpzXCI7XG5cbmNvbnN0IENPTVBSRVNTSU9OX0ZPUk1BVCA9IFwiZGVmbGF0ZS1yYXdcIjtcblxuY2xhc3MgRGVmbGF0ZVN0cmVhbSBleHRlbmRzIFRyYW5zZm9ybVN0cmVhbSB7XG5cblx0Y29uc3RydWN0b3Iob3B0aW9ucywgeyBjaHVua1NpemUsIENvbXByZXNzaW9uU3RyZWFtLCBDb21wcmVzc2lvblN0cmVhbU5hdGl2ZSB9KSB7XG5cdFx0c3VwZXIoe30pO1xuXHRcdGNvbnN0IHsgY29tcHJlc3NlZCwgZW5jcnlwdGVkLCB1c2VDb21wcmVzc2lvblN0cmVhbSwgemlwQ3J5cHRvLCBzaWduZWQsIGxldmVsIH0gPSBvcHRpb25zO1xuXHRcdGNvbnN0IHN0cmVhbSA9IHRoaXM7XG5cdFx0bGV0IGNyYzMyU3RyZWFtLCBlbmNyeXB0aW9uU3RyZWFtO1xuXHRcdGxldCByZWFkYWJsZSA9IGZpbHRlckVtcHR5Q2h1bmtzKHN1cGVyLnJlYWRhYmxlKTtcblx0XHRpZiAoKCFlbmNyeXB0ZWQgfHwgemlwQ3J5cHRvKSAmJiBzaWduZWQpIHtcblx0XHRcdGNyYzMyU3RyZWFtID0gbmV3IENyYzMyU3RyZWFtKCk7XG5cdFx0XHRyZWFkYWJsZSA9IHBpcGVUaHJvdWdoKHJlYWRhYmxlLCBjcmMzMlN0cmVhbSk7XG5cdFx0fVxuXHRcdGlmIChjb21wcmVzc2VkKSB7XG5cdFx0XHRyZWFkYWJsZSA9IHBpcGVUaHJvdWdoQ29tbXByZXNzaW9uU3RyZWFtKHJlYWRhYmxlLCB1c2VDb21wcmVzc2lvblN0cmVhbSwgeyBsZXZlbCwgY2h1bmtTaXplIH0sIENvbXByZXNzaW9uU3RyZWFtTmF0aXZlLCBDb21wcmVzc2lvblN0cmVhbSk7XG5cdFx0fVxuXHRcdGlmIChlbmNyeXB0ZWQpIHtcblx0XHRcdGlmICh6aXBDcnlwdG8pIHtcblx0XHRcdFx0cmVhZGFibGUgPSBwaXBlVGhyb3VnaChyZWFkYWJsZSwgbmV3IFppcENyeXB0b0VuY3J5cHRpb25TdHJlYW0ob3B0aW9ucykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZW5jcnlwdGlvblN0cmVhbSA9IG5ldyBBRVNFbmNyeXB0aW9uU3RyZWFtKG9wdGlvbnMpO1xuXHRcdFx0XHRyZWFkYWJsZSA9IHBpcGVUaHJvdWdoKHJlYWRhYmxlLCBlbmNyeXB0aW9uU3RyZWFtKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0c2V0UmVhZGFibGUoc3RyZWFtLCByZWFkYWJsZSwgKCkgPT4ge1xuXHRcdFx0bGV0IHNpZ25hdHVyZTtcblx0XHRcdGlmIChlbmNyeXB0ZWQgJiYgIXppcENyeXB0bykge1xuXHRcdFx0XHRzaWduYXR1cmUgPSBlbmNyeXB0aW9uU3RyZWFtLnNpZ25hdHVyZTtcblx0XHRcdH1cblx0XHRcdGlmICgoIWVuY3J5cHRlZCB8fCB6aXBDcnlwdG8pICYmIHNpZ25lZCkge1xuXHRcdFx0XHRzaWduYXR1cmUgPSBuZXcgRGF0YVZpZXcoY3JjMzJTdHJlYW0udmFsdWUuYnVmZmVyKS5nZXRVaW50MzIoMCk7XG5cdFx0XHR9XG5cdFx0XHRzdHJlYW0uc2lnbmF0dXJlID0gc2lnbmF0dXJlO1xuXHRcdH0pO1xuXHR9XG59XG5cbmNsYXNzIEluZmxhdGVTdHJlYW0gZXh0ZW5kcyBUcmFuc2Zvcm1TdHJlYW0ge1xuXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMsIHsgY2h1bmtTaXplLCBEZWNvbXByZXNzaW9uU3RyZWFtLCBEZWNvbXByZXNzaW9uU3RyZWFtTmF0aXZlIH0pIHtcblx0XHRzdXBlcih7fSk7XG5cdFx0Y29uc3QgeyB6aXBDcnlwdG8sIGVuY3J5cHRlZCwgc2lnbmVkLCBzaWduYXR1cmUsIGNvbXByZXNzZWQsIHVzZUNvbXByZXNzaW9uU3RyZWFtIH0gPSBvcHRpb25zO1xuXHRcdGxldCBjcmMzMlN0cmVhbSwgZGVjcnlwdGlvblN0cmVhbTtcblx0XHRsZXQgcmVhZGFibGUgPSBmaWx0ZXJFbXB0eUNodW5rcyhzdXBlci5yZWFkYWJsZSk7XG5cdFx0aWYgKGVuY3J5cHRlZCkge1xuXHRcdFx0aWYgKHppcENyeXB0bykge1xuXHRcdFx0XHRyZWFkYWJsZSA9IHBpcGVUaHJvdWdoKHJlYWRhYmxlLCBuZXcgWmlwQ3J5cHRvRGVjcnlwdGlvblN0cmVhbShvcHRpb25zKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWNyeXB0aW9uU3RyZWFtID0gbmV3IEFFU0RlY3J5cHRpb25TdHJlYW0ob3B0aW9ucyk7XG5cdFx0XHRcdHJlYWRhYmxlID0gcGlwZVRocm91Z2gocmVhZGFibGUsIGRlY3J5cHRpb25TdHJlYW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoY29tcHJlc3NlZCkge1xuXHRcdFx0cmVhZGFibGUgPSBwaXBlVGhyb3VnaENvbW1wcmVzc2lvblN0cmVhbShyZWFkYWJsZSwgdXNlQ29tcHJlc3Npb25TdHJlYW0sIHsgY2h1bmtTaXplIH0sIERlY29tcHJlc3Npb25TdHJlYW1OYXRpdmUsIERlY29tcHJlc3Npb25TdHJlYW0pO1xuXHRcdH1cblx0XHRpZiAoKCFlbmNyeXB0ZWQgfHwgemlwQ3J5cHRvKSAmJiBzaWduZWQpIHtcblx0XHRcdGNyYzMyU3RyZWFtID0gbmV3IENyYzMyU3RyZWFtKCk7XG5cdFx0XHRyZWFkYWJsZSA9IHBpcGVUaHJvdWdoKHJlYWRhYmxlLCBjcmMzMlN0cmVhbSk7XG5cdFx0fVxuXHRcdHNldFJlYWRhYmxlKHRoaXMsIHJlYWRhYmxlLCAoKSA9PiB7XG5cdFx0XHRpZiAoKCFlbmNyeXB0ZWQgfHwgemlwQ3J5cHRvKSAmJiBzaWduZWQpIHtcblx0XHRcdFx0Y29uc3QgZGF0YVZpZXdTaWduYXR1cmUgPSBuZXcgRGF0YVZpZXcoY3JjMzJTdHJlYW0udmFsdWUuYnVmZmVyKTtcblx0XHRcdFx0aWYgKHNpZ25hdHVyZSAhPSBkYXRhVmlld1NpZ25hdHVyZS5nZXRVaW50MzIoMCwgZmFsc2UpKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9JTlZBTElEX1NJR05BVFVSRSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuXG5leHBvcnQge1xuXHREZWZsYXRlU3RyZWFtLFxuXHRJbmZsYXRlU3RyZWFtLFxuXHRFUlJfSU5WQUxJRF9QQVNTV09SRCxcblx0RVJSX0lOVkFMSURfU0lHTkFUVVJFLFxuXHRFUlJfQUJPUlRfQ0hFQ0tfUEFTU1dPUkRcbn07XG5cbmZ1bmN0aW9uIGZpbHRlckVtcHR5Q2h1bmtzKHJlYWRhYmxlKSB7XG5cdHJldHVybiBwaXBlVGhyb3VnaChyZWFkYWJsZSwgbmV3IFRyYW5zZm9ybVN0cmVhbSh7XG5cdFx0dHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG5cdFx0XHRpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7XG5cdFx0XHRcdGNvbnRyb2xsZXIuZW5xdWV1ZShjaHVuayk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KSk7XG59XG5cbmZ1bmN0aW9uIHNldFJlYWRhYmxlKHN0cmVhbSwgcmVhZGFibGUsIGZsdXNoKSB7XG5cdHJlYWRhYmxlID0gcGlwZVRocm91Z2gocmVhZGFibGUsIG5ldyBUcmFuc2Zvcm1TdHJlYW0oeyBmbHVzaCB9KSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdHJlYW0sIFwicmVhZGFibGVcIiwge1xuXHRcdGdldCgpIHtcblx0XHRcdHJldHVybiByZWFkYWJsZTtcblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBwaXBlVGhyb3VnaENvbW1wcmVzc2lvblN0cmVhbShyZWFkYWJsZSwgdXNlQ29tcHJlc3Npb25TdHJlYW0sIG9wdGlvbnMsIENvZGVjU3RyZWFtTmF0aXZlLCBDb2RlY1N0cmVhbSkge1xuXHR0cnkge1xuXHRcdGNvbnN0IENvbXByZXNzaW9uU3RyZWFtID0gdXNlQ29tcHJlc3Npb25TdHJlYW0gJiYgQ29kZWNTdHJlYW1OYXRpdmUgPyBDb2RlY1N0cmVhbU5hdGl2ZSA6IENvZGVjU3RyZWFtO1xuXHRcdHJlYWRhYmxlID0gcGlwZVRocm91Z2gocmVhZGFibGUsIG5ldyBDb21wcmVzc2lvblN0cmVhbShDT01QUkVTU0lPTl9GT1JNQVQsIG9wdGlvbnMpKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAodXNlQ29tcHJlc3Npb25TdHJlYW0pIHtcblx0XHRcdHJlYWRhYmxlID0gcGlwZVRocm91Z2gocmVhZGFibGUsIG5ldyBDb2RlY1N0cmVhbShDT01QUkVTU0lPTl9GT1JNQVQsIG9wdGlvbnMpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZWFkYWJsZTtcbn1cblxuZnVuY3Rpb24gcGlwZVRocm91Z2gocmVhZGFibGUsIHRyYW5zZm9ybVN0cmVhbSkge1xuXHRyZXR1cm4gcmVhZGFibGUucGlwZVRocm91Z2godHJhbnNmb3JtU3RyZWFtKTtcbn0iLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbi8qXG4gKiBUaGlzIHByb2dyYW0gaXMgYmFzZWQgb24gSlpsaWIgMS4wLjIgeW1uaywgSkNyYWZ0LEluYy5cbiAqIEpabGliIGlzIGJhc2VkIG9uIHpsaWItMS4xLjMsIHNvIGFsbCBjcmVkaXQgc2hvdWxkIGdvIGF1dGhvcnNcbiAqIEplYW4tbG91cCBHYWlsbHkoamxvdXBAZ3ppcC5vcmcpIGFuZCBNYXJrIEFkbGVyKG1hZGxlckBhbHVtbmkuY2FsdGVjaC5lZHUpXG4gKiBhbmQgY29udHJpYnV0b3JzIG9mIHpsaWIuXG4gKi9cblxuLyogZ2xvYmFsIFRyYW5zZm9ybVN0cmVhbSAqL1xuLy8gZGVuby1saW50LWlnbm9yZS1maWxlIG5vLXRoaXMtYWxpYXNcblxuaW1wb3J0IHtcblx0RVJSX0lOVkFMSURfUEFTU1dPUkQsXG5cdEVSUl9JTlZBTElEX1NJR05BVFVSRSxcblx0RVJSX0FCT1JUX0NIRUNLX1BBU1NXT1JELFxuXHRJbmZsYXRlU3RyZWFtLFxuXHREZWZsYXRlU3RyZWFtXG59IGZyb20gXCIuL3ppcC1lbnRyeS1zdHJlYW0uanNcIjtcblxuY29uc3QgTUVTU0FHRV9FVkVOVF9UWVBFID0gXCJtZXNzYWdlXCI7XG5jb25zdCBNRVNTQUdFX1NUQVJUID0gXCJzdGFydFwiO1xuY29uc3QgTUVTU0FHRV9QVUxMID0gXCJwdWxsXCI7XG5jb25zdCBNRVNTQUdFX0RBVEEgPSBcImRhdGFcIjtcbmNvbnN0IE1FU1NBR0VfQUNLX0RBVEEgPSBcImFja1wiO1xuY29uc3QgTUVTU0FHRV9DTE9TRSA9IFwiY2xvc2VcIjtcbmNvbnN0IENPREVDX0RFRkxBVEUgPSBcImRlZmxhdGVcIjtcbmNvbnN0IENPREVDX0lORkxBVEUgPSBcImluZmxhdGVcIjtcblxuZXhwb3J0IHtcblx0Q09ERUNfREVGTEFURSxcblx0Q09ERUNfSU5GTEFURSxcblx0TUVTU0FHRV9FVkVOVF9UWVBFLFxuXHRNRVNTQUdFX1NUQVJULFxuXHRNRVNTQUdFX1BVTEwsXG5cdE1FU1NBR0VfREFUQSxcblx0TUVTU0FHRV9BQ0tfREFUQSxcblx0TUVTU0FHRV9DTE9TRSxcblx0RVJSX0lOVkFMSURfUEFTU1dPUkQsXG5cdEVSUl9JTlZBTElEX1NJR05BVFVSRSxcblx0RVJSX0FCT1JUX0NIRUNLX1BBU1NXT1JELFxuXHRDb2RlY1N0cmVhbVxufTtcblxuY2xhc3MgQ29kZWNTdHJlYW0gZXh0ZW5kcyBUcmFuc2Zvcm1TdHJlYW0ge1xuXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMsIGNvbmZpZykge1xuXHRcdHN1cGVyKHt9KTtcblx0XHRjb25zdCBjb2RlYyA9IHRoaXM7XG5cdFx0Y29uc3QgeyBjb2RlY1R5cGUgfSA9IG9wdGlvbnM7XG5cdFx0bGV0IFN0cmVhbTtcblx0XHRpZiAoY29kZWNUeXBlLnN0YXJ0c1dpdGgoQ09ERUNfREVGTEFURSkpIHtcblx0XHRcdFN0cmVhbSA9IERlZmxhdGVTdHJlYW07XG5cdFx0fSBlbHNlIGlmIChjb2RlY1R5cGUuc3RhcnRzV2l0aChDT0RFQ19JTkZMQVRFKSkge1xuXHRcdFx0U3RyZWFtID0gSW5mbGF0ZVN0cmVhbTtcblx0XHR9XG5cdFx0bGV0IHNpemUgPSAwO1xuXHRcdGNvbnN0IHN0cmVhbSA9IG5ldyBTdHJlYW0ob3B0aW9ucywgY29uZmlnKTtcblx0XHRjb25zdCByZWFkYWJsZSA9IHN1cGVyLnJlYWRhYmxlO1xuXHRcdGNvbnN0IHRyYW5zZm9ybVN0cmVhbSA9IG5ldyBUcmFuc2Zvcm1TdHJlYW0oe1xuXHRcdFx0dHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG5cdFx0XHRcdGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcblx0XHRcdFx0XHRzaXplICs9IGNodW5rLmxlbmd0aDtcblx0XHRcdFx0XHRjb250cm9sbGVyLmVucXVldWUoY2h1bmspO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Zmx1c2goKSB7XG5cdFx0XHRcdGNvbnN0IHsgc2lnbmF0dXJlIH0gPSBzdHJlYW07XG5cdFx0XHRcdE9iamVjdC5hc3NpZ24oY29kZWMsIHtcblx0XHRcdFx0XHRzaWduYXR1cmUsXG5cdFx0XHRcdFx0c2l6ZVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29kZWMsIFwicmVhZGFibGVcIiwge1xuXHRcdFx0Z2V0KCkge1xuXHRcdFx0XHRyZXR1cm4gcmVhZGFibGUucGlwZVRocm91Z2goc3RyZWFtKS5waXBlVGhyb3VnaCh0cmFuc2Zvcm1TdHJlYW0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59IiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4vKiBnbG9iYWwgV29ya2VyLCBVUkwsIFRyYW5zZm9ybVN0cmVhbSwgV3JpdGFibGVTdHJlYW0gKi9cblxuaW1wb3J0IHtcblx0VU5ERUZJTkVEX1RZUEUsXG5cdEZVTkNUSU9OX1RZUEVcbn0gZnJvbSBcIi4vY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQge1xuXHRDb2RlY1N0cmVhbSxcblx0TUVTU0FHRV9FVkVOVF9UWVBFLFxuXHRNRVNTQUdFX1NUQVJULFxuXHRNRVNTQUdFX1BVTEwsXG5cdE1FU1NBR0VfREFUQSxcblx0TUVTU0FHRV9BQ0tfREFUQSxcblx0TUVTU0FHRV9DTE9TRVxufSBmcm9tIFwiLi9zdHJlYW1zL2NvZGVjLXN0cmVhbS5qc1wiO1xuXG4vLyBkZW5vLWxpbnQtaWdub3JlIHZhbGlkLXR5cGVvZlxuY29uc3QgV0VCX1dPUktFUlNfU1VQUE9SVEVEID0gdHlwZW9mIFdvcmtlciAhPSBVTkRFRklORURfVFlQRTtcblxuZXhwb3J0IHtcblx0Q29kZWNXb3JrZXJcbn07XG5cbmNsYXNzIENvZGVjV29ya2VyIHtcblxuXHRjb25zdHJ1Y3Rvcih3b3JrZXJEYXRhLCB7IHJlYWRhYmxlLCB3cml0YWJsZSB9LCB7IG9wdGlvbnMsIGNvbmZpZywgc3RyZWFtT3B0aW9ucywgdXNlV2ViV29ya2VycywgdHJhbnNmZXJTdHJlYW1zLCBzY3JpcHRzIH0sIG9uVGFza0ZpbmlzaGVkKSB7XG5cdFx0Y29uc3QgeyBzaWduYWwgfSA9IHN0cmVhbU9wdGlvbnM7XG5cdFx0T2JqZWN0LmFzc2lnbih3b3JrZXJEYXRhLCB7XG5cdFx0XHRidXN5OiB0cnVlLFxuXHRcdFx0cmVhZGFibGU6IHJlYWRhYmxlLnBpcGVUaHJvdWdoKG5ldyBQcm9ncmVzc1dhdGNoZXJTdHJlYW0ocmVhZGFibGUsIHN0cmVhbU9wdGlvbnMsIGNvbmZpZyksIHsgc2lnbmFsIH0pLFxuXHRcdFx0d3JpdGFibGUsXG5cdFx0XHRvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSxcblx0XHRcdHNjcmlwdHMsXG5cdFx0XHR0cmFuc2ZlclN0cmVhbXMsXG5cdFx0XHR0ZXJtaW5hdGUoKSB7XG5cdFx0XHRcdGNvbnN0IHsgd29ya2VyLCBidXN5IH0gPSB3b3JrZXJEYXRhO1xuXHRcdFx0XHRpZiAod29ya2VyICYmICFidXN5KSB7XG5cdFx0XHRcdFx0d29ya2VyLnRlcm1pbmF0ZSgpO1xuXHRcdFx0XHRcdHdvcmtlckRhdGEuaW50ZXJmYWNlID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdG9uVGFza0ZpbmlzaGVkKCkge1xuXHRcdFx0XHR3b3JrZXJEYXRhLmJ1c3kgPSBmYWxzZTtcblx0XHRcdFx0b25UYXNrRmluaXNoZWQod29ya2VyRGF0YSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuICh1c2VXZWJXb3JrZXJzICYmIFdFQl9XT1JLRVJTX1NVUFBPUlRFRCA/IGNyZWF0ZVdlYldvcmtlckludGVyZmFjZSA6IGNyZWF0ZVdvcmtlckludGVyZmFjZSkod29ya2VyRGF0YSwgY29uZmlnKTtcblx0fVxufVxuXG5jbGFzcyBQcm9ncmVzc1dhdGNoZXJTdHJlYW0gZXh0ZW5kcyBUcmFuc2Zvcm1TdHJlYW0ge1xuXG5cdGNvbnN0cnVjdG9yKHJlYWRhYmxlU291cmNlLCB7IG9uc3RhcnQsIG9ucHJvZ3Jlc3MsIHNpemUsIG9uZW5kIH0sIHsgY2h1bmtTaXplIH0pIHtcblx0XHRsZXQgY2h1bmtPZmZzZXQgPSAwO1xuXHRcdHN1cGVyKHtcblx0XHRcdHN0YXJ0KCkge1xuXHRcdFx0XHRpZiAob25zdGFydCkge1xuXHRcdFx0XHRcdGNhbGxIYW5kbGVyKG9uc3RhcnQsIHNpemUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0YXN5bmMgdHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG5cdFx0XHRcdGNodW5rT2Zmc2V0ICs9IGNodW5rLmxlbmd0aDtcblx0XHRcdFx0aWYgKG9ucHJvZ3Jlc3MpIHtcblx0XHRcdFx0XHRhd2FpdCBjYWxsSGFuZGxlcihvbnByb2dyZXNzLCBjaHVua09mZnNldCwgc2l6ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udHJvbGxlci5lbnF1ZXVlKGNodW5rKTtcblx0XHRcdH0sXG5cdFx0XHRmbHVzaCgpIHtcblx0XHRcdFx0cmVhZGFibGVTb3VyY2Uuc2l6ZSA9IGNodW5rT2Zmc2V0O1xuXHRcdFx0XHRpZiAob25lbmQpIHtcblx0XHRcdFx0XHRjYWxsSGFuZGxlcihvbmVuZCwgY2h1bmtPZmZzZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSwgeyBoaWdoV2F0ZXJNYXJrOiAxLCBzaXplOiAoKSA9PiBjaHVua1NpemUgfSk7XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gY2FsbEhhbmRsZXIoaGFuZGxlciwgLi4ucGFyYW1ldGVycykge1xuXHR0cnkge1xuXHRcdGF3YWl0IGhhbmRsZXIoLi4ucGFyYW1ldGVycyk7XG5cdH0gY2F0Y2ggKF9lcnJvcikge1xuXHRcdC8vIGlnbm9yZWRcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVXb3JrZXJJbnRlcmZhY2Uod29ya2VyRGF0YSwgY29uZmlnKSB7XG5cdHJldHVybiB7XG5cdFx0cnVuOiAoKSA9PiBydW5Xb3JrZXIod29ya2VyRGF0YSwgY29uZmlnKVxuXHR9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVXZWJXb3JrZXJJbnRlcmZhY2Uod29ya2VyRGF0YSwgeyBiYXNlVVJMLCBjaHVua1NpemUgfSkge1xuXHRpZiAoIXdvcmtlckRhdGEuaW50ZXJmYWNlKSB7XG5cdFx0T2JqZWN0LmFzc2lnbih3b3JrZXJEYXRhLCB7XG5cdFx0XHR3b3JrZXI6IGdldFdlYldvcmtlcih3b3JrZXJEYXRhLnNjcmlwdHNbMF0sIGJhc2VVUkwsIHdvcmtlckRhdGEpLFxuXHRcdFx0aW50ZXJmYWNlOiB7XG5cdFx0XHRcdHJ1bjogKCkgPT4gcnVuV2ViV29ya2VyKHdvcmtlckRhdGEsIHsgY2h1bmtTaXplIH0pXG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIHdvcmtlckRhdGEuaW50ZXJmYWNlO1xufVxuXG5hc3luYyBmdW5jdGlvbiBydW5Xb3JrZXIoeyBvcHRpb25zLCByZWFkYWJsZSwgd3JpdGFibGUsIG9uVGFza0ZpbmlzaGVkIH0sIGNvbmZpZykge1xuXHRjb25zdCBjb2RlY1N0cmVhbSA9IG5ldyBDb2RlY1N0cmVhbShvcHRpb25zLCBjb25maWcpO1xuXHR0cnkge1xuXHRcdGF3YWl0IHJlYWRhYmxlLnBpcGVUaHJvdWdoKGNvZGVjU3RyZWFtKS5waXBlVG8od3JpdGFibGUsIHsgcHJldmVudENsb3NlOiB0cnVlLCBwcmV2ZW50QWJvcnQ6IHRydWUgfSk7XG5cdFx0Y29uc3Qge1xuXHRcdFx0c2lnbmF0dXJlLFxuXHRcdFx0c2l6ZVxuXHRcdH0gPSBjb2RlY1N0cmVhbTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2lnbmF0dXJlLFxuXHRcdFx0c2l6ZVxuXHRcdH07XG5cdH0gZmluYWxseSB7XG5cdFx0b25UYXNrRmluaXNoZWQoKTtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBydW5XZWJXb3JrZXIod29ya2VyRGF0YSwgY29uZmlnKSB7XG5cdGxldCByZXNvbHZlUmVzdWx0LCByZWplY3RSZXN1bHQ7XG5cdGNvbnN0IHJlc3VsdCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRyZXNvbHZlUmVzdWx0ID0gcmVzb2x2ZTtcblx0XHRyZWplY3RSZXN1bHQgPSByZWplY3Q7XG5cdH0pO1xuXHRPYmplY3QuYXNzaWduKHdvcmtlckRhdGEsIHtcblx0XHRyZWFkZXI6IG51bGwsXG5cdFx0d3JpdGVyOiBudWxsLFxuXHRcdHJlc29sdmVSZXN1bHQsXG5cdFx0cmVqZWN0UmVzdWx0LFxuXHRcdHJlc3VsdFxuXHR9KTtcblx0Y29uc3QgeyByZWFkYWJsZSwgb3B0aW9ucywgc2NyaXB0cyB9ID0gd29ya2VyRGF0YTtcblx0Y29uc3QgeyB3cml0YWJsZSwgY2xvc2VkIH0gPSB3YXRjaENsb3NlZFN0cmVhbSh3b3JrZXJEYXRhLndyaXRhYmxlKTtcblx0Y29uc3Qgc3RyZWFtc1RyYW5zZmVycmVkID0gc2VuZE1lc3NhZ2Uoe1xuXHRcdHR5cGU6IE1FU1NBR0VfU1RBUlQsXG5cdFx0c2NyaXB0czogc2NyaXB0cy5zbGljZSgxKSxcblx0XHRvcHRpb25zLFxuXHRcdGNvbmZpZyxcblx0XHRyZWFkYWJsZSxcblx0XHR3cml0YWJsZVxuXHR9LCB3b3JrZXJEYXRhKTtcblx0aWYgKCFzdHJlYW1zVHJhbnNmZXJyZWQpIHtcblx0XHRPYmplY3QuYXNzaWduKHdvcmtlckRhdGEsIHtcblx0XHRcdHJlYWRlcjogcmVhZGFibGUuZ2V0UmVhZGVyKCksXG5cdFx0XHR3cml0ZXI6IHdyaXRhYmxlLmdldFdyaXRlcigpXG5cdFx0fSk7XG5cdH1cblx0Y29uc3QgcmVzdWx0VmFsdWUgPSBhd2FpdCByZXN1bHQ7XG5cdHRyeSB7XG5cdFx0YXdhaXQgd3JpdGFibGUuZ2V0V3JpdGVyKCkuY2xvc2UoKTtcblx0fSBjYXRjaCAoX2Vycm9yKSB7XG5cdFx0Ly8gaWdub3JlZFxuXHR9XG5cdGF3YWl0IGNsb3NlZDtcblx0cmV0dXJuIHJlc3VsdFZhbHVlO1xufVxuXG5mdW5jdGlvbiB3YXRjaENsb3NlZFN0cmVhbSh3cml0YWJsZVNvdXJjZSkge1xuXHRjb25zdCB3cml0ZXIgPSB3cml0YWJsZVNvdXJjZS5nZXRXcml0ZXIoKTtcblx0bGV0IHJlc29sdmVTdHJlYW1DbG9zZWQ7XG5cdGNvbnN0IGNsb3NlZCA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVzb2x2ZVN0cmVhbUNsb3NlZCA9IHJlc29sdmUpO1xuXHRjb25zdCB3cml0YWJsZSA9IG5ldyBXcml0YWJsZVN0cmVhbSh7XG5cdFx0YXN5bmMgd3JpdGUoY2h1bmspIHtcblx0XHRcdGF3YWl0IHdyaXRlci5yZWFkeTtcblx0XHRcdGF3YWl0IHdyaXRlci53cml0ZShjaHVuayk7XG5cdFx0fSxcblx0XHRjbG9zZSgpIHtcblx0XHRcdHdyaXRlci5yZWxlYXNlTG9jaygpO1xuXHRcdFx0cmVzb2x2ZVN0cmVhbUNsb3NlZCgpO1xuXHRcdH0sXG5cdFx0YWJvcnQocmVhc29uKSB7XG5cdFx0XHRyZXR1cm4gd3JpdGVyLmFib3J0KHJlYXNvbik7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHsgd3JpdGFibGUsIGNsb3NlZCB9O1xufVxuXG5sZXQgY2xhc3NpY1dvcmtlcnNTdXBwb3J0ZWQgPSB0cnVlO1xubGV0IHRyYW5zZmVyU3RyZWFtc1N1cHBvcnRlZCA9IHRydWU7XG5cbmZ1bmN0aW9uIGdldFdlYldvcmtlcih1cmwsIGJhc2VVUkwsIHdvcmtlckRhdGEpIHtcblx0Y29uc3Qgd29ya2VyT3B0aW9ucyA9IHsgdHlwZTogXCJtb2R1bGVcIiB9O1xuXHRsZXQgc2NyaXB0VXJsLCB3b3JrZXI7XG5cdC8vIGRlbm8tbGludC1pZ25vcmUgdmFsaWQtdHlwZW9mXG5cdGlmICh0eXBlb2YgdXJsID09IEZVTkNUSU9OX1RZUEUpIHtcblx0XHR1cmwgPSB1cmwoKTtcblx0fVxuXHR0cnkge1xuXHRcdHNjcmlwdFVybCA9IG5ldyBVUkwodXJsLCBiYXNlVVJMKTtcblx0fSBjYXRjaCAoX2Vycm9yKSB7XG5cdFx0c2NyaXB0VXJsID0gdXJsO1xuXHR9XG5cdGlmIChjbGFzc2ljV29ya2Vyc1N1cHBvcnRlZCkge1xuXHRcdHRyeSB7XG5cdFx0XHR3b3JrZXIgPSBuZXcgV29ya2VyKHNjcmlwdFVybCk7XG5cdFx0fSBjYXRjaCAoX2Vycm9yKSB7XG5cdFx0XHRjbGFzc2ljV29ya2Vyc1N1cHBvcnRlZCA9IGZhbHNlO1xuXHRcdFx0d29ya2VyID0gbmV3IFdvcmtlcihzY3JpcHRVcmwsIHdvcmtlck9wdGlvbnMpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHR3b3JrZXIgPSBuZXcgV29ya2VyKHNjcmlwdFVybCwgd29ya2VyT3B0aW9ucyk7XG5cdH1cblx0d29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoTUVTU0FHRV9FVkVOVF9UWVBFLCBldmVudCA9PiBvbk1lc3NhZ2UoZXZlbnQsIHdvcmtlckRhdGEpKTtcblx0cmV0dXJuIHdvcmtlcjtcbn1cblxuZnVuY3Rpb24gc2VuZE1lc3NhZ2UobWVzc2FnZSwgeyB3b3JrZXIsIHdyaXRlciwgb25UYXNrRmluaXNoZWQsIHRyYW5zZmVyU3RyZWFtcyB9KSB7XG5cdHRyeSB7XG5cdFx0bGV0IHsgdmFsdWUsIHJlYWRhYmxlLCB3cml0YWJsZSB9ID0gbWVzc2FnZTtcblx0XHRjb25zdCB0cmFuc2ZlcmFibGVzID0gW107XG5cdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRpZiAodmFsdWUuYnl0ZUxlbmd0aCA8IHZhbHVlLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG5cdFx0XHRcdG1lc3NhZ2UudmFsdWUgPSB2YWx1ZS5idWZmZXIuc2xpY2UoMCwgdmFsdWUuYnl0ZUxlbmd0aCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0bWVzc2FnZS52YWx1ZSA9IHZhbHVlLmJ1ZmZlcjtcblx0XHRcdH1cblx0XHRcdHRyYW5zZmVyYWJsZXMucHVzaChtZXNzYWdlLnZhbHVlKTtcblx0XHR9XG5cdFx0aWYgKHRyYW5zZmVyU3RyZWFtcyAmJiB0cmFuc2ZlclN0cmVhbXNTdXBwb3J0ZWQpIHtcblx0XHRcdGlmIChyZWFkYWJsZSkge1xuXHRcdFx0XHR0cmFuc2ZlcmFibGVzLnB1c2gocmVhZGFibGUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHdyaXRhYmxlKSB7XG5cdFx0XHRcdHRyYW5zZmVyYWJsZXMucHVzaCh3cml0YWJsZSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lc3NhZ2UucmVhZGFibGUgPSBtZXNzYWdlLndyaXRhYmxlID0gbnVsbDtcblx0XHR9XG5cdFx0aWYgKHRyYW5zZmVyYWJsZXMubGVuZ3RoKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR3b3JrZXIucG9zdE1lc3NhZ2UobWVzc2FnZSwgdHJhbnNmZXJhYmxlcyk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSBjYXRjaCAoX2Vycm9yKSB7XG5cdFx0XHRcdHRyYW5zZmVyU3RyZWFtc1N1cHBvcnRlZCA9IGZhbHNlO1xuXHRcdFx0XHRtZXNzYWdlLnJlYWRhYmxlID0gbWVzc2FnZS53cml0YWJsZSA9IG51bGw7XG5cdFx0XHRcdHdvcmtlci5wb3N0TWVzc2FnZShtZXNzYWdlKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0d29ya2VyLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAod3JpdGVyKSB7XG5cdFx0XHR3cml0ZXIucmVsZWFzZUxvY2soKTtcblx0XHR9XG5cdFx0b25UYXNrRmluaXNoZWQoKTtcblx0XHR0aHJvdyBlcnJvcjtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBvbk1lc3NhZ2UoeyBkYXRhIH0sIHdvcmtlckRhdGEpIHtcblx0Y29uc3QgeyB0eXBlLCB2YWx1ZSwgbWVzc2FnZUlkLCByZXN1bHQsIGVycm9yIH0gPSBkYXRhO1xuXHRjb25zdCB7IHJlYWRlciwgd3JpdGVyLCByZXNvbHZlUmVzdWx0LCByZWplY3RSZXN1bHQsIG9uVGFza0ZpbmlzaGVkIH0gPSB3b3JrZXJEYXRhO1xuXHR0cnkge1xuXHRcdGlmIChlcnJvcikge1xuXHRcdFx0Y29uc3QgeyBtZXNzYWdlLCBzdGFjaywgY29kZSwgbmFtZSB9ID0gZXJyb3I7XG5cdFx0XHRjb25zdCByZXNwb25zZUVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuXHRcdFx0T2JqZWN0LmFzc2lnbihyZXNwb25zZUVycm9yLCB7IHN0YWNrLCBjb2RlLCBuYW1lIH0pO1xuXHRcdFx0Y2xvc2UocmVzcG9uc2VFcnJvcik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0eXBlID09IE1FU1NBR0VfUFVMTCkge1xuXHRcdFx0XHRjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuXHRcdFx0XHRzZW5kTWVzc2FnZSh7IHR5cGU6IE1FU1NBR0VfREFUQSwgdmFsdWUsIGRvbmUsIG1lc3NhZ2VJZCB9LCB3b3JrZXJEYXRhKTtcblx0XHRcdH1cblx0XHRcdGlmICh0eXBlID09IE1FU1NBR0VfREFUQSkge1xuXHRcdFx0XHRhd2FpdCB3cml0ZXIucmVhZHk7XG5cdFx0XHRcdGF3YWl0IHdyaXRlci53cml0ZShuZXcgVWludDhBcnJheSh2YWx1ZSkpO1xuXHRcdFx0XHRzZW5kTWVzc2FnZSh7IHR5cGU6IE1FU1NBR0VfQUNLX0RBVEEsIG1lc3NhZ2VJZCB9LCB3b3JrZXJEYXRhKTtcblx0XHRcdH1cblx0XHRcdGlmICh0eXBlID09IE1FU1NBR0VfQ0xPU0UpIHtcblx0XHRcdFx0Y2xvc2UobnVsbCwgcmVzdWx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y2xvc2UoZXJyb3IpO1xuXHR9XG5cblx0ZnVuY3Rpb24gY2xvc2UoZXJyb3IsIHJlc3VsdCkge1xuXHRcdGlmIChlcnJvcikge1xuXHRcdFx0cmVqZWN0UmVzdWx0KGVycm9yKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzb2x2ZVJlc3VsdChyZXN1bHQpO1xuXHRcdH1cblx0XHRpZiAod3JpdGVyKSB7XG5cdFx0XHR3cml0ZXIucmVsZWFzZUxvY2soKTtcblx0XHR9XG5cdFx0b25UYXNrRmluaXNoZWQoKTtcblx0fVxufSIsIi8qXG4gQ29weXJpZ2h0IChjKSAyMDIyIEdpbGRhcyBMb3JtZWF1LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiBcbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuIDMuIFRoZSBuYW1lcyBvZiB0aGUgYXV0aG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEICcnQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXG4gSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKQ1JBRlQsXG4gSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsXG4gT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLyogZ2xvYmFsIHNldFRpbWVvdXQsIGNsZWFyVGltZW91dCAqL1xuXG5pbXBvcnQgeyBVTkRFRklORURfVkFMVUUgfSBmcm9tIFwiLi9jb25zdGFudHMuanNcIjtcbmltcG9ydCB7XG5cdENPREVDX0lORkxBVEUsXG5cdENPREVDX0RFRkxBVEUsXG5cdEVSUl9JTlZBTElEX1NJR05BVFVSRSxcblx0RVJSX0lOVkFMSURfUEFTU1dPUkQsXG5cdEVSUl9BQk9SVF9DSEVDS19QQVNTV09SRFxufSBmcm9tIFwiLi9zdHJlYW1zL2NvZGVjLXN0cmVhbS5qc1wiO1xuaW1wb3J0IHsgQ29kZWNXb3JrZXIgfSBmcm9tIFwiLi9jb2RlYy13b3JrZXIuanNcIjtcblxubGV0IHBvb2wgPSBbXTtcbmNvbnN0IHBlbmRpbmdSZXF1ZXN0cyA9IFtdO1xuXG5leHBvcnQge1xuXHRydW5Xb3JrZXIsXG5cdHRlcm1pbmF0ZVdvcmtlcnMsXG5cdENPREVDX0RFRkxBVEUsXG5cdENPREVDX0lORkxBVEUsXG5cdEVSUl9JTlZBTElEX1NJR05BVFVSRSxcblx0RVJSX0lOVkFMSURfUEFTU1dPUkQsXG5cdEVSUl9BQk9SVF9DSEVDS19QQVNTV09SRFxufTtcblxubGV0IGluZGV4V29ya2VyID0gMDtcblxuYXN5bmMgZnVuY3Rpb24gcnVuV29ya2VyKHN0cmVhbSwgd29ya2VyT3B0aW9ucykge1xuXHRjb25zdCB7IG9wdGlvbnMsIGNvbmZpZyB9ID0gd29ya2VyT3B0aW9ucztcblx0Y29uc3QgeyB0cmFuc2ZlclN0cmVhbXMsIHVzZVdlYldvcmtlcnMsIHVzZUNvbXByZXNzaW9uU3RyZWFtLCBjb2RlY1R5cGUsIGNvbXByZXNzZWQsIHNpZ25lZCwgZW5jcnlwdGVkIH0gPSBvcHRpb25zO1xuXHRjb25zdCB7IHdvcmtlclNjcmlwdHMsIG1heFdvcmtlcnMsIHRlcm1pbmF0ZVdvcmtlclRpbWVvdXQgfSA9IGNvbmZpZztcblx0d29ya2VyT3B0aW9ucy50cmFuc2ZlclN0cmVhbXMgPSB0cmFuc2ZlclN0cmVhbXMgfHwgdHJhbnNmZXJTdHJlYW1zID09PSBVTkRFRklORURfVkFMVUU7XG5cdGNvbnN0IHN0cmVhbUNvcHkgPSAhY29tcHJlc3NlZCAmJiAhc2lnbmVkICYmICFlbmNyeXB0ZWQgJiYgIXdvcmtlck9wdGlvbnMudHJhbnNmZXJTdHJlYW1zO1xuXHR3b3JrZXJPcHRpb25zLnVzZVdlYldvcmtlcnMgPSAhc3RyZWFtQ29weSAmJiAodXNlV2ViV29ya2VycyB8fCAodXNlV2ViV29ya2VycyA9PT0gVU5ERUZJTkVEX1ZBTFVFICYmIGNvbmZpZy51c2VXZWJXb3JrZXJzKSk7XG5cdHdvcmtlck9wdGlvbnMuc2NyaXB0cyA9IHdvcmtlck9wdGlvbnMudXNlV2ViV29ya2VycyAmJiB3b3JrZXJTY3JpcHRzID8gd29ya2VyU2NyaXB0c1tjb2RlY1R5cGVdIDogW107XG5cdG9wdGlvbnMudXNlQ29tcHJlc3Npb25TdHJlYW0gPSB1c2VDb21wcmVzc2lvblN0cmVhbSB8fCAodXNlQ29tcHJlc3Npb25TdHJlYW0gPT09IFVOREVGSU5FRF9WQUxVRSAmJiBjb25maWcudXNlQ29tcHJlc3Npb25TdHJlYW0pO1xuXHRsZXQgd29ya2VyO1xuXHRjb25zdCB3b3JrZXJEYXRhID0gcG9vbC5maW5kKHdvcmtlckRhdGEgPT4gIXdvcmtlckRhdGEuYnVzeSk7XG5cdGlmICh3b3JrZXJEYXRhKSB7XG5cdFx0Y2xlYXJUZXJtaW5hdGVUaW1lb3V0KHdvcmtlckRhdGEpO1xuXHRcdHdvcmtlciA9IG5ldyBDb2RlY1dvcmtlcih3b3JrZXJEYXRhLCBzdHJlYW0sIHdvcmtlck9wdGlvbnMsIG9uVGFza0ZpbmlzaGVkKTtcblx0fSBlbHNlIGlmIChwb29sLmxlbmd0aCA8IG1heFdvcmtlcnMpIHtcblx0XHRjb25zdCB3b3JrZXJEYXRhID0geyBpbmRleFdvcmtlciB9O1xuXHRcdGluZGV4V29ya2VyKys7XG5cdFx0cG9vbC5wdXNoKHdvcmtlckRhdGEpO1xuXHRcdHdvcmtlciA9IG5ldyBDb2RlY1dvcmtlcih3b3JrZXJEYXRhLCBzdHJlYW0sIHdvcmtlck9wdGlvbnMsIG9uVGFza0ZpbmlzaGVkKTtcblx0fSBlbHNlIHtcblx0XHR3b3JrZXIgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHBlbmRpbmdSZXF1ZXN0cy5wdXNoKHsgcmVzb2x2ZSwgc3RyZWFtLCB3b3JrZXJPcHRpb25zIH0pKTtcblx0fVxuXHRyZXR1cm4gd29ya2VyLnJ1bigpO1xuXG5cdGZ1bmN0aW9uIG9uVGFza0ZpbmlzaGVkKHdvcmtlckRhdGEpIHtcblx0XHRpZiAocGVuZGluZ1JlcXVlc3RzLmxlbmd0aCkge1xuXHRcdFx0Y29uc3QgW3sgcmVzb2x2ZSwgc3RyZWFtLCB3b3JrZXJPcHRpb25zIH1dID0gcGVuZGluZ1JlcXVlc3RzLnNwbGljZSgwLCAxKTtcblx0XHRcdHJlc29sdmUobmV3IENvZGVjV29ya2VyKHdvcmtlckRhdGEsIHN0cmVhbSwgd29ya2VyT3B0aW9ucywgb25UYXNrRmluaXNoZWQpKTtcblx0XHR9IGVsc2UgaWYgKHdvcmtlckRhdGEud29ya2VyKSB7XG5cdFx0XHRjbGVhclRlcm1pbmF0ZVRpbWVvdXQod29ya2VyRGF0YSk7XG5cdFx0XHRpZiAoTnVtYmVyLmlzRmluaXRlKHRlcm1pbmF0ZVdvcmtlclRpbWVvdXQpICYmIHRlcm1pbmF0ZVdvcmtlclRpbWVvdXQgPj0gMCkge1xuXHRcdFx0XHR3b3JrZXJEYXRhLnRlcm1pbmF0ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRwb29sID0gcG9vbC5maWx0ZXIoZGF0YSA9PiBkYXRhICE9IHdvcmtlckRhdGEpO1xuXHRcdFx0XHRcdHdvcmtlckRhdGEudGVybWluYXRlKCk7XG5cdFx0XHRcdH0sIHRlcm1pbmF0ZVdvcmtlclRpbWVvdXQpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRwb29sID0gcG9vbC5maWx0ZXIoZGF0YSA9PiBkYXRhICE9IHdvcmtlckRhdGEpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBjbGVhclRlcm1pbmF0ZVRpbWVvdXQod29ya2VyRGF0YSkge1xuXHRjb25zdCB7IHRlcm1pbmF0ZVRpbWVvdXQgfSA9IHdvcmtlckRhdGE7XG5cdGlmICh0ZXJtaW5hdGVUaW1lb3V0KSB7XG5cdFx0Y2xlYXJUaW1lb3V0KHRlcm1pbmF0ZVRpbWVvdXQpO1xuXHRcdHdvcmtlckRhdGEudGVybWluYXRlVGltZW91dCA9IG51bGw7XG5cdH1cbn1cblxuZnVuY3Rpb24gdGVybWluYXRlV29ya2VycygpIHtcblx0cG9vbC5mb3JFYWNoKHdvcmtlckRhdGEgPT4ge1xuXHRcdGNsZWFyVGVybWluYXRlVGltZW91dCh3b3JrZXJEYXRhKTtcblx0XHR3b3JrZXJEYXRhLnRlcm1pbmF0ZSgpO1xuXHR9KTtcbn0iLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbi8qIGdsb2JhbCBCbG9iLCBhdG9iLCBidG9hLCBYTUxIdHRwUmVxdWVzdCwgVVJMLCBmZXRjaCwgUmVhZGFibGVTdHJlYW0sIFdyaXRhYmxlU3RyZWFtLCBGaWxlUmVhZGVyLCBUcmFuc2Zvcm1TdHJlYW0sIFJlc3BvbnNlICovXG4vLyBkZW5vLWxpbnQtaWdub3JlLWZpbGUgbm8tdGhpcy1hbGlhc1xuXG5pbXBvcnQge1xuXHRVTkRFRklORURfVkFMVUUsXG5cdEZVTkNUSU9OX1RZUEVcbn0gZnJvbSBcIi4vY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgeyBnZXRDb25maWd1cmF0aW9uIH0gZnJvbSBcIi4vY29uZmlndXJhdGlvbi5qc1wiO1xuXG5jb25zdCBFUlJfSFRUUF9TVEFUVVMgPSBcIkhUVFAgZXJyb3IgXCI7XG5jb25zdCBFUlJfSFRUUF9SQU5HRSA9IFwiSFRUUCBSYW5nZSBub3Qgc3VwcG9ydGVkXCI7XG5jb25zdCBFUlJfSVRFUkFUT1JfQ09NUExFVEVEX1RPT19TT09OID0gXCJXcml0ZXIgaXRlcmF0b3IgY29tcGxldGVkIHRvbyBzb29uXCI7XG5cbmNvbnN0IENPTlRFTlRfVFlQRV9URVhUX1BMQUlOID0gXCJ0ZXh0L3BsYWluXCI7XG5jb25zdCBIVFRQX0hFQURFUl9DT05URU5UX0xFTkdUSCA9IFwiQ29udGVudC1MZW5ndGhcIjtcbmNvbnN0IEhUVFBfSEVBREVSX0NPTlRFTlRfUkFOR0UgPSBcIkNvbnRlbnQtUmFuZ2VcIjtcbmNvbnN0IEhUVFBfSEVBREVSX0FDQ0VQVF9SQU5HRVMgPSBcIkFjY2VwdC1SYW5nZXNcIjtcbmNvbnN0IEhUVFBfSEVBREVSX1JBTkdFID0gXCJSYW5nZVwiO1xuY29uc3QgSFRUUF9IRUFERVJfQ09OVEVOVF9UWVBFID0gXCJDb250ZW50LVR5cGVcIjtcbmNvbnN0IEhUVFBfTUVUSE9EX0hFQUQgPSBcIkhFQURcIjtcbmNvbnN0IEhUVFBfTUVUSE9EX0dFVCA9IFwiR0VUXCI7XG5jb25zdCBIVFRQX1JBTkdFX1VOSVQgPSBcImJ5dGVzXCI7XG5jb25zdCBERUZBVUxUX0NIVU5LX1NJWkUgPSA2NCAqIDEwMjQ7XG5cbmNvbnN0IFBST1BFUlRZX05BTUVfV1JJVEFCTEUgPSBcIndyaXRhYmxlXCI7XG5cbmNsYXNzIFN0cmVhbSB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5zaXplID0gMDtcblx0fVxuXG5cdGluaXQoKSB7XG5cdFx0dGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cdH1cbn1cblxuY2xhc3MgUmVhZGVyIGV4dGVuZHMgU3RyZWFtIHtcblxuXHRnZXQgcmVhZGFibGUoKSB7XG5cdFx0Y29uc3QgcmVhZGVyID0gdGhpcztcblx0XHRjb25zdCB7IGNodW5rU2l6ZSA9IERFRkFVTFRfQ0hVTktfU0laRSB9ID0gcmVhZGVyO1xuXHRcdGNvbnN0IHJlYWRhYmxlID0gbmV3IFJlYWRhYmxlU3RyZWFtKHtcblx0XHRcdHN0YXJ0KCkge1xuXHRcdFx0XHR0aGlzLmNodW5rT2Zmc2V0ID0gMDtcblx0XHRcdH0sXG5cdFx0XHRhc3luYyBwdWxsKGNvbnRyb2xsZXIpIHtcblx0XHRcdFx0Y29uc3QgeyBvZmZzZXQgPSAwLCBzaXplLCBkaXNrTnVtYmVyU3RhcnQgfSA9IHJlYWRhYmxlO1xuXHRcdFx0XHRjb25zdCB7IGNodW5rT2Zmc2V0IH0gPSB0aGlzO1xuXHRcdFx0XHRjb250cm9sbGVyLmVucXVldWUoYXdhaXQgcmVhZFVpbnQ4QXJyYXkocmVhZGVyLCBvZmZzZXQgKyBjaHVua09mZnNldCwgTWF0aC5taW4oY2h1bmtTaXplLCBzaXplIC0gY2h1bmtPZmZzZXQpLCBkaXNrTnVtYmVyU3RhcnQpKTtcblx0XHRcdFx0aWYgKGNodW5rT2Zmc2V0ICsgY2h1bmtTaXplID4gc2l6ZSkge1xuXHRcdFx0XHRcdGNvbnRyb2xsZXIuY2xvc2UoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLmNodW5rT2Zmc2V0ICs9IGNodW5rU2l6ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiByZWFkYWJsZTtcblx0fVxufVxuXG5jbGFzcyBXcml0ZXIgZXh0ZW5kcyBTdHJlYW0ge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0Y29uc3Qgd3JpdGVyID0gdGhpcztcblx0XHRjb25zdCB3cml0YWJsZSA9IG5ldyBXcml0YWJsZVN0cmVhbSh7XG5cdFx0XHR3cml0ZShjaHVuaykge1xuXHRcdFx0XHRyZXR1cm4gd3JpdGVyLndyaXRlVWludDhBcnJheShjaHVuayk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHdyaXRlciwgUFJPUEVSVFlfTkFNRV9XUklUQUJMRSwge1xuXHRcdFx0Z2V0KCkge1xuXHRcdFx0XHRyZXR1cm4gd3JpdGFibGU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHR3cml0ZVVpbnQ4QXJyYXkoKSB7XG5cdFx0Ly8gYWJzdHJhY3Rcblx0fVxufVxuXG5jbGFzcyBEYXRhNjRVUklSZWFkZXIgZXh0ZW5kcyBSZWFkZXIge1xuXG5cdGNvbnN0cnVjdG9yKGRhdGFVUkkpIHtcblx0XHRzdXBlcigpO1xuXHRcdGxldCBkYXRhRW5kID0gZGF0YVVSSS5sZW5ndGg7XG5cdFx0d2hpbGUgKGRhdGFVUkkuY2hhckF0KGRhdGFFbmQgLSAxKSA9PSBcIj1cIikge1xuXHRcdFx0ZGF0YUVuZC0tO1xuXHRcdH1cblx0XHRjb25zdCBkYXRhU3RhcnQgPSBkYXRhVVJJLmluZGV4T2YoXCIsXCIpICsgMTtcblx0XHRPYmplY3QuYXNzaWduKHRoaXMsIHtcblx0XHRcdGRhdGFVUkksXG5cdFx0XHRkYXRhU3RhcnQsXG5cdFx0XHRzaXplOiBNYXRoLmZsb29yKChkYXRhRW5kIC0gZGF0YVN0YXJ0KSAqIDAuNzUpXG5cdFx0fSk7XG5cdH1cblxuXHRyZWFkVWludDhBcnJheShvZmZzZXQsIGxlbmd0aCkge1xuXHRcdGNvbnN0IHtcblx0XHRcdGRhdGFTdGFydCxcblx0XHRcdGRhdGFVUklcblx0XHR9ID0gdGhpcztcblx0XHRjb25zdCBkYXRhQXJyYXkgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuXHRcdGNvbnN0IHN0YXJ0ID0gTWF0aC5mbG9vcihvZmZzZXQgLyAzKSAqIDQ7XG5cdFx0Y29uc3QgYnl0ZXMgPSBhdG9iKGRhdGFVUkkuc3Vic3RyaW5nKHN0YXJ0ICsgZGF0YVN0YXJ0LCBNYXRoLmNlaWwoKG9mZnNldCArIGxlbmd0aCkgLyAzKSAqIDQgKyBkYXRhU3RhcnQpKTtcblx0XHRjb25zdCBkZWx0YSA9IG9mZnNldCAtIE1hdGguZmxvb3Ioc3RhcnQgLyA0KSAqIDM7XG5cdFx0Zm9yIChsZXQgaW5kZXhCeXRlID0gZGVsdGE7IGluZGV4Qnl0ZSA8IGRlbHRhICsgbGVuZ3RoOyBpbmRleEJ5dGUrKykge1xuXHRcdFx0ZGF0YUFycmF5W2luZGV4Qnl0ZSAtIGRlbHRhXSA9IGJ5dGVzLmNoYXJDb2RlQXQoaW5kZXhCeXRlKTtcblx0XHR9XG5cdFx0cmV0dXJuIGRhdGFBcnJheTtcblx0fVxufVxuXG5jbGFzcyBEYXRhNjRVUklXcml0ZXIgZXh0ZW5kcyBXcml0ZXIge1xuXG5cdGNvbnN0cnVjdG9yKGNvbnRlbnRUeXBlKSB7XG5cdFx0c3VwZXIoKTtcblx0XHRPYmplY3QuYXNzaWduKHRoaXMsIHtcblx0XHRcdGRhdGE6IFwiZGF0YTpcIiArIChjb250ZW50VHlwZSB8fCBcIlwiKSArIFwiO2Jhc2U2NCxcIixcblx0XHRcdHBlbmRpbmc6IFtdXG5cdFx0fSk7XG5cdH1cblxuXHR3cml0ZVVpbnQ4QXJyYXkoYXJyYXkpIHtcblx0XHRjb25zdCB3cml0ZXIgPSB0aGlzO1xuXHRcdGxldCBpbmRleEFycmF5ID0gMDtcblx0XHRsZXQgZGF0YVN0cmluZyA9IHdyaXRlci5wZW5kaW5nO1xuXHRcdGNvbnN0IGRlbHRhID0gd3JpdGVyLnBlbmRpbmcubGVuZ3RoO1xuXHRcdHdyaXRlci5wZW5kaW5nID0gXCJcIjtcblx0XHRmb3IgKGluZGV4QXJyYXkgPSAwOyBpbmRleEFycmF5IDwgKE1hdGguZmxvb3IoKGRlbHRhICsgYXJyYXkubGVuZ3RoKSAvIDMpICogMykgLSBkZWx0YTsgaW5kZXhBcnJheSsrKSB7XG5cdFx0XHRkYXRhU3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYXJyYXlbaW5kZXhBcnJheV0pO1xuXHRcdH1cblx0XHRmb3IgKDsgaW5kZXhBcnJheSA8IGFycmF5Lmxlbmd0aDsgaW5kZXhBcnJheSsrKSB7XG5cdFx0XHR3cml0ZXIucGVuZGluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGFycmF5W2luZGV4QXJyYXldKTtcblx0XHR9XG5cdFx0aWYgKGRhdGFTdHJpbmcubGVuZ3RoID4gMikge1xuXHRcdFx0d3JpdGVyLmRhdGEgKz0gYnRvYShkYXRhU3RyaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d3JpdGVyLnBlbmRpbmcgPSBkYXRhU3RyaW5nO1xuXHRcdH1cblx0fVxuXG5cdGdldERhdGEoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZGF0YSArIGJ0b2EodGhpcy5wZW5kaW5nKTtcblx0fVxufVxuXG5jbGFzcyBCbG9iUmVhZGVyIGV4dGVuZHMgUmVhZGVyIHtcblxuXHRjb25zdHJ1Y3RvcihibG9iKSB7XG5cdFx0c3VwZXIoKTtcblx0XHRPYmplY3QuYXNzaWduKHRoaXMsIHtcblx0XHRcdGJsb2IsXG5cdFx0XHRzaXplOiBibG9iLnNpemVcblx0XHR9KTtcblx0fVxuXG5cdGFzeW5jIHJlYWRVaW50OEFycmF5KG9mZnNldCwgbGVuZ3RoKSB7XG5cdFx0Y29uc3QgcmVhZGVyID0gdGhpcztcblx0XHRjb25zdCBvZmZzZXRFbmQgPSBvZmZzZXQgKyBsZW5ndGg7XG5cdFx0Y29uc3QgYmxvYiA9IG9mZnNldCB8fCBvZmZzZXRFbmQgPCByZWFkZXIuc2l6ZSA/IHJlYWRlci5ibG9iLnNsaWNlKG9mZnNldCwgb2Zmc2V0RW5kKSA6IHJlYWRlci5ibG9iO1xuXHRcdGxldCBhcnJheUJ1ZmZlciA9IGF3YWl0IGJsb2IuYXJyYXlCdWZmZXIoKTtcblx0XHRpZiAoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCA+IGxlbmd0aCkge1xuXHRcdFx0YXJyYXlCdWZmZXIgPSBhcnJheUJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldEVuZCk7XG5cdFx0fVxuXHRcdHJldHVybiBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcik7XG5cdH1cbn1cblxuY2xhc3MgQmxvYldyaXRlciBleHRlbmRzIFN0cmVhbSB7XG5cblx0Y29uc3RydWN0b3IoY29udGVudFR5cGUpIHtcblx0XHRzdXBlcigpO1xuXHRcdGNvbnN0IHdyaXRlciA9IHRoaXM7XG5cdFx0Y29uc3QgdHJhbnNmb3JtU3RyZWFtID0gbmV3IFRyYW5zZm9ybVN0cmVhbSgpO1xuXHRcdGNvbnN0IGhlYWRlcnMgPSBbXTtcblx0XHRpZiAoY29udGVudFR5cGUpIHtcblx0XHRcdGhlYWRlcnMucHVzaChbSFRUUF9IRUFERVJfQ09OVEVOVF9UWVBFLCBjb250ZW50VHlwZV0pO1xuXHRcdH1cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkod3JpdGVyLCBQUk9QRVJUWV9OQU1FX1dSSVRBQkxFLCB7XG5cdFx0XHRnZXQoKSB7XG5cdFx0XHRcdHJldHVybiB0cmFuc2Zvcm1TdHJlYW0ud3JpdGFibGU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0d3JpdGVyLmJsb2IgPSBuZXcgUmVzcG9uc2UodHJhbnNmb3JtU3RyZWFtLnJlYWRhYmxlLCB7IGhlYWRlcnMgfSkuYmxvYigpO1xuXHR9XG5cblx0Z2V0RGF0YSgpIHtcblx0XHRyZXR1cm4gdGhpcy5ibG9iO1xuXHR9XG59XG5cbmNsYXNzIFRleHRSZWFkZXIgZXh0ZW5kcyBCbG9iUmVhZGVyIHtcblxuXHRjb25zdHJ1Y3Rvcih0ZXh0KSB7XG5cdFx0c3VwZXIobmV3IEJsb2IoW3RleHRdLCB7IHR5cGU6IENPTlRFTlRfVFlQRV9URVhUX1BMQUlOIH0pKTtcblx0fVxufVxuXG5jbGFzcyBUZXh0V3JpdGVyIGV4dGVuZHMgQmxvYldyaXRlciB7XG5cblx0Y29uc3RydWN0b3IoZW5jb2RpbmcpIHtcblx0XHRzdXBlcihlbmNvZGluZyk7XG5cdFx0T2JqZWN0LmFzc2lnbih0aGlzLCB7XG5cdFx0XHRlbmNvZGluZyxcblx0XHRcdHV0Zjg6ICFlbmNvZGluZyB8fCBlbmNvZGluZy50b0xvd2VyQ2FzZSgpID09IFwidXRmLThcIlxuXHRcdH0pO1xuXHR9XG5cblx0YXN5bmMgZ2V0RGF0YSgpIHtcblx0XHRjb25zdCB7XG5cdFx0XHRlbmNvZGluZyxcblx0XHRcdHV0Zjhcblx0XHR9ID0gdGhpcztcblx0XHRjb25zdCBibG9iID0gYXdhaXQgc3VwZXIuZ2V0RGF0YSgpO1xuXHRcdGlmIChibG9iLnRleHQgJiYgdXRmOCkge1xuXHRcdFx0cmV0dXJuIGJsb2IudGV4dCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdFx0T2JqZWN0LmFzc2lnbihyZWFkZXIsIHtcblx0XHRcdFx0XHRvbmxvYWQ6ICh7IHRhcmdldCB9KSA9PiByZXNvbHZlKHRhcmdldC5yZXN1bHQpLFxuXHRcdFx0XHRcdG9uZXJyb3I6ICgpID0+IHJlamVjdChyZWFkZXIuZXJyb3IpXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZWFkZXIucmVhZEFzVGV4dChibG9iLCBlbmNvZGluZyk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cbn1cblxuY2xhc3MgRmV0Y2hSZWFkZXIgZXh0ZW5kcyBSZWFkZXIge1xuXG5cdGNvbnN0cnVjdG9yKHVybCwgb3B0aW9ucykge1xuXHRcdHN1cGVyKCk7XG5cdFx0Y3JlYXRlSHRwUmVhZGVyKHRoaXMsIHVybCwgb3B0aW9ucyk7XG5cdH1cblxuXHRhc3luYyBpbml0KCkge1xuXHRcdGF3YWl0IGluaXRIdHRwUmVhZGVyKHRoaXMsIHNlbmRGZXRjaFJlcXVlc3QsIGdldEZldGNoUmVxdWVzdERhdGEpO1xuXHRcdHN1cGVyLmluaXQoKTtcblx0fVxuXG5cdHJlYWRVaW50OEFycmF5KGluZGV4LCBsZW5ndGgpIHtcblx0XHRyZXR1cm4gcmVhZFVpbnQ4QXJyYXlIdHRwUmVhZGVyKHRoaXMsIGluZGV4LCBsZW5ndGgsIHNlbmRGZXRjaFJlcXVlc3QsIGdldEZldGNoUmVxdWVzdERhdGEpO1xuXHR9XG59XG5cbmNsYXNzIFhIUlJlYWRlciBleHRlbmRzIFJlYWRlciB7XG5cblx0Y29uc3RydWN0b3IodXJsLCBvcHRpb25zKSB7XG5cdFx0c3VwZXIoKTtcblx0XHRjcmVhdGVIdHBSZWFkZXIodGhpcywgdXJsLCBvcHRpb25zKTtcblx0fVxuXG5cdGFzeW5jIGluaXQoKSB7XG5cdFx0YXdhaXQgaW5pdEh0dHBSZWFkZXIodGhpcywgc2VuZFhNTEh0dHBSZXF1ZXN0LCBnZXRYTUxIdHRwUmVxdWVzdERhdGEpO1xuXHRcdHN1cGVyLmluaXQoKTtcblx0fVxuXG5cdHJlYWRVaW50OEFycmF5KGluZGV4LCBsZW5ndGgpIHtcblx0XHRyZXR1cm4gcmVhZFVpbnQ4QXJyYXlIdHRwUmVhZGVyKHRoaXMsIGluZGV4LCBsZW5ndGgsIHNlbmRYTUxIdHRwUmVxdWVzdCwgZ2V0WE1MSHR0cFJlcXVlc3REYXRhKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVIdHBSZWFkZXIoaHR0cFJlYWRlciwgdXJsLCBvcHRpb25zKSB7XG5cdGNvbnN0IHtcblx0XHRwcmV2ZW50SGVhZFJlcXVlc3QsXG5cdFx0dXNlUmFuZ2VIZWFkZXIsXG5cdFx0Zm9yY2VSYW5nZVJlcXVlc3RzXG5cdH0gPSBvcHRpb25zO1xuXHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG5cdGRlbGV0ZSBvcHRpb25zLnByZXZlbnRIZWFkUmVxdWVzdDtcblx0ZGVsZXRlIG9wdGlvbnMudXNlUmFuZ2VIZWFkZXI7XG5cdGRlbGV0ZSBvcHRpb25zLmZvcmNlUmFuZ2VSZXF1ZXN0cztcblx0ZGVsZXRlIG9wdGlvbnMudXNlWEhSO1xuXHRPYmplY3QuYXNzaWduKGh0dHBSZWFkZXIsIHtcblx0XHR1cmwsXG5cdFx0b3B0aW9ucyxcblx0XHRwcmV2ZW50SGVhZFJlcXVlc3QsXG5cdFx0dXNlUmFuZ2VIZWFkZXIsXG5cdFx0Zm9yY2VSYW5nZVJlcXVlc3RzXG5cdH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBpbml0SHR0cFJlYWRlcihodHRwUmVhZGVyLCBzZW5kUmVxdWVzdCwgZ2V0UmVxdWVzdERhdGEpIHtcblx0Y29uc3Qge1xuXHRcdHVybCxcblx0XHR1c2VSYW5nZUhlYWRlcixcblx0XHRmb3JjZVJhbmdlUmVxdWVzdHNcblx0fSA9IGh0dHBSZWFkZXI7XG5cdGlmIChpc0h0dHBGYW1pbHkodXJsKSAmJiAodXNlUmFuZ2VIZWFkZXIgfHwgZm9yY2VSYW5nZVJlcXVlc3RzKSkge1xuXHRcdGNvbnN0IHsgaGVhZGVycyB9ID0gYXdhaXQgc2VuZFJlcXVlc3QoSFRUUF9NRVRIT0RfR0VULCBodHRwUmVhZGVyLCBnZXRSYW5nZUhlYWRlcnMoaHR0cFJlYWRlcikpO1xuXHRcdGlmICghZm9yY2VSYW5nZVJlcXVlc3RzICYmIGhlYWRlcnMuZ2V0KEhUVFBfSEVBREVSX0FDQ0VQVF9SQU5HRVMpICE9IEhUVFBfUkFOR0VfVU5JVCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9IVFRQX1JBTkdFKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGV0IGNvbnRlbnRTaXplO1xuXHRcdFx0Y29uc3QgY29udGVudFJhbmdlSGVhZGVyID0gaGVhZGVycy5nZXQoSFRUUF9IRUFERVJfQ09OVEVOVF9SQU5HRSk7XG5cdFx0XHRpZiAoY29udGVudFJhbmdlSGVhZGVyKSB7XG5cdFx0XHRcdGNvbnN0IHNwbGl0SGVhZGVyID0gY29udGVudFJhbmdlSGVhZGVyLnRyaW0oKS5zcGxpdCgvXFxzKlxcL1xccyovKTtcblx0XHRcdFx0aWYgKHNwbGl0SGVhZGVyLmxlbmd0aCkge1xuXHRcdFx0XHRcdGNvbnN0IGhlYWRlclZhbHVlID0gc3BsaXRIZWFkZXJbMV07XG5cdFx0XHRcdFx0aWYgKGhlYWRlclZhbHVlICYmIGhlYWRlclZhbHVlICE9IFwiKlwiKSB7XG5cdFx0XHRcdFx0XHRjb250ZW50U2l6ZSA9IE51bWJlcihoZWFkZXJWYWx1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoY29udGVudFNpemUgPT09IFVOREVGSU5FRF9WQUxVRSkge1xuXHRcdFx0XHRhd2FpdCBnZXRDb250ZW50TGVuZ3RoKGh0dHBSZWFkZXIsIHNlbmRSZXF1ZXN0LCBnZXRSZXF1ZXN0RGF0YSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRodHRwUmVhZGVyLnNpemUgPSBjb250ZW50U2l6ZTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0YXdhaXQgZ2V0Q29udGVudExlbmd0aChodHRwUmVhZGVyLCBzZW5kUmVxdWVzdCwgZ2V0UmVxdWVzdERhdGEpO1xuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlYWRVaW50OEFycmF5SHR0cFJlYWRlcihodHRwUmVhZGVyLCBpbmRleCwgbGVuZ3RoLCBzZW5kUmVxdWVzdCwgZ2V0UmVxdWVzdERhdGEpIHtcblx0Y29uc3Qge1xuXHRcdHVzZVJhbmdlSGVhZGVyLFxuXHRcdGZvcmNlUmFuZ2VSZXF1ZXN0cyxcblx0XHRvcHRpb25zXG5cdH0gPSBodHRwUmVhZGVyO1xuXHRpZiAodXNlUmFuZ2VIZWFkZXIgfHwgZm9yY2VSYW5nZVJlcXVlc3RzKSB7XG5cdFx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzZW5kUmVxdWVzdChIVFRQX01FVEhPRF9HRVQsIGh0dHBSZWFkZXIsIGdldFJhbmdlSGVhZGVycyhodHRwUmVhZGVyLCBpbmRleCwgbGVuZ3RoKSk7XG5cdFx0aWYgKHJlc3BvbnNlLnN0YXR1cyAhPSAyMDYpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfSFRUUF9SQU5HRSk7XG5cdFx0fVxuXHRcdHJldHVybiBuZXcgVWludDhBcnJheShhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpKTtcblx0fSBlbHNlIHtcblx0XHRjb25zdCB7IGRhdGEgfSA9IGh0dHBSZWFkZXI7XG5cdFx0aWYgKCFkYXRhKSB7XG5cdFx0XHRhd2FpdCBnZXRSZXF1ZXN0RGF0YShodHRwUmVhZGVyLCBvcHRpb25zKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5ldyBVaW50OEFycmF5KGh0dHBSZWFkZXIuZGF0YS5zdWJhcnJheShpbmRleCwgaW5kZXggKyBsZW5ndGgpKTtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXRSYW5nZUhlYWRlcnMoaHR0cFJlYWRlciwgaW5kZXggPSAwLCBsZW5ndGggPSAxKSB7XG5cdHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBnZXRIZWFkZXJzKGh0dHBSZWFkZXIpLCB7IFtIVFRQX0hFQURFUl9SQU5HRV06IEhUVFBfUkFOR0VfVU5JVCArIFwiPVwiICsgaW5kZXggKyBcIi1cIiArIChpbmRleCArIGxlbmd0aCAtIDEpIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRIZWFkZXJzKHsgb3B0aW9ucyB9KSB7XG5cdGNvbnN0IHsgaGVhZGVycyB9ID0gb3B0aW9ucztcblx0aWYgKGhlYWRlcnMpIHtcblx0XHRpZiAoU3ltYm9sLml0ZXJhdG9yIGluIGhlYWRlcnMpIHtcblx0XHRcdHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoaGVhZGVycyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBoZWFkZXJzO1xuXHRcdH1cblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRGZXRjaFJlcXVlc3REYXRhKGh0dHBSZWFkZXIpIHtcblx0YXdhaXQgZ2V0UmVxdWVzdERhdGEoaHR0cFJlYWRlciwgc2VuZEZldGNoUmVxdWVzdCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFhNTEh0dHBSZXF1ZXN0RGF0YShodHRwUmVhZGVyKSB7XG5cdGF3YWl0IGdldFJlcXVlc3REYXRhKGh0dHBSZWFkZXIsIHNlbmRYTUxIdHRwUmVxdWVzdCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFJlcXVlc3REYXRhKGh0dHBSZWFkZXIsIHNlbmRSZXF1ZXN0KSB7XG5cdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc2VuZFJlcXVlc3QoSFRUUF9NRVRIT0RfR0VULCBodHRwUmVhZGVyLCBnZXRIZWFkZXJzKGh0dHBSZWFkZXIpKTtcblx0aHR0cFJlYWRlci5kYXRhID0gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSk7XG5cdGlmICghaHR0cFJlYWRlci5zaXplKSB7XG5cdFx0aHR0cFJlYWRlci5zaXplID0gaHR0cFJlYWRlci5kYXRhLmxlbmd0aDtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRDb250ZW50TGVuZ3RoKGh0dHBSZWFkZXIsIHNlbmRSZXF1ZXN0LCBnZXRSZXF1ZXN0RGF0YSkge1xuXHRpZiAoaHR0cFJlYWRlci5wcmV2ZW50SGVhZFJlcXVlc3QpIHtcblx0XHRhd2FpdCBnZXRSZXF1ZXN0RGF0YShodHRwUmVhZGVyLCBodHRwUmVhZGVyLm9wdGlvbnMpO1xuXHR9IGVsc2Uge1xuXHRcdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc2VuZFJlcXVlc3QoSFRUUF9NRVRIT0RfSEVBRCwgaHR0cFJlYWRlciwgZ2V0SGVhZGVycyhodHRwUmVhZGVyKSk7XG5cdFx0Y29uc3QgY29udGVudExlbmd0aCA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KEhUVFBfSEVBREVSX0NPTlRFTlRfTEVOR1RIKTtcblx0XHRpZiAoY29udGVudExlbmd0aCkge1xuXHRcdFx0aHR0cFJlYWRlci5zaXplID0gTnVtYmVyKGNvbnRlbnRMZW5ndGgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhd2FpdCBnZXRSZXF1ZXN0RGF0YShodHRwUmVhZGVyLCBodHRwUmVhZGVyLm9wdGlvbnMpO1xuXHRcdH1cblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBzZW5kRmV0Y2hSZXF1ZXN0KG1ldGhvZCwgeyBvcHRpb25zLCB1cmwgfSwgaGVhZGVycykge1xuXHRjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywgeyBtZXRob2QsIGhlYWRlcnMgfSkpO1xuXHRpZiAocmVzcG9uc2Uuc3RhdHVzIDwgNDAwKSB7XG5cdFx0cmV0dXJuIHJlc3BvbnNlO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IHJlc3BvbnNlLnN0YXR1cyA9PSA0MTYgPyBuZXcgRXJyb3IoRVJSX0hUVFBfUkFOR0UpIDogbmV3IEVycm9yKEVSUl9IVFRQX1NUQVRVUyArIChyZXNwb25zZS5zdGF0dXNUZXh0IHx8IHJlc3BvbnNlLnN0YXR1cykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHNlbmRYTUxIdHRwUmVxdWVzdChtZXRob2QsIHsgdXJsIH0sIGhlYWRlcnMpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRjb25zdCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdFx0cmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XG5cdFx0XHRpZiAocmVxdWVzdC5zdGF0dXMgPCA0MDApIHtcblx0XHRcdFx0Y29uc3QgaGVhZGVycyA9IFtdO1xuXHRcdFx0XHRyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpLnRyaW0oKS5zcGxpdCgvW1xcclxcbl0rLykuZm9yRWFjaChoZWFkZXIgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHNwbGl0SGVhZGVyID0gaGVhZGVyLnRyaW0oKS5zcGxpdCgvXFxzKjpcXHMqLyk7XG5cdFx0XHRcdFx0c3BsaXRIZWFkZXJbMF0gPSBzcGxpdEhlYWRlclswXS50cmltKCkucmVwbGFjZSgvXlthLXpdfC1bYS16XS9nLCB2YWx1ZSA9PiB2YWx1ZS50b1VwcGVyQ2FzZSgpKTtcblx0XHRcdFx0XHRoZWFkZXJzLnB1c2goc3BsaXRIZWFkZXIpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmVzb2x2ZSh7XG5cdFx0XHRcdFx0c3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcblx0XHRcdFx0XHRhcnJheUJ1ZmZlcjogKCkgPT4gcmVxdWVzdC5yZXNwb25zZSxcblx0XHRcdFx0XHRoZWFkZXJzOiBuZXcgTWFwKGhlYWRlcnMpXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVqZWN0KHJlcXVlc3Quc3RhdHVzID09IDQxNiA/IG5ldyBFcnJvcihFUlJfSFRUUF9SQU5HRSkgOiBuZXcgRXJyb3IoRVJSX0hUVFBfU1RBVFVTICsgKHJlcXVlc3Quc3RhdHVzVGV4dCB8fCByZXF1ZXN0LnN0YXR1cykpKTtcblx0XHRcdH1cblx0XHR9LCBmYWxzZSk7XG5cdFx0cmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgZXZlbnQgPT4gcmVqZWN0KGV2ZW50LmRldGFpbCA/IGV2ZW50LmRldGFpbC5lcnJvciA6IG5ldyBFcnJvcihcIk5ldHdvcmsgZXJyb3JcIikpLCBmYWxzZSk7XG5cdFx0cmVxdWVzdC5vcGVuKG1ldGhvZCwgdXJsKTtcblx0XHRpZiAoaGVhZGVycykge1xuXHRcdFx0Zm9yIChjb25zdCBlbnRyeSBvZiBPYmplY3QuZW50cmllcyhoZWFkZXJzKSkge1xuXHRcdFx0XHRyZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoZW50cnlbMF0sIGVudHJ5WzFdKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVxdWVzdC5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG5cdFx0cmVxdWVzdC5zZW5kKCk7XG5cdH0pO1xufVxuXG5jbGFzcyBIdHRwUmVhZGVyIGV4dGVuZHMgUmVhZGVyIHtcblxuXHRjb25zdHJ1Y3Rvcih1cmwsIG9wdGlvbnMgPSB7fSkge1xuXHRcdHN1cGVyKCk7XG5cdFx0T2JqZWN0LmFzc2lnbih0aGlzLCB7XG5cdFx0XHR1cmwsXG5cdFx0XHRyZWFkZXI6IG9wdGlvbnMudXNlWEhSID8gbmV3IFhIUlJlYWRlcih1cmwsIG9wdGlvbnMpIDogbmV3IEZldGNoUmVhZGVyKHVybCwgb3B0aW9ucylcblx0XHR9KTtcblx0fVxuXG5cdHNldCBzaXplKHZhbHVlKSB7XG5cdFx0Ly8gaWdub3JlZFxuXHR9XG5cblx0Z2V0IHNpemUoKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVhZGVyLnNpemU7XG5cdH1cblxuXHRhc3luYyBpbml0KCkge1xuXHRcdGF3YWl0IHRoaXMucmVhZGVyLmluaXQoKTtcblx0XHRzdXBlci5pbml0KCk7XG5cdH1cblxuXHRyZWFkVWludDhBcnJheShpbmRleCwgbGVuZ3RoKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVhZGVyLnJlYWRVaW50OEFycmF5KGluZGV4LCBsZW5ndGgpO1xuXHR9XG59XG5cbmNsYXNzIEh0dHBSYW5nZVJlYWRlciBleHRlbmRzIEh0dHBSZWFkZXIge1xuXG5cdGNvbnN0cnVjdG9yKHVybCwgb3B0aW9ucyA9IHt9KSB7XG5cdFx0b3B0aW9ucy51c2VSYW5nZUhlYWRlciA9IHRydWU7XG5cdFx0c3VwZXIodXJsLCBvcHRpb25zKTtcblx0fVxufVxuXG5cbmNsYXNzIFVpbnQ4QXJyYXlSZWFkZXIgZXh0ZW5kcyBSZWFkZXIge1xuXG5cdGNvbnN0cnVjdG9yKGFycmF5KSB7XG5cdFx0c3VwZXIoKTtcblx0XHRPYmplY3QuYXNzaWduKHRoaXMsIHtcblx0XHRcdGFycmF5LFxuXHRcdFx0c2l6ZTogYXJyYXkubGVuZ3RoXG5cdFx0fSk7XG5cdH1cblxuXHRyZWFkVWludDhBcnJheShpbmRleCwgbGVuZ3RoKSB7XG5cdFx0cmV0dXJuIHRoaXMuYXJyYXkuc2xpY2UoaW5kZXgsIGluZGV4ICsgbGVuZ3RoKTtcblx0fVxufVxuXG5jbGFzcyBVaW50OEFycmF5V3JpdGVyIGV4dGVuZHMgV3JpdGVyIHtcblxuXHRpbml0KGluaXRTaXplID0gMCkge1xuXHRcdE9iamVjdC5hc3NpZ24odGhpcywge1xuXHRcdFx0b2Zmc2V0OiAwLFxuXHRcdFx0YXJyYXk6IG5ldyBVaW50OEFycmF5KGluaXRTaXplKVxuXHRcdH0pO1xuXHRcdHN1cGVyLmluaXQoKTtcblx0fVxuXG5cdHdyaXRlVWludDhBcnJheShhcnJheSkge1xuXHRcdGNvbnN0IHdyaXRlciA9IHRoaXM7XG5cdFx0aWYgKHdyaXRlci5vZmZzZXQgKyBhcnJheS5sZW5ndGggPiB3cml0ZXIuYXJyYXkubGVuZ3RoKSB7XG5cdFx0XHRjb25zdCBwcmV2aW91c0FycmF5ID0gd3JpdGVyLmFycmF5O1xuXHRcdFx0d3JpdGVyLmFycmF5ID0gbmV3IFVpbnQ4QXJyYXkocHJldmlvdXNBcnJheS5sZW5ndGggKyBhcnJheS5sZW5ndGgpO1xuXHRcdFx0d3JpdGVyLmFycmF5LnNldChwcmV2aW91c0FycmF5KTtcblx0XHR9XG5cdFx0d3JpdGVyLmFycmF5LnNldChhcnJheSwgd3JpdGVyLm9mZnNldCk7XG5cdFx0d3JpdGVyLm9mZnNldCArPSBhcnJheS5sZW5ndGg7XG5cdH1cblxuXHRnZXREYXRhKCkge1xuXHRcdHJldHVybiB0aGlzLmFycmF5O1xuXHR9XG59XG5cbmNsYXNzIFNwbGl0RGF0YVJlYWRlciBleHRlbmRzIFJlYWRlciB7XG5cblx0Y29uc3RydWN0b3IocmVhZGVycykge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5yZWFkZXJzID0gcmVhZGVycztcblx0fVxuXG5cdGFzeW5jIGluaXQoKSB7XG5cdFx0Y29uc3QgcmVhZGVyID0gdGhpcztcblx0XHRjb25zdCB7IHJlYWRlcnMgfSA9IHJlYWRlcjtcblx0XHRyZWFkZXIubGFzdERpc2tOdW1iZXIgPSAwO1xuXHRcdHJlYWRlci5sYXN0RGlza09mZnNldCA9IDA7XG5cdFx0YXdhaXQgUHJvbWlzZS5hbGwocmVhZGVycy5tYXAoYXN5bmMgKGRpc2tSZWFkZXIsIGluZGV4RGlza1JlYWRlcikgPT4ge1xuXHRcdFx0YXdhaXQgZGlza1JlYWRlci5pbml0KCk7XG5cdFx0XHRpZiAoaW5kZXhEaXNrUmVhZGVyICE9IHJlYWRlcnMubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRyZWFkZXIubGFzdERpc2tPZmZzZXQgKz0gZGlza1JlYWRlci5zaXplO1xuXHRcdFx0fVxuXHRcdFx0cmVhZGVyLnNpemUgKz0gZGlza1JlYWRlci5zaXplO1xuXHRcdH0pKTtcblx0XHRzdXBlci5pbml0KCk7XG5cdH1cblxuXHRhc3luYyByZWFkVWludDhBcnJheShvZmZzZXQsIGxlbmd0aCwgZGlza051bWJlciA9IDApIHtcblx0XHRjb25zdCByZWFkZXIgPSB0aGlzO1xuXHRcdGNvbnN0IHsgcmVhZGVycyB9ID0gdGhpcztcblx0XHRsZXQgcmVzdWx0O1xuXHRcdGxldCBjdXJyZW50RGlza051bWJlciA9IGRpc2tOdW1iZXI7XG5cdFx0aWYgKGN1cnJlbnREaXNrTnVtYmVyID09IC0xKSB7XG5cdFx0XHRjdXJyZW50RGlza051bWJlciA9IHJlYWRlcnMubGVuZ3RoIC0gMTtcblx0XHR9XG5cdFx0bGV0IGN1cnJlbnRSZWFkZXJPZmZzZXQgPSBvZmZzZXQ7XG5cdFx0d2hpbGUgKGN1cnJlbnRSZWFkZXJPZmZzZXQgPj0gcmVhZGVyc1tjdXJyZW50RGlza051bWJlcl0uc2l6ZSkge1xuXHRcdFx0Y3VycmVudFJlYWRlck9mZnNldCAtPSByZWFkZXJzW2N1cnJlbnREaXNrTnVtYmVyXS5zaXplO1xuXHRcdFx0Y3VycmVudERpc2tOdW1iZXIrKztcblx0XHR9XG5cdFx0Y29uc3QgY3VycmVudFJlYWRlciA9IHJlYWRlcnNbY3VycmVudERpc2tOdW1iZXJdO1xuXHRcdGNvbnN0IGN1cnJlbnRSZWFkZXJTaXplID0gY3VycmVudFJlYWRlci5zaXplO1xuXHRcdGlmIChjdXJyZW50UmVhZGVyT2Zmc2V0ICsgbGVuZ3RoIDw9IGN1cnJlbnRSZWFkZXJTaXplKSB7XG5cdFx0XHRyZXN1bHQgPSBhd2FpdCByZWFkVWludDhBcnJheShjdXJyZW50UmVhZGVyLCBjdXJyZW50UmVhZGVyT2Zmc2V0LCBsZW5ndGgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBjaHVua0xlbmd0aCA9IGN1cnJlbnRSZWFkZXJTaXplIC0gY3VycmVudFJlYWRlck9mZnNldDtcblx0XHRcdHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG5cdFx0XHRyZXN1bHQuc2V0KGF3YWl0IHJlYWRVaW50OEFycmF5KGN1cnJlbnRSZWFkZXIsIGN1cnJlbnRSZWFkZXJPZmZzZXQsIGNodW5rTGVuZ3RoKSk7XG5cdFx0XHRyZXN1bHQuc2V0KGF3YWl0IHJlYWRlci5yZWFkVWludDhBcnJheShvZmZzZXQgKyBjaHVua0xlbmd0aCwgbGVuZ3RoIC0gY2h1bmtMZW5ndGgsIGRpc2tOdW1iZXIpLCBjaHVua0xlbmd0aCk7XG5cdFx0fVxuXHRcdHJlYWRlci5sYXN0RGlza051bWJlciA9IE1hdGgubWF4KGN1cnJlbnREaXNrTnVtYmVyLCByZWFkZXIubGFzdERpc2tOdW1iZXIpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cbn1cblxuY2xhc3MgU3BsaXREYXRhV3JpdGVyIGV4dGVuZHMgU3RyZWFtIHtcblxuXHRjb25zdHJ1Y3Rvcih3cml0ZXJHZW5lcmF0b3IsIG1heFNpemUgPSA0Mjk0OTY3Mjk1KSB7XG5cdFx0c3VwZXIoKTtcblx0XHRjb25zdCB6aXBXcml0ZXIgPSB0aGlzO1xuXHRcdE9iamVjdC5hc3NpZ24oemlwV3JpdGVyLCB7XG5cdFx0XHRkaXNrTnVtYmVyOiAwLFxuXHRcdFx0ZGlza09mZnNldDogMCxcblx0XHRcdHNpemU6IDAsXG5cdFx0XHRtYXhTaXplLFxuXHRcdFx0YXZhaWxhYmxlU2l6ZTogbWF4U2l6ZVxuXHRcdH0pO1xuXHRcdGxldCBkaXNrU291cmNlV3JpdGVyLCBkaXNrV3JpdGFibGUsIGRpc2tXcml0ZXI7XG5cdFx0Y29uc3Qgd3JpdGFibGUgPSBuZXcgV3JpdGFibGVTdHJlYW0oe1xuXHRcdFx0YXN5bmMgd3JpdGUoY2h1bmspIHtcblx0XHRcdFx0Y29uc3QgeyBhdmFpbGFibGVTaXplIH0gPSB6aXBXcml0ZXI7XG5cdFx0XHRcdGlmICghZGlza1dyaXRlcikge1xuXHRcdFx0XHRcdGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IGF3YWl0IHdyaXRlckdlbmVyYXRvci5uZXh0KCk7XG5cdFx0XHRcdFx0aWYgKGRvbmUgJiYgIXZhbHVlKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0lURVJBVE9SX0NPTVBMRVRFRF9UT09fU09PTik7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGRpc2tTb3VyY2VXcml0ZXIgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGRpc2tTb3VyY2VXcml0ZXIuc2l6ZSA9IDA7XG5cdFx0XHRcdFx0XHRpZiAoZGlza1NvdXJjZVdyaXRlci5tYXhTaXplKSB7XG5cdFx0XHRcdFx0XHRcdHppcFdyaXRlci5tYXhTaXplID0gZGlza1NvdXJjZVdyaXRlci5tYXhTaXplO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0emlwV3JpdGVyLmF2YWlsYWJsZVNpemUgPSB6aXBXcml0ZXIubWF4U2l6ZTtcblx0XHRcdFx0XHRcdGF3YWl0IGluaXRTdHJlYW0oZGlza1NvdXJjZVdyaXRlcik7XG5cdFx0XHRcdFx0XHRkaXNrV3JpdGFibGUgPSB2YWx1ZS53cml0YWJsZTtcblx0XHRcdFx0XHRcdGRpc2tXcml0ZXIgPSBkaXNrV3JpdGFibGUuZ2V0V3JpdGVyKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGF3YWl0IHRoaXMud3JpdGUoY2h1bmspO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGNodW5rLmxlbmd0aCA+PSBhdmFpbGFibGVTaXplKSB7XG5cdFx0XHRcdFx0YXdhaXQgd3JpdGVDaHVuayhjaHVuay5zbGljZSgwLCBhdmFpbGFibGVTaXplKSk7XG5cdFx0XHRcdFx0YXdhaXQgY2xvc2VEaXNrKCk7XG5cdFx0XHRcdFx0emlwV3JpdGVyLmRpc2tPZmZzZXQgKz0gZGlza1NvdXJjZVdyaXRlci5zaXplO1xuXHRcdFx0XHRcdHppcFdyaXRlci5kaXNrTnVtYmVyKys7XG5cdFx0XHRcdFx0ZGlza1dyaXRlciA9IG51bGw7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy53cml0ZShjaHVuay5zbGljZShhdmFpbGFibGVTaXplKSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YXdhaXQgd3JpdGVDaHVuayhjaHVuayk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRhc3luYyBjbG9zZSgpIHtcblx0XHRcdFx0YXdhaXQgZGlza1dyaXRlci5yZWFkeTtcblx0XHRcdFx0YXdhaXQgY2xvc2VEaXNrKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHppcFdyaXRlciwgUFJPUEVSVFlfTkFNRV9XUklUQUJMRSwge1xuXHRcdFx0Z2V0KCkge1xuXHRcdFx0XHRyZXR1cm4gd3JpdGFibGU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3luYyBmdW5jdGlvbiB3cml0ZUNodW5rKGNodW5rKSB7XG5cdFx0XHRjb25zdCBjaHVua0xlbmd0aCA9IGNodW5rLmxlbmd0aDtcblx0XHRcdGlmIChjaHVua0xlbmd0aCkge1xuXHRcdFx0XHRhd2FpdCBkaXNrV3JpdGVyLnJlYWR5O1xuXHRcdFx0XHRhd2FpdCBkaXNrV3JpdGVyLndyaXRlKGNodW5rKTtcblx0XHRcdFx0ZGlza1NvdXJjZVdyaXRlci5zaXplICs9IGNodW5rTGVuZ3RoO1xuXHRcdFx0XHR6aXBXcml0ZXIuc2l6ZSArPSBjaHVua0xlbmd0aDtcblx0XHRcdFx0emlwV3JpdGVyLmF2YWlsYWJsZVNpemUgLT0gY2h1bmtMZW5ndGg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0YXN5bmMgZnVuY3Rpb24gY2xvc2VEaXNrKCkge1xuXHRcdFx0ZGlza1dyaXRhYmxlLnNpemUgPSBkaXNrU291cmNlV3JpdGVyLnNpemU7XG5cdFx0XHRhd2FpdCBkaXNrV3JpdGVyLmNsb3NlKCk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGlzSHR0cEZhbWlseSh1cmwpIHtcblx0Y29uc3QgeyBiYXNlVVJMIH0gPSBnZXRDb25maWd1cmF0aW9uKCk7XG5cdGNvbnN0IHsgcHJvdG9jb2wgfSA9IG5ldyBVUkwodXJsLCBiYXNlVVJMKTtcblx0cmV0dXJuIHByb3RvY29sID09IFwiaHR0cDpcIiB8fCBwcm90b2NvbCA9PSBcImh0dHBzOlwiO1xufVxuXG5hc3luYyBmdW5jdGlvbiBpbml0U3RyZWFtKHN0cmVhbSwgaW5pdFNpemUpIHtcblx0aWYgKHN0cmVhbS5pbml0ICYmICFzdHJlYW0uaW5pdGlhbGl6ZWQpIHtcblx0XHRhd2FpdCBzdHJlYW0uaW5pdChpbml0U2l6ZSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gaW5pdFJlYWRlcihyZWFkZXIpIHtcblx0aWYgKEFycmF5LmlzQXJyYXkocmVhZGVyKSkge1xuXHRcdHJlYWRlciA9IG5ldyBTcGxpdERhdGFSZWFkZXIocmVhZGVyKTtcblx0fVxuXHRpZiAocmVhZGVyIGluc3RhbmNlb2YgUmVhZGFibGVTdHJlYW0pIHtcblx0XHRyZWFkZXIgPSB7XG5cdFx0XHRyZWFkYWJsZTogcmVhZGVyXG5cdFx0fTtcblx0fVxuXHRyZXR1cm4gcmVhZGVyO1xufVxuXG5mdW5jdGlvbiBpbml0V3JpdGVyKHdyaXRlcikge1xuXHRpZiAod3JpdGVyLndyaXRhYmxlID09PSBVTkRFRklORURfVkFMVUUgJiYgdHlwZW9mIHdyaXRlci5uZXh0ID09IEZVTkNUSU9OX1RZUEUpIHtcblx0XHR3cml0ZXIgPSBuZXcgU3BsaXREYXRhV3JpdGVyKHdyaXRlcik7XG5cdH1cblx0aWYgKHdyaXRlciBpbnN0YW5jZW9mIFdyaXRhYmxlU3RyZWFtKSB7XG5cdFx0d3JpdGVyID0ge1xuXHRcdFx0d3JpdGFibGU6IHdyaXRlclxuXHRcdH07XG5cdH1cblx0Y29uc3QgeyB3cml0YWJsZSB9ID0gd3JpdGVyO1xuXHRpZiAod3JpdGFibGUuc2l6ZSA9PT0gVU5ERUZJTkVEX1ZBTFVFKSB7XG5cdFx0d3JpdGFibGUuc2l6ZSA9IDA7XG5cdH1cblx0Y29uc3Qgc3BsaXRaaXBGaWxlID0gd3JpdGVyIGluc3RhbmNlb2YgU3BsaXREYXRhV3JpdGVyO1xuXHRpZiAoIXNwbGl0WmlwRmlsZSkge1xuXHRcdE9iamVjdC5hc3NpZ24od3JpdGVyLCB7XG5cdFx0XHRkaXNrTnVtYmVyOiAwLFxuXHRcdFx0ZGlza09mZnNldDogMCxcblx0XHRcdGF2YWlsYWJsZVNpemU6IEluZmluaXR5LFxuXHRcdFx0bWF4U2l6ZTogSW5maW5pdHlcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gd3JpdGVyO1xufVxuXG5mdW5jdGlvbiByZWFkVWludDhBcnJheShyZWFkZXIsIG9mZnNldCwgc2l6ZSwgZGlza051bWJlcikge1xuXHRyZXR1cm4gcmVhZGVyLnJlYWRVaW50OEFycmF5KG9mZnNldCwgc2l6ZSwgZGlza051bWJlcik7XG59XG5cbmNvbnN0IFNwbGl0WmlwUmVhZGVyID0gU3BsaXREYXRhUmVhZGVyO1xuY29uc3QgU3BsaXRaaXBXcml0ZXIgPSBTcGxpdERhdGFXcml0ZXI7XG5cbmV4cG9ydCB7XG5cdGluaXRTdHJlYW0sXG5cdGluaXRSZWFkZXIsXG5cdGluaXRXcml0ZXIsXG5cdHJlYWRVaW50OEFycmF5LFxuXHRSZWFkZXIsXG5cdFdyaXRlcixcblx0VGV4dFJlYWRlcixcblx0VGV4dFdyaXRlcixcblx0RGF0YTY0VVJJUmVhZGVyLFxuXHREYXRhNjRVUklXcml0ZXIsXG5cdEJsb2JSZWFkZXIsXG5cdEJsb2JXcml0ZXIsXG5cdFVpbnQ4QXJyYXlSZWFkZXIsXG5cdFVpbnQ4QXJyYXlXcml0ZXIsXG5cdEh0dHBSZWFkZXIsXG5cdEh0dHBSYW5nZVJlYWRlcixcblx0U3BsaXRaaXBSZWFkZXIsXG5cdFNwbGl0WmlwV3JpdGVyLFxuXHRTcGxpdERhdGFSZWFkZXIsXG5cdFNwbGl0RGF0YVdyaXRlcixcblx0RVJSX0hUVFBfUkFOR0UsXG5cdEVSUl9JVEVSQVRPUl9DT01QTEVURURfVE9PX1NPT05cbn07IiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4vKiBnbG9iYWwgVGV4dERlY29kZXIgKi9cblxuY29uc3QgQ1A0MzcgPSBcIlxcMOKYuuKYu+KZpeKZpuKZo+KZoOKAouKXmOKXi+KXmeKZguKZgOKZquKZq+KYvOKWuuKXhOKGleKAvMK2wqfilqzihqjihpHihpPihpLihpDiiJ/ihpTilrLilrwgIVxcXCIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXFxcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fuKMgsOHw7zDqcOiw6TDoMOlw6fDqsOrw6jDr8Ouw6zDhMOFw4nDpsOGw7TDtsOyw7vDucO/w5bDnMKiwqPCpeKCp8aSw6HDrcOzw7rDscORwqrCusK/4oyQwqzCvcK8wqHCq8K74paR4paS4paT4pSC4pSk4pWh4pWi4pWW4pWV4pWj4pWR4pWX4pWd4pWc4pWb4pSQ4pSU4pS04pSs4pSc4pSA4pS84pWe4pWf4pWa4pWU4pWp4pWm4pWg4pWQ4pWs4pWn4pWo4pWk4pWl4pWZ4pWY4pWS4pWT4pWr4pWq4pSY4pSM4paI4paE4paM4paQ4paAzrHDn86Tz4DOo8+DwrXPhM6mzpjOqc604oiez4bOteKIqeKJocKx4oml4omk4oyg4oyhw7fiiYjCsOKImcK34oia4oG/wrLilqAgXCIuc3BsaXQoXCJcIik7XG5jb25zdCBWQUxJRF9DUDQzNyA9IENQNDM3Lmxlbmd0aCA9PSAyNTY7XG5cbmV4cG9ydCB7XG5cdGRlY29kZUNQNDM3XG59O1xuXG5mdW5jdGlvbiBkZWNvZGVDUDQzNyhzdHJpbmdWYWx1ZSkge1xuXHRpZiAoVkFMSURfQ1A0MzcpIHtcblx0XHRsZXQgcmVzdWx0ID0gXCJcIjtcblx0XHRmb3IgKGxldCBpbmRleENoYXJhY3RlciA9IDA7IGluZGV4Q2hhcmFjdGVyIDwgc3RyaW5nVmFsdWUubGVuZ3RoOyBpbmRleENoYXJhY3RlcisrKSB7XG5cdFx0XHRyZXN1bHQgKz0gQ1A0Mzdbc3RyaW5nVmFsdWVbaW5kZXhDaGFyYWN0ZXJdXTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKHN0cmluZ1ZhbHVlKTtcblx0fVxufSIsIi8qXG4gQ29weXJpZ2h0IChjKSAyMDIyIEdpbGRhcyBMb3JtZWF1LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiBcbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuIDMuIFRoZSBuYW1lcyBvZiB0aGUgYXV0aG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEICcnQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXG4gSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKQ1JBRlQsXG4gSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsXG4gT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLyogZ2xvYmFsIFRleHREZWNvZGVyICovXG5cbmltcG9ydCB7IGRlY29kZUNQNDM3IH0gZnJvbSBcIi4vY3A0MzctZGVjb2RlLmpzXCI7XG5cbmV4cG9ydCB7XG5cdGRlY29kZVRleHRcbn07XG5cbmZ1bmN0aW9uIGRlY29kZVRleHQodmFsdWUsIGVuY29kaW5nKSB7XG5cdGlmIChlbmNvZGluZyAmJiBlbmNvZGluZy50cmltKCkudG9Mb3dlckNhc2UoKSA9PSBcImNwNDM3XCIpIHtcblx0XHRyZXR1cm4gZGVjb2RlQ1A0MzcodmFsdWUpO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBuZXcgVGV4dERlY29kZXIoZW5jb2RpbmcpLmRlY29kZSh2YWx1ZSk7XG5cdH1cbn0iLCIvKlxuIENvcHlyaWdodCAoYykgMjAyMiBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBcbiBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXG4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAzLiBUaGUgbmFtZXMgb2YgdGhlIGF1dGhvcnMgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnJ0FTIElTJycgQU5EIEFOWSBFWFBSRVNTRUQgT1IgSU1QTElFRCBXQVJSQU5USUVTLFxuIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgSkNSQUZULFxuIElOQy4gT1IgQU5ZIENPTlRSSUJVVE9SUyBUTyBUSElTIFNPRlRXQVJFIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSxcbiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbmNvbnN0IFBST1BFUlRZX05BTUVfRklMRU5BTUUgPSBcImZpbGVuYW1lXCI7XG5jb25zdCBQUk9QRVJUWV9OQU1FX1JBV19GSUxFTkFNRSA9IFwicmF3RmlsZW5hbWVcIjtcbmNvbnN0IFBST1BFUlRZX05BTUVfQ09NTUVOVCA9IFwiY29tbWVudFwiO1xuY29uc3QgUFJPUEVSVFlfTkFNRV9SQVdfQ09NTUVOVCA9IFwicmF3Q29tbWVudFwiO1xuY29uc3QgUFJPUEVSVFlfTkFNRV9VTkNPTVBQUkVTU0VEX1NJWkUgPSBcInVuY29tcHJlc3NlZFNpemVcIjtcbmNvbnN0IFBST1BFUlRZX05BTUVfQ09NUFBSRVNTRURfU0laRSA9IFwiY29tcHJlc3NlZFNpemVcIjtcbmNvbnN0IFBST1BFUlRZX05BTUVfT0ZGU0VUID0gXCJvZmZzZXRcIjtcbmNvbnN0IFBST1BFUlRZX05BTUVfRElTS19OVU1CRVJfU1RBUlQgPSBcImRpc2tOdW1iZXJTdGFydFwiO1xuY29uc3QgUFJPUEVSVFlfTkFNRV9MQVNUX01PRElGSUNBVElPTl9EQVRFID0gXCJsYXN0TW9kRGF0ZVwiO1xuY29uc3QgUFJPUEVSVFlfTkFNRV9SQVdfTEFTVF9NT0RJRklDQVRJT05fREFURSA9IFwicmF3TGFzdE1vZERhdGVcIjtcbmNvbnN0IFBST1BFUlRZX05BTUVfTEFTVF9BQ0NFU1NfREFURSA9IFwibGFzdEFjY2Vzc0RhdGVcIjtcbmNvbnN0IFBST1BFUlRZX05BTUVfUkFXX0xBU1RfQUNDRVNTX0RBVEUgPSBcInJhd0xhc3RBY2Nlc3NEYXRlXCI7XG5jb25zdCBQUk9QRVJUWV9OQU1FX0NSRUFUSU9OX0RBVEUgPSBcImNyZWF0aW9uRGF0ZVwiO1xuY29uc3QgUFJPUEVSVFlfTkFNRV9SQVdfQ1JFQVRJT05fREFURSA9IFwicmF3Q3JlYXRpb25EYXRlXCI7XG5jb25zdCBQUk9QRVJUWV9OQU1FX0lOVEVSTkFMX0ZJTEVfQVRUUklCVVRFID0gXCJpbnRlcm5hbEZpbGVBdHRyaWJ1dGVcIjtcbmNvbnN0IFBST1BFUlRZX05BTUVfRVhURVJOQUxfRklMRV9BVFRSSUJVVEUgPSBcImV4dGVybmFsRmlsZUF0dHJpYnV0ZVwiO1xuY29uc3QgUFJPUEVSVFlfTkFNRV9NU19ET1NfQ09NUEFUSUJMRSA9IFwibXNEb3NDb21wYXRpYmxlXCI7XG5jb25zdCBQUk9QRVJUWV9OQU1FX1pJUDY0ID0gXCJ6aXA2NFwiO1xuXG5jb25zdCBQUk9QRVJUWV9OQU1FUyA9IFtcblx0UFJPUEVSVFlfTkFNRV9GSUxFTkFNRSwgUFJPUEVSVFlfTkFNRV9SQVdfRklMRU5BTUUsIFBST1BFUlRZX05BTUVfQ09NUFBSRVNTRURfU0laRSwgUFJPUEVSVFlfTkFNRV9VTkNPTVBQUkVTU0VEX1NJWkUsXG5cdFBST1BFUlRZX05BTUVfTEFTVF9NT0RJRklDQVRJT05fREFURSwgUFJPUEVSVFlfTkFNRV9SQVdfTEFTVF9NT0RJRklDQVRJT05fREFURSwgUFJPUEVSVFlfTkFNRV9DT01NRU5ULCBQUk9QRVJUWV9OQU1FX1JBV19DT01NRU5ULFxuXHRQUk9QRVJUWV9OQU1FX0xBU1RfQUNDRVNTX0RBVEUsIFBST1BFUlRZX05BTUVfQ1JFQVRJT05fREFURSwgUFJPUEVSVFlfTkFNRV9PRkZTRVQsIFBST1BFUlRZX05BTUVfRElTS19OVU1CRVJfU1RBUlQsXG5cdFBST1BFUlRZX05BTUVfRElTS19OVU1CRVJfU1RBUlQsIFBST1BFUlRZX05BTUVfSU5URVJOQUxfRklMRV9BVFRSSUJVVEUsIFBST1BFUlRZX05BTUVfRVhURVJOQUxfRklMRV9BVFRSSUJVVEUsXG5cdFBST1BFUlRZX05BTUVfTVNfRE9TX0NPTVBBVElCTEUsIFBST1BFUlRZX05BTUVfWklQNjQsXG5cdFwiZGlyZWN0b3J5XCIsIFwiYml0RmxhZ1wiLCBcImVuY3J5cHRlZFwiLCBcInNpZ25hdHVyZVwiLCBcImZpbGVuYW1lVVRGOFwiLCBcImNvbW1lbnRVVEY4XCIsIFwiY29tcHJlc3Npb25NZXRob2RcIiwgXCJ2ZXJzaW9uXCIsIFwidmVyc2lvbk1hZGVCeVwiLFxuXHRcImV4dHJhRmllbGRcIiwgXCJyYXdFeHRyYUZpZWxkXCIsIFwiZXh0cmFGaWVsZFppcDY0XCIsIFwiZXh0cmFGaWVsZFVuaWNvZGVQYXRoXCIsIFwiZXh0cmFGaWVsZFVuaWNvZGVDb21tZW50XCIsIFwiZXh0cmFGaWVsZEFFU1wiLCBcImV4dHJhRmllbGROVEZTXCIsXG5cdFwiZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wXCJdO1xuXG5jbGFzcyBFbnRyeSB7XG5cblx0Y29uc3RydWN0b3IoZGF0YSkge1xuXHRcdFBST1BFUlRZX05BTUVTLmZvckVhY2gobmFtZSA9PiB0aGlzW25hbWVdID0gZGF0YVtuYW1lXSk7XG5cdH1cblxufVxuXG5leHBvcnQge1xuXHRQUk9QRVJUWV9OQU1FX0ZJTEVOQU1FLFxuXHRQUk9QRVJUWV9OQU1FX1JBV19GSUxFTkFNRSxcblx0UFJPUEVSVFlfTkFNRV9DT01NRU5ULFxuXHRQUk9QRVJUWV9OQU1FX1JBV19DT01NRU5ULFxuXHRQUk9QRVJUWV9OQU1FX1VOQ09NUFBSRVNTRURfU0laRSxcblx0UFJPUEVSVFlfTkFNRV9DT01QUFJFU1NFRF9TSVpFLFxuXHRQUk9QRVJUWV9OQU1FX09GRlNFVCxcblx0UFJPUEVSVFlfTkFNRV9ESVNLX05VTUJFUl9TVEFSVCxcblx0UFJPUEVSVFlfTkFNRV9MQVNUX01PRElGSUNBVElPTl9EQVRFLFxuXHRQUk9QRVJUWV9OQU1FX1JBV19MQVNUX01PRElGSUNBVElPTl9EQVRFLFxuXHRQUk9QRVJUWV9OQU1FX0xBU1RfQUNDRVNTX0RBVEUsXG5cdFBST1BFUlRZX05BTUVfUkFXX0xBU1RfQUNDRVNTX0RBVEUsXG5cdFBST1BFUlRZX05BTUVfQ1JFQVRJT05fREFURSxcblx0UFJPUEVSVFlfTkFNRV9SQVdfQ1JFQVRJT05fREFURSxcblx0UFJPUEVSVFlfTkFNRV9JTlRFUk5BTF9GSUxFX0FUVFJJQlVURSxcblx0UFJPUEVSVFlfTkFNRV9FWFRFUk5BTF9GSUxFX0FUVFJJQlVURSxcblx0UFJPUEVSVFlfTkFNRV9NU19ET1NfQ09NUEFUSUJMRSxcblx0UFJPUEVSVFlfTkFNRV9aSVA2NCxcblx0RW50cnlcbn07IiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG4vKiBnbG9iYWwgQmlnSW50LCBSZXNwb25zZSwgV3JpdGFibGVTdHJlYW0gKi9cbi8vIGRlbm8tbGludC1pZ25vcmUtZmlsZSBuby10aGlzLWFsaWFzXG5cbmltcG9ydCB7XG5cdE1BWF8zMl9CSVRTLFxuXHRNQVhfMTZfQklUUyxcblx0Q09NUFJFU1NJT05fTUVUSE9EX0RFRkxBVEUsXG5cdENPTVBSRVNTSU9OX01FVEhPRF9TVE9SRSxcblx0Q09NUFJFU1NJT05fTUVUSE9EX0FFUyxcblx0U1BMSVRfWklQX0ZJTEVfU0lHTkFUVVJFLFxuXHRMT0NBTF9GSUxFX0hFQURFUl9TSUdOQVRVUkUsXG5cdENFTlRSQUxfRklMRV9IRUFERVJfU0lHTkFUVVJFLFxuXHRFTkRfT0ZfQ0VOVFJBTF9ESVJfU0lHTkFUVVJFLFxuXHRaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTE9DQVRPUl9TSUdOQVRVUkUsXG5cdFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9TSUdOQVRVUkUsXG5cdEVYVFJBRklFTERfVFlQRV9aSVA2NCxcblx0RVhUUkFGSUVMRF9UWVBFX1VOSUNPREVfUEFUSCxcblx0RVhUUkFGSUVMRF9UWVBFX1VOSUNPREVfQ09NTUVOVCxcblx0RVhUUkFGSUVMRF9UWVBFX0FFUyxcblx0RVhUUkFGSUVMRF9UWVBFX05URlMsXG5cdEVYVFJBRklFTERfVFlQRV9OVEZTX1RBRzEsXG5cdEVYVFJBRklFTERfVFlQRV9FWFRFTkRFRF9USU1FU1RBTVAsXG5cdEVYVFJBRklFTERfVFlQRV9VU0RaLFxuXHRFTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RILFxuXHRaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTE9DQVRPUl9MRU5HVEgsXG5cdFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9MRU5HVEgsXG5cdEJJVEZMQUdfRU5DUllQVEVELFxuXHRCSVRGTEFHX0xFVkVMLFxuXHRCSVRGTEFHX0RBVEFfREVTQ1JJUFRPUixcblx0QklURkxBR19MQU5HX0VOQ09ESU5HX0ZMQUcsXG5cdEZJTEVfQVRUUl9NU0RPU19ESVJfTUFTSyxcblx0RElSRUNUT1JZX1NJR05BVFVSRSxcblx0VU5ERUZJTkVEX1ZBTFVFXG59IGZyb20gXCIuL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHtcblx0Z2V0Q29uZmlndXJhdGlvbixcblx0Z2V0Q2h1bmtTaXplXG59IGZyb20gXCIuL2NvbmZpZ3VyYXRpb24uanNcIjtcbmltcG9ydCB7XG5cdHJ1bldvcmtlcixcblx0Q09ERUNfSU5GTEFURSxcblx0RVJSX0lOVkFMSURfU0lHTkFUVVJFLFxuXHRFUlJfSU5WQUxJRF9QQVNTV09SRCxcblx0RVJSX0FCT1JUX0NIRUNLX1BBU1NXT1JEXG59IGZyb20gXCIuL2NvZGVjLXBvb2wuanNcIjtcbmltcG9ydCB7XG5cdGluaXRTdHJlYW0sXG5cdGluaXRSZWFkZXIsXG5cdGluaXRXcml0ZXIsXG5cdHJlYWRVaW50OEFycmF5LFxuXHRCbG9iUmVhZGVyXG59IGZyb20gXCIuL2lvLmpzXCI7XG5pbXBvcnQgeyBkZWNvZGVUZXh0IH0gZnJvbSBcIi4vdXRpbC9kZWNvZGUtdGV4dC5qc1wiO1xuaW1wb3J0IHsgQ3JjMzIgfSBmcm9tIFwiLi9zdHJlYW1zL2NvZGVjcy9jcmMzMi5qc1wiO1xuaW1wb3J0IHtcblx0UFJPUEVSVFlfTkFNRV9SQVdfRklMRU5BTUUsXG5cdFBST1BFUlRZX05BTUVfRklMRU5BTUUsXG5cdFBST1BFUlRZX05BTUVfUkFXX0NPTU1FTlQsXG5cdFBST1BFUlRZX05BTUVfQ09NTUVOVCxcblx0UFJPUEVSVFlfTkFNRV9VTkNPTVBQUkVTU0VEX1NJWkUsXG5cdFBST1BFUlRZX05BTUVfQ09NUFBSRVNTRURfU0laRSxcblx0UFJPUEVSVFlfTkFNRV9PRkZTRVQsXG5cdFBST1BFUlRZX05BTUVfRElTS19OVU1CRVJfU1RBUlQsXG5cdFBST1BFUlRZX05BTUVfTEFTVF9NT0RJRklDQVRJT05fREFURSxcblx0UFJPUEVSVFlfTkFNRV9SQVdfTEFTVF9NT0RJRklDQVRJT05fREFURSxcblx0UFJPUEVSVFlfTkFNRV9MQVNUX0FDQ0VTU19EQVRFLFxuXHRQUk9QRVJUWV9OQU1FX1JBV19MQVNUX0FDQ0VTU19EQVRFLFxuXHRQUk9QRVJUWV9OQU1FX0NSRUFUSU9OX0RBVEUsXG5cdFBST1BFUlRZX05BTUVfUkFXX0NSRUFUSU9OX0RBVEUsXG5cdEVudHJ5XG59IGZyb20gXCIuL3ppcC1lbnRyeS5qc1wiO1xuXG5jb25zdCBFUlJfQkFEX0ZPUk1BVCA9IFwiRmlsZSBmb3JtYXQgaXMgbm90IHJlY29nbml6ZWRcIjtcbmNvbnN0IEVSUl9FT0NEUl9OT1RfRk9VTkQgPSBcIkVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSBub3QgZm91bmRcIjtcbmNvbnN0IEVSUl9FT0NEUl9aSVA2NF9OT1RfRk9VTkQgPSBcIkVuZCBvZiBaaXA2NCBjZW50cmFsIGRpcmVjdG9yeSBub3QgZm91bmRcIjtcbmNvbnN0IEVSUl9FT0NEUl9MT0NBVE9SX1pJUDY0X05PVF9GT1VORCA9IFwiRW5kIG9mIFppcDY0IGNlbnRyYWwgZGlyZWN0b3J5IGxvY2F0b3Igbm90IGZvdW5kXCI7XG5jb25zdCBFUlJfQ0VOVFJBTF9ESVJFQ1RPUllfTk9UX0ZPVU5EID0gXCJDZW50cmFsIGRpcmVjdG9yeSBoZWFkZXIgbm90IGZvdW5kXCI7XG5jb25zdCBFUlJfTE9DQUxfRklMRV9IRUFERVJfTk9UX0ZPVU5EID0gXCJMb2NhbCBmaWxlIGhlYWRlciBub3QgZm91bmRcIjtcbmNvbnN0IEVSUl9FWFRSQUZJRUxEX1pJUDY0X05PVF9GT1VORCA9IFwiWmlwNjQgZXh0cmEgZmllbGQgbm90IGZvdW5kXCI7XG5jb25zdCBFUlJfRU5DUllQVEVEID0gXCJGaWxlIGNvbnRhaW5zIGVuY3J5cHRlZCBlbnRyeVwiO1xuY29uc3QgRVJSX1VOU1VQUE9SVEVEX0VOQ1JZUFRJT04gPSBcIkVuY3J5cHRpb24gbWV0aG9kIG5vdCBzdXBwb3J0ZWRcIjtcbmNvbnN0IEVSUl9VTlNVUFBPUlRFRF9DT01QUkVTU0lPTiA9IFwiQ29tcHJlc3Npb24gbWV0aG9kIG5vdCBzdXBwb3J0ZWRcIjtcbmNvbnN0IEVSUl9TUExJVF9aSVBfRklMRSA9IFwiU3BsaXQgemlwIGZpbGVcIjtcbmNvbnN0IENIQVJTRVRfVVRGOCA9IFwidXRmLThcIjtcbmNvbnN0IENIQVJTRVRfQ1A0MzcgPSBcImNwNDM3XCI7XG5jb25zdCBaSVA2NF9QUk9QRVJUSUVTID0gW1xuXHRbUFJPUEVSVFlfTkFNRV9VTkNPTVBQUkVTU0VEX1NJWkUsIE1BWF8zMl9CSVRTXSxcblx0W1BST1BFUlRZX05BTUVfQ09NUFBSRVNTRURfU0laRSwgTUFYXzMyX0JJVFNdLFxuXHRbUFJPUEVSVFlfTkFNRV9PRkZTRVQsIE1BWF8zMl9CSVRTXSxcblx0W1BST1BFUlRZX05BTUVfRElTS19OVU1CRVJfU1RBUlQsIE1BWF8xNl9CSVRTXVxuXTtcbmNvbnN0IFpJUDY0X0VYVFJBQ1RJT04gPSB7XG5cdFtNQVhfMTZfQklUU106IHtcblx0XHRnZXRWYWx1ZTogZ2V0VWludDMyLFxuXHRcdGJ5dGVzOiA0XG5cdH0sXG5cdFtNQVhfMzJfQklUU106IHtcblx0XHRnZXRWYWx1ZTogZ2V0QmlnVWludDY0LFxuXHRcdGJ5dGVzOiA4XG5cdH1cbn07XG5cbmNsYXNzIFppcFJlYWRlciB7XG5cblx0Y29uc3RydWN0b3IocmVhZGVyLCBvcHRpb25zID0ge30pIHtcblx0XHRPYmplY3QuYXNzaWduKHRoaXMsIHtcblx0XHRcdHJlYWRlcjogaW5pdFJlYWRlcihyZWFkZXIpLFxuXHRcdFx0b3B0aW9ucyxcblx0XHRcdGNvbmZpZzogZ2V0Q29uZmlndXJhdGlvbigpXG5cdFx0fSk7XG5cdH1cblxuXHRhc3luYyogZ2V0RW50cmllc0dlbmVyYXRvcihvcHRpb25zID0ge30pIHtcblx0XHRjb25zdCB6aXBSZWFkZXIgPSB0aGlzO1xuXHRcdGxldCB7IHJlYWRlciB9ID0gemlwUmVhZGVyO1xuXHRcdGNvbnN0IHsgY29uZmlnIH0gPSB6aXBSZWFkZXI7XG5cdFx0YXdhaXQgaW5pdFN0cmVhbShyZWFkZXIpO1xuXHRcdGlmIChyZWFkZXIuc2l6ZSA9PT0gVU5ERUZJTkVEX1ZBTFVFIHx8ICFyZWFkZXIucmVhZFVpbnQ4QXJyYXkpIHtcblx0XHRcdHJlYWRlciA9IG5ldyBCbG9iUmVhZGVyKGF3YWl0IG5ldyBSZXNwb25zZShyZWFkZXIucmVhZGFibGUpLmJsb2IoKSk7XG5cdFx0XHRhd2FpdCBpbml0U3RyZWFtKHJlYWRlcik7XG5cdFx0fVxuXHRcdGlmIChyZWFkZXIuc2l6ZSA8IEVORF9PRl9DRU5UUkFMX0RJUl9MRU5HVEgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfQkFEX0ZPUk1BVCk7XG5cdFx0fVxuXHRcdHJlYWRlci5jaHVua1NpemUgPSBnZXRDaHVua1NpemUoY29uZmlnKTtcblx0XHRjb25zdCBlbmRPZkRpcmVjdG9yeUluZm8gPSBhd2FpdCBzZWVrU2lnbmF0dXJlKHJlYWRlciwgRU5EX09GX0NFTlRSQUxfRElSX1NJR05BVFVSRSwgcmVhZGVyLnNpemUsIEVORF9PRl9DRU5UUkFMX0RJUl9MRU5HVEgsIE1BWF8xNl9CSVRTICogMTYpO1xuXHRcdGlmICghZW5kT2ZEaXJlY3RvcnlJbmZvKSB7XG5cdFx0XHRjb25zdCBzaWduYXR1cmVBcnJheSA9IGF3YWl0IHJlYWRVaW50OEFycmF5KHJlYWRlciwgMCwgNCk7XG5cdFx0XHRjb25zdCBzaWduYXR1cmVWaWV3ID0gZ2V0RGF0YVZpZXcoc2lnbmF0dXJlQXJyYXkpO1xuXHRcdFx0aWYgKGdldFVpbnQzMihzaWduYXR1cmVWaWV3KSA9PSBTUExJVF9aSVBfRklMRV9TSUdOQVRVUkUpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9TUExJVF9aSVBfRklMRSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0VPQ0RSX05PVF9GT1VORCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNvbnN0IGVuZE9mRGlyZWN0b3J5VmlldyA9IGdldERhdGFWaWV3KGVuZE9mRGlyZWN0b3J5SW5mbyk7XG5cdFx0bGV0IGRpcmVjdG9yeURhdGFMZW5ndGggPSBnZXRVaW50MzIoZW5kT2ZEaXJlY3RvcnlWaWV3LCAxMik7XG5cdFx0bGV0IGRpcmVjdG9yeURhdGFPZmZzZXQgPSBnZXRVaW50MzIoZW5kT2ZEaXJlY3RvcnlWaWV3LCAxNik7XG5cdFx0Y29uc3QgY29tbWVudE9mZnNldCA9IGVuZE9mRGlyZWN0b3J5SW5mby5vZmZzZXQ7XG5cdFx0Y29uc3QgY29tbWVudExlbmd0aCA9IGdldFVpbnQxNihlbmRPZkRpcmVjdG9yeVZpZXcsIDIwKTtcblx0XHRjb25zdCBhcHBlbmRlZERhdGFPZmZzZXQgPSBjb21tZW50T2Zmc2V0ICsgRU5EX09GX0NFTlRSQUxfRElSX0xFTkdUSCArIGNvbW1lbnRMZW5ndGg7XG5cdFx0bGV0IGxhc3REaXNrTnVtYmVyID0gZ2V0VWludDE2KGVuZE9mRGlyZWN0b3J5VmlldywgNCk7XG5cdFx0Y29uc3QgZXhwZWN0ZWRMYXN0RGlza051bWJlciA9IHJlYWRlci5sYXN0RGlza051bWJlciB8fCAwO1xuXHRcdGxldCBkaXNrTnVtYmVyID0gZ2V0VWludDE2KGVuZE9mRGlyZWN0b3J5VmlldywgNik7XG5cdFx0bGV0IGZpbGVzTGVuZ3RoID0gZ2V0VWludDE2KGVuZE9mRGlyZWN0b3J5VmlldywgOCk7XG5cdFx0bGV0IHByZXBlbmRlZERhdGFMZW5ndGggPSAwO1xuXHRcdGxldCBzdGFydE9mZnNldCA9IDA7XG5cdFx0aWYgKGRpcmVjdG9yeURhdGFPZmZzZXQgPT0gTUFYXzMyX0JJVFMgfHwgZGlyZWN0b3J5RGF0YUxlbmd0aCA9PSBNQVhfMzJfQklUUyB8fCBmaWxlc0xlbmd0aCA9PSBNQVhfMTZfQklUUyB8fCBkaXNrTnVtYmVyID09IE1BWF8xNl9CSVRTKSB7XG5cdFx0XHRjb25zdCBlbmRPZkRpcmVjdG9yeUxvY2F0b3JBcnJheSA9IGF3YWl0IHJlYWRVaW50OEFycmF5KHJlYWRlciwgZW5kT2ZEaXJlY3RvcnlJbmZvLm9mZnNldCAtIFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9MT0NBVE9SX0xFTkdUSCwgWklQNjRfRU5EX09GX0NFTlRSQUxfRElSX0xPQ0FUT1JfTEVOR1RIKTtcblx0XHRcdGNvbnN0IGVuZE9mRGlyZWN0b3J5TG9jYXRvclZpZXcgPSBnZXREYXRhVmlldyhlbmRPZkRpcmVjdG9yeUxvY2F0b3JBcnJheSk7XG5cdFx0XHRpZiAoZ2V0VWludDMyKGVuZE9mRGlyZWN0b3J5TG9jYXRvclZpZXcsIDApICE9IFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9MT0NBVE9SX1NJR05BVFVSRSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0VPQ0RSX1pJUDY0X05PVF9GT1VORCk7XG5cdFx0XHR9XG5cdFx0XHRkaXJlY3RvcnlEYXRhT2Zmc2V0ID0gZ2V0QmlnVWludDY0KGVuZE9mRGlyZWN0b3J5TG9jYXRvclZpZXcsIDgpO1xuXHRcdFx0bGV0IGVuZE9mRGlyZWN0b3J5QXJyYXkgPSBhd2FpdCByZWFkVWludDhBcnJheShyZWFkZXIsIGRpcmVjdG9yeURhdGFPZmZzZXQsIFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9MRU5HVEgsIC0xKTtcblx0XHRcdGxldCBlbmRPZkRpcmVjdG9yeVZpZXcgPSBnZXREYXRhVmlldyhlbmRPZkRpcmVjdG9yeUFycmF5KTtcblx0XHRcdGNvbnN0IGV4cGVjdGVkRGlyZWN0b3J5RGF0YU9mZnNldCA9IGVuZE9mRGlyZWN0b3J5SW5mby5vZmZzZXQgLSBaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTE9DQVRPUl9MRU5HVEggLSBaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RIO1xuXHRcdFx0aWYgKGdldFVpbnQzMihlbmRPZkRpcmVjdG9yeVZpZXcsIDApICE9IFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9TSUdOQVRVUkUgJiYgZGlyZWN0b3J5RGF0YU9mZnNldCAhPSBleHBlY3RlZERpcmVjdG9yeURhdGFPZmZzZXQpIHtcblx0XHRcdFx0Y29uc3Qgb3JpZ2luYWxEaXJlY3RvcnlEYXRhT2Zmc2V0ID0gZGlyZWN0b3J5RGF0YU9mZnNldDtcblx0XHRcdFx0ZGlyZWN0b3J5RGF0YU9mZnNldCA9IGV4cGVjdGVkRGlyZWN0b3J5RGF0YU9mZnNldDtcblx0XHRcdFx0cHJlcGVuZGVkRGF0YUxlbmd0aCA9IGRpcmVjdG9yeURhdGFPZmZzZXQgLSBvcmlnaW5hbERpcmVjdG9yeURhdGFPZmZzZXQ7XG5cdFx0XHRcdGVuZE9mRGlyZWN0b3J5QXJyYXkgPSBhd2FpdCByZWFkVWludDhBcnJheShyZWFkZXIsIGRpcmVjdG9yeURhdGFPZmZzZXQsIFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9MRU5HVEgsIC0xKTtcblx0XHRcdFx0ZW5kT2ZEaXJlY3RvcnlWaWV3ID0gZ2V0RGF0YVZpZXcoZW5kT2ZEaXJlY3RvcnlBcnJheSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZ2V0VWludDMyKGVuZE9mRGlyZWN0b3J5VmlldywgMCkgIT0gWklQNjRfRU5EX09GX0NFTlRSQUxfRElSX1NJR05BVFVSRSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0VPQ0RSX0xPQ0FUT1JfWklQNjRfTk9UX0ZPVU5EKTtcblx0XHRcdH1cblx0XHRcdGlmIChsYXN0RGlza051bWJlciA9PSBNQVhfMTZfQklUUykge1xuXHRcdFx0XHRsYXN0RGlza051bWJlciA9IGdldFVpbnQzMihlbmRPZkRpcmVjdG9yeVZpZXcsIDE2KTtcblx0XHRcdH1cblx0XHRcdGlmIChkaXNrTnVtYmVyID09IE1BWF8xNl9CSVRTKSB7XG5cdFx0XHRcdGRpc2tOdW1iZXIgPSBnZXRVaW50MzIoZW5kT2ZEaXJlY3RvcnlWaWV3LCAyMCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZmlsZXNMZW5ndGggPT0gTUFYXzE2X0JJVFMpIHtcblx0XHRcdFx0ZmlsZXNMZW5ndGggPSBnZXRCaWdVaW50NjQoZW5kT2ZEaXJlY3RvcnlWaWV3LCAzMik7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZGlyZWN0b3J5RGF0YUxlbmd0aCA9PSBNQVhfMzJfQklUUykge1xuXHRcdFx0XHRkaXJlY3RvcnlEYXRhTGVuZ3RoID0gZ2V0QmlnVWludDY0KGVuZE9mRGlyZWN0b3J5VmlldywgNDApO1xuXHRcdFx0fVxuXHRcdFx0ZGlyZWN0b3J5RGF0YU9mZnNldCAtPSBkaXJlY3RvcnlEYXRhTGVuZ3RoO1xuXHRcdH1cblx0XHRpZiAoZGlyZWN0b3J5RGF0YU9mZnNldCA+PSByZWFkZXIuc2l6ZSkge1xuXHRcdFx0cHJlcGVuZGVkRGF0YUxlbmd0aCA9IHJlYWRlci5zaXplIC0gZGlyZWN0b3J5RGF0YU9mZnNldCAtIGRpcmVjdG9yeURhdGFMZW5ndGggLSBFTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RIO1xuXHRcdFx0ZGlyZWN0b3J5RGF0YU9mZnNldCA9IHJlYWRlci5zaXplIC0gZGlyZWN0b3J5RGF0YUxlbmd0aCAtIEVORF9PRl9DRU5UUkFMX0RJUl9MRU5HVEg7XHRcblx0XHR9XG5cdFx0aWYgKGV4cGVjdGVkTGFzdERpc2tOdW1iZXIgIT0gbGFzdERpc2tOdW1iZXIpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfU1BMSVRfWklQX0ZJTEUpO1xuXHRcdH1cblx0XHRpZiAoZGlyZWN0b3J5RGF0YU9mZnNldCA8IDApIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfQkFEX0ZPUk1BVCk7XG5cdFx0fVxuXHRcdGxldCBvZmZzZXQgPSAwO1xuXHRcdGxldCBkaXJlY3RvcnlBcnJheSA9IGF3YWl0IHJlYWRVaW50OEFycmF5KHJlYWRlciwgZGlyZWN0b3J5RGF0YU9mZnNldCwgZGlyZWN0b3J5RGF0YUxlbmd0aCwgZGlza051bWJlcik7XG5cdFx0bGV0IGRpcmVjdG9yeVZpZXcgPSBnZXREYXRhVmlldyhkaXJlY3RvcnlBcnJheSk7XG5cdFx0aWYgKGRpcmVjdG9yeURhdGFMZW5ndGgpIHtcblx0XHRcdGNvbnN0IGV4cGVjdGVkRGlyZWN0b3J5RGF0YU9mZnNldCA9IGVuZE9mRGlyZWN0b3J5SW5mby5vZmZzZXQgLSBkaXJlY3RvcnlEYXRhTGVuZ3RoO1xuXHRcdFx0aWYgKGdldFVpbnQzMihkaXJlY3RvcnlWaWV3LCBvZmZzZXQpICE9IENFTlRSQUxfRklMRV9IRUFERVJfU0lHTkFUVVJFICYmIGRpcmVjdG9yeURhdGFPZmZzZXQgIT0gZXhwZWN0ZWREaXJlY3RvcnlEYXRhT2Zmc2V0KSB7XG5cdFx0XHRcdGNvbnN0IG9yaWdpbmFsRGlyZWN0b3J5RGF0YU9mZnNldCA9IGRpcmVjdG9yeURhdGFPZmZzZXQ7XG5cdFx0XHRcdGRpcmVjdG9yeURhdGFPZmZzZXQgPSBleHBlY3RlZERpcmVjdG9yeURhdGFPZmZzZXQ7XG5cdFx0XHRcdHByZXBlbmRlZERhdGFMZW5ndGggKz0gZGlyZWN0b3J5RGF0YU9mZnNldCAtIG9yaWdpbmFsRGlyZWN0b3J5RGF0YU9mZnNldDtcblx0XHRcdFx0ZGlyZWN0b3J5QXJyYXkgPSBhd2FpdCByZWFkVWludDhBcnJheShyZWFkZXIsIGRpcmVjdG9yeURhdGFPZmZzZXQsIGRpcmVjdG9yeURhdGFMZW5ndGgsIGRpc2tOdW1iZXIpO1xuXHRcdFx0XHRkaXJlY3RvcnlWaWV3ID0gZ2V0RGF0YVZpZXcoZGlyZWN0b3J5QXJyYXkpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRjb25zdCBleHBlY3RlZERpcmVjdG9yeURhdGFMZW5ndGggPSBlbmRPZkRpcmVjdG9yeUluZm8ub2Zmc2V0IC0gZGlyZWN0b3J5RGF0YU9mZnNldCAtIChyZWFkZXIubGFzdERpc2tPZmZzZXQgfHwgMCk7XG5cdFx0aWYgKGRpcmVjdG9yeURhdGFMZW5ndGggIT0gZXhwZWN0ZWREaXJlY3RvcnlEYXRhTGVuZ3RoICYmIGV4cGVjdGVkRGlyZWN0b3J5RGF0YUxlbmd0aCA+PSAwKSB7XG5cdFx0XHRkaXJlY3RvcnlEYXRhTGVuZ3RoID0gZXhwZWN0ZWREaXJlY3RvcnlEYXRhTGVuZ3RoO1xuXHRcdFx0ZGlyZWN0b3J5QXJyYXkgPSBhd2FpdCByZWFkVWludDhBcnJheShyZWFkZXIsIGRpcmVjdG9yeURhdGFPZmZzZXQsIGRpcmVjdG9yeURhdGFMZW5ndGgsIGRpc2tOdW1iZXIpO1xuXHRcdFx0ZGlyZWN0b3J5VmlldyA9IGdldERhdGFWaWV3KGRpcmVjdG9yeUFycmF5KTtcblx0XHR9XG5cdFx0aWYgKGRpcmVjdG9yeURhdGFPZmZzZXQgPCAwIHx8IGRpcmVjdG9yeURhdGFPZmZzZXQgPj0gcmVhZGVyLnNpemUpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfQkFEX0ZPUk1BVCk7XG5cdFx0fVxuXHRcdGNvbnN0IGZpbGVuYW1lRW5jb2RpbmcgPSBnZXRPcHRpb25WYWx1ZSh6aXBSZWFkZXIsIG9wdGlvbnMsIFwiZmlsZW5hbWVFbmNvZGluZ1wiKTtcblx0XHRjb25zdCBjb21tZW50RW5jb2RpbmcgPSBnZXRPcHRpb25WYWx1ZSh6aXBSZWFkZXIsIG9wdGlvbnMsIFwiY29tbWVudEVuY29kaW5nXCIpO1xuXHRcdGZvciAobGV0IGluZGV4RmlsZSA9IDA7IGluZGV4RmlsZSA8IGZpbGVzTGVuZ3RoOyBpbmRleEZpbGUrKykge1xuXHRcdFx0Y29uc3QgZmlsZUVudHJ5ID0gbmV3IFppcEVudHJ5KHJlYWRlciwgY29uZmlnLCB6aXBSZWFkZXIub3B0aW9ucyk7XG5cdFx0XHRpZiAoZ2V0VWludDMyKGRpcmVjdG9yeVZpZXcsIG9mZnNldCkgIT0gQ0VOVFJBTF9GSUxFX0hFQURFUl9TSUdOQVRVUkUpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9DRU5UUkFMX0RJUkVDVE9SWV9OT1RfRk9VTkQpO1xuXHRcdFx0fVxuXHRcdFx0cmVhZENvbW1vbkhlYWRlcihmaWxlRW50cnksIGRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDYpO1xuXHRcdFx0Y29uc3QgbGFuZ3VhZ2VFbmNvZGluZ0ZsYWcgPSBCb29sZWFuKGZpbGVFbnRyeS5iaXRGbGFnLmxhbmd1YWdlRW5jb2RpbmdGbGFnKTtcblx0XHRcdGNvbnN0IGZpbGVuYW1lT2Zmc2V0ID0gb2Zmc2V0ICsgNDY7XG5cdFx0XHRjb25zdCBleHRyYUZpZWxkT2Zmc2V0ID0gZmlsZW5hbWVPZmZzZXQgKyBmaWxlRW50cnkuZmlsZW5hbWVMZW5ndGg7XG5cdFx0XHRjb25zdCBjb21tZW50T2Zmc2V0ID0gZXh0cmFGaWVsZE9mZnNldCArIGZpbGVFbnRyeS5leHRyYUZpZWxkTGVuZ3RoO1xuXHRcdFx0Y29uc3QgdmVyc2lvbk1hZGVCeSA9IGdldFVpbnQxNihkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyA0KTtcblx0XHRcdGNvbnN0IG1zRG9zQ29tcGF0aWJsZSA9ICh2ZXJzaW9uTWFkZUJ5ICYgMCkgPT0gMDtcblx0XHRcdGNvbnN0IHJhd0ZpbGVuYW1lID0gZGlyZWN0b3J5QXJyYXkuc3ViYXJyYXkoZmlsZW5hbWVPZmZzZXQsIGV4dHJhRmllbGRPZmZzZXQpO1xuXHRcdFx0Y29uc3QgY29tbWVudExlbmd0aCA9IGdldFVpbnQxNihkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyAzMik7XG5cdFx0XHRjb25zdCBlbmRPZmZzZXQgPSBjb21tZW50T2Zmc2V0ICsgY29tbWVudExlbmd0aDtcblx0XHRcdGNvbnN0IHJhd0NvbW1lbnQgPSBkaXJlY3RvcnlBcnJheS5zdWJhcnJheShjb21tZW50T2Zmc2V0LCBlbmRPZmZzZXQpO1xuXHRcdFx0Y29uc3QgZmlsZW5hbWVVVEY4ID0gbGFuZ3VhZ2VFbmNvZGluZ0ZsYWc7XG5cdFx0XHRjb25zdCBjb21tZW50VVRGOCA9IGxhbmd1YWdlRW5jb2RpbmdGbGFnO1xuXHRcdFx0Y29uc3QgZGlyZWN0b3J5ID0gbXNEb3NDb21wYXRpYmxlICYmICgoZ2V0VWludDgoZGlyZWN0b3J5Vmlldywgb2Zmc2V0ICsgMzgpICYgRklMRV9BVFRSX01TRE9TX0RJUl9NQVNLKSA9PSBGSUxFX0FUVFJfTVNET1NfRElSX01BU0spO1xuXHRcdFx0Y29uc3Qgb2Zmc2V0RmlsZUVudHJ5ID0gZ2V0VWludDMyKGRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDQyKSArIHByZXBlbmRlZERhdGFMZW5ndGg7XG5cdFx0XHRPYmplY3QuYXNzaWduKGZpbGVFbnRyeSwge1xuXHRcdFx0XHR2ZXJzaW9uTWFkZUJ5LFxuXHRcdFx0XHRtc0Rvc0NvbXBhdGlibGUsXG5cdFx0XHRcdGNvbXByZXNzZWRTaXplOiAwLFxuXHRcdFx0XHR1bmNvbXByZXNzZWRTaXplOiAwLFxuXHRcdFx0XHRjb21tZW50TGVuZ3RoLFxuXHRcdFx0XHRkaXJlY3RvcnksXG5cdFx0XHRcdG9mZnNldDogb2Zmc2V0RmlsZUVudHJ5LFxuXHRcdFx0XHRkaXNrTnVtYmVyU3RhcnQ6IGdldFVpbnQxNihkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyAzNCksXG5cdFx0XHRcdGludGVybmFsRmlsZUF0dHJpYnV0ZTogZ2V0VWludDE2KGRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDM2KSxcblx0XHRcdFx0ZXh0ZXJuYWxGaWxlQXR0cmlidXRlOiBnZXRVaW50MzIoZGlyZWN0b3J5Vmlldywgb2Zmc2V0ICsgMzgpLFxuXHRcdFx0XHRyYXdGaWxlbmFtZSxcblx0XHRcdFx0ZmlsZW5hbWVVVEY4LFxuXHRcdFx0XHRjb21tZW50VVRGOCxcblx0XHRcdFx0cmF3RXh0cmFGaWVsZDogZGlyZWN0b3J5QXJyYXkuc3ViYXJyYXkoZXh0cmFGaWVsZE9mZnNldCwgY29tbWVudE9mZnNldClcblx0XHRcdH0pO1xuXHRcdFx0Y29uc3QgW2ZpbGVuYW1lLCBjb21tZW50XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcblx0XHRcdFx0ZGVjb2RlVGV4dChyYXdGaWxlbmFtZSwgZmlsZW5hbWVVVEY4ID8gQ0hBUlNFVF9VVEY4IDogZmlsZW5hbWVFbmNvZGluZyB8fCBDSEFSU0VUX0NQNDM3KSxcblx0XHRcdFx0ZGVjb2RlVGV4dChyYXdDb21tZW50LCBjb21tZW50VVRGOCA/IENIQVJTRVRfVVRGOCA6IGNvbW1lbnRFbmNvZGluZyB8fCBDSEFSU0VUX0NQNDM3KVxuXHRcdFx0XSk7XG5cdFx0XHRPYmplY3QuYXNzaWduKGZpbGVFbnRyeSwge1xuXHRcdFx0XHRyYXdDb21tZW50LFxuXHRcdFx0XHRmaWxlbmFtZSxcblx0XHRcdFx0Y29tbWVudCxcblx0XHRcdFx0ZGlyZWN0b3J5OiBkaXJlY3RvcnkgfHwgZmlsZW5hbWUuZW5kc1dpdGgoRElSRUNUT1JZX1NJR05BVFVSRSlcblx0XHRcdH0pO1xuXHRcdFx0c3RhcnRPZmZzZXQgPSBNYXRoLm1heChvZmZzZXRGaWxlRW50cnksIHN0YXJ0T2Zmc2V0KTtcblx0XHRcdGF3YWl0IHJlYWRDb21tb25Gb290ZXIoZmlsZUVudHJ5LCBmaWxlRW50cnksIGRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDYpO1xuXHRcdFx0Y29uc3QgZW50cnkgPSBuZXcgRW50cnkoZmlsZUVudHJ5KTtcblx0XHRcdGVudHJ5LmdldERhdGEgPSAod3JpdGVyLCBvcHRpb25zKSA9PiBmaWxlRW50cnkuZ2V0RGF0YSh3cml0ZXIsIGVudHJ5LCBvcHRpb25zKTtcblx0XHRcdG9mZnNldCA9IGVuZE9mZnNldDtcblx0XHRcdGNvbnN0IHsgb25wcm9ncmVzcyB9ID0gb3B0aW9ucztcblx0XHRcdGlmIChvbnByb2dyZXNzKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0YXdhaXQgb25wcm9ncmVzcyhpbmRleEZpbGUgKyAxLCBmaWxlc0xlbmd0aCwgbmV3IEVudHJ5KGZpbGVFbnRyeSkpO1xuXHRcdFx0XHR9IGNhdGNoIChfZXJyb3IpIHtcblx0XHRcdFx0XHQvLyBpZ25vcmVkXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHlpZWxkIGVudHJ5O1xuXHRcdH1cblx0XHRjb25zdCBleHRyYWN0UHJlcGVuZGVkRGF0YSA9IGdldE9wdGlvblZhbHVlKHppcFJlYWRlciwgb3B0aW9ucywgXCJleHRyYWN0UHJlcGVuZGVkRGF0YVwiKTtcblx0XHRjb25zdCBleHRyYWN0QXBwZW5kZWREYXRhID0gZ2V0T3B0aW9uVmFsdWUoemlwUmVhZGVyLCBvcHRpb25zLCBcImV4dHJhY3RBcHBlbmRlZERhdGFcIik7XG5cdFx0aWYgKGV4dHJhY3RQcmVwZW5kZWREYXRhKSB7XG5cdFx0XHR6aXBSZWFkZXIucHJlcGVuZGVkRGF0YSA9IHN0YXJ0T2Zmc2V0ID4gMCA/IGF3YWl0IHJlYWRVaW50OEFycmF5KHJlYWRlciwgMCwgc3RhcnRPZmZzZXQpIDogbmV3IFVpbnQ4QXJyYXkoKTtcblx0XHR9XG5cdFx0emlwUmVhZGVyLmNvbW1lbnQgPSBjb21tZW50TGVuZ3RoID8gYXdhaXQgcmVhZFVpbnQ4QXJyYXkocmVhZGVyLCBjb21tZW50T2Zmc2V0ICsgRU5EX09GX0NFTlRSQUxfRElSX0xFTkdUSCwgY29tbWVudExlbmd0aCkgOiBuZXcgVWludDhBcnJheSgpO1xuXHRcdGlmIChleHRyYWN0QXBwZW5kZWREYXRhKSB7XG5cdFx0XHR6aXBSZWFkZXIuYXBwZW5kZWREYXRhID0gYXBwZW5kZWREYXRhT2Zmc2V0IDwgcmVhZGVyLnNpemUgPyBhd2FpdCByZWFkVWludDhBcnJheShyZWFkZXIsIGFwcGVuZGVkRGF0YU9mZnNldCwgcmVhZGVyLnNpemUgLSBhcHBlbmRlZERhdGFPZmZzZXQpIDogbmV3IFVpbnQ4QXJyYXkoKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRhc3luYyBnZXRFbnRyaWVzKG9wdGlvbnMgPSB7fSkge1xuXHRcdGNvbnN0IGVudHJpZXMgPSBbXTtcblx0XHRmb3IgYXdhaXQgKGNvbnN0IGVudHJ5IG9mIHRoaXMuZ2V0RW50cmllc0dlbmVyYXRvcihvcHRpb25zKSkge1xuXHRcdFx0ZW50cmllcy5wdXNoKGVudHJ5KTtcblx0XHR9XG5cdFx0cmV0dXJuIGVudHJpZXM7XG5cdH1cblxuXHRhc3luYyBjbG9zZSgpIHtcblx0fVxufVxuXG5leHBvcnQge1xuXHRaaXBSZWFkZXIsXG5cdEVSUl9CQURfRk9STUFULFxuXHRFUlJfRU9DRFJfTk9UX0ZPVU5ELFxuXHRFUlJfRU9DRFJfWklQNjRfTk9UX0ZPVU5ELFxuXHRFUlJfRU9DRFJfTE9DQVRPUl9aSVA2NF9OT1RfRk9VTkQsXG5cdEVSUl9DRU5UUkFMX0RJUkVDVE9SWV9OT1RfRk9VTkQsXG5cdEVSUl9MT0NBTF9GSUxFX0hFQURFUl9OT1RfRk9VTkQsXG5cdEVSUl9FWFRSQUZJRUxEX1pJUDY0X05PVF9GT1VORCxcblx0RVJSX0VOQ1JZUFRFRCxcblx0RVJSX1VOU1VQUE9SVEVEX0VOQ1JZUFRJT04sXG5cdEVSUl9VTlNVUFBPUlRFRF9DT01QUkVTU0lPTixcblx0RVJSX0lOVkFMSURfU0lHTkFUVVJFLFxuXHRFUlJfSU5WQUxJRF9QQVNTV09SRCxcblx0RVJSX1NQTElUX1pJUF9GSUxFXG59O1xuXG5jbGFzcyBaaXBFbnRyeSB7XG5cblx0Y29uc3RydWN0b3IocmVhZGVyLCBjb25maWcsIG9wdGlvbnMpIHtcblx0XHRPYmplY3QuYXNzaWduKHRoaXMsIHtcblx0XHRcdHJlYWRlcixcblx0XHRcdGNvbmZpZyxcblx0XHRcdG9wdGlvbnNcblx0XHR9KTtcblx0fVxuXG5cdGFzeW5jIGdldERhdGEod3JpdGVyLCBmaWxlRW50cnksIG9wdGlvbnMgPSB7fSkge1xuXHRcdGNvbnN0IHppcEVudHJ5ID0gdGhpcztcblx0XHRjb25zdCB7XG5cdFx0XHRyZWFkZXIsXG5cdFx0XHRvZmZzZXQsXG5cdFx0XHRkaXNrTnVtYmVyU3RhcnQsXG5cdFx0XHRleHRyYUZpZWxkQUVTLFxuXHRcdFx0Y29tcHJlc3Npb25NZXRob2QsXG5cdFx0XHRjb25maWcsXG5cdFx0XHRiaXRGbGFnLFxuXHRcdFx0c2lnbmF0dXJlLFxuXHRcdFx0cmF3TGFzdE1vZERhdGUsXG5cdFx0XHR1bmNvbXByZXNzZWRTaXplLFxuXHRcdFx0Y29tcHJlc3NlZFNpemVcblx0XHR9ID0gemlwRW50cnk7XG5cdFx0Y29uc3QgbG9jYWxEaXJlY3RvcnkgPSBmaWxlRW50cnkubG9jYWxEaXJlY3RvcnkgPSB7fTtcblx0XHRjb25zdCBkYXRhQXJyYXkgPSBhd2FpdCByZWFkVWludDhBcnJheShyZWFkZXIsIG9mZnNldCwgMzAsIGRpc2tOdW1iZXJTdGFydCk7XG5cdFx0Y29uc3QgZGF0YVZpZXcgPSBnZXREYXRhVmlldyhkYXRhQXJyYXkpO1xuXHRcdGxldCBwYXNzd29yZCA9IGdldE9wdGlvblZhbHVlKHppcEVudHJ5LCBvcHRpb25zLCBcInBhc3N3b3JkXCIpO1xuXHRcdHBhc3N3b3JkID0gcGFzc3dvcmQgJiYgcGFzc3dvcmQubGVuZ3RoICYmIHBhc3N3b3JkO1xuXHRcdGlmIChleHRyYUZpZWxkQUVTKSB7XG5cdFx0XHRpZiAoZXh0cmFGaWVsZEFFUy5vcmlnaW5hbENvbXByZXNzaW9uTWV0aG9kICE9IENPTVBSRVNTSU9OX01FVEhPRF9BRVMpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9VTlNVUFBPUlRFRF9DT01QUkVTU0lPTik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChjb21wcmVzc2lvbk1ldGhvZCAhPSBDT01QUkVTU0lPTl9NRVRIT0RfU1RPUkUgJiYgY29tcHJlc3Npb25NZXRob2QgIT0gQ09NUFJFU1NJT05fTUVUSE9EX0RFRkxBVEUpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfVU5TVVBQT1JURURfQ09NUFJFU1NJT04pO1xuXHRcdH1cblx0XHRpZiAoZ2V0VWludDMyKGRhdGFWaWV3LCAwKSAhPSBMT0NBTF9GSUxFX0hFQURFUl9TSUdOQVRVUkUpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfTE9DQUxfRklMRV9IRUFERVJfTk9UX0ZPVU5EKTtcblx0XHR9XG5cdFx0cmVhZENvbW1vbkhlYWRlcihsb2NhbERpcmVjdG9yeSwgZGF0YVZpZXcsIDQpO1xuXHRcdGxvY2FsRGlyZWN0b3J5LnJhd0V4dHJhRmllbGQgPSBsb2NhbERpcmVjdG9yeS5leHRyYUZpZWxkTGVuZ3RoID9cblx0XHRcdGF3YWl0IHJlYWRVaW50OEFycmF5KHJlYWRlciwgb2Zmc2V0ICsgMzAgKyBsb2NhbERpcmVjdG9yeS5maWxlbmFtZUxlbmd0aCwgbG9jYWxEaXJlY3RvcnkuZXh0cmFGaWVsZExlbmd0aCwgZGlza051bWJlclN0YXJ0KSA6XG5cdFx0XHRuZXcgVWludDhBcnJheSgpO1xuXHRcdGF3YWl0IHJlYWRDb21tb25Gb290ZXIoemlwRW50cnksIGxvY2FsRGlyZWN0b3J5LCBkYXRhVmlldywgNCwgdHJ1ZSk7XG5cdFx0T2JqZWN0LmFzc2lnbihmaWxlRW50cnksIHtcblx0XHRcdGxhc3RBY2Nlc3NEYXRlOiBsb2NhbERpcmVjdG9yeS5sYXN0QWNjZXNzRGF0ZSxcblx0XHRcdGNyZWF0aW9uRGF0ZTogbG9jYWxEaXJlY3RvcnkuY3JlYXRpb25EYXRlXG5cdFx0fSk7XG5cdFx0Y29uc3QgZW5jcnlwdGVkID0gemlwRW50cnkuZW5jcnlwdGVkICYmIGxvY2FsRGlyZWN0b3J5LmVuY3J5cHRlZDtcblx0XHRjb25zdCB6aXBDcnlwdG8gPSBlbmNyeXB0ZWQgJiYgIWV4dHJhRmllbGRBRVM7XG5cdFx0aWYgKGVuY3J5cHRlZCkge1xuXHRcdFx0aWYgKCF6aXBDcnlwdG8gJiYgZXh0cmFGaWVsZEFFUy5zdHJlbmd0aCA9PT0gVU5ERUZJTkVEX1ZBTFVFKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfVU5TVVBQT1JURURfRU5DUllQVElPTik7XG5cdFx0XHR9IGVsc2UgaWYgKCFwYXNzd29yZCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0VOQ1JZUFRFRCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNvbnN0IGRhdGFPZmZzZXQgPSBvZmZzZXQgKyAzMCArIGxvY2FsRGlyZWN0b3J5LmZpbGVuYW1lTGVuZ3RoICsgbG9jYWxEaXJlY3RvcnkuZXh0cmFGaWVsZExlbmd0aDtcblx0XHRjb25zdCBzaXplID0gY29tcHJlc3NlZFNpemU7XG5cdFx0Y29uc3QgcmVhZGFibGUgPSByZWFkZXIucmVhZGFibGU7XG5cdFx0T2JqZWN0LmFzc2lnbihyZWFkYWJsZSwge1xuXHRcdFx0ZGlza051bWJlclN0YXJ0LFxuXHRcdFx0b2Zmc2V0OiBkYXRhT2Zmc2V0LFxuXHRcdFx0c2l6ZVxuXHRcdH0pO1xuXHRcdGNvbnN0IHNpZ25hbCA9IGdldE9wdGlvblZhbHVlKHppcEVudHJ5LCBvcHRpb25zLCBcInNpZ25hbFwiKTtcblx0XHRjb25zdCBjaGVja1Bhc3N3b3JkT25seSA9IGdldE9wdGlvblZhbHVlKHppcEVudHJ5LCBvcHRpb25zLCBcImNoZWNrUGFzc3dvcmRPbmx5XCIpO1xuXHRcdGlmIChjaGVja1Bhc3N3b3JkT25seSkge1xuXHRcdFx0d3JpdGVyID0gbmV3IFdyaXRhYmxlU3RyZWFtKCk7XG5cdFx0fVxuXHRcdHdyaXRlciA9IGluaXRXcml0ZXIod3JpdGVyKTtcblx0XHRhd2FpdCBpbml0U3RyZWFtKHdyaXRlciwgdW5jb21wcmVzc2VkU2l6ZSk7XG5cdFx0Y29uc3QgeyB3cml0YWJsZSB9ID0gd3JpdGVyO1xuXHRcdGNvbnN0IHsgb25zdGFydCwgb25wcm9ncmVzcywgb25lbmQgfSA9IG9wdGlvbnM7XG5cdFx0Y29uc3Qgd29ya2VyT3B0aW9ucyA9IHtcblx0XHRcdG9wdGlvbnM6IHtcblx0XHRcdFx0Y29kZWNUeXBlOiBDT0RFQ19JTkZMQVRFLFxuXHRcdFx0XHRwYXNzd29yZCxcblx0XHRcdFx0emlwQ3J5cHRvLFxuXHRcdFx0XHRlbmNyeXB0aW9uU3RyZW5ndGg6IGV4dHJhRmllbGRBRVMgJiYgZXh0cmFGaWVsZEFFUy5zdHJlbmd0aCxcblx0XHRcdFx0c2lnbmVkOiBnZXRPcHRpb25WYWx1ZSh6aXBFbnRyeSwgb3B0aW9ucywgXCJjaGVja1NpZ25hdHVyZVwiKSxcblx0XHRcdFx0cGFzc3dvcmRWZXJpZmljYXRpb246IHppcENyeXB0byAmJiAoYml0RmxhZy5kYXRhRGVzY3JpcHRvciA/ICgocmF3TGFzdE1vZERhdGUgPj4+IDgpICYgMHhGRikgOiAoKHNpZ25hdHVyZSA+Pj4gMjQpICYgMHhGRikpLFxuXHRcdFx0XHRzaWduYXR1cmUsXG5cdFx0XHRcdGNvbXByZXNzZWQ6IGNvbXByZXNzaW9uTWV0aG9kICE9IDAsXG5cdFx0XHRcdGVuY3J5cHRlZCxcblx0XHRcdFx0dXNlV2ViV29ya2VyczogZ2V0T3B0aW9uVmFsdWUoemlwRW50cnksIG9wdGlvbnMsIFwidXNlV2ViV29ya2Vyc1wiKSxcblx0XHRcdFx0dXNlQ29tcHJlc3Npb25TdHJlYW06IGdldE9wdGlvblZhbHVlKHppcEVudHJ5LCBvcHRpb25zLCBcInVzZUNvbXByZXNzaW9uU3RyZWFtXCIpLFxuXHRcdFx0XHR0cmFuc2ZlclN0cmVhbXM6IGdldE9wdGlvblZhbHVlKHppcEVudHJ5LCBvcHRpb25zLCBcInRyYW5zZmVyU3RyZWFtc1wiKSxcblx0XHRcdFx0Y2hlY2tQYXNzd29yZE9ubHlcblx0XHRcdH0sXG5cdFx0XHRjb25maWcsXG5cdFx0XHRzdHJlYW1PcHRpb25zOiB7IHNpZ25hbCwgc2l6ZSwgb25zdGFydCwgb25wcm9ncmVzcywgb25lbmQgfVxuXHRcdH07XG5cdFx0bGV0IG91dHB1dFNpemUgPSAwO1xuXHRcdHRyeSB7XG5cdFx0XHQoeyBvdXRwdXRTaXplIH0gPSAoYXdhaXQgcnVuV29ya2VyKHsgcmVhZGFibGUsIHdyaXRhYmxlIH0sIHdvcmtlck9wdGlvbnMpKSk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGlmICghY2hlY2tQYXNzd29yZE9ubHkgfHwgZXJyb3IubWVzc2FnZSAhPSBFUlJfQUJPUlRfQ0hFQ0tfUEFTU1dPUkQpIHtcblx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHR9XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdGNvbnN0IHByZXZlbnRDbG9zZSA9IGdldE9wdGlvblZhbHVlKHppcEVudHJ5LCBvcHRpb25zLCBcInByZXZlbnRDbG9zZVwiKTtcblx0XHRcdHdyaXRhYmxlLnNpemUgKz0gb3V0cHV0U2l6ZTtcblx0XHRcdGlmICghcHJldmVudENsb3NlICYmICF3cml0YWJsZS5sb2NrZWQpIHtcblx0XHRcdFx0YXdhaXQgd3JpdGFibGUuZ2V0V3JpdGVyKCkuY2xvc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNoZWNrUGFzc3dvcmRPbmx5ID8gdW5kZWZpbmVkIDogd3JpdGVyLmdldERhdGEgPyB3cml0ZXIuZ2V0RGF0YSgpIDogd3JpdGFibGU7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVhZENvbW1vbkhlYWRlcihkaXJlY3RvcnksIGRhdGFWaWV3LCBvZmZzZXQpIHtcblx0Y29uc3QgcmF3Qml0RmxhZyA9IGRpcmVjdG9yeS5yYXdCaXRGbGFnID0gZ2V0VWludDE2KGRhdGFWaWV3LCBvZmZzZXQgKyAyKTtcblx0Y29uc3QgZW5jcnlwdGVkID0gKHJhd0JpdEZsYWcgJiBCSVRGTEFHX0VOQ1JZUFRFRCkgPT0gQklURkxBR19FTkNSWVBURUQ7XG5cdGNvbnN0IHJhd0xhc3RNb2REYXRlID0gZ2V0VWludDMyKGRhdGFWaWV3LCBvZmZzZXQgKyA2KTtcblx0T2JqZWN0LmFzc2lnbihkaXJlY3RvcnksIHtcblx0XHRlbmNyeXB0ZWQsXG5cdFx0dmVyc2lvbjogZ2V0VWludDE2KGRhdGFWaWV3LCBvZmZzZXQpLFxuXHRcdGJpdEZsYWc6IHtcblx0XHRcdGxldmVsOiAocmF3Qml0RmxhZyAmIEJJVEZMQUdfTEVWRUwpID4+IDEsXG5cdFx0XHRkYXRhRGVzY3JpcHRvcjogKHJhd0JpdEZsYWcgJiBCSVRGTEFHX0RBVEFfREVTQ1JJUFRPUikgPT0gQklURkxBR19EQVRBX0RFU0NSSVBUT1IsXG5cdFx0XHRsYW5ndWFnZUVuY29kaW5nRmxhZzogKHJhd0JpdEZsYWcgJiBCSVRGTEFHX0xBTkdfRU5DT0RJTkdfRkxBRykgPT0gQklURkxBR19MQU5HX0VOQ09ESU5HX0ZMQUdcblx0XHR9LFxuXHRcdHJhd0xhc3RNb2REYXRlLFxuXHRcdGxhc3RNb2REYXRlOiBnZXREYXRlKHJhd0xhc3RNb2REYXRlKSxcblx0XHRmaWxlbmFtZUxlbmd0aDogZ2V0VWludDE2KGRhdGFWaWV3LCBvZmZzZXQgKyAyMiksXG5cdFx0ZXh0cmFGaWVsZExlbmd0aDogZ2V0VWludDE2KGRhdGFWaWV3LCBvZmZzZXQgKyAyNClcblx0fSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlYWRDb21tb25Gb290ZXIoZmlsZUVudHJ5LCBkaXJlY3RvcnksIGRhdGFWaWV3LCBvZmZzZXQsIGxvY2FsRGlyZWN0b3J5KSB7XG5cdGNvbnN0IHsgcmF3RXh0cmFGaWVsZCB9ID0gZGlyZWN0b3J5O1xuXHRjb25zdCBleHRyYUZpZWxkID0gZGlyZWN0b3J5LmV4dHJhRmllbGQgPSBuZXcgTWFwKCk7XG5cdGNvbnN0IHJhd0V4dHJhRmllbGRWaWV3ID0gZ2V0RGF0YVZpZXcobmV3IFVpbnQ4QXJyYXkocmF3RXh0cmFGaWVsZCkpO1xuXHRsZXQgb2Zmc2V0RXh0cmFGaWVsZCA9IDA7XG5cdHRyeSB7XG5cdFx0d2hpbGUgKG9mZnNldEV4dHJhRmllbGQgPCByYXdFeHRyYUZpZWxkLmxlbmd0aCkge1xuXHRcdFx0Y29uc3QgdHlwZSA9IGdldFVpbnQxNihyYXdFeHRyYUZpZWxkVmlldywgb2Zmc2V0RXh0cmFGaWVsZCk7XG5cdFx0XHRjb25zdCBzaXplID0gZ2V0VWludDE2KHJhd0V4dHJhRmllbGRWaWV3LCBvZmZzZXRFeHRyYUZpZWxkICsgMik7XG5cdFx0XHRleHRyYUZpZWxkLnNldCh0eXBlLCB7XG5cdFx0XHRcdHR5cGUsXG5cdFx0XHRcdGRhdGE6IHJhd0V4dHJhRmllbGQuc2xpY2Uob2Zmc2V0RXh0cmFGaWVsZCArIDQsIG9mZnNldEV4dHJhRmllbGQgKyA0ICsgc2l6ZSlcblx0XHRcdH0pO1xuXHRcdFx0b2Zmc2V0RXh0cmFGaWVsZCArPSA0ICsgc2l6ZTtcblx0XHR9XG5cdH0gY2F0Y2ggKF9lcnJvcikge1xuXHRcdC8vIGlnbm9yZWRcblx0fVxuXHRjb25zdCBjb21wcmVzc2lvbk1ldGhvZCA9IGdldFVpbnQxNihkYXRhVmlldywgb2Zmc2V0ICsgNCk7XG5cdE9iamVjdC5hc3NpZ24oZGlyZWN0b3J5LCB7XG5cdFx0c2lnbmF0dXJlOiBnZXRVaW50MzIoZGF0YVZpZXcsIG9mZnNldCArIDEwKSxcblx0XHR1bmNvbXByZXNzZWRTaXplOiBnZXRVaW50MzIoZGF0YVZpZXcsIG9mZnNldCArIDE4KSxcblx0XHRjb21wcmVzc2VkU2l6ZTogZ2V0VWludDMyKGRhdGFWaWV3LCBvZmZzZXQgKyAxNClcblx0fSk7XG5cdGNvbnN0IGV4dHJhRmllbGRaaXA2NCA9IGV4dHJhRmllbGQuZ2V0KEVYVFJBRklFTERfVFlQRV9aSVA2NCk7XG5cdGlmIChleHRyYUZpZWxkWmlwNjQpIHtcblx0XHRyZWFkRXh0cmFGaWVsZFppcDY0KGV4dHJhRmllbGRaaXA2NCwgZGlyZWN0b3J5KTtcblx0XHRkaXJlY3RvcnkuZXh0cmFGaWVsZFppcDY0ID0gZXh0cmFGaWVsZFppcDY0O1xuXHR9XG5cdGNvbnN0IGV4dHJhRmllbGRVbmljb2RlUGF0aCA9IGV4dHJhRmllbGQuZ2V0KEVYVFJBRklFTERfVFlQRV9VTklDT0RFX1BBVEgpO1xuXHRpZiAoZXh0cmFGaWVsZFVuaWNvZGVQYXRoKSB7XG5cdFx0YXdhaXQgcmVhZEV4dHJhRmllbGRVbmljb2RlKGV4dHJhRmllbGRVbmljb2RlUGF0aCwgUFJPUEVSVFlfTkFNRV9GSUxFTkFNRSwgUFJPUEVSVFlfTkFNRV9SQVdfRklMRU5BTUUsIGRpcmVjdG9yeSwgZmlsZUVudHJ5KTtcblx0XHRkaXJlY3RvcnkuZXh0cmFGaWVsZFVuaWNvZGVQYXRoID0gZXh0cmFGaWVsZFVuaWNvZGVQYXRoO1xuXHR9XG5cdGNvbnN0IGV4dHJhRmllbGRVbmljb2RlQ29tbWVudCA9IGV4dHJhRmllbGQuZ2V0KEVYVFJBRklFTERfVFlQRV9VTklDT0RFX0NPTU1FTlQpO1xuXHRpZiAoZXh0cmFGaWVsZFVuaWNvZGVDb21tZW50KSB7XG5cdFx0YXdhaXQgcmVhZEV4dHJhRmllbGRVbmljb2RlKGV4dHJhRmllbGRVbmljb2RlQ29tbWVudCwgUFJPUEVSVFlfTkFNRV9DT01NRU5ULCBQUk9QRVJUWV9OQU1FX1JBV19DT01NRU5ULCBkaXJlY3RvcnksIGZpbGVFbnRyeSk7XG5cdFx0ZGlyZWN0b3J5LmV4dHJhRmllbGRVbmljb2RlQ29tbWVudCA9IGV4dHJhRmllbGRVbmljb2RlQ29tbWVudDtcblx0fVxuXHRjb25zdCBleHRyYUZpZWxkQUVTID0gZXh0cmFGaWVsZC5nZXQoRVhUUkFGSUVMRF9UWVBFX0FFUyk7XG5cdGlmIChleHRyYUZpZWxkQUVTKSB7XG5cdFx0cmVhZEV4dHJhRmllbGRBRVMoZXh0cmFGaWVsZEFFUywgZGlyZWN0b3J5LCBjb21wcmVzc2lvbk1ldGhvZCk7XG5cdFx0ZGlyZWN0b3J5LmV4dHJhRmllbGRBRVMgPSBleHRyYUZpZWxkQUVTO1xuXHR9IGVsc2Uge1xuXHRcdGRpcmVjdG9yeS5jb21wcmVzc2lvbk1ldGhvZCA9IGNvbXByZXNzaW9uTWV0aG9kO1xuXHR9XG5cdGNvbnN0IGV4dHJhRmllbGROVEZTID0gZXh0cmFGaWVsZC5nZXQoRVhUUkFGSUVMRF9UWVBFX05URlMpO1xuXHRpZiAoZXh0cmFGaWVsZE5URlMpIHtcblx0XHRyZWFkRXh0cmFGaWVsZE5URlMoZXh0cmFGaWVsZE5URlMsIGRpcmVjdG9yeSk7XG5cdFx0ZGlyZWN0b3J5LmV4dHJhRmllbGROVEZTID0gZXh0cmFGaWVsZE5URlM7XG5cdH1cblx0Y29uc3QgZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wID0gZXh0cmFGaWVsZC5nZXQoRVhUUkFGSUVMRF9UWVBFX0VYVEVOREVEX1RJTUVTVEFNUCk7XG5cdGlmIChleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXApIHtcblx0XHRyZWFkRXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wKGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcCwgZGlyZWN0b3J5LCBsb2NhbERpcmVjdG9yeSk7XG5cdFx0ZGlyZWN0b3J5LmV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcCA9IGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcDtcblx0fVxuXHRjb25zdCBleHRyYUZpZWxkVVNEWiA9IGV4dHJhRmllbGQuZ2V0KEVYVFJBRklFTERfVFlQRV9VU0RaKTtcblx0aWYgKGV4dHJhRmllbGRVU0RaKSB7XG5cdFx0ZGlyZWN0b3J5LmV4dHJhRmllbGRVU0RaID0gZXh0cmFGaWVsZFVTRFo7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVhZEV4dHJhRmllbGRaaXA2NChleHRyYUZpZWxkWmlwNjQsIGRpcmVjdG9yeSkge1xuXHRkaXJlY3RvcnkuemlwNjQgPSB0cnVlO1xuXHRjb25zdCBleHRyYUZpZWxkVmlldyA9IGdldERhdGFWaWV3KGV4dHJhRmllbGRaaXA2NC5kYXRhKTtcblx0Y29uc3QgbWlzc2luZ1Byb3BlcnRpZXMgPSBaSVA2NF9QUk9QRVJUSUVTLmZpbHRlcigoW3Byb3BlcnR5TmFtZSwgbWF4XSkgPT4gZGlyZWN0b3J5W3Byb3BlcnR5TmFtZV0gPT0gbWF4KTtcblx0Zm9yIChsZXQgaW5kZXhNaXNzaW5nUHJvcGVydHkgPSAwLCBvZmZzZXQgPSAwOyBpbmRleE1pc3NpbmdQcm9wZXJ0eSA8IG1pc3NpbmdQcm9wZXJ0aWVzLmxlbmd0aDsgaW5kZXhNaXNzaW5nUHJvcGVydHkrKykge1xuXHRcdGNvbnN0IFtwcm9wZXJ0eU5hbWUsIG1heF0gPSBtaXNzaW5nUHJvcGVydGllc1tpbmRleE1pc3NpbmdQcm9wZXJ0eV07XG5cdFx0aWYgKGRpcmVjdG9yeVtwcm9wZXJ0eU5hbWVdID09IG1heCkge1xuXHRcdFx0Y29uc3QgZXh0cmFjdGlvbiA9IFpJUDY0X0VYVFJBQ1RJT05bbWF4XTtcblx0XHRcdGRpcmVjdG9yeVtwcm9wZXJ0eU5hbWVdID0gZXh0cmFGaWVsZFppcDY0W3Byb3BlcnR5TmFtZV0gPSBleHRyYWN0aW9uLmdldFZhbHVlKGV4dHJhRmllbGRWaWV3LCBvZmZzZXQpO1xuXHRcdFx0b2Zmc2V0ICs9IGV4dHJhY3Rpb24uYnl0ZXM7XG5cdFx0fSBlbHNlIGlmIChleHRyYUZpZWxkWmlwNjRbcHJvcGVydHlOYW1lXSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9FWFRSQUZJRUxEX1pJUDY0X05PVF9GT1VORCk7XG5cdFx0fVxuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlYWRFeHRyYUZpZWxkVW5pY29kZShleHRyYUZpZWxkVW5pY29kZSwgcHJvcGVydHlOYW1lLCByYXdQcm9wZXJ0eU5hbWUsIGRpcmVjdG9yeSwgZmlsZUVudHJ5KSB7XG5cdGNvbnN0IGV4dHJhRmllbGRWaWV3ID0gZ2V0RGF0YVZpZXcoZXh0cmFGaWVsZFVuaWNvZGUuZGF0YSk7XG5cdGNvbnN0IGNyYzMyID0gbmV3IENyYzMyKCk7XG5cdGNyYzMyLmFwcGVuZChmaWxlRW50cnlbcmF3UHJvcGVydHlOYW1lXSk7XG5cdGNvbnN0IGRhdGFWaWV3U2lnbmF0dXJlID0gZ2V0RGF0YVZpZXcobmV3IFVpbnQ4QXJyYXkoNCkpO1xuXHRkYXRhVmlld1NpZ25hdHVyZS5zZXRVaW50MzIoMCwgY3JjMzIuZ2V0KCksIHRydWUpO1xuXHRjb25zdCBzaWduYXR1cmUgPSBnZXRVaW50MzIoZXh0cmFGaWVsZFZpZXcsIDEpO1xuXHRPYmplY3QuYXNzaWduKGV4dHJhRmllbGRVbmljb2RlLCB7XG5cdFx0dmVyc2lvbjogZ2V0VWludDgoZXh0cmFGaWVsZFZpZXcsIDApLFxuXHRcdFtwcm9wZXJ0eU5hbWVdOiBkZWNvZGVUZXh0KGV4dHJhRmllbGRVbmljb2RlLmRhdGEuc3ViYXJyYXkoNSkpLFxuXHRcdHZhbGlkOiAhZmlsZUVudHJ5LmJpdEZsYWcubGFuZ3VhZ2VFbmNvZGluZ0ZsYWcgJiYgc2lnbmF0dXJlID09IGdldFVpbnQzMihkYXRhVmlld1NpZ25hdHVyZSwgMClcblx0fSk7XG5cdGlmIChleHRyYUZpZWxkVW5pY29kZS52YWxpZCkge1xuXHRcdGRpcmVjdG9yeVtwcm9wZXJ0eU5hbWVdID0gZXh0cmFGaWVsZFVuaWNvZGVbcHJvcGVydHlOYW1lXTtcblx0XHRkaXJlY3RvcnlbcHJvcGVydHlOYW1lICsgXCJVVEY4XCJdID0gdHJ1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiByZWFkRXh0cmFGaWVsZEFFUyhleHRyYUZpZWxkQUVTLCBkaXJlY3RvcnksIGNvbXByZXNzaW9uTWV0aG9kKSB7XG5cdGNvbnN0IGV4dHJhRmllbGRWaWV3ID0gZ2V0RGF0YVZpZXcoZXh0cmFGaWVsZEFFUy5kYXRhKTtcblx0Y29uc3Qgc3RyZW5ndGggPSBnZXRVaW50OChleHRyYUZpZWxkVmlldywgNCk7XG5cdE9iamVjdC5hc3NpZ24oZXh0cmFGaWVsZEFFUywge1xuXHRcdHZlbmRvclZlcnNpb246IGdldFVpbnQ4KGV4dHJhRmllbGRWaWV3LCAwKSxcblx0XHR2ZW5kb3JJZDogZ2V0VWludDgoZXh0cmFGaWVsZFZpZXcsIDIpLFxuXHRcdHN0cmVuZ3RoLFxuXHRcdG9yaWdpbmFsQ29tcHJlc3Npb25NZXRob2Q6IGNvbXByZXNzaW9uTWV0aG9kLFxuXHRcdGNvbXByZXNzaW9uTWV0aG9kOiBnZXRVaW50MTYoZXh0cmFGaWVsZFZpZXcsIDUpXG5cdH0pO1xuXHRkaXJlY3RvcnkuY29tcHJlc3Npb25NZXRob2QgPSBleHRyYUZpZWxkQUVTLmNvbXByZXNzaW9uTWV0aG9kO1xufVxuXG5mdW5jdGlvbiByZWFkRXh0cmFGaWVsZE5URlMoZXh0cmFGaWVsZE5URlMsIGRpcmVjdG9yeSkge1xuXHRjb25zdCBleHRyYUZpZWxkVmlldyA9IGdldERhdGFWaWV3KGV4dHJhRmllbGROVEZTLmRhdGEpO1xuXHRsZXQgb2Zmc2V0RXh0cmFGaWVsZCA9IDQ7XG5cdGxldCB0YWcxRGF0YTtcblx0dHJ5IHtcblx0XHR3aGlsZSAob2Zmc2V0RXh0cmFGaWVsZCA8IGV4dHJhRmllbGROVEZTLmRhdGEubGVuZ3RoICYmICF0YWcxRGF0YSkge1xuXHRcdFx0Y29uc3QgdGFnVmFsdWUgPSBnZXRVaW50MTYoZXh0cmFGaWVsZFZpZXcsIG9mZnNldEV4dHJhRmllbGQpO1xuXHRcdFx0Y29uc3QgYXR0cmlidXRlU2l6ZSA9IGdldFVpbnQxNihleHRyYUZpZWxkVmlldywgb2Zmc2V0RXh0cmFGaWVsZCArIDIpO1xuXHRcdFx0aWYgKHRhZ1ZhbHVlID09IEVYVFJBRklFTERfVFlQRV9OVEZTX1RBRzEpIHtcblx0XHRcdFx0dGFnMURhdGEgPSBleHRyYUZpZWxkTlRGUy5kYXRhLnNsaWNlKG9mZnNldEV4dHJhRmllbGQgKyA0LCBvZmZzZXRFeHRyYUZpZWxkICsgNCArIGF0dHJpYnV0ZVNpemUpO1xuXHRcdFx0fVxuXHRcdFx0b2Zmc2V0RXh0cmFGaWVsZCArPSA0ICsgYXR0cmlidXRlU2l6ZTtcblx0XHR9XG5cdH0gY2F0Y2ggKF9lcnJvcikge1xuXHRcdC8vIGlnbm9yZWRcblx0fVxuXHR0cnkge1xuXHRcdGlmICh0YWcxRGF0YSAmJiB0YWcxRGF0YS5sZW5ndGggPT0gMjQpIHtcblx0XHRcdGNvbnN0IHRhZzFWaWV3ID0gZ2V0RGF0YVZpZXcodGFnMURhdGEpO1xuXHRcdFx0Y29uc3QgcmF3TGFzdE1vZERhdGUgPSB0YWcxVmlldy5nZXRCaWdVaW50NjQoMCwgdHJ1ZSk7XG5cdFx0XHRjb25zdCByYXdMYXN0QWNjZXNzRGF0ZSA9IHRhZzFWaWV3LmdldEJpZ1VpbnQ2NCg4LCB0cnVlKTtcblx0XHRcdGNvbnN0IHJhd0NyZWF0aW9uRGF0ZSA9IHRhZzFWaWV3LmdldEJpZ1VpbnQ2NCgxNiwgdHJ1ZSk7XG5cdFx0XHRPYmplY3QuYXNzaWduKGV4dHJhRmllbGROVEZTLCB7XG5cdFx0XHRcdHJhd0xhc3RNb2REYXRlLFxuXHRcdFx0XHRyYXdMYXN0QWNjZXNzRGF0ZSxcblx0XHRcdFx0cmF3Q3JlYXRpb25EYXRlXG5cdFx0XHR9KTtcblx0XHRcdGNvbnN0IGxhc3RNb2REYXRlID0gZ2V0RGF0ZU5URlMocmF3TGFzdE1vZERhdGUpO1xuXHRcdFx0Y29uc3QgbGFzdEFjY2Vzc0RhdGUgPSBnZXREYXRlTlRGUyhyYXdMYXN0QWNjZXNzRGF0ZSk7XG5cdFx0XHRjb25zdCBjcmVhdGlvbkRhdGUgPSBnZXREYXRlTlRGUyhyYXdDcmVhdGlvbkRhdGUpO1xuXHRcdFx0Y29uc3QgZXh0cmFGaWVsZERhdGEgPSB7IGxhc3RNb2REYXRlLCBsYXN0QWNjZXNzRGF0ZSwgY3JlYXRpb25EYXRlIH07XG5cdFx0XHRPYmplY3QuYXNzaWduKGV4dHJhRmllbGROVEZTLCBleHRyYUZpZWxkRGF0YSk7XG5cdFx0XHRPYmplY3QuYXNzaWduKGRpcmVjdG9yeSwgZXh0cmFGaWVsZERhdGEpO1xuXHRcdH1cblx0fSBjYXRjaCAoX2Vycm9yKSB7XG5cdFx0Ly8gaWdub3JlZFxuXHR9XG59XG5cbmZ1bmN0aW9uIHJlYWRFeHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXAoZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wLCBkaXJlY3RvcnksIGxvY2FsRGlyZWN0b3J5KSB7XG5cdGNvbnN0IGV4dHJhRmllbGRWaWV3ID0gZ2V0RGF0YVZpZXcoZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wLmRhdGEpO1xuXHRjb25zdCBmbGFncyA9IGdldFVpbnQ4KGV4dHJhRmllbGRWaWV3LCAwKTtcblx0Y29uc3QgdGltZVByb3BlcnRpZXMgPSBbXTtcblx0Y29uc3QgdGltZVJhd1Byb3BlcnRpZXMgPSBbXTtcblx0aWYgKGxvY2FsRGlyZWN0b3J5KSB7XG5cdFx0aWYgKChmbGFncyAmIDB4MSkgPT0gMHgxKSB7XG5cdFx0XHR0aW1lUHJvcGVydGllcy5wdXNoKFBST1BFUlRZX05BTUVfTEFTVF9NT0RJRklDQVRJT05fREFURSk7XG5cdFx0XHR0aW1lUmF3UHJvcGVydGllcy5wdXNoKFBST1BFUlRZX05BTUVfUkFXX0xBU1RfTU9ESUZJQ0FUSU9OX0RBVEUpO1xuXHRcdH1cblx0XHRpZiAoKGZsYWdzICYgMHgyKSA9PSAweDIpIHtcblx0XHRcdHRpbWVQcm9wZXJ0aWVzLnB1c2goUFJPUEVSVFlfTkFNRV9MQVNUX0FDQ0VTU19EQVRFKTtcblx0XHRcdHRpbWVSYXdQcm9wZXJ0aWVzLnB1c2goUFJPUEVSVFlfTkFNRV9SQVdfTEFTVF9BQ0NFU1NfREFURSk7XG5cdFx0fVxuXHRcdGlmICgoZmxhZ3MgJiAweDQpID09IDB4NCkge1xuXHRcdFx0dGltZVByb3BlcnRpZXMucHVzaChQUk9QRVJUWV9OQU1FX0NSRUFUSU9OX0RBVEUpO1xuXHRcdFx0dGltZVJhd1Byb3BlcnRpZXMucHVzaChQUk9QRVJUWV9OQU1FX1JBV19DUkVBVElPTl9EQVRFKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wLmRhdGEubGVuZ3RoID49IDUpIHtcblx0XHR0aW1lUHJvcGVydGllcy5wdXNoKFBST1BFUlRZX05BTUVfTEFTVF9NT0RJRklDQVRJT05fREFURSk7XG5cdFx0dGltZVJhd1Byb3BlcnRpZXMucHVzaChQUk9QRVJUWV9OQU1FX1JBV19MQVNUX01PRElGSUNBVElPTl9EQVRFKTtcblx0fVxuXHRsZXQgb2Zmc2V0ID0gMTtcblx0dGltZVByb3BlcnRpZXMuZm9yRWFjaCgocHJvcGVydHlOYW1lLCBpbmRleFByb3BlcnR5KSA9PiB7XG5cdFx0aWYgKGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcC5kYXRhLmxlbmd0aCA+PSBvZmZzZXQgKyA0KSB7XG5cdFx0XHRjb25zdCB0aW1lID0gZ2V0VWludDMyKGV4dHJhRmllbGRWaWV3LCBvZmZzZXQpO1xuXHRcdFx0ZGlyZWN0b3J5W3Byb3BlcnR5TmFtZV0gPSBleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXBbcHJvcGVydHlOYW1lXSA9IG5ldyBEYXRlKHRpbWUgKiAxMDAwKTtcblx0XHRcdGNvbnN0IHJhd1Byb3BlcnR5TmFtZSA9IHRpbWVSYXdQcm9wZXJ0aWVzW2luZGV4UHJvcGVydHldO1xuXHRcdFx0ZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wW3Jhd1Byb3BlcnR5TmFtZV0gPSB0aW1lO1xuXHRcdH1cblx0XHRvZmZzZXQgKz0gNDtcblx0fSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNlZWtTaWduYXR1cmUocmVhZGVyLCBzaWduYXR1cmUsIHN0YXJ0T2Zmc2V0LCBtaW5pbXVtQnl0ZXMsIG1heGltdW1MZW5ndGgpIHtcblx0Y29uc3Qgc2lnbmF0dXJlQXJyYXkgPSBuZXcgVWludDhBcnJheSg0KTtcblx0Y29uc3Qgc2lnbmF0dXJlVmlldyA9IGdldERhdGFWaWV3KHNpZ25hdHVyZUFycmF5KTtcblx0c2V0VWludDMyKHNpZ25hdHVyZVZpZXcsIDAsIHNpZ25hdHVyZSk7XG5cdGNvbnN0IG1heGltdW1CeXRlcyA9IG1pbmltdW1CeXRlcyArIG1heGltdW1MZW5ndGg7XG5cdHJldHVybiAoYXdhaXQgc2VlayhtaW5pbXVtQnl0ZXMpKSB8fCBhd2FpdCBzZWVrKE1hdGgubWluKG1heGltdW1CeXRlcywgc3RhcnRPZmZzZXQpKTtcblxuXHRhc3luYyBmdW5jdGlvbiBzZWVrKGxlbmd0aCkge1xuXHRcdGNvbnN0IG9mZnNldCA9IHN0YXJ0T2Zmc2V0IC0gbGVuZ3RoO1xuXHRcdGNvbnN0IGJ5dGVzID0gYXdhaXQgcmVhZFVpbnQ4QXJyYXkocmVhZGVyLCBvZmZzZXQsIGxlbmd0aCk7XG5cdFx0Zm9yIChsZXQgaW5kZXhCeXRlID0gYnl0ZXMubGVuZ3RoIC0gbWluaW11bUJ5dGVzOyBpbmRleEJ5dGUgPj0gMDsgaW5kZXhCeXRlLS0pIHtcblx0XHRcdGlmIChieXRlc1tpbmRleEJ5dGVdID09IHNpZ25hdHVyZUFycmF5WzBdICYmIGJ5dGVzW2luZGV4Qnl0ZSArIDFdID09IHNpZ25hdHVyZUFycmF5WzFdICYmXG5cdFx0XHRcdGJ5dGVzW2luZGV4Qnl0ZSArIDJdID09IHNpZ25hdHVyZUFycmF5WzJdICYmIGJ5dGVzW2luZGV4Qnl0ZSArIDNdID09IHNpZ25hdHVyZUFycmF5WzNdKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0b2Zmc2V0OiBvZmZzZXQgKyBpbmRleEJ5dGUsXG5cdFx0XHRcdFx0YnVmZmVyOiBieXRlcy5zbGljZShpbmRleEJ5dGUsIGluZGV4Qnl0ZSArIG1pbmltdW1CeXRlcykuYnVmZmVyXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGdldE9wdGlvblZhbHVlKHppcFJlYWRlciwgb3B0aW9ucywgbmFtZSkge1xuXHRyZXR1cm4gb3B0aW9uc1tuYW1lXSA9PT0gVU5ERUZJTkVEX1ZBTFVFID8gemlwUmVhZGVyLm9wdGlvbnNbbmFtZV0gOiBvcHRpb25zW25hbWVdO1xufVxuXG5mdW5jdGlvbiBnZXREYXRlKHRpbWVSYXcpIHtcblx0Y29uc3QgZGF0ZSA9ICh0aW1lUmF3ICYgMHhmZmZmMDAwMCkgPj4gMTYsIHRpbWUgPSB0aW1lUmF3ICYgMHgwMDAwZmZmZjtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IERhdGUoMTk4MCArICgoZGF0ZSAmIDB4RkUwMCkgPj4gOSksICgoZGF0ZSAmIDB4MDFFMCkgPj4gNSkgLSAxLCBkYXRlICYgMHgwMDFGLCAodGltZSAmIDB4RjgwMCkgPj4gMTEsICh0aW1lICYgMHgwN0UwKSA+PiA1LCAodGltZSAmIDB4MDAxRikgKiAyLCAwKTtcblx0fSBjYXRjaCAoX2Vycm9yKSB7XG5cdFx0Ly8gaWdub3JlZFxuXHR9XG59XG5cbmZ1bmN0aW9uIGdldERhdGVOVEZTKHRpbWVSYXcpIHtcblx0cmV0dXJuIG5ldyBEYXRlKChOdW1iZXIoKHRpbWVSYXcgLyBCaWdJbnQoMTAwMDApKSAtIEJpZ0ludCgxMTY0NDQ3MzYwMDAwMCkpKSk7XG59XG5cbmZ1bmN0aW9uIGdldFVpbnQ4KHZpZXcsIG9mZnNldCkge1xuXHRyZXR1cm4gdmlldy5nZXRVaW50OChvZmZzZXQpO1xufVxuXG5mdW5jdGlvbiBnZXRVaW50MTYodmlldywgb2Zmc2V0KSB7XG5cdHJldHVybiB2aWV3LmdldFVpbnQxNihvZmZzZXQsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZXRVaW50MzIodmlldywgb2Zmc2V0KSB7XG5cdHJldHVybiB2aWV3LmdldFVpbnQzMihvZmZzZXQsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZXRCaWdVaW50NjQodmlldywgb2Zmc2V0KSB7XG5cdHJldHVybiBOdW1iZXIodmlldy5nZXRCaWdVaW50NjQob2Zmc2V0LCB0cnVlKSk7XG59XG5cbmZ1bmN0aW9uIHNldFVpbnQzMih2aWV3LCBvZmZzZXQsIHZhbHVlKSB7XG5cdHZpZXcuc2V0VWludDMyKG9mZnNldCwgdmFsdWUsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhVmlldyhhcnJheSkge1xuXHRyZXR1cm4gbmV3IERhdGFWaWV3KGFycmF5LmJ1ZmZlcik7XG59IiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMjIgR2lsZGFzIExvcm1lYXUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgXG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIFxuIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgJydBUyBJUycnIEFORCBBTlkgRVhQUkVTU0VEIE9SIElNUExJRUQgV0FSUkFOVElFUyxcbiBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcbiBJTkMuIE9SIEFOWSBDT05UUklCVVRPUlMgVE8gVEhJUyBTT0ZUV0FSRSBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULFxuIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcbiBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG5pbXBvcnQgeyBjb25maWd1cmUgfSBmcm9tIFwiLi9jb3JlL2NvbmZpZ3VyYXRpb24uanNcIjtcbmltcG9ydCB7IGNvbmZpZ3VyZVdlYldvcmtlciB9IGZyb20gXCIuL3otd29ya2VyLWlubGluZS5qc1wiO1xuaW1wb3J0IHsgZ2V0TWltZVR5cGUgfSBmcm9tIFwiLi9jb3JlL3V0aWwvZGVmYXVsdC1taW1lLXR5cGUuanNcIjtcbmltcG9ydCB7IGluaXRTaGltQXN5bmNDb2RlYyB9IGZyb20gXCIuL2NvcmUvdXRpbC9zdHJlYW0tY29kZWMtc2hpbS5qc1wiO1xuaW1wb3J0IHsgdGVybWluYXRlV29ya2VycyB9IGZyb20gXCIuL2NvcmUvY29kZWMtcG9vbC5qc1wiO1xuXG5sZXQgYmFzZVVSTDtcbnRyeSB7XG5cdGJhc2VVUkwgPSBpbXBvcnQubWV0YS51cmw7XG59IGNhdGNoIChfZXJyb3IpIHtcblx0Ly8gaWdub3JlZFxufVxuY29uZmlndXJlKHsgYmFzZVVSTCB9KTtcbmNvbmZpZ3VyZVdlYldvcmtlcihjb25maWd1cmUpO1xuXG5leHBvcnQgKiBmcm9tIFwiLi9jb3JlL2lvLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb3JlL3ppcC1yZWFkZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvcmUvemlwLXdyaXRlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29yZS96aXAtZnMtY29yZS5qc1wiO1xuZXhwb3J0IHtcblx0Y29uZmlndXJlLFxuXHRnZXRNaW1lVHlwZSxcblx0aW5pdFNoaW1Bc3luY0NvZGVjLFxuXHR0ZXJtaW5hdGVXb3JrZXJzXG59OyIsIi8qXG4gQ29weXJpZ2h0IChjKSAyMDIyIEdpbGRhcyBMb3JtZWF1LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiBcbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuIDMuIFRoZSBuYW1lcyBvZiB0aGUgYXV0aG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEICcnQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXG4gSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKQ1JBRlQsXG4gSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsXG4gT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLyogZ2xvYmFsIEJpZ0ludCAqL1xuLy8gZGVuby1saW50LWlnbm9yZS1maWxlIG5vLXRoaXMtYWxpYXNcblxuaW1wb3J0IHtcblx0TUFYXzMyX0JJVFMsXG5cdE1BWF8xNl9CSVRTLFxuXHRDT01QUkVTU0lPTl9NRVRIT0RfREVGTEFURSxcblx0Q09NUFJFU1NJT05fTUVUSE9EX1NUT1JFLFxuXHRDT01QUkVTU0lPTl9NRVRIT0RfQUVTLFxuXHRTUExJVF9aSVBfRklMRV9TSUdOQVRVUkUsXG5cdExPQ0FMX0ZJTEVfSEVBREVSX1NJR05BVFVSRSxcblx0REFUQV9ERVNDUklQVE9SX1JFQ09SRF9TSUdOQVRVUkUsXG5cdENFTlRSQUxfRklMRV9IRUFERVJfU0lHTkFUVVJFLFxuXHRFTkRfT0ZfQ0VOVFJBTF9ESVJfU0lHTkFUVVJFLFxuXHRaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTE9DQVRPUl9TSUdOQVRVUkUsXG5cdFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9TSUdOQVRVUkUsXG5cdEVYVFJBRklFTERfVFlQRV9BRVMsXG5cdEVYVFJBRklFTERfVFlQRV9aSVA2NCxcblx0RVhUUkFGSUVMRF9UWVBFX0VYVEVOREVEX1RJTUVTVEFNUCxcblx0RVhUUkFGSUVMRF9UWVBFX05URlMsXG5cdEVYVFJBRklFTERfVFlQRV9OVEZTX1RBRzEsXG5cdEVYVFJBRklFTERfVFlQRV9VU0RaLFxuXHRFTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RILFxuXHRaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTEVOR1RILFxuXHRaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTE9DQVRPUl9MRU5HVEgsXG5cdFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9UT1RBTF9MRU5HVEgsXG5cdEJJVEZMQUdfRU5DUllQVEVELFxuXHRCSVRGTEFHX0RBVEFfREVTQ1JJUFRPUixcblx0QklURkxBR19MQU5HX0VOQ09ESU5HX0ZMQUcsXG5cdEZJTEVfQVRUUl9NU0RPU19ESVJfTUFTSyxcblx0VkVSU0lPTl9ERUZMQVRFLFxuXHRWRVJTSU9OX1pJUDY0LFxuXHRWRVJTSU9OX0FFUyxcblx0RElSRUNUT1JZX1NJR05BVFVSRSxcblx0TUlOX0RBVEUsXG5cdE1BWF9EQVRFLFxuXHRVTkRFRklORURfVkFMVUVcbn0gZnJvbSBcIi4vY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQge1xuXHRnZXRDb25maWd1cmF0aW9uLFxuXHRnZXRDaHVua1NpemVcbn0gZnJvbSBcIi4vY29uZmlndXJhdGlvbi5qc1wiO1xuaW1wb3J0IHtcblx0Q09ERUNfREVGTEFURSxcblx0cnVuV29ya2VyXG59IGZyb20gXCIuL2NvZGVjLXBvb2wuanNcIjtcbmltcG9ydCB7XG5cdGluaXRTdHJlYW0sXG5cdGluaXRSZWFkZXIsXG5cdGluaXRXcml0ZXIsXG5cdEJsb2JXcml0ZXIsXG5cdFNwbGl0RGF0YVdyaXRlclxufSBmcm9tIFwiLi9pby5qc1wiO1xuaW1wb3J0IHsgZW5jb2RlVGV4dCB9IGZyb20gXCIuL3V0aWwvZW5jb2RlLXRleHQuanNcIjtcbmltcG9ydCB7XG5cdFBST1BFUlRZX05BTUVfTEFTVF9NT0RJRklDQVRJT05fREFURSxcblx0UFJPUEVSVFlfTkFNRV9MQVNUX0FDQ0VTU19EQVRFLFxuXHRQUk9QRVJUWV9OQU1FX0NSRUFUSU9OX0RBVEUsXG5cdFBST1BFUlRZX05BTUVfSU5URVJOQUxfRklMRV9BVFRSSUJVVEUsXG5cdFBST1BFUlRZX05BTUVfRVhURVJOQUxfRklMRV9BVFRSSUJVVEUsXG5cdFBST1BFUlRZX05BTUVfTVNfRE9TX0NPTVBBVElCTEUsXG5cdFBST1BFUlRZX05BTUVfWklQNjQsXG5cdEVudHJ5XG59IGZyb20gXCIuL3ppcC1lbnRyeS5qc1wiO1xuXG5jb25zdCBFUlJfRFVQTElDQVRFRF9OQU1FID0gXCJGaWxlIGFscmVhZHkgZXhpc3RzXCI7XG5jb25zdCBFUlJfSU5WQUxJRF9DT01NRU5UID0gXCJaaXAgZmlsZSBjb21tZW50IGV4Y2VlZHMgNjRLQlwiO1xuY29uc3QgRVJSX0lOVkFMSURfRU5UUllfQ09NTUVOVCA9IFwiRmlsZSBlbnRyeSBjb21tZW50IGV4Y2VlZHMgNjRLQlwiO1xuY29uc3QgRVJSX0lOVkFMSURfRU5UUllfTkFNRSA9IFwiRmlsZSBlbnRyeSBuYW1lIGV4Y2VlZHMgNjRLQlwiO1xuY29uc3QgRVJSX0lOVkFMSURfVkVSU0lPTiA9IFwiVmVyc2lvbiBleGNlZWRzIDY1NTM1XCI7XG5jb25zdCBFUlJfSU5WQUxJRF9FTkNSWVBUSU9OX1NUUkVOR1RIID0gXCJUaGUgc3RyZW5ndGggbXVzdCBlcXVhbCAxLCAyLCBvciAzXCI7XG5jb25zdCBFUlJfSU5WQUxJRF9FWFRSQUZJRUxEX1RZUEUgPSBcIkV4dHJhIGZpZWxkIHR5cGUgZXhjZWVkcyA2NTUzNVwiO1xuY29uc3QgRVJSX0lOVkFMSURfRVhUUkFGSUVMRF9EQVRBID0gXCJFeHRyYSBmaWVsZCBkYXRhIGV4Y2VlZHMgNjRLQlwiO1xuY29uc3QgRVJSX1VOU1VQUE9SVEVEX0ZPUk1BVCA9IFwiWmlwNjQgaXMgbm90IHN1cHBvcnRlZCAobWFrZSBzdXJlICdrZWVwT3JkZXInIGlzIHNldCB0byAndHJ1ZScpXCI7XG5cbmNvbnN0IEVYVFJBRklFTERfREFUQV9BRVMgPSBuZXcgVWludDhBcnJheShbMHgwNywgMHgwMCwgMHgwMiwgMHgwMCwgMHg0MSwgMHg0NSwgMHgwMywgMHgwMCwgMHgwMF0pO1xuXG5sZXQgd29ya2VycyA9IDA7XG5jb25zdCBwZW5kaW5nRW50cmllcyA9IFtdO1xuXG5jbGFzcyBaaXBXcml0ZXIge1xuXG5cdGNvbnN0cnVjdG9yKHdyaXRlciwgb3B0aW9ucyA9IHt9KSB7XG5cdFx0d3JpdGVyID0gaW5pdFdyaXRlcih3cml0ZXIpO1xuXHRcdE9iamVjdC5hc3NpZ24odGhpcywge1xuXHRcdFx0d3JpdGVyLFxuXHRcdFx0YWRkU3BsaXRaaXBTaWduYXR1cmU6IHdyaXRlciBpbnN0YW5jZW9mIFNwbGl0RGF0YVdyaXRlcixcblx0XHRcdG9wdGlvbnMsXG5cdFx0XHRjb25maWc6IGdldENvbmZpZ3VyYXRpb24oKSxcblx0XHRcdGZpbGVzOiBuZXcgTWFwKCksXG5cdFx0XHRmaWxlbmFtZXM6IG5ldyBTZXQoKSxcblx0XHRcdG9mZnNldDogd3JpdGVyLndyaXRhYmxlLnNpemUsXG5cdFx0XHRwZW5kaW5nRW50cmllc1NpemU6IDAsXG5cdFx0XHRwZW5kaW5nQWRkRmlsZUNhbGxzOiBuZXcgU2V0KCksXG5cdFx0XHRidWZmZXJlZFdyaXRlczogMFxuXHRcdH0pO1xuXHR9XG5cblx0YXN5bmMgYWRkKG5hbWUgPSBcIlwiLCByZWFkZXIsIG9wdGlvbnMgPSB7fSkge1xuXHRcdGNvbnN0IHppcFdyaXRlciA9IHRoaXM7XG5cdFx0Y29uc3Qge1xuXHRcdFx0cGVuZGluZ0FkZEZpbGVDYWxscyxcblx0XHRcdGNvbmZpZ1xuXHRcdH0gPSB6aXBXcml0ZXI7XG5cdFx0aWYgKHdvcmtlcnMgPCBjb25maWcubWF4V29ya2Vycykge1xuXHRcdFx0d29ya2VycysrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHBlbmRpbmdFbnRyaWVzLnB1c2gocmVzb2x2ZSkpO1xuXHRcdH1cblx0XHRsZXQgcHJvbWlzZUFkZEZpbGU7XG5cdFx0dHJ5IHtcblx0XHRcdG5hbWUgPSBuYW1lLnRyaW0oKTtcblx0XHRcdGlmICh6aXBXcml0ZXIuZmlsZW5hbWVzLmhhcyhuYW1lKSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0RVUExJQ0FURURfTkFNRSk7XG5cdFx0XHR9XG5cdFx0XHR6aXBXcml0ZXIuZmlsZW5hbWVzLmFkZChuYW1lKTtcblx0XHRcdHByb21pc2VBZGRGaWxlID0gYWRkRmlsZSh6aXBXcml0ZXIsIG5hbWUsIHJlYWRlciwgb3B0aW9ucyk7XG5cdFx0XHRwZW5kaW5nQWRkRmlsZUNhbGxzLmFkZChwcm9taXNlQWRkRmlsZSk7XG5cdFx0XHRyZXR1cm4gYXdhaXQgcHJvbWlzZUFkZEZpbGU7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdHppcFdyaXRlci5maWxlbmFtZXMuZGVsZXRlKG5hbWUpO1xuXHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdHBlbmRpbmdBZGRGaWxlQ2FsbHMuZGVsZXRlKHByb21pc2VBZGRGaWxlKTtcblx0XHRcdGNvbnN0IHBlbmRpbmdFbnRyeSA9IHBlbmRpbmdFbnRyaWVzLnNoaWZ0KCk7XG5cdFx0XHRpZiAocGVuZGluZ0VudHJ5KSB7XG5cdFx0XHRcdHBlbmRpbmdFbnRyeSgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d29ya2Vycy0tO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGFzeW5jIGNsb3NlKGNvbW1lbnQgPSBuZXcgVWludDhBcnJheSgpLCBvcHRpb25zID0ge30pIHtcblx0XHRjb25zdCB6aXBXcml0ZXIgPSB0aGlzO1xuXHRcdGNvbnN0IHsgcGVuZGluZ0FkZEZpbGVDYWxscywgd3JpdGVyIH0gPSB0aGlzO1xuXHRcdGNvbnN0IHsgd3JpdGFibGUgfSA9IHdyaXRlcjtcblx0XHR3aGlsZSAocGVuZGluZ0FkZEZpbGVDYWxscy5zaXplKSB7XG5cdFx0XHRhd2FpdCBQcm9taXNlLmFsbChBcnJheS5mcm9tKHBlbmRpbmdBZGRGaWxlQ2FsbHMpKTtcblx0XHR9XG5cdFx0YXdhaXQgY2xvc2VGaWxlKHRoaXMsIGNvbW1lbnQsIG9wdGlvbnMpO1xuXHRcdGNvbnN0IHByZXZlbnRDbG9zZSA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgXCJwcmV2ZW50Q2xvc2VcIik7XG5cdFx0aWYgKCFwcmV2ZW50Q2xvc2UpIHtcblx0XHRcdGF3YWl0IHdyaXRhYmxlLmdldFdyaXRlcigpLmNsb3NlKCk7XG5cdFx0fVxuXHRcdHJldHVybiB3cml0ZXIuZ2V0RGF0YSA/IHdyaXRlci5nZXREYXRhKCkgOiB3cml0YWJsZTtcblx0fVxufVxuXG5leHBvcnQge1xuXHRaaXBXcml0ZXIsXG5cdEVSUl9EVVBMSUNBVEVEX05BTUUsXG5cdEVSUl9JTlZBTElEX0NPTU1FTlQsXG5cdEVSUl9JTlZBTElEX0VOVFJZX05BTUUsXG5cdEVSUl9JTlZBTElEX0VOVFJZX0NPTU1FTlQsXG5cdEVSUl9JTlZBTElEX1ZFUlNJT04sXG5cdEVSUl9JTlZBTElEX0VYVFJBRklFTERfVFlQRSxcblx0RVJSX0lOVkFMSURfRVhUUkFGSUVMRF9EQVRBLFxuXHRFUlJfSU5WQUxJRF9FTkNSWVBUSU9OX1NUUkVOR1RILFxuXHRFUlJfVU5TVVBQT1JURURfRk9STUFUXG59O1xuXG5hc3luYyBmdW5jdGlvbiBhZGRGaWxlKHppcFdyaXRlciwgbmFtZSwgcmVhZGVyLCBvcHRpb25zKSB7XG5cdG5hbWUgPSBuYW1lLnRyaW0oKTtcblx0aWYgKG9wdGlvbnMuZGlyZWN0b3J5ICYmICghbmFtZS5lbmRzV2l0aChESVJFQ1RPUllfU0lHTkFUVVJFKSkpIHtcblx0XHRuYW1lICs9IERJUkVDVE9SWV9TSUdOQVRVUkU7XG5cdH0gZWxzZSB7XG5cdFx0b3B0aW9ucy5kaXJlY3RvcnkgPSBuYW1lLmVuZHNXaXRoKERJUkVDVE9SWV9TSUdOQVRVUkUpO1xuXHR9XG5cdGNvbnN0IHJhd0ZpbGVuYW1lID0gZW5jb2RlVGV4dChuYW1lKTtcblx0aWYgKGdldExlbmd0aChyYXdGaWxlbmFtZSkgPiBNQVhfMTZfQklUUykge1xuXHRcdHRocm93IG5ldyBFcnJvcihFUlJfSU5WQUxJRF9FTlRSWV9OQU1FKTtcblx0fVxuXHRjb25zdCBjb21tZW50ID0gb3B0aW9ucy5jb21tZW50IHx8IFwiXCI7XG5cdGNvbnN0IHJhd0NvbW1lbnQgPSBlbmNvZGVUZXh0KGNvbW1lbnQpO1xuXHRpZiAoZ2V0TGVuZ3RoKHJhd0NvbW1lbnQpID4gTUFYXzE2X0JJVFMpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0lOVkFMSURfRU5UUllfQ09NTUVOVCk7XG5cdH1cblx0Y29uc3QgdmVyc2lvbiA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgXCJ2ZXJzaW9uXCIsIFZFUlNJT05fREVGTEFURSk7XG5cdGlmICh2ZXJzaW9uID4gTUFYXzE2X0JJVFMpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0lOVkFMSURfVkVSU0lPTik7XG5cdH1cblx0Y29uc3QgdmVyc2lvbk1hZGVCeSA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgXCJ2ZXJzaW9uTWFkZUJ5XCIsIDIwKTtcblx0aWYgKHZlcnNpb25NYWRlQnkgPiBNQVhfMTZfQklUUykge1xuXHRcdHRocm93IG5ldyBFcnJvcihFUlJfSU5WQUxJRF9WRVJTSU9OKTtcblx0fVxuXHRjb25zdCBsYXN0TW9kRGF0ZSA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgUFJPUEVSVFlfTkFNRV9MQVNUX01PRElGSUNBVElPTl9EQVRFLCBuZXcgRGF0ZSgpKTtcblx0Y29uc3QgbGFzdEFjY2Vzc0RhdGUgPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFBST1BFUlRZX05BTUVfTEFTVF9BQ0NFU1NfREFURSk7XG5cdGNvbnN0IGNyZWF0aW9uRGF0ZSA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgUFJPUEVSVFlfTkFNRV9DUkVBVElPTl9EQVRFKTtcblx0Y29uc3QgbXNEb3NDb21wYXRpYmxlID0gZ2V0T3B0aW9uVmFsdWUoemlwV3JpdGVyLCBvcHRpb25zLCBQUk9QRVJUWV9OQU1FX01TX0RPU19DT01QQVRJQkxFLCB0cnVlKTtcblx0Y29uc3QgaW50ZXJuYWxGaWxlQXR0cmlidXRlID0gZ2V0T3B0aW9uVmFsdWUoemlwV3JpdGVyLCBvcHRpb25zLCBQUk9QRVJUWV9OQU1FX0lOVEVSTkFMX0ZJTEVfQVRUUklCVVRFLCAwKTtcblx0Y29uc3QgZXh0ZXJuYWxGaWxlQXR0cmlidXRlID0gZ2V0T3B0aW9uVmFsdWUoemlwV3JpdGVyLCBvcHRpb25zLCBQUk9QRVJUWV9OQU1FX0VYVEVSTkFMX0ZJTEVfQVRUUklCVVRFLCAwKTtcblx0Y29uc3QgcGFzc3dvcmQgPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFwicGFzc3dvcmRcIik7XG5cdGNvbnN0IGVuY3J5cHRpb25TdHJlbmd0aCA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgXCJlbmNyeXB0aW9uU3RyZW5ndGhcIiwgMyk7XG5cdGNvbnN0IHppcENyeXB0byA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgXCJ6aXBDcnlwdG9cIik7XG5cdGNvbnN0IGV4dGVuZGVkVGltZXN0YW1wID0gZ2V0T3B0aW9uVmFsdWUoemlwV3JpdGVyLCBvcHRpb25zLCBcImV4dGVuZGVkVGltZXN0YW1wXCIsIHRydWUpO1xuXHRjb25zdCBrZWVwT3JkZXIgPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFwia2VlcE9yZGVyXCIsIHRydWUpO1xuXHRjb25zdCBsZXZlbCA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgXCJsZXZlbFwiKTtcblx0Y29uc3QgdXNlV2ViV29ya2VycyA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgXCJ1c2VXZWJXb3JrZXJzXCIpO1xuXHRjb25zdCBidWZmZXJlZFdyaXRlID0gZ2V0T3B0aW9uVmFsdWUoemlwV3JpdGVyLCBvcHRpb25zLCBcImJ1ZmZlcmVkV3JpdGVcIik7XG5cdGNvbnN0IGRhdGFEZXNjcmlwdG9yU2lnbmF0dXJlID0gZ2V0T3B0aW9uVmFsdWUoemlwV3JpdGVyLCBvcHRpb25zLCBcImRhdGFEZXNjcmlwdG9yU2lnbmF0dXJlXCIsIGZhbHNlKTtcblx0Y29uc3Qgc2lnbmFsID0gZ2V0T3B0aW9uVmFsdWUoemlwV3JpdGVyLCBvcHRpb25zLCBcInNpZ25hbFwiKTtcblx0Y29uc3QgdXNlQ29tcHJlc3Npb25TdHJlYW0gPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFwidXNlQ29tcHJlc3Npb25TdHJlYW1cIik7XG5cdGxldCBkYXRhRGVzY3JpcHRvciA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgXCJkYXRhRGVzY3JpcHRvclwiLCB0cnVlKTtcblx0bGV0IHppcDY0ID0gZ2V0T3B0aW9uVmFsdWUoemlwV3JpdGVyLCBvcHRpb25zLCBQUk9QRVJUWV9OQU1FX1pJUDY0KTtcblx0aWYgKHBhc3N3b3JkICE9PSBVTkRFRklORURfVkFMVUUgJiYgZW5jcnlwdGlvblN0cmVuZ3RoICE9PSBVTkRFRklORURfVkFMVUUgJiYgKGVuY3J5cHRpb25TdHJlbmd0aCA8IDEgfHwgZW5jcnlwdGlvblN0cmVuZ3RoID4gMykpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0lOVkFMSURfRU5DUllQVElPTl9TVFJFTkdUSCk7XG5cdH1cblx0bGV0IHJhd0V4dHJhRmllbGQgPSBuZXcgVWludDhBcnJheSgpO1xuXHRjb25zdCB7IGV4dHJhRmllbGQgfSA9IG9wdGlvbnM7XG5cdGlmIChleHRyYUZpZWxkKSB7XG5cdFx0bGV0IGV4dHJhRmllbGRTaXplID0gMDtcblx0XHRsZXQgb2Zmc2V0ID0gMDtcblx0XHRleHRyYUZpZWxkLmZvckVhY2goZGF0YSA9PiBleHRyYUZpZWxkU2l6ZSArPSA0ICsgZ2V0TGVuZ3RoKGRhdGEpKTtcblx0XHRyYXdFeHRyYUZpZWxkID0gbmV3IFVpbnQ4QXJyYXkoZXh0cmFGaWVsZFNpemUpO1xuXHRcdGV4dHJhRmllbGQuZm9yRWFjaCgoZGF0YSwgdHlwZSkgPT4ge1xuXHRcdFx0aWYgKHR5cGUgPiBNQVhfMTZfQklUUykge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0lOVkFMSURfRVhUUkFGSUVMRF9UWVBFKTtcblx0XHRcdH1cblx0XHRcdGlmIChnZXRMZW5ndGgoZGF0YSkgPiBNQVhfMTZfQklUUykge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX0lOVkFMSURfRVhUUkFGSUVMRF9EQVRBKTtcblx0XHRcdH1cblx0XHRcdGFycmF5U2V0KHJhd0V4dHJhRmllbGQsIG5ldyBVaW50MTZBcnJheShbdHlwZV0pLCBvZmZzZXQpO1xuXHRcdFx0YXJyYXlTZXQocmF3RXh0cmFGaWVsZCwgbmV3IFVpbnQxNkFycmF5KFtnZXRMZW5ndGgoZGF0YSldKSwgb2Zmc2V0ICsgMik7XG5cdFx0XHRhcnJheVNldChyYXdFeHRyYUZpZWxkLCBkYXRhLCBvZmZzZXQgKyA0KTtcblx0XHRcdG9mZnNldCArPSA0ICsgZ2V0TGVuZ3RoKGRhdGEpO1xuXHRcdH0pO1xuXHR9XG5cdGxldCBtYXhpbXVtQ29tcHJlc3NlZFNpemUgPSAwO1xuXHRsZXQgbWF4aW11bUVudHJ5U2l6ZSA9IDA7XG5cdGxldCB1bmNvbXByZXNzZWRTaXplID0gMDtcblx0Y29uc3QgemlwNjRFbmFibGVkID0gemlwNjQgPT09IHRydWU7XG5cdGlmIChyZWFkZXIpIHtcblx0XHRyZWFkZXIgPSBpbml0UmVhZGVyKHJlYWRlcik7XG5cdFx0YXdhaXQgaW5pdFN0cmVhbShyZWFkZXIpO1xuXHRcdGlmIChyZWFkZXIuc2l6ZSA9PT0gVU5ERUZJTkVEX1ZBTFVFKSB7XG5cdFx0XHRkYXRhRGVzY3JpcHRvciA9IHRydWU7XG5cdFx0XHRpZiAoemlwNjQgfHwgemlwNjQgPT09IFVOREVGSU5FRF9WQUxVRSkge1xuXHRcdFx0XHR6aXA2NCA9IHRydWU7XG5cdFx0XHRcdHVuY29tcHJlc3NlZFNpemUgPSBtYXhpbXVtQ29tcHJlc3NlZFNpemUgPSBNQVhfMzJfQklUUztcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dW5jb21wcmVzc2VkU2l6ZSA9IHJlYWRlci5zaXplO1xuXHRcdFx0bWF4aW11bUNvbXByZXNzZWRTaXplID0gZ2V0TWF4aW11bUNvbXByZXNzZWRTaXplKHVuY29tcHJlc3NlZFNpemUpO1xuXHRcdH1cblx0fVxuXHRjb25zdCB7IGRpc2tPZmZzZXQsIGRpc2tOdW1iZXIsIG1heFNpemUgfSA9IHppcFdyaXRlci53cml0ZXI7XG5cdGNvbnN0IHppcDY0VW5jb21wcmVzc2VkU2l6ZSA9IHppcDY0RW5hYmxlZCB8fCB1bmNvbXByZXNzZWRTaXplID49IE1BWF8zMl9CSVRTO1xuXHRjb25zdCB6aXA2NENvbXByZXNzZWRTaXplID0gemlwNjRFbmFibGVkIHx8IG1heGltdW1Db21wcmVzc2VkU2l6ZSA+PSBNQVhfMzJfQklUUztcblx0Y29uc3QgemlwNjRPZmZzZXQgPSB6aXA2NEVuYWJsZWQgfHwgemlwV3JpdGVyLm9mZnNldCArIHppcFdyaXRlci5wZW5kaW5nRW50cmllc1NpemUgLSBkaXNrT2Zmc2V0ID49IE1BWF8zMl9CSVRTO1xuXHRjb25zdCBzdXBwb3J0WmlwNjRTcGxpdEZpbGUgPSBnZXRPcHRpb25WYWx1ZSh6aXBXcml0ZXIsIG9wdGlvbnMsIFwic3VwcG9ydFppcDY0U3BsaXRGaWxlXCIsIHRydWUpO1xuXHRjb25zdCB6aXA2NERpc2tOdW1iZXJTdGFydCA9IChzdXBwb3J0WmlwNjRTcGxpdEZpbGUgJiYgemlwNjRFbmFibGVkKSB8fCBkaXNrTnVtYmVyICsgTWF0aC5jZWlsKHppcFdyaXRlci5wZW5kaW5nRW50cmllc1NpemUgLyBtYXhTaXplKSA+PSBNQVhfMTZfQklUUztcblx0aWYgKHppcDY0T2Zmc2V0IHx8IHppcDY0VW5jb21wcmVzc2VkU2l6ZSB8fCB6aXA2NENvbXByZXNzZWRTaXplIHx8IHppcDY0RGlza051bWJlclN0YXJ0KSB7XG5cdFx0aWYgKHppcDY0ID09PSBmYWxzZSB8fCAha2VlcE9yZGVyKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX1VOU1VQUE9SVEVEX0ZPUk1BVCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHppcDY0ID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0emlwNjQgPSB6aXA2NCB8fCBmYWxzZTtcblx0b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtcblx0XHRyYXdGaWxlbmFtZSxcblx0XHRyYXdDb21tZW50LFxuXHRcdHZlcnNpb24sXG5cdFx0dmVyc2lvbk1hZGVCeSxcblx0XHRsYXN0TW9kRGF0ZSxcblx0XHRsYXN0QWNjZXNzRGF0ZSxcblx0XHRjcmVhdGlvbkRhdGUsXG5cdFx0cmF3RXh0cmFGaWVsZCxcblx0XHR6aXA2NCxcblx0XHR6aXA2NFVuY29tcHJlc3NlZFNpemUsXG5cdFx0emlwNjRDb21wcmVzc2VkU2l6ZSxcblx0XHR6aXA2NE9mZnNldCxcblx0XHR6aXA2NERpc2tOdW1iZXJTdGFydCxcblx0XHRwYXNzd29yZCxcblx0XHRsZXZlbCxcblx0XHR1c2VXZWJXb3JrZXJzLFxuXHRcdGVuY3J5cHRpb25TdHJlbmd0aCxcblx0XHRleHRlbmRlZFRpbWVzdGFtcCxcblx0XHR6aXBDcnlwdG8sXG5cdFx0YnVmZmVyZWRXcml0ZSxcblx0XHRrZWVwT3JkZXIsXG5cdFx0ZGF0YURlc2NyaXB0b3IsXG5cdFx0ZGF0YURlc2NyaXB0b3JTaWduYXR1cmUsXG5cdFx0c2lnbmFsLFxuXHRcdG1zRG9zQ29tcGF0aWJsZSxcblx0XHRpbnRlcm5hbEZpbGVBdHRyaWJ1dGUsXG5cdFx0ZXh0ZXJuYWxGaWxlQXR0cmlidXRlLFxuXHRcdHVzZUNvbXByZXNzaW9uU3RyZWFtXG5cdH0pO1xuXHRjb25zdCBoZWFkZXJJbmZvID0gZ2V0SGVhZGVySW5mbyhvcHRpb25zKTtcblx0Y29uc3QgZGF0YURlc2NyaXB0b3JJbmZvID0gZ2V0RGF0YURlc2NyaXB0b3JJbmZvKG9wdGlvbnMpO1xuXHRjb25zdCBtZXRhZGF0YVNpemUgPSBnZXRMZW5ndGgoaGVhZGVySW5mby5sb2NhbEhlYWRlckFycmF5LCBkYXRhRGVzY3JpcHRvckluZm8uZGF0YURlc2NyaXB0b3JBcnJheSk7XG5cdG1heGltdW1FbnRyeVNpemUgPSBtZXRhZGF0YVNpemUgKyBtYXhpbXVtQ29tcHJlc3NlZFNpemU7XG5cdGlmICh6aXBXcml0ZXIub3B0aW9ucy51c2R6KSB7XG5cdFx0bWF4aW11bUVudHJ5U2l6ZSArPSBtYXhpbXVtRW50cnlTaXplICsgNjQ7XG5cdH1cblx0emlwV3JpdGVyLnBlbmRpbmdFbnRyaWVzU2l6ZSArPSBtYXhpbXVtRW50cnlTaXplO1xuXHRsZXQgZmlsZUVudHJ5O1xuXHR0cnkge1xuXHRcdGZpbGVFbnRyeSA9IGF3YWl0IGdldEZpbGVFbnRyeSh6aXBXcml0ZXIsIG5hbWUsIHJlYWRlciwgeyBoZWFkZXJJbmZvLCBkYXRhRGVzY3JpcHRvckluZm8sIG1ldGFkYXRhU2l6ZSB9LCBvcHRpb25zKTtcblx0fSBmaW5hbGx5IHtcblx0XHR6aXBXcml0ZXIucGVuZGluZ0VudHJpZXNTaXplIC09IG1heGltdW1FbnRyeVNpemU7XG5cdH1cblx0T2JqZWN0LmFzc2lnbihmaWxlRW50cnksIHsgbmFtZSwgY29tbWVudCwgZXh0cmFGaWVsZCB9KTtcblx0cmV0dXJuIG5ldyBFbnRyeShmaWxlRW50cnkpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRGaWxlRW50cnkoemlwV3JpdGVyLCBuYW1lLCByZWFkZXIsIGVudHJ5SW5mbywgb3B0aW9ucykge1xuXHRjb25zdCB7XG5cdFx0ZmlsZXMsXG5cdFx0d3JpdGVyXG5cdH0gPSB6aXBXcml0ZXI7XG5cdGNvbnN0IHtcblx0XHRrZWVwT3JkZXIsXG5cdFx0ZGF0YURlc2NyaXB0b3IsXG5cdFx0c2lnbmFsXG5cdH0gPSBvcHRpb25zO1xuXHRjb25zdCB7XG5cdFx0aGVhZGVySW5mb1xuXHR9ID0gZW50cnlJbmZvO1xuXHRjb25zdCB7IHVzZHogfSA9IHppcFdyaXRlci5vcHRpb25zO1xuXHRjb25zdCBwcmV2aW91c0ZpbGVFbnRyeSA9IEFycmF5LmZyb20oZmlsZXMudmFsdWVzKCkpLnBvcCgpO1xuXHRsZXQgZmlsZUVudHJ5ID0ge307XG5cdGxldCBidWZmZXJlZFdyaXRlO1xuXHRsZXQgcmVsZWFzZUxvY2tXcml0ZXI7XG5cdGxldCByZWxlYXNlTG9ja0N1cnJlbnRGaWxlRW50cnk7XG5cdGxldCB3cml0aW5nQnVmZmVyZWRFbnRyeURhdGE7XG5cdGxldCB3cml0aW5nRW50cnlEYXRhO1xuXHRsZXQgZmlsZVdyaXRlcjtcblx0ZmlsZXMuc2V0KG5hbWUsIGZpbGVFbnRyeSk7XG5cdHRyeSB7XG5cdFx0bGV0IGxvY2tQcmV2aW91c0ZpbGVFbnRyeTtcblx0XHRpZiAoa2VlcE9yZGVyKSB7XG5cdFx0XHRsb2NrUHJldmlvdXNGaWxlRW50cnkgPSBwcmV2aW91c0ZpbGVFbnRyeSAmJiBwcmV2aW91c0ZpbGVFbnRyeS5sb2NrO1xuXHRcdFx0cmVxdWVzdExvY2tDdXJyZW50RmlsZUVudHJ5KCk7XG5cdFx0fVxuXHRcdGlmICgob3B0aW9ucy5idWZmZXJlZFdyaXRlIHx8IHppcFdyaXRlci53cml0ZXJMb2NrZWQgfHwgKHppcFdyaXRlci5idWZmZXJlZFdyaXRlcyAmJiBrZWVwT3JkZXIpIHx8ICFkYXRhRGVzY3JpcHRvcikgJiYgIXVzZHopIHtcblx0XHRcdGZpbGVXcml0ZXIgPSBuZXcgQmxvYldyaXRlcigpO1xuXHRcdFx0ZmlsZVdyaXRlci53cml0YWJsZS5zaXplID0gMDtcblx0XHRcdGJ1ZmZlcmVkV3JpdGUgPSB0cnVlO1xuXHRcdFx0emlwV3JpdGVyLmJ1ZmZlcmVkV3JpdGVzKys7XG5cdFx0XHRhd2FpdCBpbml0U3RyZWFtKHdyaXRlcik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZpbGVXcml0ZXIgPSB3cml0ZXI7XG5cdFx0XHRhd2FpdCByZXF1ZXN0TG9ja1dyaXRlcigpO1xuXHRcdH1cblx0XHRhd2FpdCBpbml0U3RyZWFtKGZpbGVXcml0ZXIpO1xuXHRcdGNvbnN0IHsgd3JpdGFibGUgfSA9IHdyaXRlcjtcblx0XHRsZXQgeyBkaXNrT2Zmc2V0IH0gPSB3cml0ZXI7XG5cdFx0aWYgKHppcFdyaXRlci5hZGRTcGxpdFppcFNpZ25hdHVyZSkge1xuXHRcdFx0ZGVsZXRlIHppcFdyaXRlci5hZGRTcGxpdFppcFNpZ25hdHVyZTtcblx0XHRcdGNvbnN0IHNpZ25hdHVyZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG5cdFx0XHRjb25zdCBzaWduYXR1cmVBcnJheVZpZXcgPSBnZXREYXRhVmlldyhzaWduYXR1cmVBcnJheSk7XG5cdFx0XHRzZXRVaW50MzIoc2lnbmF0dXJlQXJyYXlWaWV3LCAwLCBTUExJVF9aSVBfRklMRV9TSUdOQVRVUkUpO1xuXHRcdFx0YXdhaXQgd3JpdGVEYXRhKHdyaXRhYmxlLCBzaWduYXR1cmVBcnJheSk7XG5cdFx0XHR6aXBXcml0ZXIub2Zmc2V0ICs9IDQ7XG5cdFx0fVxuXHRcdGlmICh1c2R6KSB7XG5cdFx0XHRhcHBlbmRFeHRyYUZpZWxkVVNEWihlbnRyeUluZm8sIHppcFdyaXRlci5vZmZzZXQgLSBkaXNrT2Zmc2V0KTtcblx0XHR9XG5cdFx0aWYgKCFidWZmZXJlZFdyaXRlKSB7XG5cdFx0XHRhd2FpdCBsb2NrUHJldmlvdXNGaWxlRW50cnk7XG5cdFx0XHRhd2FpdCBza2lwRGlza0lmTmVlZGVkKHdyaXRhYmxlKTtcblx0XHR9XG5cdFx0Y29uc3QgeyBkaXNrTnVtYmVyIH0gPSB3cml0ZXI7XG5cdFx0d3JpdGluZ0VudHJ5RGF0YSA9IHRydWU7XG5cdFx0ZmlsZUVudHJ5LmRpc2tOdW1iZXJTdGFydCA9IGRpc2tOdW1iZXI7XG5cdFx0ZmlsZUVudHJ5ID0gYXdhaXQgY3JlYXRlRmlsZUVudHJ5KHJlYWRlciwgZmlsZVdyaXRlciwgZmlsZUVudHJ5LCBlbnRyeUluZm8sIHppcFdyaXRlci5jb25maWcsIG9wdGlvbnMpO1xuXHRcdHdyaXRpbmdFbnRyeURhdGEgPSBmYWxzZTtcblx0XHRmaWxlcy5zZXQobmFtZSwgZmlsZUVudHJ5KTtcblx0XHRmaWxlRW50cnkuZmlsZW5hbWUgPSBuYW1lO1xuXHRcdGlmIChidWZmZXJlZFdyaXRlKSB7XG5cdFx0XHRhd2FpdCBmaWxlV3JpdGVyLndyaXRhYmxlLmdldFdyaXRlcigpLmNsb3NlKCk7XG5cdFx0XHRsZXQgYmxvYiA9IGF3YWl0IGZpbGVXcml0ZXIuZ2V0RGF0YSgpO1xuXHRcdFx0YXdhaXQgbG9ja1ByZXZpb3VzRmlsZUVudHJ5O1xuXHRcdFx0YXdhaXQgcmVxdWVzdExvY2tXcml0ZXIoKTtcblx0XHRcdHdyaXRpbmdCdWZmZXJlZEVudHJ5RGF0YSA9IHRydWU7XG5cdFx0XHRpZiAoIWRhdGFEZXNjcmlwdG9yKSB7XG5cdFx0XHRcdGJsb2IgPSBhd2FpdCB3cml0ZUV4dHJhSGVhZGVySW5mbyhmaWxlRW50cnksIGJsb2IsIHdyaXRhYmxlLCBvcHRpb25zKTtcblx0XHRcdH1cblx0XHRcdGF3YWl0IHNraXBEaXNrSWZOZWVkZWQod3JpdGFibGUpO1xuXHRcdFx0ZmlsZUVudHJ5LmRpc2tOdW1iZXJTdGFydCA9IHdyaXRlci5kaXNrTnVtYmVyO1xuXHRcdFx0ZGlza09mZnNldCA9IHdyaXRlci5kaXNrT2Zmc2V0O1xuXHRcdFx0YXdhaXQgYmxvYi5zdHJlYW0oKS5waXBlVG8od3JpdGFibGUsIHsgcHJldmVudENsb3NlOiB0cnVlLCBwcmV2ZW50QWJvcnQ6IHRydWUsIHNpZ25hbCB9KTtcblx0XHRcdHdyaXRhYmxlLnNpemUgKz0gYmxvYi5zaXplO1xuXHRcdFx0d3JpdGluZ0J1ZmZlcmVkRW50cnlEYXRhID0gZmFsc2U7XG5cdFx0fVxuXHRcdGZpbGVFbnRyeS5vZmZzZXQgPSB6aXBXcml0ZXIub2Zmc2V0IC0gZGlza09mZnNldDtcblx0XHRpZiAoZmlsZUVudHJ5LnppcDY0KSB7XG5cdFx0XHRzZXRaaXA2NEV4dHJhSW5mbyhmaWxlRW50cnksIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSBpZiAoZmlsZUVudHJ5Lm9mZnNldCA+PSBNQVhfMzJfQklUUykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUl9VTlNVUFBPUlRFRF9GT1JNQVQpO1xuXHRcdH1cblx0XHR6aXBXcml0ZXIub2Zmc2V0ICs9IGZpbGVFbnRyeS5sZW5ndGg7XG5cdFx0cmV0dXJuIGZpbGVFbnRyeTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAoKGJ1ZmZlcmVkV3JpdGUgJiYgd3JpdGluZ0J1ZmZlcmVkRW50cnlEYXRhKSB8fCAoIWJ1ZmZlcmVkV3JpdGUgJiYgd3JpdGluZ0VudHJ5RGF0YSkpIHtcblx0XHRcdHppcFdyaXRlci5oYXNDb3JydXB0ZWRFbnRyaWVzID0gdHJ1ZTtcblx0XHRcdGlmIChlcnJvcikge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGVycm9yLmNvcnJ1cHRlZEVudHJ5ID0gdHJ1ZTtcblx0XHRcdFx0fSBjYXRjaCAoX2Vycm9yKSB7XG5cdFx0XHRcdFx0Ly8gaWdub3JlZFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoYnVmZmVyZWRXcml0ZSkge1xuXHRcdFx0XHR6aXBXcml0ZXIub2Zmc2V0ICs9IGZpbGVXcml0ZXIud3JpdGFibGUuc2l6ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHppcFdyaXRlci5vZmZzZXQgPSBmaWxlV3JpdGVyLndyaXRhYmxlLnNpemU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGZpbGVzLmRlbGV0ZShuYW1lKTtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSBmaW5hbGx5IHtcblx0XHRpZiAoYnVmZmVyZWRXcml0ZSkge1xuXHRcdFx0emlwV3JpdGVyLmJ1ZmZlcmVkV3JpdGVzLS07XG5cdFx0fVxuXHRcdGlmIChyZWxlYXNlTG9ja0N1cnJlbnRGaWxlRW50cnkpIHtcblx0XHRcdHJlbGVhc2VMb2NrQ3VycmVudEZpbGVFbnRyeSgpO1xuXHRcdH1cblx0XHRpZiAocmVsZWFzZUxvY2tXcml0ZXIpIHtcblx0XHRcdHJlbGVhc2VMb2NrV3JpdGVyKCk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gcmVxdWVzdExvY2tDdXJyZW50RmlsZUVudHJ5KCkge1xuXHRcdGZpbGVFbnRyeS5sb2NrID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiByZWxlYXNlTG9ja0N1cnJlbnRGaWxlRW50cnkgPSByZXNvbHZlKTtcblx0fVxuXG5cdGFzeW5jIGZ1bmN0aW9uIHJlcXVlc3RMb2NrV3JpdGVyKCkge1xuXHRcdHppcFdyaXRlci53cml0ZXJMb2NrZWQgPSB0cnVlO1xuXHRcdGNvbnN0IHsgbG9ja1dyaXRlciB9ID0gemlwV3JpdGVyO1xuXHRcdHppcFdyaXRlci5sb2NrV3JpdGVyID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiByZWxlYXNlTG9ja1dyaXRlciA9ICgpID0+IHtcblx0XHRcdHppcFdyaXRlci53cml0ZXJMb2NrZWQgPSBmYWxzZTtcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9KTtcblx0XHRhd2FpdCBsb2NrV3JpdGVyO1xuXHR9XG5cblx0YXN5bmMgZnVuY3Rpb24gc2tpcERpc2tJZk5lZWRlZCh3cml0YWJsZSkge1xuXHRcdGlmIChoZWFkZXJJbmZvLmxvY2FsSGVhZGVyQXJyYXkubGVuZ3RoID4gd3JpdGVyLmF2YWlsYWJsZVNpemUpIHtcblx0XHRcdHdyaXRlci5hdmFpbGFibGVTaXplID0gMDtcblx0XHRcdGF3YWl0IHdyaXRlRGF0YSh3cml0YWJsZSwgbmV3IFVpbnQ4QXJyYXkoKSk7XG5cdFx0fVxuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUZpbGVFbnRyeShyZWFkZXIsIHdyaXRlciwgeyBkaXNrTnVtYmVyU3RhcnQsIGxvY2sgfSwgZW50cnlJbmZvLCBjb25maWcsIG9wdGlvbnMpIHtcblx0Y29uc3Qge1xuXHRcdGhlYWRlckluZm8sXG5cdFx0ZGF0YURlc2NyaXB0b3JJbmZvLFxuXHRcdG1ldGFkYXRhU2l6ZVxuXHR9ID0gZW50cnlJbmZvO1xuXHRjb25zdCB7XG5cdFx0bG9jYWxIZWFkZXJBcnJheSxcblx0XHRoZWFkZXJBcnJheSxcblx0XHRsYXN0TW9kRGF0ZSxcblx0XHRyYXdMYXN0TW9kRGF0ZSxcblx0XHRlbmNyeXB0ZWQsXG5cdFx0Y29tcHJlc3NlZCxcblx0XHR2ZXJzaW9uLFxuXHRcdGNvbXByZXNzaW9uTWV0aG9kLFxuXHRcdHJhd0V4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcCxcblx0XHRleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXBGbGFnLFxuXHRcdHJhd0V4dHJhRmllbGROVEZTLFxuXHRcdHJhd0V4dHJhRmllbGRBRVNcblx0fSA9IGhlYWRlckluZm87XG5cdGNvbnN0IHsgZGF0YURlc2NyaXB0b3JBcnJheSB9ID0gZGF0YURlc2NyaXB0b3JJbmZvO1xuXHRjb25zdCB7XG5cdFx0cmF3RmlsZW5hbWUsXG5cdFx0bGFzdEFjY2Vzc0RhdGUsXG5cdFx0Y3JlYXRpb25EYXRlLFxuXHRcdHBhc3N3b3JkLFxuXHRcdGxldmVsLFxuXHRcdHppcDY0LFxuXHRcdHppcDY0VW5jb21wcmVzc2VkU2l6ZSxcblx0XHR6aXA2NENvbXByZXNzZWRTaXplLFxuXHRcdHppcDY0T2Zmc2V0LFxuXHRcdHppcDY0RGlza051bWJlclN0YXJ0LFxuXHRcdHppcENyeXB0byxcblx0XHRkYXRhRGVzY3JpcHRvcixcblx0XHRkaXJlY3RvcnksXG5cdFx0dmVyc2lvbk1hZGVCeSxcblx0XHRyYXdDb21tZW50LFxuXHRcdHJhd0V4dHJhRmllbGQsXG5cdFx0dXNlV2ViV29ya2Vycyxcblx0XHRvbnN0YXJ0LFxuXHRcdG9ucHJvZ3Jlc3MsXG5cdFx0b25lbmQsXG5cdFx0c2lnbmFsLFxuXHRcdGVuY3J5cHRpb25TdHJlbmd0aCxcblx0XHRleHRlbmRlZFRpbWVzdGFtcCxcblx0XHRtc0Rvc0NvbXBhdGlibGUsXG5cdFx0aW50ZXJuYWxGaWxlQXR0cmlidXRlLFxuXHRcdGV4dGVybmFsRmlsZUF0dHJpYnV0ZSxcblx0XHR1c2VDb21wcmVzc2lvblN0cmVhbVxuXHR9ID0gb3B0aW9ucztcblx0Y29uc3QgZmlsZUVudHJ5ID0ge1xuXHRcdGxvY2ssXG5cdFx0dmVyc2lvbk1hZGVCeSxcblx0XHR6aXA2NCxcblx0XHRkaXJlY3Rvcnk6IEJvb2xlYW4oZGlyZWN0b3J5KSxcblx0XHRmaWxlbmFtZVVURjg6IHRydWUsXG5cdFx0cmF3RmlsZW5hbWUsXG5cdFx0Y29tbWVudFVURjg6IHRydWUsXG5cdFx0cmF3Q29tbWVudCxcblx0XHRyYXdFeHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXAsXG5cdFx0cmF3RXh0cmFGaWVsZE5URlMsXG5cdFx0cmF3RXh0cmFGaWVsZEFFUyxcblx0XHRyYXdFeHRyYUZpZWxkLFxuXHRcdGV4dGVuZGVkVGltZXN0YW1wLFxuXHRcdG1zRG9zQ29tcGF0aWJsZSxcblx0XHRpbnRlcm5hbEZpbGVBdHRyaWJ1dGUsXG5cdFx0ZXh0ZXJuYWxGaWxlQXR0cmlidXRlLFxuXHRcdGRpc2tOdW1iZXJTdGFydFxuXHR9O1xuXHRsZXQgY29tcHJlc3NlZFNpemUgPSAwO1xuXHRsZXQgdW5jb21wcmVzc2VkU2l6ZSA9IDA7XG5cdGxldCBzaWduYXR1cmU7XG5cdGNvbnN0IHsgd3JpdGFibGUgfSA9IHdyaXRlcjtcblx0aWYgKHJlYWRlcikge1xuXHRcdHJlYWRlci5jaHVua1NpemUgPSBnZXRDaHVua1NpemUoY29uZmlnKTtcblx0XHRhd2FpdCB3cml0ZURhdGEod3JpdGFibGUsIGxvY2FsSGVhZGVyQXJyYXkpO1xuXHRcdGNvbnN0IHJlYWRhYmxlID0gcmVhZGVyLnJlYWRhYmxlO1xuXHRcdGNvbnN0IHNpemUgPSByZWFkYWJsZS5zaXplID0gcmVhZGVyLnNpemU7XG5cdFx0Y29uc3Qgd29ya2VyT3B0aW9ucyA9IHtcblx0XHRcdG9wdGlvbnM6IHtcblx0XHRcdFx0Y29kZWNUeXBlOiBDT0RFQ19ERUZMQVRFLFxuXHRcdFx0XHRsZXZlbCxcblx0XHRcdFx0cGFzc3dvcmQsXG5cdFx0XHRcdGVuY3J5cHRpb25TdHJlbmd0aCxcblx0XHRcdFx0emlwQ3J5cHRvOiBlbmNyeXB0ZWQgJiYgemlwQ3J5cHRvLFxuXHRcdFx0XHRwYXNzd29yZFZlcmlmaWNhdGlvbjogZW5jcnlwdGVkICYmIHppcENyeXB0byAmJiAocmF3TGFzdE1vZERhdGUgPj4gOCkgJiAweEZGLFxuXHRcdFx0XHRzaWduZWQ6IHRydWUsXG5cdFx0XHRcdGNvbXByZXNzZWQsXG5cdFx0XHRcdGVuY3J5cHRlZCxcblx0XHRcdFx0dXNlV2ViV29ya2Vycyxcblx0XHRcdFx0dXNlQ29tcHJlc3Npb25TdHJlYW0sXG5cdFx0XHRcdHRyYW5zZmVyU3RyZWFtczogZmFsc2Vcblx0XHRcdH0sXG5cdFx0XHRjb25maWcsXG5cdFx0XHRzdHJlYW1PcHRpb25zOiB7IHNpZ25hbCwgc2l6ZSwgb25zdGFydCwgb25wcm9ncmVzcywgb25lbmQgfVxuXHRcdH07XG5cdFx0Y29uc3QgcmVzdWx0ID0gYXdhaXQgcnVuV29ya2VyKHsgcmVhZGFibGUsIHdyaXRhYmxlIH0sIHdvcmtlck9wdGlvbnMpO1xuXHRcdHdyaXRhYmxlLnNpemUgKz0gcmVzdWx0LnNpemU7XG5cdFx0c2lnbmF0dXJlID0gcmVzdWx0LnNpZ25hdHVyZTtcblx0XHR1bmNvbXByZXNzZWRTaXplID0gcmVhZGVyLnNpemUgPSByZWFkYWJsZS5zaXplO1xuXHRcdGNvbXByZXNzZWRTaXplID0gcmVzdWx0LnNpemU7XG5cdH0gZWxzZSB7XG5cdFx0YXdhaXQgd3JpdGVEYXRhKHdyaXRhYmxlLCBsb2NhbEhlYWRlckFycmF5KTtcblx0fVxuXHRsZXQgcmF3RXh0cmFGaWVsZFppcDY0O1xuXHRpZiAoemlwNjQpIHtcblx0XHRsZXQgcmF3RXh0cmFGaWVsZFppcDY0TGVuZ3RoID0gNDtcblx0XHRpZiAoemlwNjRVbmNvbXByZXNzZWRTaXplKSB7XG5cdFx0XHRyYXdFeHRyYUZpZWxkWmlwNjRMZW5ndGggKz0gODtcblx0XHR9XG5cdFx0aWYgKHppcDY0Q29tcHJlc3NlZFNpemUpIHtcblx0XHRcdHJhd0V4dHJhRmllbGRaaXA2NExlbmd0aCArPSA4O1xuXHRcdH1cblx0XHRpZiAoemlwNjRPZmZzZXQpIHtcblx0XHRcdHJhd0V4dHJhRmllbGRaaXA2NExlbmd0aCArPSA4O1xuXHRcdH1cblx0XHRpZiAoemlwNjREaXNrTnVtYmVyU3RhcnQpIHtcblx0XHRcdHJhd0V4dHJhRmllbGRaaXA2NExlbmd0aCArPSA0O1xuXHRcdH1cblx0XHRyYXdFeHRyYUZpZWxkWmlwNjQgPSBuZXcgVWludDhBcnJheShyYXdFeHRyYUZpZWxkWmlwNjRMZW5ndGgpO1xuXHR9IGVsc2Uge1xuXHRcdHJhd0V4dHJhRmllbGRaaXA2NCA9IG5ldyBVaW50OEFycmF5KCk7XG5cdH1cblx0c2V0RW50cnlJbmZvKHtcblx0XHRzaWduYXR1cmUsXG5cdFx0cmF3RXh0cmFGaWVsZFppcDY0LFxuXHRcdGNvbXByZXNzZWRTaXplLFxuXHRcdHVuY29tcHJlc3NlZFNpemUsXG5cdFx0aGVhZGVySW5mbyxcblx0XHRkYXRhRGVzY3JpcHRvckluZm9cblx0fSwgb3B0aW9ucyk7XG5cdGlmIChkYXRhRGVzY3JpcHRvcikge1xuXHRcdGF3YWl0IHdyaXRlRGF0YSh3cml0YWJsZSwgZGF0YURlc2NyaXB0b3JBcnJheSk7XG5cdH1cblx0T2JqZWN0LmFzc2lnbihmaWxlRW50cnksIHtcblx0XHR1bmNvbXByZXNzZWRTaXplLFxuXHRcdGNvbXByZXNzZWRTaXplLFxuXHRcdGxhc3RNb2REYXRlLFxuXHRcdHJhd0xhc3RNb2REYXRlLFxuXHRcdGNyZWF0aW9uRGF0ZSxcblx0XHRsYXN0QWNjZXNzRGF0ZSxcblx0XHRlbmNyeXB0ZWQsXG5cdFx0bGVuZ3RoOiBtZXRhZGF0YVNpemUgKyBjb21wcmVzc2VkU2l6ZSxcblx0XHRjb21wcmVzc2lvbk1ldGhvZCxcblx0XHR2ZXJzaW9uLFxuXHRcdGhlYWRlckFycmF5LFxuXHRcdHNpZ25hdHVyZSxcblx0XHRyYXdFeHRyYUZpZWxkWmlwNjQsXG5cdFx0ZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wRmxhZyxcblx0XHR6aXA2NFVuY29tcHJlc3NlZFNpemUsXG5cdFx0emlwNjRDb21wcmVzc2VkU2l6ZSxcblx0XHR6aXA2NE9mZnNldCxcblx0XHR6aXA2NERpc2tOdW1iZXJTdGFydFxuXHR9KTtcblx0cmV0dXJuIGZpbGVFbnRyeTtcbn1cblxuZnVuY3Rpb24gZ2V0SGVhZGVySW5mbyhvcHRpb25zKSB7XG5cdGNvbnN0IHtcblx0XHRyYXdGaWxlbmFtZSxcblx0XHRsYXN0TW9kRGF0ZSxcblx0XHRsYXN0QWNjZXNzRGF0ZSxcblx0XHRjcmVhdGlvbkRhdGUsXG5cdFx0cGFzc3dvcmQsXG5cdFx0bGV2ZWwsXG5cdFx0emlwNjQsXG5cdFx0emlwQ3J5cHRvLFxuXHRcdGRhdGFEZXNjcmlwdG9yLFxuXHRcdGRpcmVjdG9yeSxcblx0XHRyYXdFeHRyYUZpZWxkLFxuXHRcdGVuY3J5cHRpb25TdHJlbmd0aCxcblx0XHRleHRlbmRlZFRpbWVzdGFtcFxuXHR9ID0gb3B0aW9ucztcblx0Y29uc3QgY29tcHJlc3NlZCA9IGxldmVsICE9PSAwICYmICFkaXJlY3Rvcnk7XG5cdGNvbnN0IGVuY3J5cHRlZCA9IEJvb2xlYW4ocGFzc3dvcmQgJiYgZ2V0TGVuZ3RoKHBhc3N3b3JkKSk7XG5cdGxldCB2ZXJzaW9uID0gb3B0aW9ucy52ZXJzaW9uO1xuXHRsZXQgcmF3RXh0cmFGaWVsZEFFUztcblx0aWYgKGVuY3J5cHRlZCAmJiAhemlwQ3J5cHRvKSB7XG5cdFx0cmF3RXh0cmFGaWVsZEFFUyA9IG5ldyBVaW50OEFycmF5KGdldExlbmd0aChFWFRSQUZJRUxEX0RBVEFfQUVTKSArIDIpO1xuXHRcdGNvbnN0IGV4dHJhRmllbGRBRVNWaWV3ID0gZ2V0RGF0YVZpZXcocmF3RXh0cmFGaWVsZEFFUyk7XG5cdFx0c2V0VWludDE2KGV4dHJhRmllbGRBRVNWaWV3LCAwLCBFWFRSQUZJRUxEX1RZUEVfQUVTKTtcblx0XHRhcnJheVNldChyYXdFeHRyYUZpZWxkQUVTLCBFWFRSQUZJRUxEX0RBVEFfQUVTLCAyKTtcblx0XHRzZXRVaW50OChleHRyYUZpZWxkQUVTVmlldywgOCwgZW5jcnlwdGlvblN0cmVuZ3RoKTtcblx0fSBlbHNlIHtcblx0XHRyYXdFeHRyYUZpZWxkQUVTID0gbmV3IFVpbnQ4QXJyYXkoKTtcblx0fVxuXHRsZXQgcmF3RXh0cmFGaWVsZE5URlM7XG5cdGxldCByYXdFeHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXA7XG5cdGxldCBleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXBGbGFnO1xuXHRpZiAoZXh0ZW5kZWRUaW1lc3RhbXApIHtcblx0XHRyYXdFeHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXAgPSBuZXcgVWludDhBcnJheSg5ICsgKGxhc3RBY2Nlc3NEYXRlID8gNCA6IDApICsgKGNyZWF0aW9uRGF0ZSA/IDQgOiAwKSk7XG5cdFx0Y29uc3QgZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wVmlldyA9IGdldERhdGFWaWV3KHJhd0V4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcCk7XG5cdFx0c2V0VWludDE2KGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcFZpZXcsIDAsIEVYVFJBRklFTERfVFlQRV9FWFRFTkRFRF9USU1FU1RBTVApO1xuXHRcdHNldFVpbnQxNihleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXBWaWV3LCAyLCBnZXRMZW5ndGgocmF3RXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wKSAtIDQpO1xuXHRcdGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcEZsYWcgPSAweDEgKyAobGFzdEFjY2Vzc0RhdGUgPyAweDIgOiAwKSArIChjcmVhdGlvbkRhdGUgPyAweDQgOiAwKTtcblx0XHRzZXRVaW50OChleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXBWaWV3LCA0LCBleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXBGbGFnKTtcblx0XHRsZXQgb2Zmc2V0ID0gNTtcblx0XHRzZXRVaW50MzIoZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wVmlldywgb2Zmc2V0LCBNYXRoLmZsb29yKGxhc3RNb2REYXRlLmdldFRpbWUoKSAvIDEwMDApKTtcblx0XHRvZmZzZXQgKz0gNDtcblx0XHRpZiAobGFzdEFjY2Vzc0RhdGUpIHtcblx0XHRcdHNldFVpbnQzMihleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXBWaWV3LCBvZmZzZXQsIE1hdGguZmxvb3IobGFzdEFjY2Vzc0RhdGUuZ2V0VGltZSgpIC8gMTAwMCkpO1xuXHRcdFx0b2Zmc2V0ICs9IDQ7XG5cdFx0fVxuXHRcdGlmIChjcmVhdGlvbkRhdGUpIHtcblx0XHRcdHNldFVpbnQzMihleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXBWaWV3LCBvZmZzZXQsIE1hdGguZmxvb3IoY3JlYXRpb25EYXRlLmdldFRpbWUoKSAvIDEwMDApKTtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdHJhd0V4dHJhRmllbGROVEZTID0gbmV3IFVpbnQ4QXJyYXkoMzYpO1xuXHRcdFx0Y29uc3QgZXh0cmFGaWVsZE5URlNWaWV3ID0gZ2V0RGF0YVZpZXcocmF3RXh0cmFGaWVsZE5URlMpO1xuXHRcdFx0Y29uc3QgbGFzdE1vZFRpbWVOVEZTID0gZ2V0VGltZU5URlMobGFzdE1vZERhdGUpO1xuXHRcdFx0c2V0VWludDE2KGV4dHJhRmllbGROVEZTVmlldywgMCwgRVhUUkFGSUVMRF9UWVBFX05URlMpO1xuXHRcdFx0c2V0VWludDE2KGV4dHJhRmllbGROVEZTVmlldywgMiwgMzIpO1xuXHRcdFx0c2V0VWludDE2KGV4dHJhRmllbGROVEZTVmlldywgOCwgRVhUUkFGSUVMRF9UWVBFX05URlNfVEFHMSk7XG5cdFx0XHRzZXRVaW50MTYoZXh0cmFGaWVsZE5URlNWaWV3LCAxMCwgMjQpO1xuXHRcdFx0c2V0QmlnVWludDY0KGV4dHJhRmllbGROVEZTVmlldywgMTIsIGxhc3RNb2RUaW1lTlRGUyk7XG5cdFx0XHRzZXRCaWdVaW50NjQoZXh0cmFGaWVsZE5URlNWaWV3LCAyMCwgZ2V0VGltZU5URlMobGFzdEFjY2Vzc0RhdGUpIHx8IGxhc3RNb2RUaW1lTlRGUyk7XG5cdFx0XHRzZXRCaWdVaW50NjQoZXh0cmFGaWVsZE5URlNWaWV3LCAyOCwgZ2V0VGltZU5URlMoY3JlYXRpb25EYXRlKSB8fCBsYXN0TW9kVGltZU5URlMpO1xuXHRcdH0gY2F0Y2ggKF9lcnJvcikge1xuXHRcdFx0cmF3RXh0cmFGaWVsZE5URlMgPSBuZXcgVWludDhBcnJheSgpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyYXdFeHRyYUZpZWxkTlRGUyA9IHJhd0V4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcCA9IG5ldyBVaW50OEFycmF5KCk7XG5cdH1cblx0bGV0IGJpdEZsYWcgPSBCSVRGTEFHX0xBTkdfRU5DT0RJTkdfRkxBRztcblx0aWYgKGRhdGFEZXNjcmlwdG9yKSB7XG5cdFx0Yml0RmxhZyA9IGJpdEZsYWcgfCBCSVRGTEFHX0RBVEFfREVTQ1JJUFRPUjtcblx0fVxuXHRsZXQgY29tcHJlc3Npb25NZXRob2QgPSBDT01QUkVTU0lPTl9NRVRIT0RfU1RPUkU7XG5cdGlmIChjb21wcmVzc2VkKSB7XG5cdFx0Y29tcHJlc3Npb25NZXRob2QgPSBDT01QUkVTU0lPTl9NRVRIT0RfREVGTEFURTtcblx0fVxuXHRpZiAoemlwNjQpIHtcblx0XHR2ZXJzaW9uID0gdmVyc2lvbiA+IFZFUlNJT05fWklQNjQgPyB2ZXJzaW9uIDogVkVSU0lPTl9aSVA2NDtcblx0fVxuXHRpZiAoZW5jcnlwdGVkKSB7XG5cdFx0Yml0RmxhZyA9IGJpdEZsYWcgfCBCSVRGTEFHX0VOQ1JZUFRFRDtcblx0XHRpZiAoIXppcENyeXB0bykge1xuXHRcdFx0dmVyc2lvbiA9IHZlcnNpb24gPiBWRVJTSU9OX0FFUyA/IHZlcnNpb24gOiBWRVJTSU9OX0FFUztcblx0XHRcdGNvbXByZXNzaW9uTWV0aG9kID0gQ09NUFJFU1NJT05fTUVUSE9EX0FFUztcblx0XHRcdGlmIChjb21wcmVzc2VkKSB7XG5cdFx0XHRcdHJhd0V4dHJhRmllbGRBRVNbOV0gPSBDT01QUkVTU0lPTl9NRVRIT0RfREVGTEFURTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Y29uc3QgaGVhZGVyQXJyYXkgPSBuZXcgVWludDhBcnJheSgyNik7XG5cdGNvbnN0IGhlYWRlclZpZXcgPSBnZXREYXRhVmlldyhoZWFkZXJBcnJheSk7XG5cdHNldFVpbnQxNihoZWFkZXJWaWV3LCAwLCB2ZXJzaW9uKTtcblx0c2V0VWludDE2KGhlYWRlclZpZXcsIDIsIGJpdEZsYWcpO1xuXHRzZXRVaW50MTYoaGVhZGVyVmlldywgNCwgY29tcHJlc3Npb25NZXRob2QpO1xuXHRjb25zdCBkYXRlQXJyYXkgPSBuZXcgVWludDMyQXJyYXkoMSk7XG5cdGNvbnN0IGRhdGVWaWV3ID0gZ2V0RGF0YVZpZXcoZGF0ZUFycmF5KTtcblx0bGV0IGxhc3RNb2REYXRlTXNEb3M7XG5cdGlmIChsYXN0TW9kRGF0ZSA8IE1JTl9EQVRFKSB7XG5cdFx0bGFzdE1vZERhdGVNc0RvcyA9IE1JTl9EQVRFO1xuXHR9IGVsc2UgaWYgKGxhc3RNb2REYXRlID4gTUFYX0RBVEUpIHtcblx0XHRsYXN0TW9kRGF0ZU1zRG9zID0gTUFYX0RBVEU7XG5cdH0gZWxzZSB7XG5cdFx0bGFzdE1vZERhdGVNc0RvcyA9IGxhc3RNb2REYXRlO1xuXHR9XG5cdHNldFVpbnQxNihkYXRlVmlldywgMCwgKCgobGFzdE1vZERhdGVNc0Rvcy5nZXRIb3VycygpIDw8IDYpIHwgbGFzdE1vZERhdGVNc0Rvcy5nZXRNaW51dGVzKCkpIDw8IDUpIHwgbGFzdE1vZERhdGVNc0Rvcy5nZXRTZWNvbmRzKCkgLyAyKTtcblx0c2V0VWludDE2KGRhdGVWaWV3LCAyLCAoKCgobGFzdE1vZERhdGVNc0Rvcy5nZXRGdWxsWWVhcigpIC0gMTk4MCkgPDwgNCkgfCAobGFzdE1vZERhdGVNc0Rvcy5nZXRNb250aCgpICsgMSkpIDw8IDUpIHwgbGFzdE1vZERhdGVNc0Rvcy5nZXREYXRlKCkpO1xuXHRjb25zdCByYXdMYXN0TW9kRGF0ZSA9IGRhdGVBcnJheVswXTtcblx0c2V0VWludDMyKGhlYWRlclZpZXcsIDYsIHJhd0xhc3RNb2REYXRlKTtcblx0c2V0VWludDE2KGhlYWRlclZpZXcsIDIyLCBnZXRMZW5ndGgocmF3RmlsZW5hbWUpKTtcblx0Y29uc3QgZXh0cmFGaWVsZExlbmd0aCA9IGdldExlbmd0aChyYXdFeHRyYUZpZWxkQUVTLCByYXdFeHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXAsIHJhd0V4dHJhRmllbGROVEZTLCByYXdFeHRyYUZpZWxkKTtcblx0c2V0VWludDE2KGhlYWRlclZpZXcsIDI0LCBleHRyYUZpZWxkTGVuZ3RoKTtcblx0Y29uc3QgbG9jYWxIZWFkZXJBcnJheSA9IG5ldyBVaW50OEFycmF5KDMwICsgZ2V0TGVuZ3RoKHJhd0ZpbGVuYW1lKSArIGV4dHJhRmllbGRMZW5ndGgpO1xuXHRjb25zdCBsb2NhbEhlYWRlclZpZXcgPSBnZXREYXRhVmlldyhsb2NhbEhlYWRlckFycmF5KTtcblx0c2V0VWludDMyKGxvY2FsSGVhZGVyVmlldywgMCwgTE9DQUxfRklMRV9IRUFERVJfU0lHTkFUVVJFKTtcblx0YXJyYXlTZXQobG9jYWxIZWFkZXJBcnJheSwgaGVhZGVyQXJyYXksIDQpO1xuXHRhcnJheVNldChsb2NhbEhlYWRlckFycmF5LCByYXdGaWxlbmFtZSwgMzApO1xuXHRhcnJheVNldChsb2NhbEhlYWRlckFycmF5LCByYXdFeHRyYUZpZWxkQUVTLCAzMCArIGdldExlbmd0aChyYXdGaWxlbmFtZSkpO1xuXHRhcnJheVNldChsb2NhbEhlYWRlckFycmF5LCByYXdFeHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXAsIDMwICsgZ2V0TGVuZ3RoKHJhd0ZpbGVuYW1lLCByYXdFeHRyYUZpZWxkQUVTKSk7XG5cdGFycmF5U2V0KGxvY2FsSGVhZGVyQXJyYXksIHJhd0V4dHJhRmllbGROVEZTLCAzMCArIGdldExlbmd0aChyYXdGaWxlbmFtZSwgcmF3RXh0cmFGaWVsZEFFUywgcmF3RXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wKSk7XG5cdGFycmF5U2V0KGxvY2FsSGVhZGVyQXJyYXksIHJhd0V4dHJhRmllbGQsIDMwICsgZ2V0TGVuZ3RoKHJhd0ZpbGVuYW1lLCByYXdFeHRyYUZpZWxkQUVTLCByYXdFeHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXAsIHJhd0V4dHJhRmllbGROVEZTKSk7XG5cdHJldHVybiB7XG5cdFx0bG9jYWxIZWFkZXJBcnJheSxcblx0XHRoZWFkZXJBcnJheSxcblx0XHRoZWFkZXJWaWV3LFxuXHRcdGxhc3RNb2REYXRlLFxuXHRcdHJhd0xhc3RNb2REYXRlLFxuXHRcdGVuY3J5cHRlZCxcblx0XHRjb21wcmVzc2VkLFxuXHRcdHZlcnNpb24sXG5cdFx0Y29tcHJlc3Npb25NZXRob2QsXG5cdFx0ZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wRmxhZyxcblx0XHRyYXdFeHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXAsXG5cdFx0cmF3RXh0cmFGaWVsZE5URlMsXG5cdFx0cmF3RXh0cmFGaWVsZEFFUyxcblx0XHRleHRyYUZpZWxkTGVuZ3RoXG5cdH07XG59XG5cbmZ1bmN0aW9uIGFwcGVuZEV4dHJhRmllbGRVU0RaKGVudHJ5SW5mbywgemlwV3JpdGVyT2Zmc2V0KSB7XG5cdGNvbnN0IHsgaGVhZGVySW5mbyB9ID0gZW50cnlJbmZvO1xuXHRsZXQgeyBsb2NhbEhlYWRlckFycmF5LCBleHRyYUZpZWxkTGVuZ3RoIH0gPSBoZWFkZXJJbmZvO1xuXHRsZXQgbG9jYWxIZWFkZXJBcnJheVZpZXcgPSBnZXREYXRhVmlldyhsb2NhbEhlYWRlckFycmF5KTtcblx0bGV0IGV4dHJhQnl0ZXNMZW5ndGggPSA2NCAtICgoemlwV3JpdGVyT2Zmc2V0ICsgbG9jYWxIZWFkZXJBcnJheS5sZW5ndGgpICUgNjQpO1xuXHRpZiAoZXh0cmFCeXRlc0xlbmd0aCA8IDQpIHtcblx0XHRleHRyYUJ5dGVzTGVuZ3RoICs9IDY0O1xuXHR9XG5cdGNvbnN0IHJhd0V4dHJhRmllbGRVU0RaID0gbmV3IFVpbnQ4QXJyYXkoZXh0cmFCeXRlc0xlbmd0aCk7XG5cdGNvbnN0IGV4dHJhRmllbGRVU0RaVmlldyA9IGdldERhdGFWaWV3KHJhd0V4dHJhRmllbGRVU0RaKTtcblx0c2V0VWludDE2KGV4dHJhRmllbGRVU0RaVmlldywgMCwgRVhUUkFGSUVMRF9UWVBFX1VTRFopO1xuXHRzZXRVaW50MTYoZXh0cmFGaWVsZFVTRFpWaWV3LCAyLCBleHRyYUJ5dGVzTGVuZ3RoIC0gMik7XG5cdGNvbnN0IHByZXZpb3VzTG9jYWxIZWFkZXJBcnJheSA9IGxvY2FsSGVhZGVyQXJyYXk7XG5cdGhlYWRlckluZm8ubG9jYWxIZWFkZXJBcnJheSA9IGxvY2FsSGVhZGVyQXJyYXkgPSBuZXcgVWludDhBcnJheShwcmV2aW91c0xvY2FsSGVhZGVyQXJyYXkubGVuZ3RoICsgZXh0cmFCeXRlc0xlbmd0aCk7XG5cdGFycmF5U2V0KGxvY2FsSGVhZGVyQXJyYXksIHByZXZpb3VzTG9jYWxIZWFkZXJBcnJheSk7XG5cdGFycmF5U2V0KGxvY2FsSGVhZGVyQXJyYXksIHJhd0V4dHJhRmllbGRVU0RaLCBwcmV2aW91c0xvY2FsSGVhZGVyQXJyYXkubGVuZ3RoKTtcblx0bG9jYWxIZWFkZXJBcnJheVZpZXcgPSBnZXREYXRhVmlldyhsb2NhbEhlYWRlckFycmF5KTtcblx0c2V0VWludDE2KGxvY2FsSGVhZGVyQXJyYXlWaWV3LCAyOCwgZXh0cmFGaWVsZExlbmd0aCArIGV4dHJhQnl0ZXNMZW5ndGgpO1xuXHRlbnRyeUluZm8ubWV0YWRhdGFTaXplICs9IGV4dHJhQnl0ZXNMZW5ndGg7XG59XG5cbmZ1bmN0aW9uIGdldERhdGFEZXNjcmlwdG9ySW5mbyhvcHRpb25zKSB7XG5cdGNvbnN0IHtcblx0XHR6aXA2NCxcblx0XHRkYXRhRGVzY3JpcHRvcixcblx0XHRkYXRhRGVzY3JpcHRvclNpZ25hdHVyZVxuXHR9ID0gb3B0aW9ucztcblx0bGV0IGRhdGFEZXNjcmlwdG9yQXJyYXkgPSBuZXcgVWludDhBcnJheSgpO1xuXHRsZXQgZGF0YURlc2NyaXB0b3JWaWV3LCBkYXRhRGVzY3JpcHRvck9mZnNldCA9IDA7XG5cdGlmIChkYXRhRGVzY3JpcHRvcikge1xuXHRcdGRhdGFEZXNjcmlwdG9yQXJyYXkgPSBuZXcgVWludDhBcnJheSh6aXA2NCA/IChkYXRhRGVzY3JpcHRvclNpZ25hdHVyZSA/IDI0IDogMjApIDogKGRhdGFEZXNjcmlwdG9yU2lnbmF0dXJlID8gMTYgOiAxMikpO1xuXHRcdGRhdGFEZXNjcmlwdG9yVmlldyA9IGdldERhdGFWaWV3KGRhdGFEZXNjcmlwdG9yQXJyYXkpO1xuXHRcdGlmIChkYXRhRGVzY3JpcHRvclNpZ25hdHVyZSkge1xuXHRcdFx0ZGF0YURlc2NyaXB0b3JPZmZzZXQgPSA0O1xuXHRcdFx0c2V0VWludDMyKGRhdGFEZXNjcmlwdG9yVmlldywgMCwgREFUQV9ERVNDUklQVE9SX1JFQ09SRF9TSUdOQVRVUkUpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4ge1xuXHRcdGRhdGFEZXNjcmlwdG9yQXJyYXksXG5cdFx0ZGF0YURlc2NyaXB0b3JWaWV3LFxuXHRcdGRhdGFEZXNjcmlwdG9yT2Zmc2V0XG5cdH07XG59XG5cbmZ1bmN0aW9uIHNldEVudHJ5SW5mbyhlbnRyeUluZm8sIG9wdGlvbnMpIHtcblx0Y29uc3Qge1xuXHRcdHNpZ25hdHVyZSxcblx0XHRyYXdFeHRyYUZpZWxkWmlwNjQsXG5cdFx0Y29tcHJlc3NlZFNpemUsXG5cdFx0dW5jb21wcmVzc2VkU2l6ZSxcblx0XHRoZWFkZXJJbmZvLFxuXHRcdGRhdGFEZXNjcmlwdG9ySW5mb1xuXHR9ID0gZW50cnlJbmZvO1xuXHRjb25zdCB7XG5cdFx0aGVhZGVyVmlldyxcblx0XHRlbmNyeXB0ZWRcblx0fSA9IGhlYWRlckluZm87XG5cdGNvbnN0IHtcblx0XHRkYXRhRGVzY3JpcHRvclZpZXcsXG5cdFx0ZGF0YURlc2NyaXB0b3JPZmZzZXRcblx0fSA9IGRhdGFEZXNjcmlwdG9ySW5mbztcblx0Y29uc3Qge1xuXHRcdHppcDY0LFxuXHRcdHppcDY0VW5jb21wcmVzc2VkU2l6ZSxcblx0XHR6aXA2NENvbXByZXNzZWRTaXplLFxuXHRcdHppcENyeXB0byxcblx0XHRkYXRhRGVzY3JpcHRvclxuXHR9ID0gb3B0aW9ucztcblx0aWYgKCghZW5jcnlwdGVkIHx8IHppcENyeXB0bykgJiYgc2lnbmF0dXJlICE9PSBVTkRFRklORURfVkFMVUUpIHtcblx0XHRzZXRVaW50MzIoaGVhZGVyVmlldywgMTAsIHNpZ25hdHVyZSk7XG5cdFx0aWYgKGRhdGFEZXNjcmlwdG9yKSB7XG5cdFx0XHRzZXRVaW50MzIoZGF0YURlc2NyaXB0b3JWaWV3LCBkYXRhRGVzY3JpcHRvck9mZnNldCwgc2lnbmF0dXJlKTtcblx0XHR9XG5cdH1cblx0aWYgKHppcDY0KSB7XG5cdFx0Y29uc3QgcmF3RXh0cmFGaWVsZFppcDY0VmlldyA9IGdldERhdGFWaWV3KHJhd0V4dHJhRmllbGRaaXA2NCk7XG5cdFx0c2V0VWludDE2KHJhd0V4dHJhRmllbGRaaXA2NFZpZXcsIDAsIEVYVFJBRklFTERfVFlQRV9aSVA2NCk7XG5cdFx0c2V0VWludDE2KHJhd0V4dHJhRmllbGRaaXA2NFZpZXcsIDIsIHJhd0V4dHJhRmllbGRaaXA2NC5sZW5ndGggLSA0KTtcblx0XHRsZXQgcmF3RXh0cmFGaWVsZFppcDY0T2Zmc2V0ID0gNDtcblx0XHRpZiAoemlwNjRVbmNvbXByZXNzZWRTaXplKSB7XG5cdFx0XHRzZXRVaW50MzIoaGVhZGVyVmlldywgMTgsIE1BWF8zMl9CSVRTKTtcblx0XHRcdHNldEJpZ1VpbnQ2NChyYXdFeHRyYUZpZWxkWmlwNjRWaWV3LCByYXdFeHRyYUZpZWxkWmlwNjRPZmZzZXQsIEJpZ0ludCh1bmNvbXByZXNzZWRTaXplKSk7XG5cdFx0XHRyYXdFeHRyYUZpZWxkWmlwNjRPZmZzZXQgKz0gODtcblx0XHR9XG5cdFx0aWYgKHppcDY0Q29tcHJlc3NlZFNpemUpIHtcblx0XHRcdHNldFVpbnQzMihoZWFkZXJWaWV3LCAxNCwgTUFYXzMyX0JJVFMpO1xuXHRcdFx0c2V0QmlnVWludDY0KHJhd0V4dHJhRmllbGRaaXA2NFZpZXcsIHJhd0V4dHJhRmllbGRaaXA2NE9mZnNldCwgQmlnSW50KGNvbXByZXNzZWRTaXplKSk7XG5cdFx0fVxuXHRcdGlmIChkYXRhRGVzY3JpcHRvcikge1xuXHRcdFx0c2V0QmlnVWludDY0KGRhdGFEZXNjcmlwdG9yVmlldywgZGF0YURlc2NyaXB0b3JPZmZzZXQgKyA0LCBCaWdJbnQoY29tcHJlc3NlZFNpemUpKTtcblx0XHRcdHNldEJpZ1VpbnQ2NChkYXRhRGVzY3JpcHRvclZpZXcsIGRhdGFEZXNjcmlwdG9yT2Zmc2V0ICsgMTIsIEJpZ0ludCh1bmNvbXByZXNzZWRTaXplKSk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHNldFVpbnQzMihoZWFkZXJWaWV3LCAxNCwgY29tcHJlc3NlZFNpemUpO1xuXHRcdHNldFVpbnQzMihoZWFkZXJWaWV3LCAxOCwgdW5jb21wcmVzc2VkU2l6ZSk7XG5cdFx0aWYgKGRhdGFEZXNjcmlwdG9yKSB7XG5cdFx0XHRzZXRVaW50MzIoZGF0YURlc2NyaXB0b3JWaWV3LCBkYXRhRGVzY3JpcHRvck9mZnNldCArIDQsIGNvbXByZXNzZWRTaXplKTtcblx0XHRcdHNldFVpbnQzMihkYXRhRGVzY3JpcHRvclZpZXcsIGRhdGFEZXNjcmlwdG9yT2Zmc2V0ICsgOCwgdW5jb21wcmVzc2VkU2l6ZSk7XG5cdFx0fVxuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHdyaXRlRXh0cmFIZWFkZXJJbmZvKGZpbGVFbnRyeSwgZW50cnlEYXRhLCB3cml0YWJsZSwgeyB6aXBDcnlwdG8gfSkge1xuXHRsZXQgYXJyYXlCdWZmZXI7XG5cdGFycmF5QnVmZmVyID0gYXdhaXQgZW50cnlEYXRhLnNsaWNlKDAsIDI2KS5hcnJheUJ1ZmZlcigpO1xuXHRpZiAoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCAhPSAyNikge1xuXHRcdGFycmF5QnVmZmVyID0gYXJyYXlCdWZmZXIuc2xpY2UoMCwgMjYpO1xuXHR9XG5cdGNvbnN0IGFycmF5QnVmZmVyVmlldyA9IG5ldyBEYXRhVmlldyhhcnJheUJ1ZmZlcik7XG5cdGlmICghZmlsZUVudHJ5LmVuY3J5cHRlZCB8fCB6aXBDcnlwdG8pIHtcblx0XHRzZXRVaW50MzIoYXJyYXlCdWZmZXJWaWV3LCAxNCwgZmlsZUVudHJ5LnNpZ25hdHVyZSk7XG5cdH1cblx0aWYgKGZpbGVFbnRyeS56aXA2NCkge1xuXHRcdHNldFVpbnQzMihhcnJheUJ1ZmZlclZpZXcsIDE4LCBNQVhfMzJfQklUUyk7XG5cdFx0c2V0VWludDMyKGFycmF5QnVmZmVyVmlldywgMjIsIE1BWF8zMl9CSVRTKTtcblx0fSBlbHNlIHtcblx0XHRzZXRVaW50MzIoYXJyYXlCdWZmZXJWaWV3LCAxOCwgZmlsZUVudHJ5LmNvbXByZXNzZWRTaXplKTtcblx0XHRzZXRVaW50MzIoYXJyYXlCdWZmZXJWaWV3LCAyMiwgZmlsZUVudHJ5LnVuY29tcHJlc3NlZFNpemUpO1xuXHR9XG5cdGF3YWl0IHdyaXRlRGF0YSh3cml0YWJsZSwgbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcblx0cmV0dXJuIGVudHJ5RGF0YS5zbGljZShhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gc2V0WmlwNjRFeHRyYUluZm8oZmlsZUVudHJ5LCBvcHRpb25zKSB7XG5cdGNvbnN0IHsgcmF3RXh0cmFGaWVsZFppcDY0LCBvZmZzZXQsIGRpc2tOdW1iZXJTdGFydCB9ID0gZmlsZUVudHJ5O1xuXHRjb25zdCB7IHppcDY0VW5jb21wcmVzc2VkU2l6ZSwgemlwNjRDb21wcmVzc2VkU2l6ZSwgemlwNjRPZmZzZXQsIHppcDY0RGlza051bWJlclN0YXJ0IH0gPSBvcHRpb25zO1xuXHRjb25zdCByYXdFeHRyYUZpZWxkWmlwNjRWaWV3ID0gZ2V0RGF0YVZpZXcocmF3RXh0cmFGaWVsZFppcDY0KTtcblx0bGV0IHJhd0V4dHJhRmllbGRaaXA2NE9mZnNldCA9IDQ7XG5cdGlmICh6aXA2NFVuY29tcHJlc3NlZFNpemUpIHtcblx0XHRyYXdFeHRyYUZpZWxkWmlwNjRPZmZzZXQgKz0gODtcblx0fVxuXHRpZiAoemlwNjRDb21wcmVzc2VkU2l6ZSkge1xuXHRcdHJhd0V4dHJhRmllbGRaaXA2NE9mZnNldCArPSA4O1xuXHR9XG5cdGlmICh6aXA2NE9mZnNldCkge1xuXHRcdHNldEJpZ1VpbnQ2NChyYXdFeHRyYUZpZWxkWmlwNjRWaWV3LCByYXdFeHRyYUZpZWxkWmlwNjRPZmZzZXQsIEJpZ0ludChvZmZzZXQpKTtcblx0XHRyYXdFeHRyYUZpZWxkWmlwNjRPZmZzZXQgKz0gODtcblx0fVxuXHRpZiAoemlwNjREaXNrTnVtYmVyU3RhcnQpIHtcblx0XHRzZXRVaW50MzIocmF3RXh0cmFGaWVsZFppcDY0VmlldywgcmF3RXh0cmFGaWVsZFppcDY0T2Zmc2V0LCBkaXNrTnVtYmVyU3RhcnQpO1xuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNsb3NlRmlsZSh6aXBXcml0ZXIsIGNvbW1lbnQsIG9wdGlvbnMpIHtcblx0Y29uc3QgeyBmaWxlcywgd3JpdGVyIH0gPSB6aXBXcml0ZXI7XG5cdGNvbnN0IHsgZGlza09mZnNldCwgd3JpdGFibGUgfSA9IHdyaXRlcjtcblx0bGV0IHsgZGlza051bWJlciB9ID0gd3JpdGVyO1xuXHRsZXQgb2Zmc2V0ID0gMDtcblx0bGV0IGRpcmVjdG9yeURhdGFMZW5ndGggPSAwO1xuXHRsZXQgZGlyZWN0b3J5T2Zmc2V0ID0gemlwV3JpdGVyLm9mZnNldCAtIGRpc2tPZmZzZXQ7XG5cdGxldCBmaWxlc0xlbmd0aCA9IGZpbGVzLnNpemU7XG5cdGZvciAoY29uc3QgWywgZmlsZUVudHJ5XSBvZiBmaWxlcykge1xuXHRcdGNvbnN0IHtcblx0XHRcdHJhd0ZpbGVuYW1lLFxuXHRcdFx0cmF3RXh0cmFGaWVsZFppcDY0LFxuXHRcdFx0cmF3RXh0cmFGaWVsZEFFUyxcblx0XHRcdHJhd0NvbW1lbnQsXG5cdFx0XHRyYXdFeHRyYUZpZWxkTlRGUyxcblx0XHRcdHJhd0V4dHJhRmllbGQsXG5cdFx0XHRleHRlbmRlZFRpbWVzdGFtcCxcblx0XHRcdGV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcEZsYWcsXG5cdFx0XHRsYXN0TW9kRGF0ZVxuXHRcdH0gPSBmaWxlRW50cnk7XG5cdFx0bGV0IHJhd0V4dHJhRmllbGRUaW1lc3RhbXA7XG5cdFx0aWYgKGV4dGVuZGVkVGltZXN0YW1wKSB7XG5cdFx0XHRyYXdFeHRyYUZpZWxkVGltZXN0YW1wID0gbmV3IFVpbnQ4QXJyYXkoOSk7XG5cdFx0XHRjb25zdCBleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXBWaWV3ID0gZ2V0RGF0YVZpZXcocmF3RXh0cmFGaWVsZFRpbWVzdGFtcCk7XG5cdFx0XHRzZXRVaW50MTYoZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wVmlldywgMCwgRVhUUkFGSUVMRF9UWVBFX0VYVEVOREVEX1RJTUVTVEFNUCk7XG5cdFx0XHRzZXRVaW50MTYoZXh0cmFGaWVsZEV4dGVuZGVkVGltZXN0YW1wVmlldywgMiwgNSk7XG5cdFx0XHRzZXRVaW50OChleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXBWaWV3LCA0LCBleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXBGbGFnKTtcblx0XHRcdHNldFVpbnQzMihleHRyYUZpZWxkRXh0ZW5kZWRUaW1lc3RhbXBWaWV3LCA1LCBNYXRoLmZsb29yKGxhc3RNb2REYXRlLmdldFRpbWUoKSAvIDEwMDApKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmF3RXh0cmFGaWVsZFRpbWVzdGFtcCA9IG5ldyBVaW50OEFycmF5KCk7XG5cdFx0fVxuXHRcdGZpbGVFbnRyeS5yYXdFeHRyYUZpZWxkQ0RFeHRlbmRlZFRpbWVzdGFtcCA9IHJhd0V4dHJhRmllbGRUaW1lc3RhbXA7XG5cdFx0ZGlyZWN0b3J5RGF0YUxlbmd0aCArPSA0NiArXG5cdFx0XHRnZXRMZW5ndGgoXG5cdFx0XHRcdHJhd0ZpbGVuYW1lLFxuXHRcdFx0XHRyYXdDb21tZW50LFxuXHRcdFx0XHRyYXdFeHRyYUZpZWxkWmlwNjQsXG5cdFx0XHRcdHJhd0V4dHJhRmllbGRBRVMsXG5cdFx0XHRcdHJhd0V4dHJhRmllbGROVEZTLFxuXHRcdFx0XHRyYXdFeHRyYUZpZWxkVGltZXN0YW1wLFxuXHRcdFx0XHRyYXdFeHRyYUZpZWxkKTtcblx0fVxuXHRjb25zdCBkaXJlY3RvcnlBcnJheSA9IG5ldyBVaW50OEFycmF5KGRpcmVjdG9yeURhdGFMZW5ndGgpO1xuXHRjb25zdCBkaXJlY3RvcnlWaWV3ID0gZ2V0RGF0YVZpZXcoZGlyZWN0b3J5QXJyYXkpO1xuXHRhd2FpdCBpbml0U3RyZWFtKHdyaXRlcik7XG5cdGxldCBkaXJlY3RvcnlEaXNrT2Zmc2V0ID0gMDtcblx0Zm9yIChjb25zdCBbaW5kZXhGaWxlRW50cnksIGZpbGVFbnRyeV0gb2YgQXJyYXkuZnJvbShmaWxlcy52YWx1ZXMoKSkuZW50cmllcygpKSB7XG5cdFx0Y29uc3Qge1xuXHRcdFx0b2Zmc2V0OiBmaWxlRW50cnlPZmZzZXQsXG5cdFx0XHRyYXdGaWxlbmFtZSxcblx0XHRcdHJhd0V4dHJhRmllbGRaaXA2NCxcblx0XHRcdHJhd0V4dHJhRmllbGRBRVMsXG5cdFx0XHRyYXdFeHRyYUZpZWxkQ0RFeHRlbmRlZFRpbWVzdGFtcCxcblx0XHRcdHJhd0V4dHJhRmllbGROVEZTLFxuXHRcdFx0cmF3RXh0cmFGaWVsZCxcblx0XHRcdHJhd0NvbW1lbnQsXG5cdFx0XHR2ZXJzaW9uTWFkZUJ5LFxuXHRcdFx0aGVhZGVyQXJyYXksXG5cdFx0XHRkaXJlY3RvcnksXG5cdFx0XHR6aXA2NCxcblx0XHRcdHppcDY0VW5jb21wcmVzc2VkU2l6ZSxcblx0XHRcdHppcDY0Q29tcHJlc3NlZFNpemUsXG5cdFx0XHR6aXA2NERpc2tOdW1iZXJTdGFydCxcblx0XHRcdHppcDY0T2Zmc2V0LFxuXHRcdFx0bXNEb3NDb21wYXRpYmxlLFxuXHRcdFx0aW50ZXJuYWxGaWxlQXR0cmlidXRlLFxuXHRcdFx0ZXh0ZXJuYWxGaWxlQXR0cmlidXRlLFxuXHRcdFx0ZGlza051bWJlclN0YXJ0LFxuXHRcdFx0dW5jb21wcmVzc2VkU2l6ZSxcblx0XHRcdGNvbXByZXNzZWRTaXplXG5cdFx0fSA9IGZpbGVFbnRyeTtcblx0XHRjb25zdCBleHRyYUZpZWxkTGVuZ3RoID0gZ2V0TGVuZ3RoKHJhd0V4dHJhRmllbGRaaXA2NCwgcmF3RXh0cmFGaWVsZEFFUywgcmF3RXh0cmFGaWVsZENERXh0ZW5kZWRUaW1lc3RhbXAsIHJhd0V4dHJhRmllbGROVEZTLCByYXdFeHRyYUZpZWxkKTtcblx0XHRzZXRVaW50MzIoZGlyZWN0b3J5Vmlldywgb2Zmc2V0LCBDRU5UUkFMX0ZJTEVfSEVBREVSX1NJR05BVFVSRSk7XG5cdFx0c2V0VWludDE2KGRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDQsIHZlcnNpb25NYWRlQnkpO1xuXHRcdGNvbnN0IGhlYWRlclZpZXcgPSBnZXREYXRhVmlldyhoZWFkZXJBcnJheSk7XG5cdFx0aWYgKCF6aXA2NFVuY29tcHJlc3NlZFNpemUpIHtcblx0XHRcdHNldFVpbnQzMihoZWFkZXJWaWV3LCAxOCwgdW5jb21wcmVzc2VkU2l6ZSk7XG5cdFx0fVxuXHRcdGlmICghemlwNjRDb21wcmVzc2VkU2l6ZSkge1xuXHRcdFx0c2V0VWludDMyKGhlYWRlclZpZXcsIDE0LCBjb21wcmVzc2VkU2l6ZSk7XG5cdFx0fVxuXHRcdGFycmF5U2V0KGRpcmVjdG9yeUFycmF5LCBoZWFkZXJBcnJheSwgb2Zmc2V0ICsgNik7XG5cdFx0c2V0VWludDE2KGRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDMwLCBleHRyYUZpZWxkTGVuZ3RoKTtcblx0XHRzZXRVaW50MTYoZGlyZWN0b3J5Vmlldywgb2Zmc2V0ICsgMzIsIGdldExlbmd0aChyYXdDb21tZW50KSk7XG5cdFx0c2V0VWludDE2KGRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDM0LCB6aXA2NCAmJiB6aXA2NERpc2tOdW1iZXJTdGFydCA/IE1BWF8xNl9CSVRTIDogZGlza051bWJlclN0YXJ0KTtcblx0XHRzZXRVaW50MTYoZGlyZWN0b3J5Vmlldywgb2Zmc2V0ICsgMzYsIGludGVybmFsRmlsZUF0dHJpYnV0ZSk7XG5cdFx0aWYgKGV4dGVybmFsRmlsZUF0dHJpYnV0ZSkge1xuXHRcdFx0c2V0VWludDMyKGRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDM4LCBleHRlcm5hbEZpbGVBdHRyaWJ1dGUpO1xuXHRcdH0gZWxzZSBpZiAoZGlyZWN0b3J5ICYmIG1zRG9zQ29tcGF0aWJsZSkge1xuXHRcdFx0c2V0VWludDgoZGlyZWN0b3J5Vmlldywgb2Zmc2V0ICsgMzgsIEZJTEVfQVRUUl9NU0RPU19ESVJfTUFTSyk7XG5cdFx0fVxuXHRcdHNldFVpbnQzMihkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyA0MiwgemlwNjQgJiYgemlwNjRPZmZzZXQgPyBNQVhfMzJfQklUUyA6IGZpbGVFbnRyeU9mZnNldCk7XG5cdFx0YXJyYXlTZXQoZGlyZWN0b3J5QXJyYXksIHJhd0ZpbGVuYW1lLCBvZmZzZXQgKyA0Nik7XG5cdFx0YXJyYXlTZXQoZGlyZWN0b3J5QXJyYXksIHJhd0V4dHJhRmllbGRaaXA2NCwgb2Zmc2V0ICsgNDYgKyBnZXRMZW5ndGgocmF3RmlsZW5hbWUpKTtcblx0XHRhcnJheVNldChkaXJlY3RvcnlBcnJheSwgcmF3RXh0cmFGaWVsZEFFUywgb2Zmc2V0ICsgNDYgKyBnZXRMZW5ndGgocmF3RmlsZW5hbWUsIHJhd0V4dHJhRmllbGRaaXA2NCkpO1xuXHRcdGFycmF5U2V0KGRpcmVjdG9yeUFycmF5LCByYXdFeHRyYUZpZWxkQ0RFeHRlbmRlZFRpbWVzdGFtcCwgb2Zmc2V0ICsgNDYgKyBnZXRMZW5ndGgocmF3RmlsZW5hbWUsIHJhd0V4dHJhRmllbGRaaXA2NCwgcmF3RXh0cmFGaWVsZEFFUykpO1xuXHRcdGFycmF5U2V0KGRpcmVjdG9yeUFycmF5LCByYXdFeHRyYUZpZWxkTlRGUywgb2Zmc2V0ICsgNDYgKyBnZXRMZW5ndGgocmF3RmlsZW5hbWUsIHJhd0V4dHJhRmllbGRaaXA2NCwgcmF3RXh0cmFGaWVsZEFFUywgcmF3RXh0cmFGaWVsZENERXh0ZW5kZWRUaW1lc3RhbXApKTtcblx0XHRhcnJheVNldChkaXJlY3RvcnlBcnJheSwgcmF3RXh0cmFGaWVsZCwgb2Zmc2V0ICsgNDYgKyBnZXRMZW5ndGgocmF3RmlsZW5hbWUsIHJhd0V4dHJhRmllbGRaaXA2NCwgcmF3RXh0cmFGaWVsZEFFUywgcmF3RXh0cmFGaWVsZENERXh0ZW5kZWRUaW1lc3RhbXAsIHJhd0V4dHJhRmllbGROVEZTKSk7XG5cdFx0YXJyYXlTZXQoZGlyZWN0b3J5QXJyYXksIHJhd0NvbW1lbnQsIG9mZnNldCArIDQ2ICsgZ2V0TGVuZ3RoKHJhd0ZpbGVuYW1lKSArIGV4dHJhRmllbGRMZW5ndGgpO1xuXHRcdGNvbnN0IGRpcmVjdG9yeUVudHJ5TGVuZ3RoID0gNDYgKyBnZXRMZW5ndGgocmF3RmlsZW5hbWUsIHJhd0NvbW1lbnQpICsgZXh0cmFGaWVsZExlbmd0aDtcblx0XHRpZiAob2Zmc2V0IC0gZGlyZWN0b3J5RGlza09mZnNldCA+IHdyaXRlci5hdmFpbGFibGVTaXplKSB7XG5cdFx0XHR3cml0ZXIuYXZhaWxhYmxlU2l6ZSA9IDA7XG5cdFx0XHRhd2FpdCB3cml0ZURhdGEod3JpdGFibGUsIGRpcmVjdG9yeUFycmF5LnNsaWNlKGRpcmVjdG9yeURpc2tPZmZzZXQsIG9mZnNldCkpO1xuXHRcdFx0ZGlyZWN0b3J5RGlza09mZnNldCA9IG9mZnNldDtcblx0XHR9XG5cdFx0b2Zmc2V0ICs9IGRpcmVjdG9yeUVudHJ5TGVuZ3RoO1xuXHRcdGlmIChvcHRpb25zLm9ucHJvZ3Jlc3MpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGF3YWl0IG9wdGlvbnMub25wcm9ncmVzcyhpbmRleEZpbGVFbnRyeSArIDEsIGZpbGVzLnNpemUsIG5ldyBFbnRyeShmaWxlRW50cnkpKTtcblx0XHRcdH0gY2F0Y2ggKF9lcnJvcikge1xuXHRcdFx0XHQvLyBpZ25vcmVkXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGF3YWl0IHdyaXRlRGF0YSh3cml0YWJsZSwgZGlyZWN0b3J5RGlza09mZnNldCA/IGRpcmVjdG9yeUFycmF5LnNsaWNlKGRpcmVjdG9yeURpc2tPZmZzZXQpIDogZGlyZWN0b3J5QXJyYXkpO1xuXHRsZXQgbGFzdERpc2tOdW1iZXIgPSB3cml0ZXIuZGlza051bWJlcjtcblx0Y29uc3QgeyBhdmFpbGFibGVTaXplIH0gPSB3cml0ZXI7XG5cdGlmIChhdmFpbGFibGVTaXplIDwgRU5EX09GX0NFTlRSQUxfRElSX0xFTkdUSCkge1xuXHRcdGxhc3REaXNrTnVtYmVyKys7XG5cdH1cblx0bGV0IHppcDY0ID0gZ2V0T3B0aW9uVmFsdWUoemlwV3JpdGVyLCBvcHRpb25zLCBcInppcDY0XCIpO1xuXHRpZiAoZGlyZWN0b3J5T2Zmc2V0ID49IE1BWF8zMl9CSVRTIHx8IGRpcmVjdG9yeURhdGFMZW5ndGggPj0gTUFYXzMyX0JJVFMgfHwgZmlsZXNMZW5ndGggPj0gTUFYXzE2X0JJVFMgfHwgbGFzdERpc2tOdW1iZXIgPj0gTUFYXzE2X0JJVFMpIHtcblx0XHRpZiAoemlwNjQgPT09IGZhbHNlKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoRVJSX1VOU1VQUE9SVEVEX0ZPUk1BVCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHppcDY0ID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0Y29uc3QgZW5kT2ZkaXJlY3RvcnlBcnJheSA9IG5ldyBVaW50OEFycmF5KHppcDY0ID8gWklQNjRfRU5EX09GX0NFTlRSQUxfRElSX1RPVEFMX0xFTkdUSCA6IEVORF9PRl9DRU5UUkFMX0RJUl9MRU5HVEgpO1xuXHRjb25zdCBlbmRPZmRpcmVjdG9yeVZpZXcgPSBnZXREYXRhVmlldyhlbmRPZmRpcmVjdG9yeUFycmF5KTtcblx0b2Zmc2V0ID0gMDtcblx0aWYgKHppcDY0KSB7XG5cdFx0c2V0VWludDMyKGVuZE9mZGlyZWN0b3J5VmlldywgMCwgWklQNjRfRU5EX09GX0NFTlRSQUxfRElSX1NJR05BVFVSRSk7XG5cdFx0c2V0QmlnVWludDY0KGVuZE9mZGlyZWN0b3J5VmlldywgNCwgQmlnSW50KDQ0KSk7XG5cdFx0c2V0VWludDE2KGVuZE9mZGlyZWN0b3J5VmlldywgMTIsIDQ1KTtcblx0XHRzZXRVaW50MTYoZW5kT2ZkaXJlY3RvcnlWaWV3LCAxNCwgNDUpO1xuXHRcdHNldFVpbnQzMihlbmRPZmRpcmVjdG9yeVZpZXcsIDE2LCBsYXN0RGlza051bWJlcik7XG5cdFx0c2V0VWludDMyKGVuZE9mZGlyZWN0b3J5VmlldywgMjAsIGRpc2tOdW1iZXIpO1xuXHRcdHNldEJpZ1VpbnQ2NChlbmRPZmRpcmVjdG9yeVZpZXcsIDI0LCBCaWdJbnQoZmlsZXNMZW5ndGgpKTtcblx0XHRzZXRCaWdVaW50NjQoZW5kT2ZkaXJlY3RvcnlWaWV3LCAzMiwgQmlnSW50KGZpbGVzTGVuZ3RoKSk7XG5cdFx0c2V0QmlnVWludDY0KGVuZE9mZGlyZWN0b3J5VmlldywgNDAsIEJpZ0ludChkaXJlY3RvcnlEYXRhTGVuZ3RoKSk7XG5cdFx0c2V0QmlnVWludDY0KGVuZE9mZGlyZWN0b3J5VmlldywgNDgsIEJpZ0ludChkaXJlY3RvcnlPZmZzZXQpKTtcblx0XHRzZXRVaW50MzIoZW5kT2ZkaXJlY3RvcnlWaWV3LCA1NiwgWklQNjRfRU5EX09GX0NFTlRSQUxfRElSX0xPQ0FUT1JfU0lHTkFUVVJFKTtcblx0XHRzZXRCaWdVaW50NjQoZW5kT2ZkaXJlY3RvcnlWaWV3LCA2NCwgQmlnSW50KGRpcmVjdG9yeU9mZnNldCkgKyBCaWdJbnQoZGlyZWN0b3J5RGF0YUxlbmd0aCkpO1xuXHRcdHNldFVpbnQzMihlbmRPZmRpcmVjdG9yeVZpZXcsIDcyLCBsYXN0RGlza051bWJlciArIDEpO1xuXHRcdGNvbnN0IHN1cHBvcnRaaXA2NFNwbGl0RmlsZSA9IGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgXCJzdXBwb3J0WmlwNjRTcGxpdEZpbGVcIiwgdHJ1ZSk7XG5cdFx0aWYgKHN1cHBvcnRaaXA2NFNwbGl0RmlsZSkge1xuXHRcdFx0bGFzdERpc2tOdW1iZXIgPSBNQVhfMTZfQklUUztcblx0XHRcdGRpc2tOdW1iZXIgPSBNQVhfMTZfQklUUztcblx0XHR9XG5cdFx0ZmlsZXNMZW5ndGggPSBNQVhfMTZfQklUUztcblx0XHRkaXJlY3RvcnlPZmZzZXQgPSBNQVhfMzJfQklUUztcblx0XHRkaXJlY3RvcnlEYXRhTGVuZ3RoID0gTUFYXzMyX0JJVFM7XG5cdFx0b2Zmc2V0ICs9IFpJUDY0X0VORF9PRl9DRU5UUkFMX0RJUl9MRU5HVEggKyBaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfTE9DQVRPUl9MRU5HVEg7XG5cdH1cblx0c2V0VWludDMyKGVuZE9mZGlyZWN0b3J5Vmlldywgb2Zmc2V0LCBFTkRfT0ZfQ0VOVFJBTF9ESVJfU0lHTkFUVVJFKTtcblx0c2V0VWludDE2KGVuZE9mZGlyZWN0b3J5Vmlldywgb2Zmc2V0ICsgNCwgbGFzdERpc2tOdW1iZXIpO1xuXHRzZXRVaW50MTYoZW5kT2ZkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyA2LCBkaXNrTnVtYmVyKTtcblx0c2V0VWludDE2KGVuZE9mZGlyZWN0b3J5Vmlldywgb2Zmc2V0ICsgOCwgZmlsZXNMZW5ndGgpO1xuXHRzZXRVaW50MTYoZW5kT2ZkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyAxMCwgZmlsZXNMZW5ndGgpO1xuXHRzZXRVaW50MzIoZW5kT2ZkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyAxMiwgZGlyZWN0b3J5RGF0YUxlbmd0aCk7XG5cdHNldFVpbnQzMihlbmRPZmRpcmVjdG9yeVZpZXcsIG9mZnNldCArIDE2LCBkaXJlY3RvcnlPZmZzZXQpO1xuXHRjb25zdCBjb21tZW50TGVuZ3RoID0gZ2V0TGVuZ3RoKGNvbW1lbnQpO1xuXHRpZiAoY29tbWVudExlbmd0aCkge1xuXHRcdGlmIChjb21tZW50TGVuZ3RoIDw9IE1BWF8xNl9CSVRTKSB7XG5cdFx0XHRzZXRVaW50MTYoZW5kT2ZkaXJlY3RvcnlWaWV3LCBvZmZzZXQgKyAyMCwgY29tbWVudExlbmd0aCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihFUlJfSU5WQUxJRF9DT01NRU5UKTtcblx0XHR9XG5cdH1cblx0YXdhaXQgd3JpdGVEYXRhKHdyaXRhYmxlLCBlbmRPZmRpcmVjdG9yeUFycmF5KTtcblx0aWYgKGNvbW1lbnRMZW5ndGgpIHtcblx0XHRhd2FpdCB3cml0ZURhdGEod3JpdGFibGUsIGNvbW1lbnQpO1xuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHdyaXRlRGF0YSh3cml0YWJsZSwgYXJyYXkpIHtcblx0Y29uc3Qgc3RyZWFtV3JpdGVyID0gd3JpdGFibGUuZ2V0V3JpdGVyKCk7XG5cdGF3YWl0IHN0cmVhbVdyaXRlci5yZWFkeTtcblx0d3JpdGFibGUuc2l6ZSArPSBnZXRMZW5ndGgoYXJyYXkpO1xuXHRhd2FpdCBzdHJlYW1Xcml0ZXIud3JpdGUoYXJyYXkpO1xuXHRzdHJlYW1Xcml0ZXIucmVsZWFzZUxvY2soKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGltZU5URlMoZGF0ZSkge1xuXHRpZiAoZGF0ZSkge1xuXHRcdHJldHVybiAoKEJpZ0ludChkYXRlLmdldFRpbWUoKSkgKyBCaWdJbnQoMTE2NDQ0NzM2MDAwMDApKSAqIEJpZ0ludCgxMDAwMCkpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGdldE9wdGlvblZhbHVlKHppcFdyaXRlciwgb3B0aW9ucywgbmFtZSwgZGVmYXVsdFZhbHVlKSB7XG5cdGNvbnN0IHJlc3VsdCA9IG9wdGlvbnNbbmFtZV0gPT09IFVOREVGSU5FRF9WQUxVRSA/IHppcFdyaXRlci5vcHRpb25zW25hbWVdIDogb3B0aW9uc1tuYW1lXTtcblx0cmV0dXJuIHJlc3VsdCA9PT0gVU5ERUZJTkVEX1ZBTFVFID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZXRNYXhpbXVtQ29tcHJlc3NlZFNpemUodW5jb21wcmVzc2VkU2l6ZSkge1xuXHRyZXR1cm4gdW5jb21wcmVzc2VkU2l6ZSArICg1ICogKE1hdGguZmxvb3IodW5jb21wcmVzc2VkU2l6ZSAvIDE2MzgzKSArIDEpKTtcbn1cblxuZnVuY3Rpb24gc2V0VWludDgodmlldywgb2Zmc2V0LCB2YWx1ZSkge1xuXHR2aWV3LnNldFVpbnQ4KG9mZnNldCwgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiBzZXRVaW50MTYodmlldywgb2Zmc2V0LCB2YWx1ZSkge1xuXHR2aWV3LnNldFVpbnQxNihvZmZzZXQsIHZhbHVlLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gc2V0VWludDMyKHZpZXcsIG9mZnNldCwgdmFsdWUpIHtcblx0dmlldy5zZXRVaW50MzIob2Zmc2V0LCB2YWx1ZSwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIHNldEJpZ1VpbnQ2NCh2aWV3LCBvZmZzZXQsIHZhbHVlKSB7XG5cdHZpZXcuc2V0QmlnVWludDY0KG9mZnNldCwgdmFsdWUsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBhcnJheVNldChhcnJheSwgdHlwZWRBcnJheSwgb2Zmc2V0KSB7XG5cdGFycmF5LnNldCh0eXBlZEFycmF5LCBvZmZzZXQpO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhVmlldyhhcnJheSkge1xuXHRyZXR1cm4gbmV3IERhdGFWaWV3KGFycmF5LmJ1ZmZlcik7XG59XG5cbmZ1bmN0aW9uIGdldExlbmd0aCguLi5hcnJheUxpa2VzKSB7XG5cdGxldCByZXN1bHQgPSAwO1xuXHRhcnJheUxpa2VzLmZvckVhY2goYXJyYXlMaWtlID0+IGFycmF5TGlrZSAmJiAocmVzdWx0ICs9IGFycmF5TGlrZS5sZW5ndGgpKTtcblx0cmV0dXJuIHJlc3VsdDtcbn0iLCJmdW5jdGlvbiBlKGUpe2NvbnN0IHQ9KCk9PlVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoWydjb25zdHtBcnJheTplLE9iamVjdDp0LE51bWJlcjpuLE1hdGg6cixFcnJvcjpzLFVpbnQ4QXJyYXk6aSxVaW50MTZBcnJheTpvLFVpbnQzMkFycmF5OmMsSW50MzJBcnJheTpmLE1hcDphLERhdGFWaWV3OmwsUHJvbWlzZTp1LFRleHRFbmNvZGVyOncsY3J5cHRvOmgscG9zdE1lc3NhZ2U6ZCxUcmFuc2Zvcm1TdHJlYW06cCxSZWFkYWJsZVN0cmVhbTp5LFdyaXRhYmxlU3RyZWFtOm0sQ29tcHJlc3Npb25TdHJlYW06YixEZWNvbXByZXNzaW9uU3RyZWFtOmd9PXNlbGY7Y2xhc3Mga3tjb25zdHJ1Y3RvcihlKXtyZXR1cm4gY2xhc3MgZXh0ZW5kcyBwe2NvbnN0cnVjdG9yKHQsbil7Y29uc3Qgcj1uZXcgZShuKTtzdXBlcih7dHJhbnNmb3JtKGUsdCl7dC5lbnF1ZXVlKHIuYXBwZW5kKGUpKX0sZmx1c2goZSl7Y29uc3QgdD1yLmZsdXNoKCk7dCYmZS5lbnF1ZXVlKHQpfX0pfX19fWNvbnN0IHY9W107Zm9yKGxldCBlPTA7MjU2PmU7ZSsrKXtsZXQgdD1lO2ZvcihsZXQgZT0wOzg+ZTtlKyspMSZ0P3Q9dD4+PjFeMzk4ODI5MjM4NDp0Pj4+PTE7dltlXT10fWNsYXNzIFN7Y29uc3RydWN0b3IoZSl7dGhpcy50PWV8fC0xfWFwcGVuZChlKXtsZXQgdD0wfHRoaXMudDtmb3IobGV0IG49MCxyPTB8ZS5sZW5ndGg7cj5uO24rKyl0PXQ+Pj44XnZbMjU1Jih0XmVbbl0pXTt0aGlzLnQ9dH1nZXQoKXtyZXR1cm5+dGhpcy50fX1jbGFzcyB6IGV4dGVuZHMgcHtjb25zdHJ1Y3Rvcigpe2xldCBlO2NvbnN0IHQ9bmV3IFM7c3VwZXIoe3RyYW5zZm9ybShlLG4pe3QuYXBwZW5kKGUpLG4uZW5xdWV1ZShlKX0sZmx1c2goKXtjb25zdCBuPW5ldyBpKDQpO25ldyBsKG4uYnVmZmVyKS5zZXRVaW50MzIoMCx0LmdldCgpKSxlLnZhbHVlPW59fSksZT10aGlzfX1jb25zdCBDPXtjb25jYXQoZSx0KXtpZigwPT09ZS5sZW5ndGh8fDA9PT10Lmxlbmd0aClyZXR1cm4gZS5jb25jYXQodCk7Y29uc3Qgbj1lW2UubGVuZ3RoLTFdLHI9Qy5pKG4pO3JldHVybiAzMj09PXI/ZS5jb25jYXQodCk6Qy5vKHQsciwwfG4sZS5zbGljZSgwLGUubGVuZ3RoLTEpKX0sbChlKXtjb25zdCB0PWUubGVuZ3RoO2lmKDA9PT10KXJldHVybiAwO2NvbnN0IG49ZVt0LTFdO3JldHVybiAzMioodC0xKStDLmkobil9LHUoZSx0KXtpZigzMiplLmxlbmd0aDx0KXJldHVybiBlO2NvbnN0IG49KGU9ZS5zbGljZSgwLHIuY2VpbCh0LzMyKSkpLmxlbmd0aDtyZXR1cm4gdCY9MzEsbj4wJiZ0JiYoZVtuLTFdPUMuaCh0LGVbbi0xXSYyMTQ3NDgzNjQ4Pj50LTEsMSkpLGV9LGg6KGUsdCxuKT0+MzI9PT1lP3Q6KG4/MHx0OnQ8PDMyLWUpKzEwOTk1MTE2Mjc3NzYqZSxpOmU9PnIucm91bmQoZS8xMDk5NTExNjI3Nzc2KXx8MzIsbyhlLHQsbixyKXtmb3Iodm9pZCAwPT09ciYmKHI9W10pO3Q+PTMyO3QtPTMyKXIucHVzaChuKSxuPTA7aWYoMD09PXQpcmV0dXJuIHIuY29uY2F0KGUpO2ZvcihsZXQgcz0wO3M8ZS5sZW5ndGg7cysrKXIucHVzaChufGVbc10+Pj50KSxuPWVbc108PDMyLXQ7Y29uc3Qgcz1lLmxlbmd0aD9lW2UubGVuZ3RoLTFdOjAsaT1DLmkocyk7cmV0dXJuIHIucHVzaChDLmgodCtpJjMxLHQraT4zMj9uOnIucG9wKCksMSkpLHJ9fSx4PXtwOnttKGUpe2NvbnN0IHQ9Qy5sKGUpLzgsbj1uZXcgaSh0KTtsZXQgcjtmb3IobGV0IHM9MDt0PnM7cysrKTA9PSgzJnMpJiYocj1lW3MvNF0pLG5bc109cj4+PjI0LHI8PD04O3JldHVybiBufSxnKGUpe2NvbnN0IHQ9W107bGV0IG4scj0wO2ZvcihuPTA7bjxlLmxlbmd0aDtuKyspcj1yPDw4fGVbbl0sMz09KDMmbikmJih0LnB1c2gocikscj0wKTtyZXR1cm4gMyZuJiZ0LnB1c2goQy5oKDgqKDMmbikscikpLHR9fX0sXz1jbGFzc3tjb25zdHJ1Y3RvcihlKXtjb25zdCB0PXRoaXM7dC5ibG9ja1NpemU9NTEyLHQuaz1bMTczMjU4NDE5Myw0MDIzMjMzNDE3LDI1NjIzODMxMDIsMjcxNzMzODc4LDMyODUzNzc1MjBdLHQudj1bMTUxODUwMDI0OSwxODU5Nzc1MzkzLDI0MDA5NTk3MDgsMzM5NTQ2OTc4Ml0sZT8odC5TPWUuUy5zbGljZSgwKSx0LkM9ZS5DLnNsaWNlKDApLHQuXz1lLl8pOnQucmVzZXQoKX1yZXNldCgpe2NvbnN0IGU9dGhpcztyZXR1cm4gZS5TPWUuay5zbGljZSgwKSxlLkM9W10sZS5fPTAsZX11cGRhdGUoZSl7Y29uc3QgdD10aGlzO1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT14LkEuZyhlKSk7Y29uc3Qgbj10LkM9Qy5jb25jYXQodC5DLGUpLHI9dC5fLGk9dC5fPXIrQy5sKGUpO2lmKGk+OTAwNzE5OTI1NDc0MDk5MSl0aHJvdyBuZXcgcyhcIkNhbm5vdCBoYXNoIG1vcmUgdGhhbiAyXjUzIC0gMSBiaXRzXCIpO2NvbnN0IG89bmV3IGMobik7bGV0IGY9MDtmb3IobGV0IGU9dC5ibG9ja1NpemUrci0odC5ibG9ja1NpemUrciZ0LmJsb2NrU2l6ZS0xKTtpPj1lO2UrPXQuYmxvY2tTaXplKXQuSShvLnN1YmFycmF5KDE2KmYsMTYqKGYrMSkpKSxmKz0xO3JldHVybiBuLnNwbGljZSgwLDE2KmYpLHR9RCgpe2NvbnN0IGU9dGhpcztsZXQgdD1lLkM7Y29uc3Qgbj1lLlM7dD1DLmNvbmNhdCh0LFtDLmgoMSwxKV0pO2ZvcihsZXQgZT10Lmxlbmd0aCsyOzE1JmU7ZSsrKXQucHVzaCgwKTtmb3IodC5wdXNoKHIuZmxvb3IoZS5fLzQyOTQ5NjcyOTYpKSx0LnB1c2goMHxlLl8pO3QubGVuZ3RoOyllLkkodC5zcGxpY2UoMCwxNikpO3JldHVybiBlLnJlc2V0KCksbn1WKGUsdCxuLHIpe3JldHVybiBlPjE5P2U+Mzk/ZT41OT9lPjc5P3ZvaWQgMDp0Xm5ecjp0Jm58dCZyfG4mcjp0Xm5ecjp0Jm58fnQmcn1QKGUsdCl7cmV0dXJuIHQ8PGV8dD4+PjMyLWV9SSh0KXtjb25zdCBuPXRoaXMscz1uLlMsaT1lKDgwKTtmb3IobGV0IGU9MDsxNj5lO2UrKylpW2VdPXRbZV07bGV0IG89c1swXSxjPXNbMV0sZj1zWzJdLGE9c1szXSxsPXNbNF07Zm9yKGxldCBlPTA7Nzk+PWU7ZSsrKXsxNj5lfHwoaVtlXT1uLlAoMSxpW2UtM11eaVtlLThdXmlbZS0xNF1eaVtlLTE2XSkpO2NvbnN0IHQ9bi5QKDUsbykrbi5WKGUsYyxmLGEpK2wraVtlXStuLnZbci5mbG9vcihlLzIwKV18MDtsPWEsYT1mLGY9bi5QKDMwLGMpLGM9byxvPXR9c1swXT1zWzBdK298MCxzWzFdPXNbMV0rY3wwLHNbMl09c1syXStmfDAsc1szXT1zWzNdK2F8MCxzWzRdPXNbNF0rbHwwfX0sQT17Z2V0UmFuZG9tVmFsdWVzKGUpe2NvbnN0IHQ9bmV3IGMoZS5idWZmZXIpLG49ZT0+e2xldCB0PTk4NzY1NDMyMTtjb25zdCBuPTQyOTQ5NjcyOTU7cmV0dXJuKCk9Pih0PTM2OTY5Kig2NTUzNSZ0KSsodD4+MTYpJm4sKCgodDw8MTYpKyhlPTE4ZTMqKDY1NTM1JmUpKyhlPj4xNikmbikmbikvNDI5NDk2NzI5NisuNSkqKHIucmFuZG9tKCk+LjU/MTotMSkpfTtmb3IobGV0IHMsaT0wO2k8ZS5sZW5ndGg7aSs9NCl7Y29uc3QgZT1uKDQyOTQ5NjcyOTYqKHN8fHIucmFuZG9tKCkpKTtzPTk4NzY1NDA3MSplKCksdFtpLzRdPTQyOTQ5NjcyOTYqZSgpfDB9cmV0dXJuIGV9fSxJPXtpbXBvcnRLZXk6ZT0+bmV3IEkuUih4LnAuZyhlKSksQihlLHQsbixyKXtpZihuPW58fDFlNCwwPnJ8fDA+bil0aHJvdyBuZXcgcyhcImludmFsaWQgcGFyYW1zIHRvIHBia2RmMlwiKTtjb25zdCBpPTErKHI+PjUpPDwyO2xldCBvLGMsZixhLHU7Y29uc3Qgdz1uZXcgQXJyYXlCdWZmZXIoaSksaD1uZXcgbCh3KTtsZXQgZD0wO2NvbnN0IHA9Qztmb3IodD14LnAuZyh0KSx1PTE7KGl8fDEpPmQ7dSsrKXtmb3Iobz1jPWUuZW5jcnlwdChwLmNvbmNhdCh0LFt1XSkpLGY9MTtuPmY7ZisrKWZvcihjPWUuZW5jcnlwdChjKSxhPTA7YTxjLmxlbmd0aDthKyspb1thXV49Y1thXTtmb3IoZj0wOyhpfHwxKT5kJiZmPG8ubGVuZ3RoO2YrKyloLnNldEludDMyKGQsb1tmXSksZCs9NH1yZXR1cm4gdy5zbGljZSgwLHIvOCl9LFI6Y2xhc3N7Y29uc3RydWN0b3IoZSl7Y29uc3QgdD10aGlzLG49dC5NPV8scj1bW10sW11dO3QuVT1bbmV3IG4sbmV3IG5dO2NvbnN0IHM9dC5VWzBdLmJsb2NrU2l6ZS8zMjtlLmxlbmd0aD5zJiYoZT0obmV3IG4pLnVwZGF0ZShlKS5EKCkpO2ZvcihsZXQgdD0wO3M+dDt0KyspclswXVt0XT05MDk1MjI0ODZeZVt0XSxyWzFdW3RdPTE1NDk1NTY4MjheZVt0XTt0LlVbMF0udXBkYXRlKHJbMF0pLHQuVVsxXS51cGRhdGUoclsxXSksdC5LPW5ldyBuKHQuVVswXSl9cmVzZXQoKXtjb25zdCBlPXRoaXM7ZS5LPW5ldyBlLk0oZS5VWzBdKSxlLk49ITF9dXBkYXRlKGUpe3RoaXMuTj0hMCx0aGlzLksudXBkYXRlKGUpfWRpZ2VzdCgpe2NvbnN0IGU9dGhpcyx0PWUuSy5EKCksbj1uZXcgZS5NKGUuVVsxXSkudXBkYXRlKHQpLkQoKTtyZXR1cm4gZS5yZXNldCgpLG59ZW5jcnlwdChlKXtpZih0aGlzLk4pdGhyb3cgbmV3IHMoXCJlbmNyeXB0IG9uIGFscmVhZHkgdXBkYXRlZCBobWFjIGNhbGxlZCFcIik7cmV0dXJuIHRoaXMudXBkYXRlKGUpLHRoaXMuZGlnZXN0KGUpfX19LEQ9dm9pZCAwIT09aCYmXCJmdW5jdGlvblwiPT10eXBlb2YgaC5nZXRSYW5kb21WYWx1ZXMsVj1cIkludmFsaWQgcGFzc3dvcmRcIixQPVwiSW52YWxpZCBzaWduYXR1cmVcIixSPVwiemlwanMtYWJvcnQtY2hlY2stcGFzc3dvcmRcIjtmdW5jdGlvbiBCKGUpe3JldHVybiBEP2guZ2V0UmFuZG9tVmFsdWVzKGUpOkEuZ2V0UmFuZG9tVmFsdWVzKGUpfWNvbnN0IEU9MTYsTT17bmFtZTpcIlBCS0RGMlwifSxVPXQuYXNzaWduKHtoYXNoOntuYW1lOlwiSE1BQ1wifX0sTSksSz10LmFzc2lnbih7aXRlcmF0aW9uczoxZTMsaGFzaDp7bmFtZTpcIlNIQS0xXCJ9fSxNKSxOPVtcImRlcml2ZUJpdHNcIl0sTz1bOCwxMiwxNl0sVD1bMTYsMjQsMzJdLFc9MTAsaj1bMCwwLDAsMF0sSD1cInVuZGVmaW5lZFwiLEw9XCJmdW5jdGlvblwiLEY9dHlwZW9mIGghPUgscT1GJiZoLnN1YnRsZSxHPUYmJnR5cGVvZiBxIT1ILEo9eC5wLFE9Y2xhc3N7Y29uc3RydWN0b3IoZSl7Y29uc3QgdD10aGlzO3QuTz1bW1tdLFtdLFtdLFtdLFtdXSxbW10sW10sW10sW10sW11dXSx0Lk9bMF1bMF1bMF18fHQuVCgpO2NvbnN0IG49dC5PWzBdWzRdLHI9dC5PWzFdLGk9ZS5sZW5ndGg7bGV0IG8sYyxmLGE9MTtpZig0IT09aSYmNiE9PWkmJjghPT1pKXRocm93IG5ldyBzKFwiaW52YWxpZCBhZXMga2V5IHNpemVcIik7Zm9yKHQudj1bYz1lLnNsaWNlKDApLGY9W11dLG89aTs0KmkrMjg+bztvKyspe2xldCBlPWNbby0xXTsobyVpPT0wfHw4PT09aSYmbyVpPT00KSYmKGU9bltlPj4+MjRdPDwyNF5uW2U+PjE2JjI1NV08PDE2Xm5bZT4+OCYyNTVdPDw4Xm5bMjU1JmVdLG8laT09MCYmKGU9ZTw8OF5lPj4+MjReYTw8MjQsYT1hPDwxXjI4MyooYT4+NykpKSxjW29dPWNbby1pXV5lfWZvcihsZXQgZT0wO287ZSsrLG8tLSl7Y29uc3QgdD1jWzMmZT9vOm8tNF07ZltlXT00Pj1vfHw0PmU/dDpyWzBdW25bdD4+PjI0XV1eclsxXVtuW3Q+PjE2JjI1NV1dXnJbMl1bblt0Pj44JjI1NV1dXnJbM11bblsyNTUmdF1dfX1lbmNyeXB0KGUpe3JldHVybiB0aGlzLlcoZSwwKX1kZWNyeXB0KGUpe3JldHVybiB0aGlzLlcoZSwxKX1UKCl7Y29uc3QgZT10aGlzLk9bMF0sdD10aGlzLk9bMV0sbj1lWzRdLHI9dFs0XSxzPVtdLGk9W107bGV0IG8sYyxmLGE7Zm9yKGxldCBlPTA7MjU2PmU7ZSsrKWlbKHNbZV09ZTw8MV4yODMqKGU+PjcpKV5lXT1lO2ZvcihsZXQgbD1vPTA7IW5bbF07bF49Y3x8MSxvPWlbb118fDEpe2xldCBpPW9ebzw8MV5vPDwyXm88PDNebzw8NDtpPWk+PjheMjU1JmleOTksbltsXT1pLHJbaV09bCxhPXNbZj1zW2M9c1tsXV1dO2xldCB1PTE2ODQzMDA5KmFeNjU1MzcqZl4yNTcqY14xNjg0MzAwOCpsLHc9MjU3KnNbaV1eMTY4NDMwMDgqaTtmb3IobGV0IG49MDs0Pm47bisrKWVbbl1bbF09dz13PDwyNF53Pj4+OCx0W25dW2ldPXU9dTw8MjRedT4+Pjh9Zm9yKGxldCBuPTA7NT5uO24rKyllW25dPWVbbl0uc2xpY2UoMCksdFtuXT10W25dLnNsaWNlKDApfVcoZSx0KXtpZig0IT09ZS5sZW5ndGgpdGhyb3cgbmV3IHMoXCJpbnZhbGlkIGFlcyBibG9jayBzaXplXCIpO2NvbnN0IG49dGhpcy52W3RdLHI9bi5sZW5ndGgvNC0yLGk9WzAsMCwwLDBdLG89dGhpcy5PW3RdLGM9b1swXSxmPW9bMV0sYT1vWzJdLGw9b1szXSx1PW9bNF07bGV0IHcsaCxkLHA9ZVswXV5uWzBdLHk9ZVt0PzM6MV1eblsxXSxtPWVbMl1eblsyXSxiPWVbdD8xOjNdXm5bM10sZz00O2ZvcihsZXQgZT0wO3I+ZTtlKyspdz1jW3A+Pj4yNF1eZlt5Pj4xNiYyNTVdXmFbbT4+OCYyNTVdXmxbMjU1JmJdXm5bZ10saD1jW3k+Pj4yNF1eZlttPj4xNiYyNTVdXmFbYj4+OCYyNTVdXmxbMjU1JnBdXm5bZysxXSxkPWNbbT4+PjI0XV5mW2I+PjE2JjI1NV1eYVtwPj44JjI1NV1ebFsyNTUmeV1ebltnKzJdLGI9Y1tiPj4+MjRdXmZbcD4+MTYmMjU1XV5hW3k+PjgmMjU1XV5sWzI1NSZtXV5uW2crM10sZys9NCxwPXcseT1oLG09ZDtmb3IobGV0IGU9MDs0PmU7ZSsrKWlbdD8zJi1lOmVdPXVbcD4+PjI0XTw8MjRedVt5Pj4xNiYyNTVdPDwxNl51W20+PjgmMjU1XTw8OF51WzI1NSZiXV5uW2crK10sdz1wLHA9eSx5PW0sbT1iLGI9dztyZXR1cm4gaX19LFg9Y2xhc3N7Y29uc3RydWN0b3IoZSx0KXt0aGlzLmo9ZSx0aGlzLkg9dCx0aGlzLkw9dH1yZXNldCgpe3RoaXMuTD10aGlzLkh9dXBkYXRlKGUpe3JldHVybiB0aGlzLkYodGhpcy5qLGUsdGhpcy5MKX1xKGUpe2lmKDI1NT09KGU+PjI0JjI1NSkpe2xldCB0PWU+PjE2JjI1NSxuPWU+PjgmMjU1LHI9MjU1JmU7MjU1PT09dD8odD0wLDI1NT09PW4/KG49MCwyNTU9PT1yP3I9MDorK3IpOisrbik6Kyt0LGU9MCxlKz10PDwxNixlKz1uPDw4LGUrPXJ9ZWxzZSBlKz0xPDwyNDtyZXR1cm4gZX1HKGUpezA9PT0oZVswXT10aGlzLnEoZVswXSkpJiYoZVsxXT10aGlzLnEoZVsxXSkpfUYoZSx0LG4pe2xldCByO2lmKCEocj10Lmxlbmd0aCkpcmV0dXJuW107Y29uc3Qgcz1DLmwodCk7Zm9yKGxldCBzPTA7cj5zO3MrPTQpe3RoaXMuRyhuKTtjb25zdCByPWUuZW5jcnlwdChuKTt0W3NdXj1yWzBdLHRbcysxXV49clsxXSx0W3MrMl1ePXJbMl0sdFtzKzNdXj1yWzNdfXJldHVybiBDLnUodCxzKX19LFk9SS5SO2xldCBaPUYmJkcmJnR5cGVvZiBxLmltcG9ydEtleT09TCwkPUYmJkcmJnR5cGVvZiBxLmRlcml2ZUJpdHM9PUw7Y2xhc3MgZWUgZXh0ZW5kcyBwe2NvbnN0cnVjdG9yKHtwYXNzd29yZDplLHNpZ25lZDpuLGVuY3J5cHRpb25TdHJlbmd0aDpyLGNoZWNrUGFzc3dvcmRPbmx5Om99KXtzdXBlcih7c3RhcnQoKXt0LmFzc2lnbih0aGlzLHtyZWFkeTpuZXcgdSgoZT0+dGhpcy5KPWUpKSxwYXNzd29yZDplLHNpZ25lZDpuLFg6ci0xLHBlbmRpbmc6bmV3IGl9KX0sYXN5bmMgdHJhbnNmb3JtKGUsdCl7Y29uc3Qgbj10aGlzLHtwYXNzd29yZDpyLFg6YyxKOmYscmVhZHk6YX09bjtyPyhhd2FpdChhc3luYyhlLHQsbixyKT0+e2NvbnN0IGk9YXdhaXQgcmUoZSx0LG4saWUociwwLE9bdF0pKSxvPWllKHIsT1t0XSk7aWYoaVswXSE9b1swXXx8aVsxXSE9b1sxXSl0aHJvdyBuZXcgcyhWKX0pKG4sYyxyLGllKGUsMCxPW2NdKzIpKSxlPWllKGUsT1tjXSsyKSxvP3QuZXJyb3IobmV3IHMoUikpOmYoKSk6YXdhaXQgYTtjb25zdCBsPW5ldyBpKGUubGVuZ3RoLVctKGUubGVuZ3RoLVcpJUUpO3QuZW5xdWV1ZShuZShuLGUsbCwwLFcsITApKX0sYXN5bmMgZmx1c2goZSl7Y29uc3R7c2lnbmVkOnQsWTpuLFo6cixwZW5kaW5nOm8scmVhZHk6Y309dGhpcztpZihyJiZuKXthd2FpdCBjO2NvbnN0IGY9aWUobywwLG8ubGVuZ3RoLVcpLGE9aWUobyxvLmxlbmd0aC1XKTtsZXQgbD1uZXcgaTtpZihmLmxlbmd0aCl7Y29uc3QgZT1jZShKLGYpO3IudXBkYXRlKGUpO2NvbnN0IHQ9bi51cGRhdGUoZSk7bD1vZShKLHQpfWlmKHQpe2NvbnN0IGU9aWUob2UoSixyLmRpZ2VzdCgpKSwwLFcpO2ZvcihsZXQgdD0wO1c+dDt0KyspaWYoZVt0XSE9YVt0XSl0aHJvdyBuZXcgcyhQKX1lLmVucXVldWUobCl9fX0pfX1jbGFzcyB0ZSBleHRlbmRzIHB7Y29uc3RydWN0b3Ioe3Bhc3N3b3JkOmUsZW5jcnlwdGlvblN0cmVuZ3RoOm59KXtsZXQgcjtzdXBlcih7c3RhcnQoKXt0LmFzc2lnbih0aGlzLHtyZWFkeTpuZXcgdSgoZT0+dGhpcy5KPWUpKSxwYXNzd29yZDplLFg6bi0xLHBlbmRpbmc6bmV3IGl9KX0sYXN5bmMgdHJhbnNmb3JtKGUsdCl7Y29uc3Qgbj10aGlzLHtwYXNzd29yZDpyLFg6cyxKOm8scmVhZHk6Y309bjtsZXQgZj1uZXcgaTtyPyhmPWF3YWl0KGFzeW5jKGUsdCxuKT0+e2NvbnN0IHI9QihuZXcgaShPW3RdKSk7cmV0dXJuIHNlKHIsYXdhaXQgcmUoZSx0LG4scikpfSkobixzLHIpLG8oKSk6YXdhaXQgYztjb25zdCBhPW5ldyBpKGYubGVuZ3RoK2UubGVuZ3RoLWUubGVuZ3RoJUUpO2Euc2V0KGYsMCksdC5lbnF1ZXVlKG5lKG4sZSxhLGYubGVuZ3RoLDApKX0sYXN5bmMgZmx1c2goZSl7Y29uc3R7WTp0LFo6bixwZW5kaW5nOnMscmVhZHk6b309dGhpcztpZihuJiZ0KXthd2FpdCBvO2xldCBjPW5ldyBpO2lmKHMubGVuZ3RoKXtjb25zdCBlPXQudXBkYXRlKGNlKEoscykpO24udXBkYXRlKGUpLGM9b2UoSixlKX1yLnNpZ25hdHVyZT1vZShKLG4uZGlnZXN0KCkpLnNsaWNlKDAsVyksZS5lbnF1ZXVlKHNlKGMsci5zaWduYXR1cmUpKX19fSkscj10aGlzfX1mdW5jdGlvbiBuZShlLHQsbixyLHMsbyl7Y29uc3R7WTpjLFo6ZixwZW5kaW5nOmF9PWUsbD10Lmxlbmd0aC1zO2xldCB1O2ZvcihhLmxlbmd0aCYmKHQ9c2UoYSx0KSxuPSgoZSx0KT0+e2lmKHQmJnQ+ZS5sZW5ndGgpe2NvbnN0IG49ZTsoZT1uZXcgaSh0KSkuc2V0KG4sMCl9cmV0dXJuIGV9KShuLGwtbCVFKSksdT0wO2wtRT49dTt1Kz1FKXtjb25zdCBlPWNlKEosaWUodCx1LHUrRSkpO28mJmYudXBkYXRlKGUpO2NvbnN0IHM9Yy51cGRhdGUoZSk7b3x8Zi51cGRhdGUocyksbi5zZXQob2UoSixzKSx1K3IpfXJldHVybiBlLnBlbmRpbmc9aWUodCx1KSxufWFzeW5jIGZ1bmN0aW9uIHJlKG4scixzLG8pe24ucGFzc3dvcmQ9bnVsbDtjb25zdCBjPShlPT57aWYodm9pZCAwPT09dyl7Y29uc3QgdD1uZXcgaSgoZT11bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoZSkpKS5sZW5ndGgpO2ZvcihsZXQgbj0wO248dC5sZW5ndGg7bisrKXRbbl09ZS5jaGFyQ29kZUF0KG4pO3JldHVybiB0fXJldHVybihuZXcgdykuZW5jb2RlKGUpfSkocyksZj1hd2FpdChhc3luYyhlLHQsbixyLHMpPT57aWYoIVopcmV0dXJuIEkuaW1wb3J0S2V5KHQpO3RyeXtyZXR1cm4gYXdhaXQgcS5pbXBvcnRLZXkoXCJyYXdcIix0LG4sITEscyl9Y2F0Y2goZSl7cmV0dXJuIFo9ITEsSS5pbXBvcnRLZXkodCl9fSkoMCxjLFUsMCxOKSxhPWF3YWl0KGFzeW5jKGUsdCxuKT0+e2lmKCEkKXJldHVybiBJLkIodCxlLnNhbHQsSy5pdGVyYXRpb25zLG4pO3RyeXtyZXR1cm4gYXdhaXQgcS5kZXJpdmVCaXRzKGUsdCxuKX1jYXRjaChyKXtyZXR1cm4gJD0hMSxJLkIodCxlLnNhbHQsSy5pdGVyYXRpb25zLG4pfX0pKHQuYXNzaWduKHtzYWx0Om99LEspLGYsOCooMipUW3JdKzIpKSxsPW5ldyBpKGEpLHU9Y2UoSixpZShsLDAsVFtyXSkpLGg9Y2UoSixpZShsLFRbcl0sMipUW3JdKSksZD1pZShsLDIqVFtyXSk7cmV0dXJuIHQuYXNzaWduKG4se2tleXM6e2tleTp1LCQ6aCxwYXNzd29yZFZlcmlmaWNhdGlvbjpkfSxZOm5ldyBYKG5ldyBRKHUpLGUuZnJvbShqKSksWjpuZXcgWShoKX0pLGR9ZnVuY3Rpb24gc2UoZSx0KXtsZXQgbj1lO3JldHVybiBlLmxlbmd0aCt0Lmxlbmd0aCYmKG49bmV3IGkoZS5sZW5ndGgrdC5sZW5ndGgpLG4uc2V0KGUsMCksbi5zZXQodCxlLmxlbmd0aCkpLG59ZnVuY3Rpb24gaWUoZSx0LG4pe3JldHVybiBlLnN1YmFycmF5KHQsbil9ZnVuY3Rpb24gb2UoZSx0KXtyZXR1cm4gZS5tKHQpfWZ1bmN0aW9uIGNlKGUsdCl7cmV0dXJuIGUuZyh0KX1jbGFzcyBmZSBleHRlbmRzIHB7Y29uc3RydWN0b3Ioe3Bhc3N3b3JkOmUscGFzc3dvcmRWZXJpZmljYXRpb246bixjaGVja1Bhc3N3b3JkT25seTpyfSl7c3VwZXIoe3N0YXJ0KCl7dC5hc3NpZ24odGhpcyx7cGFzc3dvcmQ6ZSxwYXNzd29yZFZlcmlmaWNhdGlvbjpufSksd2UodGhpcyxlKX0sdHJhbnNmb3JtKGUsdCl7Y29uc3Qgbj10aGlzO2lmKG4ucGFzc3dvcmQpe2NvbnN0IHQ9bGUobixlLnN1YmFycmF5KDAsMTIpKTtpZihuLnBhc3N3b3JkPW51bGwsdFsxMV0hPW4ucGFzc3dvcmRWZXJpZmljYXRpb24pdGhyb3cgbmV3IHMoVik7ZT1lLnN1YmFycmF5KDEyKX1yP3QuZXJyb3IobmV3IHMoUikpOnQuZW5xdWV1ZShsZShuLGUpKX19KX19Y2xhc3MgYWUgZXh0ZW5kcyBwe2NvbnN0cnVjdG9yKHtwYXNzd29yZDplLHBhc3N3b3JkVmVyaWZpY2F0aW9uOm59KXtzdXBlcih7c3RhcnQoKXt0LmFzc2lnbih0aGlzLHtwYXNzd29yZDplLHBhc3N3b3JkVmVyaWZpY2F0aW9uOm59KSx3ZSh0aGlzLGUpfSx0cmFuc2Zvcm0oZSx0KXtjb25zdCBuPXRoaXM7bGV0IHIscztpZihuLnBhc3N3b3JkKXtuLnBhc3N3b3JkPW51bGw7Y29uc3QgdD1CKG5ldyBpKDEyKSk7dFsxMV09bi5wYXNzd29yZFZlcmlmaWNhdGlvbixyPW5ldyBpKGUubGVuZ3RoK3QubGVuZ3RoKSxyLnNldCh1ZShuLHQpLDApLHM9MTJ9ZWxzZSByPW5ldyBpKGUubGVuZ3RoKSxzPTA7ci5zZXQodWUobixlKSxzKSx0LmVucXVldWUocil9fSl9fWZ1bmN0aW9uIGxlKGUsdCl7Y29uc3Qgbj1uZXcgaSh0Lmxlbmd0aCk7Zm9yKGxldCByPTA7cjx0Lmxlbmd0aDtyKyspbltyXT1kZShlKV50W3JdLGhlKGUsbltyXSk7cmV0dXJuIG59ZnVuY3Rpb24gdWUoZSx0KXtjb25zdCBuPW5ldyBpKHQubGVuZ3RoKTtmb3IobGV0IHI9MDtyPHQubGVuZ3RoO3IrKyluW3JdPWRlKGUpXnRbcl0saGUoZSx0W3JdKTtyZXR1cm4gbn1mdW5jdGlvbiB3ZShlLG4pe2NvbnN0IHI9WzMwNTQxOTg5Niw1OTE3NTEwNDksODc4MDgyMTkyXTt0LmFzc2lnbihlLHtrZXlzOnIsZWU6bmV3IFMoclswXSksdGU6bmV3IFMoclsyXSl9KTtmb3IobGV0IHQ9MDt0PG4ubGVuZ3RoO3QrKyloZShlLG4uY2hhckNvZGVBdCh0KSl9ZnVuY3Rpb24gaGUoZSx0KXtsZXRbbixzLGldPWUua2V5cztlLmVlLmFwcGVuZChbdF0pLG49fmUuZWUuZ2V0KCkscz15ZShyLmltdWwoeWUocytwZShuKSksMTM0Nzc1ODEzKSsxKSxlLnRlLmFwcGVuZChbcz4+PjI0XSksaT1+ZS50ZS5nZXQoKSxlLmtleXM9W24scyxpXX1mdW5jdGlvbiBkZShlKXtjb25zdCB0PTJ8ZS5rZXlzWzJdO3JldHVybiBwZShyLmltdWwodCwxXnQpPj4+OCl9ZnVuY3Rpb24gcGUoZSl7cmV0dXJuIDI1NSZlfWZ1bmN0aW9uIHllKGUpe3JldHVybiA0Mjk0OTY3Mjk1JmV9Y29uc3QgbWU9XCJkZWZsYXRlLXJhd1wiO2NsYXNzIGJlIGV4dGVuZHMgcHtjb25zdHJ1Y3RvcihlLHtjaHVua1NpemU6dCxDb21wcmVzc2lvblN0cmVhbTpuLENvbXByZXNzaW9uU3RyZWFtTmF0aXZlOnJ9KXtzdXBlcih7fSk7Y29uc3R7Y29tcHJlc3NlZDpzLGVuY3J5cHRlZDppLHVzZUNvbXByZXNzaW9uU3RyZWFtOm8semlwQ3J5cHRvOmMsc2lnbmVkOmYsbGV2ZWw6YX09ZSx1PXRoaXM7bGV0IHcsaCxkPWtlKHN1cGVyLnJlYWRhYmxlKTtpJiYhY3x8IWZ8fCh3PW5ldyB6LGQ9emUoZCx3KSkscyYmKGQ9U2UoZCxvLHtsZXZlbDphLGNodW5rU2l6ZTp0fSxyLG4pKSxpJiYoYz9kPXplKGQsbmV3IGFlKGUpKTooaD1uZXcgdGUoZSksZD16ZShkLGgpKSksdmUodSxkLCgoKT0+e2xldCBlO2kmJiFjJiYoZT1oLnNpZ25hdHVyZSksaSYmIWN8fCFmfHwoZT1uZXcgbCh3LnZhbHVlLmJ1ZmZlcikuZ2V0VWludDMyKDApKSx1LnNpZ25hdHVyZT1lfSkpfX1jbGFzcyBnZSBleHRlbmRzIHB7Y29uc3RydWN0b3IoZSx7Y2h1bmtTaXplOnQsRGVjb21wcmVzc2lvblN0cmVhbTpuLERlY29tcHJlc3Npb25TdHJlYW1OYXRpdmU6cn0pe3N1cGVyKHt9KTtjb25zdHt6aXBDcnlwdG86aSxlbmNyeXB0ZWQ6byxzaWduZWQ6YyxzaWduYXR1cmU6Zixjb21wcmVzc2VkOmEsdXNlQ29tcHJlc3Npb25TdHJlYW06dX09ZTtsZXQgdyxoLGQ9a2Uoc3VwZXIucmVhZGFibGUpO28mJihpP2Q9emUoZCxuZXcgZmUoZSkpOihoPW5ldyBlZShlKSxkPXplKGQsaCkpKSxhJiYoZD1TZShkLHUse2NodW5rU2l6ZTp0fSxyLG4pKSxvJiYhaXx8IWN8fCh3PW5ldyB6LGQ9emUoZCx3KSksdmUodGhpcyxkLCgoKT0+e2lmKCghb3x8aSkmJmMpe2NvbnN0IGU9bmV3IGwody52YWx1ZS5idWZmZXIpO2lmKGYhPWUuZ2V0VWludDMyKDAsITEpKXRocm93IG5ldyBzKFApfX0pKX19ZnVuY3Rpb24ga2UoZSl7cmV0dXJuIHplKGUsbmV3IHAoe3RyYW5zZm9ybShlLHQpe2UmJmUubGVuZ3RoJiZ0LmVucXVldWUoZSl9fSkpfWZ1bmN0aW9uIHZlKGUsbixyKXtuPXplKG4sbmV3IHAoe2ZsdXNoOnJ9KSksdC5kZWZpbmVQcm9wZXJ0eShlLFwicmVhZGFibGVcIix7Z2V0OigpPT5ufSl9ZnVuY3Rpb24gU2UoZSx0LG4scixzKXt0cnl7ZT16ZShlLG5ldyh0JiZyP3I6cykobWUsbikpfWNhdGNoKHIpe2lmKCF0KXRocm93IHI7ZT16ZShlLG5ldyBzKG1lLG4pKX1yZXR1cm4gZX1mdW5jdGlvbiB6ZShlLHQpe3JldHVybiBlLnBpcGVUaHJvdWdoKHQpfWNvbnN0IENlPVwiZGF0YVwiO2NsYXNzIHhlIGV4dGVuZHMgcHtjb25zdHJ1Y3RvcihlLG4pe3N1cGVyKHt9KTtjb25zdCByPXRoaXMse2NvZGVjVHlwZTpzfT1lO2xldCBpO3Muc3RhcnRzV2l0aChcImRlZmxhdGVcIik/aT1iZTpzLnN0YXJ0c1dpdGgoXCJpbmZsYXRlXCIpJiYoaT1nZSk7bGV0IG89MDtjb25zdCBjPW5ldyBpKGUsbiksZj1zdXBlci5yZWFkYWJsZSxhPW5ldyBwKHt0cmFuc2Zvcm0oZSx0KXtlJiZlLmxlbmd0aCYmKG8rPWUubGVuZ3RoLHQuZW5xdWV1ZShlKSl9LGZsdXNoKCl7Y29uc3R7c2lnbmF0dXJlOmV9PWM7dC5hc3NpZ24ocix7c2lnbmF0dXJlOmUsc2l6ZTpvfSl9fSk7dC5kZWZpbmVQcm9wZXJ0eShyLFwicmVhZGFibGVcIix7Z2V0OigpPT5mLnBpcGVUaHJvdWdoKGMpLnBpcGVUaHJvdWdoKGEpfSl9fWNvbnN0IF9lPW5ldyBhLEFlPW5ldyBhO2xldCBJZT0wO2FzeW5jIGZ1bmN0aW9uIERlKGUpe3RyeXtjb25zdHtvcHRpb25zOnQsc2NyaXB0czpyLGNvbmZpZzpzfT1lO3ImJnIubGVuZ3RoJiZpbXBvcnRTY3JpcHRzLmFwcGx5KHZvaWQgMCxyKSxzZWxmLmluaXRDb2RlYyYmc2VsZi5pbml0Q29kZWMoKSxzLkNvbXByZXNzaW9uU3RyZWFtTmF0aXZlPXNlbGYuQ29tcHJlc3Npb25TdHJlYW0scy5EZWNvbXByZXNzaW9uU3RyZWFtTmF0aXZlPXNlbGYuRGVjb21wcmVzc2lvblN0cmVhbSxzZWxmLkRlZmxhdGUmJihzLkNvbXByZXNzaW9uU3RyZWFtPW5ldyBrKHNlbGYuRGVmbGF0ZSkpLHNlbGYuSW5mbGF0ZSYmKHMuRGVjb21wcmVzc2lvblN0cmVhbT1uZXcgayhzZWxmLkluZmxhdGUpKTtjb25zdCBpPXtoaWdoV2F0ZXJNYXJrOjEsc2l6ZTooKT0+cy5jaHVua1NpemV9LG89ZS5yZWFkYWJsZXx8bmV3IHkoe2FzeW5jIHB1bGwoZSl7Y29uc3QgdD1uZXcgdSgoZT0+X2Uuc2V0KEllLGUpKSk7VmUoe3R5cGU6XCJwdWxsXCIsbWVzc2FnZUlkOkllfSksSWU9KEllKzEpJW4uTUFYX1NBRkVfSU5URUdFUjtjb25zdHt2YWx1ZTpyLGRvbmU6c309YXdhaXQgdDtlLmVucXVldWUocikscyYmZS5jbG9zZSgpfX0saSksYz1lLndyaXRhYmxlfHxuZXcgbSh7YXN5bmMgd3JpdGUoZSl7bGV0IHQ7Y29uc3Qgcj1uZXcgdSgoZT0+dD1lKSk7QWUuc2V0KEllLHQpLFZlKHt0eXBlOkNlLHZhbHVlOmUsbWVzc2FnZUlkOkllfSksSWU9KEllKzEpJW4uTUFYX1NBRkVfSU5URUdFUixhd2FpdCByfX0saSksZj1uZXcgeGUodCxzKTthd2FpdCBvLnBpcGVUaHJvdWdoKGYpLnBpcGVUbyhjLHtwcmV2ZW50Q2xvc2U6ITAscHJldmVudEFib3J0OiEwfSk7dHJ5e2F3YWl0IGMuZ2V0V3JpdGVyKCkuY2xvc2UoKX1jYXRjaChlKXt9Y29uc3R7c2lnbmF0dXJlOmEsc2l6ZTpsfT1mO1ZlKHt0eXBlOlwiY2xvc2VcIixyZXN1bHQ6e3NpZ25hdHVyZTphLHNpemU6bH19KX1jYXRjaChlKXtQZShlKX19ZnVuY3Rpb24gVmUoZSl7bGV0e3ZhbHVlOnR9PWU7aWYodClpZih0Lmxlbmd0aCl0cnl7dD1uZXcgaSh0KSxlLnZhbHVlPXQuYnVmZmVyLGQoZSxbZS52YWx1ZV0pfWNhdGNoKHQpe2QoZSl9ZWxzZSBkKGUpO2Vsc2UgZChlKX1mdW5jdGlvbiBQZShlPW5ldyBzKFwiVW5rbm93biBlcnJvclwiKSl7Y29uc3R7bWVzc2FnZTp0LHN0YWNrOm4sY29kZTpyLG5hbWU6aX09ZTtkKHtlcnJvcjp7bWVzc2FnZTp0LHN0YWNrOm4sY29kZTpyLG5hbWU6aX19KX1hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCgoe2RhdGE6ZX0pPT57Y29uc3R7dHlwZTp0LG1lc3NhZ2VJZDpuLHZhbHVlOnIsZG9uZTpzfT1lO3RyeXtpZihcInN0YXJ0XCI9PXQmJkRlKGUpLHQ9PUNlKXtjb25zdCBlPV9lLmdldChuKTtfZS5kZWxldGUobiksZSh7dmFsdWU6bmV3IGkociksZG9uZTpzfSl9aWYoXCJhY2tcIj09dCl7Y29uc3QgZT1BZS5nZXQobik7QWUuZGVsZXRlKG4pLGUoKX19Y2F0Y2goZSl7UGUoZSl9fSkpO2NvbnN0IFJlPS0yO2Z1bmN0aW9uIEJlKHQpe3JldHVybiBFZSh0Lm1hcCgoKFt0LG5dKT0+bmV3IGUodCkuZmlsbChuLDAsdCkpKSl9ZnVuY3Rpb24gRWUodCl7cmV0dXJuIHQucmVkdWNlKCgodCxuKT0+dC5jb25jYXQoZS5pc0FycmF5KG4pP0VlKG4pOm4pKSxbXSl9Y29uc3QgTWU9WzAsMSwyLDNdLmNvbmNhdCguLi5CZShbWzIsNF0sWzIsNV0sWzQsNl0sWzQsN10sWzgsOF0sWzgsOV0sWzE2LDEwXSxbMTYsMTFdLFszMiwxMl0sWzMyLDEzXSxbNjQsMTRdLFs2NCwxNV0sWzIsMF0sWzEsMTZdLFsxLDE3XSxbMiwxOF0sWzIsMTldLFs0LDIwXSxbNCwyMV0sWzgsMjJdLFs4LDIzXSxbMTYsMjRdLFsxNiwyNV0sWzMyLDI2XSxbMzIsMjddLFs2NCwyOF0sWzY0LDI5XV0pKTtmdW5jdGlvbiBVZSgpe2NvbnN0IGU9dGhpcztmdW5jdGlvbiB0KGUsdCl7bGV0IG49MDtkb3tufD0xJmUsZT4+Pj0xLG48PD0xfXdoaWxlKC0tdD4wKTtyZXR1cm4gbj4+PjF9ZS5uZT1uPT57Y29uc3Qgcz1lLnJlLGk9ZS5pZS5zZSxvPWUuaWUub2U7bGV0IGMsZixhLGw9LTE7Zm9yKG4uY2U9MCxuLmZlPTU3MyxjPTA7bz5jO2MrKykwIT09c1syKmNdPyhuLmFlWysrbi5jZV09bD1jLG4ubGVbY109MCk6c1syKmMrMV09MDtmb3IoOzI+bi5jZTspYT1uLmFlWysrbi5jZV09Mj5sPysrbDowLHNbMiphXT0xLG4ubGVbYV09MCxuLnVlLS0saSYmKG4ud2UtPWlbMiphKzFdKTtmb3IoZS5oZT1sLGM9ci5mbG9vcihuLmNlLzIpO2M+PTE7Yy0tKW4uZGUocyxjKTthPW87ZG97Yz1uLmFlWzFdLG4uYWVbMV09bi5hZVtuLmNlLS1dLG4uZGUocywxKSxmPW4uYWVbMV0sbi5hZVstLW4uZmVdPWMsbi5hZVstLW4uZmVdPWYsc1syKmFdPXNbMipjXStzWzIqZl0sbi5sZVthXT1yLm1heChuLmxlW2NdLG4ubGVbZl0pKzEsc1syKmMrMV09c1syKmYrMV09YSxuLmFlWzFdPWErKyxuLmRlKHMsMSl9d2hpbGUobi5jZT49Mik7bi5hZVstLW4uZmVdPW4uYWVbMV0sKHQ9Pntjb25zdCBuPWUucmUscj1lLmllLnNlLHM9ZS5pZS5wZSxpPWUuaWUueWUsbz1lLmllLm1lO2xldCBjLGYsYSxsLHUsdyxoPTA7Zm9yKGw9MDsxNT49bDtsKyspdC5iZVtsXT0wO2ZvcihuWzIqdC5hZVt0LmZlXSsxXT0wLGM9dC5mZSsxOzU3Mz5jO2MrKylmPXQuYWVbY10sbD1uWzIqblsyKmYrMV0rMV0rMSxsPm8mJihsPW8saCsrKSxuWzIqZisxXT1sLGY+ZS5oZXx8KHQuYmVbbF0rKyx1PTAsaT5mfHwodT1zW2YtaV0pLHc9blsyKmZdLHQudWUrPXcqKGwrdSksciYmKHQud2UrPXcqKHJbMipmKzFdK3UpKSk7aWYoMCE9PWgpe2Rve2ZvcihsPW8tMTswPT09dC5iZVtsXTspbC0tO3QuYmVbbF0tLSx0LmJlW2wrMV0rPTIsdC5iZVtvXS0tLGgtPTJ9d2hpbGUoaD4wKTtmb3IobD1vOzAhPT1sO2wtLSlmb3IoZj10LmJlW2xdOzAhPT1mOylhPXQuYWVbLS1jXSxhPmUuaGV8fChuWzIqYSsxXSE9bCYmKHQudWUrPShsLW5bMiphKzFdKSpuWzIqYV0sblsyKmErMV09bCksZi0tKX19KShuKSwoKGUsbixyKT0+e2NvbnN0IHM9W107bGV0IGksbyxjLGY9MDtmb3IoaT0xOzE1Pj1pO2krKylzW2ldPWY9ZityW2ktMV08PDE7Zm9yKG89MDtuPj1vO28rKyljPWVbMipvKzFdLDAhPT1jJiYoZVsyKm9dPXQoc1tjXSsrLGMpKX0pKHMsZS5oZSxuLmJlKX19ZnVuY3Rpb24gS2UoZSx0LG4scixzKXtjb25zdCBpPXRoaXM7aS5zZT1lLGkucGU9dCxpLnllPW4saS5vZT1yLGkubWU9c31VZS5nZT1bMCwxLDIsMyw0LDUsNiw3XS5jb25jYXQoLi4uQmUoW1syLDhdLFsyLDldLFsyLDEwXSxbMiwxMV0sWzQsMTJdLFs0LDEzXSxbNCwxNF0sWzQsMTVdLFs4LDE2XSxbOCwxN10sWzgsMThdLFs4LDE5XSxbMTYsMjBdLFsxNiwyMV0sWzE2LDIyXSxbMTYsMjNdLFszMiwyNF0sWzMyLDI1XSxbMzIsMjZdLFszMSwyN10sWzEsMjhdXSkpLFVlLmtlPVswLDEsMiwzLDQsNSw2LDcsOCwxMCwxMiwxNCwxNiwyMCwyNCwyOCwzMiw0MCw0OCw1Niw2NCw4MCw5NiwxMTIsMTI4LDE2MCwxOTIsMjI0LDBdLFVlLnZlPVswLDEsMiwzLDQsNiw4LDEyLDE2LDI0LDMyLDQ4LDY0LDk2LDEyOCwxOTIsMjU2LDM4NCw1MTIsNzY4LDEwMjQsMTUzNiwyMDQ4LDMwNzIsNDA5Niw2MTQ0LDgxOTIsMTIyODgsMTYzODQsMjQ1NzZdLFVlLlNlPWU9PjI1Nj5lP01lW2VdOk1lWzI1NisoZT4+PjcpXSxVZS56ZT1bMCwwLDAsMCwwLDAsMCwwLDEsMSwxLDEsMiwyLDIsMiwzLDMsMywzLDQsNCw0LDQsNSw1LDUsNSwwXSxVZS5DZT1bMCwwLDAsMCwxLDEsMiwyLDMsMyw0LDQsNSw1LDYsNiw3LDcsOCw4LDksOSwxMCwxMCwxMSwxMSwxMiwxMiwxMywxM10sVWUueGU9WzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMiwzLDddLFVlLl9lPVsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XTtjb25zdCBOZT1CZShbWzE0NCw4XSxbMTEyLDldLFsyNCw3XSxbOCw4XV0pO0tlLkFlPUVlKFsxMiwxNDAsNzYsMjA0LDQ0LDE3MiwxMDgsMjM2LDI4LDE1Niw5MiwyMjAsNjAsMTg4LDEyNCwyNTIsMiwxMzAsNjYsMTk0LDM0LDE2Miw5OCwyMjYsMTgsMTQ2LDgyLDIxMCw1MCwxNzgsMTE0LDI0MiwxMCwxMzgsNzQsMjAyLDQyLDE3MCwxMDYsMjM0LDI2LDE1NCw5MCwyMTgsNTgsMTg2LDEyMiwyNTAsNiwxMzQsNzAsMTk4LDM4LDE2NiwxMDIsMjMwLDIyLDE1MCw4NiwyMTQsNTQsMTgyLDExOCwyNDYsMTQsMTQyLDc4LDIwNiw0NiwxNzQsMTEwLDIzOCwzMCwxNTgsOTQsMjIyLDYyLDE5MCwxMjYsMjU0LDEsMTI5LDY1LDE5MywzMywxNjEsOTcsMjI1LDE3LDE0NSw4MSwyMDksNDksMTc3LDExMywyNDEsOSwxMzcsNzMsMjAxLDQxLDE2OSwxMDUsMjMzLDI1LDE1Myw4OSwyMTcsNTcsMTg1LDEyMSwyNDksNSwxMzMsNjksMTk3LDM3LDE2NSwxMDEsMjI5LDIxLDE0OSw4NSwyMTMsNTMsMTgxLDExNywyNDUsMTMsMTQxLDc3LDIwNSw0NSwxNzMsMTA5LDIzNywyOSwxNTcsOTMsMjIxLDYxLDE4OSwxMjUsMjUzLDE5LDI3NSwxNDcsNDAzLDgzLDMzOSwyMTEsNDY3LDUxLDMwNywxNzksNDM1LDExNSwzNzEsMjQzLDQ5OSwxMSwyNjcsMTM5LDM5NSw3NSwzMzEsMjAzLDQ1OSw0MywyOTksMTcxLDQyNywxMDcsMzYzLDIzNSw0OTEsMjcsMjgzLDE1NSw0MTEsOTEsMzQ3LDIxOSw0NzUsNTksMzE1LDE4Nyw0NDMsMTIzLDM3OSwyNTEsNTA3LDcsMjYzLDEzNSwzOTEsNzEsMzI3LDE5OSw0NTUsMzksMjk1LDE2Nyw0MjMsMTAzLDM1OSwyMzEsNDg3LDIzLDI3OSwxNTEsNDA3LDg3LDM0MywyMTUsNDcxLDU1LDMxMSwxODMsNDM5LDExOSwzNzUsMjQ3LDUwMywxNSwyNzEsMTQzLDM5OSw3OSwzMzUsMjA3LDQ2Myw0NywzMDMsMTc1LDQzMSwxMTEsMzY3LDIzOSw0OTUsMzEsMjg3LDE1OSw0MTUsOTUsMzUxLDIyMyw0NzksNjMsMzE5LDE5MSw0NDcsMTI3LDM4MywyNTUsNTExLDAsNjQsMzIsOTYsMTYsODAsNDgsMTEyLDgsNzIsNDAsMTA0LDI0LDg4LDU2LDEyMCw0LDY4LDM2LDEwMCwyMCw4NCw1MiwxMTYsMywxMzEsNjcsMTk1LDM1LDE2Myw5OSwyMjddLm1hcCgoKGUsdCk9PltlLE5lW3RdXSkpKTtjb25zdCBPZT1CZShbWzMwLDVdXSk7ZnVuY3Rpb24gVGUoZSx0LG4scixzKXtjb25zdCBpPXRoaXM7aS5JZT1lLGkuRGU9dCxpLlZlPW4saS5QZT1yLGkuUmU9c31LZS5CZT1FZShbMCwxNiw4LDI0LDQsMjAsMTIsMjgsMiwxOCwxMCwyNiw2LDIyLDE0LDMwLDEsMTcsOSwyNSw1LDIxLDEzLDI5LDMsMTksMTEsMjcsNywyM10ubWFwKCgoZSx0KT0+W2UsT2VbdF1dKSkpLEtlLkVlPW5ldyBLZShLZS5BZSxVZS56ZSwyNTcsMjg2LDE1KSxLZS5NZT1uZXcgS2UoS2UuQmUsVWUuQ2UsMCwzMCwxNSksS2UuVWU9bmV3IEtlKG51bGwsVWUueGUsMCwxOSw3KTtjb25zdCBXZT1bbmV3IFRlKDAsMCwwLDAsMCksbmV3IFRlKDQsNCw4LDQsMSksbmV3IFRlKDQsNSwxNiw4LDEpLG5ldyBUZSg0LDYsMzIsMzIsMSksbmV3IFRlKDQsNCwxNiwxNiwyKSxuZXcgVGUoOCwxNiwzMiwzMiwyKSxuZXcgVGUoOCwxNiwxMjgsMTI4LDIpLG5ldyBUZSg4LDMyLDEyOCwyNTYsMiksbmV3IFRlKDMyLDEyOCwyNTgsMTAyNCwyKSxuZXcgVGUoMzIsMjU4LDI1OCw0MDk2LDIpXSxqZT1bXCJuZWVkIGRpY3Rpb25hcnlcIixcInN0cmVhbSBlbmRcIixcIlwiLFwiXCIsXCJzdHJlYW0gZXJyb3JcIixcImRhdGEgZXJyb3JcIixcIlwiLFwiYnVmZmVyIGVycm9yXCIsXCJcIixcIlwiXSxIZT0xMTMsTGU9NjY2LEZlPTI2MjtmdW5jdGlvbiBxZShlLHQsbixyKXtjb25zdCBzPWVbMip0XSxpPWVbMipuXTtyZXR1cm4gaT5zfHxzPT1pJiZyW3RdPD1yW25dfWZ1bmN0aW9uIEdlKCl7Y29uc3QgZT10aGlzO2xldCB0LG4scyxjLGYsYSxsLHUsdyxoLGQscCx5LG0sYixnLGssdixTLHosQyx4LF8sQSxJLEQsVixQLFIsQixFLE0sVTtjb25zdCBLPW5ldyBVZSxOPW5ldyBVZSxPPW5ldyBVZTtsZXQgVCxXLGosSCxMLEY7ZnVuY3Rpb24gcSgpe2xldCB0O2Zvcih0PTA7Mjg2PnQ7dCsrKUVbMip0XT0wO2Zvcih0PTA7MzA+dDt0KyspTVsyKnRdPTA7Zm9yKHQ9MDsxOT50O3QrKylVWzIqdF09MDtFWzUxMl09MSxlLnVlPWUud2U9MCxXPWo9MH1mdW5jdGlvbiBHKGUsdCl7bGV0IG4scj0tMSxzPWVbMV0saT0wLG89NyxjPTQ7MD09PXMmJihvPTEzOCxjPTMpLGVbMioodCsxKSsxXT02NTUzNTtmb3IobGV0IGY9MDt0Pj1mO2YrKyluPXMscz1lWzIqKGYrMSkrMV0sKytpPG8mJm49PXN8fChjPmk/VVsyKm5dKz1pOjAhPT1uPyhuIT1yJiZVWzIqbl0rKyxVWzMyXSsrKTppPjEwP1VbMzZdKys6VVszNF0rKyxpPTAscj1uLDA9PT1zPyhvPTEzOCxjPTMpOm49PXM/KG89NixjPTMpOihvPTcsYz00KSl9ZnVuY3Rpb24gSih0KXtlLktlW2UucGVuZGluZysrXT10fWZ1bmN0aW9uIFEoZSl7SigyNTUmZSksSihlPj4+OCYyNTUpfWZ1bmN0aW9uIFgoZSx0KXtsZXQgbjtjb25zdCByPXQ7Rj4xNi1yPyhuPWUsTHw9bjw8RiY2NTUzNSxRKEwpLEw9bj4+PjE2LUYsRis9ci0xNik6KEx8PWU8PEYmNjU1MzUsRis9cil9ZnVuY3Rpb24gWShlLHQpe2NvbnN0IG49MiplO1goNjU1MzUmdFtuXSw2NTUzNSZ0W24rMV0pfWZ1bmN0aW9uIFooZSx0KXtsZXQgbixyLHM9LTEsaT1lWzFdLG89MCxjPTcsZj00O2ZvcigwPT09aSYmKGM9MTM4LGY9Myksbj0wO3Q+PW47bisrKWlmKHI9aSxpPWVbMioobisxKSsxXSwrK28+PWN8fHIhPWkpe2lmKGY+bylkb3tZKHIsVSl9d2hpbGUoMCE9LS1vKTtlbHNlIDAhPT1yPyhyIT1zJiYoWShyLFUpLG8tLSksWSgxNixVKSxYKG8tMywyKSk6bz4xMD8oWSgxOCxVKSxYKG8tMTEsNykpOihZKDE3LFUpLFgoby0zLDMpKTtvPTAscz1yLDA9PT1pPyhjPTEzOCxmPTMpOnI9PWk/KGM9NixmPTMpOihjPTcsZj00KX19ZnVuY3Rpb24gJCgpezE2PT1GPyhRKEwpLEw9MCxGPTApOjg+Rnx8KEooMjU1JkwpLEw+Pj49OCxGLT04KX1mdW5jdGlvbiBlZSh0LG4pe2xldCBzLGksbztpZihlLk5lW1ddPXQsZS5PZVtXXT0yNTUmbixXKyssMD09PXQ/RVsyKm5dKys6KGorKyx0LS0sRVsyKihVZS5nZVtuXSsyNTYrMSldKyssTVsyKlVlLlNlKHQpXSsrKSwwPT0oODE5MSZXKSYmVj4yKXtmb3Iocz04KlcsaT1DLWssbz0wOzMwPm87bysrKXMrPU1bMipvXSooNStVZS5DZVtvXSk7aWYocz4+Pj0zLGo8ci5mbG9vcihXLzIpJiZzPHIuZmxvb3IoaS8yKSlyZXR1cm4hMH1yZXR1cm4gVz09VC0xfWZ1bmN0aW9uIHRlKHQsbil7bGV0IHIscyxpLG8sYz0wO2lmKDAhPT1XKWRve3I9ZS5OZVtjXSxzPWUuT2VbY10sYysrLDA9PT1yP1kocyx0KTooaT1VZS5nZVtzXSxZKGkrMjU2KzEsdCksbz1VZS56ZVtpXSwwIT09byYmKHMtPVVlLmtlW2ldLFgocyxvKSksci0tLGk9VWUuU2UociksWShpLG4pLG89VWUuQ2VbaV0sMCE9PW8mJihyLT1VZS52ZVtpXSxYKHIsbykpKX13aGlsZShXPmMpO1koMjU2LHQpLEg9dFs1MTNdfWZ1bmN0aW9uIG5lKCl7Rj44P1EoTCk6Rj4wJiZKKDI1NSZMKSxMPTAsRj0wfWZ1bmN0aW9uIHJlKHQsbixyKXtYKDArKHI/MTowKSwzKSwoKHQsbik9PntuZSgpLEg9OCxRKG4pLFEofm4pLGUuS2Uuc2V0KHUuc3ViYXJyYXkodCx0K24pLGUucGVuZGluZyksZS5wZW5kaW5nKz1ufSkodCxuKX1mdW5jdGlvbiBzZShuKXsoKHQsbixyKT0+e2xldCBzLGksbz0wO1Y+MD8oSy5uZShlKSxOLm5lKGUpLG89KCgpPT57bGV0IHQ7Zm9yKEcoRSxLLmhlKSxHKE0sTi5oZSksTy5uZShlKSx0PTE4O3Q+PTMmJjA9PT1VWzIqVWUuX2VbdF0rMV07dC0tKTtyZXR1cm4gZS51ZSs9MTQrMyoodCsxKSx0fSkoKSxzPWUudWUrMys3Pj4+MyxpPWUud2UrMys3Pj4+MyxpPnN8fChzPWkpKTpzPWk9bis1LG4rND5zfHwtMT09dD9pPT1zPyhYKDIrKHI/MTowKSwzKSx0ZShLZS5BZSxLZS5CZSkpOihYKDQrKHI/MTowKSwzKSwoKGUsdCxuKT0+e2xldCByO2ZvcihYKGUtMjU3LDUpLFgodC0xLDUpLFgobi00LDQpLHI9MDtuPnI7cisrKVgoVVsyKlVlLl9lW3JdKzFdLDMpO1ooRSxlLTEpLFooTSx0LTEpfSkoSy5oZSsxLE4uaGUrMSxvKzEpLHRlKEUsTSkpOnJlKHQsbixyKSxxKCksciYmbmUoKX0pKDA+az8tMTprLEMtayxuKSxrPUMsdC5UZSgpfWZ1bmN0aW9uIGllKCl7bGV0IGUsbixyLHM7ZG97aWYocz13LV8tQywwPT09cyYmMD09PUMmJjA9PT1fKXM9ZjtlbHNlIGlmKC0xPT1zKXMtLTtlbHNlIGlmKEM+PWYrZi1GZSl7dS5zZXQodS5zdWJhcnJheShmLGYrZiksMCkseC09ZixDLT1mLGstPWYsZT15LHI9ZTtkb3tuPTY1NTM1JmRbLS1yXSxkW3JdPWY+bj8wOm4tZn13aGlsZSgwIT0tLWUpO2U9ZixyPWU7ZG97bj02NTUzNSZoWy0tcl0saFtyXT1mPm4/MDpuLWZ9d2hpbGUoMCE9LS1lKTtzKz1mfWlmKDA9PT10LldlKXJldHVybjtlPXQuamUodSxDK18scyksXys9ZSwzPl98fChwPTI1NSZ1W0NdLHA9KHA8PGdeMjU1JnVbQysxXSkmYil9d2hpbGUoRmU+XyYmMCE9PXQuV2UpfWZ1bmN0aW9uIG9lKGUpe2xldCB0LG4scj1JLHM9QyxpPUE7Y29uc3Qgbz1DPmYtRmU/Qy0oZi1GZSk6MDtsZXQgYz1CO2NvbnN0IGE9bCx3PUMrMjU4O2xldCBkPXVbcytpLTFdLHA9dVtzK2ldO1I+QXx8KHI+Pj0yKSxjPl8mJihjPV8pO2Rve2lmKHQ9ZSx1W3QraV09PXAmJnVbdCtpLTFdPT1kJiZ1W3RdPT11W3NdJiZ1WysrdF09PXVbcysxXSl7cys9Mix0Kys7ZG97fXdoaWxlKHVbKytzXT09dVsrK3RdJiZ1Wysrc109PXVbKyt0XSYmdVsrK3NdPT11WysrdF0mJnVbKytzXT09dVsrK3RdJiZ1Wysrc109PXVbKyt0XSYmdVsrK3NdPT11WysrdF0mJnVbKytzXT09dVsrK3RdJiZ1Wysrc109PXVbKyt0XSYmdz5zKTtpZihuPTI1OC0ody1zKSxzPXctMjU4LG4+aSl7aWYoeD1lLGk9bixuPj1jKWJyZWFrO2Q9dVtzK2ktMV0scD11W3MraV19fX13aGlsZSgoZT02NTUzNSZoW2UmYV0pPm8mJjAhPS0tcik7cmV0dXJuIGk+Xz9fOml9ZS5sZT1bXSxlLmJlPVtdLGUuYWU9W10sRT1bXSxNPVtdLFU9W10sZS5kZT0odCxuKT0+e2NvbnN0IHI9ZS5hZSxzPXJbbl07bGV0IGk9bjw8MTtmb3IoO2k8PWUuY2UmJihpPGUuY2UmJnFlKHQscltpKzFdLHJbaV0sZS5sZSkmJmkrKywhcWUodCxzLHJbaV0sZS5sZSkpOylyW25dPXJbaV0sbj1pLGk8PD0xO3Jbbl09c30sZS5IZT0odCxTLHgsVyxqLEcpPT4oV3x8KFc9OCksanx8KGo9OCksR3x8KEc9MCksdC5MZT1udWxsLC0xPT1TJiYoUz02KSwxPmp8fGo+OXx8OCE9V3x8OT54fHx4PjE1fHwwPlN8fFM+OXx8MD5HfHxHPjI/UmU6KHQuRmU9ZSxhPXgsZj0xPDxhLGw9Zi0xLG09ais3LHk9MTw8bSxiPXktMSxnPXIuZmxvb3IoKG0rMy0xKS8zKSx1PW5ldyBpKDIqZiksaD1bXSxkPVtdLFQ9MTw8ais2LGUuS2U9bmV3IGkoNCpUKSxzPTQqVCxlLk5lPW5ldyBvKFQpLGUuT2U9bmV3IGkoVCksVj1TLFA9RywodD0+KHQucWU9dC5HZT0wLHQuTGU9bnVsbCxlLnBlbmRpbmc9MCxlLkplPTAsbj1IZSxjPTAsSy5yZT1FLEsuaWU9S2UuRWUsTi5yZT1NLE4uaWU9S2UuTWUsTy5yZT1VLE8uaWU9S2UuVWUsTD0wLEY9MCxIPTgscSgpLCgoKT0+e3c9MipmLGRbeS0xXT0wO2ZvcihsZXQgZT0wO3ktMT5lO2UrKylkW2VdPTA7RD1XZVtWXS5EZSxSPVdlW1ZdLkllLEI9V2VbVl0uVmUsST1XZVtWXS5QZSxDPTAsaz0wLF89MCx2PUE9Mix6PTAscD0wfSkoKSwwKSkodCkpKSxlLlFlPSgpPT40MiE9biYmbiE9SGUmJm4hPUxlP1JlOihlLk9lPW51bGwsZS5OZT1udWxsLGUuS2U9bnVsbCxkPW51bGwsaD1udWxsLHU9bnVsbCxlLkZlPW51bGwsbj09SGU/LTM6MCksZS5YZT0oZSx0LG4pPT57bGV0IHI9MDtyZXR1cm4tMT09dCYmKHQ9NiksMD50fHx0Pjl8fDA+bnx8bj4yP1JlOihXZVtWXS5SZSE9V2VbdF0uUmUmJjAhPT1lLnFlJiYocj1lLlllKDEpKSxWIT10JiYoVj10LEQ9V2VbVl0uRGUsUj1XZVtWXS5JZSxCPVdlW1ZdLlZlLEk9V2VbVl0uUGUpLFA9bixyKX0sZS5aZT0oZSx0LHIpPT57bGV0IHMsaT1yLG89MDtpZighdHx8NDIhPW4pcmV0dXJuIFJlO2lmKDM+aSlyZXR1cm4gMDtmb3IoaT5mLUZlJiYoaT1mLUZlLG89ci1pKSx1LnNldCh0LnN1YmFycmF5KG8sbytpKSwwKSxDPWksaz1pLHA9MjU1JnVbMF0scD0ocDw8Z14yNTUmdVsxXSkmYixzPTA7aS0zPj1zO3MrKylwPShwPDxnXjI1NSZ1W3MrMl0pJmIsaFtzJmxdPWRbcF0sZFtwXT1zO3JldHVybiAwfSxlLlllPShyLGkpPT57bGV0IG8sdyxtLEksUjtpZihpPjR8fDA+aSlyZXR1cm4gUmU7aWYoIXIuJGV8fCFyLmV0JiYwIT09ci5XZXx8bj09TGUmJjQhPWkpcmV0dXJuIHIuTGU9amVbNF0sUmU7aWYoMD09PXIudHQpcmV0dXJuIHIuTGU9amVbN10sLTU7dmFyIEI7aWYodD1yLEk9YyxjPWksNDI9PW4mJih3PTgrKGEtODw8NCk8PDgsbT0oVi0xJjI1NSk+PjEsbT4zJiYobT0zKSx3fD1tPDw2LDAhPT1DJiYod3w9MzIpLHcrPTMxLXclMzEsbj1IZSxKKChCPXcpPj44JjI1NSksSigyNTUmQikpLDAhPT1lLnBlbmRpbmcpe2lmKHQuVGUoKSwwPT09dC50dClyZXR1cm4gYz0tMSwwfWVsc2UgaWYoMD09PXQuV2UmJkk+PWkmJjQhPWkpcmV0dXJuIHQuTGU9amVbN10sLTU7aWYobj09TGUmJjAhPT10LldlKXJldHVybiByLkxlPWplWzddLC01O2lmKDAhPT10LldlfHwwIT09X3x8MCE9aSYmbiE9TGUpe3N3aXRjaChSPS0xLFdlW1ZdLlJlKXtjYXNlIDA6Uj0oZT0+e2xldCBuLHI9NjU1MzU7Zm9yKHI+cy01JiYocj1zLTUpOzspe2lmKDE+PV8pe2lmKGllKCksMD09PV8mJjA9PWUpcmV0dXJuIDA7aWYoMD09PV8pYnJlYWt9aWYoQys9XyxfPTAsbj1rK3IsKDA9PT1DfHxDPj1uKSYmKF89Qy1uLEM9bixzZSghMSksMD09PXQudHQpKXJldHVybiAwO2lmKEMtaz49Zi1GZSYmKHNlKCExKSwwPT09dC50dCkpcmV0dXJuIDB9cmV0dXJuIHNlKDQ9PWUpLDA9PT10LnR0PzQ9PWU/MjowOjQ9PWU/MzoxfSkoaSk7YnJlYWs7Y2FzZSAxOlI9KGU9PntsZXQgbixyPTA7Zm9yKDs7KXtpZihGZT5fKXtpZihpZSgpLEZlPl8mJjA9PWUpcmV0dXJuIDA7aWYoMD09PV8pYnJlYWt9aWYoMz5ffHwocD0ocDw8Z14yNTUmdVtDKzJdKSZiLHI9NjU1MzUmZFtwXSxoW0MmbF09ZFtwXSxkW3BdPUMpLDA9PT1yfHwoQy1yJjY1NTM1KT5mLUZlfHwyIT1QJiYodj1vZShyKSksMz52KW49ZWUoMCwyNTUmdVtDXSksXy0tLEMrKztlbHNlIGlmKG49ZWUoQy14LHYtMyksXy09dix2PkR8fDM+XylDKz12LHY9MCxwPTI1NSZ1W0NdLHA9KHA8PGdeMjU1JnVbQysxXSkmYjtlbHNle3YtLTtkb3tDKysscD0ocDw8Z14yNTUmdVtDKzJdKSZiLHI9NjU1MzUmZFtwXSxoW0MmbF09ZFtwXSxkW3BdPUN9d2hpbGUoMCE9LS12KTtDKyt9aWYobiYmKHNlKCExKSwwPT09dC50dCkpcmV0dXJuIDB9cmV0dXJuIHNlKDQ9PWUpLDA9PT10LnR0PzQ9PWU/MjowOjQ9PWU/MzoxfSkoaSk7YnJlYWs7Y2FzZSAyOlI9KGU9PntsZXQgbixyLHM9MDtmb3IoOzspe2lmKEZlPl8pe2lmKGllKCksRmU+XyYmMD09ZSlyZXR1cm4gMDtpZigwPT09XylicmVha31pZigzPl98fChwPShwPDxnXjI1NSZ1W0MrMl0pJmIscz02NTUzNSZkW3BdLGhbQyZsXT1kW3BdLGRbcF09QyksQT12LFM9eCx2PTIsMCE9PXMmJkQ+QSYmZi1GZT49KEMtcyY2NTUzNSkmJigyIT1QJiYodj1vZShzKSksNT49diYmKDE9PVB8fDM9PXYmJkMteD40MDk2KSYmKHY9MikpLDM+QXx8dj5BKWlmKDAhPT16KXtpZihuPWVlKDAsMjU1JnVbQy0xXSksbiYmc2UoITEpLEMrKyxfLS0sMD09PXQudHQpcmV0dXJuIDB9ZWxzZSB6PTEsQysrLF8tLTtlbHNle3I9QytfLTMsbj1lZShDLTEtUyxBLTMpLF8tPUEtMSxBLT0yO2RveysrQz5yfHwocD0ocDw8Z14yNTUmdVtDKzJdKSZiLHM9NjU1MzUmZFtwXSxoW0MmbF09ZFtwXSxkW3BdPUMpfXdoaWxlKDAhPS0tQSk7aWYoej0wLHY9MixDKyssbiYmKHNlKCExKSwwPT09dC50dCkpcmV0dXJuIDB9fXJldHVybiAwIT09eiYmKG49ZWUoMCwyNTUmdVtDLTFdKSx6PTApLHNlKDQ9PWUpLDA9PT10LnR0PzQ9PWU/MjowOjQ9PWU/MzoxfSkoaSl9aWYoMiE9UiYmMyE9Unx8KG49TGUpLDA9PVJ8fDI9PVIpcmV0dXJuIDA9PT10LnR0JiYoYz0tMSksMDtpZigxPT1SKXtpZigxPT1pKVgoMiwzKSxZKDI1NixLZS5BZSksJCgpLDk+MStIKzEwLUYmJihYKDIsMyksWSgyNTYsS2UuQWUpLCQoKSksSD03O2Vsc2UgaWYocmUoMCwwLCExKSwzPT1pKWZvcihvPTA7eT5vO28rKylkW29dPTA7aWYodC5UZSgpLDA9PT10LnR0KXJldHVybiBjPS0xLDB9fXJldHVybiA0IT1pPzA6MX19ZnVuY3Rpb24gSmUoKXtjb25zdCBlPXRoaXM7ZS5udD0wLGUucnQ9MCxlLldlPTAsZS5xZT0wLGUudHQ9MCxlLkdlPTB9ZnVuY3Rpb24gUWUoZSl7Y29uc3QgdD1uZXcgSmUsbj0obz1lJiZlLmNodW5rU2l6ZT9lLmNodW5rU2l6ZTo2NTUzNikrNSooci5mbG9vcihvLzE2MzgzKSsxKTt2YXIgbztjb25zdCBjPW5ldyBpKG4pO2xldCBmPWU/ZS5sZXZlbDotMTt2b2lkIDA9PT1mJiYoZj0tMSksdC5IZShmKSx0LiRlPWMsdGhpcy5hcHBlbmQ9KGUscik9PntsZXQgbyxmLGE9MCxsPTAsdT0wO2NvbnN0IHc9W107aWYoZS5sZW5ndGgpe3QubnQ9MCx0LmV0PWUsdC5XZT1lLmxlbmd0aDtkb3tpZih0LnJ0PTAsdC50dD1uLG89dC5ZZSgwKSwwIT1vKXRocm93IG5ldyBzKFwiZGVmbGF0aW5nOiBcIit0LkxlKTt0LnJ0JiYodC5ydD09bj93LnB1c2gobmV3IGkoYykpOncucHVzaChjLnN1YmFycmF5KDAsdC5ydCkpKSx1Kz10LnJ0LHImJnQubnQ+MCYmdC5udCE9YSYmKHIodC5udCksYT10Lm50KX13aGlsZSh0LldlPjB8fDA9PT10LnR0KTtyZXR1cm4gdy5sZW5ndGg+MT8oZj1uZXcgaSh1KSx3LmZvckVhY2goKGU9PntmLnNldChlLGwpLGwrPWUubGVuZ3RofSkpKTpmPXdbMF0/bmV3IGkod1swXSk6bmV3IGksZn19LHRoaXMuZmx1c2g9KCk9PntsZXQgZSxyLG89MCxmPTA7Y29uc3QgYT1bXTtkb3tpZih0LnJ0PTAsdC50dD1uLGU9dC5ZZSg0KSwxIT1lJiYwIT1lKXRocm93IG5ldyBzKFwiZGVmbGF0aW5nOiBcIit0LkxlKTtuLXQudHQ+MCYmYS5wdXNoKGMuc2xpY2UoMCx0LnJ0KSksZis9dC5ydH13aGlsZSh0LldlPjB8fDA9PT10LnR0KTtyZXR1cm4gdC5RZSgpLHI9bmV3IGkoZiksYS5mb3JFYWNoKChlPT57ci5zZXQoZSxvKSxvKz1lLmxlbmd0aH0pKSxyfX1KZS5wcm90b3R5cGU9e0hlKGUsdCl7Y29uc3Qgbj10aGlzO3JldHVybiBuLkZlPW5ldyBHZSx0fHwodD0xNSksbi5GZS5IZShuLGUsdCl9LFllKGUpe2NvbnN0IHQ9dGhpcztyZXR1cm4gdC5GZT90LkZlLlllKHQsZSk6UmV9LFFlKCl7Y29uc3QgZT10aGlzO2lmKCFlLkZlKXJldHVybiBSZTtjb25zdCB0PWUuRmUuUWUoKTtyZXR1cm4gZS5GZT1udWxsLHR9LFhlKGUsdCl7Y29uc3Qgbj10aGlzO3JldHVybiBuLkZlP24uRmUuWGUobixlLHQpOlJlfSxaZShlLHQpe2NvbnN0IG49dGhpcztyZXR1cm4gbi5GZT9uLkZlLlplKG4sZSx0KTpSZX0samUoZSx0LG4pe2NvbnN0IHI9dGhpcztsZXQgcz1yLldlO3JldHVybiBzPm4mJihzPW4pLDA9PT1zPzA6KHIuV2UtPXMsZS5zZXQoci5ldC5zdWJhcnJheShyLm50LHIubnQrcyksdCksci5udCs9cyxyLnFlKz1zLHMpfSxUZSgpe2NvbnN0IGU9dGhpcztsZXQgdD1lLkZlLnBlbmRpbmc7dD5lLnR0JiYodD1lLnR0KSwwIT09dCYmKGUuJGUuc2V0KGUuRmUuS2Uuc3ViYXJyYXkoZS5GZS5KZSxlLkZlLkplK3QpLGUucnQpLGUucnQrPXQsZS5GZS5KZSs9dCxlLkdlKz10LGUudHQtPXQsZS5GZS5wZW5kaW5nLT10LDA9PT1lLkZlLnBlbmRpbmcmJihlLkZlLkplPTApKX19O2NvbnN0IFhlPS0yLFllPS0zLFplPS01LCRlPVswLDEsMyw3LDE1LDMxLDYzLDEyNywyNTUsNTExLDEwMjMsMjA0Nyw0MDk1LDgxOTEsMTYzODMsMzI3NjcsNjU1MzVdLGV0PVs5Niw3LDI1NiwwLDgsODAsMCw4LDE2LDg0LDgsMTE1LDgyLDcsMzEsMCw4LDExMiwwLDgsNDgsMCw5LDE5Miw4MCw3LDEwLDAsOCw5NiwwLDgsMzIsMCw5LDE2MCwwLDgsMCwwLDgsMTI4LDAsOCw2NCwwLDksMjI0LDgwLDcsNiwwLDgsODgsMCw4LDI0LDAsOSwxNDQsODMsNyw1OSwwLDgsMTIwLDAsOCw1NiwwLDksMjA4LDgxLDcsMTcsMCw4LDEwNCwwLDgsNDAsMCw5LDE3NiwwLDgsOCwwLDgsMTM2LDAsOCw3MiwwLDksMjQwLDgwLDcsNCwwLDgsODQsMCw4LDIwLDg1LDgsMjI3LDgzLDcsNDMsMCw4LDExNiwwLDgsNTIsMCw5LDIwMCw4MSw3LDEzLDAsOCwxMDAsMCw4LDM2LDAsOSwxNjgsMCw4LDQsMCw4LDEzMiwwLDgsNjgsMCw5LDIzMiw4MCw3LDgsMCw4LDkyLDAsOCwyOCwwLDksMTUyLDg0LDcsODMsMCw4LDEyNCwwLDgsNjAsMCw5LDIxNiw4Miw3LDIzLDAsOCwxMDgsMCw4LDQ0LDAsOSwxODQsMCw4LDEyLDAsOCwxNDAsMCw4LDc2LDAsOSwyNDgsODAsNywzLDAsOCw4MiwwLDgsMTgsODUsOCwxNjMsODMsNywzNSwwLDgsMTE0LDAsOCw1MCwwLDksMTk2LDgxLDcsMTEsMCw4LDk4LDAsOCwzNCwwLDksMTY0LDAsOCwyLDAsOCwxMzAsMCw4LDY2LDAsOSwyMjgsODAsNyw3LDAsOCw5MCwwLDgsMjYsMCw5LDE0OCw4NCw3LDY3LDAsOCwxMjIsMCw4LDU4LDAsOSwyMTIsODIsNywxOSwwLDgsMTA2LDAsOCw0MiwwLDksMTgwLDAsOCwxMCwwLDgsMTM4LDAsOCw3NCwwLDksMjQ0LDgwLDcsNSwwLDgsODYsMCw4LDIyLDE5Miw4LDAsODMsNyw1MSwwLDgsMTE4LDAsOCw1NCwwLDksMjA0LDgxLDcsMTUsMCw4LDEwMiwwLDgsMzgsMCw5LDE3MiwwLDgsNiwwLDgsMTM0LDAsOCw3MCwwLDksMjM2LDgwLDcsOSwwLDgsOTQsMCw4LDMwLDAsOSwxNTYsODQsNyw5OSwwLDgsMTI2LDAsOCw2MiwwLDksMjIwLDgyLDcsMjcsMCw4LDExMCwwLDgsNDYsMCw5LDE4OCwwLDgsMTQsMCw4LDE0MiwwLDgsNzgsMCw5LDI1Miw5Niw3LDI1NiwwLDgsODEsMCw4LDE3LDg1LDgsMTMxLDgyLDcsMzEsMCw4LDExMywwLDgsNDksMCw5LDE5NCw4MCw3LDEwLDAsOCw5NywwLDgsMzMsMCw5LDE2MiwwLDgsMSwwLDgsMTI5LDAsOCw2NSwwLDksMjI2LDgwLDcsNiwwLDgsODksMCw4LDI1LDAsOSwxNDYsODMsNyw1OSwwLDgsMTIxLDAsOCw1NywwLDksMjEwLDgxLDcsMTcsMCw4LDEwNSwwLDgsNDEsMCw5LDE3OCwwLDgsOSwwLDgsMTM3LDAsOCw3MywwLDksMjQyLDgwLDcsNCwwLDgsODUsMCw4LDIxLDgwLDgsMjU4LDgzLDcsNDMsMCw4LDExNywwLDgsNTMsMCw5LDIwMiw4MSw3LDEzLDAsOCwxMDEsMCw4LDM3LDAsOSwxNzAsMCw4LDUsMCw4LDEzMywwLDgsNjksMCw5LDIzNCw4MCw3LDgsMCw4LDkzLDAsOCwyOSwwLDksMTU0LDg0LDcsODMsMCw4LDEyNSwwLDgsNjEsMCw5LDIxOCw4Miw3LDIzLDAsOCwxMDksMCw4LDQ1LDAsOSwxODYsMCw4LDEzLDAsOCwxNDEsMCw4LDc3LDAsOSwyNTAsODAsNywzLDAsOCw4MywwLDgsMTksODUsOCwxOTUsODMsNywzNSwwLDgsMTE1LDAsOCw1MSwwLDksMTk4LDgxLDcsMTEsMCw4LDk5LDAsOCwzNSwwLDksMTY2LDAsOCwzLDAsOCwxMzEsMCw4LDY3LDAsOSwyMzAsODAsNyw3LDAsOCw5MSwwLDgsMjcsMCw5LDE1MCw4NCw3LDY3LDAsOCwxMjMsMCw4LDU5LDAsOSwyMTQsODIsNywxOSwwLDgsMTA3LDAsOCw0MywwLDksMTgyLDAsOCwxMSwwLDgsMTM5LDAsOCw3NSwwLDksMjQ2LDgwLDcsNSwwLDgsODcsMCw4LDIzLDE5Miw4LDAsODMsNyw1MSwwLDgsMTE5LDAsOCw1NSwwLDksMjA2LDgxLDcsMTUsMCw4LDEwMywwLDgsMzksMCw5LDE3NCwwLDgsNywwLDgsMTM1LDAsOCw3MSwwLDksMjM4LDgwLDcsOSwwLDgsOTUsMCw4LDMxLDAsOSwxNTgsODQsNyw5OSwwLDgsMTI3LDAsOCw2MywwLDksMjIyLDgyLDcsMjcsMCw4LDExMSwwLDgsNDcsMCw5LDE5MCwwLDgsMTUsMCw4LDE0MywwLDgsNzksMCw5LDI1NCw5Niw3LDI1NiwwLDgsODAsMCw4LDE2LDg0LDgsMTE1LDgyLDcsMzEsMCw4LDExMiwwLDgsNDgsMCw5LDE5Myw4MCw3LDEwLDAsOCw5NiwwLDgsMzIsMCw5LDE2MSwwLDgsMCwwLDgsMTI4LDAsOCw2NCwwLDksMjI1LDgwLDcsNiwwLDgsODgsMCw4LDI0LDAsOSwxNDUsODMsNyw1OSwwLDgsMTIwLDAsOCw1NiwwLDksMjA5LDgxLDcsMTcsMCw4LDEwNCwwLDgsNDAsMCw5LDE3NywwLDgsOCwwLDgsMTM2LDAsOCw3MiwwLDksMjQxLDgwLDcsNCwwLDgsODQsMCw4LDIwLDg1LDgsMjI3LDgzLDcsNDMsMCw4LDExNiwwLDgsNTIsMCw5LDIwMSw4MSw3LDEzLDAsOCwxMDAsMCw4LDM2LDAsOSwxNjksMCw4LDQsMCw4LDEzMiwwLDgsNjgsMCw5LDIzMyw4MCw3LDgsMCw4LDkyLDAsOCwyOCwwLDksMTUzLDg0LDcsODMsMCw4LDEyNCwwLDgsNjAsMCw5LDIxNyw4Miw3LDIzLDAsOCwxMDgsMCw4LDQ0LDAsOSwxODUsMCw4LDEyLDAsOCwxNDAsMCw4LDc2LDAsOSwyNDksODAsNywzLDAsOCw4MiwwLDgsMTgsODUsOCwxNjMsODMsNywzNSwwLDgsMTE0LDAsOCw1MCwwLDksMTk3LDgxLDcsMTEsMCw4LDk4LDAsOCwzNCwwLDksMTY1LDAsOCwyLDAsOCwxMzAsMCw4LDY2LDAsOSwyMjksODAsNyw3LDAsOCw5MCwwLDgsMjYsMCw5LDE0OSw4NCw3LDY3LDAsOCwxMjIsMCw4LDU4LDAsOSwyMTMsODIsNywxOSwwLDgsMTA2LDAsOCw0MiwwLDksMTgxLDAsOCwxMCwwLDgsMTM4LDAsOCw3NCwwLDksMjQ1LDgwLDcsNSwwLDgsODYsMCw4LDIyLDE5Miw4LDAsODMsNyw1MSwwLDgsMTE4LDAsOCw1NCwwLDksMjA1LDgxLDcsMTUsMCw4LDEwMiwwLDgsMzgsMCw5LDE3MywwLDgsNiwwLDgsMTM0LDAsOCw3MCwwLDksMjM3LDgwLDcsOSwwLDgsOTQsMCw4LDMwLDAsOSwxNTcsODQsNyw5OSwwLDgsMTI2LDAsOCw2MiwwLDksMjIxLDgyLDcsMjcsMCw4LDExMCwwLDgsNDYsMCw5LDE4OSwwLDgsMTQsMCw4LDE0MiwwLDgsNzgsMCw5LDI1Myw5Niw3LDI1NiwwLDgsODEsMCw4LDE3LDg1LDgsMTMxLDgyLDcsMzEsMCw4LDExMywwLDgsNDksMCw5LDE5NSw4MCw3LDEwLDAsOCw5NywwLDgsMzMsMCw5LDE2MywwLDgsMSwwLDgsMTI5LDAsOCw2NSwwLDksMjI3LDgwLDcsNiwwLDgsODksMCw4LDI1LDAsOSwxNDcsODMsNyw1OSwwLDgsMTIxLDAsOCw1NywwLDksMjExLDgxLDcsMTcsMCw4LDEwNSwwLDgsNDEsMCw5LDE3OSwwLDgsOSwwLDgsMTM3LDAsOCw3MywwLDksMjQzLDgwLDcsNCwwLDgsODUsMCw4LDIxLDgwLDgsMjU4LDgzLDcsNDMsMCw4LDExNywwLDgsNTMsMCw5LDIwMyw4MSw3LDEzLDAsOCwxMDEsMCw4LDM3LDAsOSwxNzEsMCw4LDUsMCw4LDEzMywwLDgsNjksMCw5LDIzNSw4MCw3LDgsMCw4LDkzLDAsOCwyOSwwLDksMTU1LDg0LDcsODMsMCw4LDEyNSwwLDgsNjEsMCw5LDIxOSw4Miw3LDIzLDAsOCwxMDksMCw4LDQ1LDAsOSwxODcsMCw4LDEzLDAsOCwxNDEsMCw4LDc3LDAsOSwyNTEsODAsNywzLDAsOCw4MywwLDgsMTksODUsOCwxOTUsODMsNywzNSwwLDgsMTE1LDAsOCw1MSwwLDksMTk5LDgxLDcsMTEsMCw4LDk5LDAsOCwzNSwwLDksMTY3LDAsOCwzLDAsOCwxMzEsMCw4LDY3LDAsOSwyMzEsODAsNyw3LDAsOCw5MSwwLDgsMjcsMCw5LDE1MSw4NCw3LDY3LDAsOCwxMjMsMCw4LDU5LDAsOSwyMTUsODIsNywxOSwwLDgsMTA3LDAsOCw0MywwLDksMTgzLDAsOCwxMSwwLDgsMTM5LDAsOCw3NSwwLDksMjQ3LDgwLDcsNSwwLDgsODcsMCw4LDIzLDE5Miw4LDAsODMsNyw1MSwwLDgsMTE5LDAsOCw1NSwwLDksMjA3LDgxLDcsMTUsMCw4LDEwMywwLDgsMzksMCw5LDE3NSwwLDgsNywwLDgsMTM1LDAsOCw3MSwwLDksMjM5LDgwLDcsOSwwLDgsOTUsMCw4LDMxLDAsOSwxNTksODQsNyw5OSwwLDgsMTI3LDAsOCw2MywwLDksMjIzLDgyLDcsMjcsMCw4LDExMSwwLDgsNDcsMCw5LDE5MSwwLDgsMTUsMCw4LDE0MywwLDgsNzksMCw5LDI1NV0sdHQ9WzgwLDUsMSw4Nyw1LDI1Nyw4Myw1LDE3LDkxLDUsNDA5Nyw4MSw1LDUsODksNSwxMDI1LDg1LDUsNjUsOTMsNSwxNjM4NSw4MCw1LDMsODgsNSw1MTMsODQsNSwzMyw5Miw1LDgxOTMsODIsNSw5LDkwLDUsMjA0OSw4Niw1LDEyOSwxOTIsNSwyNDU3Nyw4MCw1LDIsODcsNSwzODUsODMsNSwyNSw5MSw1LDYxNDUsODEsNSw3LDg5LDUsMTUzNyw4NSw1LDk3LDkzLDUsMjQ1NzcsODAsNSw0LDg4LDUsNzY5LDg0LDUsNDksOTIsNSwxMjI4OSw4Miw1LDEzLDkwLDUsMzA3Myw4Niw1LDE5MywxOTIsNSwyNDU3N10sbnQ9WzMsNCw1LDYsNyw4LDksMTAsMTEsMTMsMTUsMTcsMTksMjMsMjcsMzEsMzUsNDMsNTEsNTksNjcsODMsOTksMTE1LDEzMSwxNjMsMTk1LDIyNywyNTgsMCwwXSxydD1bMCwwLDAsMCwwLDAsMCwwLDEsMSwxLDEsMiwyLDIsMiwzLDMsMywzLDQsNCw0LDQsNSw1LDUsNSwwLDExMiwxMTJdLHN0PVsxLDIsMyw0LDUsNyw5LDEzLDE3LDI1LDMzLDQ5LDY1LDk3LDEyOSwxOTMsMjU3LDM4NSw1MTMsNzY5LDEwMjUsMTUzNywyMDQ5LDMwNzMsNDA5Nyw2MTQ1LDgxOTMsMTIyODksMTYzODUsMjQ1NzddLGl0PVswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLDEwLDExLDExLDEyLDEyLDEzLDEzXTtmdW5jdGlvbiBvdCgpe2xldCBlLHQsbixyLHMsaTtmdW5jdGlvbiBvKGUsdCxvLGMsZixhLGwsdSx3LGgsZCl7bGV0IHAseSxtLGIsZyxrLHYsUyx6LEMseCxfLEEsSSxEO0M9MCxnPW87ZG97bltlW3QrQ11dKyssQysrLGctLX13aGlsZSgwIT09Zyk7aWYoblswXT09bylyZXR1cm4gbFswXT0tMSx1WzBdPTAsMDtmb3IoUz11WzBdLGs9MTsxNT49ayYmMD09PW5ba107aysrKTtmb3Iodj1rLGs+UyYmKFM9ayksZz0xNTswIT09ZyYmMD09PW5bZ107Zy0tKTtmb3IobT1nLFM+ZyYmKFM9ZyksdVswXT1TLEk9MTw8aztnPms7aysrLEk8PD0xKWlmKDA+KEktPW5ba10pKXJldHVybiBZZTtpZigwPihJLT1uW2ddKSlyZXR1cm4gWWU7Zm9yKG5bZ10rPUksaVsxXT1rPTAsQz0xLEE9MjswIT0tLWc7KWlbQV09ays9bltDXSxBKyssQysrO2c9MCxDPTA7ZG97MCE9PShrPWVbdCtDXSkmJihkW2lba10rK109ZyksQysrfXdoaWxlKCsrZzxvKTtmb3Iobz1pW21dLGlbMF09Zz0wLEM9MCxiPS0xLF89LVMsc1swXT0wLHg9MCxEPTA7bT49djt2KyspZm9yKHA9blt2XTswIT1wLS07KXtmb3IoO3Y+XytTOyl7aWYoYisrLF8rPVMsRD1tLV8sRD1EPlM/UzpELCh5PTE8PChrPXYtXykpPnArMSYmKHktPXArMSxBPXYsRD5rKSlmb3IoOysrazxEJiYoeTw8PTEpPm5bKytBXTspeS09bltBXTtpZihEPTE8PGssaFswXStEPjE0NDApcmV0dXJuIFllO3NbYl09eD1oWzBdLGhbMF0rPUQsMCE9PWI/KGlbYl09ZyxyWzBdPWssclsxXT1TLGs9Zz4+Pl8tUyxyWzJdPXgtc1tiLTFdLWssdy5zZXQociwzKihzW2ItMV0raykpKTpsWzBdPXh9Zm9yKHJbMV09di1fLG8+Qz9kW0NdPGM/KHJbMF09MjU2PmRbQ10/MDo5NixyWzJdPWRbQysrXSk6KHJbMF09YVtkW0NdLWNdKzE2KzY0LHJbMl09ZltkW0MrK10tY10pOnJbMF09MTkyLHk9MTw8di1fLGs9Zz4+Pl87RD5rO2srPXkpdy5zZXQociwzKih4K2spKTtmb3Ioaz0xPDx2LTE7MCE9KGcmayk7az4+Pj0xKWdePWs7Zm9yKGdePWssej0oMTw8XyktMTsoZyZ6KSE9aVtiXTspYi0tLF8tPVMsej0oMTw8XyktMX1yZXR1cm4gMCE9PUkmJjEhPW0/WmU6MH1mdW5jdGlvbiBjKG8pe2xldCBjO2ZvcihlfHwoZT1bXSx0PVtdLG49bmV3IGYoMTYpLHI9W10scz1uZXcgZigxNSksaT1uZXcgZigxNikpLHQubGVuZ3RoPG8mJih0PVtdKSxjPTA7bz5jO2MrKyl0W2NdPTA7Zm9yKGM9MDsxNj5jO2MrKyluW2NdPTA7Zm9yKGM9MDszPmM7YysrKXJbY109MDtzLnNldChuLnN1YmFycmF5KDAsMTUpLDApLGkuc2V0KG4uc3ViYXJyYXkoMCwxNiksMCl9dGhpcy5zdD0obixyLHMsaSxmKT0+e2xldCBhO3JldHVybiBjKDE5KSxlWzBdPTAsYT1vKG4sMCwxOSwxOSxudWxsLG51bGwscyxyLGksZSx0KSxhPT1ZZT9mLkxlPVwib3ZlcnN1YnNjcmliZWQgZHluYW1pYyBiaXQgbGVuZ3RocyB0cmVlXCI6YSE9WmUmJjAhPT1yWzBdfHwoZi5MZT1cImluY29tcGxldGUgZHluYW1pYyBiaXQgbGVuZ3RocyB0cmVlXCIsYT1ZZSksYX0sdGhpcy5pdD0obixyLHMsaSxmLGEsbCx1LHcpPT57bGV0IGg7cmV0dXJuIGMoMjg4KSxlWzBdPTAsaD1vKHMsMCxuLDI1NyxudCxydCxhLGksdSxlLHQpLDAhPWh8fDA9PT1pWzBdPyhoPT1ZZT93LkxlPVwib3ZlcnN1YnNjcmliZWQgbGl0ZXJhbC9sZW5ndGggdHJlZVwiOi00IT1oJiYody5MZT1cImluY29tcGxldGUgbGl0ZXJhbC9sZW5ndGggdHJlZVwiLGg9WWUpLGgpOihjKDI4OCksaD1vKHMsbixyLDAsc3QsaXQsbCxmLHUsZSx0KSwwIT1ofHwwPT09ZlswXSYmbj4yNTc/KGg9PVllP3cuTGU9XCJvdmVyc3Vic2NyaWJlZCBkaXN0YW5jZSB0cmVlXCI6aD09WmU/KHcuTGU9XCJpbmNvbXBsZXRlIGRpc3RhbmNlIHRyZWVcIixoPVllKTotNCE9aCYmKHcuTGU9XCJlbXB0eSBkaXN0YW5jZSB0cmVlIHdpdGggbGVuZ3Roc1wiLGg9WWUpLGgpOjApfX1mdW5jdGlvbiBjdCgpe2NvbnN0IGU9dGhpcztsZXQgdCxuLHIscyxpPTAsbz0wLGM9MCxmPTAsYT0wLGw9MCx1PTAsdz0wLGg9MCxkPTA7ZnVuY3Rpb24gcChlLHQsbixyLHMsaSxvLGMpe2xldCBmLGEsbCx1LHcsaCxkLHAseSxtLGIsZyxrLHYsUyx6O2Q9Yy5udCxwPWMuV2Usdz1vLm90LGg9by5jdCx5PW8ud3JpdGUsbT15PG8ucmVhZD9vLnJlYWQteS0xOm8uZW5kLXksYj0kZVtlXSxnPSRlW3RdO2Rve2Zvcig7MjA+aDspcC0tLHd8PSgyNTUmYy5mdChkKyspKTw8aCxoKz04O2lmKGY9dyZiLGE9bixsPXIsej0zKihsK2YpLDAhPT0odT1hW3pdKSlmb3IoOzspe2lmKHc+Pj1hW3orMV0saC09YVt6KzFdLDAhPSgxNiZ1KSl7Zm9yKHUmPTE1LGs9YVt6KzJdKyh3JiRlW3VdKSx3Pj49dSxoLT11OzE1Pmg7KXAtLSx3fD0oMjU1JmMuZnQoZCsrKSk8PGgsaCs9ODtmb3IoZj13JmcsYT1zLGw9aSx6PTMqKGwrZiksdT1hW3pdOzspe2lmKHc+Pj1hW3orMV0saC09YVt6KzFdLDAhPSgxNiZ1KSl7Zm9yKHUmPTE1O3U+aDspcC0tLHd8PSgyNTUmYy5mdChkKyspKTw8aCxoKz04O2lmKHY9YVt6KzJdKyh3JiRlW3VdKSx3Pj49dSxoLT11LG0tPWssdj55KXtTPXktdjtkb3tTKz1vLmVuZH13aGlsZSgwPlMpO2lmKHU9by5lbmQtUyxrPnUpe2lmKGstPXUseS1TPjAmJnU+eS1TKWRve28ubHRbeSsrXT1vLmx0W1MrK119d2hpbGUoMCE9LS11KTtlbHNlIG8ubHQuc2V0KG8ubHQuc3ViYXJyYXkoUyxTK3UpLHkpLHkrPXUsUys9dSx1PTA7Uz0wfX1lbHNlIFM9eS12LHktUz4wJiYyPnktUz8oby5sdFt5KytdPW8ubHRbUysrXSxvLmx0W3krK109by5sdFtTKytdLGstPTIpOihvLmx0LnNldChvLmx0LnN1YmFycmF5KFMsUysyKSx5KSx5Kz0yLFMrPTIsay09Mik7aWYoeS1TPjAmJms+eS1TKWRve28ubHRbeSsrXT1vLmx0W1MrK119d2hpbGUoMCE9LS1rKTtlbHNlIG8ubHQuc2V0KG8ubHQuc3ViYXJyYXkoUyxTK2spLHkpLHkrPWssUys9ayxrPTA7YnJlYWt9aWYoMCE9KDY0JnUpKXJldHVybiBjLkxlPVwiaW52YWxpZCBkaXN0YW5jZSBjb2RlXCIsaz1jLldlLXAsaz1rPmg+PjM/aD4+MzprLHArPWssZC09ayxoLT1rPDwzLG8ub3Q9dyxvLmN0PWgsYy5XZT1wLGMucWUrPWQtYy5udCxjLm50PWQsby53cml0ZT15LFllO2YrPWFbeisyXSxmKz13JiRlW3VdLHo9MyoobCtmKSx1PWFbel19YnJlYWt9aWYoMCE9KDY0JnUpKXJldHVybiAwIT0oMzImdSk/KGs9Yy5XZS1wLGs9az5oPj4zP2g+PjM6ayxwKz1rLGQtPWssaC09azw8MyxvLm90PXcsby5jdD1oLGMuV2U9cCxjLnFlKz1kLWMubnQsYy5udD1kLG8ud3JpdGU9eSwxKTooYy5MZT1cImludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZVwiLGs9Yy5XZS1wLGs9az5oPj4zP2g+PjM6ayxwKz1rLGQtPWssaC09azw8MyxvLm90PXcsby5jdD1oLGMuV2U9cCxjLnFlKz1kLWMubnQsYy5udD1kLG8ud3JpdGU9eSxZZSk7aWYoZis9YVt6KzJdLGYrPXcmJGVbdV0sej0zKihsK2YpLDA9PT0odT1hW3pdKSl7dz4+PWFbeisxXSxoLT1hW3orMV0sby5sdFt5KytdPWFbeisyXSxtLS07YnJlYWt9fWVsc2Ugdz4+PWFbeisxXSxoLT1hW3orMV0sby5sdFt5KytdPWFbeisyXSxtLS19d2hpbGUobT49MjU4JiZwPj0xMCk7cmV0dXJuIGs9Yy5XZS1wLGs9az5oPj4zP2g+PjM6ayxwKz1rLGQtPWssaC09azw8MyxvLm90PXcsby5jdD1oLGMuV2U9cCxjLnFlKz1kLWMubnQsYy5udD1kLG8ud3JpdGU9eSwwfWUuaW5pdD0oZSxpLG8sYyxmLGEpPT57dD0wLHU9ZSx3PWkscj1vLGg9YyxzPWYsZD1hLG49bnVsbH0sZS51dD0oZSx5LG0pPT57bGV0IGIsZyxrLHYsUyx6LEMseD0wLF89MCxBPTA7Zm9yKEE9eS5udCx2PXkuV2UseD1lLm90LF89ZS5jdCxTPWUud3JpdGUsej1TPGUucmVhZD9lLnJlYWQtUy0xOmUuZW5kLVM7Oylzd2l0Y2godCl7Y2FzZSAwOmlmKHo+PTI1OCYmdj49MTAmJihlLm90PXgsZS5jdD1fLHkuV2U9dix5LnFlKz1BLXkubnQseS5udD1BLGUud3JpdGU9UyxtPXAodSx3LHIsaCxzLGQsZSx5KSxBPXkubnQsdj15LldlLHg9ZS5vdCxfPWUuY3QsUz1lLndyaXRlLHo9UzxlLnJlYWQ/ZS5yZWFkLVMtMTplLmVuZC1TLDAhPW0pKXt0PTE9PW0/Nzo5O2JyZWFrfWM9dSxuPXIsbz1oLHQ9MTtjYXNlIDE6Zm9yKGI9YztiPl87KXtpZigwPT09dilyZXR1cm4gZS5vdD14LGUuY3Q9Xyx5LldlPXYseS5xZSs9QS15Lm50LHkubnQ9QSxlLndyaXRlPVMsZS53dCh5LG0pO209MCx2LS0seHw9KDI1NSZ5LmZ0KEErKykpPDxfLF8rPTh9aWYoZz0zKihvKyh4JiRlW2JdKSkseD4+Pj1uW2crMV0sXy09bltnKzFdLGs9bltnXSwwPT09ayl7Zj1uW2crMl0sdD02O2JyZWFrfWlmKDAhPSgxNiZrKSl7YT0xNSZrLGk9bltnKzJdLHQ9MjticmVha31pZigwPT0oNjQmaykpe2M9ayxvPWcvMytuW2crMl07YnJlYWt9aWYoMCE9KDMyJmspKXt0PTc7YnJlYWt9cmV0dXJuIHQ9OSx5LkxlPVwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlXCIsbT1ZZSxlLm90PXgsZS5jdD1fLHkuV2U9dix5LnFlKz1BLXkubnQseS5udD1BLGUud3JpdGU9UyxlLnd0KHksbSk7Y2FzZSAyOmZvcihiPWE7Yj5fOyl7aWYoMD09PXYpcmV0dXJuIGUub3Q9eCxlLmN0PV8seS5XZT12LHkucWUrPUEteS5udCx5Lm50PUEsZS53cml0ZT1TLGUud3QoeSxtKTttPTAsdi0tLHh8PSgyNTUmeS5mdChBKyspKTw8XyxfKz04fWkrPXgmJGVbYl0seD4+PWIsXy09YixjPXcsbj1zLG89ZCx0PTM7Y2FzZSAzOmZvcihiPWM7Yj5fOyl7aWYoMD09PXYpcmV0dXJuIGUub3Q9eCxlLmN0PV8seS5XZT12LHkucWUrPUEteS5udCx5Lm50PUEsZS53cml0ZT1TLGUud3QoeSxtKTttPTAsdi0tLHh8PSgyNTUmeS5mdChBKyspKTw8XyxfKz04fWlmKGc9MyoobysoeCYkZVtiXSkpLHg+Pj1uW2crMV0sXy09bltnKzFdLGs9bltnXSwwIT0oMTYmaykpe2E9MTUmayxsPW5bZysyXSx0PTQ7YnJlYWt9aWYoMD09KDY0JmspKXtjPWssbz1nLzMrbltnKzJdO2JyZWFrfXJldHVybiB0PTkseS5MZT1cImludmFsaWQgZGlzdGFuY2UgY29kZVwiLG09WWUsZS5vdD14LGUuY3Q9Xyx5LldlPXYseS5xZSs9QS15Lm50LHkubnQ9QSxlLndyaXRlPVMsZS53dCh5LG0pO2Nhc2UgNDpmb3IoYj1hO2I+Xzspe2lmKDA9PT12KXJldHVybiBlLm90PXgsZS5jdD1fLHkuV2U9dix5LnFlKz1BLXkubnQseS5udD1BLGUud3JpdGU9UyxlLnd0KHksbSk7bT0wLHYtLSx4fD0oMjU1JnkuZnQoQSsrKSk8PF8sXys9OH1sKz14JiRlW2JdLHg+Pj1iLF8tPWIsdD01O2Nhc2UgNTpmb3IoQz1TLWw7MD5DOylDKz1lLmVuZDtmb3IoOzAhPT1pOyl7aWYoMD09PXomJihTPT1lLmVuZCYmMCE9PWUucmVhZCYmKFM9MCx6PVM8ZS5yZWFkP2UucmVhZC1TLTE6ZS5lbmQtUyksMD09PXomJihlLndyaXRlPVMsbT1lLnd0KHksbSksUz1lLndyaXRlLHo9UzxlLnJlYWQ/ZS5yZWFkLVMtMTplLmVuZC1TLFM9PWUuZW5kJiYwIT09ZS5yZWFkJiYoUz0wLHo9UzxlLnJlYWQ/ZS5yZWFkLVMtMTplLmVuZC1TKSwwPT09eikpKXJldHVybiBlLm90PXgsZS5jdD1fLHkuV2U9dix5LnFlKz1BLXkubnQseS5udD1BLGUud3JpdGU9UyxlLnd0KHksbSk7ZS5sdFtTKytdPWUubHRbQysrXSx6LS0sQz09ZS5lbmQmJihDPTApLGktLX10PTA7YnJlYWs7Y2FzZSA2OmlmKDA9PT16JiYoUz09ZS5lbmQmJjAhPT1lLnJlYWQmJihTPTAsej1TPGUucmVhZD9lLnJlYWQtUy0xOmUuZW5kLVMpLDA9PT16JiYoZS53cml0ZT1TLG09ZS53dCh5LG0pLFM9ZS53cml0ZSx6PVM8ZS5yZWFkP2UucmVhZC1TLTE6ZS5lbmQtUyxTPT1lLmVuZCYmMCE9PWUucmVhZCYmKFM9MCx6PVM8ZS5yZWFkP2UucmVhZC1TLTE6ZS5lbmQtUyksMD09PXopKSlyZXR1cm4gZS5vdD14LGUuY3Q9Xyx5LldlPXYseS5xZSs9QS15Lm50LHkubnQ9QSxlLndyaXRlPVMsZS53dCh5LG0pO209MCxlLmx0W1MrK109Zix6LS0sdD0wO2JyZWFrO2Nhc2UgNzppZihfPjcmJihfLT04LHYrKyxBLS0pLGUud3JpdGU9UyxtPWUud3QoeSxtKSxTPWUud3JpdGUsej1TPGUucmVhZD9lLnJlYWQtUy0xOmUuZW5kLVMsZS5yZWFkIT1lLndyaXRlKXJldHVybiBlLm90PXgsZS5jdD1fLHkuV2U9dix5LnFlKz1BLXkubnQseS5udD1BLGUud3JpdGU9UyxlLnd0KHksbSk7dD04O2Nhc2UgODpyZXR1cm4gbT0xLGUub3Q9eCxlLmN0PV8seS5XZT12LHkucWUrPUEteS5udCx5Lm50PUEsZS53cml0ZT1TLGUud3QoeSxtKTtjYXNlIDk6cmV0dXJuIG09WWUsZS5vdD14LGUuY3Q9Xyx5LldlPXYseS5xZSs9QS15Lm50LHkubnQ9QSxlLndyaXRlPVMsZS53dCh5LG0pO2RlZmF1bHQ6cmV0dXJuIG09WGUsZS5vdD14LGUuY3Q9Xyx5LldlPXYseS5xZSs9QS15Lm50LHkubnQ9QSxlLndyaXRlPVMsZS53dCh5LG0pfX0sZS5odD0oKT0+e319b3QuZHQ9KGUsdCxuLHIpPT4oZVswXT05LHRbMF09NSxuWzBdPWV0LHJbMF09dHQsMCk7Y29uc3QgZnQ9WzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdO2Z1bmN0aW9uIGF0KGUsdCl7Y29uc3Qgbj10aGlzO2xldCByLHM9MCxvPTAsYz0wLGE9MDtjb25zdCBsPVswXSx1PVswXSx3PW5ldyBjdDtsZXQgaD0wLGQ9bmV3IGYoNDMyMCk7Y29uc3QgcD1uZXcgb3Q7bi5jdD0wLG4ub3Q9MCxuLmx0PW5ldyBpKHQpLG4uZW5kPXQsbi5yZWFkPTAsbi53cml0ZT0wLG4ucmVzZXQ9KGUsdCk9Pnt0JiYodFswXT0wKSw2PT1zJiZ3Lmh0KGUpLHM9MCxuLmN0PTAsbi5vdD0wLG4ucmVhZD1uLndyaXRlPTB9LG4ucmVzZXQoZSxudWxsKSxuLnd0PShlLHQpPT57bGV0IHIscyxpO3JldHVybiBzPWUucnQsaT1uLnJlYWQscj0oaT5uLndyaXRlP24uZW5kOm4ud3JpdGUpLWkscj5lLnR0JiYocj1lLnR0KSwwIT09ciYmdD09WmUmJih0PTApLGUudHQtPXIsZS5HZSs9cixlLiRlLnNldChuLmx0LnN1YmFycmF5KGksaStyKSxzKSxzKz1yLGkrPXIsaT09bi5lbmQmJihpPTAsbi53cml0ZT09bi5lbmQmJihuLndyaXRlPTApLHI9bi53cml0ZS1pLHI+ZS50dCYmKHI9ZS50dCksMCE9PXImJnQ9PVplJiYodD0wKSxlLnR0LT1yLGUuR2UrPXIsZS4kZS5zZXQobi5sdC5zdWJhcnJheShpLGkrcikscykscys9cixpKz1yKSxlLnJ0PXMsbi5yZWFkPWksdH0sbi51dD0oZSx0KT0+e2xldCBpLGYseSxtLGIsZyxrLHY7Zm9yKG09ZS5udCxiPWUuV2UsZj1uLm90LHk9bi5jdCxnPW4ud3JpdGUsaz1nPG4ucmVhZD9uLnJlYWQtZy0xOm4uZW5kLWc7Oyl7bGV0IFMseixDLHgsXyxBLEksRDtzd2l0Y2gocyl7Y2FzZSAwOmZvcig7Mz55Oyl7aWYoMD09PWIpcmV0dXJuIG4ub3Q9ZixuLmN0PXksZS5XZT1iLGUucWUrPW0tZS5udCxlLm50PW0sbi53cml0ZT1nLG4ud3QoZSx0KTt0PTAsYi0tLGZ8PSgyNTUmZS5mdChtKyspKTw8eSx5Kz04fXN3aXRjaChpPTcmZixoPTEmaSxpPj4+MSl7Y2FzZSAwOmY+Pj49Myx5LT0zLGk9NyZ5LGY+Pj49aSx5LT1pLHM9MTticmVhaztjYXNlIDE6Uz1bXSx6PVtdLEM9W1tdXSx4PVtbXV0sb3QuZHQoUyx6LEMseCksdy5pbml0KFNbMF0selswXSxDWzBdLDAseFswXSwwKSxmPj4+PTMseS09MyxzPTY7YnJlYWs7Y2FzZSAyOmY+Pj49Myx5LT0zLHM9MzticmVhaztjYXNlIDM6cmV0dXJuIGY+Pj49Myx5LT0zLHM9OSxlLkxlPVwiaW52YWxpZCBibG9jayB0eXBlXCIsdD1ZZSxuLm90PWYsbi5jdD15LGUuV2U9YixlLnFlKz1tLWUubnQsZS5udD1tLG4ud3JpdGU9ZyxuLnd0KGUsdCl9YnJlYWs7Y2FzZSAxOmZvcig7MzI+eTspe2lmKDA9PT1iKXJldHVybiBuLm90PWYsbi5jdD15LGUuV2U9YixlLnFlKz1tLWUubnQsZS5udD1tLG4ud3JpdGU9ZyxuLnd0KGUsdCk7dD0wLGItLSxmfD0oMjU1JmUuZnQobSsrKSk8PHkseSs9OH1pZigofmY+Pj4xNiY2NTUzNSkhPSg2NTUzNSZmKSlyZXR1cm4gcz05LGUuTGU9XCJpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzXCIsdD1ZZSxuLm90PWYsbi5jdD15LGUuV2U9YixlLnFlKz1tLWUubnQsZS5udD1tLG4ud3JpdGU9ZyxuLnd0KGUsdCk7bz02NTUzNSZmLGY9eT0wLHM9MCE9PW8/MjowIT09aD83OjA7YnJlYWs7Y2FzZSAyOmlmKDA9PT1iKXJldHVybiBuLm90PWYsbi5jdD15LGUuV2U9YixlLnFlKz1tLWUubnQsZS5udD1tLG4ud3JpdGU9ZyxuLnd0KGUsdCk7aWYoMD09PWsmJihnPT1uLmVuZCYmMCE9PW4ucmVhZCYmKGc9MCxrPWc8bi5yZWFkP24ucmVhZC1nLTE6bi5lbmQtZyksMD09PWsmJihuLndyaXRlPWcsdD1uLnd0KGUsdCksZz1uLndyaXRlLGs9ZzxuLnJlYWQ/bi5yZWFkLWctMTpuLmVuZC1nLGc9PW4uZW5kJiYwIT09bi5yZWFkJiYoZz0wLGs9ZzxuLnJlYWQ/bi5yZWFkLWctMTpuLmVuZC1nKSwwPT09aykpKXJldHVybiBuLm90PWYsbi5jdD15LGUuV2U9YixlLnFlKz1tLWUubnQsZS5udD1tLG4ud3JpdGU9ZyxuLnd0KGUsdCk7aWYodD0wLGk9byxpPmImJihpPWIpLGk+ayYmKGk9ayksbi5sdC5zZXQoZS5qZShtLGkpLGcpLG0rPWksYi09aSxnKz1pLGstPWksMCE9KG8tPWkpKWJyZWFrO3M9MCE9PWg/NzowO2JyZWFrO2Nhc2UgMzpmb3IoOzE0Pnk7KXtpZigwPT09YilyZXR1cm4gbi5vdD1mLG4uY3Q9eSxlLldlPWIsZS5xZSs9bS1lLm50LGUubnQ9bSxuLndyaXRlPWcsbi53dChlLHQpO3Q9MCxiLS0sZnw9KDI1NSZlLmZ0KG0rKykpPDx5LHkrPTh9aWYoYz1pPTE2MzgzJmYsKDMxJmkpPjI5fHwoaT4+NSYzMSk+MjkpcmV0dXJuIHM9OSxlLkxlPVwidG9vIG1hbnkgbGVuZ3RoIG9yIGRpc3RhbmNlIHN5bWJvbHNcIix0PVllLG4ub3Q9ZixuLmN0PXksZS5XZT1iLGUucWUrPW0tZS5udCxlLm50PW0sbi53cml0ZT1nLG4ud3QoZSx0KTtpZihpPTI1OCsoMzEmaSkrKGk+PjUmMzEpLCFyfHxyLmxlbmd0aDxpKXI9W107ZWxzZSBmb3Iodj0wO2k+djt2Kyspclt2XT0wO2Y+Pj49MTQseS09MTQsYT0wLHM9NDtjYXNlIDQ6Zm9yKDs0KyhjPj4+MTApPmE7KXtmb3IoOzM+eTspe2lmKDA9PT1iKXJldHVybiBuLm90PWYsbi5jdD15LGUuV2U9YixlLnFlKz1tLWUubnQsZS5udD1tLG4ud3JpdGU9ZyxuLnd0KGUsdCk7dD0wLGItLSxmfD0oMjU1JmUuZnQobSsrKSk8PHkseSs9OH1yW2Z0W2ErK11dPTcmZixmPj4+PTMseS09M31mb3IoOzE5PmE7KXJbZnRbYSsrXV09MDtpZihsWzBdPTcsaT1wLnN0KHIsbCx1LGQsZSksMCE9aSlyZXR1cm4odD1pKT09WWUmJihyPW51bGwscz05KSxuLm90PWYsbi5jdD15LGUuV2U9YixlLnFlKz1tLWUubnQsZS5udD1tLG4ud3JpdGU9ZyxuLnd0KGUsdCk7YT0wLHM9NTtjYXNlIDU6Zm9yKDtpPWMsMjU4KygzMSZpKSsoaT4+NSYzMSk+YTspe2xldCBvLHc7Zm9yKGk9bFswXTtpPnk7KXtpZigwPT09YilyZXR1cm4gbi5vdD1mLG4uY3Q9eSxlLldlPWIsZS5xZSs9bS1lLm50LGUubnQ9bSxuLndyaXRlPWcsbi53dChlLHQpO3Q9MCxiLS0sZnw9KDI1NSZlLmZ0KG0rKykpPDx5LHkrPTh9aWYoaT1kWzMqKHVbMF0rKGYmJGVbaV0pKSsxXSx3PWRbMyoodVswXSsoZiYkZVtpXSkpKzJdLDE2PncpZj4+Pj1pLHktPWksclthKytdPXc7ZWxzZXtmb3Iodj0xOD09dz83OnctMTQsbz0xOD09dz8xMTozO2krdj55Oyl7aWYoMD09PWIpcmV0dXJuIG4ub3Q9ZixuLmN0PXksZS5XZT1iLGUucWUrPW0tZS5udCxlLm50PW0sbi53cml0ZT1nLG4ud3QoZSx0KTt0PTAsYi0tLGZ8PSgyNTUmZS5mdChtKyspKTw8eSx5Kz04fWlmKGY+Pj49aSx5LT1pLG8rPWYmJGVbdl0sZj4+Pj12LHktPXYsdj1hLGk9Yyx2K28+MjU4KygzMSZpKSsoaT4+NSYzMSl8fDE2PT13JiYxPnYpcmV0dXJuIHI9bnVsbCxzPTksZS5MZT1cImludmFsaWQgYml0IGxlbmd0aCByZXBlYXRcIix0PVllLG4ub3Q9ZixuLmN0PXksZS5XZT1iLGUucWUrPW0tZS5udCxlLm50PW0sbi53cml0ZT1nLG4ud3QoZSx0KTt3PTE2PT13P3Jbdi0xXTowO2Rve3JbdisrXT13fXdoaWxlKDAhPS0tbyk7YT12fX1pZih1WzBdPS0xLF89W10sQT1bXSxJPVtdLEQ9W10sX1swXT05LEFbMF09NixpPWMsaT1wLml0KDI1NysoMzEmaSksMSsoaT4+NSYzMSkscixfLEEsSSxELGQsZSksMCE9aSlyZXR1cm4gaT09WWUmJihyPW51bGwscz05KSx0PWksbi5vdD1mLG4uY3Q9eSxlLldlPWIsZS5xZSs9bS1lLm50LGUubnQ9bSxuLndyaXRlPWcsbi53dChlLHQpO3cuaW5pdChfWzBdLEFbMF0sZCxJWzBdLGQsRFswXSkscz02O2Nhc2UgNjppZihuLm90PWYsbi5jdD15LGUuV2U9YixlLnFlKz1tLWUubnQsZS5udD1tLG4ud3JpdGU9ZywxIT0odD13LnV0KG4sZSx0KSkpcmV0dXJuIG4ud3QoZSx0KTtpZih0PTAsdy5odChlKSxtPWUubnQsYj1lLldlLGY9bi5vdCx5PW4uY3QsZz1uLndyaXRlLGs9ZzxuLnJlYWQ/bi5yZWFkLWctMTpuLmVuZC1nLDA9PT1oKXtzPTA7YnJlYWt9cz03O2Nhc2UgNzppZihuLndyaXRlPWcsdD1uLnd0KGUsdCksZz1uLndyaXRlLGs9ZzxuLnJlYWQ/bi5yZWFkLWctMTpuLmVuZC1nLG4ucmVhZCE9bi53cml0ZSlyZXR1cm4gbi5vdD1mLG4uY3Q9eSxlLldlPWIsZS5xZSs9bS1lLm50LGUubnQ9bSxuLndyaXRlPWcsbi53dChlLHQpO3M9ODtjYXNlIDg6cmV0dXJuIHQ9MSxuLm90PWYsbi5jdD15LGUuV2U9YixlLnFlKz1tLWUubnQsZS5udD1tLG4ud3JpdGU9ZyxuLnd0KGUsdCk7Y2FzZSA5OnJldHVybiB0PVllLG4ub3Q9ZixuLmN0PXksZS5XZT1iLGUucWUrPW0tZS5udCxlLm50PW0sbi53cml0ZT1nLG4ud3QoZSx0KTtkZWZhdWx0OnJldHVybiB0PVhlLG4ub3Q9ZixuLmN0PXksZS5XZT1iLGUucWUrPW0tZS5udCxlLm50PW0sbi53cml0ZT1nLG4ud3QoZSx0KX19fSxuLmh0PWU9PntuLnJlc2V0KGUsbnVsbCksbi5sdD1udWxsLGQ9bnVsbH0sbi55dD0oZSx0LHIpPT57bi5sdC5zZXQoZS5zdWJhcnJheSh0LHQrciksMCksbi5yZWFkPW4ud3JpdGU9cn0sbi5idD0oKT0+MT09cz8xOjB9Y29uc3QgbHQ9MTMsdXQ9WzAsMCwyNTUsMjU1XTtmdW5jdGlvbiB3dCgpe2NvbnN0IGU9dGhpcztmdW5jdGlvbiB0KGUpe3JldHVybiBlJiZlLmd0PyhlLnFlPWUuR2U9MCxlLkxlPW51bGwsZS5ndC5tb2RlPTcsZS5ndC5rdC5yZXNldChlLG51bGwpLDApOlhlfWUubW9kZT0wLGUubWV0aG9kPTAsZS52dD1bMF0sZS5TdD0wLGUubWFya2VyPTAsZS56dD0wLGUuQ3Q9dD0+KGUua3QmJmUua3QuaHQodCksZS5rdD1udWxsLDApLGUueHQ9KG4scik9PihuLkxlPW51bGwsZS5rdD1udWxsLDg+cnx8cj4xNT8oZS5DdChuKSxYZSk6KGUuenQ9cixuLmd0Lmt0PW5ldyBhdChuLDE8PHIpLHQobiksMCkpLGUuX3Q9KGUsdCk9PntsZXQgbixyO2lmKCFlfHwhZS5ndHx8IWUuZXQpcmV0dXJuIFhlO2NvbnN0IHM9ZS5ndDtmb3IodD00PT10P1plOjAsbj1aZTs7KXN3aXRjaChzLm1vZGUpe2Nhc2UgMDppZigwPT09ZS5XZSlyZXR1cm4gbjtpZihuPXQsZS5XZS0tLGUucWUrKyw4IT0oMTUmKHMubWV0aG9kPWUuZnQoZS5udCsrKSkpKXtzLm1vZGU9bHQsZS5MZT1cInVua25vd24gY29tcHJlc3Npb24gbWV0aG9kXCIscy5tYXJrZXI9NTticmVha31pZig4KyhzLm1ldGhvZD4+NCk+cy56dCl7cy5tb2RlPWx0LGUuTGU9XCJpbnZhbGlkIHdpbiBzaXplXCIscy5tYXJrZXI9NTticmVha31zLm1vZGU9MTtjYXNlIDE6aWYoMD09PWUuV2UpcmV0dXJuIG47aWYobj10LGUuV2UtLSxlLnFlKysscj0yNTUmZS5mdChlLm50KyspLCgocy5tZXRob2Q8PDgpK3IpJTMxIT0wKXtzLm1vZGU9bHQsZS5MZT1cImluY29ycmVjdCBoZWFkZXIgY2hlY2tcIixzLm1hcmtlcj01O2JyZWFrfWlmKDA9PSgzMiZyKSl7cy5tb2RlPTc7YnJlYWt9cy5tb2RlPTI7Y2FzZSAyOmlmKDA9PT1lLldlKXJldHVybiBuO249dCxlLldlLS0sZS5xZSsrLHMuU3Q9KDI1NSZlLmZ0KGUubnQrKykpPDwyNCY0Mjc4MTkwMDgwLHMubW9kZT0zO2Nhc2UgMzppZigwPT09ZS5XZSlyZXR1cm4gbjtuPXQsZS5XZS0tLGUucWUrKyxzLlN0Kz0oMjU1JmUuZnQoZS5udCsrKSk8PDE2JjE2NzExNjgwLHMubW9kZT00O2Nhc2UgNDppZigwPT09ZS5XZSlyZXR1cm4gbjtuPXQsZS5XZS0tLGUucWUrKyxzLlN0Kz0oMjU1JmUuZnQoZS5udCsrKSk8PDgmNjUyODAscy5tb2RlPTU7Y2FzZSA1OnJldHVybiAwPT09ZS5XZT9uOihuPXQsZS5XZS0tLGUucWUrKyxzLlN0Kz0yNTUmZS5mdChlLm50KyspLHMubW9kZT02LDIpO2Nhc2UgNjpyZXR1cm4gcy5tb2RlPWx0LGUuTGU9XCJuZWVkIGRpY3Rpb25hcnlcIixzLm1hcmtlcj0wLFhlO2Nhc2UgNzppZihuPXMua3QudXQoZSxuKSxuPT1ZZSl7cy5tb2RlPWx0LHMubWFya2VyPTA7YnJlYWt9aWYoMD09biYmKG49dCksMSE9bilyZXR1cm4gbjtuPXQscy5rdC5yZXNldChlLHMudnQpLHMubW9kZT0xMjtjYXNlIDEyOnJldHVybiBlLldlPTAsMTtjYXNlIGx0OnJldHVybiBZZTtkZWZhdWx0OnJldHVybiBYZX19LGUuQXQ9KGUsdCxuKT0+e2xldCByPTAscz1uO2lmKCFlfHwhZS5ndHx8NiE9ZS5ndC5tb2RlKXJldHVybiBYZTtjb25zdCBpPWUuZ3Q7cmV0dXJuIHM8MTw8aS56dHx8KHM9KDE8PGkuenQpLTEscj1uLXMpLGkua3QueXQodCxyLHMpLGkubW9kZT03LDB9LGUuSXQ9ZT0+e2xldCBuLHIscyxpLG87aWYoIWV8fCFlLmd0KXJldHVybiBYZTtjb25zdCBjPWUuZ3Q7aWYoYy5tb2RlIT1sdCYmKGMubW9kZT1sdCxjLm1hcmtlcj0wKSwwPT09KG49ZS5XZSkpcmV0dXJuIFplO2ZvcihyPWUubnQscz1jLm1hcmtlcjswIT09biYmND5zOyllLmZ0KHIpPT11dFtzXT9zKys6cz0wIT09ZS5mdChyKT8wOjQtcyxyKyssbi0tO3JldHVybiBlLnFlKz1yLWUubnQsZS5udD1yLGUuV2U9bixjLm1hcmtlcj1zLDQhPXM/WWU6KGk9ZS5xZSxvPWUuR2UsdChlKSxlLnFlPWksZS5HZT1vLGMubW9kZT03LDApfSxlLkR0PWU9PmUmJmUuZ3QmJmUuZ3Qua3Q/ZS5ndC5rdC5idCgpOlhlfWZ1bmN0aW9uIGh0KCl7fWZ1bmN0aW9uIGR0KGUpe2NvbnN0IHQ9bmV3IGh0LG49ZSYmZS5jaHVua1NpemU/ci5mbG9vcigyKmUuY2h1bmtTaXplKToxMzEwNzIsbz1uZXcgaShuKTtsZXQgYz0hMTt0Lnh0KCksdC4kZT1vLHRoaXMuYXBwZW5kPShlLHIpPT57Y29uc3QgZj1bXTtsZXQgYSxsLHU9MCx3PTAsaD0wO2lmKDAhPT1lLmxlbmd0aCl7dC5udD0wLHQuZXQ9ZSx0LldlPWUubGVuZ3RoO2Rve2lmKHQucnQ9MCx0LnR0PW4sMCE9PXQuV2V8fGN8fCh0Lm50PTAsYz0hMCksYT10Ll90KDApLGMmJmE9PT1aZSl7aWYoMCE9PXQuV2UpdGhyb3cgbmV3IHMoXCJpbmZsYXRpbmc6IGJhZCBpbnB1dFwiKX1lbHNlIGlmKDAhPT1hJiYxIT09YSl0aHJvdyBuZXcgcyhcImluZmxhdGluZzogXCIrdC5MZSk7aWYoKGN8fDE9PT1hKSYmdC5XZT09PWUubGVuZ3RoKXRocm93IG5ldyBzKFwiaW5mbGF0aW5nOiBiYWQgaW5wdXRcIik7dC5ydCYmKHQucnQ9PT1uP2YucHVzaChuZXcgaShvKSk6Zi5wdXNoKG8uc3ViYXJyYXkoMCx0LnJ0KSkpLGgrPXQucnQsciYmdC5udD4wJiZ0Lm50IT11JiYocih0Lm50KSx1PXQubnQpfXdoaWxlKHQuV2U+MHx8MD09PXQudHQpO3JldHVybiBmLmxlbmd0aD4xPyhsPW5ldyBpKGgpLGYuZm9yRWFjaCgoZT0+e2wuc2V0KGUsdyksdys9ZS5sZW5ndGh9KSkpOmw9ZlswXT9uZXcgaShmWzBdKTpuZXcgaSxsfX0sdGhpcy5mbHVzaD0oKT0+e3QuQ3QoKX19aHQucHJvdG90eXBlPXt4dChlKXtjb25zdCB0PXRoaXM7cmV0dXJuIHQuZ3Q9bmV3IHd0LGV8fChlPTE1KSx0Lmd0Lnh0KHQsZSl9LF90KGUpe2NvbnN0IHQ9dGhpcztyZXR1cm4gdC5ndD90Lmd0Ll90KHQsZSk6WGV9LEN0KCl7Y29uc3QgZT10aGlzO2lmKCFlLmd0KXJldHVybiBYZTtjb25zdCB0PWUuZ3QuQ3QoZSk7cmV0dXJuIGUuZ3Q9bnVsbCx0fSxJdCgpe2NvbnN0IGU9dGhpcztyZXR1cm4gZS5ndD9lLmd0Lkl0KGUpOlhlfSxBdChlLHQpe2NvbnN0IG49dGhpcztyZXR1cm4gbi5ndD9uLmd0LkF0KG4sZSx0KTpYZX0sZnQoZSl7cmV0dXJuIHRoaXMuZXRbZV19LGplKGUsdCl7cmV0dXJuIHRoaXMuZXQuc3ViYXJyYXkoZSxlK3QpfX0sc2VsZi5pbml0Q29kZWM9KCk9PntzZWxmLkRlZmxhdGU9UWUsc2VsZi5JbmZsYXRlPWR0fTtcXG4nXSx7dHlwZTpcInRleHQvamF2YXNjcmlwdFwifSkpO2Uoe3dvcmtlclNjcmlwdHM6e2luZmxhdGU6W3RdLGRlZmxhdGU6W3RdfX0pfWV4cG9ydHtlIGFzIGNvbmZpZ3VyZVdlYldvcmtlcn07XG4iLCIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cIi4vaW5kZXguZC50c1wiIC8+XG5cbi8qXG4gQ29weXJpZ2h0IChjKSAyMDIyIEdpbGRhcyBMb3JtZWF1LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiBcbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuIDMuIFRoZSBuYW1lcyBvZiB0aGUgYXV0aG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEICcnQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXG4gSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKQ1JBRlQsXG4gSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsXG4gT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuaW1wb3J0IHsgRGVmbGF0ZSB9IGZyb20gXCIuL2xpYi9jb3JlL3N0cmVhbXMvY29kZWNzL2RlZmxhdGUuanNcIjtcbmltcG9ydCB7IEluZmxhdGUgfSBmcm9tIFwiLi9saWIvY29yZS9zdHJlYW1zL2NvZGVjcy9pbmZsYXRlLmpzXCI7XG5pbXBvcnQgeyBjb25maWd1cmUgfSBmcm9tIFwiLi9saWIvY29yZS9jb25maWd1cmF0aW9uLmpzXCI7XG5pbXBvcnQgeyBnZXRNaW1lVHlwZSB9IGZyb20gXCIuL2xpYi9jb3JlL3V0aWwvbWltZS10eXBlLmpzXCI7XG5pbXBvcnQgeyB0ZXJtaW5hdGVXb3JrZXJzIH0gZnJvbSBcIi4vbGliL2NvcmUvY29kZWMtcG9vbC5qc1wiO1xuXG5jb25maWd1cmUoeyBEZWZsYXRlLCBJbmZsYXRlIH0pO1xuXG5leHBvcnQge1xuXHRmcyxcblx0Y29uZmlndXJlLFxuXHRpbml0U2hpbUFzeW5jQ29kZWMsXG5cdFppcFJlYWRlcixcblx0WmlwV3JpdGVyLFxuXHRSZWFkZXIsXG5cdFdyaXRlcixcblx0VGV4dFJlYWRlcixcblx0VGV4dFdyaXRlcixcblx0RGF0YTY0VVJJUmVhZGVyLFxuXHREYXRhNjRVUklXcml0ZXIsXG5cdEJsb2JSZWFkZXIsXG5cdEJsb2JXcml0ZXIsXG5cdEh0dHBSZWFkZXIsXG5cdEh0dHBSYW5nZVJlYWRlcixcblx0VWludDhBcnJheVdyaXRlcixcblx0VWludDhBcnJheVJlYWRlcixcblx0U3BsaXRaaXBSZWFkZXIsXG5cdFNwbGl0WmlwV3JpdGVyLFxuXHRTcGxpdERhdGFSZWFkZXIsXG5cdFNwbGl0RGF0YVdyaXRlcixcblx0RVJSX0hUVFBfUkFOR0UsXG5cdEVSUl9CQURfRk9STUFULFxuXHRFUlJfRU9DRFJfTk9UX0ZPVU5ELFxuXHRFUlJfRU9DRFJfWklQNjRfTk9UX0ZPVU5ELFxuXHRFUlJfRU9DRFJfTE9DQVRPUl9aSVA2NF9OT1RfRk9VTkQsXG5cdEVSUl9DRU5UUkFMX0RJUkVDVE9SWV9OT1RfRk9VTkQsXG5cdEVSUl9MT0NBTF9GSUxFX0hFQURFUl9OT1RfRk9VTkQsXG5cdEVSUl9FWFRSQUZJRUxEX1pJUDY0X05PVF9GT1VORCxcblx0RVJSX0VOQ1JZUFRFRCxcblx0RVJSX1VOU1VQUE9SVEVEX0VOQ1JZUFRJT04sXG5cdEVSUl9VTlNVUFBPUlRFRF9DT01QUkVTU0lPTixcblx0RVJSX0lOVkFMSURfU0lHTkFUVVJFLFxuXHRFUlJfSU5WQUxJRF9QQVNTV09SRCxcblx0RVJSX0RVUExJQ0FURURfTkFNRSxcblx0RVJSX0lOVkFMSURfQ09NTUVOVCxcblx0RVJSX0lOVkFMSURfRU5UUllfTkFNRSxcblx0RVJSX0lOVkFMSURfRU5UUllfQ09NTUVOVCxcblx0RVJSX0lOVkFMSURfVkVSU0lPTixcblx0RVJSX0lOVkFMSURfRVhUUkFGSUVMRF9UWVBFLFxuXHRFUlJfSU5WQUxJRF9FWFRSQUZJRUxEX0RBVEEsXG5cdEVSUl9JTlZBTElEX0VOQ1JZUFRJT05fU1RSRU5HVEgsXG5cdEVSUl9VTlNVUFBPUlRFRF9GT1JNQVQsXG5cdEVSUl9TUExJVF9aSVBfRklMRSxcblx0RVJSX0lURVJBVE9SX0NPTVBMRVRFRF9UT09fU09PTlxufSBmcm9tIFwiLi9saWIvemlwLWZzLmpzXCI7XG5leHBvcnQgeyBnZXRNaW1lVHlwZSwgdGVybWluYXRlV29ya2VycyB9OyIsImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuXG5pbXBvcnQge1xuICAgIEJsb2JSZWFkZXIsXG4gICAgVGV4dFJlYWRlcixcbiAgICBaaXBSZWFkZXIsXG4gICAgVGV4dFdyaXRlcixcbiAgICBFbnRyeSxcbiAgICBCbG9iV3JpdGVyLFxufSBmcm9tIFwiQHppcC5qcy96aXAuanNcIjtcbmltcG9ydCB7IHNvbmdzIH0gZnJvbSBcIi4uL2VudGl0aWVzL3NvbmdcIjtcbmltcG9ydCBzb25nQ29udHJvbGxlciBmcm9tIFwiLi4vY29udHJvbGxlcnMvc29uZ0NvbnRyb2xsZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU29uZ0xvYWRlcigpIHtcbiAgICBjb25zdCBbaXNPdmVyLCBzZXRJc092ZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtmaWxlcywgc2V0RmlsZXNdID0gdXNlU3RhdGU8RmlsZVtdPihbXSk7XG5cbiAgICBjb25zdCBsb2FkU29uZ3MgPSBhc3luYyAoZmlsZXM6IEFycmF5PEVudHJ5PikgPT4ge1xuICAgICAgICBmaWxlcy5tYXAoYXN5bmMgZmlsZSA9PiB7XG4gICAgICAgICAgICBpZiAoZmlsZS5maWxlbmFtZS5lbmRzV2l0aChcIi5tcDNcIikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB3cml0ZXIgPSBuZXcgQmxvYldyaXRlcigpXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZpbGUuZ2V0RGF0YSh3cml0ZXIpXG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBmaWxlLmZpbGVuYW1lLnJlcGxhY2UoXCIubXAzXCIsIFwiXCIpXG5cbiAgICAgICAgICAgICAgICBhd2FpdCBzb25nQ29udHJvbGxlci5jcmVhdGVGaWxlKGlkLCBkYXRhKVxuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpbGUuZmlsZW5hbWUuZW5kc1dpdGgoXCIuanNvblwiKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdyaXRlciA9IG5ldyBUZXh0V3JpdGVyKClcbiAgICAgICAgICAgICAgICBjb25zdCBzb25nID0gSlNPTi5wYXJzZShhd2FpdCBmaWxlLmdldERhdGEod3JpdGVyKSlcbiAgICAgICAgICAgICAgICBhd2FpdCBzb25nQ29udHJvbGxlci5jcmVhdGUoc29uZylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJVbnN1cHBvcnRlZCBmb3JtYXQgZm9yXCIsIGZpbGUuZmlsZW5hbWUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgc29uZ3MudmFsdWUgPSBhd2FpdCBzb25nQ29udHJvbGxlci5nZXRBbGwoKVxuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgZXZlbnQgaGFuZGxlcnNcbiAgICBjb25zdCBoYW5kbGVEcmFnT3ZlciA9IChldmVudDogYW55KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNldElzT3Zlcih0cnVlKTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlRHJhZ0xlYXZlID0gKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc2V0SXNPdmVyKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlRHJvcCA9IChldmVudDogYW55KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNldElzT3ZlcihmYWxzZSk7XG5cbiAgICAgICAgLy8gRmV0Y2ggdGhlIGZpbGVzXG4gICAgICAgIGNvbnN0IGRyb3BwZWRGaWxlcyA9IEFycmF5LmZyb20oZXZlbnQuZGF0YVRyYW5zZmVyLmZpbGVzKSBhcyBBcnJheTxGaWxlPlxuICAgICAgICBzZXRGaWxlcyhkcm9wcGVkRmlsZXMpO1xuXG4gICAgICAgIC8vIFVzZSBGaWxlUmVhZGVyIHRvIHJlYWQgZmlsZSBjb250ZW50XG4gICAgICAgIGRyb3BwZWRGaWxlcy5mb3JFYWNoKChmaWxlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG4gICAgICAgICAgICByZWFkZXIub25sb2FkZW5kID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHppcCA9IG5ldyBaaXBSZWFkZXIobmV3IEJsb2JSZWFkZXIoZmlsZSkpXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZXMgPSBhd2FpdCB6aXAuZ2V0RW50cmllcygpXG4gICAgICAgICAgICAgICAgYXdhaXQgbG9hZFNvbmdzKGZpbGVzKVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVGhlcmUgd2FzIGFuIGlzc3VlIHJlYWRpbmcgdGhlIGZpbGUuJyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcbiAgICAgICAgICAgIHJldHVybiByZWFkZXI7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgICBvbkRyYWdPdmVyPXtoYW5kbGVEcmFnT3Zlcn1cbiAgICAgICAgICAgIG9uRHJhZ0xlYXZlPXtoYW5kbGVEcmFnTGVhdmV9XG4gICAgICAgICAgICBvbkRyb3A9e2hhbmRsZURyb3B9XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnNTBweCcsXG4gICAgICAgICAgICAgICAgd2lkdGg6ICczMDBweCcsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnMXB4IGRvdHRlZCcsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBpc092ZXIgPyAnbGlnaHRncmF5JyA6ICd3aGl0ZScsXG4gICAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgICBEcmFnIGFuZCBkcm9wIHNvbWUgZmlsZXMgaGVyZVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufVxuIiwiaW1wb3J0IFNvbmdTZXJ2aWNlIGZyb20gXCIuLi9zZXJ2aWNlcy9zb25nU2VydmljZVwiXG5pbXBvcnQgTXVzaWNQbGF5ZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvTXVzaWNQbGF5ZXJcIlxuaW1wb3J0IHNvbmdDb250cm9sbGVyIGZyb20gXCIuLi9jb250cm9sbGVycy9zb25nQ29udHJvbGxlclwiXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCJcbmltcG9ydCBQbGF5ZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvUGxheWVyXCJcbmltcG9ydCBQbGF5bGlzdCBmcm9tIFwiLi4vY29tcG9uZW50cy9QbGF5bGlzdFwiXG5pbXBvcnQgeyBTb25nLCBzb25ncyB9IGZyb20gXCIuLi9lbnRpdGllcy9zb25nXCJcbmltcG9ydCBTb25nTG9hZGVyIGZyb20gXCIuLi9jb21wb25lbnRzL1NvbmdMb2FkZXJcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEYXNoYm9hZCgpIHtcbiAgICAvLyBcbiAgICAvLyBGSVhNRSBNb3ZlIHRoaXNcbiAgICBjb25zdCBpbml0U29uZ3MgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICghc29uZ0NvbnRyb2xsZXIuZGIpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoaW5pdFNvbmdzLCAxMDAwKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc29uZ3MudmFsdWUgPSBhd2FpdCBzb25nQ29udHJvbGxlci5nZXRBbGwoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaW5pdFNvbmdzKClcbiAgICB9LCBbc29uZ3NdKVxuICAgIC8vIEZJWE1FIEVORFxuICAgIC8vIFxuICAgIHJldHVybiA8PlxuICAgICAgICB7LyogPGRpdiBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktYXJvdW5kIHB5LTQgdGV4dC00eGwgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy0xLzMgdGV4dC1yZWQtNjAwXCI+MjUwPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctMS8zXCI+MzAwPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctMS8zIHRleHQtZ3JlZW4tNjAwXCI+NTA8L2Rpdj5cbiAgICAgICAgPC9kaXYgPiAqL31cbiAgICAgICAgPFNvbmdMb2FkZXIgLz5cbiAgICAgICAgPFBsYXlsaXN0IC8+XG4gICAgICAgIDxQbGF5ZXIgLz5cbiAgICAgICAgPE11c2ljUGxheWVyIC8+XG4gICAgPC8+XG59IiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7IFN3aXRjaCwgUm91dGUgfSBmcm9tIFwid291dGVyLXByZWFjdFwiO1xuaW1wb3J0IHsgRGFzaGJvYXJkIH0gZnJvbSAnLi92aWV3cyc7XG5cbmNvbnN0IHJlZ2lzdGVyU2VydmljZVdvcmtlciA9IGFzeW5jICgpID0+IHtcbiAgICBpZiAoXCJzZXJ2aWNlV29ya2VyXCIgaW4gbmF2aWdhdG9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVHJ5IHRvIHJlZ2lzdGVyIHNlcnZpY2Ugd29ya2VyXCIpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZWdpc3RyYXRpb24gPSBhd2FpdCBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcihcIi9qcy9zdy5qc1wiLCB7XG4gICAgICAgICAgICAgICAgc2NvcGU6IFwiL1wiLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocmVnaXN0cmF0aW9uLmluc3RhbGxpbmcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkluc3RhbGxhdGlvbiBkdSBzZXJ2aWNlIHdvcmtlciBlbiBjb3Vyc1wiKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVnaXN0cmF0aW9uLndhaXRpbmcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNlcnZpY2Ugd29ya2VyIGluc3RhbGzDqVwiKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVnaXN0cmF0aW9uLmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2VydmljZSB3b3JrZXIgYWN0aWZcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBMJ2VucmVnaXN0cmVtZW50IGEgw6ljaG91w6kgOiAke2Vycm9yfWApO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuZnVuY3Rpb24gQXBwKCkge1xuICAgIGNvbnNvbGUubG9nKFwiSGVsbG8gYXBwXCIpXG4gICAgcmV0dXJuIDxTd2l0Y2g+XG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiXCIgY29tcG9uZW50PXtEYXNoYm9hcmR9IC8+XG4gICAgICAgIDxSb3V0ZT5cbiAgICAgICAgICAgIDQwNDogbm90aGluZyBmb3VuZCFcbiAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICA8Y29kZT57XCI8Um91dGUgLz5cIn08L2NvZGU+XG4gICAgICAgIDwvUm91dGU+XG4gICAgPC9Td2l0Y2g+XG59XG5cbnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikpO1xuXG5yZWdpc3RlclNlcnZpY2VXb3JrZXIoKTsiXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwicyIsIkFycmF5IiwiaXNBcnJheSIsInYiLCJsIiwidSIsInAiLCJ5IiwidCIsInIiLCJmIiwiYXJndW1lbnRzIiwiY2hpbGRyZW4iLCJkZWZhdWx0UHJvcHMiLCJ0eXBlIiwicHJvcHMiLCJyZWYiLCJfX2siLCJfXyIsIl9fYiIsIl9fZSIsIl9fZCIsIl9fYyIsImNvbnN0cnVjdG9yIiwiX192IiwiX19pIiwiX191Iiwidm5vZGUiLCJnIiwiYiIsImNvbnRleHQiLCJtIiwidyIsIngiLCJfX3IiLCJkZWJvdW5jZVJlbmRlcmluZyIsImMiLCJzb3J0Iiwic2hpZnQiLCJfX1AiLCJMIiwiX19uIiwib3duZXJTVkdFbGVtZW50IiwiTSIsIkMiLCJoIiwiXyIsIlAiLCJ6IiwiUyIsIm5leHRTaWJsaW5nIiwiU3RyaW5nIiwiSCIsIk4iLCJpbnNlcnRCZWZvcmUiLCJJIiwic2V0UHJvcGVydHkiLCJ0ZXN0IiwiVCIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsInNsaWNlIiwiRGF0ZSIsIm5vdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJEIiwiQSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVBdHRyaWJ1dGUiLCJldmVudCIsIiQiLCJjb250ZXh0VHlwZSIsInZhbHVlIiwiX19FIiwicmVuZGVyIiwiTyIsInN1YiIsInN0YXRlIiwiX19oIiwiX3NiIiwiX19zIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiZm9yRWFjaCIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJnZXRDaGlsZENvbnRleHQiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImluZGV4T2YiLCJqIiwiZGlmZmVkIiwic29tZSIsImxvY2FsTmFtZSIsIm5vZGVUeXBlIiwiY3JlYXRlRWxlbWVudE5TIiwiaXMiLCJjaGlsZE5vZGVzIiwibmFtZSIsIl9faHRtbCIsImlubmVySFRNTCIsImN1cnJlbnQiLCJ1bm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJFIiwiRiIsIkNvbnN1bWVyIiwiUHJvdmlkZXIiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJzZXRTdGF0ZSIsImNvbXBvbmVudERpZENhdGNoIiwiZm9yY2VVcGRhdGUiLCJQcm9taXNlIiwidGhlbiIsImJpbmQiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIl9fc291cmNlIiwiX19zZWxmIiwiX19IIiwiX19WIiwiX19OIiwiZmlsdGVyIiwiZXZlcnkiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjbGVhclRpbWVvdXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNhblVzZURPTSIsImZuIiwiYXJncyIsInJlbGF0aXZlUGF0aCIsInBhdGgiLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwiZXZlbnRQdXNoU3RhdGUiLCJldmVudFJlcGxhY2VTdGF0ZSIsImV2ZW50cyIsInN1YnNjcmliZVRvTG9jYXRpb25VcGRhdGVzIiwiY2FsbGJhY2siLCJjdXJyZW50UGF0aG5hbWUiLCJ1c2VQYXRobmFtZSIsInNzclBhdGgiLCJzdWJzY3JpYmUiLCJnZXRTbmFwc2hvdCIsImdldFNTUlNuYXBzaG90IiwiX2luc3RhbmNlIiwiX3ZhbHVlIiwiX2dldFNuYXBzaG90IiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJoaXN0b3J5Iiwib3JpZ2luYWwiLCJFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJlc2NhcGVSeCIsInN0ciIsInJ4Rm9yU2VnbWVudCIsInJlcGVhdCIsIm9wdGlvbmFsIiwicHJlZml4IiwiY2FwdHVyZSIsInBhdGhUb1JlZ2V4cCIsInBhdHRlcm4iLCJncm91cFJ4IiwibWF0Y2giLCJsYXN0SW5kZXgiLCJrZXlzIiwiZXhlYyIsInNlZ21lbnQiLCJtb2QiLCJwcmV2Iiwic3Vic3RyaW5nIiwicmVnZXhwIiwiUmVnRXhwIiwiZGVmYXVsdFJvdXRlciIsImhvb2siLCJvcHRzIiwidG8iLCJuYXZPcHRzIiwiYWJzb2x1dGVQYXRoIiwibWF0Y2hlciIsIm1ha2VSZWdleHBGbiIsImNhY2hlIiwiZ2V0UmVnZXhwIiwib3V0IiwicGFyYW1zIiwicmVkdWNlIiwiUm91dGVyQ3R4IiwidXNlUm91dGVyIiwidXNlTG9jYXRpb25Gcm9tUm91dGVyIiwicm91dGVyIiwiUGFyYW1zQ3R4IiwiUm91dGUiLCJjb21wb25lbnQiLCJ1c2VSb3V0ZU1hdGNoIiwidXNlUm91dGUiLCJtYXRjaGVzIiwiUGFyYW1zV3JhcHBlciIsImZsYXR0ZW5DaGlsZHJlbiIsIlN3aXRjaCIsIm9yaWdpbmFsTG9jYXRpb24iLCJTeW1ib2wiLCJmb3IiLCJVIiwidXNlU2lnbmFsIiwiX18kZiIsIl9fJHUiLCJwZWVrIiwiYnJhbmQiLCJ2YWx1ZU9mIiwidG9KU09OIiwic2V0IiwiZGlzcGxheU5hbWUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29uZmlndXJhYmxlIiwiX19ucCIsImNyZWF0ZVB1YlN1YiIsInRvcGljcyIsImRlc3Ryb3llZCIsImdldFRvcGljIiwidG9waWMiLCJsaXN0ZW5lcnMiLCJwdWJsaXNoIiwibGlzdGVuZXIiLCJkZXN0cm95IiwicHVic3ViIiwiYXVkaW8iLCJjdXJyZW50VGltZSIsImR1cmF0aW9uIiwicGxheWluZyIsInZvbHVtZSIsIm5ld0N1cnJlbnRUaW1lIiwiTWF0aCIsInJvdW5kIiwic2VlayIsInNlY29uZHMiLCJnZXRFbGVtZW50IiwiZ2V0U3RhdGUiLCJnZXRDdXJyZW50VGltZSIsInBsYXkiLCJwYXVzZSIsInNldFVybCIsInVybCIsIm9uQ2hhbmdlQ3VycmVudFRpbWUiLCJvbkVuZGVkIiwiY3JlYXRlQXVkaW8iLCJ0cmFja3MiLCJjdXJyZW50VHJhY2tJbmRleCIsImN1cnJlbnRUcmFjayIsImNoYW5nZVRyYWNrIiwidHJhY2siLCJuZXh0IiwibmV3SW5kZXgiLCJzZXRRdWV1ZSIsInBsYXlUcmFjayIsInRyYWNrSW5kZXgiLCJ1cGRhdGVTb25nU3RhdHVzIiwic3RhdHVzIiwiZmluZEluZGV4Iiwic29uZyIsImNyZWF0ZVBsYXllciIsInVzZVBsYXllclN0YXRlIiwibG9jYWxzIiwiaW5zdGFuY2VPZkFueSIsIm9iamVjdCIsImNvbnN0cnVjdG9ycyIsImlkYlByb3h5YWJsZVR5cGVzIiwiY3Vyc29yQWR2YW5jZU1ldGhvZHMiLCJjdXJzb3JSZXF1ZXN0TWFwIiwiV2Vha01hcCIsInRyYW5zYWN0aW9uRG9uZU1hcCIsInRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcCIsInRyYW5zZm9ybUNhY2hlIiwicmV2ZXJzZVRyYW5zZm9ybUNhY2hlIiwiaWRiUHJveHlUcmFwcyIsInJlY2VpdmVyIiwiSURCVHJhbnNhY3Rpb24iLCJvYmplY3RTdG9yZU5hbWVzIiwib2JqZWN0U3RvcmUiLCJoYXMiLCJ0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlIiwiZnVuYyIsIklEQkRhdGFiYXNlIiwidHJhbnNhY3Rpb24iLCJJREJDdXJzb3IiLCJhZHZhbmNlIiwiY29udGludWUiLCJjb250aW51ZVByaW1hcnlLZXkiLCJpbmNsdWRlcyIsInVud3JhcCIsInN0b3JlTmFtZXMiLCJ0eCIsImRvbmUiLCJyZWplY3QiLCJ1bmxpc3RlbiIsImNvbXBsZXRlIiwiZXJyb3IiLCJET01FeGNlcHRpb24iLCJjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24iLCJJREJPYmplY3RTdG9yZSIsIklEQkluZGV4IiwiUHJveHkiLCJJREJSZXF1ZXN0IiwicmVxdWVzdCIsInByb21pc2UiLCJzdWNjZXNzIiwiY2F0Y2giLCJwcm9taXNpZnlSZXF1ZXN0IiwibmV3VmFsdWUiLCJyZWFkTWV0aG9kcyIsIndyaXRlTWV0aG9kcyIsImNhY2hlZE1ldGhvZHMiLCJNYXAiLCJnZXRNZXRob2QiLCJ0YXJnZXRGdW5jTmFtZSIsInVzZUluZGV4IiwiaXNXcml0ZSIsIm1ldGhvZCIsImFzeW5jIiwic3RvcmVOYW1lIiwic3RvcmUiLCJhbGwiLCJvbGRUcmFwcyIsInNvbmdzIiwic29uZ0RCIiwidmVyc2lvbiIsImJsb2NrZWQiLCJ1cGdyYWRlIiwiYmxvY2tpbmciLCJ0ZXJtaW5hdGVkIiwiaW5kZXhlZERCIiwib3BlbiIsIm9wZW5Qcm9taXNlIiwib2xkVmVyc2lvbiIsIm5ld1ZlcnNpb24iLCJkYiIsIm9wZW5EQiIsImNvbnNvbGUiLCJsb2ciLCJzb25nU3RvcmUiLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJjcmVhdGVJbmRleCIsInNsZWVwIiwibWF4IiwicmFuZG9tIiwic29uZ0NvbnRyb2xsZXIiLCJpbml0IiwiY3JlYXRlIiwiZ2V0U3RhdHVzIiwiY3JlYXRlU3RhdHVzIiwicHV0IiwiY3JlYXRlRmlsZSIsInNvbmdJRCIsImZpbGUiLCJnZXRGaWxlIiwicmVuYW1lIiwidGl0bGUiLCJmbGFnRG93bmxvYWQiLCJwbGF5ZXIiLCJnZXRBbGwiLCJmbGFnRGVsZXRlIiwiZGVsZXRlIiwiY2hvc2VuIiwic2hvd2luZyIsIldoZWVsIiwic29uZ01lYXN1cmVUaW1lIiwib25Nb3VzZURvd24iLCJjbGllbnRYIiwiY2xpZW50WSIsIm9uTW91c2VVcCIsImFsZXJ0Iiwid2hlZWwiLCJvbk1vdXNlTW92ZSIsImR4IiwiZHkiLCJzcXJ0IiwiZGVnIiwiYXRhbjIiLCJQSSIsImZsb29yIiwiY2xhc3NOYW1lIiwib25Db250ZXh0TWVudSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwib25Ub3VjaFN0YXJ0IiwidG91Y2hlcyIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaEVuZCIsIk11c2ljUGxheWVyIiwiZm9ybWF0VGltZSIsImludCIsImRlY2ltYWwiLCJzZXRDdXJyZW50VGltZSIsInVzZUN1cnJlbnRUaW1lIiwibWluIiwic3RlcCIsIm9uQ2hhbmdlIiwidmlkZW9XcmFwcGVyUmVmIiwidmlkZW9XcmFwcGVyRWxlbWVudCIsInZpZGVvIiwiY2xhc3NMaXN0IiwiYXBwZW5kIiwiYWRkIiwiYm9keSIsImlzU2hvd1ZpZGVvIiwic2V0SXNTaG93VmlkZW8iLCJvbkNsaWNrIiwiY29sb3IiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJNQVhfQklUUyIsIkhFQVBfU0laRSIsIlpfU1RSRUFNX0VSUk9SIiwiZXh0cmFjdEFycmF5IiwiYXJyYXkiLCJmbGF0QXJyYXkiLCJmaWxsIiwiX2Rpc3RfY29kZSIsIlRyZWUiLCJ0aGF0IiwiYmlfcmV2ZXJzZSIsImNvZGUiLCJsZW4iLCJyZXMiLCJidWlsZF90cmVlIiwidHJlZSIsImR5bl90cmVlIiwic3RyZWUiLCJzdGF0X2Rlc2MiLCJzdGF0aWNfdHJlZSIsImVsZW1zIiwibm9kZSIsIm1heF9jb2RlIiwiaGVhcF9sZW4iLCJoZWFwX21heCIsImhlYXAiLCJkZXB0aCIsIm9wdF9sZW4iLCJzdGF0aWNfbGVuIiwicHFkb3duaGVhcCIsImV4dHJhIiwiZXh0cmFfYml0cyIsImV4dHJhX2Jhc2UiLCJtYXhfbGVuZ3RoIiwiYml0cyIsInhiaXRzIiwib3ZlcmZsb3ciLCJibF9jb3VudCIsImdlbl9iaXRsZW4iLCJuZXh0X2NvZGUiLCJnZW5fY29kZXMiLCJTdGF0aWNUcmVlIiwiX2xlbmd0aF9jb2RlIiwiYmFzZV9sZW5ndGgiLCJiYXNlX2Rpc3QiLCJkX2NvZGUiLCJkaXN0IiwiZXh0cmFfbGJpdHMiLCJleHRyYV9kYml0cyIsImV4dHJhX2JsYml0cyIsImJsX29yZGVyIiwic3RhdGljX2x0cmVlMl9zZWNvbmRfcGFydCIsInN0YXRpY19sdHJlZSIsInN0YXRpY19kdHJlZV9zZWNvbmRfcGFydCIsIkNvbmZpZyIsImdvb2RfbGVuZ3RoIiwibWF4X2xhenkiLCJuaWNlX2xlbmd0aCIsIm1heF9jaGFpbiIsInN0YXRpY19kdHJlZSIsInN0YXRpY19sX2Rlc2MiLCJMSVRFUkFMUyIsInN0YXRpY19kX2Rlc2MiLCJzdGF0aWNfYmxfZGVzYyIsImNvbmZpZ190YWJsZSIsInpfZXJybXNnIiwiQlVTWV9TVEFURSIsIkZJTklTSF9TVEFURSIsIk1JTl9MT09LQUhFQUQiLCJzbWFsbGVyIiwidG4yIiwidG0yIiwiRGVmbGF0ZSIsInN0cm0iLCJwZW5kaW5nX2J1Zl9zaXplIiwibGFzdF9mbHVzaCIsIndfc2l6ZSIsIndfYml0cyIsIndfbWFzayIsIndpbiIsIndpbmRvd19zaXplIiwiaW5zX2giLCJoYXNoX3NpemUiLCJoYXNoX2JpdHMiLCJoYXNoX21hc2siLCJoYXNoX3NoaWZ0IiwiYmxvY2tfc3RhcnQiLCJtYXRjaF9sZW5ndGgiLCJwcmV2X21hdGNoIiwibWF0Y2hfYXZhaWxhYmxlIiwic3Ryc3RhcnQiLCJtYXRjaF9zdGFydCIsImxvb2thaGVhZCIsInByZXZfbGVuZ3RoIiwibWF4X2NoYWluX2xlbmd0aCIsIm1heF9sYXp5X21hdGNoIiwibGV2ZWwiLCJzdHJhdGVneSIsImdvb2RfbWF0Y2giLCJuaWNlX21hdGNoIiwiZHluX2x0cmVlIiwiZHluX2R0cmVlIiwiYmxfdHJlZSIsImxfZGVzYyIsImRfZGVzYyIsImJsX2Rlc2MiLCJsaXRfYnVmc2l6ZSIsImxhc3RfbGl0IiwibGFzdF9lb2JfbGVuIiwiYmlfYnVmIiwiYmlfdmFsaWQiLCJpbml0X2Jsb2NrIiwiRU5EX0JMT0NLIiwic2Nhbl90cmVlIiwiY3VybGVuIiwicHJldmxlbiIsIm5leHRsZW4iLCJtYXhfY291bnQiLCJtaW5fY291bnQiLCJSRVBfM182IiwiUkVQWl8zXzEwIiwiUkVQWl8xMV8xMzgiLCJwdXRfYnl0ZSIsInBlbmRpbmdfYnVmIiwicGVuZGluZyIsInB1dF9zaG9ydCIsInNlbmRfYml0cyIsInZhbCIsInNlbmRfY29kZSIsImMyIiwic2VuZF90cmVlIiwiYmlfZmx1c2giLCJfdHJfdGFsbHkiLCJsYyIsIm91dF9sZW5ndGgiLCJpbl9sZW5ndGgiLCJkY29kZSIsImRpc3RfYnVmIiwibGNfYnVmIiwiY29tcHJlc3NfYmxvY2siLCJsdHJlZSIsImR0cmVlIiwibHgiLCJiaV93aW5kdXAiLCJfdHJfc3RvcmVkX2Jsb2NrIiwiYnVmIiwic3RvcmVkX2xlbiIsImVvZiIsImhlYWRlciIsInN1YmFycmF5IiwiY29weV9ibG9jayIsImZsdXNoX2Jsb2NrX29ubHkiLCJvcHRfbGVuYiIsInN0YXRpY19sZW5iIiwibWF4X2JsaW5kZXgiLCJCTF9DT0RFUyIsImJ1aWxkX2JsX3RyZWUiLCJsY29kZXMiLCJkY29kZXMiLCJibGNvZGVzIiwicmFuayIsInNlbmRfYWxsX3RyZWVzIiwiX3RyX2ZsdXNoX2Jsb2NrIiwiZmx1c2hfcGVuZGluZyIsImZpbGxfd2luZG93IiwibW9yZSIsImF2YWlsX2luIiwicmVhZF9idWYiLCJsb25nZXN0X21hdGNoIiwiY3VyX21hdGNoIiwiY2hhaW5fbGVuZ3RoIiwic2NhbiIsImJlc3RfbGVuIiwibGltaXQiLCJfbmljZV9tYXRjaCIsIndtYXNrIiwic3RyZW5kIiwic2Nhbl9lbmQxIiwic2Nhbl9lbmQiLCJkZWZsYXRlSW5pdCIsIl9sZXZlbCIsIl9tZXRob2QiLCJtZW1MZXZlbCIsIl9zdHJhdGVneSIsIm1zZyIsImRzdGF0ZSIsIlVpbnQ4QXJyYXkiLCJVaW50MTZBcnJheSIsInRvdGFsX2luIiwidG90YWxfb3V0IiwicGVuZGluZ19vdXQiLCJNSU5fTUFUQ0giLCJsbV9pbml0IiwiZGVmbGF0ZVJlc2V0IiwiZGVmbGF0ZUVuZCIsImRlZmxhdGVQYXJhbXMiLCJlcnIiLCJkZWZsYXRlIiwiZGVmbGF0ZVNldERpY3Rpb25hcnkiLCJfc3RybSIsImRpY3Rpb25hcnkiLCJkaWN0TGVuZ3RoIiwiZmx1c2giLCJsZXZlbF9mbGFncyIsIm9sZF9mbHVzaCIsImJzdGF0ZSIsIm5leHRfb3V0IiwibmV4dF9pbiIsIlpfTkVFRF9ESUNUIiwiYXZhaWxfb3V0IiwicHV0U2hvcnRNU0IiLCJtYXhfc3RhcnQiLCJtYXhfYmxvY2tfc2l6ZSIsImRlZmxhdGVfc3RvcmVkIiwiYmZsdXNoIiwiaGFzaF9oZWFkIiwiZGVmbGF0ZV9mYXN0IiwibWF4X2luc2VydCIsImRlZmxhdGVfc2xvdyIsIlNUQVRJQ19UUkVFUyIsIlpTdHJlYW0iLCJuZXh0X2luX2luZGV4IiwibmV4dF9vdXRfaW5kZXgiLCJyZXQiLCJzdGFydCIsInNpemUiLCJaX01FTV9FUlJPUiIsImluZmxhdGVfbWFzayIsIk1BTlkiLCJmaXhlZF90bCIsImZpeGVkX3RkIiwiY3BsZW5zIiwiY3BsZXh0IiwiY3BkaXN0IiwiY3BkZXh0IiwiQk1BWCIsIkluZlRyZWUiLCJobiIsImh1ZnRfYnVpbGQiLCJiaW5kZXgiLCJocCIsIm1hc2siLCJxIiwieHAiLCJpbml0V29ya0FyZWEiLCJ2c2l6ZSIsIkludDMyQXJyYXkiLCJpbmZsYXRlX3RyZWVzX2JpdHMiLCJiYiIsInRiIiwiaW5mbGF0ZV90cmVlc19keW5hbWljIiwibmwiLCJuZCIsImJsIiwiYmQiLCJ0bCIsInRkIiwiaW5mbGF0ZV90cmVlc19maXhlZCIsIlNUQVJUIiwiTEVOIiwiTEVORVhUIiwiRElTVCIsIkRJU1RFWFQiLCJDT1BZIiwiTElUIiwiV0FTSCIsIkVORCIsIkJBRENPREUiLCJJbmZDb2RlcyIsIm1vZGUiLCJ0cmVlX2luZGV4IiwibmVlZCIsImxpdCIsImxiaXRzIiwiZGJpdHMiLCJsdHJlZV9pbmRleCIsImR0cmVlX2luZGV4IiwiaW5mbGF0ZV9mYXN0IiwidGxfaW5kZXgiLCJ0ZF9pbmRleCIsInRwIiwidHBfaW5kZXgiLCJtbCIsIm1kIiwidHBfaW5kZXhfdF8zIiwiYml0YiIsImJpdGsiLCJ3cml0ZSIsInJlYWQiLCJlbmQiLCJyZWFkX2J5dGUiLCJwcm9jIiwidGluZGV4IiwiaW5mbGF0ZV9mbHVzaCIsImZyZWUiLCJib3JkZXIiLCJUWVBFIiwiTEVOUyIsIlRBQkxFIiwiQlRSRUUiLCJEVFJFRSIsIkNPREVTIiwiRFJZIiwiRE9ORUxPQ0tTIiwiQkFEQkxPQ0tTIiwiSW5mQmxvY2tzIiwiYmxlbnMiLCJsZWZ0IiwidGFibGUiLCJjb2RlcyIsImxhc3QiLCJodWZ0cyIsImluZnRyZWUiLCJyZXNldCIsImJsXyIsImJkXyIsInRsXyIsInRkXyIsInNldF9kaWN0aW9uYXJ5Iiwic3luY19wb2ludCIsIkJBRCIsIm1hcmsiLCJJbmZsYXRlIiwiaW5mbGF0ZVJlc2V0IiwiaXN0YXRlIiwiYmxvY2tzIiwid2FzIiwibWFya2VyIiwid2JpdHMiLCJpbmZsYXRlRW5kIiwiaW5mbGF0ZUluaXQiLCJpbmZsYXRlIiwiaW5mbGF0ZVNldERpY3Rpb25hcnkiLCJpbmZsYXRlU3luYyIsImluZmxhdGVTeW5jUG9pbnQiLCJNQVhfMzJfQklUUyIsIk1BWF8xNl9CSVRTIiwiQ0VOVFJBTF9GSUxFX0hFQURFUl9TSUdOQVRVUkUiLCJaSVA2NF9FTkRfT0ZfQ0VOVFJBTF9ESVJfU0lHTkFUVVJFIiwiRU5EX09GX0NFTlRSQUxfRElSX0xFTkdUSCIsIlVOREVGSU5FRF9WQUxVRSIsIlVOREVGSU5FRF9UWVBFIiwiRlVOQ1RJT05fVFlQRSIsIlN0cmVhbUFkYXB0ZXIiLCJDb2RlYyIsIlRyYW5zZm9ybVN0cmVhbSIsIl9mb3JtYXQiLCJjb2RlYyIsInN1cGVyIiwidHJhbnNmb3JtIiwiY2h1bmsiLCJjb250cm9sbGVyIiwiZW5xdWV1ZSIsIm1heFdvcmtlcnMiLCJuYXZpZ2F0b3IiLCJoYXJkd2FyZUNvbmN1cnJlbmN5IiwiX2Vycm9yIiwiREVGQVVMVF9DT05GSUdVUkFUSU9OIiwiY2h1bmtTaXplIiwidGVybWluYXRlV29ya2VyVGltZW91dCIsInVzZVdlYldvcmtlcnMiLCJ1c2VDb21wcmVzc2lvblN0cmVhbSIsIndvcmtlclNjcmlwdHMiLCJDb21wcmVzc2lvblN0cmVhbU5hdGl2ZSIsIkNvbXByZXNzaW9uU3RyZWFtIiwiRGVjb21wcmVzc2lvblN0cmVhbU5hdGl2ZSIsIkRlY29tcHJlc3Npb25TdHJlYW0iLCJjb25maWciLCJhc3NpZ24iLCJjb25maWd1cmUiLCJjb25maWd1cmF0aW9uIiwiYmFzZVVSTCIsInNldElmRGVmaW5lZCIsInByb3BlcnR5TmFtZSIsInByb3BlcnR5VmFsdWUiLCJtaW1lVHlwZXMiLCJzdWJ0eXBlIiwiaW5kZXhNaW1lVHlwZSIsIkNyYzMyIiwiY3JjIiwib2Zmc2V0IiwiQ3JjMzJTdHJlYW0iLCJzdHJlYW0iLCJjcmMzMiIsIkRhdGFWaWV3IiwiYnVmZmVyIiwic2V0VWludDMyIiwiYml0QXJyYXkiLCJhMSIsImEyIiwiZ2V0UGFydGlhbCIsIl9zaGlmdFJpZ2h0IiwiYml0TGVuZ3RoIiwiY2xhbXAiLCJjZWlsIiwicGFydGlhbCIsIl9lbmQiLCJjYXJyeSIsImxhc3QyIiwic2hpZnQyIiwicG9wIiwiYnl0ZXMiLCJmcm9tQml0cyIsImFyciIsImJ5dGVMZW5ndGgiLCJ0bXAiLCJ0b0JpdHMiLCJoYXNoIiwic2hhMSIsImJsb2NrU2l6ZSIsIl9pbml0IiwiX2tleSIsIl9oIiwiX2J1ZmZlciIsIl9sZW5ndGgiLCJ1dGY4U3RyaW5nIiwib2wiLCJVaW50MzJBcnJheSIsIl9ibG9jayIsImZpbmFsaXplIiwiX2YiLCJfUyIsIndvcmRzIiwiY2lwaGVyIiwiYWVzIiwiX3RhYmxlcyIsIl9wcmVjb21wdXRlIiwic2JveCIsImRlY1RhYmxlIiwia2V5TGVuIiwiZW5jS2V5IiwiZGVjS2V5IiwicmNvbiIsImVuY3J5cHQiLCJfY3J5cHQiLCJkZWNyeXB0IiwiZW5jVGFibGUiLCJzYm94SW52IiwidGgiLCJ4SW52IiwieDIiLCJ4NCIsIng4IiwidERlYyIsInRFbmMiLCJpbnB1dCIsImRpciIsIm5Jbm5lclJvdW5kcyIsInQwIiwidDEiLCJ0MiIsInQzIiwiYjIiLCJrSW5kZXgiLCJnZXRSYW5kb21WYWx1ZXMiLCJ0eXBlZEFycmF5IiwibV93IiwibV96IiwicmNhY2hlIiwiX3IiLCJwcmYiLCJpdiIsIl9wcmYiLCJfaW5pdEl2IiwiX2l2IiwiY2FsY3VsYXRlIiwiaW5jV29yZCIsIndvcmQiLCJiMSIsImIzIiwiaW5jQ291bnRlciIsImNvdW50ZXIiLCJtaXNjIiwiaW1wb3J0S2V5IiwicGFzc3dvcmQiLCJobWFjU2hhMSIsInBia2RmMiIsInNhbHQiLCJ1aSIsImFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJvdXRMZW5ndGgiLCJzZXRJbnQzMiIsImhtYWMiLCJIYXNoIiwiX2hhc2giLCJleEtleSIsIl9iYXNlSGFzaCIsImJzIiwiX3Jlc3VsdEhhc2giLCJfdXBkYXRlZCIsImRpZ2VzdCIsIkdFVF9SQU5ET01fVkFMVUVTX1NVUFBPUlRFRCIsImNyeXB0byIsIkVSUl9JTlZBTElEX1BBU1NXT1JEIiwiRVJSX0lOVkFMSURfU0lHTkFUVVJFIiwiRVJSX0FCT1JUX0NIRUNLX1BBU1NXT1JEIiwiQkxPQ0tfTEVOR1RIIiwiUEJLREYyX0FMR09SSVRITSIsIkJBU0VfS0VZX0FMR09SSVRITSIsIkRFUklWRURfQklUU19BTEdPUklUSE0iLCJpdGVyYXRpb25zIiwiREVSSVZFRF9CSVRTX1VTQUdFIiwiU0FMVF9MRU5HVEgiLCJLRVlfTEVOR1RIIiwiU0lHTkFUVVJFX0xFTkdUSCIsIkNPVU5URVJfREVGQVVMVF9WQUxVRSIsIkNSWVBUT19BUElfU1VQUE9SVEVEIiwic3VidGxlIiwiU1VCVExFX0FQSV9TVVBQT1JURUQiLCJjb2RlY0J5dGVzIiwiQWVzIiwiQ3RyR2xhZG1hbiIsIkhtYWNTaGExIiwiSU1QT1JUX0tFWV9TVVBQT1JURUQiLCJERVJJVkVfQklUU19TVVBQT1JURUQiLCJkZXJpdmVCaXRzIiwiQUVTRGVjcnlwdGlvblN0cmVhbSIsInNpZ25lZCIsImVuY3J5cHRpb25TdHJlbmd0aCIsImNoZWNrUGFzc3dvcmRPbmx5IiwicmVhZHkiLCJyZXNvbHZlUmVhZHkiLCJzdHJlbmd0aCIsImFlc0NyeXB0byIsInByZWFtYmxlIiwicGFzc3dvcmRWZXJpZmljYXRpb25LZXkiLCJjcmVhdGVLZXlzIiwicGFzc3dvcmRWZXJpZmljYXRpb24iLCJjcmVhdGVEZWNyeXB0aW9uS2V5cyIsIm91dHB1dCIsImN0ciIsImNodW5rVG9EZWNyeXB0Iiwib3JpZ2luYWxTaWduYXR1cmUiLCJkZWNyeXB0ZWRDaHVua0FycmF5IiwiZW5jcnlwdGVkQ2h1bmsiLCJkZWNyeXB0ZWRDaHVuayIsInNpZ25hdHVyZSIsImluZGV4U2lnbmF0dXJlIiwiQUVTRW5jcnlwdGlvblN0cmVhbSIsImNyZWF0ZUVuY3J5cHRpb25LZXlzIiwiZW5jcnlwdGVkQ2h1bmtBcnJheSIsInBhZGRpbmdTdGFydCIsInBhZGRpbmdFbmQiLCJ2ZXJpZnlTaWduYXR1cmUiLCJpbnB1dExlbmd0aCIsImlucHV0QXJyYXkiLCJleHBhbmQiLCJpbnB1dENodW5rIiwib3V0cHV0Q2h1bmsiLCJlbmNvZGVkUGFzc3dvcmQiLCJUZXh0RW5jb2RlciIsImNoYXJDb2RlQXQiLCJlbmNvZGUiLCJlbmNvZGVUZXh0IiwiYmFzZUtleSIsImZvcm1hdCIsImFsZ29yaXRobSIsImV4dHJhY3RhYmxlIiwia2V5VXNhZ2VzIiwiZGVyaXZlZEJpdHMiLCJjb21wb3NpdGVLZXkiLCJhdXRoZW50aWNhdGlvbiIsImZyb20iLCJsZWZ0QXJyYXkiLCJyaWdodEFycmF5IiwiYmVnaW4iLCJaaXBDcnlwdG9EZWNyeXB0aW9uU3RyZWFtIiwiemlwQ3J5cHRvIiwiZGVjcnlwdGVkSGVhZGVyIiwiSEVBREVSX0xFTkdUSCIsIlppcENyeXB0b0VuY3J5cHRpb25TdHJlYW0iLCJnZXRCeXRlIiwidXBkYXRlS2V5cyIsImNyY0tleTAiLCJjcmNLZXkyIiwiYnl0ZSIsImtleTAiLCJrZXkxIiwia2V5MiIsImdldEludDMyIiwiaW11bCIsImdldEludDgiLCJ0ZW1wIiwibnVtYmVyIiwiQ09NUFJFU1NJT05fRk9STUFUIiwiRGVmbGF0ZVN0cmVhbSIsImNvbXByZXNzZWQiLCJlbmNyeXB0ZWQiLCJjcmMzMlN0cmVhbSIsImVuY3J5cHRpb25TdHJlYW0iLCJyZWFkYWJsZSIsImZpbHRlckVtcHR5Q2h1bmtzIiwicGlwZVRocm91Z2giLCJwaXBlVGhyb3VnaENvbW1wcmVzc2lvblN0cmVhbSIsInNldFJlYWRhYmxlIiwiZ2V0VWludDMyIiwiSW5mbGF0ZVN0cmVhbSIsImRlY3J5cHRpb25TdHJlYW0iLCJkYXRhVmlld1NpZ25hdHVyZSIsIkNvZGVjU3RyZWFtTmF0aXZlIiwiQ29kZWNTdHJlYW0iLCJ0cmFuc2Zvcm1TdHJlYW0iLCJNRVNTQUdFX0VWRU5UX1RZUEUiLCJNRVNTQUdFX1BVTEwiLCJNRVNTQUdFX0RBVEEiLCJNRVNTQUdFX0FDS19EQVRBIiwiTUVTU0FHRV9DTE9TRSIsIkNPREVDX0lORkxBVEUiLCJjb2RlY1R5cGUiLCJTdHJlYW0iLCJzdGFydHNXaXRoIiwiV0VCX1dPUktFUlNfU1VQUE9SVEVEIiwiV29ya2VyIiwiQ29kZWNXb3JrZXIiLCJ3b3JrZXJEYXRhIiwid3JpdGFibGUiLCJzdHJlYW1PcHRpb25zIiwidHJhbnNmZXJTdHJlYW1zIiwic2NyaXB0cyIsIm9uVGFza0ZpbmlzaGVkIiwic2lnbmFsIiwiYnVzeSIsIlByb2dyZXNzV2F0Y2hlclN0cmVhbSIsInRlcm1pbmF0ZSIsIndvcmtlciIsImludGVyZmFjZSIsImNyZWF0ZVdlYldvcmtlckludGVyZmFjZSIsImNyZWF0ZVdvcmtlckludGVyZmFjZSIsInJlYWRhYmxlU291cmNlIiwib25zdGFydCIsIm9ucHJvZ3Jlc3MiLCJvbmVuZCIsImNodW5rT2Zmc2V0IiwiY2FsbEhhbmRsZXIiLCJoaWdoV2F0ZXJNYXJrIiwiaGFuZGxlciIsInBhcmFtZXRlcnMiLCJydW4iLCJjb2RlY1N0cmVhbSIsInBpcGVUbyIsInByZXZlbnRDbG9zZSIsInByZXZlbnRBYm9ydCIsInJ1bldvcmtlciIsImdldFdlYldvcmtlciIsInJlc29sdmVSZXN1bHQiLCJyZWplY3RSZXN1bHQiLCJyZWFkZXIiLCJ3cml0ZXIiLCJjbG9zZWQiLCJ3cml0YWJsZVNvdXJjZSIsImdldFdyaXRlciIsInJlc29sdmVTdHJlYW1DbG9zZWQiLCJXcml0YWJsZVN0cmVhbSIsImNsb3NlIiwicmVsZWFzZUxvY2siLCJhYm9ydCIsInJlYXNvbiIsIndhdGNoQ2xvc2VkU3RyZWFtIiwic2VuZE1lc3NhZ2UiLCJnZXRSZWFkZXIiLCJyZXN1bHRWYWx1ZSIsInJ1bldlYldvcmtlciIsImNsYXNzaWNXb3JrZXJzU3VwcG9ydGVkIiwidHJhbnNmZXJTdHJlYW1zU3VwcG9ydGVkIiwid29ya2VyT3B0aW9ucyIsInNjcmlwdFVybCIsIm1lc3NhZ2VJZCIsIm1lc3NhZ2UiLCJzdGFjayIsInJlc3BvbnNlRXJyb3IiLCJvbk1lc3NhZ2UiLCJ0cmFuc2ZlcmFibGVzIiwicG9zdE1lc3NhZ2UiLCJwb29sIiwicGVuZGluZ1JlcXVlc3RzIiwiaW5kZXhXb3JrZXIiLCJjbGVhclRlcm1pbmF0ZVRpbWVvdXQiLCJ0ZXJtaW5hdGVUaW1lb3V0IiwiREVGQVVMVF9DSFVOS19TSVpFIiwiUFJPUEVSVFlfTkFNRV9XUklUQUJMRSIsImluaXRpYWxpemVkIiwiUmVhZGVyIiwiUmVhZGFibGVTdHJlYW0iLCJwdWxsIiwiZGlza051bWJlclN0YXJ0IiwicmVhZFVpbnQ4QXJyYXkiLCJCbG9iUmVhZGVyIiwiYmxvYiIsIm9mZnNldEVuZCIsIkJsb2JXcml0ZXIiLCJjb250ZW50VHlwZSIsImhlYWRlcnMiLCJSZXNwb25zZSIsImdldERhdGEiLCJUZXh0V3JpdGVyIiwiZW5jb2RpbmciLCJ1dGY4IiwidGV4dCIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJvbmVycm9yIiwicmVhZEFzVGV4dCIsIlNwbGl0RGF0YVJlYWRlciIsInJlYWRlcnMiLCJsYXN0RGlza051bWJlciIsImxhc3REaXNrT2Zmc2V0IiwiZGlza1JlYWRlciIsImluZGV4RGlza1JlYWRlciIsImRpc2tOdW1iZXIiLCJjdXJyZW50RGlza051bWJlciIsImN1cnJlbnRSZWFkZXJPZmZzZXQiLCJjdXJyZW50UmVhZGVyIiwiY3VycmVudFJlYWRlclNpemUiLCJjaHVua0xlbmd0aCIsIlNwbGl0RGF0YVdyaXRlciIsIndyaXRlckdlbmVyYXRvciIsIm1heFNpemUiLCJ6aXBXcml0ZXIiLCJkaXNrU291cmNlV3JpdGVyIiwiZGlza1dyaXRhYmxlIiwiZGlza1dyaXRlciIsImRpc2tPZmZzZXQiLCJhdmFpbGFibGVTaXplIiwid3JpdGVDaHVuayIsImNsb3NlRGlzayIsImluaXRTdHJlYW0iLCJpbml0U2l6ZSIsImluaXRSZWFkZXIiLCJDUDQzNyIsInNwbGl0IiwiVkFMSURfQ1A0MzciLCJkZWNvZGVUZXh0IiwidHJpbSIsInN0cmluZ1ZhbHVlIiwiaW5kZXhDaGFyYWN0ZXIiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsImRlY29kZUNQNDM3IiwiUFJPUEVSVFlfTkFNRV9GSUxFTkFNRSIsIlBST1BFUlRZX05BTUVfUkFXX0ZJTEVOQU1FIiwiUFJPUEVSVFlfTkFNRV9DT01NRU5UIiwiUFJPUEVSVFlfTkFNRV9SQVdfQ09NTUVOVCIsIlBST1BFUlRZX05BTUVfVU5DT01QUFJFU1NFRF9TSVpFIiwiUFJPUEVSVFlfTkFNRV9DT01QUFJFU1NFRF9TSVpFIiwiUFJPUEVSVFlfTkFNRV9PRkZTRVQiLCJQUk9QRVJUWV9OQU1FX0RJU0tfTlVNQkVSX1NUQVJUIiwiUFJPUEVSVFlfTkFNRV9MQVNUX01PRElGSUNBVElPTl9EQVRFIiwiUFJPUEVSVFlfTkFNRV9SQVdfTEFTVF9NT0RJRklDQVRJT05fREFURSIsIlBST1BFUlRZX05BTUVfTEFTVF9BQ0NFU1NfREFURSIsIlBST1BFUlRZX05BTUVfQ1JFQVRJT05fREFURSIsIlBST1BFUlRZX05BTUVTIiwiRW50cnkiLCJFUlJfQkFEX0ZPUk1BVCIsIkVSUl9VTlNVUFBPUlRFRF9DT01QUkVTU0lPTiIsIkVSUl9TUExJVF9aSVBfRklMRSIsIkNIQVJTRVRfVVRGOCIsIkNIQVJTRVRfQ1A0MzciLCJaSVA2NF9QUk9QRVJUSUVTIiwiWklQNjRfRVhUUkFDVElPTiIsImdldFZhbHVlIiwiZ2V0QmlnVWludDY0IiwiWmlwUmVhZGVyIiwiZ2V0RW50cmllc0dlbmVyYXRvciIsInppcFJlYWRlciIsImdldENodW5rU2l6ZSIsImVuZE9mRGlyZWN0b3J5SW5mbyIsInN0YXJ0T2Zmc2V0IiwibWluaW11bUJ5dGVzIiwibWF4aW11bUxlbmd0aCIsInNpZ25hdHVyZUFycmF5IiwiZ2V0RGF0YVZpZXciLCJpbmRleEJ5dGUiLCJzZWVrU2lnbmF0dXJlIiwiZW5kT2ZEaXJlY3RvcnlWaWV3IiwiZGlyZWN0b3J5RGF0YUxlbmd0aCIsImRpcmVjdG9yeURhdGFPZmZzZXQiLCJjb21tZW50T2Zmc2V0IiwiY29tbWVudExlbmd0aCIsImdldFVpbnQxNiIsImFwcGVuZGVkRGF0YU9mZnNldCIsImV4cGVjdGVkTGFzdERpc2tOdW1iZXIiLCJmaWxlc0xlbmd0aCIsInByZXBlbmRlZERhdGFMZW5ndGgiLCJlbmRPZkRpcmVjdG9yeUxvY2F0b3JWaWV3IiwiZW5kT2ZEaXJlY3RvcnlBcnJheSIsImV4cGVjdGVkRGlyZWN0b3J5RGF0YU9mZnNldCIsIm9yaWdpbmFsRGlyZWN0b3J5RGF0YU9mZnNldCIsImRpcmVjdG9yeUFycmF5IiwiZGlyZWN0b3J5VmlldyIsImV4cGVjdGVkRGlyZWN0b3J5RGF0YUxlbmd0aCIsImZpbGVuYW1lRW5jb2RpbmciLCJnZXRPcHRpb25WYWx1ZSIsImNvbW1lbnRFbmNvZGluZyIsImluZGV4RmlsZSIsImZpbGVFbnRyeSIsIlppcEVudHJ5IiwicmVhZENvbW1vbkhlYWRlciIsImxhbmd1YWdlRW5jb2RpbmdGbGFnIiwiQm9vbGVhbiIsImJpdEZsYWciLCJmaWxlbmFtZU9mZnNldCIsImV4dHJhRmllbGRPZmZzZXQiLCJmaWxlbmFtZUxlbmd0aCIsImV4dHJhRmllbGRMZW5ndGgiLCJ2ZXJzaW9uTWFkZUJ5IiwibXNEb3NDb21wYXRpYmxlIiwicmF3RmlsZW5hbWUiLCJlbmRPZmZzZXQiLCJyYXdDb21tZW50IiwiZmlsZW5hbWVVVEY4IiwiY29tbWVudFVURjgiLCJkaXJlY3RvcnkiLCJnZXRVaW50OCIsIm9mZnNldEZpbGVFbnRyeSIsImNvbXByZXNzZWRTaXplIiwidW5jb21wcmVzc2VkU2l6ZSIsImludGVybmFsRmlsZUF0dHJpYnV0ZSIsImV4dGVybmFsRmlsZUF0dHJpYnV0ZSIsInJhd0V4dHJhRmllbGQiLCJmaWxlbmFtZSIsImNvbW1lbnQiLCJlbmRzV2l0aCIsInJlYWRDb21tb25Gb290ZXIiLCJlbnRyeSIsImV4dHJhY3RQcmVwZW5kZWREYXRhIiwiZXh0cmFjdEFwcGVuZGVkRGF0YSIsInByZXBlbmRlZERhdGEiLCJhcHBlbmRlZERhdGEiLCJnZXRFbnRyaWVzIiwiZW50cmllcyIsInppcEVudHJ5IiwiZXh0cmFGaWVsZEFFUyIsImNvbXByZXNzaW9uTWV0aG9kIiwicmF3TGFzdE1vZERhdGUiLCJsb2NhbERpcmVjdG9yeSIsImRhdGFWaWV3Iiwib3JpZ2luYWxDb21wcmVzc2lvbk1ldGhvZCIsImxhc3RBY2Nlc3NEYXRlIiwiY3JlYXRpb25EYXRlIiwiZGF0YU9mZnNldCIsIkluZmluaXR5IiwiaW5pdFdyaXRlciIsImRhdGFEZXNjcmlwdG9yIiwib3V0cHV0U2l6ZSIsInN0cmVhbUNvcHkiLCJmaW5kIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJsb2NrZWQiLCJyYXdCaXRGbGFnIiwibGFzdE1vZERhdGUiLCJnZXREYXRlIiwiZXh0cmFGaWVsZCIsInJhd0V4dHJhRmllbGRWaWV3Iiwib2Zmc2V0RXh0cmFGaWVsZCIsImV4dHJhRmllbGRaaXA2NCIsInppcDY0IiwiZXh0cmFGaWVsZFZpZXciLCJtaXNzaW5nUHJvcGVydGllcyIsImluZGV4TWlzc2luZ1Byb3BlcnR5IiwiZXh0cmFjdGlvbiIsInJlYWRFeHRyYUZpZWxkWmlwNjQiLCJleHRyYUZpZWxkVW5pY29kZVBhdGgiLCJyZWFkRXh0cmFGaWVsZFVuaWNvZGUiLCJleHRyYUZpZWxkVW5pY29kZUNvbW1lbnQiLCJ2ZW5kb3JWZXJzaW9uIiwidmVuZG9ySWQiLCJyZWFkRXh0cmFGaWVsZEFFUyIsImV4dHJhRmllbGROVEZTIiwidGFnMURhdGEiLCJ0YWdWYWx1ZSIsImF0dHJpYnV0ZVNpemUiLCJ0YWcxVmlldyIsInJhd0xhc3RBY2Nlc3NEYXRlIiwicmF3Q3JlYXRpb25EYXRlIiwiZ2V0RGF0ZU5URlMiLCJleHRyYUZpZWxkRGF0YSIsInJlYWRFeHRyYUZpZWxkTlRGUyIsImV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcCIsImZsYWdzIiwidGltZVByb3BlcnRpZXMiLCJ0aW1lUmF3UHJvcGVydGllcyIsImluZGV4UHJvcGVydHkiLCJ0aW1lIiwicmF3UHJvcGVydHlOYW1lIiwicmVhZEV4dHJhRmllbGRFeHRlbmRlZFRpbWVzdGFtcCIsImV4dHJhRmllbGRVU0RaIiwiZXh0cmFGaWVsZFVuaWNvZGUiLCJ2YWxpZCIsInRpbWVSYXciLCJkYXRlIiwiQmlnSW50IiwidmlldyIsIkJsb2IiLCJidWZzaXplIiwiYnVmZmVySW5kZXgiLCJidWZmZXJTaXplIiwiYnVmZmVycyIsIm5vbW9yZWlucHV0IiwiU29uZ0xvYWRlciIsImlzT3ZlciIsInNldElzT3ZlciIsInNldEZpbGVzIiwibG9hZFNvbmdzIiwiZmlsZXMiLCJwYXJzZSIsIm9uRHJhZ092ZXIiLCJvbkRyYWdMZWF2ZSIsIm9uRHJvcCIsImRyb3BwZWRGaWxlcyIsImRhdGFUcmFuc2ZlciIsIm9ubG9hZGVuZCIsInJlYWRBc0RhdGFVUkwiLCJkaXNwbGF5IiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiaGVpZ2h0Iiwid2lkdGgiLCJiYWNrZ3JvdW5kQ29sb3IiLCJEYXNoYm9hZCIsImluaXRTb25ncyIsImdldEVsZW1lbnRCeUlkIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwic2NvcGUiLCJyZWdpc3RyYXRpb24iLCJpbnN0YWxsaW5nIiwid2FpdGluZyIsImFjdGl2ZSJdLCJzb3VyY2VSb290IjoiIn0=